
stm32f411_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017f8c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a7a4  08018140  08018140  00028140  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080228e4  080228e4  00040548  2**0
                  CONTENTS
  4 .ARM          00000008  080228e4  080228e4  000328e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080228ec  080228ec  00040548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080228ec  080228ec  000328ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080228f0  080228f0  000328f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000548  20000000  080228f4  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000082b0  20000580  08022e3c  00040580  2**6
                  ALLOC
 10 ._user_heap_stack 00000600  20008830  08022e3c  00048830  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040548  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037173  00000000  00000000  00040578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000084c7  00000000  00000000  000776eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e90  00000000  00000000  0007fbb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001b20  00000000  00000000  00081a48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a32  00000000  00000000  00083568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00033298  00000000  00000000  000a5f9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094a3e  00000000  00000000  000d9232  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016dc70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d70  00000000  00000000  0016dcc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000580 	.word	0x20000580
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08018114 	.word	0x08018114

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000584 	.word	0x20000584
 80001dc:	08018114 	.word	0x08018114

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <apInit>:




void apInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  cliOpen(_DEF_UART1, 57600);
 8000fd0:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	f000 fb8b 	bl	80016f0 <cliOpen>
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <apMain>:

void apMain(void)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
  uint32_t pre_time;


  pre_time = millis();
 8000fe4:	f000 f839 	bl	800105a <millis>
 8000fe8:	6078      	str	r0, [r7, #4]
  while(1)
  {
    if (millis()-pre_time >= 500)
 8000fea:	f000 f836 	bl	800105a <millis>
 8000fee:	4602      	mov	r2, r0
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000ff8:	d305      	bcc.n	8001006 <apMain+0x28>
    {
      pre_time = millis();
 8000ffa:	f000 f82e 	bl	800105a <millis>
 8000ffe:	6078      	str	r0, [r7, #4]
      ledToggle(_DEF_LED1);
 8001000:	2000      	movs	r0, #0
 8001002:	f002 fc1b 	bl	800383c <ledToggle>
    }

    cliMain();
 8001006:	f000 fc2b 	bl	8001860 <cliMain>
    if (millis()-pre_time >= 500)
 800100a:	e7ee      	b.n	8000fea <apMain+0xc>

0800100c <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
	  HAL_Init();
 8001012:	f00c fde5 	bl	800dbe0 <HAL_Init>
	  SystemClock_Config();
 8001016:	f000 f833 	bl	8001080 <SystemClock_Config>

	  //__HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b08      	ldr	r3, [pc, #32]	; (8001040 <bspInit+0x34>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	4a07      	ldr	r2, [pc, #28]	; (8001040 <bspInit+0x34>)
 8001024:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001028:	6313      	str	r3, [r2, #48]	; 0x30
 800102a:	4b05      	ldr	r3, [pc, #20]	; (8001040 <bspInit+0x34>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]


}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800

08001044 <delay>:


void delay(uint32_t ms)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f00c fe39 	bl	800dcc4 <HAL_Delay>
#endif
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <millis>:




uint32_t millis(void)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800105e:	f00c fe25 	bl	800dcac <HAL_GetTick>
 8001062:	4603      	mov	r3, r0
}
 8001064:	4618      	mov	r0, r3
 8001066:	bd80      	pop	{r7, pc}

08001068 <__io_putchar>:



int __io_putchar(int ch)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
//  uartWrite(_DEF_UART2, (uint8_t *)&ch, 1);
  return 1;
 8001070:	2301      	movs	r3, #1
}
 8001072:	4618      	mov	r0, r3
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
	...

08001080 <SystemClock_Config>:



void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f013 fee0 	bl	8014e54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <SystemClock_Config+0xc8>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a26      	ldr	r2, [pc, #152]	; (8001148 <SystemClock_Config+0xc8>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b24      	ldr	r3, [pc, #144]	; (8001148 <SystemClock_Config+0xc8>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <SystemClock_Config+0xcc>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	4a20      	ldr	r2, [pc, #128]	; (800114c <SystemClock_Config+0xcc>)
 80010ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <SystemClock_Config+0xcc>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010dc:	2301      	movs	r3, #1
 80010de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e6:	2302      	movs	r3, #2
 80010e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010f0:	2319      	movs	r3, #25
 80010f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80010f4:	23c0      	movs	r3, #192	; 0xc0
 80010f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010fc:	2304      	movs	r3, #4
 80010fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001100:	f107 0320 	add.w	r3, r7, #32
 8001104:	4618      	mov	r0, r3
 8001106:	f00f f919 	bl	801033c <HAL_RCC_OscConfig>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001110:	f000 f81e 	bl	8001150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001114:	230f      	movs	r3, #15
 8001116:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001118:	2302      	movs	r3, #2
 800111a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	2103      	movs	r1, #3
 8001130:	4618      	mov	r0, r3
 8001132:	f00f fb7b 	bl	801082c <HAL_RCC_ClockConfig>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800113c:	f000 f808 	bl	8001150 <Error_Handler>
  }
}
 8001140:	bf00      	nop
 8001142:	3750      	adds	r7, #80	; 0x50
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40007000 	.word	0x40007000

08001150 <Error_Handler>:


void Error_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001158:	e7fe      	b.n	8001158 <Error_Handler+0x8>
	...

0800115c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_MspInit+0x4c>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_MspInit+0x4c>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b0d      	ldr	r3, [pc, #52]	; (80011a8 <HAL_MspInit+0x4c>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_MspInit+0x4c>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001186:	4a08      	ldr	r2, [pc, #32]	; (80011a8 <HAL_MspInit+0x4c>)
 8001188:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118c:	6413      	str	r3, [r2, #64]	; 0x40
 800118e:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_MspInit+0x4c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001196:	603b      	str	r3, [r7, #0]
 8001198:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	40023800 	.word	0x40023800

080011ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <NMI_Handler+0x4>

080011b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b6:	e7fe      	b.n	80011b6 <HardFault_Handler+0x4>

080011b8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <MemManage_Handler+0x4>

080011be <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <BusFault_Handler+0x4>

080011c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler+0x4>

080011ca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr

080011d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f8:	f00c fd44 	bl	800dc84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <SDIO_IRQHandler+0x10>)
 8001206:	f00f ff2f 	bl	8011068 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200073d8 	.word	0x200073d8

08001214 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA2_Stream1_IRQHandler+0x10>)
 800121a:	f00c ffb1 	bl	800e180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	2000745c 	.word	0x2000745c

08001228 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA2_Stream3_IRQHandler+0x10>)
 800122e:	f00c ffa7 	bl	800e180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20007318 	.word	0x20007318

0800123c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001240:	4802      	ldr	r0, [pc, #8]	; (800124c <OTG_FS_IRQHandler+0x10>)
 8001242:	f00e f81a 	bl	800f27a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	200083f4 	.word	0x200083f4

08001250 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA2_Stream6_IRQHandler+0x10>)
 8001256:	f00c ff93 	bl	800e180 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20007378 	.word	0x20007378

08001264 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <SPI4_IRQHandler+0x10>)
 800126a:	f011 faa1 	bl	80127b0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200074bc 	.word	0x200074bc

08001278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
	return 1;
 800127c:	2301      	movs	r3, #1
}
 800127e:	4618      	mov	r0, r3
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr

08001288 <_kill>:

int _kill(int pid, int sig)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001292:	f013 fda7 	bl	8014de4 <__errno>
 8001296:	4603      	mov	r3, r0
 8001298:	2216      	movs	r2, #22
 800129a:	601a      	str	r2, [r3, #0]
	return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <_exit>:

void _exit (int status)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012b0:	f04f 31ff 	mov.w	r1, #4294967295
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f7ff ffe7 	bl	8001288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80012ba:	e7fe      	b.n	80012ba <_exit+0x12>

080012bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c8:	2300      	movs	r3, #0
 80012ca:	617b      	str	r3, [r7, #20]
 80012cc:	e00a      	b.n	80012e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ce:	f3af 8000 	nop.w
 80012d2:	4601      	mov	r1, r0
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	1c5a      	adds	r2, r3, #1
 80012d8:	60ba      	str	r2, [r7, #8]
 80012da:	b2ca      	uxtb	r2, r1
 80012dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	3301      	adds	r3, #1
 80012e2:	617b      	str	r3, [r7, #20]
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbf0      	blt.n	80012ce <_read+0x12>
	}

return len;
 80012ec:	687b      	ldr	r3, [r7, #4]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3718      	adds	r7, #24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	60f8      	str	r0, [r7, #12]
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
 8001306:	e009      	b.n	800131c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff fea9 	bl	8001068 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697a      	ldr	r2, [r7, #20]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	429a      	cmp	r2, r3
 8001322:	dbf1      	blt.n	8001308 <_write+0x12>
	}
	return len;
 8001324:	687b      	ldr	r3, [r7, #4]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <_close>:

int _close(int file)
{
 800132e:	b480      	push	{r7}
 8001330:	b083      	sub	sp, #12
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
	return -1;
 8001336:	f04f 33ff 	mov.w	r3, #4294967295
}
 800133a:	4618      	mov	r0, r3
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001356:	605a      	str	r2, [r3, #4]
	return 0;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr

08001366 <_isatty>:

int _isatty(int file)
{
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
	return 1;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr

0800137c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800137c:	b480      	push	{r7}
 800137e:	b085      	sub	sp, #20
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	return 0;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3714      	adds	r7, #20
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013a0:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <_sbrk+0x5c>)
 80013a2:	4b15      	ldr	r3, [pc, #84]	; (80013f8 <_sbrk+0x60>)
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_sbrk+0x64>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d102      	bne.n	80013ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013b4:	4b11      	ldr	r3, [pc, #68]	; (80013fc <_sbrk+0x64>)
 80013b6:	4a12      	ldr	r2, [pc, #72]	; (8001400 <_sbrk+0x68>)
 80013b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ba:	4b10      	ldr	r3, [pc, #64]	; (80013fc <_sbrk+0x64>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d207      	bcs.n	80013d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c8:	f013 fd0c 	bl	8014de4 <__errno>
 80013cc:	4603      	mov	r3, r0
 80013ce:	220c      	movs	r2, #12
 80013d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e009      	b.n	80013ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d8:	4b08      	ldr	r3, [pc, #32]	; (80013fc <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013de:	4b07      	ldr	r3, [pc, #28]	; (80013fc <_sbrk+0x64>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	4413      	add	r3, r2
 80013e6:	4a05      	ldr	r2, [pc, #20]	; (80013fc <_sbrk+0x64>)
 80013e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013ea:	68fb      	ldr	r3, [r7, #12]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3718      	adds	r7, #24
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	20020000 	.word	0x20020000
 80013f8:	00000400 	.word	0x00000400
 80013fc:	2000059c 	.word	0x2000059c
 8001400:	20008830 	.word	0x20008830

08001404 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <SystemInit+0x20>)
 800140a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <SystemInit+0x20>)
 8001410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001460 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800142c:	480d      	ldr	r0, [pc, #52]	; (8001464 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142e:	490e      	ldr	r1, [pc, #56]	; (8001468 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001430:	4a0e      	ldr	r2, [pc, #56]	; (800146c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001432:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001434:	e002      	b.n	800143c <LoopCopyDataInit>

08001436 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001436:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001438:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800143a:	3304      	adds	r3, #4

0800143c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800143c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001440:	d3f9      	bcc.n	8001436 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001442:	4a0b      	ldr	r2, [pc, #44]	; (8001470 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001444:	4c0b      	ldr	r4, [pc, #44]	; (8001474 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001448:	e001      	b.n	800144e <LoopFillZerobss>

0800144a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800144a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800144c:	3204      	adds	r2, #4

0800144e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001450:	d3fb      	bcc.n	800144a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001452:	f7ff ffd7 	bl	8001404 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001456:	f013 fccb 	bl	8014df0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800145a:	f013 fcb7 	bl	8014dcc <main>
  bx  lr    
 800145e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001460:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001468:	20000548 	.word	0x20000548
  ldr r2, =_sidata
 800146c:	080228f4 	.word	0x080228f4
  ldr r2, =_sbss
 8001470:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8001474:	20008830 	.word	0x20008830

08001478 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001478:	e7fe      	b.n	8001478 <ADC_IRQHandler>
	...

0800147c <buttonInit>:




bool buttonInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b088      	sub	sp, #32
 8001480:	af00      	add	r7, sp, #0

	bool ret = true;
 8001482:	2301      	movs	r3, #1
 8001484:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	2200      	movs	r2, #0
 800148a:	601a      	str	r2, [r3, #0]
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001494:	2300      	movs	r3, #0
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	4b1c      	ldr	r3, [pc, #112]	; (800150c <buttonInit+0x90>)
 800149a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <buttonInit+0x90>)
 800149e:	f043 0301 	orr.w	r3, r3, #1
 80014a2:	6313      	str	r3, [r2, #48]	; 0x30
 80014a4:	4b19      	ldr	r3, [pc, #100]	; (800150c <buttonInit+0x90>)
 80014a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a8:	f003 0301 	and.w	r3, r3, #1
 80014ac:	603b      	str	r3, [r7, #0]
 80014ae:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b0:	2300      	movs	r3, #0
 80014b2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<BUTTON_MAX_CH; i++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e019      	b.n	80014f2 <buttonInit+0x76>
	{
		GPIO_InitStruct.Pin = button_tbi[i].pin;
 80014be:	4914      	ldr	r1, [pc, #80]	; (8001510 <buttonInit+0x94>)
 80014c0:	69fa      	ldr	r2, [r7, #28]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3304      	adds	r3, #4
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(button_tbi[i].port, &GPIO_InitStruct);
 80014d2:	490f      	ldr	r1, [pc, #60]	; (8001510 <buttonInit+0x94>)
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	440b      	add	r3, r1
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	1d3a      	adds	r2, r7, #4
 80014e4:	4611      	mov	r1, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f00d fba8 	bl	800ec3c <HAL_GPIO_Init>
	for (int i=0; i<BUTTON_MAX_CH; i++)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	3301      	adds	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	dde2      	ble.n	80014be <buttonInit+0x42>
	}

#ifdef _USE_HW_CLI
	cliAdd("button", cliButton);
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <buttonInit+0x98>)
 80014fa:	4807      	ldr	r0, [pc, #28]	; (8001518 <buttonInit+0x9c>)
 80014fc:	f000 fed2 	bl	80022a4 <cliAdd>
#endif /* _USE_HW_CLI */
	return ret;
 8001500:	7efb      	ldrb	r3, [r7, #27]

}
 8001502:	4618      	mov	r0, r3
 8001504:	3720      	adds	r7, #32
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023800 	.word	0x40023800
 8001510:	20000004 	.word	0x20000004
 8001514:	0800158d 	.word	0x0800158d
 8001518:	08018140 	.word	0x08018140

0800151c <buttonGetPressed>:


bool buttonGetPressed(uint8_t ch)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 8001526:	2300      	movs	r3, #0
 8001528:	73fb      	strb	r3, [r7, #15]


	if(ch >= BUTTON_MAX_CH)
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <buttonGetPressed+0x18>
	{
		return false;
 8001530:	2300      	movs	r3, #0
 8001532:	e024      	b.n	800157e <buttonGetPressed+0x62>
	}


	if(HAL_GPIO_ReadPin(button_tbi[ch].port, button_tbi[ch].pin) == button_tbi[ch].on_state)
 8001534:	79fa      	ldrb	r2, [r7, #7]
 8001536:	4914      	ldr	r1, [pc, #80]	; (8001588 <buttonGetPressed+0x6c>)
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	6818      	ldr	r0, [r3, #0]
 8001544:	79fa      	ldrb	r2, [r7, #7]
 8001546:	4910      	ldr	r1, [pc, #64]	; (8001588 <buttonGetPressed+0x6c>)
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	3304      	adds	r3, #4
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4619      	mov	r1, r3
 800155a:	f00d fcf3 	bl	800ef44 <HAL_GPIO_ReadPin>
 800155e:	4603      	mov	r3, r0
 8001560:	4618      	mov	r0, r3
 8001562:	79fa      	ldrb	r2, [r7, #7]
 8001564:	4908      	ldr	r1, [pc, #32]	; (8001588 <buttonGetPressed+0x6c>)
 8001566:	4613      	mov	r3, r2
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	4413      	add	r3, r2
 800156c:	009b      	lsls	r3, r3, #2
 800156e:	440b      	add	r3, r1
 8001570:	3308      	adds	r3, #8
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	4298      	cmp	r0, r3
 8001576:	d101      	bne.n	800157c <buttonGetPressed+0x60>
	{
		ret = true;
 8001578:	2301      	movs	r3, #1
 800157a:	73fb      	strb	r3, [r7, #15]
	}


	return ret;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000004 	.word	0x20000004

0800158c <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8001594:	2300      	movs	r3, #0
 8001596:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args -> isStr(0, "show") == true)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	881b      	ldrh	r3, [r3, #0]
 800159c:	2b01      	cmp	r3, #1
 800159e:	d128      	bne.n	80015f2 <cliButton+0x66>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	4919      	ldr	r1, [pc, #100]	; (800160c <cliButton+0x80>)
 80015a6:	2000      	movs	r0, #0
 80015a8:	4798      	blx	r3
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d020      	beq.n	80015f2 <cliButton+0x66>
	{
		while(cliKeepLoop())
 80015b0:	e018      	b.n	80015e4 <cliButton+0x58>
		{
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	e00c      	b.n	80015d2 <cliButton+0x46>
			{
				cliPrintf("%d", buttonGetPressed(i));
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ffad 	bl	800151c <buttonGetPressed>
 80015c2:	4603      	mov	r3, r0
 80015c4:	4619      	mov	r1, r3
 80015c6:	4812      	ldr	r0, [pc, #72]	; (8001610 <cliButton+0x84>)
 80015c8:	f000 fd5c 	bl	8002084 <cliPrintf>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 80015cc:	68bb      	ldr	r3, [r7, #8]
 80015ce:	3301      	adds	r3, #1
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	ddef      	ble.n	80015b8 <cliButton+0x2c>
			}
			cliPrintf("\n");
 80015d8:	480e      	ldr	r0, [pc, #56]	; (8001614 <cliButton+0x88>)
 80015da:	f000 fd53 	bl	8002084 <cliPrintf>
			delay(100);
 80015de:	2064      	movs	r0, #100	; 0x64
 80015e0:	f7ff fd30 	bl	8001044 <delay>
		while(cliKeepLoop())
 80015e4:	f000 fe48 	bl	8002278 <cliKeepLoop>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d1e1      	bne.n	80015b2 <cliButton+0x26>
		}

		ret =true;
 80015ee:	2301      	movs	r3, #1
 80015f0:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 80015f2:	7bfb      	ldrb	r3, [r7, #15]
 80015f4:	f083 0301 	eor.w	r3, r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d002      	beq.n	8001604 <cliButton+0x78>
	{
		cliPrintf("button show\n");
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <cliButton+0x8c>)
 8001600:	f000 fd40 	bl	8002084 <cliPrintf>
	}
}
 8001604:	bf00      	nop
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	08018148 	.word	0x08018148
 8001610:	08018150 	.word	0x08018150
 8001614:	08018154 	.word	0x08018154
 8001618:	08018158 	.word	0x08018158

0800161c <cdcInit>:

static bool is_init = false;


bool cdcInit(void)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
  bool ret = true;
 8001622:	2301      	movs	r3, #1
 8001624:	71fb      	strb	r3, [r7, #7]

  is_init = true;
 8001626:	4b05      	ldr	r3, [pc, #20]	; (800163c <cdcInit+0x20>)
 8001628:	2201      	movs	r2, #1
 800162a:	701a      	strb	r2, [r3, #0]

  return ret;
 800162c:	79fb      	ldrb	r3, [r7, #7]
}
 800162e:	4618      	mov	r0, r3
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	200005a0 	.word	0x200005a0

08001640 <cdcIsInit>:

bool cdcIsInit(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
	return is_init;
 8001644:	4b03      	ldr	r3, [pc, #12]	; (8001654 <cdcIsInit+0x14>)
 8001646:	781b      	ldrb	r3, [r3, #0]

}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	200005a0 	.word	0x200005a0

08001658 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <cliInit+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 8001662:	4b1a      	ldr	r3, [pc, #104]	; (80016cc <cliInit+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 8001668:	4b18      	ldr	r3, [pc, #96]	; (80016cc <cliInit+0x74>)
 800166a:	2200      	movs	r2, #0
 800166c:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 800166e:	4b17      	ldr	r3, [pc, #92]	; (80016cc <cliInit+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 8001676:	4b15      	ldr	r3, [pc, #84]	; (80016cc <cliInit+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 800167e:	4b13      	ldr	r3, [pc, #76]	; (80016cc <cliInit+0x74>)
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <cliInit+0x74>)
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 800168e:	4b0f      	ldr	r3, [pc, #60]	; (80016cc <cliInit+0x74>)
 8001690:	4a0f      	ldr	r2, [pc, #60]	; (80016d0 <cliInit+0x78>)
 8001692:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <cliInit+0x74>)
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <cliInit+0x7c>)
 800169a:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <cliInit+0x74>)
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <cliInit+0x80>)
 80016a2:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <cliInit+0x74>)
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <cliInit+0x84>)
 80016aa:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 80016ae:	4807      	ldr	r0, [pc, #28]	; (80016cc <cliInit+0x74>)
 80016b0:	f000 fb5e 	bl	8001d70 <cliLineClean>


  cliAdd("help", cliShowList);
 80016b4:	490a      	ldr	r1, [pc, #40]	; (80016e0 <cliInit+0x88>)
 80016b6:	480b      	ldr	r0, [pc, #44]	; (80016e4 <cliInit+0x8c>)
 80016b8:	f000 fdf4 	bl	80022a4 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 80016bc:	490a      	ldr	r1, [pc, #40]	; (80016e8 <cliInit+0x90>)
 80016be:	480b      	ldr	r0, [pc, #44]	; (80016ec <cliInit+0x94>)
 80016c0:	f000 fdf0 	bl	80022a4 <cliAdd>

  return true;
 80016c4:	2301      	movs	r3, #1
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20006c9c 	.word	0x20006c9c
 80016d0:	08002135 	.word	0x08002135
 80016d4:	08002185 	.word	0x08002185
 80016d8:	080021dd 	.word	0x080021dd
 80016dc:	08002225 	.word	0x08002225
 80016e0:	08002339 	.word	0x08002339
 80016e4:	08018168 	.word	0x08018168
 80016e8:	080023a9 	.word	0x080023a9
 80016ec:	08018170 	.word	0x08018170

080016f0 <cliOpen>:

bool cliOpen(uint8_t ch, uint32_t baud)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	6039      	str	r1, [r7, #0]
 80016fa:	71fb      	strb	r3, [r7, #7]
  cli_node.ch = ch;
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <cliOpen+0x38>)
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	7013      	strb	r3, [r2, #0]
  cli_node.baud = baud;
 8001702:	4a09      	ldr	r2, [pc, #36]	; (8001728 <cliOpen+0x38>)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	6053      	str	r3, [r2, #4]

  cli_node.is_open = uartOpen(ch, baud);
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	6839      	ldr	r1, [r7, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f002 ff83 	bl	8004618 <uartOpen>
 8001712:	4603      	mov	r3, r0
 8001714:	461a      	mov	r2, r3
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <cliOpen+0x38>)
 8001718:	721a      	strb	r2, [r3, #8]

  return cli_node.is_open;
 800171a:	4b03      	ldr	r3, [pc, #12]	; (8001728 <cliOpen+0x38>)
 800171c:	7a1b      	ldrb	r3, [r3, #8]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20006c9c 	.word	0x20006c9c

0800172c <cliShowLog>:
  cli_node.is_log = false;
  return true;
}

void cliShowLog(cli_t *p_cli)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if (cli_node.is_log == true)
 8001734:	4b34      	ldr	r3, [pc, #208]	; (8001808 <cliShowLog+0xdc>)
 8001736:	7a5b      	ldrb	r3, [r3, #9]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d061      	beq.n	8001800 <cliShowLog+0xd4>
  {
    uartPrintf(p_cli->log_ch, "Cursor  : %d\n", p_cli->line.cursor);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	7a98      	ldrb	r0, [r3, #10]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001746:	461a      	mov	r2, r3
 8001748:	4930      	ldr	r1, [pc, #192]	; (800180c <cliShowLog+0xe0>)
 800174a:	f002 ffc7 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "Count   : %d\n", p_cli->line.count);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7a98      	ldrb	r0, [r3, #10]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001758:	461a      	mov	r2, r3
 800175a:	492d      	ldr	r1, [pc, #180]	; (8001810 <cliShowLog+0xe4>)
 800175c:	f002 ffbe 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf_len : %d\n", p_cli->line.buf_len);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7a98      	ldrb	r0, [r3, #10]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	f893 32e4 	ldrb.w	r3, [r3, #740]	; 0x2e4
 800176a:	461a      	mov	r2, r3
 800176c:	4929      	ldr	r1, [pc, #164]	; (8001814 <cliShowLog+0xe8>)
 800176e:	f002 ffb5 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "buf     : %s\n", p_cli->line.buf);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7a98      	ldrb	r0, [r3, #10]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 800177c:	461a      	mov	r2, r3
 800177e:	4926      	ldr	r1, [pc, #152]	; (8001818 <cliShowLog+0xec>)
 8001780:	f002 ffac 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_i  : %d\n", p_cli->hist_line_i);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7a98      	ldrb	r0, [r3, #10]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 800178e:	461a      	mov	r2, r3
 8001790:	4922      	ldr	r1, [pc, #136]	; (800181c <cliShowLog+0xf0>)
 8001792:	f002 ffa3 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_lt : %d\n", p_cli->hist_line_last);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a98      	ldrb	r0, [r3, #10]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 80017a0:	461a      	mov	r2, r3
 80017a2:	491f      	ldr	r1, [pc, #124]	; (8001820 <cliShowLog+0xf4>)
 80017a4:	f002 ff9a 	bl	80046dc <uartPrintf>
    uartPrintf(p_cli->log_ch, "line_c  : %d\n", p_cli->hist_line_count);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	7a98      	ldrb	r0, [r3, #10]
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80017b2:	461a      	mov	r2, r3
 80017b4:	491b      	ldr	r1, [pc, #108]	; (8001824 <cliShowLog+0xf8>)
 80017b6:	f002 ff91 	bl	80046dc <uartPrintf>

    for (int i=0; i<p_cli->hist_line_count; i++)
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e012      	b.n	80017e6 <cliShowLog+0xba>
    {
      uartPrintf(p_cli->log_ch, "buf %d   : %s\n", i, p_cli->line_buf[i].buf);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7a98      	ldrb	r0, [r3, #10]
 80017c4:	68fa      	ldr	r2, [r7, #12]
 80017c6:	4613      	mov	r3, r2
 80017c8:	015b      	lsls	r3, r3, #5
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	4413      	add	r3, r2
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	4913      	ldr	r1, [pc, #76]	; (8001828 <cliShowLog+0xfc>)
 80017dc:	f002 ff7e 	bl	80046dc <uartPrintf>
    for (int i=0; i<p_cli->hist_line_count; i++)
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	3301      	adds	r3, #1
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 80017ec:	461a      	mov	r2, r3
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4293      	cmp	r3, r2
 80017f2:	dbe5      	blt.n	80017c0 <cliShowLog+0x94>
    }
    uartPrintf(p_cli->log_ch, "\n");
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	7a9b      	ldrb	r3, [r3, #10]
 80017f8:	490c      	ldr	r1, [pc, #48]	; (800182c <cliShowLog+0x100>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f002 ff6e 	bl	80046dc <uartPrintf>
  }
}
 8001800:	bf00      	nop
 8001802:	3710      	adds	r7, #16
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20006c9c 	.word	0x20006c9c
 800180c:	08018174 	.word	0x08018174
 8001810:	08018184 	.word	0x08018184
 8001814:	08018194 	.word	0x08018194
 8001818:	080181a4 	.word	0x080181a4
 800181c:	080181b4 	.word	0x080181b4
 8001820:	080181c4 	.word	0x080181c4
 8001824:	080181d4 	.word	0x080181d4
 8001828:	080181e4 	.word	0x080181e4
 800182c:	080181f4 	.word	0x080181f4

08001830 <cliShowPrompt>:

void cliShowPrompt(cli_t *p_cli)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uartPrintf(p_cli->ch, "\n\r");
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4906      	ldr	r1, [pc, #24]	; (8001858 <cliShowPrompt+0x28>)
 800183e:	4618      	mov	r0, r3
 8001840:	f002 ff4c 	bl	80046dc <uartPrintf>
  uartPrintf(p_cli->ch, CLI_PROMPT_STR);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <cliShowPrompt+0x2c>)
 800184a:	4618      	mov	r0, r3
 800184c:	f002 ff46 	bl	80046dc <uartPrintf>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	080181f8 	.word	0x080181f8
 800185c:	080181fc 	.word	0x080181fc

08001860 <cliMain>:

bool cliMain(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  if (cli_node.is_open != true)
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <cliMain+0x40>)
 8001866:	7a1b      	ldrb	r3, [r3, #8]
 8001868:	f083 0301 	eor.w	r3, r3, #1
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <cliMain+0x16>
  {
    return false;
 8001872:	2300      	movs	r3, #0
 8001874:	e012      	b.n	800189c <cliMain+0x3c>
  }

  if (uartAvailable(cli_node.ch) > 0)
 8001876:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <cliMain+0x40>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f002 feea 	bl	8004654 <uartAvailable>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <cliMain+0x3a>
  {
    cliUpdate(&cli_node, uartRead(cli_node.ch));
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <cliMain+0x40>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f002 fef7 	bl	800467e <uartRead>
 8001890:	4603      	mov	r3, r0
 8001892:	4619      	mov	r1, r3
 8001894:	4802      	ldr	r0, [pc, #8]	; (80018a0 <cliMain+0x40>)
 8001896:	f000 f805 	bl	80018a4 <cliUpdate>
  }

  return true;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	20006c9c 	.word	0x20006c9c

080018a4 <cliUpdate>:

bool cliUpdate(cli_t *p_cli, uint8_t rx_data)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08c      	sub	sp, #48	; 0x30
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  bool ret = false;
 80018b0:	2300      	movs	r3, #0
 80018b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t tx_buf[8];
  cli_line_t *line;

  line = &p_cli->line;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 80018bc:	61fb      	str	r3, [r7, #28]


  if (p_cli->state == CLI_RX_IDLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	7c1b      	ldrb	r3, [r3, #16]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	f040 8168 	bne.w	8001b98 <cliUpdate+0x2f4>
  {
    switch(rx_data)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	2b7f      	cmp	r3, #127	; 0x7f
 80018cc:	d02a      	beq.n	8001924 <cliUpdate+0x80>
 80018ce:	2b7f      	cmp	r3, #127	; 0x7f
 80018d0:	f300 80da 	bgt.w	8001a88 <cliUpdate+0x1e4>
 80018d4:	2b1b      	cmp	r3, #27
 80018d6:	d021      	beq.n	800191c <cliUpdate+0x78>
 80018d8:	2b1b      	cmp	r3, #27
 80018da:	f300 80d5 	bgt.w	8001a88 <cliUpdate+0x1e4>
 80018de:	2b08      	cmp	r3, #8
 80018e0:	d062      	beq.n	80019a8 <cliUpdate+0x104>
 80018e2:	2b0d      	cmp	r3, #13
 80018e4:	f040 80d0 	bne.w	8001a88 <cliUpdate+0x1e4>
    {
      // 엔터
      //
      case CLI_KEY_ENTER:
        if (line->count > 0)
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <cliUpdate+0x5a>
        {
          cliLineAdd(p_cli);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fa56 	bl	8001da4 <cliLineAdd>
          cliRunCmd(p_cli);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 fb21 	bl	8001f40 <cliRunCmd>
        }

        line->count = 0;
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        line->cursor = 0;
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        line->buf[0] = 0;
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]
        cliShowPrompt(p_cli);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff8b 	bl	8001830 <cliShowPrompt>
        break;
 800191a:	e144      	b.n	8001ba6 <cliUpdate+0x302>


      case CLI_KEY_ESC:
        p_cli->state = CLI_RX_SP1;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	741a      	strb	r2, [r3, #16]
        break;
 8001922:	e140      	b.n	8001ba6 <cliUpdate+0x302>


      // DEL
      //
      case CLI_KEY_DEL:
        if (line->cursor < line->count)
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001930:	429a      	cmp	r2, r3
 8001932:	f080 8133 	bcs.w	8001b9c <cliUpdate+0x2f8>
        {
          uint8_t mov_len;

          mov_len = line->count - line->cursor;
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	76fb      	strb	r3, [r7, #27]
          for (int i=1; i<mov_len; i++)
 8001946:	2301      	movs	r3, #1
 8001948:	62fb      	str	r3, [r7, #44]	; 0x2c
 800194a:	e013      	b.n	8001974 <cliUpdate+0xd0>
          {
            line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001952:	461a      	mov	r2, r3
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	441a      	add	r2, r3
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800195e:	4619      	mov	r1, r3
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	440b      	add	r3, r1
 8001964:	3b01      	subs	r3, #1
 8001966:	69f9      	ldr	r1, [r7, #28]
 8001968:	5c89      	ldrb	r1, [r1, r2]
 800196a:	69fa      	ldr	r2, [r7, #28]
 800196c:	54d1      	strb	r1, [r2, r3]
          for (int i=1; i<mov_len; i++)
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	3301      	adds	r3, #1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001974:	7efb      	ldrb	r3, [r7, #27]
 8001976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001978:	429a      	cmp	r2, r3
 800197a:	dbe7      	blt.n	800194c <cliUpdate+0xa8>
          }

          line->count--;
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001982:	3b01      	subs	r3, #1
 8001984:	b2da      	uxtb	r2, r3
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          line->buf[line->count] = 0;
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001992:	461a      	mov	r2, r3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2100      	movs	r1, #0
 8001998:	5499      	strb	r1, [r3, r2]

          uartPrintf(p_cli->ch, "\x1B[1P");
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	498e      	ldr	r1, [pc, #568]	; (8001bd8 <cliUpdate+0x334>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f002 fe9b 	bl	80046dc <uartPrintf>
        }
        break;
 80019a6:	e0f9      	b.n	8001b9c <cliUpdate+0x2f8>


      // 백스페이스
      //
      case CLI_KEY_BACK:
        if (line->count > 0 && line->cursor > 0)
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d055      	beq.n	8001a5e <cliUpdate+0x1ba>
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d050      	beq.n	8001a5e <cliUpdate+0x1ba>
        {
          if (line->cursor == line->count)
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d10e      	bne.n	80019ea <cliUpdate+0x146>
          {
            line->count--;
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019d2:	3b01      	subs	r3, #1
 80019d4:	b2da      	uxtb	r2, r3
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019e2:	461a      	mov	r2, r3
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2100      	movs	r1, #0
 80019e8:	5499      	strb	r1, [r3, r2]
          }

          if (line->cursor < line->count)
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d231      	bcs.n	8001a5e <cliUpdate+0x1ba>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	76bb      	strb	r3, [r7, #26]

            for (int i=0; i<mov_len; i++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0e:	e013      	b.n	8001a38 <cliUpdate+0x194>
            {
              line->buf[line->cursor + i - 1] = line->buf[line->cursor + i];
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a16:	461a      	mov	r2, r3
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	441a      	add	r2, r3
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a22:	4619      	mov	r1, r3
 8001a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a26:	440b      	add	r3, r1
 8001a28:	3b01      	subs	r3, #1
 8001a2a:	69f9      	ldr	r1, [r7, #28]
 8001a2c:	5c89      	ldrb	r1, [r1, r2]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	3301      	adds	r3, #1
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a38:	7ebb      	ldrb	r3, [r7, #26]
 8001a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	dbe7      	blt.n	8001a10 <cliUpdate+0x16c>
            }

            line->count--;
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a46:	3b01      	subs	r3, #1
 8001a48:	b2da      	uxtb	r2, r3
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->buf[line->count] = 0;
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a56:	461a      	mov	r2, r3
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	5499      	strb	r1, [r3, r2]
          }
        }

        if (line->cursor > 0)
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	f000 809b 	beq.w	8001ba0 <cliUpdate+0x2fc>
        {
          line->cursor--;
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a70:	3b01      	subs	r3, #1
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          uartPrintf(p_cli->ch, "\b \b\x1B[1P");
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	4957      	ldr	r1, [pc, #348]	; (8001bdc <cliUpdate+0x338>)
 8001a80:	4618      	mov	r0, r3
 8001a82:	f002 fe2b 	bl	80046dc <uartPrintf>
        }
        break;
 8001a86:	e08b      	b.n	8001ba0 <cliUpdate+0x2fc>


      default:
        if ((line->count + 1) < line->buf_len)
 8001a88:	69fb      	ldr	r3, [r7, #28]
 8001a8a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001a8e:	3301      	adds	r3, #1
 8001a90:	69fa      	ldr	r2, [r7, #28]
 8001a92:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8001a96:	4293      	cmp	r3, r2
 8001a98:	f280 8084 	bge.w	8001ba4 <cliUpdate+0x300>
        {
          if (line->cursor == line->count)
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001aa2:	69fb      	ldr	r3, [r7, #28]
 8001aa4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d124      	bne.n	8001af6 <cliUpdate+0x252>
          {
            uartWrite(p_cli->ch, &rx_data, 1);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	1cf9      	adds	r1, r7, #3
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f002 fdf8 	bl	80046aa <uartWrite>

            line->buf[line->cursor] = rx_data;
 8001aba:	69fb      	ldr	r3, [r7, #28]
 8001abc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	78f9      	ldrb	r1, [r7, #3]
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ace:	3301      	adds	r3, #1
 8001ad0:	b2da      	uxtb	r2, r3
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ade:	3301      	adds	r3, #1
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aee:	461a      	mov	r2, r3
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	2100      	movs	r1, #0
 8001af4:	5499      	strb	r1, [r3, r2]
          }
          if (line->cursor < line->count)
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d24e      	bcs.n	8001ba4 <cliUpdate+0x300>
          {
            uint8_t mov_len;

            mov_len = line->count - line->cursor;
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b12:	1ad3      	subs	r3, r2, r3
 8001b14:	767b      	strb	r3, [r7, #25]
            for (int i=0; i<mov_len; i++)
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
 8001b1a:	e013      	b.n	8001b44 <cliUpdate+0x2a0>
            {
              line->buf[line->count - i] = line->buf[line->count - i - 1];
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b22:	461a      	mov	r2, r3
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b30:	4619      	mov	r1, r3
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	1acb      	subs	r3, r1, r3
 8001b36:	69f9      	ldr	r1, [r7, #28]
 8001b38:	5c89      	ldrb	r1, [r1, r2]
 8001b3a:	69fa      	ldr	r2, [r7, #28]
 8001b3c:	54d1      	strb	r1, [r2, r3]
            for (int i=0; i<mov_len; i++)
 8001b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b40:	3301      	adds	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
 8001b44:	7e7b      	ldrb	r3, [r7, #25]
 8001b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	dbe7      	blt.n	8001b1c <cliUpdate+0x278>
            }
            line->buf[line->cursor] = rx_data;
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b52:	461a      	mov	r2, r3
 8001b54:	78f9      	ldrb	r1, [r7, #3]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	5499      	strb	r1, [r3, r2]
            line->count++;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b60:	3301      	adds	r3, #1
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
            line->cursor++;
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b70:	3301      	adds	r3, #1
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            line->buf[line->count] = 0;
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001b80:	461a      	mov	r2, r3
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	5499      	strb	r1, [r3, r2]

            uartPrintf(p_cli->ch, "\x1B[4h%c\x1B[4l", rx_data);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	78fa      	ldrb	r2, [r7, #3]
 8001b8e:	4914      	ldr	r1, [pc, #80]	; (8001be0 <cliUpdate+0x33c>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f002 fda3 	bl	80046dc <uartPrintf>
          }
        }
        break;
 8001b96:	e005      	b.n	8001ba4 <cliUpdate+0x300>
    }
  }
 8001b98:	bf00      	nop
 8001b9a:	e004      	b.n	8001ba6 <cliUpdate+0x302>
        break;
 8001b9c:	bf00      	nop
 8001b9e:	e002      	b.n	8001ba6 <cliUpdate+0x302>
        break;
 8001ba0:	bf00      	nop
 8001ba2:	e000      	b.n	8001ba6 <cliUpdate+0x302>
        break;
 8001ba4:	bf00      	nop

  switch(p_cli->state)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	7c1b      	ldrb	r3, [r3, #16]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	2b03      	cmp	r3, #3
 8001bae:	f200 80d2 	bhi.w	8001d56 <cliUpdate+0x4b2>
 8001bb2:	a201      	add	r2, pc, #4	; (adr r2, 8001bb8 <cliUpdate+0x314>)
 8001bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bb8:	08001bc9 	.word	0x08001bc9
 8001bbc:	08001bd1 	.word	0x08001bd1
 8001bc0:	08001be5 	.word	0x08001be5
 8001bc4:	08001d4d 	.word	0x08001d4d
  {
    case CLI_RX_SP1:
      p_cli->state = CLI_RX_SP2;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2202      	movs	r2, #2
 8001bcc:	741a      	strb	r2, [r3, #16]
      break;
 8001bce:	e0c2      	b.n	8001d56 <cliUpdate+0x4b2>

    case CLI_RX_SP2:
      p_cli->state = CLI_RX_SP3;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2203      	movs	r2, #3
 8001bd4:	741a      	strb	r2, [r3, #16]
      break;
 8001bd6:	e0be      	b.n	8001d56 <cliUpdate+0x4b2>
 8001bd8:	08018204 	.word	0x08018204
 8001bdc:	0801820c 	.word	0x0801820c
 8001be0:	08018214 	.word	0x08018214

    case CLI_RX_SP3:
      p_cli->state = CLI_RX_IDLE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	741a      	strb	r2, [r3, #16]

      if (rx_data == CLI_KEY_LEFT)
 8001bea:	78fb      	ldrb	r3, [r7, #3]
 8001bec:	2b44      	cmp	r3, #68	; 0x44
 8001bee:	d11a      	bne.n	8001c26 <cliUpdate+0x382>
      {
        if (line->cursor > 0)
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d015      	beq.n	8001c26 <cliUpdate+0x382>
        {
          line->cursor--;
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          tx_buf[0] = 0x1B;
 8001c0a:	231b      	movs	r3, #27
 8001c0c:	733b      	strb	r3, [r7, #12]
          tx_buf[1] = 0x5B;
 8001c0e:	235b      	movs	r3, #91	; 0x5b
 8001c10:	737b      	strb	r3, [r7, #13]
          tx_buf[2] = rx_data;
 8001c12:	78fb      	ldrb	r3, [r7, #3]
 8001c14:	73bb      	strb	r3, [r7, #14]
          uartWrite(p_cli->ch, tx_buf, 3);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	f107 010c 	add.w	r1, r7, #12
 8001c1e:	2203      	movs	r2, #3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 fd42 	bl	80046aa <uartWrite>
        }
      }

      if (rx_data == CLI_KEY_RIGHT)
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	2b43      	cmp	r3, #67	; 0x43
 8001c2a:	d11d      	bne.n	8001c68 <cliUpdate+0x3c4>
      {
        if (line->cursor < line->buf_len)
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d207      	bcs.n	8001c4c <cliUpdate+0x3a8>
        {
          line->cursor++;
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c42:	3301      	adds	r3, #1
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        tx_buf[0] = 0x1B;
 8001c4c:	231b      	movs	r3, #27
 8001c4e:	733b      	strb	r3, [r7, #12]
        tx_buf[1] = 0x5B;
 8001c50:	235b      	movs	r3, #91	; 0x5b
 8001c52:	737b      	strb	r3, [r7, #13]
        tx_buf[2] = rx_data;
 8001c54:	78fb      	ldrb	r3, [r7, #3]
 8001c56:	73bb      	strb	r3, [r7, #14]
        uartWrite(p_cli->ch, tx_buf, 3);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	f107 010c 	add.w	r1, r7, #12
 8001c60:	2203      	movs	r2, #3
 8001c62:	4618      	mov	r0, r3
 8001c64:	f002 fd21 	bl	80046aa <uartWrite>
      }

      if (rx_data == CLI_KEY_UP)
 8001c68:	78fb      	ldrb	r3, [r7, #3]
 8001c6a:	2b41      	cmp	r3, #65	; 0x41
 8001c6c:	d10c      	bne.n	8001c88 <cliUpdate+0x3e4>
      {
        cliLineChange(p_cli, true);
 8001c6e:	2101      	movs	r1, #1
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f000 f8db 	bl	8001e2c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	781a      	ldrb	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001c80:	4619      	mov	r1, r3
 8001c82:	4610      	mov	r0, r2
 8001c84:	f002 fd2a 	bl	80046dc <uartPrintf>
      }

      if (rx_data == CLI_KEY_DOWN)
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	2b42      	cmp	r3, #66	; 0x42
 8001c8c:	d10c      	bne.n	8001ca8 <cliUpdate+0x404>
      {
        cliLineChange(p_cli, false);
 8001c8e:	2100      	movs	r1, #0
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 f8cb 	bl	8001e2c <cliLineChange>
        uartPrintf(p_cli->ch, (char *)p_cli->line.buf);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	781a      	ldrb	r2, [r3, #0]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	f002 fd1a 	bl	80046dc <uartPrintf>
      }

      if (rx_data == CLI_KEY_HOME)
 8001ca8:	78fb      	ldrb	r3, [r7, #3]
 8001caa:	2b31      	cmp	r3, #49	; 0x31
 8001cac:	d10f      	bne.n	8001cce <cliUpdate+0x42a>
      {
        uartPrintf(p_cli->ch, "\x1B[%dD", line->cursor);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7818      	ldrb	r0, [r3, #0]
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb8:	461a      	mov	r2, r3
 8001cba:	492b      	ldr	r1, [pc, #172]	; (8001d68 <cliUpdate+0x4c4>)
 8001cbc:	f002 fd0e 	bl	80046dc <uartPrintf>
        line->cursor = 0;
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        p_cli->state = CLI_RX_SP4;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2204      	movs	r2, #4
 8001ccc:	741a      	strb	r2, [r3, #16]
      }

      if (rx_data == CLI_KEY_END)
 8001cce:	78fb      	ldrb	r3, [r7, #3]
 8001cd0:	2b34      	cmp	r3, #52	; 0x34
 8001cd2:	d13f      	bne.n	8001d54 <cliUpdate+0x4b0>
      {
        uint16_t mov_len;

        if (line->cursor < line->count)
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d210      	bcs.n	8001d06 <cliUpdate+0x462>
        {
          mov_len = line->count - line->cursor;
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001cea:	b29a      	uxth	r2, r3
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dC", mov_len);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	8afa      	ldrh	r2, [r7, #22]
 8001cfe:	491b      	ldr	r1, [pc, #108]	; (8001d6c <cliUpdate+0x4c8>)
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fceb 	bl	80046dc <uartPrintf>
        }
        if (line->cursor > line->count)
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d910      	bls.n	8001d38 <cliUpdate+0x494>
        {
          mov_len = line->cursor - line->count;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	82fb      	strh	r3, [r7, #22]
          uartPrintf(p_cli->ch, "\x1B[%dD", mov_len);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	8afa      	ldrh	r2, [r7, #22]
 8001d30:	490d      	ldr	r1, [pc, #52]	; (8001d68 <cliUpdate+0x4c4>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fcd2 	bl	80046dc <uartPrintf>
        }
        line->cursor = line->count;
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        p_cli->state = CLI_RX_SP4;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2204      	movs	r2, #4
 8001d48:	741a      	strb	r2, [r3, #16]
      }
      break;
 8001d4a:	e003      	b.n	8001d54 <cliUpdate+0x4b0>

    case CLI_RX_SP4:
      p_cli->state = CLI_RX_IDLE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	741a      	strb	r2, [r3, #16]
      break;
 8001d52:	e000      	b.n	8001d56 <cliUpdate+0x4b2>
      break;
 8001d54:	bf00      	nop
  }



  cliShowLog(p_cli);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff fce8 	bl	800172c <cliShowLog>

  return ret;
 8001d5c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3730      	adds	r7, #48	; 0x30
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	08018220 	.word	0x08018220
 8001d6c:	08018228 	.word	0x08018228

08001d70 <cliLineClean>:

void cliLineClean(cli_t *p_cli)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2200      	movs	r2, #0
 8001d84:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001d98:	bf00      	nop
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <cliLineAdd>:

void cliLineAdd(cli_t *p_cli)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]

  p_cli->line_buf[p_cli->hist_line_last] = p_cli->line;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001db2:	461a      	mov	r2, r3
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	015b      	lsls	r3, r3, #5
 8001dba:	4413      	add	r3, r2
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	4413      	add	r3, r2
 8001dc0:	440b      	add	r3, r1
 8001dc2:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4610      	mov	r0, r2
 8001dca:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8001dce:	2243      	movs	r2, #67	; 0x43
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	f013 f831 	bl	8014e38 <memcpy>

  if (p_cli->hist_line_count < CLI_LINE_HIS_MAX)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d807      	bhi.n	8001df0 <cliLineAdd+0x4c>
  {
    p_cli->hist_line_count++;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  }

  p_cli->hist_line_i    = p_cli->hist_line_last;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001df6:	b25a      	sxtb	r2, r3
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  p_cli->hist_line_last = (p_cli->hist_line_last + 1) % CLI_LINE_HIS_MAX;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001e04:	3301      	adds	r3, #1
 8001e06:	425a      	negs	r2, r3
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	f002 0203 	and.w	r2, r2, #3
 8001e10:	bf58      	it	pl
 8001e12:	4253      	negpl	r3, r2
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  p_cli->hist_line_new  = true;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
}
 8001e24:	bf00      	nop
 8001e26:	3708      	adds	r7, #8
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}

08001e2c <cliLineChange>:

void cliLineChange(cli_t *p_cli, int8_t key_up)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	460b      	mov	r3, r1
 8001e36:	70fb      	strb	r3, [r7, #3]
  uint8_t change_i;


  if (p_cli->hist_line_count == 0)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d076      	beq.n	8001f30 <cliLineChange+0x104>
  {
    return;
  }


  if (p_cli->line.cursor > 0)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d008      	beq.n	8001e5e <cliLineChange+0x32>
  {
    uartPrintf(p_cli->ch, "\x1B[%dD", p_cli->line.cursor);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	7818      	ldrb	r0, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 32e5 	ldrb.w	r3, [r3, #741]	; 0x2e5
 8001e56:	461a      	mov	r2, r3
 8001e58:	4937      	ldr	r1, [pc, #220]	; (8001f38 <cliLineChange+0x10c>)
 8001e5a:	f002 fc3f 	bl	80046dc <uartPrintf>
  }
  if (p_cli->line.count > 0)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <cliLineChange+0x4e>
  {
    uartPrintf(p_cli->ch, "\x1B[%dP", p_cli->line.count);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7818      	ldrb	r0, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 32e6 	ldrb.w	r3, [r3, #742]	; 0x2e6
 8001e72:	461a      	mov	r2, r3
 8001e74:	4931      	ldr	r1, [pc, #196]	; (8001f3c <cliLineChange+0x110>)
 8001e76:	f002 fc31 	bl	80046dc <uartPrintf>
  }


  if (key_up == true)
 8001e7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d125      	bne.n	8001ece <cliLineChange+0xa2>
  {
    if (p_cli->hist_line_new == true)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d006      	beq.n	8001e9a <cliLineChange+0x6e>
    {
      p_cli->hist_line_i = p_cli->hist_line_last;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8001e92:	b25a      	sxtb	r2, r3
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    }
    p_cli->hist_line_i = (p_cli->hist_line_i + p_cli->hist_line_count - 1) % p_cli->hist_line_count;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 3197 	ldrb.w	r3, [r3, #407]	; 0x197
 8001ea8:	4413      	add	r3, r2
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001eb2:	fb93 f1f2 	sdiv	r1, r3, r2
 8001eb6:	fb02 f201 	mul.w	r2, r2, r1
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	b25a      	sxtb	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001eca:	73fb      	strb	r3, [r7, #15]
 8001ecc:	e013      	b.n	8001ef6 <cliLineChange+0xca>
  }
  else
  {
    p_cli->hist_line_i = (p_cli->hist_line_i + 1) % p_cli->hist_line_count;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	f892 2197 	ldrb.w	r2, [r2, #407]	; 0x197
 8001edc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001ee0:	fb02 f201 	mul.w	r2, r2, r1
 8001ee4:	1a9b      	subs	r3, r3, r2
 8001ee6:	b25a      	sxtb	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
    change_i = p_cli->hist_line_i;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f993 3195 	ldrsb.w	r3, [r3, #405]	; 0x195
 8001ef4:	73fb      	strb	r3, [r7, #15]
  }

  p_cli->line = p_cli->line_buf[change_i];
 8001ef6:	7bfa      	ldrb	r2, [r7, #15]
 8001ef8:	6879      	ldr	r1, [r7, #4]
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	015b      	lsls	r3, r3, #5
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	4413      	add	r3, r2
 8001f06:	4403      	add	r3, r0
 8001f08:	f503 72cc 	add.w	r2, r3, #408	; 0x198
 8001f0c:	f501 7329 	add.w	r3, r1, #676	; 0x2a4
 8001f10:	4611      	mov	r1, r2
 8001f12:	2243      	movs	r2, #67	; 0x43
 8001f14:	4618      	mov	r0, r3
 8001f16:	f012 ff8f 	bl	8014e38 <memcpy>
  p_cli->line.cursor = p_cli->line.count;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	f893 22e6 	ldrb.w	r2, [r3, #742]	; 0x2e6
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5

  p_cli->hist_line_new = false;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8001f2e:	e000      	b.n	8001f32 <cliLineChange+0x106>
    return;
 8001f30:	bf00      	nop
}
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	08018220 	.word	0x08018220
 8001f3c:	08018230 	.word	0x08018230

08001f40 <cliRunCmd>:

bool cliRunCmd(cli_t *p_cli)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	72fb      	strb	r3, [r7, #11]


  if (cliParseArgs(p_cli) == true)
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f000 f851 	bl	8001ff4 <cliParseArgs>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d046      	beq.n	8001fe6 <cliRunCmd+0xa6>
  {
    cliPrintf("\r\n");
 8001f58:	4825      	ldr	r0, [pc, #148]	; (8001ff0 <cliRunCmd+0xb0>)
 8001f5a:	f000 f893 	bl	8002084 <cliPrintf>

    cliToUpper(p_cli->argv[0]);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f8b1 	bl	80020cc <cliToUpper>

    for (int i=0; i<p_cli->cmd_count; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	e033      	b.n	8001fd8 <cliRunCmd+0x98>
    {
      if (strcmp(p_cli->argv[0], p_cli->cmd_list[i].cmd_str) == 0)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	f7fe f928 	bl	80001e0 <strcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d11d      	bne.n	8001fd2 <cliRunCmd+0x92>
      {
        p_cli->cmd_args.argc =  p_cli->argc - 1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f8b3 3112 	ldrh.w	r3, [r3, #274]	; 0x112
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f8a3 242c 	strh.w	r2, [r3, #1068]	; 0x42c
        p_cli->cmd_args.argv = &p_cli->argv[1];
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
        p_cli->cmd_list[i].cmd_func(&p_cli->cmd_args);
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	f202 422c 	addw	r2, r2, #1068	; 0x42c
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4798      	blx	r3
        break;
 8001fd0:	e009      	b.n	8001fe6 <cliRunCmd+0xa6>
    for (int i=0; i<p_cli->cmd_count; i++)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	dbc4      	blt.n	8001f70 <cliRunCmd+0x30>
      }
    }
  }

  return ret;
 8001fe6:	7afb      	ldrb	r3, [r7, #11]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	08018238 	.word	0x08018238

08001ff4 <cliParseArgs>:

bool cliParseArgs(cli_t *p_cli)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	77fb      	strb	r3, [r7, #31]
  char *tok;
  char *next_ptr;
  uint16_t argc = 0;
 8002000:	2300      	movs	r3, #0
 8002002:	82fb      	strh	r3, [r7, #22]
  static const char *delim = " \f\n\r\t\v";
  char *cmdline;
  char **argv;

  p_cli->argc = 0;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  cmdline = (char *)p_cli->line.buf;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f503 7329 	add.w	r3, r3, #676	; 0x2a4
 8002012:	613b      	str	r3, [r7, #16]
  argv    = p_cli->argv;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f503 738a 	add.w	r3, r3, #276	; 0x114
 800201a:	60fb      	str	r3, [r7, #12]

  argv[argc] = NULL;
 800201c:	8afb      	ldrh	r3, [r7, #22]
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4413      	add	r3, r2
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <cliParseArgs+0x8c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f107 0208 	add.w	r2, r7, #8
 8002030:	4619      	mov	r1, r3
 8002032:	6938      	ldr	r0, [r7, #16]
 8002034:	f013 fdc8 	bl	8015bc8 <strtok_r>
 8002038:	61b8      	str	r0, [r7, #24]
 800203a:	e010      	b.n	800205e <cliParseArgs+0x6a>
  {
    argv[argc++] = tok;
 800203c:	8afb      	ldrh	r3, [r7, #22]
 800203e:	1c5a      	adds	r2, r3, #1
 8002040:	82fa      	strh	r2, [r7, #22]
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	68fa      	ldr	r2, [r7, #12]
 8002046:	4413      	add	r3, r2
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]
  for (tok = strtok_r(cmdline, delim, &next_ptr); tok; tok = strtok_r(NULL, delim, &next_ptr))
 800204c:	4b0c      	ldr	r3, [pc, #48]	; (8002080 <cliParseArgs+0x8c>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f107 0208 	add.w	r2, r7, #8
 8002054:	4619      	mov	r1, r3
 8002056:	2000      	movs	r0, #0
 8002058:	f013 fdb6 	bl	8015bc8 <strtok_r>
 800205c:	61b8      	str	r0, [r7, #24]
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1eb      	bne.n	800203c <cliParseArgs+0x48>
  }

  p_cli->argc = argc;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	8afa      	ldrh	r2, [r7, #22]
 8002068:	f8a3 2112 	strh.w	r2, [r3, #274]	; 0x112

  if (argc > 0)
 800206c:	8afb      	ldrh	r3, [r7, #22]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <cliParseArgs+0x82>
  {
    ret = true;
 8002072:	2301      	movs	r3, #1
 8002074:	77fb      	strb	r3, [r7, #31]
  }

  return ret;
 8002076:	7ffb      	ldrb	r3, [r7, #31]
}
 8002078:	4618      	mov	r0, r3
 800207a:	3720      	adds	r7, #32
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	20000010 	.word	0x20000010

08002084 <cliPrintf>:

void cliPrintf(const char *fmt, ...)
{
 8002084:	b40f      	push	{r0, r1, r2, r3}
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 800208c:	f107 031c 	add.w	r3, r7, #28
 8002090:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <cliPrintf+0x44>)
 8002094:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f103 0011 	add.w	r0, r3, #17
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020a4:	f013 fe46 	bl	8015d34 <vsniprintf>
 80020a8:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	7818      	ldrb	r0, [r3, #0]
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	3311      	adds	r3, #17
 80020b2:	68ba      	ldr	r2, [r7, #8]
 80020b4:	4619      	mov	r1, r3
 80020b6:	f002 faf8 	bl	80046aa <uartWrite>
}
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c4:	b004      	add	sp, #16
 80020c6:	4770      	bx	lr
 80020c8:	20006c9c 	.word	0x20006c9c

080020cc <cliToUpper>:

void cliToUpper(char *str)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	81fb      	strh	r3, [r7, #14]
 80020d8:	e018      	b.n	800210c <cliToUpper+0x40>
  {
    str_ch = str[i];
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	4413      	add	r3, r2
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80020e4:	7b7b      	ldrb	r3, [r7, #13]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d014      	beq.n	8002114 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80020ea:	7b7b      	ldrb	r3, [r7, #13]
 80020ec:	2b60      	cmp	r3, #96	; 0x60
 80020ee:	d905      	bls.n	80020fc <cliToUpper+0x30>
 80020f0:	7b7b      	ldrb	r3, [r7, #13]
 80020f2:	2b7a      	cmp	r3, #122	; 0x7a
 80020f4:	d802      	bhi.n	80020fc <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80020f6:	7b7b      	ldrb	r3, [r7, #13]
 80020f8:	3b20      	subs	r3, #32
 80020fa:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80020fc:	89fb      	ldrh	r3, [r7, #14]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	4413      	add	r3, r2
 8002102:	7b7a      	ldrb	r2, [r7, #13]
 8002104:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	3301      	adds	r3, #1
 800210a:	81fb      	strh	r3, [r7, #14]
 800210c:	89fb      	ldrh	r3, [r7, #14]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	d9e3      	bls.n	80020da <cliToUpper+0xe>
 8002112:	e000      	b.n	8002116 <cliToUpper+0x4a>
      break;
 8002114:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	2b10      	cmp	r3, #16
 800211a:	d105      	bne.n	8002128 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	3b01      	subs	r3, #1
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	4413      	add	r3, r2
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
  }
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	4603      	mov	r3, r0
 800213c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <cliArgsGetData+0x4c>)
 8002144:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	b29a      	uxth	r2, r3
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002150:	429a      	cmp	r2, r3
 8002152:	d301      	bcc.n	8002158 <cliArgsGetData+0x24>
  {
    return 0;
 8002154:	2300      	movs	r3, #0
 8002156:	e00e      	b.n	8002176 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	009b      	lsls	r3, r3, #2
 8002162:	4413      	add	r3, r2
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2200      	movs	r2, #0
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f013 fdac 	bl	8015cc8 <strtoul>
 8002170:	4603      	mov	r3, r0
 8002172:	60fb      	str	r3, [r7, #12]

  return ret;
 8002174:	68fb      	ldr	r3, [r7, #12]
}
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20006c9c 	.word	0x20006c9c

08002184 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800218e:	f04f 0300 	mov.w	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8002194:	4b10      	ldr	r3, [pc, #64]	; (80021d8 <cliArgsGetFloat+0x54>)
 8002196:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002198:	79fb      	ldrb	r3, [r7, #7]
 800219a:	b29a      	uxth	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d302      	bcc.n	80021ac <cliArgsGetFloat+0x28>
  {
    return 0;
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e00d      	b.n	80021c8 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80021b2:	79fb      	ldrb	r3, [r7, #7]
 80021b4:	009b      	lsls	r3, r3, #2
 80021b6:	4413      	add	r3, r2
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2100      	movs	r1, #0
 80021bc:	4618      	mov	r0, r3
 80021be:	f013 fc81 	bl	8015ac4 <strtof>
 80021c2:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	ee07 3a90 	vmov	s15, r3
}
 80021cc:	eeb0 0a67 	vmov.f32	s0, s15
 80021d0:	3710      	adds	r7, #16
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20006c9c 	.word	0x20006c9c

080021dc <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	4603      	mov	r3, r0
 80021e4:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80021ea:	4b0d      	ldr	r3, [pc, #52]	; (8002220 <cliArgsGetStr+0x44>)
 80021ec:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80021ee:	79fb      	ldrb	r3, [r7, #7]
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d301      	bcc.n	8002200 <cliArgsGetStr+0x24>
  {
    return 0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	e008      	b.n	8002212 <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4413      	add	r3, r2
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	60fb      	str	r3, [r7, #12]

  return ret;
 8002210:	68fb      	ldr	r3, [r7, #12]
}
 8002212:	4618      	mov	r0, r3
 8002214:	3714      	adds	r7, #20
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20006c9c 	.word	0x20006c9c

08002224 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	6039      	str	r1, [r7, #0]
 800222e:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8002234:	4b0f      	ldr	r3, [pc, #60]	; (8002274 <cliArgsIsStr+0x50>)
 8002236:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	b29a      	uxth	r2, r3
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 8002242:	429a      	cmp	r2, r3
 8002244:	d301      	bcc.n	800224a <cliArgsIsStr+0x26>
  {
    return 0;
 8002246:	2300      	movs	r3, #0
 8002248:	e010      	b.n	800226c <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	6838      	ldr	r0, [r7, #0]
 800225c:	f7fd ffc0 	bl	80001e0 <strcmp>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <cliArgsIsStr+0x46>
  {
    ret = true;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800226a:	7bfb      	ldrb	r3, [r7, #15]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	20006c9c 	.word	0x20006c9c

08002278 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800227e:	4b08      	ldr	r3, [pc, #32]	; (80022a0 <cliKeepLoop+0x28>)
 8002280:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f002 f9e4 	bl	8004654 <uartAvailable>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <cliKeepLoop+0x1e>
  {
    return true;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8002296:	2300      	movs	r3, #0
  }
}
 8002298:	4618      	mov	r0, r3
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	20006c9c 	.word	0x20006c9c

080022a4 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b086      	sub	sp, #24
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80022ae:	2301      	movs	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80022b2:	4b20      	ldr	r3, [pc, #128]	; (8002334 <cliAdd+0x90>)
 80022b4:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80022bc:	2b0f      	cmp	r3, #15
 80022be:	d901      	bls.n	80022c4 <cliAdd+0x20>
  {
    return false;
 80022c0:	2300      	movs	r3, #0
 80022c2:	e032      	b.n	800232a <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80022ca:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80022cc:	89fa      	ldrh	r2, [r7, #14]
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4413      	add	r3, r2
 80022de:	3304      	adds	r3, #4
 80022e0:	6879      	ldr	r1, [r7, #4]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f012 fdbe 	bl	8014e64 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80022e8:	89fa      	ldrh	r2, [r7, #14]
 80022ea:	6939      	ldr	r1, [r7, #16]
 80022ec:	4613      	mov	r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	4413      	add	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	440b      	add	r3, r1
 80022f6:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80022fe:	89fa      	ldrh	r2, [r7, #14]
 8002300:	4613      	mov	r3, r2
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 800230c:	693a      	ldr	r2, [r7, #16]
 800230e:	4413      	add	r3, r2
 8002310:	3304      	adds	r3, #4
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff feda 	bl	80020cc <cliToUpper>

  p_cli->cmd_count++;
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 800231e:	3301      	adds	r3, #1
 8002320:	b29a      	uxth	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8002328:	7dfb      	ldrb	r3, [r7, #23]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3718      	adds	r7, #24
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20006c9c 	.word	0x20006c9c

08002338 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8002340:	4b15      	ldr	r3, [pc, #84]	; (8002398 <cliShowList+0x60>)
 8002342:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8002344:	4815      	ldr	r0, [pc, #84]	; (800239c <cliShowList+0x64>)
 8002346:	f7ff fe9d 	bl	8002084 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 800234a:	4815      	ldr	r0, [pc, #84]	; (80023a0 <cliShowList+0x68>)
 800234c:	f7ff fe9a 	bl	8002084 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8002350:	2300      	movs	r3, #0
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e012      	b.n	800237c <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	4413      	add	r3, r2
 800235e:	009b      	lsls	r3, r3, #2
 8002360:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	4618      	mov	r0, r3
 800236c:	f7ff fe8a 	bl	8002084 <cliPrintf>
    cliPrintf("\r\n");
 8002370:	480a      	ldr	r0, [pc, #40]	; (800239c <cliShowList+0x64>)
 8002372:	f7ff fe87 	bl	8002084 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	3301      	adds	r3, #1
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8002382:	461a      	mov	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4293      	cmp	r3, r2
 8002388:	dbe5      	blt.n	8002356 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 800238a:	4806      	ldr	r0, [pc, #24]	; (80023a4 <cliShowList+0x6c>)
 800238c:	f7ff fe7a 	bl	8002084 <cliPrintf>
}
 8002390:	bf00      	nop
 8002392:	3710      	adds	r7, #16
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}
 8002398:	20006c9c 	.word	0x20006c9c
 800239c:	08018238 	.word	0x08018238
 80023a0:	0801823c 	.word	0x0801823c
 80023a4:	0801825c 	.word	0x0801825c

080023a8 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b08c      	sub	sp, #48	; 0x30
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 80023b0:	2310      	movs	r3, #16
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d103      	bne.n	80023d0 <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 80023c8:	4840      	ldr	r0, [pc, #256]	; (80024cc <cliMemoryDump+0x124>)
 80023ca:	f7ff fe5b 	bl	8002084 <cliPrintf>
 80023ce:	e07a      	b.n	80024c6 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	dd09      	ble.n	80023ea <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	3304      	adds	r3, #4
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2200      	movs	r2, #0
 80023de:	2100      	movs	r1, #0
 80023e0:	4618      	mov	r0, r3
 80023e2:	f013 fc71 	bl	8015cc8 <strtoul>
 80023e6:	4603      	mov	r3, r0
 80023e8:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4618      	mov	r0, r3
 80023f4:	f013 fc68 	bl	8015cc8 <strtoul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8002400:	4833      	ldr	r0, [pc, #204]	; (80024d0 <cliMemoryDump+0x128>)
 8002402:	f7ff fe3f 	bl	8002084 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8002406:	2300      	movs	r3, #0
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800240a:	e058      	b.n	80024be <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 800240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800240e:	f003 0303 	and.w	r3, r3, #3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d104      	bne.n	8002420 <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	4619      	mov	r1, r3
 800241a:	482e      	ldr	r0, [pc, #184]	; (80024d4 <cliMemoryDump+0x12c>)
 800241c:	f7ff fe32 	bl	8002084 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4619      	mov	r1, r3
 8002426:	482c      	ldr	r0, [pc, #176]	; (80024d8 <cliMemoryDump+0x130>)
 8002428:	f7ff fe2c 	bl	8002084 <cliPrintf>

    if ((idx%4) == 3)
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	425a      	negs	r2, r3
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	f002 0203 	and.w	r2, r2, #3
 8002438:	bf58      	it	pl
 800243a:	4253      	negpl	r3, r2
 800243c:	2b03      	cmp	r3, #3
 800243e:	d138      	bne.n	80024b2 <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8002440:	4826      	ldr	r0, [pc, #152]	; (80024dc <cliMemoryDump+0x134>)
 8002442:	f7ff fe1f 	bl	8002084 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
 800244a:	e02c      	b.n	80024a6 <cliMemoryDump+0xfe>
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8002450:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
 8002456:	e01d      	b.n	8002494 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8002458:	f107 020c 	add.w	r2, r7, #12
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	4413      	add	r3, r2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	2b1f      	cmp	r3, #31
 8002464:	d910      	bls.n	8002488 <cliMemoryDump+0xe0>
 8002466:	f107 020c 	add.w	r2, r7, #12
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	4413      	add	r3, r2
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b7e      	cmp	r3, #126	; 0x7e
 8002472:	d809      	bhi.n	8002488 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8002474:	f107 020c 	add.w	r2, r7, #12
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	4413      	add	r3, r2
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	4619      	mov	r1, r3
 8002480:	4817      	ldr	r0, [pc, #92]	; (80024e0 <cliMemoryDump+0x138>)
 8002482:	f7ff fdff 	bl	8002084 <cliPrintf>
 8002486:	e002      	b.n	800248e <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8002488:	4816      	ldr	r0, [pc, #88]	; (80024e4 <cliMemoryDump+0x13c>)
 800248a:	f7ff fdfb 	bl	8002084 <cliPrintf>
        for (i=0;i<4;i++)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3301      	adds	r3, #1
 8002492:	61fb      	str	r3, [r7, #28]
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	2b03      	cmp	r3, #3
 8002498:	ddde      	ble.n	8002458 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	3304      	adds	r3, #4
 800249e:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	3301      	adds	r3, #1
 80024a4:	623b      	str	r3, [r7, #32]
 80024a6:	6a3b      	ldr	r3, [r7, #32]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	ddcf      	ble.n	800244c <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 80024ac:	480e      	ldr	r0, [pc, #56]	; (80024e8 <cliMemoryDump+0x140>)
 80024ae:	f7ff fde9 	bl	8002084 <cliPrintf>
    }
    addr++;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	3304      	adds	r3, #4
 80024b6:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 80024b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ba:	3301      	adds	r3, #1
 80024bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c2:	429a      	cmp	r2, r3
 80024c4:	dba2      	blt.n	800240c <cliMemoryDump+0x64>
  }
}
 80024c6:	3730      	adds	r7, #48	; 0x30
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	0801827c 	.word	0x0801827c
 80024d0:	08018290 	.word	0x08018290
 80024d4:	08018298 	.word	0x08018298
 80024d8:	080182a4 	.word	0x080182a4
 80024dc:	080182ac 	.word	0x080182ac
 80024e0:	080182b0 	.word	0x080182b0
 80024e4:	080182b4 	.word	0x080182b4
 80024e8:	080182b8 	.word	0x080182b8

080024ec <fatfsInit>:
#endif /* _USE_HW_CLI */



bool fatfsInit(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  bool ret = true;
 80024f2:	2301      	movs	r3, #1
 80024f4:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 80024f6:	490d      	ldr	r1, [pc, #52]	; (800252c <fatfsInit+0x40>)
 80024f8:	480d      	ldr	r0, [pc, #52]	; (8002530 <fatfsInit+0x44>)
 80024fa:	f00b fa9b 	bl	800da34 <FATFS_LinkDriver>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d10a      	bne.n	800251a <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8002504:	2200      	movs	r2, #0
 8002506:	4909      	ldr	r1, [pc, #36]	; (800252c <fatfsInit+0x40>)
 8002508:	480a      	ldr	r0, [pc, #40]	; (8002534 <fatfsInit+0x48>)
 800250a:	f009 fdf1 	bl	800c0f0 <f_mount>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d102      	bne.n	800251a <fatfsInit+0x2e>
    {
      is_init = true;
 8002514:	4b08      	ldr	r3, [pc, #32]	; (8002538 <fatfsInit+0x4c>)
 8002516:	2201      	movs	r2, #1
 8002518:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 800251a:	4908      	ldr	r1, [pc, #32]	; (800253c <fatfsInit+0x50>)
 800251c:	4808      	ldr	r0, [pc, #32]	; (8002540 <fatfsInit+0x54>)
 800251e:	f7ff fec1 	bl	80022a4 <cliAdd>
#endif /* _USE_HW_CLI */

  return ret;
 8002522:	79fb      	ldrb	r3, [r7, #7]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200070e0 	.word	0x200070e0
 8002530:	08018828 	.word	0x08018828
 8002534:	200070e4 	.word	0x200070e4
 8002538:	200005a1 	.word	0x200005a1
 800253c:	080025f5 	.word	0x080025f5
 8002540:	080182c8 	.word	0x080182c8

08002544 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b0d6      	sub	sp, #344	; 0x158
 8002548:	af00      	add	r7, sp, #0
 800254a:	1d3b      	adds	r3, r7, #4
 800254c:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 800254e:	1d3b      	adds	r3, r7, #4
 8002550:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8002554:	6819      	ldr	r1, [r3, #0]
 8002556:	4610      	mov	r0, r2
 8002558:	f00a fdbf 	bl	800d0da <f_opendir>
 800255c:	4603      	mov	r3, r0
 800255e:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8002562:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002566:	2b00      	cmp	r3, #0
 8002568:	d138      	bne.n	80025dc <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 800256a:	f107 0208 	add.w	r2, r7, #8
 800256e:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8002572:	4611      	mov	r1, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f00a fe74 	bl	800d262 <f_readdir>
 800257a:	4603      	mov	r3, r0
 800257c:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8002580:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8002584:	2b00      	cmp	r3, #0
 8002586:	d124      	bne.n	80025d2 <fatfsDir+0x8e>
 8002588:	f107 0308 	add.w	r3, r7, #8
 800258c:	7d9b      	ldrb	r3, [r3, #22]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d01f      	beq.n	80025d2 <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 8002592:	f107 0308 	add.w	r3, r7, #8
 8002596:	7a1b      	ldrb	r3, [r3, #8]
 8002598:	f003 0310 	and.w	r3, r3, #16
 800259c:	2b00      	cmp	r3, #0
 800259e:	d009      	beq.n	80025b4 <fatfsDir+0x70>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 80025a0:	f107 0308 	add.w	r3, r7, #8
 80025a4:	f103 0216 	add.w	r2, r3, #22
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	480f      	ldr	r0, [pc, #60]	; (80025ec <fatfsDir+0xa8>)
 80025ae:	f7ff fd69 	bl	8002084 <cliPrintf>
 80025b2:	e7da      	b.n	800256a <fatfsDir+0x26>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 80025b4:	f107 0308 	add.w	r3, r7, #8
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f107 0308 	add.w	r3, r7, #8
 80025c0:	f103 0216 	add.w	r2, r3, #22
 80025c4:	1d39      	adds	r1, r7, #4
 80025c6:	4603      	mov	r3, r0
 80025c8:	6809      	ldr	r1, [r1, #0]
 80025ca:	4809      	ldr	r0, [pc, #36]	; (80025f0 <fatfsDir+0xac>)
 80025cc:	f7ff fd5a 	bl	8002084 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 80025d0:	e7cb      	b.n	800256a <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 80025d2:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80025d6:	4618      	mov	r0, r3
 80025d8:	f00a fe1d 	bl	800d216 <f_closedir>
  }

  return res;
 80025dc:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	080182d0 	.word	0x080182d0
 80025f0:	080182dc 	.word	0x080182dc

080025f4 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	1d3b      	adds	r3, r7, #4
 80025fe:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8002600:	2300      	movs	r3, #0
 8002602:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8002606:	1d3b      	adds	r3, r7, #4
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	881b      	ldrh	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d14a      	bne.n	80026a6 <cliFatfs+0xb2>
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	498b      	ldr	r1, [pc, #556]	; (8002844 <cliFatfs+0x250>)
 8002618:	2000      	movs	r0, #0
 800261a:	4798      	blx	r3
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d041      	beq.n	80026a6 <cliFatfs+0xb2>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8002622:	4b89      	ldr	r3, [pc, #548]	; (8002848 <cliFatfs+0x254>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	4619      	mov	r1, r3
 8002628:	4888      	ldr	r0, [pc, #544]	; (800284c <cliFatfs+0x258>)
 800262a:	f7ff fd2b 	bl	8002084 <cliPrintf>

    if (is_init == true)
 800262e:	4b86      	ldr	r3, [pc, #536]	; (8002848 <cliFatfs+0x254>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d034      	beq.n	80026a0 <cliFatfs+0xac>
      FATFS *fs;
      DWORD fre_clust, fre_sect, tot_sect;
      FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8002636:	f507 7211 	add.w	r2, r7, #580	; 0x244
 800263a:	f507 7310 	add.w	r3, r7, #576	; 0x240
 800263e:	4619      	mov	r1, r3
 8002640:	4883      	ldr	r0, [pc, #524]	; (8002850 <cliFatfs+0x25c>)
 8002642:	f00a fe66 	bl	800d312 <f_getfree>
 8002646:	4603      	mov	r3, r0
 8002648:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 800264c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002650:	2b00      	cmp	r3, #0
 8002652:	d11f      	bne.n	8002694 <cliFatfs+0xa0>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8002654:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002658:	699b      	ldr	r3, [r3, #24]
 800265a:	3b02      	subs	r3, #2
 800265c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8002660:	8952      	ldrh	r2, [r2, #10]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 800266a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800266e:	895b      	ldrh	r3, [r3, #10]
 8002670:	461a      	mov	r2, r3
 8002672:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8002676:	fb03 f302 	mul.w	r3, r3, r2
 800267a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 800267e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8002682:	0859      	lsrs	r1, r3, #1
 8002684:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8002688:	085b      	lsrs	r3, r3, #1
 800268a:	461a      	mov	r2, r3
 800268c:	4871      	ldr	r0, [pc, #452]	; (8002854 <cliFatfs+0x260>)
 800268e:	f7ff fcf9 	bl	8002084 <cliPrintf>
 8002692:	e005      	b.n	80026a0 <cliFatfs+0xac>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8002694:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8002698:	4619      	mov	r1, r3
 800269a:	486f      	ldr	r0, [pc, #444]	; (8002858 <cliFatfs+0x264>)
 800269c:	f7ff fcf2 	bl	8002084 <cliPrintf>
       }
    }

    ret = true;
 80026a0:	2301      	movs	r3, #1
 80026a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	881b      	ldrh	r3, [r3, #0]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d11b      	bne.n	80026e8 <cliFatfs+0xf4>
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	4969      	ldr	r1, [pc, #420]	; (800285c <cliFatfs+0x268>)
 80026b8:	2000      	movs	r0, #0
 80026ba:	4798      	blx	r3
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <cliFatfs+0xf4>
  {
    FRESULT res;

    res = fatfsDir("/");
 80026c2:	4867      	ldr	r0, [pc, #412]	; (8002860 <cliFatfs+0x26c>)
 80026c4:	f7ff ff3e 	bl	8002544 <fatfsDir>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 80026ce:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <cliFatfs+0xee>
    {
      cliPrintf(" err : %d\n", res);
 80026d6:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 80026da:	4619      	mov	r1, r3
 80026dc:	485e      	ldr	r0, [pc, #376]	; (8002858 <cliFatfs+0x264>)
 80026de:	f7ff fcd1 	bl	8002084 <cliPrintf>
    }

    ret = true;
 80026e2:	2301      	movs	r3, #1
 80026e4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 80026e8:	1d3b      	adds	r3, r7, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	f040 8092 	bne.w	8002818 <cliFatfs+0x224>
 80026f4:	1d3b      	adds	r3, r7, #4
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	495a      	ldr	r1, [pc, #360]	; (8002864 <cliFatfs+0x270>)
 80026fc:	2000      	movs	r0, #0
 80026fe:	4798      	blx	r3
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	f000 8088 	beq.w	8002818 <cliFatfs+0x224>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8002708:	f7fe fca7 	bl	800105a <millis>
 800270c:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	220b      	movs	r2, #11
 8002716:	4954      	ldr	r1, [pc, #336]	; (8002868 <cliFatfs+0x274>)
 8002718:	4618      	mov	r0, r3
 800271a:	f009 fd2f 	bl	800c17c <f_open>
 800271e:	4603      	mov	r3, r0
 8002720:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 8002724:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002728:	2b00      	cmp	r3, #0
 800272a:	d165      	bne.n	80027f8 <cliFatfs+0x204>
    {
      f_printf(&log_file, "test1, ");
 800272c:	f107 0308 	add.w	r3, r7, #8
 8002730:	494e      	ldr	r1, [pc, #312]	; (800286c <cliFatfs+0x278>)
 8002732:	4618      	mov	r0, r3
 8002734:	f00a ff12 	bl	800d55c <f_printf>
      f_printf(&log_file, "test2, ");
 8002738:	f107 0308 	add.w	r3, r7, #8
 800273c:	494c      	ldr	r1, [pc, #304]	; (8002870 <cliFatfs+0x27c>)
 800273e:	4618      	mov	r0, r3
 8002740:	f00a ff0c 	bl	800d55c <f_printf>
      f_printf(&log_file, "test3, ");
 8002744:	f107 0308 	add.w	r3, r7, #8
 8002748:	494a      	ldr	r1, [pc, #296]	; (8002874 <cliFatfs+0x280>)
 800274a:	4618      	mov	r0, r3
 800274c:	f00a ff06 	bl	800d55c <f_printf>
      f_printf(&log_file, ", ");
 8002750:	f107 0308 	add.w	r3, r7, #8
 8002754:	4948      	ldr	r1, [pc, #288]	; (8002878 <cliFatfs+0x284>)
 8002756:	4618      	mov	r0, r3
 8002758:	f00a ff00 	bl	800d55c <f_printf>
      f_printf(&log_file, "\n");
 800275c:	f107 0308 	add.w	r3, r7, #8
 8002760:	4946      	ldr	r1, [pc, #280]	; (800287c <cliFatfs+0x288>)
 8002762:	4618      	mov	r0, r3
 8002764:	f00a fefa 	bl	800d55c <f_printf>

      for (int i=0; i<8; i++)
 8002768:	2300      	movs	r3, #0
 800276a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800276e:	e00c      	b.n	800278a <cliFatfs+0x196>
      {
        f_printf(&log_file, "%d \n", i);
 8002770:	f107 0308 	add.w	r3, r7, #8
 8002774:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002778:	4941      	ldr	r1, [pc, #260]	; (8002880 <cliFatfs+0x28c>)
 800277a:	4618      	mov	r0, r3
 800277c:	f00a feee 	bl	800d55c <f_printf>
      for (int i=0; i<8; i++)
 8002780:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8002784:	3301      	adds	r3, #1
 8002786:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 800278a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800278e:	2b07      	cmp	r3, #7
 8002790:	ddee      	ble.n	8002770 <cliFatfs+0x17c>
      }

      f_rewind(&log_file);
 8002792:	f107 0308 	add.w	r3, r7, #8
 8002796:	2100      	movs	r1, #0
 8002798:	4618      	mov	r0, r3
 800279a:	f00a fa95 	bl	800ccc8 <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 800279e:	e01c      	b.n	80027da <cliFatfs+0x1e6>
      {
        len = 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read(&log_file, &data, 1, &len);
 80027a6:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80027aa:	f207 213b 	addw	r1, r7, #571	; 0x23b
 80027ae:	f107 0008 	add.w	r0, r7, #8
 80027b2:	2201      	movs	r2, #1
 80027b4:	f009 ff2c 	bl	800c610 <f_read>
 80027b8:	4603      	mov	r3, r0
 80027ba:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 80027be:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10f      	bne.n	80027e6 <cliFatfs+0x1f2>
        {
          break;
        }
        if (len == 0)
 80027c6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <cliFatfs+0x1f6>
        {
          break;
        }

        cliPrintf("%c", data);
 80027ce:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 80027d2:	4619      	mov	r1, r3
 80027d4:	482b      	ldr	r0, [pc, #172]	; (8002884 <cliFatfs+0x290>)
 80027d6:	f7ff fc55 	bl	8002084 <cliPrintf>
      while(cliKeepLoop())
 80027da:	f7ff fd4d 	bl	8002278 <cliKeepLoop>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1dd      	bne.n	80027a0 <cliFatfs+0x1ac>
 80027e4:	e002      	b.n	80027ec <cliFatfs+0x1f8>
          break;
 80027e6:	bf00      	nop
 80027e8:	e000      	b.n	80027ec <cliFatfs+0x1f8>
          break;
 80027ea:	bf00      	nop
      }

      f_close(&log_file);
 80027ec:	f107 0308 	add.w	r3, r7, #8
 80027f0:	4618      	mov	r0, r3
 80027f2:	f00a fa3f 	bl	800cc74 <f_close>
 80027f6:	e002      	b.n	80027fe <cliFatfs+0x20a>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 80027f8:	4823      	ldr	r0, [pc, #140]	; (8002888 <cliFatfs+0x294>)
 80027fa:	f7ff fc43 	bl	8002084 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 80027fe:	f7fe fc2c 	bl	800105a <millis>
 8002802:	4602      	mov	r2, r0
 8002804:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	4619      	mov	r1, r3
 800280c:	481f      	ldr	r0, [pc, #124]	; (800288c <cliFatfs+0x298>)
 800280e:	f7ff fc39 	bl	8002084 <cliPrintf>

    ret = true;
 8002812:	2301      	movs	r3, #1
 8002814:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8002818:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800281c:	f083 0301 	eor.w	r3, r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <cliFatfs+0x244>
  {
    cliPrintf("fatfs info\n");
 8002826:	481a      	ldr	r0, [pc, #104]	; (8002890 <cliFatfs+0x29c>)
 8002828:	f7ff fc2c 	bl	8002084 <cliPrintf>
    cliPrintf("fatfs dir\n");
 800282c:	4819      	ldr	r0, [pc, #100]	; (8002894 <cliFatfs+0x2a0>)
 800282e:	f7ff fc29 	bl	8002084 <cliPrintf>
    cliPrintf("fatfs test\n");
 8002832:	4819      	ldr	r0, [pc, #100]	; (8002898 <cliFatfs+0x2a4>)
 8002834:	f7ff fc26 	bl	8002084 <cliPrintf>
  }
}
 8002838:	bf00      	nop
 800283a:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	080182f0 	.word	0x080182f0
 8002848:	200005a1 	.word	0x200005a1
 800284c:	080182f8 	.word	0x080182f8
 8002850:	0801830c 	.word	0x0801830c
 8002854:	08018310 	.word	0x08018310
 8002858:	08018344 	.word	0x08018344
 800285c:	08018350 	.word	0x08018350
 8002860:	08018354 	.word	0x08018354
 8002864:	08018358 	.word	0x08018358
 8002868:	08018360 	.word	0x08018360
 800286c:	08018368 	.word	0x08018368
 8002870:	08018370 	.word	0x08018370
 8002874:	08018378 	.word	0x08018378
 8002878:	08018380 	.word	0x08018380
 800287c:	08018384 	.word	0x08018384
 8002880:	08018388 	.word	0x08018388
 8002884:	08018390 	.word	0x08018390
 8002888:	08018394 	.word	0x08018394
 800288c:	080183a4 	.word	0x080183a4
 8002890:	080183ac 	.word	0x080183ac
 8002894:	080183b8 	.word	0x080183b8
 8002898:	080183c4 	.word	0x080183c4

0800289c <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 80028a0:	4903      	ldr	r1, [pc, #12]	; (80028b0 <flashInit+0x14>)
 80028a2:	4804      	ldr	r0, [pc, #16]	; (80028b4 <flashInit+0x18>)
 80028a4:	f7ff fcfe 	bl	80022a4 <cliAdd>
#endif
  return true;
 80028a8:	2301      	movs	r3, #1
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	08002a71 	.word	0x08002a71
 80028b4:	080183d0 	.word	0x080183d0

080028b8 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b08c      	sub	sp, #48	; 0x30
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  bool ret = false;
 80028c2:	2300      	movs	r3, #0
 80028c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 80028c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028cc:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	627b      	str	r3, [r7, #36]	; 0x24
 80028d6:	e015      	b.n	8002904 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 80028d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028da:	b29b      	uxth	r3, r3
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f000 f86d 	bl	80029c0 <flashInSector>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <flashErase+0x46>
    {
      if (start_sector_num < 0)
 80028ec:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	da01      	bge.n	80028f8 <flashErase+0x40>
      {
        start_sector_num = i;
 80028f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f6:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 80028f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028fa:	3301      	adds	r3, #1
 80028fc:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 80028fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002900:	3301      	adds	r3, #1
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	2b07      	cmp	r3, #7
 8002908:	dde6      	ble.n	80028d8 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 800290a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 8002910:	f00b ff00 	bl	800e714 <HAL_FLASH_Unlock>

    init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
    init.Banks         = FLASH_BANK_1;
 8002918:	2301      	movs	r3, #1
 800291a:	613b      	str	r3, [r7, #16]
    init.Sector        = start_sector_num;
 800291c:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8002920:	617b      	str	r3, [r7, #20]
    init.NbSectors     = sector_count;
 8002922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002924:	61bb      	str	r3, [r7, #24]
    init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002926:	2302      	movs	r3, #2
 8002928:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 800292a:	f107 0208 	add.w	r2, r7, #8
 800292e:	f107 030c 	add.w	r3, r7, #12
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f00c f85f 	bl	800e9f8 <HAL_FLASHEx_Erase>
 800293a:	4603      	mov	r3, r0
 800293c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 8002940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <flashErase+0x96>
    {
      ret = true;
 8002948:	2301      	movs	r3, #1
 800294a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 800294e:	f00b ff03 	bl	800e758 <HAL_FLASH_Lock>
  }

  return ret;
 8002952:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002956:	4618      	mov	r0, r3
 8002958:	3730      	adds	r7, #48	; 0x30
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800295e:	b580      	push	{r7, lr}
 8002960:	b088      	sub	sp, #32
 8002962:	af00      	add	r7, sp, #0
 8002964:	60f8      	str	r0, [r7, #12]
 8002966:	60b9      	str	r1, [r7, #8]
 8002968:	607a      	str	r2, [r7, #4]
  bool ret = true;
 800296a:	2301      	movs	r3, #1
 800296c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  HAL_FLASH_Unlock();
 800296e:	f00b fed1 	bl	800e714 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 8002972:	2300      	movs	r3, #0
 8002974:	61bb      	str	r3, [r7, #24]
 8002976:	e018      	b.n	80029aa <flashWrite+0x4c>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8002978:	69bb      	ldr	r3, [r7, #24]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	18d1      	adds	r1, r2, r3
 8002988:	8afa      	ldrh	r2, [r7, #22]
 800298a:	f04f 0300 	mov.w	r3, #0
 800298e:	2000      	movs	r0, #0
 8002990:	f00b fe6c 	bl	800e66c <HAL_FLASH_Program>
 8002994:	4603      	mov	r3, r0
 8002996:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8002998:	7d7b      	ldrb	r3, [r7, #21]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <flashWrite+0x46>
    {
      ret = false;
 800299e:	2300      	movs	r3, #0
 80029a0:	77fb      	strb	r3, [r7, #31]
      break;
 80029a2:	e006      	b.n	80029b2 <flashWrite+0x54>
  for (int i=0; i<length; i+=1)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	3301      	adds	r3, #1
 80029a8:	61bb      	str	r3, [r7, #24]
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d8e2      	bhi.n	8002978 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 80029b2:	f00b fed1 	bl	800e758 <HAL_FLASH_Lock>

  return ret;
 80029b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b08b      	sub	sp, #44	; 0x2c
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	607a      	str	r2, [r7, #4]
 80029cc:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80029ce:	2300      	movs	r3, #0
 80029d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80029d4:	89fb      	ldrh	r3, [r7, #14]
 80029d6:	4a25      	ldr	r2, [pc, #148]	; (8002a6c <flashInSector+0xac>)
 80029d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029dc:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	4a22      	ldr	r2, [pc, #136]	; (8002a6c <flashInSector+0xac>)
 80029e2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80029e6:	89fb      	ldrh	r3, [r7, #14]
 80029e8:	4920      	ldr	r1, [pc, #128]	; (8002a6c <flashInSector+0xac>)
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	440b      	add	r3, r1
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	3b01      	subs	r3, #1
 80029f4:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4413      	add	r3, r2
 8002a00:	3b01      	subs	r3, #1
 8002a02:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002a04:	6a3a      	ldr	r2, [r7, #32]
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d306      	bcc.n	8002a1a <flashInSector+0x5a>
 8002a0c:	6a3a      	ldr	r2, [r7, #32]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d802      	bhi.n	8002a1a <flashInSector+0x5a>
  {
    ret = true;
 8002a14:	2301      	movs	r3, #1
 8002a16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8002a1a:	69fa      	ldr	r2, [r7, #28]
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d306      	bcc.n	8002a30 <flashInSector+0x70>
 8002a22:	69fa      	ldr	r2, [r7, #28]
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d802      	bhi.n	8002a30 <flashInSector+0x70>
  {
    ret = true;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d306      	bcc.n	8002a46 <flashInSector+0x86>
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d802      	bhi.n	8002a46 <flashInSector+0x86>
  {
    ret = true;
 8002a40:	2301      	movs	r3, #1
 8002a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002a46:	697a      	ldr	r2, [r7, #20]
 8002a48:	6a3b      	ldr	r3, [r7, #32]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d306      	bcc.n	8002a5c <flashInSector+0x9c>
 8002a4e:	697a      	ldr	r2, [r7, #20]
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d802      	bhi.n	8002a5c <flashInSector+0x9c>
  {
    ret = true;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8002a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	372c      	adds	r7, #44	; 0x2c
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	20000014 	.word	0x20000014

08002a70 <cliFlash>:



#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	; 0x30
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (args -> argc == 1 && args -> isStr(0, "info") == true)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	881b      	ldrh	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d121      	bne.n	8002aca <cliFlash+0x5a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	495e      	ldr	r1, [pc, #376]	; (8002c04 <cliFlash+0x194>)
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	4798      	blx	r3
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d019      	beq.n	8002aca <cliFlash+0x5a>
	{
		for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8002a96:	2300      	movs	r3, #0
 8002a98:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a9a:	e010      	b.n	8002abe <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002a9c:	4a5a      	ldr	r2, [pc, #360]	; (8002c08 <cliFlash+0x198>)
 8002a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8002aa4:	4a58      	ldr	r2, [pc, #352]	; (8002c08 <cliFlash+0x198>)
 8002aa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa8:	00db      	lsls	r3, r3, #3
 8002aaa:	4413      	add	r3, r2
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0a9b      	lsrs	r3, r3, #10
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	4856      	ldr	r0, [pc, #344]	; (8002c0c <cliFlash+0x19c>)
 8002ab4:	f7ff fae6 	bl	8002084 <cliPrintf>
		for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8002ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aba:	3301      	adds	r3, #1
 8002abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac0:	2b07      	cmp	r3, #7
 8002ac2:	ddeb      	ble.n	8002a9c <cliFlash+0x2c>
		}

		ret = true;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (args -> argc == 3 && args -> isStr(0, "read") == true)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	881b      	ldrh	r3, [r3, #0]
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d12b      	bne.n	8002b2a <cliFlash+0xba>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	494e      	ldr	r1, [pc, #312]	; (8002c10 <cliFlash+0x1a0>)
 8002ad8:	2000      	movs	r0, #0
 8002ada:	4798      	blx	r3
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d023      	beq.n	8002b2a <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr   = (uint32_t)args -> getData(1);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	4798      	blx	r3
 8002aea:	4603      	mov	r3, r0
 8002aec:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args -> getData(2);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2002      	movs	r0, #2
 8002af4:	4798      	blx	r3
 8002af6:	4603      	mov	r3, r0
 8002af8:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < length; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	e00d      	b.n	8002b1c <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	18d1      	adds	r1, r2, r3
 8002b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b08:	6a3b      	ldr	r3, [r7, #32]
 8002b0a:	4413      	add	r3, r2
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	461a      	mov	r2, r3
 8002b10:	4840      	ldr	r0, [pc, #256]	; (8002c14 <cliFlash+0x1a4>)
 8002b12:	f7ff fab7 	bl	8002084 <cliPrintf>
		for (int i = 0; i < length; i++)
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	3301      	adds	r3, #1
 8002b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	69fa      	ldr	r2, [r7, #28]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d8ed      	bhi.n	8002b00 <cliFlash+0x90>
		}

		ret = true;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 }

	if (args -> argc == 3 && args -> isStr(0, "erase") == true)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d124      	bne.n	8002b7c <cliFlash+0x10c>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	695b      	ldr	r3, [r3, #20]
 8002b36:	4938      	ldr	r1, [pc, #224]	; (8002c18 <cliFlash+0x1a8>)
 8002b38:	2000      	movs	r0, #0
 8002b3a:	4798      	blx	r3
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d01c      	beq.n	8002b7c <cliFlash+0x10c>
	{
		uint32_t addr;
		uint32_t length;

		addr   = (uint32_t)args -> getData(1);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	2001      	movs	r0, #1
 8002b48:	4798      	blx	r3
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args -> getData(2);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2002      	movs	r0, #2
 8002b54:	4798      	blx	r3
 8002b56:	4603      	mov	r3, r0
 8002b58:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 8002b5a:	6979      	ldr	r1, [r7, #20]
 8002b5c:	69b8      	ldr	r0, [r7, #24]
 8002b5e:	f7ff feab 	bl	80028b8 <flashErase>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d003      	beq.n	8002b70 <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 8002b68:	482c      	ldr	r0, [pc, #176]	; (8002c1c <cliFlash+0x1ac>)
 8002b6a:	f7ff fa8b 	bl	8002084 <cliPrintf>
 8002b6e:	e002      	b.n	8002b76 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 8002b70:	482b      	ldr	r0, [pc, #172]	; (8002c20 <cliFlash+0x1b0>)
 8002b72:	f7ff fa87 	bl	8002084 <cliPrintf>
		}

		ret = true;
 8002b76:	2301      	movs	r3, #1
 8002b78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (args -> argc == 3 && args -> isStr(0, "write") == true)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	2b03      	cmp	r3, #3
 8002b82:	d127      	bne.n	8002bd4 <cliFlash+0x164>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	4926      	ldr	r1, [pc, #152]	; (8002c24 <cliFlash+0x1b4>)
 8002b8a:	2000      	movs	r0, #0
 8002b8c:	4798      	blx	r3
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d01f      	beq.n	8002bd4 <cliFlash+0x164>
	{
		uint32_t addr;
		uint32_t data;

		addr   = (uint32_t)args -> getData(1);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	2001      	movs	r0, #1
 8002b9a:	4798      	blx	r3
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	613b      	str	r3, [r7, #16]
		data   = (uint32_t)args -> getData(2);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	2002      	movs	r0, #2
 8002ba6:	4798      	blx	r3
 8002ba8:	4603      	mov	r3, r0
 8002baa:	60fb      	str	r3, [r7, #12]

		if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 8002bac:	f107 030c 	add.w	r3, r7, #12
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	6938      	ldr	r0, [r7, #16]
 8002bb6:	f7ff fed2 	bl	800295e <flashWrite>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <cliFlash+0x158>
		{
			cliPrintf("Write OK\n");
 8002bc0:	4819      	ldr	r0, [pc, #100]	; (8002c28 <cliFlash+0x1b8>)
 8002bc2:	f7ff fa5f 	bl	8002084 <cliPrintf>
 8002bc6:	e002      	b.n	8002bce <cliFlash+0x15e>
		}
		else
		{
			cliPrintf("Write Fail\n");
 8002bc8:	4818      	ldr	r0, [pc, #96]	; (8002c2c <cliFlash+0x1bc>)
 8002bca:	f7ff fa5b 	bl	8002084 <cliPrintf>
		}

		ret = true;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (ret != true)
 8002bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d00b      	beq.n	8002bfa <cliFlash+0x18a>
	{
		cliPrintf("flash info\n");
 8002be2:	4813      	ldr	r0, [pc, #76]	; (8002c30 <cliFlash+0x1c0>)
 8002be4:	f7ff fa4e 	bl	8002084 <cliPrintf>
		cliPrintf("flash read  addr length\n");
 8002be8:	4812      	ldr	r0, [pc, #72]	; (8002c34 <cliFlash+0x1c4>)
 8002bea:	f7ff fa4b 	bl	8002084 <cliPrintf>
		cliPrintf("flash erase addr length\n");
 8002bee:	4812      	ldr	r0, [pc, #72]	; (8002c38 <cliFlash+0x1c8>)
 8002bf0:	f7ff fa48 	bl	8002084 <cliPrintf>
		cliPrintf("flash write addr data\n");
 8002bf4:	4811      	ldr	r0, [pc, #68]	; (8002c3c <cliFlash+0x1cc>)
 8002bf6:	f7ff fa45 	bl	8002084 <cliPrintf>
	}

}
 8002bfa:	bf00      	nop
 8002bfc:	3730      	adds	r7, #48	; 0x30
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	080183d8 	.word	0x080183d8
 8002c08:	20000014 	.word	0x20000014
 8002c0c:	080183e0 	.word	0x080183e0
 8002c10:	080183f0 	.word	0x080183f0
 8002c14:	080183f8 	.word	0x080183f8
 8002c18:	08018408 	.word	0x08018408
 8002c1c:	08018410 	.word	0x08018410
 8002c20:	0801841c 	.word	0x0801841c
 8002c24:	08018428 	.word	0x08018428
 8002c28:	08018430 	.word	0x08018430
 8002c2c:	0801843c 	.word	0x0801843c
 8002c30:	08018448 	.word	0x08018448
 8002c34:	08018454 	.word	0x08018454
 8002c38:	08018470 	.word	0x08018470
 8002c3c:	0801848c 	.word	0x0801848c

08002c40 <gpioInit>:
#endif /* _USE_HW_CLI */



bool gpioInit(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
	bool ret = true;
 8002c46:	2301      	movs	r3, #1
 8002c48:	72fb      	strb	r3, [r7, #11]

	__HAL_RCC_GPIOB_CLK_ENABLE(); /* 클럭 설정  */
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	4b1d      	ldr	r3, [pc, #116]	; (8002cc4 <gpioInit+0x84>)
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <gpioInit+0x84>)
 8002c54:	f043 0302 	orr.w	r3, r3, #2
 8002c58:	6313      	str	r3, [r2, #48]	; 0x30
 8002c5a:	4b1a      	ldr	r3, [pc, #104]	; (8002cc4 <gpioInit+0x84>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	607b      	str	r3, [r7, #4]
 8002c64:	687b      	ldr	r3, [r7, #4]

	for(int i = 0; i < GPIO_MAX_CH; i++)
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	e01e      	b.n	8002caa <gpioInit+0x6a>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	b2d8      	uxtb	r0, r3
 8002c70:	4915      	ldr	r1, [pc, #84]	; (8002cc8 <gpioInit+0x88>)
 8002c72:	68fa      	ldr	r2, [r7, #12]
 8002c74:	4613      	mov	r3, r2
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	3308      	adds	r3, #8
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	4619      	mov	r1, r3
 8002c84:	f000 f826 	bl	8002cd4 <gpioPinMode>
		gpioPinWrite(i, gpio_tbl[i].init_value);
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	b2d8      	uxtb	r0, r3
 8002c8c:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <gpioInit+0x88>)
 8002c8e:	68fa      	ldr	r2, [r7, #12]
 8002c90:	4613      	mov	r3, r2
 8002c92:	005b      	lsls	r3, r3, #1
 8002c94:	4413      	add	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	440b      	add	r3, r1
 8002c9a:	330b      	adds	r3, #11
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	f000 f87a 	bl	8002d98 <gpioPinWrite>
	for(int i = 0; i < GPIO_MAX_CH; i++)
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	dddd      	ble.n	8002c6c <gpioInit+0x2c>
	}

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 8002cb0:	4906      	ldr	r1, [pc, #24]	; (8002ccc <gpioInit+0x8c>)
 8002cb2:	4807      	ldr	r0, [pc, #28]	; (8002cd0 <gpioInit+0x90>)
 8002cb4:	f7ff faf6 	bl	80022a4 <cliAdd>
#endif /* _USE_HW_CLI */

	return ret;
 8002cb8:	7afb      	ldrb	r3, [r7, #11]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	20000054 	.word	0x20000054
 8002ccc:	08002ead 	.word	0x08002ead
 8002cd0:	080184a4 	.word	0x080184a4

08002cd4 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b088      	sub	sp, #32
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	460a      	mov	r2, r1
 8002cde:	71fb      	strb	r3, [r7, #7]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	2200      	movs	r2, #0
 8002cee:	601a      	str	r2, [r3, #0]
 8002cf0:	605a      	str	r2, [r3, #4]
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	60da      	str	r2, [r3, #12]
 8002cf6:	611a      	str	r2, [r3, #16]

	switch(mode)
 8002cf8:	79bb      	ldrb	r3, [r7, #6]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d82c      	bhi.n	8002d58 <gpioPinMode+0x84>
 8002cfe:	a201      	add	r2, pc, #4	; (adr r2, 8002d04 <gpioPinMode+0x30>)
 8002d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d04:	08002d1d 	.word	0x08002d1d
 8002d08:	08002d27 	.word	0x08002d27
 8002d0c:	08002d31 	.word	0x08002d31
 8002d10:	08002d3b 	.word	0x08002d3b
 8002d14:	08002d45 	.word	0x08002d45
 8002d18:	08002d4f 	.word	0x08002d4f
	{
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d20:	2300      	movs	r3, #0
 8002d22:	613b      	str	r3, [r7, #16]
			break;
 8002d24:	e018      	b.n	8002d58 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	613b      	str	r3, [r7, #16]
			break;
 8002d2e:	e013      	b.n	8002d58 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLDOWN:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d34:	2302      	movs	r3, #2
 8002d36:	613b      	str	r3, [r7, #16]
			break;
 8002d38:	e00e      	b.n	8002d58 <gpioPinMode+0x84>

		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	613b      	str	r3, [r7, #16]
			break;
 8002d42:	e009      	b.n	8002d58 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8002d44:	2301      	movs	r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	613b      	str	r3, [r7, #16]
			break;
 8002d4c:	e004      	b.n	8002d58 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLDWON:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8002d4e:	2301      	movs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002d52:	2302      	movs	r3, #2
 8002d54:	613b      	str	r3, [r7, #16]
			break;
 8002d56:	bf00      	nop
	  }


	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002d58:	79fa      	ldrb	r2, [r7, #7]
 8002d5a:	490e      	ldr	r1, [pc, #56]	; (8002d94 <gpioPinMode+0xc0>)
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	005b      	lsls	r3, r3, #1
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	3304      	adds	r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002d6c:	79fa      	ldrb	r2, [r7, #7]
 8002d6e:	4909      	ldr	r1, [pc, #36]	; (8002d94 <gpioPinMode+0xc0>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f107 0208 	add.w	r2, r7, #8
 8002d80:	4611      	mov	r1, r2
 8002d82:	4618      	mov	r0, r3
 8002d84:	f00b ff5a 	bl	800ec3c <HAL_GPIO_Init>


	return ret;
 8002d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000054 	.word	0x20000054

08002d98 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 8002d98:	b590      	push	{r4, r7, lr}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	460a      	mov	r2, r1
 8002da2:	71fb      	strb	r3, [r7, #7]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71bb      	strb	r3, [r7, #6]
	if( ch >= GPIO_MAX_CH)
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d840      	bhi.n	8002e30 <gpioPinWrite+0x98>
	{
		return ;
	}

	if (value == true)
 8002dae:	79bb      	ldrb	r3, [r7, #6]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d01e      	beq.n	8002df2 <gpioPinWrite+0x5a>
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 8002db4:	79fa      	ldrb	r2, [r7, #7]
 8002db6:	4920      	ldr	r1, [pc, #128]	; (8002e38 <gpioPinWrite+0xa0>)
 8002db8:	4613      	mov	r3, r2
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	6818      	ldr	r0, [r3, #0]
 8002dc4:	79fa      	ldrb	r2, [r7, #7]
 8002dc6:	491c      	ldr	r1, [pc, #112]	; (8002e38 <gpioPinWrite+0xa0>)
 8002dc8:	4613      	mov	r3, r2
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	4413      	add	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	3304      	adds	r3, #4
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b299      	uxth	r1, r3
 8002dd8:	79fa      	ldrb	r2, [r7, #7]
 8002dda:	4c17      	ldr	r4, [pc, #92]	; (8002e38 <gpioPinWrite+0xa0>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4423      	add	r3, r4
 8002de6:	3309      	adds	r3, #9
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	461a      	mov	r2, r3
 8002dec:	f00c f8c2 	bl	800ef74 <HAL_GPIO_WritePin>
 8002df0:	e01f      	b.n	8002e32 <gpioPinWrite+0x9a>
	}
	else
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 8002df2:	79fa      	ldrb	r2, [r7, #7]
 8002df4:	4910      	ldr	r1, [pc, #64]	; (8002e38 <gpioPinWrite+0xa0>)
 8002df6:	4613      	mov	r3, r2
 8002df8:	005b      	lsls	r3, r3, #1
 8002dfa:	4413      	add	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	440b      	add	r3, r1
 8002e00:	6818      	ldr	r0, [r3, #0]
 8002e02:	79fa      	ldrb	r2, [r7, #7]
 8002e04:	490c      	ldr	r1, [pc, #48]	; (8002e38 <gpioPinWrite+0xa0>)
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	440b      	add	r3, r1
 8002e10:	3304      	adds	r3, #4
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	b299      	uxth	r1, r3
 8002e16:	79fa      	ldrb	r2, [r7, #7]
 8002e18:	4c07      	ldr	r4, [pc, #28]	; (8002e38 <gpioPinWrite+0xa0>)
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	4413      	add	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4423      	add	r3, r4
 8002e24:	330a      	adds	r3, #10
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	f00c f8a3 	bl	800ef74 <HAL_GPIO_WritePin>
 8002e2e:	e000      	b.n	8002e32 <gpioPinWrite+0x9a>
		return ;
 8002e30:	bf00      	nop
	}

}
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd90      	pop	{r4, r7, pc}
 8002e38:	20000054 	.word	0x20000054

08002e3c <gpioPinRead>:


bool gpioPinRead(uint8_t ch)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]

	bool ret = false;
 8002e46:	2300      	movs	r3, #0
 8002e48:	73fb      	strb	r3, [r7, #15]

	if( ch >= GPIO_MAX_CH)
 8002e4a:	79fb      	ldrb	r3, [r7, #7]
 8002e4c:	2b03      	cmp	r3, #3
 8002e4e:	d901      	bls.n	8002e54 <gpioPinRead+0x18>
	{
		return false;
 8002e50:	2300      	movs	r3, #0
 8002e52:	e024      	b.n	8002e9e <gpioPinRead+0x62>
	}

	if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002e54:	79fa      	ldrb	r2, [r7, #7]
 8002e56:	4914      	ldr	r1, [pc, #80]	; (8002ea8 <gpioPinRead+0x6c>)
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	79fa      	ldrb	r2, [r7, #7]
 8002e66:	4910      	ldr	r1, [pc, #64]	; (8002ea8 <gpioPinRead+0x6c>)
 8002e68:	4613      	mov	r3, r2
 8002e6a:	005b      	lsls	r3, r3, #1
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	440b      	add	r3, r1
 8002e72:	3304      	adds	r3, #4
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	4619      	mov	r1, r3
 8002e7a:	f00c f863 	bl	800ef44 <HAL_GPIO_ReadPin>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	4618      	mov	r0, r3
 8002e82:	79fa      	ldrb	r2, [r7, #7]
 8002e84:	4908      	ldr	r1, [pc, #32]	; (8002ea8 <gpioPinRead+0x6c>)
 8002e86:	4613      	mov	r3, r2
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	4413      	add	r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	3309      	adds	r3, #9
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	4298      	cmp	r0, r3
 8002e96:	d101      	bne.n	8002e9c <gpioPinRead+0x60>
	{
		ret = true;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000054 	.word	0x20000054

08002eac <cliGpio>:

#ifdef _USE_HW_CLI


static void cliGpio(cli_args_t *args)
{
 8002eac:	b590      	push	{r4, r7, lr}
 8002eae:	b087      	sub	sp, #28
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	75fb      	strb	r3, [r7, #23]

	if (args -> argc == 1 && args -> isStr(0, "show") == true)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	881b      	ldrh	r3, [r3, #0]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d128      	bne.n	8002f12 <cliGpio+0x66>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	4947      	ldr	r1, [pc, #284]	; (8002fe4 <cliGpio+0x138>)
 8002ec6:	2000      	movs	r0, #0
 8002ec8:	4798      	blx	r3
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d020      	beq.n	8002f12 <cliGpio+0x66>
	{
		while (cliKeepLoop())
 8002ed0:	e018      	b.n	8002f04 <cliGpio+0x58>
		{
			for (int i=0; i < GPIO_MAX_CH; i++)
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	e00c      	b.n	8002ef2 <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ffad 	bl	8002e3c <gpioPinRead>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4840      	ldr	r0, [pc, #256]	; (8002fe8 <cliGpio+0x13c>)
 8002ee8:	f7ff f8cc 	bl	8002084 <cliPrintf>
			for (int i=0; i < GPIO_MAX_CH; i++)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	ddef      	ble.n	8002ed8 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 8002ef8:	483c      	ldr	r0, [pc, #240]	; (8002fec <cliGpio+0x140>)
 8002efa:	f7ff f8c3 	bl	8002084 <cliPrintf>
			delay(100);
 8002efe:	2064      	movs	r0, #100	; 0x64
 8002f00:	f7fe f8a0 	bl	8001044 <delay>
		while (cliKeepLoop())
 8002f04:	f7ff f9b8 	bl	8002278 <cliKeepLoop>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e1      	bne.n	8002ed2 <cliGpio+0x26>
		}
		ret = true;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	75fb      	strb	r3, [r7, #23]
	}

	if (args -> argc == 2 && args -> isStr(0, "read") == true)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	881b      	ldrh	r3, [r3, #0]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d123      	bne.n	8002f62 <cliGpio+0xb6>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <cliGpio+0x144>)
 8002f20:	2000      	movs	r0, #0
 8002f22:	4798      	blx	r3
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01b      	beq.n	8002f62 <cliGpio+0xb6>
	{
		uint8_t ch;

		ch = (uint8_t)args -> getData(1);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	2001      	movs	r0, #1
 8002f30:	4798      	blx	r3
 8002f32:	4603      	mov	r3, r0
 8002f34:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8002f36:	e00d      	b.n	8002f54 <cliGpio+0xa8>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002f38:	7bfc      	ldrb	r4, [r7, #15]
 8002f3a:	7bfb      	ldrb	r3, [r7, #15]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff7d 	bl	8002e3c <gpioPinRead>
 8002f42:	4603      	mov	r3, r0
 8002f44:	461a      	mov	r2, r3
 8002f46:	4621      	mov	r1, r4
 8002f48:	482a      	ldr	r0, [pc, #168]	; (8002ff4 <cliGpio+0x148>)
 8002f4a:	f7ff f89b 	bl	8002084 <cliPrintf>
			delay(100);
 8002f4e:	2064      	movs	r0, #100	; 0x64
 8002f50:	f7fe f878 	bl	8001044 <delay>
		while(cliKeepLoop())
 8002f54:	f7ff f990 	bl	8002278 <cliKeepLoop>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d1ec      	bne.n	8002f38 <cliGpio+0x8c>
		}
		ret = true;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	75fb      	strb	r3, [r7, #23]
	}

	if(args -> argc == 3 && args -> isStr(0, "write") == true)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	2b03      	cmp	r3, #3
 8002f68:	d126      	bne.n	8002fb8 <cliGpio+0x10c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	695b      	ldr	r3, [r3, #20]
 8002f6e:	4922      	ldr	r1, [pc, #136]	; (8002ff8 <cliGpio+0x14c>)
 8002f70:	2000      	movs	r0, #0
 8002f72:	4798      	blx	r3
 8002f74:	4603      	mov	r3, r0
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01e      	beq.n	8002fb8 <cliGpio+0x10c>
	{
		uint8_t ch;
		uint8_t value;

		ch 	  = (uint8_t)args -> getData(1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2001      	movs	r0, #1
 8002f80:	4798      	blx	r3
 8002f82:	4603      	mov	r3, r0
 8002f84:	73bb      	strb	r3, [r7, #14]
		value = (uint8_t)args -> getData(2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	2002      	movs	r0, #2
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, value);
 8002f92:	7b7b      	ldrb	r3, [r7, #13]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2da      	uxtb	r2, r3
 8002f9e:	7bbb      	ldrb	r3, [r7, #14]
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f7ff fef8 	bl	8002d98 <gpioPinWrite>
		cliPrintf("gpio write %d : %d\n", ch ,value);
 8002fa8:	7bbb      	ldrb	r3, [r7, #14]
 8002faa:	7b7a      	ldrb	r2, [r7, #13]
 8002fac:	4619      	mov	r1, r3
 8002fae:	4813      	ldr	r0, [pc, #76]	; (8002ffc <cliGpio+0x150>)
 8002fb0:	f7ff f868 	bl	8002084 <cliPrintf>

		ret = true;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	75fb      	strb	r3, [r7, #23]
	}

	if (ret != true)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	f083 0301 	eor.w	r3, r3, #1
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <cliGpio+0x12e>
	{
		cliPrintf("gpio show\n");
 8002fc4:	480e      	ldr	r0, [pc, #56]	; (8003000 <cliGpio+0x154>)
 8002fc6:	f7ff f85d 	bl	8002084 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 8002fca:	2103      	movs	r1, #3
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <cliGpio+0x158>)
 8002fce:	f7ff f859 	bl	8002084 <cliPrintf>
		cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 8002fd2:	2103      	movs	r1, #3
 8002fd4:	480c      	ldr	r0, [pc, #48]	; (8003008 <cliGpio+0x15c>)
 8002fd6:	f7ff f855 	bl	8002084 <cliPrintf>
	}

}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	080184ac 	.word	0x080184ac
 8002fe8:	080184b4 	.word	0x080184b4
 8002fec:	080184b8 	.word	0x080184b8
 8002ff0:	080184bc 	.word	0x080184bc
 8002ff4:	080184c4 	.word	0x080184c4
 8002ff8:	080184d8 	.word	0x080184d8
 8002ffc:	080184e0 	.word	0x080184e0
 8003000:	080184f4 	.word	0x080184f4
 8003004:	08018500 	.word	0x08018500
 8003008:	08018514 	.word	0x08018514

0800300c <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 8003010:	f7fe f823 	bl	800105a <millis>
 8003014:	4602      	mov	r2, r0
 8003016:	4b0d      	ldr	r3, [pc, #52]	; (800304c <TransferDoneISR+0x40>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	4a0c      	ldr	r2, [pc, #48]	; (8003050 <TransferDoneISR+0x44>)
 800301e:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 8003020:	f7fe f81b 	bl	800105a <millis>
 8003024:	4603      	mov	r3, r0
 8003026:	4a09      	ldr	r2, [pc, #36]	; (800304c <TransferDoneISR+0x40>)
 8003028:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 800302a:	4b09      	ldr	r3, [pc, #36]	; (8003050 <TransferDoneISR+0x44>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d007      	beq.n	8003042 <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <TransferDoneISR+0x44>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <TransferDoneISR+0x48>)
 8003040:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <TransferDoneISR+0x4c>)
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
}
 8003048:	bf00      	nop
 800304a:	bd80      	pop	{r7, pc}
 800304c:	200005c4 	.word	0x200005c4
 8003050:	200005c8 	.word	0x200005c8
 8003054:	200005cc 	.word	0x200005cc
 8003058:	200005c2 	.word	0x200005c2

0800305c <lcdInit>:


bool lcdInit(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af02      	add	r7, sp, #8
  backlight_value = 100;
 8003062:	4b22      	ldr	r3, [pc, #136]	; (80030ec <lcdInit+0x90>)
 8003064:	2264      	movs	r2, #100	; 0x64
 8003066:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  st7735Init();
 8003068:	f001 ffe0 	bl	800502c <st7735Init>
  st7735InitDriver(&lcd);
 800306c:	4820      	ldr	r0, [pc, #128]	; (80030f0 <lcdInit+0x94>)
 800306e:	f001 ffe9 	bl	8005044 <st7735InitDriver>
#endif

  lcd.setCallBack(TransferDoneISR);
 8003072:	4b1f      	ldr	r3, [pc, #124]	; (80030f0 <lcdInit+0x94>)
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	481f      	ldr	r0, [pc, #124]	; (80030f4 <lcdInit+0x98>)
 8003078:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800307a:	2300      	movs	r3, #0
 800307c:	607b      	str	r3, [r7, #4]
 800307e:	e007      	b.n	8003090 <lcdInit+0x34>
  {
    frame_buffer[0][i] = black;
 8003080:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <lcdInit+0x9c>)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2100      	movs	r1, #0
 8003086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3301      	adds	r3, #1
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8003096:	dbf3      	blt.n	8003080 <lcdInit+0x24>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8003098:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800309c:	2100      	movs	r1, #0
 800309e:	4816      	ldr	r0, [pc, #88]	; (80030f8 <lcdInit+0x9c>)
 80030a0:	f011 fed8 	bl	8014e54 <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 80030a4:	4b15      	ldr	r3, [pc, #84]	; (80030fc <lcdInit+0xa0>)
 80030a6:	781b      	ldrb	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80030ae:	fb03 f302 	mul.w	r3, r3, r2
 80030b2:	4a11      	ldr	r2, [pc, #68]	; (80030f8 <lcdInit+0x9c>)
 80030b4:	4413      	add	r3, r2
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <lcdInit+0xa4>)
 80030b8:	6013      	str	r3, [r2, #0]

  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	2350      	movs	r3, #80	; 0x50
 80030c0:	22a0      	movs	r2, #160	; 0xa0
 80030c2:	2100      	movs	r1, #0
 80030c4:	2000      	movs	r0, #0
 80030c6:	f000 f9b9 	bl	800343c <lcdDrawFillRect>
  lcdUpdateDraw();
 80030ca:	f000 f8bb 	bl	8003244 <lcdUpdateDraw>

  lcdSetBackLight(100);
 80030ce:	2064      	movs	r0, #100	; 0x64
 80030d0:	f000 f81e 	bl	8003110 <lcdSetBackLight>


  is_init = true;
 80030d4:	4b0b      	ldr	r3, [pc, #44]	; (8003104 <lcdInit+0xa8>)
 80030d6:	2201      	movs	r2, #1
 80030d8:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80030da:	490b      	ldr	r1, [pc, #44]	; (8003108 <lcdInit+0xac>)
 80030dc:	480b      	ldr	r0, [pc, #44]	; (800310c <lcdInit+0xb0>)
 80030de:	f7ff f8e1 	bl	80022a4 <cliAdd>
#endif

  return true;
 80030e2:	2301      	movs	r3, #1
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3708      	adds	r7, #8
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	20000084 	.word	0x20000084
 80030f0:	200005a4 	.word	0x200005a4
 80030f4:	0800300d 	.word	0x0800300d
 80030f8:	20000600 	.word	0x20000600
 80030fc:	200005c1 	.word	0x200005c1
 8003100:	200005d0 	.word	0x200005d0
 8003104:	200005c0 	.word	0x200005c0
 8003108:	0800365d 	.word	0x0800365d
 800310c:	080187f0 	.word	0x080187f0

08003110 <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	4603      	mov	r3, r0
 8003118:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 800311a:	79fb      	ldrb	r3, [r7, #7]
 800311c:	2b64      	cmp	r3, #100	; 0x64
 800311e:	bf28      	it	cs
 8003120:	2364      	movcs	r3, #100	; 0x64
 8003122:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8003124:	4b0c      	ldr	r3, [pc, #48]	; (8003158 <lcdSetBackLight+0x48>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	79fa      	ldrb	r2, [r7, #7]
 800312a:	429a      	cmp	r2, r3
 800312c:	d002      	beq.n	8003134 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 800312e:	4a0a      	ldr	r2, [pc, #40]	; (8003158 <lcdSetBackLight+0x48>)
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8003134:	4b08      	ldr	r3, [pc, #32]	; (8003158 <lcdSetBackLight+0x48>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d004      	beq.n	8003146 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 800313c:	2101      	movs	r1, #1
 800313e:	2001      	movs	r0, #1
 8003140:	f7ff fe2a 	bl	8002d98 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8003144:	e003      	b.n	800314e <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8003146:	2100      	movs	r1, #0
 8003148:	2001      	movs	r0, #1
 800314a:	f7ff fe25 	bl	8002d98 <gpioPinWrite>
}
 800314e:	bf00      	nop
 8003150:	3708      	adds	r7, #8
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	20000084 	.word	0x20000084

0800315c <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <lcdDrawPixel+0x14>)
 800315e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8003168:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	200005d0 	.word	0x200005d0

08003174 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8003174:	b510      	push	{r4, lr}
 8003176:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8003178:	f000 f878 	bl	800326c <lcdGetFrameBuffer>
 800317c:	f500 41c7 	add.w	r1, r0, #25472	; 0x6380
 8003180:	b2a2      	uxth	r2, r4
 8003182:	317e      	adds	r1, #126	; 0x7e
 8003184:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8003186:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 800318a:	428b      	cmp	r3, r1
 800318c:	d1fb      	bne.n	8003186 <lcdClearBuffer+0x12>
  }
}
 800318e:	bd10      	pop	{r4, pc}

08003190 <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return fps_count;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <lcdGetFps+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	200005cc 	.word	0x200005cc

080031a8 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 80031a8:	b480      	push	{r7}
 80031aa:	af00      	add	r7, sp, #0
  return fps_time;
 80031ac:	4b03      	ldr	r3, [pc, #12]	; (80031bc <lcdGetFpsTime+0x14>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	200005c8 	.word	0x200005c8

080031c0 <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <lcdDrawAvailable+0x28>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	bf14      	ite	ne
 80031cc:	2301      	movne	r3, #1
 80031ce:	2300      	moveq	r3, #0
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	f083 0301 	eor.w	r3, r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	b2db      	uxtb	r3, r3
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	200005c2 	.word	0x200005c2

080031ec <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80031ec:	b598      	push	{r3, r4, r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  if (lcd_request_draw == true)
 80031f0:	4b10      	ldr	r3, [pc, #64]	; (8003234 <lcdRequestDraw+0x48>)
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <lcdRequestDraw+0x10>
  {
    return false;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e019      	b.n	8003230 <lcdRequestDraw+0x44>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80031fc:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <lcdRequestDraw+0x4c>)
 80031fe:	689c      	ldr	r4, [r3, #8]
 8003200:	234f      	movs	r3, #79	; 0x4f
 8003202:	229f      	movs	r2, #159	; 0x9f
 8003204:	2100      	movs	r1, #0
 8003206:	2000      	movs	r0, #0
 8003208:	47a0      	blx	r4

  lcd_request_draw = true;
 800320a:	4b0a      	ldr	r3, [pc, #40]	; (8003234 <lcdRequestDraw+0x48>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <lcdRequestDraw+0x4c>)
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	4a09      	ldr	r2, [pc, #36]	; (800323c <lcdRequestDraw+0x50>)
 8003216:	7812      	ldrb	r2, [r2, #0]
 8003218:	4611      	mov	r1, r2
 800321a:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800321e:	fb02 f201 	mul.w	r2, r2, r1
 8003222:	4907      	ldr	r1, [pc, #28]	; (8003240 <lcdRequestDraw+0x54>)
 8003224:	1850      	adds	r0, r2, r1
 8003226:	2200      	movs	r2, #0
 8003228:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 800322c:	4798      	blx	r3

  return true;
 800322e:	2301      	movs	r3, #1
}
 8003230:	4618      	mov	r0, r3
 8003232:	bd98      	pop	{r3, r4, r7, pc}
 8003234:	200005c2 	.word	0x200005c2
 8003238:	200005a4 	.word	0x200005a4
 800323c:	200005c1 	.word	0x200005c1
 8003240:	20000600 	.word	0x20000600

08003244 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  lcdRequestDraw();
 8003248:	f7ff ffd0 	bl	80031ec <lcdRequestDraw>
  while(lcdDrawAvailable() != true)
 800324c:	e002      	b.n	8003254 <lcdUpdateDraw+0x10>
  {
    delay(1);
 800324e:	2001      	movs	r0, #1
 8003250:	f7fd fef8 	bl	8001044 <delay>
  while(lcdDrawAvailable() != true)
 8003254:	f7ff ffb4 	bl	80031c0 <lcdDrawAvailable>
 8003258:	4603      	mov	r3, r0
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1f4      	bne.n	800324e <lcdUpdateDraw+0xa>
  }
}
 8003264:	bf00      	nop
 8003266:	bf00      	nop
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop

0800326c <lcdGetFrameBuffer>:
{
  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 8003270:	4b03      	ldr	r3, [pc, #12]	; (8003280 <lcdGetFrameBuffer+0x14>)
 8003272:	681b      	ldr	r3, [r3, #0]
}
 8003274:	4618      	mov	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	200005d0 	.word	0x200005d0

08003284 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b089      	sub	sp, #36	; 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	4604      	mov	r4, r0
 800328c:	4608      	mov	r0, r1
 800328e:	4611      	mov	r1, r2
 8003290:	461a      	mov	r2, r3
 8003292:	4623      	mov	r3, r4
 8003294:	80fb      	strh	r3, [r7, #6]
 8003296:	4603      	mov	r3, r0
 8003298:	80bb      	strh	r3, [r7, #4]
 800329a:	460b      	mov	r3, r1
 800329c:	807b      	strh	r3, [r7, #2]
 800329e:	4613      	mov	r3, r2
 80032a0:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80032a2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80032a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80032b0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80032b4:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80032b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032bc:	1acb      	subs	r3, r1, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	bfb8      	it	lt
 80032c2:	425b      	neglt	r3, r3
 80032c4:	429a      	cmp	r2, r3
 80032c6:	bfcc      	ite	gt
 80032c8:	2301      	movgt	r3, #1
 80032ca:	2300      	movle	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80032d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da01      	bge.n	80032dc <lcdDrawLine+0x58>
 80032d8:	2300      	movs	r3, #0
 80032da:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80032dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	da01      	bge.n	80032e8 <lcdDrawLine+0x64>
 80032e4:	2300      	movs	r3, #0
 80032e6:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80032e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	da01      	bge.n	80032f4 <lcdDrawLine+0x70>
 80032f0:	2300      	movs	r3, #0
 80032f2:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 80032f4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	da01      	bge.n	8003300 <lcdDrawLine+0x7c>
 80032fc:	2300      	movs	r3, #0
 80032fe:	803b      	strh	r3, [r7, #0]


  if (steep)
 8003300:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8003308:	88fb      	ldrh	r3, [r7, #6]
 800330a:	833b      	strh	r3, [r7, #24]
 800330c:	88bb      	ldrh	r3, [r7, #4]
 800330e:	80fb      	strh	r3, [r7, #6]
 8003310:	8b3b      	ldrh	r3, [r7, #24]
 8003312:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	82fb      	strh	r3, [r7, #22]
 8003318:	883b      	ldrh	r3, [r7, #0]
 800331a:	807b      	strh	r3, [r7, #2]
 800331c:	8afb      	ldrh	r3, [r7, #22]
 800331e:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8003320:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003324:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003328:	429a      	cmp	r2, r3
 800332a:	dd0b      	ble.n	8003344 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	82bb      	strh	r3, [r7, #20]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	80fb      	strh	r3, [r7, #6]
 8003334:	8abb      	ldrh	r3, [r7, #20]
 8003336:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8003338:	88bb      	ldrh	r3, [r7, #4]
 800333a:	827b      	strh	r3, [r7, #18]
 800333c:	883b      	ldrh	r3, [r7, #0]
 800333e:	80bb      	strh	r3, [r7, #4]
 8003340:	8a7b      	ldrh	r3, [r7, #18]
 8003342:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8003344:	887a      	ldrh	r2, [r7, #2]
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	b29b      	uxth	r3, r3
 800334c:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 800334e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003352:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b00      	cmp	r3, #0
 800335a:	bfb8      	it	lt
 800335c:	425b      	neglt	r3, r3
 800335e:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8003360:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003364:	0fda      	lsrs	r2, r3, #31
 8003366:	4413      	add	r3, r2
 8003368:	105b      	asrs	r3, r3, #1
 800336a:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 800336c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003370:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003374:	429a      	cmp	r2, r3
 8003376:	da02      	bge.n	800337e <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8003378:	2301      	movs	r3, #1
 800337a:	83bb      	strh	r3, [r7, #28]
 800337c:	e02d      	b.n	80033da <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 800337e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003382:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8003384:	e029      	b.n	80033da <lcdDrawLine+0x156>
  {
    if (steep)
 8003386:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d006      	beq.n	800339c <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 800338e:	88bb      	ldrh	r3, [r7, #4]
 8003390:	88f9      	ldrh	r1, [r7, #6]
 8003392:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fee1 	bl	800315c <lcdDrawPixel>
 800339a:	e005      	b.n	80033a8 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	88b9      	ldrh	r1, [r7, #4]
 80033a0:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7ff feda 	bl	800315c <lcdDrawPixel>
    }
    err -= dy;
 80033a8:	8bfa      	ldrh	r2, [r7, #30]
 80033aa:	89fb      	ldrh	r3, [r7, #14]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 80033b2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	da09      	bge.n	80033ce <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 80033ba:	88ba      	ldrh	r2, [r7, #4]
 80033bc:	8bbb      	ldrh	r3, [r7, #28]
 80033be:	4413      	add	r3, r2
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80033c4:	8bfa      	ldrh	r2, [r7, #30]
 80033c6:	8a3b      	ldrh	r3, [r7, #16]
 80033c8:	4413      	add	r3, r2
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 80033ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	3301      	adds	r3, #1
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	80fb      	strh	r3, [r7, #6]
 80033da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80033de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80033e2:	429a      	cmp	r2, r3
 80033e4:	ddcf      	ble.n	8003386 <lcdDrawLine+0x102>
    }
  }
}
 80033e6:	bf00      	nop
 80033e8:	bf00      	nop
 80033ea:	3724      	adds	r7, #36	; 0x24
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd90      	pop	{r4, r7, pc}

080033f0 <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 80033f0:	b590      	push	{r4, r7, lr}
 80033f2:	b085      	sub	sp, #20
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	4604      	mov	r4, r0
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	80fb      	strh	r3, [r7, #6]
 8003402:	4603      	mov	r3, r0
 8003404:	80bb      	strh	r3, [r7, #4]
 8003406:	460b      	mov	r3, r1
 8003408:	807b      	strh	r3, [r7, #2]
 800340a:	4613      	mov	r3, r2
 800340c:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 800340e:	88ba      	ldrh	r2, [r7, #4]
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	4413      	add	r3, r2
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29b      	uxth	r3, r3
 800341a:	b21c      	sxth	r4, r3
 800341c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003420:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003424:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003428:	883b      	ldrh	r3, [r7, #0]
 800342a:	9300      	str	r3, [sp, #0]
 800342c:	4623      	mov	r3, r4
 800342e:	f7ff ff29 	bl	8003284 <lcdDrawLine>
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	bd90      	pop	{r4, r7, pc}
 800343a:	bf00      	nop

0800343c <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	4604      	mov	r4, r0
 8003444:	4608      	mov	r0, r1
 8003446:	4611      	mov	r1, r2
 8003448:	461a      	mov	r2, r3
 800344a:	4623      	mov	r3, r4
 800344c:	80fb      	strh	r3, [r7, #6]
 800344e:	4603      	mov	r3, r0
 8003450:	80bb      	strh	r3, [r7, #4]
 8003452:	460b      	mov	r3, r1
 8003454:	807b      	strh	r3, [r7, #2]
 8003456:	4613      	mov	r3, r2
 8003458:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	81fb      	strh	r3, [r7, #14]
 800345e:	e00e      	b.n	800347e <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8003460:	8c3b      	ldrh	r3, [r7, #32]
 8003462:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003466:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800346a:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800346e:	f7ff ffbf 	bl	80033f0 <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8003472:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003476:	b29b      	uxth	r3, r3
 8003478:	3301      	adds	r3, #1
 800347a:	b29b      	uxth	r3, r3
 800347c:	81fb      	strh	r3, [r7, #14]
 800347e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003482:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8003486:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800348a:	440b      	add	r3, r1
 800348c:	429a      	cmp	r2, r3
 800348e:	dbe7      	blt.n	8003460 <lcdDrawFillRect+0x24>
  }
}
 8003490:	bf00      	nop
 8003492:	bf00      	nop
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bd90      	pop	{r4, r7, pc}
 800349a:	bf00      	nop

0800349c <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 800349c:	b408      	push	{r3}
 800349e:	b580      	push	{r7, lr}
 80034a0:	b0d5      	sub	sp, #340	; 0x154
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	6018      	str	r0, [r3, #0]
 80034aa:	f107 0308 	add.w	r3, r7, #8
 80034ae:	6019      	str	r1, [r3, #0]
 80034b0:	1dbb      	adds	r3, r7, #6
 80034b2:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 80034b4:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 80034b8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 80034bc:	f107 030c 	add.w	r3, r7, #12
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  han_font_t FontBuf;
  uint8_t font_width;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 80034c6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80034ca:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80034ce:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80034d2:	21ff      	movs	r1, #255	; 0xff
 80034d4:	f012 fc2e 	bl	8015d34 <vsniprintf>
 80034d8:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
  va_end (arg);

  for( i=0; i<len; i+=Size_Char )
 80034dc:	2300      	movs	r3, #0
 80034de:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80034e2:	e054      	b.n	800358e <lcdPrintf+0xf2>
  {
    hanFontLoad( &print_buffer[i], &FontBuf );
 80034e4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80034e8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80034ec:	4413      	add	r3, r2
 80034ee:	f107 0210 	add.w	r2, r7, #16
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 faa7 	bl	8004a48 <hanFontLoad>

    disHanFont( x, y, &FontBuf, color);
 80034fa:	1dbb      	adds	r3, r7, #6
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	f107 0210 	add.w	r2, r7, #16
 8003502:	f107 0108 	add.w	r1, r7, #8
 8003506:	f107 000c 	add.w	r0, r7, #12
 800350a:	6809      	ldr	r1, [r1, #0]
 800350c:	6800      	ldr	r0, [r0, #0]
 800350e:	f000 f84f 	bl	80035b0 <disHanFont>

    Size_Char = FontBuf.Size_Char;
 8003512:	f107 0310 	add.w	r3, r7, #16
 8003516:	885b      	ldrh	r3, [r3, #2]
 8003518:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    if (Size_Char >= 2)
 800351c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003520:	2b01      	cmp	r3, #1
 8003522:	dd0a      	ble.n	800353a <lcdPrintf+0x9e>
    {
      font_width = 16;
 8003524:	2310      	movs	r3, #16
 8003526:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
      x += 2*8;
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	f107 020c 	add.w	r2, r7, #12
 8003532:	6812      	ldr	r2, [r2, #0]
 8003534:	3210      	adds	r2, #16
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e009      	b.n	800354e <lcdPrintf+0xb2>
    }
    else
    {
      font_width = 8;
 800353a:	2308      	movs	r3, #8
 800353c:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
      x += 1*8;
 8003540:	f107 030c 	add.w	r3, r7, #12
 8003544:	f107 020c 	add.w	r2, r7, #12
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	3208      	adds	r2, #8
 800354c:	601a      	str	r2, [r3, #0]
    }

    if ((x+font_width) > HW_LCD_WIDTH)
 800354e:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8003552:	f107 030c 	add.w	r3, r7, #12
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4413      	add	r3, r2
 800355a:	2ba0      	cmp	r3, #160	; 0xa0
 800355c:	dd0b      	ble.n	8003576 <lcdPrintf+0xda>
    {
      x  = x_Pre;
 800355e:	f107 030c 	add.w	r3, r7, #12
 8003562:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003566:	601a      	str	r2, [r3, #0]
      y += 16;
 8003568:	f107 0308 	add.w	r3, r7, #8
 800356c:	f107 0208 	add.w	r2, r7, #8
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	3210      	adds	r2, #16
 8003574:	601a      	str	r2, [r3, #0]
    }

    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	889b      	ldrh	r3, [r3, #4]
 800357c:	2b04      	cmp	r3, #4
 800357e:	d00d      	beq.n	800359c <lcdPrintf+0x100>
  for( i=0; i<len; i+=Size_Char )
 8003580:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003584:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003588:	4413      	add	r3, r2
 800358a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800358e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003592:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8003596:	429a      	cmp	r2, r3
 8003598:	dba4      	blt.n	80034e4 <lcdPrintf+0x48>
  }
}
 800359a:	e000      	b.n	800359e <lcdPrintf+0x102>
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 800359c:	bf00      	nop
}
 800359e:	bf00      	nop
 80035a0:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035aa:	b001      	add	sp, #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop

080035b0 <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b088      	sub	sp, #32
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
 80035bc:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	885b      	ldrh	r3, [r3, #2]
 80035c2:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 80035c4:	8b3b      	ldrh	r3, [r7, #24]
 80035c6:	2b02      	cmp	r3, #2
 80035c8:	d901      	bls.n	80035ce <disHanFont+0x1e>
  {
    FontSize = 2;
 80035ca:	2302      	movs	r3, #2
 80035cc:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 80035ce:	2300      	movs	r3, #0
 80035d0:	83fb      	strh	r3, [r7, #30]
 80035d2:	e03a      	b.n	800364a <disHanFont+0x9a>
  {
    index_x = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 80035d8:	2300      	movs	r3, #0
 80035da:	83bb      	strh	r3, [r7, #28]
 80035dc:	e02e      	b.n	800363c <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 80035de:	8bfb      	ldrh	r3, [r7, #30]
 80035e0:	8b3a      	ldrh	r2, [r7, #24]
 80035e2:	fb02 f203 	mul.w	r2, r2, r3
 80035e6:	8bbb      	ldrh	r3, [r7, #28]
 80035e8:	4413      	add	r3, r2
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	4413      	add	r3, r2
 80035ee:	799b      	ldrb	r3, [r3, #6]
 80035f0:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 80035f2:	2300      	movs	r3, #0
 80035f4:	837b      	strh	r3, [r7, #26]
 80035f6:	e01b      	b.n	8003630 <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 80035f8:	7d7a      	ldrb	r2, [r7, #21]
 80035fa:	8b7b      	ldrh	r3, [r7, #26]
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	b29a      	uxth	r2, r3
 800360c:	8afb      	ldrh	r3, [r7, #22]
 800360e:	4413      	add	r3, r2
 8003610:	b298      	uxth	r0, r3
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	b29a      	uxth	r2, r3
 8003616:	8bfb      	ldrh	r3, [r7, #30]
 8003618:	4413      	add	r3, r2
 800361a:	b29b      	uxth	r3, r3
 800361c:	887a      	ldrh	r2, [r7, #2]
 800361e:	4619      	mov	r1, r3
 8003620:	f7ff fd9c 	bl	800315c <lcdDrawPixel>
        }
        index_x++;
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	3301      	adds	r3, #1
 8003628:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 800362a:	8b7b      	ldrh	r3, [r7, #26]
 800362c:	3301      	adds	r3, #1
 800362e:	837b      	strh	r3, [r7, #26]
 8003630:	8b7b      	ldrh	r3, [r7, #26]
 8003632:	2b07      	cmp	r3, #7
 8003634:	d9e0      	bls.n	80035f8 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8003636:	8bbb      	ldrh	r3, [r7, #28]
 8003638:	3301      	adds	r3, #1
 800363a:	83bb      	strh	r3, [r7, #28]
 800363c:	8bba      	ldrh	r2, [r7, #28]
 800363e:	8b3b      	ldrh	r3, [r7, #24]
 8003640:	429a      	cmp	r2, r3
 8003642:	d3cc      	bcc.n	80035de <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8003644:	8bfb      	ldrh	r3, [r7, #30]
 8003646:	3301      	adds	r3, #1
 8003648:	83fb      	strh	r3, [r7, #30]
 800364a:	8bfb      	ldrh	r3, [r7, #30]
 800364c:	2b0f      	cmp	r3, #15
 800364e:	d9c1      	bls.n	80035d4 <disHanFont+0x24>
      }
    }
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3720      	adds	r7, #32
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop

0800365c <cliLcd>:



#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af02      	add	r7, sp, #8
 8003662:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003664:	2300      	movs	r3, #0
 8003666:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	881b      	ldrh	r3, [r3, #0]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d160      	bne.n	8003732 <cliLcd+0xd6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	4935      	ldr	r1, [pc, #212]	; (800374c <cliLcd+0xf0>)
 8003676:	2000      	movs	r0, #0
 8003678:	4798      	blx	r3
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d058      	beq.n	8003732 <cliLcd+0xd6>
  {
    while(cliKeepLoop())
 8003680:	e04b      	b.n	800371a <cliLcd+0xbe>
    {
      if (lcdDrawAvailable() == true)
 8003682:	f7ff fd9d 	bl	80031c0 <lcdDrawAvailable>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d046      	beq.n	800371a <cliLcd+0xbe>
      {
        lcdClearBuffer(black);
 800368c:	2000      	movs	r0, #0
 800368e:	f7ff fd71 	bl	8003174 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8003692:	4b2f      	ldr	r3, [pc, #188]	; (8003750 <cliLcd+0xf4>)
 8003694:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003698:	2100      	movs	r1, #0
 800369a:	2019      	movs	r0, #25
 800369c:	f7ff fefe 	bl	800349c <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 80036a0:	f7ff fd76 	bl	8003190 <lcdGetFps>
 80036a4:	4603      	mov	r3, r0
 80036a6:	9300      	str	r3, [sp, #0]
 80036a8:	4b2a      	ldr	r3, [pc, #168]	; (8003754 <cliLcd+0xf8>)
 80036aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ae:	2110      	movs	r1, #16
 80036b0:	2000      	movs	r0, #0
 80036b2:	f7ff fef3 	bl	800349c <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 80036b6:	f7ff fd77 	bl	80031a8 <lcdGetFpsTime>
 80036ba:	4603      	mov	r3, r0
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	4b26      	ldr	r3, [pc, #152]	; (8003758 <cliLcd+0xfc>)
 80036c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036c4:	2120      	movs	r1, #32
 80036c6:	2000      	movs	r0, #0
 80036c8:	f7ff fee8 	bl	800349c <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 80036cc:	f7fd fcc5 	bl	800105a <millis>
 80036d0:	4603      	mov	r3, r0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	4b20      	ldr	r3, [pc, #128]	; (8003758 <cliLcd+0xfc>)
 80036d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036da:	2130      	movs	r1, #48	; 0x30
 80036dc:	2000      	movs	r0, #0
 80036de:	f7ff fedd 	bl	800349c <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 80036e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	230a      	movs	r3, #10
 80036ea:	220a      	movs	r2, #10
 80036ec:	2146      	movs	r1, #70	; 0x46
 80036ee:	2000      	movs	r0, #0
 80036f0:	f7ff fea4 	bl	800343c <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 80036f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	230a      	movs	r3, #10
 80036fc:	220a      	movs	r2, #10
 80036fe:	2146      	movs	r1, #70	; 0x46
 8003700:	200a      	movs	r0, #10
 8003702:	f7ff fe9b 	bl	800343c <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8003706:	231f      	movs	r3, #31
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	230a      	movs	r3, #10
 800370c:	220a      	movs	r2, #10
 800370e:	2146      	movs	r1, #70	; 0x46
 8003710:	2014      	movs	r0, #20
 8003712:	f7ff fe93 	bl	800343c <lcdDrawFillRect>

        lcdRequestDraw();
 8003716:	f7ff fd69 	bl	80031ec <lcdRequestDraw>
    while(cliKeepLoop())
 800371a:	f7fe fdad 	bl	8002278 <cliKeepLoop>
 800371e:	4603      	mov	r3, r0
 8003720:	2b00      	cmp	r3, #0
 8003722:	d1ae      	bne.n	8003682 <cliLcd+0x26>
      }
    }

    lcdClearBuffer(black);
 8003724:	2000      	movs	r0, #0
 8003726:	f7ff fd25 	bl	8003174 <lcdClearBuffer>
    lcdUpdateDraw();
 800372a:	f7ff fd8b 	bl	8003244 <lcdUpdateDraw>

    ret = true;
 800372e:	2301      	movs	r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	f083 0301 	eor.w	r3, r3, #1
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <cliLcd+0xe8>
  {
    cliPrintf("lcd test\n");
 800373e:	4807      	ldr	r0, [pc, #28]	; (800375c <cliLcd+0x100>)
 8003740:	f7fe fca0 	bl	8002084 <cliPrintf>
  }
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	080187f4 	.word	0x080187f4
 8003750:	080187fc 	.word	0x080187fc
 8003754:	0801880c 	.word	0x0801880c
 8003758:	08018814 	.word	0x08018814
 800375c:	0801881c 	.word	0x0801881c

08003760 <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b088      	sub	sp, #32
 8003764:	af00      	add	r7, sp, #0
  bool ret = true;
 8003766:	2301      	movs	r3, #1
 8003768:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800376a:	1d3b      	adds	r3, r7, #4
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
 8003772:	609a      	str	r2, [r3, #8]
 8003774:	60da      	str	r2, [r3, #12]
 8003776:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003778:	2300      	movs	r3, #0
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4b1b      	ldr	r3, [pc, #108]	; (80037ec <ledInit+0x8c>)
 800377e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003780:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <ledInit+0x8c>)
 8003782:	f043 0304 	orr.w	r3, r3, #4
 8003786:	6313      	str	r3, [r2, #48]	; 0x30
 8003788:	4b18      	ldr	r3, [pc, #96]	; (80037ec <ledInit+0x8c>)
 800378a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378c:	f003 0304 	and.w	r3, r3, #4
 8003790:	603b      	str	r3, [r7, #0]
 8003792:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003794:	2301      	movs	r3, #1
 8003796:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003798:	2300      	movs	r3, #0
 800379a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	e016      	b.n	80037d4 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <ledInit+0x90>)
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4413      	add	r3, r2
 80037ae:	889b      	ldrh	r3, [r3, #4]
 80037b0:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 80037b2:	4a0f      	ldr	r2, [pc, #60]	; (80037f0 <ledInit+0x90>)
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80037ba:	1d3a      	adds	r2, r7, #4
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f00b fa3c 	bl	800ec3c <HAL_GPIO_Init>

    ledOff(i);
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	f000 f817 	bl	80037fc <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3301      	adds	r3, #1
 80037d2:	61fb      	str	r3, [r7, #28]
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	dde5      	ble.n	80037a6 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 80037da:	4906      	ldr	r1, [pc, #24]	; (80037f4 <ledInit+0x94>)
 80037dc:	4806      	ldr	r0, [pc, #24]	; (80037f8 <ledInit+0x98>)
 80037de:	f7fe fd61 	bl	80022a4 <cliAdd>
#endif

  return ret;
 80037e2:	7efb      	ldrb	r3, [r7, #27]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3720      	adds	r7, #32
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	40023800 	.word	0x40023800
 80037f0:	20000088 	.word	0x20000088
 80037f4:	08003875 	.word	0x08003875
 80037f8:	08018530 	.word	0x08018530

080037fc <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d111      	bne.n	8003830 <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 800380c:	79fb      	ldrb	r3, [r7, #7]
 800380e:	4a0a      	ldr	r2, [pc, #40]	; (8003838 <ledOff+0x3c>)
 8003810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8003814:	79fb      	ldrb	r3, [r7, #7]
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <ledOff+0x3c>)
 8003818:	00db      	lsls	r3, r3, #3
 800381a:	4413      	add	r3, r2
 800381c:	8899      	ldrh	r1, [r3, #4]
 800381e:	79fb      	ldrb	r3, [r7, #7]
 8003820:	4a05      	ldr	r2, [pc, #20]	; (8003838 <ledOff+0x3c>)
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	4413      	add	r3, r2
 8003826:	79db      	ldrb	r3, [r3, #7]
 8003828:	461a      	mov	r2, r3
 800382a:	f00b fba3 	bl	800ef74 <HAL_GPIO_WritePin>
 800382e:	e000      	b.n	8003832 <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8003830:	bf00      	nop
}
 8003832:	3708      	adds	r7, #8
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	20000088 	.word	0x20000088

0800383c <ledToggle>:

void ledToggle(uint8_t ch)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	4603      	mov	r3, r0
 8003844:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8003846:	79fb      	ldrb	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10d      	bne.n	8003868 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	4a08      	ldr	r2, [pc, #32]	; (8003870 <ledToggle+0x34>)
 8003850:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8003854:	79fb      	ldrb	r3, [r7, #7]
 8003856:	4906      	ldr	r1, [pc, #24]	; (8003870 <ledToggle+0x34>)
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	440b      	add	r3, r1
 800385c:	889b      	ldrh	r3, [r3, #4]
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f00b fba0 	bl	800efa6 <HAL_GPIO_TogglePin>
 8003866:	e000      	b.n	800386a <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8003868:	bf00      	nop
}
 800386a:	3708      	adds	r7, #8
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000088 	.word	0x20000088

08003874 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  bool ret = false;
 800387c:	2300      	movs	r3, #0
 800387e:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	881b      	ldrh	r3, [r3, #0]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d133      	bne.n	80038f0 <cliLed+0x7c>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	491f      	ldr	r1, [pc, #124]	; (800390c <cliLed+0x98>)
 800388e:	2000      	movs	r0, #0
 8003890:	4798      	blx	r3
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d02b      	beq.n	80038f0 <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	2001      	movs	r0, #1
 800389e:	4798      	blx	r3
 80038a0:	4603      	mov	r3, r0
 80038a2:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2002      	movs	r0, #2
 80038aa:	4798      	blx	r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 80038b0:	7dbb      	ldrb	r3, [r7, #22]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <cliLed+0x48>
    {
      led_ch--;
 80038b6:	7dbb      	ldrb	r3, [r7, #22]
 80038b8:	3b01      	subs	r3, #1
 80038ba:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 80038bc:	f7fd fbcd 	bl	800105a <millis>
 80038c0:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 80038c2:	e00e      	b.n	80038e2 <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 80038c4:	f7fd fbc9 	bl	800105a <millis>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d806      	bhi.n	80038e2 <cliLed+0x6e>
      {
        pre_time = millis();
 80038d4:	f7fd fbc1 	bl	800105a <millis>
 80038d8:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 80038da:	7dbb      	ldrb	r3, [r7, #22]
 80038dc:	4618      	mov	r0, r3
 80038de:	f7ff ffad 	bl	800383c <ledToggle>
    while(cliKeepLoop())
 80038e2:	f7fe fcc9 	bl	8002278 <cliKeepLoop>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1eb      	bne.n	80038c4 <cliLed+0x50>
      }
    }

    ret = true;
 80038ec:	2301      	movs	r3, #1
 80038ee:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 80038f0:	7dfb      	ldrb	r3, [r7, #23]
 80038f2:	f083 0301 	eor.w	r3, r3, #1
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d003      	beq.n	8003904 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 80038fc:	2101      	movs	r1, #1
 80038fe:	4804      	ldr	r0, [pc, #16]	; (8003910 <cliLed+0x9c>)
 8003900:	f7fe fbc0 	bl	8002084 <cliPrintf>
  }
}
 8003904:	bf00      	nop
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08018534 	.word	0x08018534
 8003910:	0801853c 	.word	0x0801853c

08003914 <sdInit>:
static void cliSd(cli_args_t *args);
#endif /* _USE_HW_CLI */


bool sdInit(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
	bool ret 			 		 = false;
 800391a:	2300      	movs	r3, #0
 800391c:	71fb      	strb	r3, [r7, #7]
	hsd.Instance 		 		 = SDIO;
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <sdInit+0x8c>)
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <sdInit+0x90>)
 8003922:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge   		 = SDIO_CLOCK_EDGE_RISING;
 8003924:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <sdInit+0x8c>)
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass 		 = SDIO_CLOCK_BYPASS_DISABLE;
 800392a:	4b1d      	ldr	r3, [pc, #116]	; (80039a0 <sdInit+0x8c>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave 	 = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <sdInit+0x8c>)
 8003932:	2200      	movs	r2, #0
 8003934:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide	     	 = SDIO_BUS_WIDE_1B;
 8003936:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <sdInit+0x8c>)
 8003938:	2200      	movs	r2, #0
 800393a:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800393c:	4b18      	ldr	r3, [pc, #96]	; (80039a0 <sdInit+0x8c>)
 800393e:	2200      	movs	r2, #0
 8003940:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv 			 = SDIO_TRANSFER_CLK_DIV;
 8003942:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <sdInit+0x8c>)
 8003944:	2200      	movs	r2, #0
 8003946:	619a      	str	r2, [r3, #24]

	is_detected = false;
 8003948:	4b17      	ldr	r3, [pc, #92]	; (80039a8 <sdInit+0x94>)
 800394a:	2200      	movs	r2, #0
 800394c:	701a      	strb	r2, [r3, #0]
	if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 800394e:	2000      	movs	r0, #0
 8003950:	f7ff fa74 	bl	8002e3c <gpioPinRead>
 8003954:	4603      	mov	r3, r0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <sdInit+0x4c>
	{
	   is_detected = true;
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <sdInit+0x94>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 8003960:	4b11      	ldr	r3, [pc, #68]	; (80039a8 <sdInit+0x94>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00f      	beq.n	8003988 <sdInit+0x74>
	{
		if (HAL_SD_Init(&hsd) == HAL_OK)
 8003968:	480d      	ldr	r0, [pc, #52]	; (80039a0 <sdInit+0x8c>)
 800396a:	f00d f907 	bl	8010b7c <HAL_SD_Init>
 800396e:	4603      	mov	r3, r0
 8003970:	2b00      	cmp	r3, #0
 8003972:	d109      	bne.n	8003988 <sdInit+0x74>
		{
			if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 8003974:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003978:	4809      	ldr	r0, [pc, #36]	; (80039a0 <sdInit+0x8c>)
 800397a:	f00d fedf 	bl	801173c <HAL_SD_ConfigWideBusOperation>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d101      	bne.n	8003988 <sdInit+0x74>
			{
			   ret = true;
 8003984:	2301      	movs	r3, #1
 8003986:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8003988:	4a08      	ldr	r2, [pc, #32]	; (80039ac <sdInit+0x98>)
 800398a:	79fb      	ldrb	r3, [r7, #7]
 800398c:	7013      	strb	r3, [r2, #0]

#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 800398e:	4908      	ldr	r1, [pc, #32]	; (80039b0 <sdInit+0x9c>)
 8003990:	4808      	ldr	r0, [pc, #32]	; (80039b4 <sdInit+0xa0>)
 8003992:	f7fe fc87 	bl	80022a4 <cliAdd>
#endif /* _USE_HW_CLI */

	return ret;
 8003996:	79fb      	ldrb	r3, [r7, #7]
}
 8003998:	4618      	mov	r0, r3
 800399a:	3708      	adds	r7, #8
 800399c:	46bd      	mov	sp, r7
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200073d8 	.word	0x200073d8
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	20006a01 	.word	0x20006a01
 80039ac:	20006a00 	.word	0x20006a00
 80039b0:	08003e99 	.word	0x08003e99
 80039b4:	0801855c 	.word	0x0801855c

080039b8 <sdIsInit>:
}



bool sdIsInit(void)
{
 80039b8:	b480      	push	{r7}
 80039ba:	af00      	add	r7, sp, #0
  return is_init;
 80039bc:	4b03      	ldr	r3, [pc, #12]	; (80039cc <sdIsInit+0x14>)
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20006a00 	.word	0x20006a00

080039d0 <sdIsDetected>:



bool sdIsDetected(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80039d4:	2000      	movs	r0, #0
 80039d6:	f7ff fa31 	bl	8002e3c <gpioPinRead>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <sdIsDetected+0x18>
  {
    is_detected = true;
 80039e0:	4b05      	ldr	r3, [pc, #20]	; (80039f8 <sdIsDetected+0x28>)
 80039e2:	2201      	movs	r2, #1
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e002      	b.n	80039ee <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <sdIsDetected+0x28>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 80039ee:	4b02      	ldr	r3, [pc, #8]	; (80039f8 <sdIsDetected+0x28>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20006a01 	.word	0x20006a01

080039fc <sdGetInfo>:




bool sdGetInfo(sd_info_t *p_info)
{
 80039fc:	b5b0      	push	{r4, r5, r7, lr}
 80039fe:	b08c      	sub	sp, #48	; 0x30
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003a04:	2300      	movs	r3, #0
 8003a06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 8003a0e:	4b24      	ldr	r3, [pc, #144]	; (8003aa0 <sdGetInfo+0xa4>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d03e      	beq.n	8003a94 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	4619      	mov	r1, r3
 8003a1c:	4821      	ldr	r0, [pc, #132]	; (8003aa4 <sdGetInfo+0xa8>)
 8003a1e:	f00d fe61 	bl	80116e4 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 8003a22:	68ba      	ldr	r2, [r7, #8]
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a38:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3e:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 8003a40:	69fa      	ldr	r2, [r7, #28]
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 8003a46:	6a3a      	ldr	r2, [r7, #32]
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 8003a4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 8003a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	4618      	mov	r0, r3
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	461a      	mov	r2, r3
 8003a62:	f04f 0300 	mov.w	r3, #0
 8003a66:	fb02 f501 	mul.w	r5, r2, r1
 8003a6a:	fb00 f403 	mul.w	r4, r0, r3
 8003a6e:	442c      	add	r4, r5
 8003a70:	fba0 2302 	umull	r2, r3, r0, r2
 8003a74:	18e1      	adds	r1, r4, r3
 8003a76:	460b      	mov	r3, r1
 8003a78:	f04f 0000 	mov.w	r0, #0
 8003a7c:	f04f 0100 	mov.w	r1, #0
 8003a80:	0d10      	lsrs	r0, r2, #20
 8003a82:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8003a86:	0d19      	lsrs	r1, r3, #20
 8003a88:	4602      	mov	r2, r0
 8003a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8c:	621a      	str	r2, [r3, #32]
    ret = true;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8003a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3730      	adds	r7, #48	; 0x30
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa0:	20006a00 	.word	0x20006a00
 8003aa4:	200073d8 	.word	0x200073d8

08003aa8 <sdIsBusy>:


bool sdIsBusy(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 8003aae:	4808      	ldr	r0, [pc, #32]	; (8003ad0 <sdIsBusy+0x28>)
 8003ab0:	f00d fede 	bl	8011870 <HAL_SD_GetCardState>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d102      	bne.n	8003ac0 <sdIsBusy+0x18>
  {
    is_busy = false;
 8003aba:	2300      	movs	r3, #0
 8003abc:	71fb      	strb	r3, [r7, #7]
 8003abe:	e001      	b.n	8003ac4 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8003ac4:	79fb      	ldrb	r3, [r7, #7]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200073d8 	.word	0x200073d8

08003ad4 <sdIsReady>:



bool sdIsReady(uint32_t timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 8003adc:	f7fd fabd 	bl	800105a <millis>
 8003ae0:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8003ae2:	e009      	b.n	8003af8 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8003ae4:	f7ff ffe0 	bl	8003aa8 <sdIsBusy>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	f083 0301 	eor.w	r3, r3, #1
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <sdIsReady+0x24>
    {
      return true;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e008      	b.n	8003b0a <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8003af8:	f7fd faaf 	bl	800105a <millis>
 8003afc:	4602      	mov	r2, r0
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d8ed      	bhi.n	8003ae4 <sdIsReady+0x10>
    }
  }

  return false;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <sdReadBlocks>:



bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 8003b26:	4b1e      	ldr	r3, [pc, #120]	; (8003ba0 <sdReadBlocks+0x8c>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68fa      	ldr	r2, [r7, #12]
 8003b30:	68b9      	ldr	r1, [r7, #8]
 8003b32:	481c      	ldr	r0, [pc, #112]	; (8003ba4 <sdReadBlocks+0x90>)
 8003b34:	f00d f8d0 	bl	8010cd8 <HAL_SD_ReadBlocks_DMA>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d12a      	bne.n	8003b94 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 8003b3e:	f7fd fa8c 	bl	800105a <millis>
 8003b42:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 8003b44:	e007      	b.n	8003b56 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8003b46:	f7fd fa88 	bl	800105a <millis>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	683a      	ldr	r2, [r7, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d908      	bls.n	8003b68 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <sdReadBlocks+0x8c>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f083 0301 	eor.w	r3, r3, #1
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ef      	bne.n	8003b46 <sdReadBlocks+0x32>
 8003b66:	e00d      	b.n	8003b84 <sdReadBlocks+0x70>
      {
        break;
 8003b68:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 8003b6a:	e00b      	b.n	8003b84 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8003b6c:	f7fd fa75 	bl	800105a <millis>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	683a      	ldr	r2, [r7, #0]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d803      	bhi.n	8003b84 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <sdReadBlocks+0x8c>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	701a      	strb	r2, [r3, #0]
        break;
 8003b82:	e004      	b.n	8003b8e <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8003b84:	f7ff ff90 	bl	8003aa8 <sdIsBusy>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1ee      	bne.n	8003b6c <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 8003b8e:	4b04      	ldr	r3, [pc, #16]	; (8003ba0 <sdReadBlocks+0x8c>)
 8003b90:	781b      	ldrb	r3, [r3, #0]
 8003b92:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003b94:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3718      	adds	r7, #24
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	20006a02 	.word	0x20006a02
 8003ba4:	200073d8 	.word	0x200073d8

08003ba8 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8003bb0:	4b04      	ldr	r3, [pc, #16]	; (8003bc4 <HAL_SD_RxCpltCallback+0x1c>)
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	701a      	strb	r2, [r3, #0]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20006a02 	.word	0x20006a02

08003bc8 <HAL_SD_TxCpltCallback>:


void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8003bd0:	4b04      	ldr	r3, [pc, #16]	; (8003be4 <HAL_SD_TxCpltCallback+0x1c>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	701a      	strb	r2, [r3, #0]
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	20006a03 	.word	0x20006a03

08003be8 <sdWriteBlocks>:


bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 8003bfa:	4b1e      	ldr	r3, [pc, #120]	; (8003c74 <sdWriteBlocks+0x8c>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	68b9      	ldr	r1, [r7, #8]
 8003c06:	481c      	ldr	r0, [pc, #112]	; (8003c78 <sdWriteBlocks+0x90>)
 8003c08:	f00d f948 	bl	8010e9c <HAL_SD_WriteBlocks_DMA>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d12a      	bne.n	8003c68 <sdWriteBlocks+0x80>
  {
    pre_time = millis();
 8003c12:	f7fd fa22 	bl	800105a <millis>
 8003c16:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8003c18:	e007      	b.n	8003c2a <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 8003c1a:	f7fd fa1e 	bl	800105a <millis>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	683a      	ldr	r2, [r7, #0]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d908      	bls.n	8003c3c <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 8003c2a:	4b12      	ldr	r3, [pc, #72]	; (8003c74 <sdWriteBlocks+0x8c>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	f083 0301 	eor.w	r3, r3, #1
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1ef      	bne.n	8003c1a <sdWriteBlocks+0x32>
 8003c3a:	e00d      	b.n	8003c58 <sdWriteBlocks+0x70>
      {
        break;
 8003c3c:	bf00      	nop
      }
    }

    while(sdIsBusy() == true)
 8003c3e:	e00b      	b.n	8003c58 <sdWriteBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 8003c40:	f7fd fa0b 	bl	800105a <millis>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d803      	bhi.n	8003c58 <sdWriteBlocks+0x70>
      {
        is_tx_done = false;
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <sdWriteBlocks+0x8c>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	701a      	strb	r2, [r3, #0]
        break;
 8003c56:	e004      	b.n	8003c62 <sdWriteBlocks+0x7a>
    while(sdIsBusy() == true)
 8003c58:	f7ff ff26 	bl	8003aa8 <sdIsBusy>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1ee      	bne.n	8003c40 <sdWriteBlocks+0x58>
      }
    }
    ret = is_tx_done;
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <sdWriteBlocks+0x8c>)
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003c68:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	20006a03 	.word	0x20006a03
 8003c78:	200073d8 	.word	0x200073d8

08003c7c <HAL_SD_MspInit>:
  return ret;
}


void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08c      	sub	sp, #48	; 0x30
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 031c 	add.w	r3, r7, #28
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a77      	ldr	r2, [pc, #476]	; (8003e78 <HAL_SD_MspInit+0x1fc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	f040 80e8 	bne.w	8003e70 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61bb      	str	r3, [r7, #24]
 8003ca4:	4b75      	ldr	r3, [pc, #468]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca8:	4a74      	ldr	r2, [pc, #464]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003caa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cae:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb0:	4b72      	ldr	r3, [pc, #456]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	69bb      	ldr	r3, [r7, #24]

 /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
 8003cc0:	4b6e      	ldr	r3, [pc, #440]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	4a6d      	ldr	r2, [pc, #436]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cca:	6453      	str	r3, [r2, #68]	; 0x44
 8003ccc:	4b6b      	ldr	r3, [pc, #428]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
 8003cdc:	4b67      	ldr	r3, [pc, #412]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	4a66      	ldr	r2, [pc, #408]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003ce2:	f043 0301 	orr.w	r3, r3, #1
 8003ce6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce8:	4b64      	ldr	r3, [pc, #400]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	613b      	str	r3, [r7, #16]
 8003cf2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
 8003cf8:	4b60      	ldr	r3, [pc, #384]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	4a5f      	ldr	r2, [pc, #380]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003cfe:	f043 0302 	orr.w	r3, r3, #2
 8003d02:	6313      	str	r3, [r2, #48]	; 0x30
 8003d04:	4b5d      	ldr	r3, [pc, #372]	; (8003e7c <HAL_SD_MspInit+0x200>)
 8003d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	60fb      	str	r3, [r7, #12]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003d10:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003d22:	230c      	movs	r3, #12
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 031c 	add.w	r3, r7, #28
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4854      	ldr	r0, [pc, #336]	; (8003e80 <HAL_SD_MspInit+0x204>)
 8003d2e:	f00a ff85 	bl	800ec3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 8003d32:	f248 03a0 	movw	r3, #32928	; 0x80a0
 8003d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d38:	2302      	movs	r3, #2
 8003d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d40:	2303      	movs	r3, #3
 8003d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8003d44:	230c      	movs	r3, #12
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d48:	f107 031c 	add.w	r3, r7, #28
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	484d      	ldr	r0, [pc, #308]	; (8003e84 <HAL_SD_MspInit+0x208>)
 8003d50:	f00a ff74 	bl	800ec3c <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8003d54:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d56:	4a4d      	ldr	r2, [pc, #308]	; (8003e8c <HAL_SD_MspInit+0x210>)
 8003d58:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8003d5a:	4b4b      	ldr	r3, [pc, #300]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d60:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d62:	4b49      	ldr	r3, [pc, #292]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d68:	4b47      	ldr	r3, [pc, #284]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d6e:	4b46      	ldr	r3, [pc, #280]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d74:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d76:	4b44      	ldr	r3, [pc, #272]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d7c:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d7e:	4b42      	ldr	r3, [pc, #264]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d84:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003d86:	4b40      	ldr	r3, [pc, #256]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d88:	2220      	movs	r2, #32
 8003d8a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d8c:	4b3e      	ldr	r3, [pc, #248]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d8e:	2200      	movs	r2, #0
 8003d90:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d92:	4b3d      	ldr	r3, [pc, #244]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d94:	2204      	movs	r2, #4
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d98:	4b3b      	ldr	r3, [pc, #236]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d9e:	4b3a      	ldr	r3, [pc, #232]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003da0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003da4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003da6:	4b38      	ldr	r3, [pc, #224]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003da8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003dac:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8003dae:	4836      	ldr	r0, [pc, #216]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003db0:	f00a f8be 	bl	800df30 <HAL_DMA_Init>
 8003db4:	4603      	mov	r3, r0
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 8003dba:	f7fd f9c9 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a31      	ldr	r2, [pc, #196]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8003dc4:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <HAL_SD_MspInit+0x20c>)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8003dca:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003dcc:	4a31      	ldr	r2, [pc, #196]	; (8003e94 <HAL_SD_MspInit+0x218>)
 8003dce:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003dd0:	4b2f      	ldr	r3, [pc, #188]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003dd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dd6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dd8:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003dda:	2240      	movs	r2, #64	; 0x40
 8003ddc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dde:	4b2c      	ldr	r3, [pc, #176]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003de4:	4b2a      	ldr	r3, [pc, #168]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003de6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dea:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003dee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003df2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003df4:	4b26      	ldr	r3, [pc, #152]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003df6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003dfa:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8003dfc:	4b24      	ldr	r3, [pc, #144]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003dfe:	2220      	movs	r2, #32
 8003e00:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e02:	4b23      	ldr	r3, [pc, #140]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e0a:	2204      	movs	r2, #4
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e10:	2203      	movs	r2, #3
 8003e12:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003e14:	4b1e      	ldr	r3, [pc, #120]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e16:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e1a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003e1c:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e1e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e22:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8003e24:	481a      	ldr	r0, [pc, #104]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e26:	f00a f883 	bl	800df30 <HAL_DMA_Init>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d001      	beq.n	8003e34 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 8003e30:	f7fd f98e 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	4a16      	ldr	r2, [pc, #88]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e3a:	4a15      	ldr	r2, [pc, #84]	; (8003e90 <HAL_SD_MspInit+0x214>)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8003e40:	2200      	movs	r2, #0
 8003e42:	2105      	movs	r1, #5
 8003e44:	2031      	movs	r0, #49	; 0x31
 8003e46:	f00a f83c 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8003e4a:	2031      	movs	r0, #49	; 0x31
 8003e4c:	f00a f855 	bl	800defa <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8003e50:	2200      	movs	r2, #0
 8003e52:	2105      	movs	r1, #5
 8003e54:	203b      	movs	r0, #59	; 0x3b
 8003e56:	f00a f834 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8003e5a:	203b      	movs	r0, #59	; 0x3b
 8003e5c:	f00a f84d 	bl	800defa <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8003e60:	2200      	movs	r2, #0
 8003e62:	2105      	movs	r1, #5
 8003e64:	2045      	movs	r0, #69	; 0x45
 8003e66:	f00a f82c 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003e6a:	2045      	movs	r0, #69	; 0x45
 8003e6c:	f00a f845 	bl	800defa <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8003e70:	bf00      	nop
 8003e72:	3730      	adds	r7, #48	; 0x30
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40023800 	.word	0x40023800
 8003e80:	40020000 	.word	0x40020000
 8003e84:	40020400 	.word	0x40020400
 8003e88:	20007318 	.word	0x20007318
 8003e8c:	40026458 	.word	0x40026458
 8003e90:	20007378 	.word	0x20007378
 8003e94:	400264a0 	.word	0x400264a0

08003e98 <cliSd>:


#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8003e98:	b590      	push	{r4, r7, lr}
 8003e9a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8003eaa:	1d3b      	adds	r3, r7, #4
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d179      	bne.n	8003fa8 <cliSd+0x110>
 8003eb4:	1d3b      	adds	r3, r7, #4
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	4968      	ldr	r1, [pc, #416]	; (800405c <cliSd+0x1c4>)
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	4798      	blx	r3
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d070      	beq.n	8003fa8 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8003ec6:	4b66      	ldr	r3, [pc, #408]	; (8004060 <cliSd+0x1c8>)
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	4619      	mov	r1, r3
 8003ecc:	4865      	ldr	r0, [pc, #404]	; (8004064 <cliSd+0x1cc>)
 8003ece:	f7fe f8d9 	bl	8002084 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8003ed2:	4b65      	ldr	r3, [pc, #404]	; (8004068 <cliSd+0x1d0>)
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4864      	ldr	r0, [pc, #400]	; (800406c <cliSd+0x1d4>)
 8003eda:	f7fe f8d3 	bl	8002084 <cliPrintf>

    if (is_init == true)
 8003ede:	4b60      	ldr	r3, [pc, #384]	; (8004060 <cliSd+0x1c8>)
 8003ee0:	781b      	ldrb	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d05d      	beq.n	8003fa2 <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8003ee6:	f107 030c 	add.w	r3, r7, #12
 8003eea:	4618      	mov	r0, r3
 8003eec:	f7ff fd86 	bl	80039fc <sdGetInfo>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d055      	beq.n	8003fa2 <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4619      	mov	r1, r3
 8003efe:	485c      	ldr	r0, [pc, #368]	; (8004070 <cliSd+0x1d8>)
 8003f00:	f7fe f8c0 	bl	8002084 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8003f04:	f107 030c 	add.w	r3, r7, #12
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	4859      	ldr	r0, [pc, #356]	; (8004074 <cliSd+0x1dc>)
 8003f0e:	f7fe f8b9 	bl	8002084 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	4619      	mov	r1, r3
 8003f1a:	4857      	ldr	r0, [pc, #348]	; (8004078 <cliSd+0x1e0>)
 8003f1c:	f7fe f8b2 	bl	8002084 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 8003f20:	f107 030c 	add.w	r3, r7, #12
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	4619      	mov	r1, r3
 8003f28:	4854      	ldr	r0, [pc, #336]	; (800407c <cliSd+0x1e4>)
 8003f2a:	f7fe f8ab 	bl	8002084 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 8003f2e:	f107 030c 	add.w	r3, r7, #12
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	4619      	mov	r1, r3
 8003f36:	4852      	ldr	r0, [pc, #328]	; (8004080 <cliSd+0x1e8>)
 8003f38:	f7fe f8a4 	bl	8002084 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 8003f3c:	f107 030c 	add.w	r3, r7, #12
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4619      	mov	r1, r3
 8003f44:	484f      	ldr	r0, [pc, #316]	; (8004084 <cliSd+0x1ec>)
 8003f46:	f7fe f89d 	bl	8002084 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 8003f4a:	f107 030c 	add.w	r3, r7, #12
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	4619      	mov	r1, r3
 8003f52:	484d      	ldr	r0, [pc, #308]	; (8004088 <cliSd+0x1f0>)
 8003f54:	f7fe f896 	bl	8002084 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 8003f58:	f107 030c 	add.w	r3, r7, #12
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	4619      	mov	r1, r3
 8003f60:	484a      	ldr	r0, [pc, #296]	; (800408c <cliSd+0x1f4>)
 8003f62:	f7fe f88f 	bl	8002084 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 8003f66:	f107 030c 	add.w	r3, r7, #12
 8003f6a:	6a18      	ldr	r0, [r3, #32]
 8003f6c:	f107 030c 	add.w	r3, r7, #12
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	0a9c      	lsrs	r4, r3, #10
 8003f74:	f107 030c 	add.w	r3, r7, #12
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	0a99      	lsrs	r1, r3, #10
 8003f84:	4b42      	ldr	r3, [pc, #264]	; (8004090 <cliSd+0x1f8>)
 8003f86:	fba3 2301 	umull	r2, r3, r3, r1
 8003f8a:	08da      	lsrs	r2, r3, #3
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4413      	add	r3, r2
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	1aca      	subs	r2, r1, r3
 8003f96:	4613      	mov	r3, r2
 8003f98:	4622      	mov	r2, r4
 8003f9a:	4601      	mov	r1, r0
 8003f9c:	483d      	ldr	r0, [pc, #244]	; (8004094 <cliSd+0x1fc>)
 8003f9e:	f7fe f871 	bl	8002084 <cliPrintf>
      }
    }
    ret = true;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003fa8:	1d3b      	adds	r3, r7, #4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d13e      	bne.n	8004030 <cliSd+0x198>
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695b      	ldr	r3, [r3, #20]
 8003fb8:	4937      	ldr	r1, [pc, #220]	; (8004098 <cliSd+0x200>)
 8003fba:	2000      	movs	r0, #0
 8003fbc:	4798      	blx	r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d035      	beq.n	8004030 <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2001      	movs	r0, #1
 8003fcc:	4798      	blx	r3
 8003fce:	4603      	mov	r3, r0
 8003fd0:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8003fd4:	f107 010c 	add.w	r1, r7, #12
 8003fd8:	2364      	movs	r3, #100	; 0x64
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003fe0:	f7ff fd98 	bl	8003b14 <sdReadBlocks>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d01c      	beq.n	8004024 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 8003fea:	2300      	movs	r3, #0
 8003fec:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003ff0:	e013      	b.n	800401a <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8003ff2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003ff6:	0099      	lsls	r1, r3, #2
 8003ff8:	f107 030c 	add.w	r3, r7, #12
 8003ffc:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8004000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004004:	460a      	mov	r2, r1
 8004006:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 800400a:	4824      	ldr	r0, [pc, #144]	; (800409c <cliSd+0x204>)
 800400c:	f7fe f83a 	bl	8002084 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8004010:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8004014:	3301      	adds	r3, #1
 8004016:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800401a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800401e:	2b7f      	cmp	r3, #127	; 0x7f
 8004020:	dde7      	ble.n	8003ff2 <cliSd+0x15a>
 8004022:	e002      	b.n	800402a <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8004024:	481e      	ldr	r0, [pc, #120]	; (80040a0 <cliSd+0x208>)
 8004026:	f7fe f82d 	bl	8002084 <cliPrintf>
    }

    ret = true;
 800402a:	2301      	movs	r3, #1
 800402c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8004030:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8004034:	f083 0301 	eor.w	r3, r3, #1
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 800403e:	4819      	ldr	r0, [pc, #100]	; (80040a4 <cliSd+0x20c>)
 8004040:	f7fe f820 	bl	8002084 <cliPrintf>

    if (is_init == true)
 8004044:	4b06      	ldr	r3, [pc, #24]	; (8004060 <cliSd+0x1c8>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 800404c:	4816      	ldr	r0, [pc, #88]	; (80040a8 <cliSd+0x210>)
 800404e:	f7fe f819 	bl	8002084 <cliPrintf>
    }
  }
}
 8004052:	bf00      	nop
 8004054:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8004058:	46bd      	mov	sp, r7
 800405a:	bd90      	pop	{r4, r7, pc}
 800405c:	08018560 	.word	0x08018560
 8004060:	20006a00 	.word	0x20006a00
 8004064:	08018568 	.word	0x08018568
 8004068:	20006a01 	.word	0x20006a01
 800406c:	0801857c 	.word	0x0801857c
 8004070:	08018590 	.word	0x08018590
 8004074:	080185b0 	.word	0x080185b0
 8004078:	080185d0 	.word	0x080185d0
 800407c:	080185f0 	.word	0x080185f0
 8004080:	08018610 	.word	0x08018610
 8004084:	08018630 	.word	0x08018630
 8004088:	08018650 	.word	0x08018650
 800408c:	08018670 	.word	0x08018670
 8004090:	cccccccd 	.word	0xcccccccd
 8004094:	08018690 	.word	0x08018690
 8004098:	080186bc 	.word	0x080186bc
 800409c:	080186c4 	.word	0x080186c4
 80040a0:	080186d8 	.word	0x080186d8
 80040a4:	080186e8 	.word	0x080186e8
 80040a8:	080186f4 	.word	0x080186f4

080040ac <spiInit>:
SPI_HandleTypeDef hspi4;
DMA_HandleTypeDef hdma_spi4_tx;


bool spiInit(void)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
  bool ret = true;
 80040b2:	2301      	movs	r3, #1
 80040b4:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 80040b6:	2300      	movs	r3, #0
 80040b8:	607b      	str	r3, [r7, #4]
 80040ba:	e016      	b.n	80040ea <spiInit+0x3e>
  {
    spi_tbl[i].is_open = false;
 80040bc:	4a10      	ldr	r2, [pc, #64]	; (8004100 <spiInit+0x54>)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	4413      	add	r3, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 80040c8:	4a0d      	ldr	r2, [pc, #52]	; (8004100 <spiInit+0x54>)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	011b      	lsls	r3, r3, #4
 80040ce:	4413      	add	r3, r2
 80040d0:	3301      	adds	r3, #1
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 80040d6:	4a0a      	ldr	r2, [pc, #40]	; (8004100 <spiInit+0x54>)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	4413      	add	r3, r2
 80040de:	3304      	adds	r3, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3301      	adds	r3, #1
 80040e8:	607b      	str	r3, [r7, #4]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	dde5      	ble.n	80040bc <spiInit+0x10>
  }

  return ret;
 80040f0:	78fb      	ldrb	r3, [r7, #3]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	20007514 	.word	0x20007514

08004104 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	4603      	mov	r3, r0
 800410c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800410e:	2300      	movs	r3, #0
 8004110:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8004112:	79fb      	ldrb	r3, [r7, #7]
 8004114:	011b      	lsls	r3, r3, #4
 8004116:	4a21      	ldr	r2, [pc, #132]	; (800419c <spiBegin+0x98>)
 8004118:	4413      	add	r3, r2
 800411a:	60bb      	str	r3, [r7, #8]

  switch(ch)
 800411c:	79fb      	ldrb	r3, [r7, #7]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d137      	bne.n	8004192 <spiBegin+0x8e>
  {
    case _DEF_SPI1:
      p_spi->h_spi = &hspi4;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4a1e      	ldr	r2, [pc, #120]	; (80041a0 <spiBegin+0x9c>)
 8004126:	609a      	str	r2, [r3, #8]
      p_spi->h_dma = &hdma_spi4_tx;
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <spiBegin+0xa0>)
 800412c:	60da      	str	r2, [r3, #12]

      hspi4.Instance              = SPI4;
 800412e:	4b1c      	ldr	r3, [pc, #112]	; (80041a0 <spiBegin+0x9c>)
 8004130:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <spiBegin+0xa4>)
 8004132:	601a      	str	r2, [r3, #0]
      hspi4.Init.Mode             = SPI_MODE_MASTER;
 8004134:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <spiBegin+0x9c>)
 8004136:	f44f 7282 	mov.w	r2, #260	; 0x104
 800413a:	605a      	str	r2, [r3, #4]
      hspi4.Init.Direction        = SPI_DIRECTION_2LINES;
 800413c:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <spiBegin+0x9c>)
 800413e:	2200      	movs	r2, #0
 8004140:	609a      	str	r2, [r3, #8]
      hspi4.Init.DataSize         = SPI_DATASIZE_8BIT;
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <spiBegin+0x9c>)
 8004144:	2200      	movs	r2, #0
 8004146:	60da      	str	r2, [r3, #12]
      hspi4.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8004148:	4b15      	ldr	r3, [pc, #84]	; (80041a0 <spiBegin+0x9c>)
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
      hspi4.Init.CLKPhase         = SPI_PHASE_1EDGE;
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <spiBegin+0x9c>)
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
      hspi4.Init.NSS              = SPI_NSS_SOFT;
 8004154:	4b12      	ldr	r3, [pc, #72]	; (80041a0 <spiBegin+0x9c>)
 8004156:	f44f 7200 	mov.w	r2, #512	; 0x200
 800415a:	619a      	str	r2, [r3, #24]
      hspi4.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 800415c:	4b10      	ldr	r3, [pc, #64]	; (80041a0 <spiBegin+0x9c>)
 800415e:	2200      	movs	r2, #0
 8004160:	61da      	str	r2, [r3, #28]
      hspi4.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <spiBegin+0x9c>)
 8004164:	2200      	movs	r2, #0
 8004166:	621a      	str	r2, [r3, #32]
      hspi4.Init.TIMode           = SPI_TIMODE_DISABLE;
 8004168:	4b0d      	ldr	r3, [pc, #52]	; (80041a0 <spiBegin+0x9c>)
 800416a:	2200      	movs	r2, #0
 800416c:	625a      	str	r2, [r3, #36]	; 0x24
      hspi4.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <spiBegin+0x9c>)
 8004170:	2200      	movs	r2, #0
 8004172:	629a      	str	r2, [r3, #40]	; 0x28
      hspi4.Init.CRCPolynomial    = 10;
 8004174:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <spiBegin+0x9c>)
 8004176:	220a      	movs	r2, #10
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c

      if (HAL_SPI_Init(&hspi4) == HAL_OK)
 800417a:	4809      	ldr	r0, [pc, #36]	; (80041a0 <spiBegin+0x9c>)
 800417c:	f00e f837 	bl	80121ee <HAL_SPI_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d104      	bne.n	8004190 <spiBegin+0x8c>
      {
        p_spi->is_open = true;
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	2201      	movs	r2, #1
 800418a:	701a      	strb	r2, [r3, #0]
        ret = true;
 800418c:	2301      	movs	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004190:	bf00      	nop
  }

  return ret;
 8004192:	7bfb      	ldrb	r3, [r7, #15]
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20007514 	.word	0x20007514
 80041a0:	200074bc 	.word	0x200074bc
 80041a4:	2000745c 	.word	0x2000745c
 80041a8:	40013400 	.word	0x40013400

080041ac <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b084      	sub	sp, #16
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	460a      	mov	r2, r1
 80041b6:	71fb      	strb	r3, [r7, #7]
 80041b8:	4613      	mov	r3, r2
 80041ba:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	4a29      	ldr	r2, [pc, #164]	; (8004268 <spiSetDataMode+0xbc>)
 80041c2:	4413      	add	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	f083 0301 	eor.w	r3, r3, #1
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d145      	bne.n	8004260 <spiSetDataMode+0xb4>


  switch( dataMode )
 80041d4:	79bb      	ldrb	r3, [r7, #6]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d843      	bhi.n	8004262 <spiSetDataMode+0xb6>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <spiSetDataMode+0x34>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	0800420d 	.word	0x0800420d
 80041e8:	08004229 	.word	0x08004229
 80041ec:	08004245 	.word	0x08004245
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2200      	movs	r2, #0
 80041f6:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	2200      	movs	r2, #0
 80041fe:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	4618      	mov	r0, r3
 8004206:	f00d fff2 	bl	80121ee <HAL_SPI_Init>
      break;
 800420a:	e02a      	b.n	8004262 <spiSetDataMode+0xb6>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	2200      	movs	r2, #0
 8004212:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2201      	movs	r2, #1
 800421a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4618      	mov	r0, r3
 8004222:	f00d ffe4 	bl	80121ee <HAL_SPI_Init>
      break;
 8004226:	e01c      	b.n	8004262 <spiSetDataMode+0xb6>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2202      	movs	r2, #2
 800422e:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2200      	movs	r2, #0
 8004236:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f00d ffd6 	bl	80121ee <HAL_SPI_Init>
      break;
 8004242:	e00e      	b.n	8004262 <spiSetDataMode+0xb6>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2202      	movs	r2, #2
 800424a:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	2201      	movs	r2, #1
 8004252:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	4618      	mov	r0, r3
 800425a:	f00d ffc8 	bl	80121ee <HAL_SPI_Init>
      break;
 800425e:	e000      	b.n	8004262 <spiSetDataMode+0xb6>
  if (p_spi->is_open == false) return;
 8004260:	bf00      	nop
  }
}
 8004262:	3710      	adds	r7, #16
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}
 8004268:	20007514 	.word	0x20007514

0800426c <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	4603      	mov	r3, r0
 8004274:	460a      	mov	r2, r1
 8004276:	71fb      	strb	r3, [r7, #7]
 8004278:	4613      	mov	r3, r2
 800427a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 800427c:	79fb      	ldrb	r3, [r7, #7]
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	4a0f      	ldr	r2, [pc, #60]	; (80042c0 <spiSetBitWidth+0x54>)
 8004282:	4413      	add	r3, r2
 8004284:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	f083 0301 	eor.w	r3, r3, #1
 800428e:	b2db      	uxtb	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d111      	bne.n	80042b8 <spiSetBitWidth+0x4c>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 800429c:	79bb      	ldrb	r3, [r7, #6]
 800429e:	2b10      	cmp	r3, #16
 80042a0:	d104      	bne.n	80042ac <spiSetBitWidth+0x40>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042aa:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f00d ff9c 	bl	80121ee <HAL_SPI_Init>
 80042b6:	e000      	b.n	80042ba <spiSetBitWidth+0x4e>
  if (p_spi->is_open == false) return;
 80042b8:	bf00      	nop
}
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	20007514 	.word	0x20007514

080042c4 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b086      	sub	sp, #24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	4603      	mov	r3, r0
 80042cc:	460a      	mov	r2, r1
 80042ce:	71fb      	strb	r3, [r7, #7]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 80042d4:	79fb      	ldrb	r3, [r7, #7]
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	4a0d      	ldr	r2, [pc, #52]	; (8004310 <spiTransfer8+0x4c>)
 80042da:	4413      	add	r3, r2
 80042dc:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	f083 0301 	eor.w	r3, r3, #1
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <spiTransfer8+0x2c>
 80042ec:	2300      	movs	r3, #0
 80042ee:	e00b      	b.n	8004308 <spiTransfer8+0x44>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 0xffff);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6898      	ldr	r0, [r3, #8]
 80042f4:	f107 020b 	add.w	r2, r7, #11
 80042f8:	1db9      	adds	r1, r7, #6
 80042fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042fe:	9300      	str	r3, [sp, #0]
 8004300:	2301      	movs	r3, #1
 8004302:	f00d fffd 	bl	8012300 <HAL_SPI_TransmitReceive>

  return ret;
 8004306:	7afb      	ldrb	r3, [r7, #11]
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	20007514 	.word	0x20007514

08004314 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	4603      	mov	r3, r0
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8004322:	7bfb      	ldrb	r3, [r7, #15]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4a0d      	ldr	r2, [pc, #52]	; (800435c <spiDmaTxStart+0x48>)
 8004328:	4413      	add	r3, r2
 800432a:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	f083 0301 	eor.w	r3, r3, #1
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10b      	bne.n	8004352 <spiDmaTxStart+0x3e>

  p_spi->is_tx_done = false;
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	b292      	uxth	r2, r2
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f00e f97a 	bl	8012644 <HAL_SPI_Transmit_DMA>
 8004350:	e000      	b.n	8004354 <spiDmaTxStart+0x40>
  if (p_spi->is_open == false) return;
 8004352:	bf00      	nop
}
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	20007514 	.word	0x20007514

08004360 <spiDmaTxTransfer>:

void spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60b9      	str	r1, [r7, #8]
 8004368:	607a      	str	r2, [r7, #4]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4603      	mov	r3, r0
 800436e:	73fb      	strb	r3, [r7, #15]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8004370:	7bfb      	ldrb	r3, [r7, #15]
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	68b9      	ldr	r1, [r7, #8]
 8004376:	4618      	mov	r0, r3
 8004378:	f7ff ffcc 	bl	8004314 <spiDmaTxStart>

  t_time = millis();
 800437c:	f7fc fe6d 	bl	800105a <millis>
 8004380:	6178      	str	r0, [r7, #20]

  if (timeout == 0) return;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <spiDmaTxTransfer+0x48>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8004388:	7bfb      	ldrb	r3, [r7, #15]
 800438a:	4618      	mov	r0, r3
 800438c:	f000 f814 	bl	80043b8 <spiDmaTxIsDone>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10a      	bne.n	80043ac <spiDmaTxTransfer+0x4c>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8004396:	f7fc fe60 	bl	800105a <millis>
 800439a:	4602      	mov	r2, r0
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d304      	bcc.n	80043b0 <spiDmaTxTransfer+0x50>
    if(spiDmaTxIsDone(ch))
 80043a6:	e7ef      	b.n	8004388 <spiDmaTxTransfer+0x28>
  if (timeout == 0) return;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <spiDmaTxTransfer+0x52>
      break;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <spiDmaTxTransfer+0x52>
    {
      break;
 80043b0:	bf00      	nop
    }
  }
}
 80043b2:	3718      	adds	r7, #24
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	011b      	lsls	r3, r3, #4
 80043c6:	4a0a      	ldr	r2, [pc, #40]	; (80043f0 <spiDmaTxIsDone+0x38>)
 80043c8:	4413      	add	r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	f083 0301 	eor.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <spiDmaTxIsDone+0x26>
 80043da:	2301      	movs	r3, #1
 80043dc:	e001      	b.n	80043e2 <spiDmaTxIsDone+0x2a>

  return p_spi->is_tx_done;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	785b      	ldrb	r3, [r3, #1]
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	20007514 	.word	0x20007514

080043f4 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	6039      	str	r1, [r7, #0]
 80043fe:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	4a09      	ldr	r2, [pc, #36]	; (800442c <spiAttachTxInterrupt+0x38>)
 8004406:	4413      	add	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	f083 0301 	eor.w	r3, r3, #1
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d103      	bne.n	8004420 <spiAttachTxInterrupt+0x2c>

  p_spi->func_tx = func;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	605a      	str	r2, [r3, #4]
 800441e:	e000      	b.n	8004422 <spiAttachTxInterrupt+0x2e>
  if (p_spi->is_open == false)     return;
 8004420:	bf00      	nop
}
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr
 800442c:	20007514 	.word	0x20007514

08004430 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <HAL_SPI_TxCpltCallback+0x38>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d10b      	bne.n	800445e <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <HAL_SPI_TxCpltCallback+0x38>)
 8004448:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2201      	movs	r2, #1
 800444e:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d002      	beq.n	800445e <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	4798      	blx	r3
    }
  }
}
 800445e:	bf00      	nop
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	20007514 	.word	0x20007514

0800446c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08c      	sub	sp, #48	; 0x30
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004474:	f107 031c 	add.w	r3, r7, #28
 8004478:	2200      	movs	r2, #0
 800447a:	601a      	str	r2, [r3, #0]
 800447c:	605a      	str	r2, [r3, #4]
 800447e:	609a      	str	r2, [r3, #8]
 8004480:	60da      	str	r2, [r3, #12]
 8004482:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a50      	ldr	r2, [pc, #320]	; (80045cc <HAL_SPI_MspInit+0x160>)
 800448a:	4293      	cmp	r3, r2
 800448c:	f040 8099 	bne.w	80045c2 <HAL_SPI_MspInit+0x156>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8004490:	2300      	movs	r3, #0
 8004492:	61bb      	str	r3, [r7, #24]
 8004494:	4b4e      	ldr	r3, [pc, #312]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 8004496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004498:	4a4d      	ldr	r2, [pc, #308]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 800449a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800449e:	6313      	str	r3, [r2, #48]	; 0x30
 80044a0:	4b4b      	ldr	r3, [pc, #300]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044a8:	61bb      	str	r3, [r7, #24]
 80044aa:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80044ac:	2300      	movs	r3, #0
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b4:	4a46      	ldr	r2, [pc, #280]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044ba:	6453      	str	r3, [r2, #68]	; 0x44
 80044bc:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044c4:	617b      	str	r3, [r7, #20]
 80044c6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c8:	2300      	movs	r3, #0
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	4b40      	ldr	r3, [pc, #256]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a3f      	ldr	r2, [pc, #252]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044d2:	f043 0301 	orr.w	r3, r3, #1
 80044d6:	6313      	str	r3, [r2, #48]	; 0x30
 80044d8:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	613b      	str	r3, [r7, #16]
 80044e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044e4:	2300      	movs	r3, #0
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ec:	4a38      	ldr	r2, [pc, #224]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044ee:	f043 0302 	orr.w	r3, r3, #2
 80044f2:	6313      	str	r3, [r2, #48]	; 0x30
 80044f4:	4b36      	ldr	r3, [pc, #216]	; (80045d0 <HAL_SPI_MspInit+0x164>)
 80044f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f8:	f003 0302 	and.w	r3, r3, #2
 80044fc:	60fb      	str	r3, [r7, #12]
 80044fe:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004500:	2302      	movs	r3, #2
 8004502:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004504:	2302      	movs	r3, #2
 8004506:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004508:	2300      	movs	r3, #0
 800450a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800450c:	2303      	movs	r3, #3
 800450e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8004510:	2305      	movs	r3, #5
 8004512:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004514:	f107 031c 	add.w	r3, r7, #28
 8004518:	4619      	mov	r1, r3
 800451a:	482e      	ldr	r0, [pc, #184]	; (80045d4 <HAL_SPI_MspInit+0x168>)
 800451c:	f00a fb8e 	bl	800ec3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004524:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004526:	2302      	movs	r3, #2
 8004528:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800452a:	2300      	movs	r3, #0
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800452e:	2303      	movs	r3, #3
 8004530:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8004532:	2306      	movs	r3, #6
 8004534:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004536:	f107 031c 	add.w	r3, r7, #28
 800453a:	4619      	mov	r1, r3
 800453c:	4826      	ldr	r0, [pc, #152]	; (80045d8 <HAL_SPI_MspInit+0x16c>)
 800453e:	f00a fb7d 	bl	800ec3c <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <HAL_SPI_MspInit+0x174>)
 8004546:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8004548:	4b24      	ldr	r3, [pc, #144]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800454a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800454e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004550:	4b22      	ldr	r3, [pc, #136]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004552:	2240      	movs	r2, #64	; 0x40
 8004554:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004556:	4b21      	ldr	r3, [pc, #132]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004558:	2200      	movs	r2, #0
 800455a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800455c:	4b1f      	ldr	r3, [pc, #124]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800455e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004562:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004564:	4b1d      	ldr	r3, [pc, #116]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004566:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800456a:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800456e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004572:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8004574:	4b19      	ldr	r3, [pc, #100]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004576:	2200      	movs	r2, #0
 8004578:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800457a:	4b18      	ldr	r3, [pc, #96]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800457c:	2200      	movs	r2, #0
 800457e:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004580:	4b16      	ldr	r3, [pc, #88]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004582:	2200      	movs	r2, #0
 8004584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8004586:	4815      	ldr	r0, [pc, #84]	; (80045dc <HAL_SPI_MspInit+0x170>)
 8004588:	f009 fcd2 	bl	800df30 <HAL_DMA_Init>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d001      	beq.n	8004596 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8004592:	f7fc fddd 	bl	8001150 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	4a10      	ldr	r2, [pc, #64]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800459a:	649a      	str	r2, [r3, #72]	; 0x48
 800459c:	4a0f      	ldr	r2, [pc, #60]	; (80045dc <HAL_SPI_MspInit+0x170>)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 80045a2:	2200      	movs	r2, #0
 80045a4:	2105      	movs	r1, #5
 80045a6:	2054      	movs	r0, #84	; 0x54
 80045a8:	f009 fc8b 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 80045ac:	2054      	movs	r0, #84	; 0x54
 80045ae:	f009 fca4 	bl	800defa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80045b2:	2200      	movs	r2, #0
 80045b4:	2105      	movs	r1, #5
 80045b6:	2039      	movs	r0, #57	; 0x39
 80045b8:	f009 fc83 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80045bc:	2039      	movs	r0, #57	; 0x39
 80045be:	f009 fc9c 	bl	800defa <HAL_NVIC_EnableIRQ>
  /* USER CODE END SPI4_MspInit 1 */
  }
}
 80045c2:	bf00      	nop
 80045c4:	3730      	adds	r7, #48	; 0x30
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40013400 	.word	0x40013400
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40020400 	.word	0x40020400
 80045dc:	2000745c 	.word	0x2000745c
 80045e0:	40026428 	.word	0x40026428

080045e4 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;
#endif


bool uartInit(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 80045ea:	2300      	movs	r3, #0
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	e007      	b.n	8004600 <uartInit+0x1c>
  {
    is_open[i] = false;
 80045f0:	4a08      	ldr	r2, [pc, #32]	; (8004614 <uartInit+0x30>)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4413      	add	r3, r2
 80045f6:	2200      	movs	r2, #0
 80045f8:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3301      	adds	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	ddf4      	ble.n	80045f0 <uartInit+0xc>
  }


  return true;
 8004606:	2301      	movs	r3, #1
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr
 8004614:	20006a04 	.word	0x20006a04

08004618 <uartOpen>:

bool uartOpen(uint8_t ch, uint32_t baud)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	4603      	mov	r3, r0
 8004620:	6039      	str	r1, [r7, #0]
 8004622:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]


  switch(ch)
 8004628:	79fb      	ldrb	r3, [r7, #7]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d001      	beq.n	8004632 <uartOpen+0x1a>
 800462e:	2b01      	cmp	r3, #1

        qbuffer[ch].in  = qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR;
        qbuffer[ch].out = qbuffer[ch].in;
      }
	  #endif
      break;
 8004630:	e006      	b.n	8004640 <uartOpen+0x28>
      is_open[ch] = true;
 8004632:	79fb      	ldrb	r3, [r7, #7]
 8004634:	4a06      	ldr	r2, [pc, #24]	; (8004650 <uartOpen+0x38>)
 8004636:	2101      	movs	r1, #1
 8004638:	54d1      	strb	r1, [r2, r3]
      ret = true;
 800463a:	2301      	movs	r3, #1
 800463c:	73fb      	strb	r3, [r7, #15]
      break;
 800463e:	bf00      	nop
  }

  return ret;
 8004640:	7bfb      	ldrb	r3, [r7, #15]
}
 8004642:	4618      	mov	r0, r3
 8004644:	3714      	adds	r7, #20
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	20006a04 	.word	0x20006a04

08004654 <uartAvailable>:

uint32_t uartAvailable(uint8_t ch)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	4603      	mov	r3, r0
 800465c:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]

  switch(ch)
 8004662:	79fb      	ldrb	r3, [r7, #7]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <uartAvailable+0x18>
 8004668:	2b01      	cmp	r3, #1
    case _DEF_UART2:
	  #ifdef _USE_UART2
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->CNDTR);
      ret = qbufferAvailable(&qbuffer[ch]);
	  #endif
      break;
 800466a:	e003      	b.n	8004674 <uartAvailable+0x20>
      ret = cdcAvailable();
 800466c:	f002 fc38 	bl	8006ee0 <cdcAvailable>
 8004670:	60f8      	str	r0, [r7, #12]
      break;
 8004672:	bf00      	nop
  }

  return ret;
 8004674:	68fb      	ldr	r3, [r7, #12]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <uartRead>:

uint8_t uartRead(uint8_t ch)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b084      	sub	sp, #16
 8004682:	af00      	add	r7, sp, #0
 8004684:	4603      	mov	r3, r0
 8004686:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 0;
 8004688:	2300      	movs	r3, #0
 800468a:	73fb      	strb	r3, [r7, #15]

  switch(ch)
 800468c:	79fb      	ldrb	r3, [r7, #7]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d001      	beq.n	8004696 <uartRead+0x18>
 8004692:	2b01      	cmp	r3, #1

    case _DEF_UART2:
	  #ifdef _USE_UART2
      qbufferRead(&qbuffer[_DEF_UART2], &ret, 1);
	  #endif
      break;
 8004694:	e004      	b.n	80046a0 <uartRead+0x22>
      ret = cdcRead();
 8004696:	f002 fc41 	bl	8006f1c <cdcRead>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
      break;
 800469e:	bf00      	nop
  }

  return ret;
 80046a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <uartWrite>:

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b086      	sub	sp, #24
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	4603      	mov	r3, r0
 80046b2:	60b9      	str	r1, [r7, #8]
 80046b4:	607a      	str	r2, [r7, #4]
 80046b6:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]
  //HAL_StatusTypeDef status;


  switch(ch)
 80046bc:	7bfb      	ldrb	r3, [r7, #15]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <uartWrite+0x1c>
 80046c2:	2b01      	cmp	r3, #1
      if (status == HAL_OK)
      {
        ret = length;
      }
	  #endif
      break;
 80046c4:	e005      	b.n	80046d2 <uartWrite+0x28>
      ret = cdcWrite(p_data, length);
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	68b8      	ldr	r0, [r7, #8]
 80046ca:	f002 fc7d 	bl	8006fc8 <cdcWrite>
 80046ce:	6178      	str	r0, [r7, #20]
      break;
 80046d0:	bf00      	nop
  }

  return ret;
 80046d2:	697b      	ldr	r3, [r7, #20]
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3718      	adds	r7, #24
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <uartPrintf>:

uint32_t uartPrintf(uint8_t ch, char *fmt, ...)
{
 80046dc:	b40e      	push	{r1, r2, r3}
 80046de:	b580      	push	{r7, lr}
 80046e0:	b0c7      	sub	sp, #284	; 0x11c
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	4602      	mov	r2, r0
 80046e6:	1dfb      	adds	r3, r7, #7
 80046e8:	701a      	strb	r2, [r3, #0]
  char buf[256];
  va_list args;
  int len;
  uint32_t ret;

  va_start(args, fmt);
 80046ea:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80046ee:	f107 030c 	add.w	r3, r7, #12
 80046f2:	601a      	str	r2, [r3, #0]
  len = vsnprintf(buf, 256, fmt, args);
 80046f4:	f107 030c 	add.w	r3, r7, #12
 80046f8:	f107 0010 	add.w	r0, r7, #16
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8004702:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004706:	f011 fb15 	bl	8015d34 <vsniprintf>
 800470a:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114

  ret = uartWrite(ch, (uint8_t *)buf, len);
 800470e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8004712:	f107 0110 	add.w	r1, r7, #16
 8004716:	1dfb      	adds	r3, r7, #7
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ffc5 	bl	80046aa <uartWrite>
 8004720:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

  va_end(args);


  return ret;
 8004724:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
}
 8004728:	4618      	mov	r0, r3
 800472a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800472e:	46bd      	mov	sp, r7
 8004730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004734:	b003      	add	sp, #12
 8004736:	4770      	bx	lr

08004738 <usbInit>:

extern USBD_DescriptorsTypeDef CDC_Desc;
extern USBD_DescriptorsTypeDef MSC_Desc;

bool usbInit(void)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
  bool ret = true;
 800473e:	2301      	movs	r3, #1
 8004740:	71fb      	strb	r3, [r7, #7]

  return ret;
 8004742:	79fb      	ldrb	r3, [r7, #7]
}
 8004744:	4618      	mov	r0, r3
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <usbBegin>:
{
	return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800475a:	2300      	movs	r3, #0
 800475c:	73fb      	strb	r3, [r7, #15]

#if HW_USE_CDC == 1
  if (usb_mode == USB_CDC_MODE)
 800475e:	79fb      	ldrb	r3, [r7, #7]
 8004760:	2b01      	cmp	r3, #1
 8004762:	d12a      	bne.n	80047ba <usbBegin+0x6a>
  {
	 if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8004764:	2200      	movs	r2, #0
 8004766:	492f      	ldr	r1, [pc, #188]	; (8004824 <usbBegin+0xd4>)
 8004768:	482f      	ldr	r0, [pc, #188]	; (8004828 <usbBegin+0xd8>)
 800476a:	f000 ff2b 	bl	80055c4 <USBD_Init>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <usbBegin+0x28>
	 {
	    return false;
 8004774:	2300      	movs	r3, #0
 8004776:	e050      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004778:	492c      	ldr	r1, [pc, #176]	; (800482c <usbBegin+0xdc>)
 800477a:	482b      	ldr	r0, [pc, #172]	; (8004828 <usbBegin+0xd8>)
 800477c:	f000 ff52 	bl	8005624 <USBD_RegisterClass>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <usbBegin+0x3a>
	 {
		 return false;
 8004786:	2300      	movs	r3, #0
 8004788:	e047      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800478a:	4929      	ldr	r1, [pc, #164]	; (8004830 <usbBegin+0xe0>)
 800478c:	4826      	ldr	r0, [pc, #152]	; (8004828 <usbBegin+0xd8>)
 800478e:	f002 fb01 	bl	8006d94 <USBD_CDC_RegisterInterface>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <usbBegin+0x4c>
	 {
		 return false;
 8004798:	2300      	movs	r3, #0
 800479a:	e03e      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800479c:	4822      	ldr	r0, [pc, #136]	; (8004828 <usbBegin+0xd8>)
 800479e:	f000 ff68 	bl	8005672 <USBD_Start>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <usbBegin+0x5c>
	 {
		 return false;
 80047a8:	2300      	movs	r3, #0
 80047aa:	e036      	b.n	800481a <usbBegin+0xca>
	 }

	 cdcInit();
 80047ac:	f7fc ff36 	bl	800161c <cdcInit>

	 is_usb_mode = USB_CDC_MODE;
 80047b0:	4b20      	ldr	r3, [pc, #128]	; (8004834 <usbBegin+0xe4>)
 80047b2:	2201      	movs	r2, #1
 80047b4:	701a      	strb	r2, [r3, #0]
	 ret = true;
 80047b6:	2301      	movs	r3, #1
 80047b8:	73fb      	strb	r3, [r7, #15]

   }
#endif

#if HW_USE_MSC == 1
  if (usb_mode == USB_MSC_MODE)
 80047ba:	79fb      	ldrb	r3, [r7, #7]
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d128      	bne.n	8004812 <usbBegin+0xc2>
  {
	 if (USBD_Init(&hUsbDeviceFS, &MSC_Desc, DEVICE_FS) != USBD_OK)
 80047c0:	2200      	movs	r2, #0
 80047c2:	491d      	ldr	r1, [pc, #116]	; (8004838 <usbBegin+0xe8>)
 80047c4:	4818      	ldr	r0, [pc, #96]	; (8004828 <usbBegin+0xd8>)
 80047c6:	f000 fefd 	bl	80055c4 <USBD_Init>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <usbBegin+0x84>
	 {
		 return false;
 80047d0:	2300      	movs	r3, #0
 80047d2:	e022      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80047d4:	4919      	ldr	r1, [pc, #100]	; (800483c <usbBegin+0xec>)
 80047d6:	4814      	ldr	r0, [pc, #80]	; (8004828 <usbBegin+0xd8>)
 80047d8:	f000 ff24 	bl	8005624 <USBD_RegisterClass>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <usbBegin+0x96>
	 {
		 return false;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e019      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80047e6:	4916      	ldr	r1, [pc, #88]	; (8004840 <usbBegin+0xf0>)
 80047e8:	480f      	ldr	r0, [pc, #60]	; (8004828 <usbBegin+0xd8>)
 80047ea:	f003 f94f 	bl	8007a8c <USBD_MSC_RegisterStorage>
 80047ee:	4603      	mov	r3, r0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d001      	beq.n	80047f8 <usbBegin+0xa8>
	 {
		 return false;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e010      	b.n	800481a <usbBegin+0xca>
	 }
	 if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80047f8:	480b      	ldr	r0, [pc, #44]	; (8004828 <usbBegin+0xd8>)
 80047fa:	f000 ff3a 	bl	8005672 <USBD_Start>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <usbBegin+0xb8>
	 {
		 return false;
 8004804:	2300      	movs	r3, #0
 8004806:	e008      	b.n	800481a <usbBegin+0xca>
	 }

	 is_usb_mode = USB_MSC_MODE;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <usbBegin+0xe4>)
 800480a:	2202      	movs	r2, #2
 800480c:	701a      	strb	r2, [r3, #0]
	 ret = true;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]

  }
#endif

   is_init = ret;
 8004812:	4a0c      	ldr	r2, [pc, #48]	; (8004844 <usbBegin+0xf4>)
 8004814:	7bfb      	ldrb	r3, [r7, #15]
 8004816:	7013      	strb	r3, [r2, #0]
   return ret;
 8004818:	7bfb      	ldrb	r3, [r7, #15]

}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200001c4 	.word	0x200001c4
 8004828:	20007524 	.word	0x20007524
 800482c:	200000a0 	.word	0x200000a0
 8004830:	200001b0 	.word	0x200001b0
 8004834:	20006a06 	.word	0x20006a06
 8004838:	20000214 	.word	0x20000214
 800483c:	20000264 	.word	0x20000264
 8004840:	2000034c 	.word	0x2000034c
 8004844:	20006a05 	.word	0x20006a05

08004848 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8004852:	4b1d      	ldr	r3, [pc, #116]	; (80048c8 <SD_CheckStatus+0x80>)
 8004854:	2200      	movs	r2, #0
 8004856:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8004858:	f7ff f8ae 	bl	80039b8 <sdIsInit>
 800485c:	4603      	mov	r3, r0
 800485e:	f083 0301 	eor.w	r3, r3, #1
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8004868:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <SD_CheckStatus+0x80>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	b2db      	uxtb	r3, r3
 800486e:	f043 0301 	orr.w	r3, r3, #1
 8004872:	b2da      	uxtb	r2, r3
 8004874:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <SD_CheckStatus+0x80>)
 8004876:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8004878:	f7ff f8aa 	bl	80039d0 <sdIsDetected>
 800487c:	4603      	mov	r3, r0
 800487e:	f083 0301 	eor.w	r3, r3, #1
 8004882:	b2db      	uxtb	r3, r3
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <SD_CheckStatus+0x80>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b2db      	uxtb	r3, r3
 800488e:	f043 0302 	orr.w	r3, r3, #2
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <SD_CheckStatus+0x80>)
 8004896:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 8004898:	200a      	movs	r0, #10
 800489a:	f7ff f91b 	bl	8003ad4 <sdIsReady>
 800489e:	4603      	mov	r3, r0
 80048a0:	f083 0301 	eor.w	r3, r3, #1
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 80048aa:	4b07      	ldr	r3, [pc, #28]	; (80048c8 <SD_CheckStatus+0x80>)
 80048ac:	781b      	ldrb	r3, [r3, #0]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f043 0301 	orr.w	r3, r3, #1
 80048b4:	b2da      	uxtb	r2, r3
 80048b6:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <SD_CheckStatus+0x80>)
 80048b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80048ba:	4b03      	ldr	r3, [pc, #12]	; (80048c8 <SD_CheckStatus+0x80>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	b2db      	uxtb	r3, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3708      	adds	r7, #8
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}
 80048c8:	20000090 	.word	0x20000090

080048cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	4603      	mov	r3, r0
 80048d4:	71fb      	strb	r3, [r7, #7]
	  Stat = 0;
 80048d6:	4b0d      	ldr	r3, [pc, #52]	; (800490c <SD_initialize+0x40>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]

	  if (sdIsInit() != true)
 80048dc:	f7ff f86c 	bl	80039b8 <sdIsInit>
 80048e0:	4603      	mov	r3, r0
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d007      	beq.n	80048fc <SD_initialize+0x30>
	  {
	    Stat |= STA_NOINIT;
 80048ec:	4b07      	ldr	r3, [pc, #28]	; (800490c <SD_initialize+0x40>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	f043 0301 	orr.w	r3, r3, #1
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	4b04      	ldr	r3, [pc, #16]	; (800490c <SD_initialize+0x40>)
 80048fa:	701a      	strb	r2, [r3, #0]
	  }

  return Stat;
 80048fc:	4b03      	ldr	r3, [pc, #12]	; (800490c <SD_initialize+0x40>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
}
 8004902:	4618      	mov	r0, r3
 8004904:	3708      	adds	r7, #8
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	20000090 	.word	0x20000090

08004910 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800491a:	79fb      	ldrb	r3, [r7, #7]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff ff93 	bl	8004848 <SD_CheckStatus>
 8004922:	4603      	mov	r3, r0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}

0800492c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
 8004938:	4603      	mov	r3, r0
 800493a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]

  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8004940:	f242 7310 	movw	r3, #10000	; 0x2710
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff f8e3 	bl	8003b14 <sdReadBlocks>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <SD_read+0x2c>
  {
    res = RES_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8004958:	7dfb      	ldrb	r3, [r7, #23]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004962:	b580      	push	{r7, lr}
 8004964:	b086      	sub	sp, #24
 8004966:	af00      	add	r7, sp, #0
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	603b      	str	r3, [r7, #0]
 800496e:	4603      	mov	r3, r0
 8004970:	73fb      	strb	r3, [r7, #15]
   DRESULT res = RES_ERROR;
 8004972:	2301      	movs	r3, #1
 8004974:	75fb      	strb	r3, [r7, #23]

   if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8004976:	f242 7310 	movw	r3, #10000	; 0x2710
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff f932 	bl	8003be8 <sdWriteBlocks>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <SD_write+0x2c>
   {
	  res = RES_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]
   }
   return res;
 800498e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b08c      	sub	sp, #48	; 0x30
 800499c:	af00      	add	r7, sp, #0
 800499e:	4603      	mov	r3, r0
 80049a0:	603a      	str	r2, [r7, #0]
 80049a2:	71fb      	strb	r3, [r7, #7]
 80049a4:	460b      	mov	r3, r1
 80049a6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <SD_ioctl+0xac>)
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <SD_ioctl+0x28>
 80049bc:	2303      	movs	r3, #3
 80049be:	e03c      	b.n	8004a3a <SD_ioctl+0xa2>

  switch (cmd)
 80049c0:	79bb      	ldrb	r3, [r7, #6]
 80049c2:	2b03      	cmp	r3, #3
 80049c4:	d834      	bhi.n	8004a30 <SD_ioctl+0x98>
 80049c6:	a201      	add	r2, pc, #4	; (adr r2, 80049cc <SD_ioctl+0x34>)
 80049c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049cc:	080049dd 	.word	0x080049dd
 80049d0:	080049e5 	.word	0x080049e5
 80049d4:	080049fd 	.word	0x080049fd
 80049d8:	08004a17 	.word	0x08004a17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80049dc:	2300      	movs	r3, #0
 80049de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049e2:	e028      	b.n	8004a36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
	sdGetInfo(&sd_info);
 80049e4:	f107 0308 	add.w	r3, r7, #8
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7ff f807 	bl	80039fc <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 80049ee:	6a3a      	ldr	r2, [r7, #32]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80049fa:	e01c      	b.n	8004a36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	sdGetInfo(&sd_info);
 80049fc:	f107 0308 	add.w	r3, r7, #8
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fe fffb 	bl	80039fc <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8004a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a14:	e00f      	b.n	8004a36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	  sdGetInfo(&sd_info);
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7fe ffee 	bl	80039fc <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8004a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a22:	0a5a      	lsrs	r2, r3, #9
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004a2e:	e002      	b.n	8004a36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004a30:	2304      	movs	r3, #4
 8004a32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004a36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3730      	adds	r7, #48	; 0x30
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000090 	.word	0x20000090

08004a48 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	3306      	adds	r3, #6
 8004a56:	2220      	movs	r2, #32
 8004a58:	2100      	movs	r1, #0
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f010 f9fa 	bl	8014e54 <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <hanFontLoad+0x2e>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	2b0a      	cmp	r3, #10
 8004a74:	d107      	bne.n	8004a86 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2204      	movs	r2, #4
 8004a7a:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8004a82:	2304      	movs	r3, #4
 8004a84:	e03b      	b.n	8004afe <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	781b      	ldrb	r3, [r3, #0]
 8004a8a:	b25b      	sxtb	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	da2b      	bge.n	8004ae8 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	041a      	lsls	r2, r3, #16
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	021b      	lsls	r3, r3, #8
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	3202      	adds	r2, #2
 8004aa4:	7812      	ldrb	r2, [r2, #0]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	4a16      	ldr	r2, [pc, #88]	; (8004b08 <hanFontLoad+0xc0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d30e      	bcc.n	8004ad0 <hanFontLoad+0x88>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4a15      	ldr	r2, [pc, #84]	; (8004b0c <hanFontLoad+0xc4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d80a      	bhi.n	8004ad0 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2201      	movs	r2, #1
 8004abe:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 8004ac6:	6839      	ldr	r1, [r7, #0]
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f91f 	bl	8004d0c <hanUniFontLoad>
 8004ace:	e009      	b.n	8004ae4 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2202      	movs	r2, #2
 8004ada:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 f816 	bl	8004b10 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e00a      	b.n	8004afe <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	2202      	movs	r2, #2
 8004aec:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa30 	bl	8004f5c <hanEngFontLoad>
    return PHAN_ENG_CODE;
 8004afc:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	00eab080 	.word	0x00eab080
 8004b0c:	00ed9fb0 	.word	0x00ed9fb0

08004b10 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	021b      	lsls	r3, r3, #8
 8004b20:	b21a      	sxth	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	3301      	adds	r3, #1
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8004b30:	89bb      	ldrh	r3, [r7, #12]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fa3c 	bl	8004fb0 <hanCnvCodeWan2Johab>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 8004b3c:	89bb      	ldrh	r3, [r7, #12]
 8004b3e:	0a9b      	lsrs	r3, r3, #10
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f003 031f 	and.w	r3, r3, #31
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	4b63      	ldr	r3, [pc, #396]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004b4a:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 8004b4c:	89bb      	ldrh	r3, [r7, #12]
 8004b4e:	095b      	lsrs	r3, r3, #5
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	f003 031f 	and.w	r3, r3, #31
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	4b60      	ldr	r3, [pc, #384]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004b5a:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 8004b5c:	89bb      	ldrh	r3, [r7, #12]
 8004b5e:	f003 031f 	and.w	r3, r3, #31
 8004b62:	b29a      	uxth	r2, r3
 8004b64:	4b5e      	ldr	r3, [pc, #376]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004b66:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8004b68:	4b5b      	ldr	r3, [pc, #364]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004b6a:	881b      	ldrh	r3, [r3, #0]
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	; (8004ce4 <hanWanFontLoad+0x1d4>)
 8004b70:	5c9b      	ldrb	r3, [r3, r2]
 8004b72:	b29a      	uxth	r2, r3
 8004b74:	4b58      	ldr	r3, [pc, #352]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004b76:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8004b78:	4b58      	ldr	r3, [pc, #352]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	4b5a      	ldr	r3, [pc, #360]	; (8004ce8 <hanWanFontLoad+0x1d8>)
 8004b80:	5c9b      	ldrb	r3, [r3, r2]
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	4b55      	ldr	r3, [pc, #340]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004b86:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8004b88:	4b55      	ldr	r3, [pc, #340]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	4b57      	ldr	r3, [pc, #348]	; (8004cec <hanWanFontLoad+0x1dc>)
 8004b90:	5c9b      	ldrb	r3, [r3, r2]
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	4b52      	ldr	r3, [pc, #328]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004b96:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004b98:	4b51      	ldr	r3, [pc, #324]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004b9a:	881b      	ldrh	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <hanWanFontLoad+0x9e>
 8004ba0:	4b4e      	ldr	r3, [pc, #312]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004ba2:	881b      	ldrh	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	4b52      	ldr	r3, [pc, #328]	; (8004cf0 <hanWanFontLoad+0x1e0>)
 8004ba8:	5c9b      	ldrb	r3, [r3, r2]
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	e005      	b.n	8004bba <hanWanFontLoad+0xaa>
 8004bae:	4b4b      	ldr	r3, [pc, #300]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004bb0:	881b      	ldrh	r3, [r3, #0]
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4b4f      	ldr	r3, [pc, #316]	; (8004cf4 <hanWanFontLoad+0x1e4>)
 8004bb6:	5c9b      	ldrb	r3, [r3, r2]
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	4a4f      	ldr	r2, [pc, #316]	; (8004cf8 <hanWanFontLoad+0x1e8>)
 8004bbc:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004bbe:	4b46      	ldr	r3, [pc, #280]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004bc0:	881b      	ldrh	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d009      	beq.n	8004bda <hanWanFontLoad+0xca>
 8004bc6:	4b44      	ldr	r3, [pc, #272]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004bc8:	881b      	ldrh	r3, [r3, #0]
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d005      	beq.n	8004bda <hanWanFontLoad+0xca>
 8004bce:	4b42      	ldr	r3, [pc, #264]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004bd0:	881b      	ldrh	r3, [r3, #0]
 8004bd2:	2b10      	cmp	r3, #16
 8004bd4:	d001      	beq.n	8004bda <hanWanFontLoad+0xca>
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <hanWanFontLoad+0xcc>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	4a40      	ldr	r2, [pc, #256]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004be0:	8812      	ldrh	r2, [r2, #0]
 8004be2:	2a00      	cmp	r2, #0
 8004be4:	d001      	beq.n	8004bea <hanWanFontLoad+0xda>
 8004be6:	2202      	movs	r2, #2
 8004be8:	e000      	b.n	8004bec <hanWanFontLoad+0xdc>
 8004bea:	2200      	movs	r2, #0
 8004bec:	4413      	add	r3, r2
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <hanWanFontLoad+0x1ec>)
 8004bf2:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8004bf4:	4b39      	ldr	r3, [pc, #228]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	4b41      	ldr	r3, [pc, #260]	; (8004d00 <hanWanFontLoad+0x1f0>)
 8004bfc:	5c9b      	ldrb	r3, [r3, r2]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	4b40      	ldr	r3, [pc, #256]	; (8004d04 <hanWanFontLoad+0x1f4>)
 8004c02:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8004c04:	2300      	movs	r3, #0
 8004c06:	81fb      	strh	r3, [r7, #14]
 8004c08:	e035      	b.n	8004c76 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 8004c0a:	4b3b      	ldr	r3, [pc, #236]	; (8004cf8 <hanWanFontLoad+0x1e8>)
 8004c0c:	881b      	ldrh	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	4613      	mov	r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	4413      	add	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b2f      	ldr	r3, [pc, #188]	; (8004cd8 <hanWanFontLoad+0x1c8>)
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	441a      	add	r2, r3
 8004c20:	89fb      	ldrh	r3, [r7, #14]
 8004c22:	4939      	ldr	r1, [pc, #228]	; (8004d08 <hanWanFontLoad+0x1f8>)
 8004c24:	0152      	lsls	r2, r2, #5
 8004c26:	4413      	add	r3, r2
 8004c28:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	b2d1      	uxtb	r1, r2
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	4413      	add	r3, r2
 8004c34:	460a      	mov	r2, r1
 8004c36:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8004c38:	89fb      	ldrh	r3, [r7, #14]
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	7999      	ldrb	r1, [r3, #6]
 8004c40:	4b2e      	ldr	r3, [pc, #184]	; (8004cfc <hanWanFontLoad+0x1ec>)
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	2316      	movs	r3, #22
 8004c48:	fb03 f302 	mul.w	r3, r3, r2
 8004c4c:	33a0      	adds	r3, #160	; 0xa0
 8004c4e:	4a23      	ldr	r2, [pc, #140]	; (8004cdc <hanWanFontLoad+0x1cc>)
 8004c50:	8812      	ldrh	r2, [r2, #0]
 8004c52:	441a      	add	r2, r3
 8004c54:	89fb      	ldrh	r3, [r7, #14]
 8004c56:	482c      	ldr	r0, [pc, #176]	; (8004d08 <hanWanFontLoad+0x1f8>)
 8004c58:	0152      	lsls	r2, r2, #5
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004c60:	b2da      	uxtb	r2, r3
 8004c62:	89fb      	ldrh	r3, [r7, #14]
 8004c64:	430a      	orrs	r2, r1
 8004c66:	b2d1      	uxtb	r1, r2
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	460a      	mov	r2, r1
 8004c6e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8004c70:	89fb      	ldrh	r3, [r7, #14]
 8004c72:	3301      	adds	r3, #1
 8004c74:	81fb      	strh	r3, [r7, #14]
 8004c76:	89fb      	ldrh	r3, [r7, #14]
 8004c78:	2b1f      	cmp	r3, #31
 8004c7a:	d9c6      	bls.n	8004c0a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 8004c7c:	4b18      	ldr	r3, [pc, #96]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004c7e:	881b      	ldrh	r3, [r3, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d025      	beq.n	8004cd0 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8004c84:	2300      	movs	r3, #0
 8004c86:	81fb      	strh	r3, [r7, #14]
 8004c88:	e01f      	b.n	8004cca <hanWanFontLoad+0x1ba>
 8004c8a:	89fb      	ldrh	r3, [r7, #14]
 8004c8c:	683a      	ldr	r2, [r7, #0]
 8004c8e:	4413      	add	r3, r2
 8004c90:	7999      	ldrb	r1, [r3, #6]
 8004c92:	4b1c      	ldr	r3, [pc, #112]	; (8004d04 <hanWanFontLoad+0x1f4>)
 8004c94:	881b      	ldrh	r3, [r3, #0]
 8004c96:	461a      	mov	r2, r3
 8004c98:	4613      	mov	r3, r2
 8004c9a:	00db      	lsls	r3, r3, #3
 8004c9c:	1a9b      	subs	r3, r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	33f8      	adds	r3, #248	; 0xf8
 8004ca2:	4a0f      	ldr	r2, [pc, #60]	; (8004ce0 <hanWanFontLoad+0x1d0>)
 8004ca4:	8812      	ldrh	r2, [r2, #0]
 8004ca6:	441a      	add	r2, r3
 8004ca8:	89fb      	ldrh	r3, [r7, #14]
 8004caa:	4817      	ldr	r0, [pc, #92]	; (8004d08 <hanWanFontLoad+0x1f8>)
 8004cac:	0152      	lsls	r2, r2, #5
 8004cae:	4413      	add	r3, r2
 8004cb0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004cb4:	b2da      	uxtb	r2, r3
 8004cb6:	89fb      	ldrh	r3, [r7, #14]
 8004cb8:	430a      	orrs	r2, r1
 8004cba:	b2d1      	uxtb	r1, r2
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	460a      	mov	r2, r1
 8004cc2:	719a      	strb	r2, [r3, #6]
 8004cc4:	89fb      	ldrh	r3, [r7, #14]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	81fb      	strh	r3, [r7, #14]
 8004cca:	89fb      	ldrh	r3, [r7, #14]
 8004ccc:	2b1f      	cmp	r3, #31
 8004cce:	d9dc      	bls.n	8004c8a <hanWanFontLoad+0x17a>
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	20006a08 	.word	0x20006a08
 8004cdc:	20006a0a 	.word	0x20006a0a
 8004ce0:	20006a0c 	.word	0x20006a0c
 8004ce4:	0801a03c 	.word	0x0801a03c
 8004ce8:	0801a05c 	.word	0x0801a05c
 8004cec:	0801a07c 	.word	0x0801a07c
 8004cf0:	0801a114 	.word	0x0801a114
 8004cf4:	0801a0fc 	.word	0x0801a0fc
 8004cf8:	20006a0e 	.word	0x20006a0e
 8004cfc:	20006a10 	.word	0x20006a10
 8004d00:	0801a12c 	.word	0x0801a12c
 8004d04:	20006a12 	.word	0x20006a12
 8004d08:	0801c640 	.word	0x0801c640

08004d0c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	031b      	lsls	r3, r3, #12
 8004d1c:	b21a      	sxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3301      	adds	r3, #1
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	019b      	lsls	r3, r3, #6
 8004d26:	b21b      	sxth	r3, r3
 8004d28:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 8004d2c:	b21b      	sxth	r3, r3
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	b21a      	sxth	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	3302      	adds	r3, #2
 8004d36:	781b      	ldrb	r3, [r3, #0]
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d3e:	b21b      	sxth	r3, r3
 8004d40:	4313      	orrs	r3, r2
 8004d42:	b21b      	sxth	r3, r3
 8004d44:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8004d46:	89bb      	ldrh	r3, [r7, #12]
 8004d48:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 8004d4c:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 8004d4e:	89ba      	ldrh	r2, [r7, #12]
 8004d50:	0893      	lsrs	r3, r2, #2
 8004d52:	4973      	ldr	r1, [pc, #460]	; (8004f20 <hanUniFontLoad+0x214>)
 8004d54:	fba1 3103 	umull	r3, r1, r1, r3
 8004d58:	460b      	mov	r3, r1
 8004d5a:	00db      	lsls	r3, r3, #3
 8004d5c:	1a5b      	subs	r3, r3, r1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	b29a      	uxth	r2, r3
 8004d64:	4b6f      	ldr	r3, [pc, #444]	; (8004f24 <hanUniFontLoad+0x218>)
 8004d66:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8004d68:	89bb      	ldrh	r3, [r7, #12]
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	4a6c      	ldr	r2, [pc, #432]	; (8004f20 <hanUniFontLoad+0x214>)
 8004d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d72:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8004d74:	89b9      	ldrh	r1, [r7, #12]
 8004d76:	4b6c      	ldr	r3, [pc, #432]	; (8004f28 <hanUniFontLoad+0x21c>)
 8004d78:	fba3 2301 	umull	r2, r3, r3, r1
 8004d7c:	1aca      	subs	r2, r1, r3
 8004d7e:	0852      	lsrs	r2, r2, #1
 8004d80:	4413      	add	r3, r2
 8004d82:	091a      	lsrs	r2, r3, #4
 8004d84:	4613      	mov	r3, r2
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	4413      	add	r3, r2
 8004d8a:	00da      	lsls	r2, r3, #3
 8004d8c:	1ad2      	subs	r2, r2, r3
 8004d8e:	1a8b      	subs	r3, r1, r2
 8004d90:	b29a      	uxth	r2, r3
 8004d92:	4b66      	ldr	r3, [pc, #408]	; (8004f2c <hanUniFontLoad+0x220>)
 8004d94:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 8004d96:	89ba      	ldrh	r2, [r7, #12]
 8004d98:	4b63      	ldr	r3, [pc, #396]	; (8004f28 <hanUniFontLoad+0x21c>)
 8004d9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d9e:	1ad2      	subs	r2, r2, r3
 8004da0:	0852      	lsrs	r2, r2, #1
 8004da2:	4413      	add	r3, r2
 8004da4:	091b      	lsrs	r3, r3, #4
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <hanUniFontLoad+0x224>)
 8004daa:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 8004dac:	4b60      	ldr	r3, [pc, #384]	; (8004f30 <hanUniFontLoad+0x224>)
 8004dae:	881b      	ldrh	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4b60      	ldr	r3, [pc, #384]	; (8004f34 <hanUniFontLoad+0x228>)
 8004db4:	5c9b      	ldrb	r3, [r3, r2]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	4b5d      	ldr	r3, [pc, #372]	; (8004f30 <hanUniFontLoad+0x224>)
 8004dba:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 8004dbc:	4b5b      	ldr	r3, [pc, #364]	; (8004f2c <hanUniFontLoad+0x220>)
 8004dbe:	881b      	ldrh	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	4b5d      	ldr	r3, [pc, #372]	; (8004f38 <hanUniFontLoad+0x22c>)
 8004dc4:	5c9b      	ldrb	r3, [r3, r2]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	4b58      	ldr	r3, [pc, #352]	; (8004f2c <hanUniFontLoad+0x220>)
 8004dca:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 8004dcc:	4b55      	ldr	r3, [pc, #340]	; (8004f24 <hanUniFontLoad+0x218>)
 8004dce:	881b      	ldrh	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	4b5a      	ldr	r3, [pc, #360]	; (8004f3c <hanUniFontLoad+0x230>)
 8004dd4:	5c9b      	ldrb	r3, [r3, r2]
 8004dd6:	b29a      	uxth	r2, r3
 8004dd8:	4b52      	ldr	r3, [pc, #328]	; (8004f24 <hanUniFontLoad+0x218>)
 8004dda:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 8004ddc:	4b51      	ldr	r3, [pc, #324]	; (8004f24 <hanUniFontLoad+0x218>)
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d006      	beq.n	8004df2 <hanUniFontLoad+0xe6>
 8004de4:	4b51      	ldr	r3, [pc, #324]	; (8004f2c <hanUniFontLoad+0x220>)
 8004de6:	881b      	ldrh	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	4b55      	ldr	r3, [pc, #340]	; (8004f40 <hanUniFontLoad+0x234>)
 8004dec:	5c9b      	ldrb	r3, [r3, r2]
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	e005      	b.n	8004dfe <hanUniFontLoad+0xf2>
 8004df2:	4b4e      	ldr	r3, [pc, #312]	; (8004f2c <hanUniFontLoad+0x220>)
 8004df4:	881b      	ldrh	r3, [r3, #0]
 8004df6:	461a      	mov	r2, r3
 8004df8:	4b52      	ldr	r3, [pc, #328]	; (8004f44 <hanUniFontLoad+0x238>)
 8004dfa:	5c9b      	ldrb	r3, [r3, r2]
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <hanUniFontLoad+0x23c>)
 8004e00:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004e02:	4b4b      	ldr	r3, [pc, #300]	; (8004f30 <hanUniFontLoad+0x224>)
 8004e04:	881b      	ldrh	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <hanUniFontLoad+0x112>
 8004e0a:	4b49      	ldr	r3, [pc, #292]	; (8004f30 <hanUniFontLoad+0x224>)
 8004e0c:	881b      	ldrh	r3, [r3, #0]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d005      	beq.n	8004e1e <hanUniFontLoad+0x112>
 8004e12:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <hanUniFontLoad+0x224>)
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	2b10      	cmp	r3, #16
 8004e18:	d001      	beq.n	8004e1e <hanUniFontLoad+0x112>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <hanUniFontLoad+0x114>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	b29b      	uxth	r3, r3
 8004e22:	4a40      	ldr	r2, [pc, #256]	; (8004f24 <hanUniFontLoad+0x218>)
 8004e24:	8812      	ldrh	r2, [r2, #0]
 8004e26:	2a00      	cmp	r2, #0
 8004e28:	d001      	beq.n	8004e2e <hanUniFontLoad+0x122>
 8004e2a:	2202      	movs	r2, #2
 8004e2c:	e000      	b.n	8004e30 <hanUniFontLoad+0x124>
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4413      	add	r3, r2
 8004e32:	b29a      	uxth	r2, r3
 8004e34:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <hanUniFontLoad+0x240>)
 8004e36:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8004e38:	4b3c      	ldr	r3, [pc, #240]	; (8004f2c <hanUniFontLoad+0x220>)
 8004e3a:	881b      	ldrh	r3, [r3, #0]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <hanUniFontLoad+0x244>)
 8004e40:	5c9b      	ldrb	r3, [r3, r2]
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	4b43      	ldr	r3, [pc, #268]	; (8004f54 <hanUniFontLoad+0x248>)
 8004e46:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8004e48:	2300      	movs	r3, #0
 8004e4a:	81fb      	strh	r3, [r7, #14]
 8004e4c:	e035      	b.n	8004eba <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8004e4e:	4b3e      	ldr	r3, [pc, #248]	; (8004f48 <hanUniFontLoad+0x23c>)
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	4b34      	ldr	r3, [pc, #208]	; (8004f30 <hanUniFontLoad+0x224>)
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	441a      	add	r2, r3
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	493c      	ldr	r1, [pc, #240]	; (8004f58 <hanUniFontLoad+0x24c>)
 8004e68:	0152      	lsls	r2, r2, #5
 8004e6a:	4413      	add	r3, r2
 8004e6c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004e70:	89fb      	ldrh	r3, [r7, #14]
 8004e72:	b2d1      	uxtb	r1, r2
 8004e74:	683a      	ldr	r2, [r7, #0]
 8004e76:	4413      	add	r3, r2
 8004e78:	460a      	mov	r2, r1
 8004e7a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8004e7c:	89fb      	ldrh	r3, [r7, #14]
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	4413      	add	r3, r2
 8004e82:	7999      	ldrb	r1, [r3, #6]
 8004e84:	4b31      	ldr	r3, [pc, #196]	; (8004f4c <hanUniFontLoad+0x240>)
 8004e86:	881b      	ldrh	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	2316      	movs	r3, #22
 8004e8c:	fb03 f302 	mul.w	r3, r3, r2
 8004e90:	33a0      	adds	r3, #160	; 0xa0
 8004e92:	4a26      	ldr	r2, [pc, #152]	; (8004f2c <hanUniFontLoad+0x220>)
 8004e94:	8812      	ldrh	r2, [r2, #0]
 8004e96:	441a      	add	r2, r3
 8004e98:	89fb      	ldrh	r3, [r7, #14]
 8004e9a:	482f      	ldr	r0, [pc, #188]	; (8004f58 <hanUniFontLoad+0x24c>)
 8004e9c:	0152      	lsls	r2, r2, #5
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	89fb      	ldrh	r3, [r7, #14]
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	b2d1      	uxtb	r1, r2
 8004eac:	683a      	ldr	r2, [r7, #0]
 8004eae:	4413      	add	r3, r2
 8004eb0:	460a      	mov	r2, r1
 8004eb2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8004eb4:	89fb      	ldrh	r3, [r7, #14]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	81fb      	strh	r3, [r7, #14]
 8004eba:	89fb      	ldrh	r3, [r7, #14]
 8004ebc:	2b1f      	cmp	r3, #31
 8004ebe:	d9c6      	bls.n	8004e4e <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8004ec0:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <hanUniFontLoad+0x218>)
 8004ec2:	881b      	ldrh	r3, [r3, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d025      	beq.n	8004f14 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8004ec8:	2300      	movs	r3, #0
 8004eca:	81fb      	strh	r3, [r7, #14]
 8004ecc:	e01f      	b.n	8004f0e <hanUniFontLoad+0x202>
 8004ece:	89fb      	ldrh	r3, [r7, #14]
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	4413      	add	r3, r2
 8004ed4:	7999      	ldrb	r1, [r3, #6]
 8004ed6:	4b1f      	ldr	r3, [pc, #124]	; (8004f54 <hanUniFontLoad+0x248>)
 8004ed8:	881b      	ldrh	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	4613      	mov	r3, r2
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	1a9b      	subs	r3, r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	33f8      	adds	r3, #248	; 0xf8
 8004ee6:	4a0f      	ldr	r2, [pc, #60]	; (8004f24 <hanUniFontLoad+0x218>)
 8004ee8:	8812      	ldrh	r2, [r2, #0]
 8004eea:	441a      	add	r2, r3
 8004eec:	89fb      	ldrh	r3, [r7, #14]
 8004eee:	481a      	ldr	r0, [pc, #104]	; (8004f58 <hanUniFontLoad+0x24c>)
 8004ef0:	0152      	lsls	r2, r2, #5
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004ef8:	b2da      	uxtb	r2, r3
 8004efa:	89fb      	ldrh	r3, [r7, #14]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	b2d1      	uxtb	r1, r2
 8004f00:	683a      	ldr	r2, [r7, #0]
 8004f02:	4413      	add	r3, r2
 8004f04:	460a      	mov	r2, r1
 8004f06:	719a      	strb	r2, [r3, #6]
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	81fb      	strh	r3, [r7, #14]
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
 8004f10:	2b1f      	cmp	r3, #31
 8004f12:	d9dc      	bls.n	8004ece <hanUniFontLoad+0x1c2>
  }
}
 8004f14:	bf00      	nop
 8004f16:	3714      	adds	r7, #20
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	24924925 	.word	0x24924925
 8004f24:	20006a14 	.word	0x20006a14
 8004f28:	86186187 	.word	0x86186187
 8004f2c:	20006a16 	.word	0x20006a16
 8004f30:	20006a18 	.word	0x20006a18
 8004f34:	0801a09c 	.word	0x0801a09c
 8004f38:	0801a0bc 	.word	0x0801a0bc
 8004f3c:	0801a0dc 	.word	0x0801a0dc
 8004f40:	0801a114 	.word	0x0801a114
 8004f44:	0801a0fc 	.word	0x0801a0fc
 8004f48:	20006a1a 	.word	0x20006a1a
 8004f4c:	20006a1c 	.word	0x20006a1c
 8004f50:	0801a12c 	.word	0x0801a12c
 8004f54:	20006a1e 	.word	0x20006a1e
 8004f58:	0801c640 	.word	0x0801c640

08004f5c <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8004f6c:	7b7b      	ldrb	r3, [r7, #13]
 8004f6e:	3b20      	subs	r3, #32
 8004f70:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8004f72:	2300      	movs	r3, #0
 8004f74:	81fb      	strh	r3, [r7, #14]
 8004f76:	e00f      	b.n	8004f98 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8004f78:	7b7a      	ldrb	r2, [r7, #13]
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
 8004f7c:	490b      	ldr	r1, [pc, #44]	; (8004fac <hanEngFontLoad+0x50>)
 8004f7e:	0112      	lsls	r2, r2, #4
 8004f80:	4413      	add	r3, r2
 8004f82:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	b2d1      	uxtb	r1, r2
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	4413      	add	r3, r2
 8004f8e:	460a      	mov	r2, r1
 8004f90:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	3301      	adds	r3, #1
 8004f96:	81fb      	strh	r3, [r7, #14]
 8004f98:	89fb      	ldrh	r3, [r7, #14]
 8004f9a:	2b0f      	cmp	r3, #15
 8004f9c:	d9ec      	bls.n	8004f78 <hanEngFontLoad+0x1c>
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	bf00      	nop
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	0801883c 	.word	0x0801883c

08004fb0 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b085      	sub	sp, #20
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8004fba:	88fb      	ldrh	r3, [r7, #6]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8004fc0:	88fb      	ldrh	r3, [r7, #6]
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8004fc6:	89fb      	ldrh	r3, [r7, #14]
 8004fc8:	3bb0      	subs	r3, #176	; 0xb0
 8004fca:	225e      	movs	r2, #94	; 0x5e
 8004fcc:	fb02 f203 	mul.w	r2, r2, r3
 8004fd0:	89bb      	ldrh	r3, [r7, #12]
 8004fd2:	3ba1      	subs	r3, #161	; 0xa1
 8004fd4:	4413      	add	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8004fd8:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <hanCnvCodeWan2Johab+0x40>)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fe0:	b29b      	uxth	r3, r3
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3714      	adds	r7, #20
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr
 8004fee:	bf00      	nop
 8004ff0:	0801a180 	.word	0x0801a180

08004ff4 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8004ff8:	4b0a      	ldr	r3, [pc, #40]	; (8005024 <TransferDoneISR+0x30>)
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d00d      	beq.n	800501e <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8005002:	4b08      	ldr	r3, [pc, #32]	; (8005024 <TransferDoneISR+0x30>)
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005008:	2101      	movs	r1, #1
 800500a:	2002      	movs	r0, #2
 800500c:	f7fd fec4 	bl	8002d98 <gpioPinWrite>

    if (frameCallBack != NULL)
 8005010:	4b05      	ldr	r3, [pc, #20]	; (8005028 <TransferDoneISR+0x34>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d002      	beq.n	800501e <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8005018:	4b03      	ldr	r3, [pc, #12]	; (8005028 <TransferDoneISR+0x34>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4798      	blx	r3
    }
  }
}
 800501e:	bf00      	nop
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop
 8005024:	20006a28 	.word	0x20006a28
 8005028:	20006a24 	.word	0x20006a24

0800502c <st7735Init>:


bool st7735Init(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8005032:	f000 f835 	bl	80050a0 <st7735Reset>
 8005036:	4603      	mov	r3, r0
 8005038:	71fb      	strb	r3, [r7, #7]

  return ret;
 800503a:	79fb      	ldrb	r3, [r7, #7]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3708      	adds	r7, #8
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a0d      	ldr	r2, [pc, #52]	; (8005084 <st7735InitDriver+0x40>)
 8005050:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a0c      	ldr	r2, [pc, #48]	; (8005088 <st7735InitDriver+0x44>)
 8005056:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a0c      	ldr	r2, [pc, #48]	; (800508c <st7735InitDriver+0x48>)
 800505c:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a0b      	ldr	r2, [pc, #44]	; (8005090 <st7735InitDriver+0x4c>)
 8005062:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a0b      	ldr	r2, [pc, #44]	; (8005094 <st7735InitDriver+0x50>)
 8005068:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a0a      	ldr	r2, [pc, #40]	; (8005098 <st7735InitDriver+0x54>)
 800506e:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a0a      	ldr	r2, [pc, #40]	; (800509c <st7735InitDriver+0x58>)
 8005074:	619a      	str	r2, [r3, #24]
  return true;
 8005076:	2301      	movs	r3, #1
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	0800502d 	.word	0x0800502d
 8005088:	080050a1 	.word	0x080050a1
 800508c:	08005365 	.word	0x08005365
 8005090:	08005119 	.word	0x08005119
 8005094:	08005129 	.word	0x08005129
 8005098:	080055a5 	.word	0x080055a5
 800509c:	08005559 	.word	0x08005559

080050a0 <st7735Reset>:

bool st7735Reset(void)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <st7735Reset+0x70>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7ff f82a 	bl	8004104 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 80050b0:	4b17      	ldr	r3, [pc, #92]	; (8005110 <st7735Reset+0x70>)
 80050b2:	781b      	ldrb	r3, [r3, #0]
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f878 	bl	80041ac <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 80050bc:	4b14      	ldr	r3, [pc, #80]	; (8005110 <st7735Reset+0x70>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	4914      	ldr	r1, [pc, #80]	; (8005114 <st7735Reset+0x74>)
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7ff f996 	bl	80043f4 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 80050c8:	2100      	movs	r1, #0
 80050ca:	2001      	movs	r0, #1
 80050cc:	f7fd fe64 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 80050d0:	2101      	movs	r1, #1
 80050d2:	2003      	movs	r0, #3
 80050d4:	f7fd fe60 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 80050d8:	2101      	movs	r1, #1
 80050da:	2002      	movs	r0, #2
 80050dc:	f7fd fe5c 	bl	8002d98 <gpioPinWrite>
  delay(10);
 80050e0:	200a      	movs	r0, #10
 80050e2:	f7fb ffaf 	bl	8001044 <delay>

  st7735InitRegs();
 80050e6:	f000 f863 	bl	80051b0 <st7735InitRegs>


  st7735SetRotation(3);
 80050ea:	2003      	movs	r0, #3
 80050ec:	f000 f910 	bl	8005310 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 80050f0:	2300      	movs	r3, #0
 80050f2:	9300      	str	r3, [sp, #0]
 80050f4:	2350      	movs	r3, #80	; 0x50
 80050f6:	22a0      	movs	r2, #160	; 0xa0
 80050f8:	2100      	movs	r1, #0
 80050fa:	2000      	movs	r0, #0
 80050fc:	f000 f97e 	bl	80053fc <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8005100:	2100      	movs	r1, #0
 8005102:	2001      	movs	r0, #1
 8005104:	f7fd fe48 	bl	8002d98 <gpioPinWrite>
  return true;
 8005108:	2301      	movs	r3, #1
}
 800510a:	4618      	mov	r0, r3
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20006a20 	.word	0x20006a20
 8005114:	08004ff5 	.word	0x08004ff5

08005118 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8005118:	b480      	push	{r7}
 800511a:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 800511c:	23a0      	movs	r3, #160	; 0xa0
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8005128:	b480      	push	{r7}
 800512a:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 800512c:	2350      	movs	r3, #80	; 0x50
}
 800512e:	4618      	mov	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <writecommand>:

void writecommand(uint8_t c)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8005142:	2100      	movs	r1, #0
 8005144:	2003      	movs	r0, #3
 8005146:	f7fd fe27 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800514a:	2100      	movs	r1, #0
 800514c:	2002      	movs	r0, #2
 800514e:	f7fd fe23 	bl	8002d98 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8005152:	4b07      	ldr	r3, [pc, #28]	; (8005170 <writecommand+0x38>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	79fa      	ldrb	r2, [r7, #7]
 8005158:	4611      	mov	r1, r2
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff f8b2 	bl	80042c4 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8005160:	2101      	movs	r1, #1
 8005162:	2002      	movs	r0, #2
 8005164:	f7fd fe18 	bl	8002d98 <gpioPinWrite>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20006a20 	.word	0x20006a20

08005174 <writedata>:

void writedata(uint8_t d)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b082      	sub	sp, #8
 8005178:	af00      	add	r7, sp, #0
 800517a:	4603      	mov	r3, r0
 800517c:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 800517e:	2101      	movs	r1, #1
 8005180:	2003      	movs	r0, #3
 8005182:	f7fd fe09 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005186:	2100      	movs	r1, #0
 8005188:	2002      	movs	r0, #2
 800518a:	f7fd fe05 	bl	8002d98 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 800518e:	4b07      	ldr	r3, [pc, #28]	; (80051ac <writedata+0x38>)
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	79fa      	ldrb	r2, [r7, #7]
 8005194:	4611      	mov	r1, r2
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff f894 	bl	80042c4 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800519c:	2101      	movs	r1, #1
 800519e:	2002      	movs	r0, #2
 80051a0:	f7fd fdfa 	bl	8002d98 <gpioPinWrite>
}
 80051a4:	bf00      	nop
 80051a6:	3708      	adds	r7, #8
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20006a20 	.word	0x20006a20

080051b0 <st7735InitRegs>:

void st7735InitRegs(void)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 80051b4:	2001      	movs	r0, #1
 80051b6:	f7ff ffbf 	bl	8005138 <writecommand>
  delay(10);
 80051ba:	200a      	movs	r0, #10
 80051bc:	f7fb ff42 	bl	8001044 <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 80051c0:	2011      	movs	r0, #17
 80051c2:	f7ff ffb9 	bl	8005138 <writecommand>
  delay(10);
 80051c6:	200a      	movs	r0, #10
 80051c8:	f7fb ff3c 	bl	8001044 <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 80051cc:	20b1      	movs	r0, #177	; 0xb1
 80051ce:	f7ff ffb3 	bl	8005138 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80051d2:	2001      	movs	r0, #1
 80051d4:	f7ff ffce 	bl	8005174 <writedata>
  writedata(0x2C);
 80051d8:	202c      	movs	r0, #44	; 0x2c
 80051da:	f7ff ffcb 	bl	8005174 <writedata>
  writedata(0x2D);
 80051de:	202d      	movs	r0, #45	; 0x2d
 80051e0:	f7ff ffc8 	bl	8005174 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 80051e4:	20b2      	movs	r0, #178	; 0xb2
 80051e6:	f7ff ffa7 	bl	8005138 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 80051ea:	2001      	movs	r0, #1
 80051ec:	f7ff ffc2 	bl	8005174 <writedata>
  writedata(0x2C);
 80051f0:	202c      	movs	r0, #44	; 0x2c
 80051f2:	f7ff ffbf 	bl	8005174 <writedata>
  writedata(0x2D);
 80051f6:	202d      	movs	r0, #45	; 0x2d
 80051f8:	f7ff ffbc 	bl	8005174 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 80051fc:	20b3      	movs	r0, #179	; 0xb3
 80051fe:	f7ff ff9b 	bl	8005138 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8005202:	2001      	movs	r0, #1
 8005204:	f7ff ffb6 	bl	8005174 <writedata>
  writedata(0x2C);
 8005208:	202c      	movs	r0, #44	; 0x2c
 800520a:	f7ff ffb3 	bl	8005174 <writedata>
  writedata(0x2D);
 800520e:	202d      	movs	r0, #45	; 0x2d
 8005210:	f7ff ffb0 	bl	8005174 <writedata>
  writedata(0x01);              //     Line inversion mode
 8005214:	2001      	movs	r0, #1
 8005216:	f7ff ffad 	bl	8005174 <writedata>
  writedata(0x2C);
 800521a:	202c      	movs	r0, #44	; 0x2c
 800521c:	f7ff ffaa 	bl	8005174 <writedata>
  writedata(0x2D);
 8005220:	202d      	movs	r0, #45	; 0x2d
 8005222:	f7ff ffa7 	bl	8005174 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8005226:	20b4      	movs	r0, #180	; 0xb4
 8005228:	f7ff ff86 	bl	8005138 <writecommand>
  writedata(0x07);              //     No inversion
 800522c:	2007      	movs	r0, #7
 800522e:	f7ff ffa1 	bl	8005174 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8005232:	20c0      	movs	r0, #192	; 0xc0
 8005234:	f7ff ff80 	bl	8005138 <writecommand>
  writedata(0xA2);
 8005238:	20a2      	movs	r0, #162	; 0xa2
 800523a:	f7ff ff9b 	bl	8005174 <writedata>
  writedata(0x02);              //     -4.6V
 800523e:	2002      	movs	r0, #2
 8005240:	f7ff ff98 	bl	8005174 <writedata>
  writedata(0x84);              //     AUTO mode
 8005244:	2084      	movs	r0, #132	; 0x84
 8005246:	f7ff ff95 	bl	8005174 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 800524a:	20c1      	movs	r0, #193	; 0xc1
 800524c:	f7ff ff74 	bl	8005138 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8005250:	20c5      	movs	r0, #197	; 0xc5
 8005252:	f7ff ff8f 	bl	8005174 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8005256:	20c2      	movs	r0, #194	; 0xc2
 8005258:	f7ff ff6e 	bl	8005138 <writecommand>
  writedata(0x0A);              //     Opamp current small
 800525c:	200a      	movs	r0, #10
 800525e:	f7ff ff89 	bl	8005174 <writedata>
  writedata(0x00);              //     Boost frequency
 8005262:	2000      	movs	r0, #0
 8005264:	f7ff ff86 	bl	8005174 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8005268:	20c3      	movs	r0, #195	; 0xc3
 800526a:	f7ff ff65 	bl	8005138 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 800526e:	208a      	movs	r0, #138	; 0x8a
 8005270:	f7ff ff80 	bl	8005174 <writedata>
  writedata(0x2A);
 8005274:	202a      	movs	r0, #42	; 0x2a
 8005276:	f7ff ff7d 	bl	8005174 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 800527a:	20c4      	movs	r0, #196	; 0xc4
 800527c:	f7ff ff5c 	bl	8005138 <writecommand>
  writedata(0x8A);
 8005280:	208a      	movs	r0, #138	; 0x8a
 8005282:	f7ff ff77 	bl	8005174 <writedata>
  writedata(0xEE);
 8005286:	20ee      	movs	r0, #238	; 0xee
 8005288:	f7ff ff74 	bl	8005174 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 800528c:	20c5      	movs	r0, #197	; 0xc5
 800528e:	f7ff ff53 	bl	8005138 <writecommand>
  writedata(0x0E);
 8005292:	200e      	movs	r0, #14
 8005294:	f7ff ff6e 	bl	8005174 <writedata>

  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
 8005298:	2021      	movs	r0, #33	; 0x21
 800529a:	f7ff ff4d 	bl	8005138 <writecommand>

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 800529e:	2036      	movs	r0, #54	; 0x36
 80052a0:	f7ff ff4a 	bl	8005138 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 80052a4:	20c8      	movs	r0, #200	; 0xc8
 80052a6:	f7ff ff65 	bl	8005174 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 80052aa:	203a      	movs	r0, #58	; 0x3a
 80052ac:	f7ff ff44 	bl	8005138 <writecommand>
  writedata(0x05);              //     16-bit color
 80052b0:	2005      	movs	r0, #5
 80052b2:	f7ff ff5f 	bl	8005174 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 80052b6:	202a      	movs	r0, #42	; 0x2a
 80052b8:	f7ff ff3e 	bl	8005138 <writecommand>
  writedata(0x00);
 80052bc:	2000      	movs	r0, #0
 80052be:	f7ff ff59 	bl	8005174 <writedata>
  writedata(0x00);              //     XSTART = 0
 80052c2:	2000      	movs	r0, #0
 80052c4:	f7ff ff56 	bl	8005174 <writedata>
  writedata(0x00);
 80052c8:	2000      	movs	r0, #0
 80052ca:	f7ff ff53 	bl	8005174 <writedata>
  writedata(160-1);             //     XEND = 159
 80052ce:	209f      	movs	r0, #159	; 0x9f
 80052d0:	f7ff ff50 	bl	8005174 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 80052d4:	202b      	movs	r0, #43	; 0x2b
 80052d6:	f7ff ff2f 	bl	8005138 <writecommand>
  writedata(0x00);
 80052da:	2000      	movs	r0, #0
 80052dc:	f7ff ff4a 	bl	8005174 <writedata>
  writedata(0x00);              //     XSTART = 0
 80052e0:	2000      	movs	r0, #0
 80052e2:	f7ff ff47 	bl	8005174 <writedata>
  writedata(0x00);
 80052e6:	2000      	movs	r0, #0
 80052e8:	f7ff ff44 	bl	8005174 <writedata>
  writedata(80-1);              //     XEND = 79
 80052ec:	204f      	movs	r0, #79	; 0x4f
 80052ee:	f7ff ff41 	bl	8005174 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 80052f2:	2013      	movs	r0, #19
 80052f4:	f7ff ff20 	bl	8005138 <writecommand>
  delay(10);
 80052f8:	200a      	movs	r0, #10
 80052fa:	f7fb fea3 	bl	8001044 <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 80052fe:	2029      	movs	r0, #41	; 0x29
 8005300:	f7ff ff1a 	bl	8005138 <writecommand>
  delay(10);
 8005304:	200a      	movs	r0, #10
 8005306:	f7fb fe9d 	bl	8001044 <delay>
}
 800530a:	bf00      	nop
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	4603      	mov	r3, r0
 8005318:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 800531a:	2036      	movs	r0, #54	; 0x36
 800531c:	f7ff ff0c 	bl	8005138 <writecommand>

  switch (mode)
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d81a      	bhi.n	800535c <st7735SetRotation+0x4c>
 8005326:	a201      	add	r2, pc, #4	; (adr r2, 800532c <st7735SetRotation+0x1c>)
 8005328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532c:	0800533d 	.word	0x0800533d
 8005330:	08005345 	.word	0x08005345
 8005334:	0800534d 	.word	0x0800534d
 8005338:	08005355 	.word	0x08005355
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 800533c:	20c8      	movs	r0, #200	; 0xc8
 800533e:	f7ff ff19 	bl	8005174 <writedata>
     break;
 8005342:	e00b      	b.n	800535c <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8005344:	20a8      	movs	r0, #168	; 0xa8
 8005346:	f7ff ff15 	bl	8005174 <writedata>
     break;
 800534a:	e007      	b.n	800535c <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 800534c:	2008      	movs	r0, #8
 800534e:	f7ff ff11 	bl	8005174 <writedata>
    break;
 8005352:	e003      	b.n	800535c <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8005354:	2068      	movs	r0, #104	; 0x68
 8005356:	f7ff ff0d 	bl	8005174 <writedata>
     break;
 800535a:	bf00      	nop
  }
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8005372:	4b21      	ldr	r3, [pc, #132]	; (80053f8 <st7735SetWindow+0x94>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2108      	movs	r1, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f7fe ff77 	bl	800426c <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 800537e:	202a      	movs	r0, #42	; 0x2a
 8005380:	f7ff feda 	bl	8005138 <writecommand>
  writedata(0x00);
 8005384:	2000      	movs	r0, #0
 8005386:	f7ff fef5 	bl	8005174 <writedata>
  writedata(x0+colstart);     // XSTART
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	b2da      	uxtb	r2, r3
 800538e:	2301      	movs	r3, #1
 8005390:	b2db      	uxtb	r3, r3
 8005392:	4413      	add	r3, r2
 8005394:	b2db      	uxtb	r3, r3
 8005396:	4618      	mov	r0, r3
 8005398:	f7ff feec 	bl	8005174 <writedata>
  writedata(0x00);
 800539c:	2000      	movs	r0, #0
 800539e:	f7ff fee9 	bl	8005174 <writedata>
  writedata(x1+colstart);     // XEND
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	b2da      	uxtb	r2, r3
 80053a6:	2301      	movs	r3, #1
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4413      	add	r3, r2
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff fee0 	bl	8005174 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 80053b4:	202b      	movs	r0, #43	; 0x2b
 80053b6:	f7ff febf 	bl	8005138 <writecommand>
  writedata(0x00);
 80053ba:	2000      	movs	r0, #0
 80053bc:	f7ff feda 	bl	8005174 <writedata>
  writedata(y0+rowstart);     // YSTART
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	231a      	movs	r3, #26
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	4618      	mov	r0, r3
 80053ce:	f7ff fed1 	bl	8005174 <writedata>
  writedata(0x00);
 80053d2:	2000      	movs	r0, #0
 80053d4:	f7ff fece 	bl	8005174 <writedata>
  writedata(y1+rowstart);     // YEND
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	b2da      	uxtb	r2, r3
 80053dc:	231a      	movs	r3, #26
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	4413      	add	r3, r2
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff fec5 	bl	8005174 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 80053ea:	202c      	movs	r0, #44	; 0x2c
 80053ec:	f7ff fea4 	bl	8005138 <writecommand>
}
 80053f0:	bf00      	nop
 80053f2:	3710      	adds	r7, #16
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20006a20 	.word	0x20006a20

080053fc <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 80053fc:	b5b0      	push	{r4, r5, r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	466b      	mov	r3, sp
 800540c:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 800540e:	687c      	ldr	r4, [r7, #4]
 8005410:	1e63      	subs	r3, r4, #1
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	4623      	mov	r3, r4
 8005416:	4618      	mov	r0, r3
 8005418:	f04f 0100 	mov.w	r1, #0
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	010b      	lsls	r3, r1, #4
 8005426:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800542a:	0102      	lsls	r2, r0, #4
 800542c:	4623      	mov	r3, r4
 800542e:	4618      	mov	r0, r3
 8005430:	f04f 0100 	mov.w	r1, #0
 8005434:	f04f 0200 	mov.w	r2, #0
 8005438:	f04f 0300 	mov.w	r3, #0
 800543c:	010b      	lsls	r3, r1, #4
 800543e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005442:	0102      	lsls	r2, r0, #4
 8005444:	4623      	mov	r3, r4
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	3307      	adds	r3, #7
 800544a:	08db      	lsrs	r3, r3, #3
 800544c:	00db      	lsls	r3, r3, #3
 800544e:	ebad 0d03 	sub.w	sp, sp, r3
 8005452:	466b      	mov	r3, sp
 8005454:	3301      	adds	r3, #1
 8005456:	085b      	lsrs	r3, r3, #1
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 800545c:	22a0      	movs	r2, #160	; 0xa0
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4293      	cmp	r3, r2
 8005462:	da70      	bge.n	8005546 <st7735FillRect+0x14a>
 8005464:	2250      	movs	r2, #80	; 0x50
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	4293      	cmp	r3, r2
 800546a:	da6c      	bge.n	8005546 <st7735FillRect+0x14a>

  if (x < 0) { w += x; x = 0; }
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b00      	cmp	r3, #0
 8005470:	da05      	bge.n	800547e <st7735FillRect+0x82>
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	4413      	add	r3, r2
 8005478:	607b      	str	r3, [r7, #4]
 800547a:	2300      	movs	r3, #0
 800547c:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	da05      	bge.n	8005490 <st7735FillRect+0x94>
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	4413      	add	r3, r2
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	2300      	movs	r3, #0
 800548e:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4413      	add	r3, r2
 8005496:	22a0      	movs	r2, #160	; 0xa0
 8005498:	4293      	cmp	r3, r2
 800549a:	dd03      	ble.n	80054a4 <st7735FillRect+0xa8>
 800549c:	22a0      	movs	r2, #160	; 0xa0
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	4413      	add	r3, r2
 80054aa:	2250      	movs	r2, #80	; 0x50
 80054ac:	4293      	cmp	r3, r2
 80054ae:	dd03      	ble.n	80054b8 <st7735FillRect+0xbc>
 80054b0:	2250      	movs	r2, #80	; 0x50
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd45      	ble.n	800554a <st7735FillRect+0x14e>
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dd42      	ble.n	800554a <st7735FillRect+0x14e>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4413      	add	r3, r2
 80054ca:	1e59      	subs	r1, r3, #1
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	4413      	add	r3, r2
 80054d2:	3b01      	subs	r3, #1
 80054d4:	460a      	mov	r2, r1
 80054d6:	68b9      	ldr	r1, [r7, #8]
 80054d8:	68f8      	ldr	r0, [r7, #12]
 80054da:	f7ff ff43 	bl	8005364 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 80054de:	4b1d      	ldr	r3, [pc, #116]	; (8005554 <st7735FillRect+0x158>)
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2110      	movs	r1, #16
 80054e4:	4618      	mov	r0, r3
 80054e6:	f7fe fec1 	bl	800426c <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80054ea:	2101      	movs	r1, #1
 80054ec:	2003      	movs	r0, #3
 80054ee:	f7fd fc53 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 80054f2:	2100      	movs	r1, #0
 80054f4:	2002      	movs	r0, #2
 80054f6:	f7fd fc4f 	bl	8002d98 <gpioPinWrite>

  for (int i=0; i<w; i++)
 80054fa:	2300      	movs	r3, #0
 80054fc:	61fb      	str	r3, [r7, #28]
 80054fe:	e008      	b.n	8005512 <st7735FillRect+0x116>
  {
    line_buf[i] = color;
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	b299      	uxth	r1, r3
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	69fa      	ldr	r2, [r7, #28]
 8005508:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	3301      	adds	r3, #1
 8005510:	61fb      	str	r3, [r7, #28]
 8005512:	69fa      	ldr	r2, [r7, #28]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	429a      	cmp	r2, r3
 8005518:	dbf2      	blt.n	8005500 <st7735FillRect+0x104>
  }
  for (int i=0; i<h; i++)
 800551a:	2300      	movs	r3, #0
 800551c:	61bb      	str	r3, [r7, #24]
 800551e:	e008      	b.n	8005532 <st7735FillRect+0x136>
  {
    spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10);
 8005520:	6939      	ldr	r1, [r7, #16]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	230a      	movs	r3, #10
 8005526:	2000      	movs	r0, #0
 8005528:	f7fe ff1a 	bl	8004360 <spiDmaTxTransfer>
  for (int i=0; i<h; i++)
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	3301      	adds	r3, #1
 8005530:	61bb      	str	r3, [r7, #24]
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	dbf2      	blt.n	8005520 <st7735FillRect+0x124>
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800553a:	2101      	movs	r1, #1
 800553c:	2002      	movs	r0, #2
 800553e:	f7fd fc2b 	bl	8002d98 <gpioPinWrite>
 8005542:	46ad      	mov	sp, r5
 8005544:	e003      	b.n	800554e <st7735FillRect+0x152>
  if ((x >= _width) || (y >= _height)) return;
 8005546:	bf00      	nop
 8005548:	e000      	b.n	800554c <st7735FillRect+0x150>
  if ((w < 1) || (h < 1)) return;
 800554a:	bf00      	nop
 800554c:	46ad      	mov	sp, r5
}
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bdb0      	pop	{r4, r5, r7, pc}
 8005554:	20006a20 	.word	0x20006a20

08005558 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8005564:	4b0d      	ldr	r3, [pc, #52]	; (800559c <st7735SendBuffer+0x44>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 800556a:	4b0d      	ldr	r3, [pc, #52]	; (80055a0 <st7735SendBuffer+0x48>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2110      	movs	r1, #16
 8005570:	4618      	mov	r0, r3
 8005572:	f7fe fe7b 	bl	800426c <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8005576:	2101      	movs	r1, #1
 8005578:	2003      	movs	r0, #3
 800557a:	f7fd fc0d 	bl	8002d98 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800557e:	2100      	movs	r1, #0
 8005580:	2002      	movs	r0, #2
 8005582:	f7fd fc09 	bl	8002d98 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8005586:	2300      	movs	r3, #0
 8005588:	68ba      	ldr	r2, [r7, #8]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	2000      	movs	r0, #0
 800558e:	f7fe fee7 	bl	8004360 <spiDmaTxTransfer>
  return true;
 8005592:	2301      	movs	r3, #1
}
 8005594:	4618      	mov	r0, r3
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20006a28 	.word	0x20006a28
 80055a0:	20006a20 	.word	0x20006a20

080055a4 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 80055ac:	4a04      	ldr	r2, [pc, #16]	; (80055c0 <st7735SetCallBack+0x1c>)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6013      	str	r3, [r2, #0]

  return true;
 80055b2:	2301      	movs	r3, #1
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr
 80055c0:	20006a24 	.word	0x20006a24

080055c4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b086      	sub	sp, #24
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	4613      	mov	r3, r2
 80055d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d101      	bne.n	80055dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80055d8:	2303      	movs	r3, #3
 80055da:	e01f      	b.n	800561c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2200      	movs	r2, #0
 80055f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d003      	beq.n	8005602 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	68ba      	ldr	r2, [r7, #8]
 80055fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	79fa      	ldrb	r2, [r7, #7]
 800560e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005610:	68f8      	ldr	r0, [r7, #12]
 8005612:	f004 f841 	bl	8009698 <USBD_LL_Init>
 8005616:	4603      	mov	r3, r0
 8005618:	75fb      	strb	r3, [r7, #23]

  return ret;
 800561a:	7dfb      	ldrb	r3, [r7, #23]
}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}

08005624 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d101      	bne.n	800563c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005638:	2303      	movs	r3, #3
 800563a:	e016      	b.n	800566a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	683a      	ldr	r2, [r7, #0]
 8005640:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800564a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00b      	beq.n	8005668 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005658:	f107 020e 	add.w	r2, r7, #14
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	4602      	mov	r2, r0
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3710      	adds	r7, #16
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}

08005672 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005672:	b580      	push	{r7, lr}
 8005674:	b082      	sub	sp, #8
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f004 f858 	bl	8009730 <USBD_LL_Start>
 8005680:	4603      	mov	r3, r0
}
 8005682:	4618      	mov	r0, r3
 8005684:	3708      	adds	r7, #8
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}

0800568a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	370c      	adds	r7, #12
 8005698:	46bd      	mov	sp, r7
 800569a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569e:	4770      	bx	lr

080056a0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	460b      	mov	r3, r1
 80056aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d009      	beq.n	80056ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	78fa      	ldrb	r2, [r7, #3]
 80056c4:	4611      	mov	r1, r2
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	4798      	blx	r3
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	460b      	mov	r3, r1
 80056e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d007      	beq.n	80056fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	4611      	mov	r1, r2
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
  }

  return USBD_OK;
 80056fe:	2300      	movs	r3, #0
}
 8005700:	4618      	mov	r0, r3
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	4618      	mov	r0, r3
 800571c:	f000 ff90 	bl	8006640 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800572e:	461a      	mov	r2, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800573c:	f003 031f 	and.w	r3, r3, #31
 8005740:	2b02      	cmp	r3, #2
 8005742:	d01a      	beq.n	800577a <USBD_LL_SetupStage+0x72>
 8005744:	2b02      	cmp	r3, #2
 8005746:	d822      	bhi.n	800578e <USBD_LL_SetupStage+0x86>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <USBD_LL_SetupStage+0x4a>
 800574c:	2b01      	cmp	r3, #1
 800574e:	d00a      	beq.n	8005766 <USBD_LL_SetupStage+0x5e>
 8005750:	e01d      	b.n	800578e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005758:	4619      	mov	r1, r3
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fa62 	bl	8005c24 <USBD_StdDevReq>
 8005760:	4603      	mov	r3, r0
 8005762:	73fb      	strb	r3, [r7, #15]
      break;
 8005764:	e020      	b.n	80057a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800576c:	4619      	mov	r1, r3
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	f000 fac6 	bl	8005d00 <USBD_StdItfReq>
 8005774:	4603      	mov	r3, r0
 8005776:	73fb      	strb	r3, [r7, #15]
      break;
 8005778:	e016      	b.n	80057a8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005780:	4619      	mov	r1, r3
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 fb05 	bl	8005d92 <USBD_StdEPReq>
 8005788:	4603      	mov	r3, r0
 800578a:	73fb      	strb	r3, [r7, #15]
      break;
 800578c:	e00c      	b.n	80057a8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005794:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005798:	b2db      	uxtb	r3, r3
 800579a:	4619      	mov	r1, r3
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f004 f846 	bl	800982e <USBD_LL_StallEP>
 80057a2:	4603      	mov	r3, r0
 80057a4:	73fb      	strb	r3, [r7, #15]
      break;
 80057a6:	bf00      	nop
  }

  return ret;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	460b      	mov	r3, r1
 80057bc:	607a      	str	r2, [r7, #4]
 80057be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80057c0:	7afb      	ldrb	r3, [r7, #11]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d138      	bne.n	8005838 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80057cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d14a      	bne.n	800586e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	689a      	ldr	r2, [r3, #8]
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	68db      	ldr	r3, [r3, #12]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d913      	bls.n	800580c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	689a      	ldr	r2, [r3, #8]
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	1ad2      	subs	r2, r2, r3
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	68da      	ldr	r2, [r3, #12]
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	4293      	cmp	r3, r2
 80057fc:	bf28      	it	cs
 80057fe:	4613      	movcs	r3, r2
 8005800:	461a      	mov	r2, r3
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f001 f80f 	bl	8006828 <USBD_CtlContinueRx>
 800580a:	e030      	b.n	800586e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005812:	b2db      	uxtb	r3, r3
 8005814:	2b03      	cmp	r3, #3
 8005816:	d10b      	bne.n	8005830 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581e:	691b      	ldr	r3, [r3, #16]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f001 f80a 	bl	800684a <USBD_CtlSendStatus>
 8005836:	e01a      	b.n	800586e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2b03      	cmp	r3, #3
 8005842:	d114      	bne.n	800586e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00e      	beq.n	800586e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	7afa      	ldrb	r2, [r7, #11]
 800585a:	4611      	mov	r1, r2
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	4798      	blx	r3
 8005860:	4603      	mov	r3, r0
 8005862:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005864:	7dfb      	ldrb	r3, [r7, #23]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800586a:	7dfb      	ldrb	r3, [r7, #23]
 800586c:	e000      	b.n	8005870 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800586e:	2300      	movs	r3, #0
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}

08005878 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	460b      	mov	r3, r1
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d16b      	bne.n	8005964 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	3314      	adds	r3, #20
 8005890:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005898:	2b02      	cmp	r3, #2
 800589a:	d156      	bne.n	800594a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	68db      	ldr	r3, [r3, #12]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d914      	bls.n	80058d2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	689a      	ldr	r2, [r3, #8]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	1ad2      	subs	r2, r2, r3
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	461a      	mov	r2, r3
 80058bc:	6879      	ldr	r1, [r7, #4]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 ff84 	bl	80067cc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058c4:	2300      	movs	r3, #0
 80058c6:	2200      	movs	r2, #0
 80058c8:	2100      	movs	r1, #0
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f004 f859 	bl	8009982 <USBD_LL_PrepareReceive>
 80058d0:	e03b      	b.n	800594a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	689b      	ldr	r3, [r3, #8]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d11c      	bne.n	8005918 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058e6:	429a      	cmp	r2, r3
 80058e8:	d316      	bcc.n	8005918 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d20f      	bcs.n	8005918 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058f8:	2200      	movs	r2, #0
 80058fa:	2100      	movs	r1, #0
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 ff65 	bl	80067cc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800590a:	2300      	movs	r3, #0
 800590c:	2200      	movs	r2, #0
 800590e:	2100      	movs	r1, #0
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	f004 f836 	bl	8009982 <USBD_LL_PrepareReceive>
 8005916:	e018      	b.n	800594a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b03      	cmp	r3, #3
 8005922:	d10b      	bne.n	800593c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d005      	beq.n	800593c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800593c:	2180      	movs	r1, #128	; 0x80
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f003 ff75 	bl	800982e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 ff93 	bl	8006870 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d122      	bne.n	800599a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005954:	68f8      	ldr	r0, [r7, #12]
 8005956:	f7ff fe98 	bl	800568a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005962:	e01a      	b.n	800599a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d114      	bne.n	800599a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00e      	beq.n	800599a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	7afa      	ldrb	r2, [r7, #11]
 8005986:	4611      	mov	r1, r2
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	4798      	blx	r3
 800598c:	4603      	mov	r3, r0
 800598e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005990:	7dfb      	ldrb	r3, [r7, #23]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005996:	7dfb      	ldrb	r3, [r7, #23]
 8005998:	e000      	b.n	800599c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d101      	bne.n	80059d8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80059d4:	2303      	movs	r3, #3
 80059d6:	e02f      	b.n	8005a38 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00f      	beq.n	8005a02 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	687a      	ldr	r2, [r7, #4]
 80059f8:	6852      	ldr	r2, [r2, #4]
 80059fa:	b2d2      	uxtb	r2, r2
 80059fc:	4611      	mov	r1, r2
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a02:	2340      	movs	r3, #64	; 0x40
 8005a04:	2200      	movs	r2, #0
 8005a06:	2100      	movs	r1, #0
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f003 feac 	bl	8009766 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2240      	movs	r2, #64	; 0x40
 8005a1a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a1e:	2340      	movs	r3, #64	; 0x40
 8005a20:	2200      	movs	r2, #0
 8005a22:	2180      	movs	r1, #128	; 0x80
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f003 fe9e 	bl	8009766 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2240      	movs	r2, #64	; 0x40
 8005a34:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3708      	adds	r7, #8
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	460b      	mov	r3, r1
 8005a4a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a6e:	b2da      	uxtb	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2204      	movs	r2, #4
 8005a7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b04      	cmp	r3, #4
 8005a9e:	d106      	bne.n	8005aae <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e012      	b.n	8005af8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2b03      	cmp	r3, #3
 8005adc:	d10b      	bne.n	8005af6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d005      	beq.n	8005af6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af0:	69db      	ldr	r3, [r3, #28]
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	460b      	mov	r3, r1
 8005b0a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e014      	b.n	8005b44 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	2b03      	cmp	r3, #3
 8005b24:	d10d      	bne.n	8005b42 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2c:	6a1b      	ldr	r3, [r3, #32]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d007      	beq.n	8005b42 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	78fa      	ldrb	r2, [r7, #3]
 8005b3c:	4611      	mov	r1, r2
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b082      	sub	sp, #8
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	460b      	mov	r3, r1
 8005b56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b62:	2303      	movs	r3, #3
 8005b64:	e014      	b.n	8005b90 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b03      	cmp	r3, #3
 8005b70:	d10d      	bne.n	8005b8e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b86:	78fa      	ldrb	r2, [r7, #3]
 8005b88:	4611      	mov	r1, r2
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b083      	sub	sp, #12
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	370c      	adds	r7, #12
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr

08005bae <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b082      	sub	sp, #8
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2201      	movs	r2, #1
 8005bba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d009      	beq.n	8005bdc <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6852      	ldr	r2, [r2, #4]
 8005bd4:	b2d2      	uxtb	r2, r2
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	4798      	blx	r3
  }

  return USBD_OK;
 8005bdc:	2300      	movs	r3, #0
}
 8005bde:	4618      	mov	r0, r3
 8005be0:	3708      	adds	r7, #8
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}

08005be6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005be6:	b480      	push	{r7}
 8005be8:	b087      	sub	sp, #28
 8005bea:	af00      	add	r7, sp, #0
 8005bec:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c04:	8a3b      	ldrh	r3, [r7, #16]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c14:	89fb      	ldrh	r3, [r7, #14]
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	371c      	adds	r7, #28
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
	...

08005c24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c24:	b580      	push	{r7, lr}
 8005c26:	b084      	sub	sp, #16
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	6078      	str	r0, [r7, #4]
 8005c2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c3a:	2b40      	cmp	r3, #64	; 0x40
 8005c3c:	d005      	beq.n	8005c4a <USBD_StdDevReq+0x26>
 8005c3e:	2b40      	cmp	r3, #64	; 0x40
 8005c40:	d853      	bhi.n	8005cea <USBD_StdDevReq+0xc6>
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00b      	beq.n	8005c5e <USBD_StdDevReq+0x3a>
 8005c46:	2b20      	cmp	r3, #32
 8005c48:	d14f      	bne.n	8005cea <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	4798      	blx	r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c5c:	e04a      	b.n	8005cf4 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	785b      	ldrb	r3, [r3, #1]
 8005c62:	2b09      	cmp	r3, #9
 8005c64:	d83b      	bhi.n	8005cde <USBD_StdDevReq+0xba>
 8005c66:	a201      	add	r2, pc, #4	; (adr r2, 8005c6c <USBD_StdDevReq+0x48>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005cc1 	.word	0x08005cc1
 8005c70:	08005cd5 	.word	0x08005cd5
 8005c74:	08005cdf 	.word	0x08005cdf
 8005c78:	08005ccb 	.word	0x08005ccb
 8005c7c:	08005cdf 	.word	0x08005cdf
 8005c80:	08005c9f 	.word	0x08005c9f
 8005c84:	08005c95 	.word	0x08005c95
 8005c88:	08005cdf 	.word	0x08005cdf
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005ca9 	.word	0x08005ca9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 f9de 	bl	8006058 <USBD_GetDescriptor>
          break;
 8005c9c:	e024      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c9e:	6839      	ldr	r1, [r7, #0]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f000 fb43 	bl	800632c <USBD_SetAddress>
          break;
 8005ca6:	e01f      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fb82 	bl	80063b4 <USBD_SetConfig>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	73fb      	strb	r3, [r7, #15]
          break;
 8005cb4:	e018      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005cb6:	6839      	ldr	r1, [r7, #0]
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fc21 	bl	8006500 <USBD_GetConfig>
          break;
 8005cbe:	e013      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fc52 	bl	800656c <USBD_GetStatus>
          break;
 8005cc8:	e00e      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005cca:	6839      	ldr	r1, [r7, #0]
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fc81 	bl	80065d4 <USBD_SetFeature>
          break;
 8005cd2:	e009      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fc90 	bl	80065fc <USBD_ClrFeature>
          break;
 8005cdc:	e004      	b.n	8005ce8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005cde:	6839      	ldr	r1, [r7, #0]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f000 fce7 	bl	80066b4 <USBD_CtlError>
          break;
 8005ce6:	bf00      	nop
      }
      break;
 8005ce8:	e004      	b.n	8005cf4 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f000 fce1 	bl	80066b4 <USBD_CtlError>
      break;
 8005cf2:	bf00      	nop
  }

  return ret;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop

08005d00 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d16:	2b40      	cmp	r3, #64	; 0x40
 8005d18:	d005      	beq.n	8005d26 <USBD_StdItfReq+0x26>
 8005d1a:	2b40      	cmp	r3, #64	; 0x40
 8005d1c:	d82f      	bhi.n	8005d7e <USBD_StdItfReq+0x7e>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <USBD_StdItfReq+0x26>
 8005d22:	2b20      	cmp	r3, #32
 8005d24:	d12b      	bne.n	8005d7e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2c:	b2db      	uxtb	r3, r3
 8005d2e:	3b01      	subs	r3, #1
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d81d      	bhi.n	8005d70 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	889b      	ldrh	r3, [r3, #4]
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d813      	bhi.n	8005d66 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	6839      	ldr	r1, [r7, #0]
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	4798      	blx	r3
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	88db      	ldrh	r3, [r3, #6]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d110      	bne.n	8005d7a <USBD_StdItfReq+0x7a>
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d10d      	bne.n	8005d7a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f000 fd73 	bl	800684a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005d64:	e009      	b.n	8005d7a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 fca3 	bl	80066b4 <USBD_CtlError>
          break;
 8005d6e:	e004      	b.n	8005d7a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005d70:	6839      	ldr	r1, [r7, #0]
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 fc9e 	bl	80066b4 <USBD_CtlError>
          break;
 8005d78:	e000      	b.n	8005d7c <USBD_StdItfReq+0x7c>
          break;
 8005d7a:	bf00      	nop
      }
      break;
 8005d7c:	e004      	b.n	8005d88 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fc97 	bl	80066b4 <USBD_CtlError>
      break;
 8005d86:	bf00      	nop
  }

  return ret;
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}

08005d92 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b084      	sub	sp, #16
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	889b      	ldrh	r3, [r3, #4]
 8005da4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005dae:	2b40      	cmp	r3, #64	; 0x40
 8005db0:	d007      	beq.n	8005dc2 <USBD_StdEPReq+0x30>
 8005db2:	2b40      	cmp	r3, #64	; 0x40
 8005db4:	f200 8145 	bhi.w	8006042 <USBD_StdEPReq+0x2b0>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00c      	beq.n	8005dd6 <USBD_StdEPReq+0x44>
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	f040 8140 	bne.w	8006042 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	6839      	ldr	r1, [r7, #0]
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	4798      	blx	r3
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd4:	e13a      	b.n	800604c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d007      	beq.n	8005dee <USBD_StdEPReq+0x5c>
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	f300 8129 	bgt.w	8006036 <USBD_StdEPReq+0x2a4>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d07f      	beq.n	8005ee8 <USBD_StdEPReq+0x156>
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d03c      	beq.n	8005e66 <USBD_StdEPReq+0xd4>
 8005dec:	e123      	b.n	8006036 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d002      	beq.n	8005e00 <USBD_StdEPReq+0x6e>
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d016      	beq.n	8005e2c <USBD_StdEPReq+0x9a>
 8005dfe:	e02c      	b.n	8005e5a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <USBD_StdEPReq+0x90>
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d00a      	beq.n	8005e22 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f003 fd0c 	bl	800982e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f003 fd08 	bl	800982e <USBD_LL_StallEP>
 8005e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e20:	e020      	b.n	8005e64 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc45 	bl	80066b4 <USBD_CtlError>
              break;
 8005e2a:	e01b      	b.n	8005e64 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d10e      	bne.n	8005e52 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00b      	beq.n	8005e52 <USBD_StdEPReq+0xc0>
 8005e3a:	7bbb      	ldrb	r3, [r7, #14]
 8005e3c:	2b80      	cmp	r3, #128	; 0x80
 8005e3e:	d008      	beq.n	8005e52 <USBD_StdEPReq+0xc0>
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	88db      	ldrh	r3, [r3, #6]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f003 fcee 	bl	800982e <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fcf9 	bl	800684a <USBD_CtlSendStatus>

              break;
 8005e58:	e004      	b.n	8005e64 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005e5a:	6839      	ldr	r1, [r7, #0]
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fc29 	bl	80066b4 <USBD_CtlError>
              break;
 8005e62:	bf00      	nop
          }
          break;
 8005e64:	e0ec      	b.n	8006040 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d002      	beq.n	8005e78 <USBD_StdEPReq+0xe6>
 8005e72:	2b03      	cmp	r3, #3
 8005e74:	d016      	beq.n	8005ea4 <USBD_StdEPReq+0x112>
 8005e76:	e030      	b.n	8005eda <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e78:	7bbb      	ldrb	r3, [r7, #14]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d00d      	beq.n	8005e9a <USBD_StdEPReq+0x108>
 8005e7e:	7bbb      	ldrb	r3, [r7, #14]
 8005e80:	2b80      	cmp	r3, #128	; 0x80
 8005e82:	d00a      	beq.n	8005e9a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e84:	7bbb      	ldrb	r3, [r7, #14]
 8005e86:	4619      	mov	r1, r3
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f003 fcd0 	bl	800982e <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e8e:	2180      	movs	r1, #128	; 0x80
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f003 fccc 	bl	800982e <USBD_LL_StallEP>
 8005e96:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e98:	e025      	b.n	8005ee6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fc09 	bl	80066b4 <USBD_CtlError>
              break;
 8005ea2:	e020      	b.n	8005ee6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	885b      	ldrh	r3, [r3, #2]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d11b      	bne.n	8005ee4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d004      	beq.n	8005ec0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005eb6:	7bbb      	ldrb	r3, [r7, #14]
 8005eb8:	4619      	mov	r1, r3
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f003 fcd6 	bl	800986c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fcc2 	bl	800684a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	4798      	blx	r3
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005ed8:	e004      	b.n	8005ee4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005eda:	6839      	ldr	r1, [r7, #0]
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fbe9 	bl	80066b4 <USBD_CtlError>
              break;
 8005ee2:	e000      	b.n	8005ee6 <USBD_StdEPReq+0x154>
              break;
 8005ee4:	bf00      	nop
          }
          break;
 8005ee6:	e0ab      	b.n	8006040 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b02      	cmp	r3, #2
 8005ef2:	d002      	beq.n	8005efa <USBD_StdEPReq+0x168>
 8005ef4:	2b03      	cmp	r3, #3
 8005ef6:	d032      	beq.n	8005f5e <USBD_StdEPReq+0x1cc>
 8005ef8:	e097      	b.n	800602a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005efa:	7bbb      	ldrb	r3, [r7, #14]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d007      	beq.n	8005f10 <USBD_StdEPReq+0x17e>
 8005f00:	7bbb      	ldrb	r3, [r7, #14]
 8005f02:	2b80      	cmp	r3, #128	; 0x80
 8005f04:	d004      	beq.n	8005f10 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005f06:	6839      	ldr	r1, [r7, #0]
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fbd3 	bl	80066b4 <USBD_CtlError>
                break;
 8005f0e:	e091      	b.n	8006034 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	da0b      	bge.n	8005f30 <USBD_StdEPReq+0x19e>
 8005f18:	7bbb      	ldrb	r3, [r7, #14]
 8005f1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	3310      	adds	r3, #16
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	e00b      	b.n	8005f48 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f36:	4613      	mov	r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	4413      	add	r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f42:	687a      	ldr	r2, [r7, #4]
 8005f44:	4413      	add	r3, r2
 8005f46:	3304      	adds	r3, #4
 8005f48:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2202      	movs	r2, #2
 8005f54:	4619      	mov	r1, r3
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 fc1d 	bl	8006796 <USBD_CtlSendData>
              break;
 8005f5c:	e06a      	b.n	8006034 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005f5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	da11      	bge.n	8005f8a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005f66:	7bbb      	ldrb	r3, [r7, #14]
 8005f68:	f003 020f 	and.w	r2, r3, #15
 8005f6c:	6879      	ldr	r1, [r7, #4]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	440b      	add	r3, r1
 8005f78:	3324      	adds	r3, #36	; 0x24
 8005f7a:	881b      	ldrh	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d117      	bne.n	8005fb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f80:	6839      	ldr	r1, [r7, #0]
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f000 fb96 	bl	80066b4 <USBD_CtlError>
                  break;
 8005f88:	e054      	b.n	8006034 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f8a:	7bbb      	ldrb	r3, [r7, #14]
 8005f8c:	f003 020f 	and.w	r2, r3, #15
 8005f90:	6879      	ldr	r1, [r7, #4]
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005fa0:	881b      	ldrh	r3, [r3, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d104      	bne.n	8005fb0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005fa6:	6839      	ldr	r1, [r7, #0]
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f000 fb83 	bl	80066b4 <USBD_CtlError>
                  break;
 8005fae:	e041      	b.n	8006034 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	da0b      	bge.n	8005fd0 <USBD_StdEPReq+0x23e>
 8005fb8:	7bbb      	ldrb	r3, [r7, #14]
 8005fba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	3310      	adds	r3, #16
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	4413      	add	r3, r2
 8005fcc:	3304      	adds	r3, #4
 8005fce:	e00b      	b.n	8005fe8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fd0:	7bbb      	ldrb	r3, [r7, #14]
 8005fd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005fea:	7bbb      	ldrb	r3, [r7, #14]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <USBD_StdEPReq+0x264>
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b80      	cmp	r3, #128	; 0x80
 8005ff4:	d103      	bne.n	8005ffe <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	601a      	str	r2, [r3, #0]
 8005ffc:	e00e      	b.n	800601c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f003 fc51 	bl	80098aa <USBD_LL_IsStallEP>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2201      	movs	r2, #1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	e002      	b.n	800601c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2202      	movs	r2, #2
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fbb7 	bl	8006796 <USBD_CtlSendData>
              break;
 8006028:	e004      	b.n	8006034 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fb41 	bl	80066b4 <USBD_CtlError>
              break;
 8006032:	bf00      	nop
          }
          break;
 8006034:	e004      	b.n	8006040 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8006036:	6839      	ldr	r1, [r7, #0]
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 fb3b 	bl	80066b4 <USBD_CtlError>
          break;
 800603e:	bf00      	nop
      }
      break;
 8006040:	e004      	b.n	800604c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8006042:	6839      	ldr	r1, [r7, #0]
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fb35 	bl	80066b4 <USBD_CtlError>
      break;
 800604a:	bf00      	nop
  }

  return ret;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
	...

08006058 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006062:	2300      	movs	r3, #0
 8006064:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800606a:	2300      	movs	r3, #0
 800606c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	885b      	ldrh	r3, [r3, #2]
 8006072:	0a1b      	lsrs	r3, r3, #8
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	2b06      	cmp	r3, #6
 800607a:	f200 8128 	bhi.w	80062ce <USBD_GetDescriptor+0x276>
 800607e:	a201      	add	r2, pc, #4	; (adr r2, 8006084 <USBD_GetDescriptor+0x2c>)
 8006080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006084:	080060a1 	.word	0x080060a1
 8006088:	080060b9 	.word	0x080060b9
 800608c:	080060f9 	.word	0x080060f9
 8006090:	080062cf 	.word	0x080062cf
 8006094:	080062cf 	.word	0x080062cf
 8006098:	0800626f 	.word	0x0800626f
 800609c:	0800629b 	.word	0x0800629b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	7c12      	ldrb	r2, [r2, #16]
 80060ac:	f107 0108 	add.w	r1, r7, #8
 80060b0:	4610      	mov	r0, r2
 80060b2:	4798      	blx	r3
 80060b4:	60f8      	str	r0, [r7, #12]
      break;
 80060b6:	e112      	b.n	80062de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	7c1b      	ldrb	r3, [r3, #16]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10d      	bne.n	80060dc <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c8:	f107 0208 	add.w	r2, r7, #8
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
 80060d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	3301      	adds	r3, #1
 80060d6:	2202      	movs	r2, #2
 80060d8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060da:	e100      	b.n	80062de <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e4:	f107 0208 	add.w	r2, r7, #8
 80060e8:	4610      	mov	r0, r2
 80060ea:	4798      	blx	r3
 80060ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	3301      	adds	r3, #1
 80060f2:	2202      	movs	r2, #2
 80060f4:	701a      	strb	r2, [r3, #0]
      break;
 80060f6:	e0f2      	b.n	80062de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	885b      	ldrh	r3, [r3, #2]
 80060fc:	b2db      	uxtb	r3, r3
 80060fe:	2b05      	cmp	r3, #5
 8006100:	f200 80ac 	bhi.w	800625c <USBD_GetDescriptor+0x204>
 8006104:	a201      	add	r2, pc, #4	; (adr r2, 800610c <USBD_GetDescriptor+0xb4>)
 8006106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610a:	bf00      	nop
 800610c:	08006125 	.word	0x08006125
 8006110:	08006159 	.word	0x08006159
 8006114:	0800618d 	.word	0x0800618d
 8006118:	080061c1 	.word	0x080061c1
 800611c:	080061f5 	.word	0x080061f5
 8006120:	08006229 	.word	0x08006229
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00b      	beq.n	8006148 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	7c12      	ldrb	r2, [r2, #16]
 800613c:	f107 0108 	add.w	r1, r7, #8
 8006140:	4610      	mov	r0, r2
 8006142:	4798      	blx	r3
 8006144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006146:	e091      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006148:	6839      	ldr	r1, [r7, #0]
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fab2 	bl	80066b4 <USBD_CtlError>
            err++;
 8006150:	7afb      	ldrb	r3, [r7, #11]
 8006152:	3301      	adds	r3, #1
 8006154:	72fb      	strb	r3, [r7, #11]
          break;
 8006156:	e089      	b.n	800626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00b      	beq.n	800617c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	7c12      	ldrb	r2, [r2, #16]
 8006170:	f107 0108 	add.w	r1, r7, #8
 8006174:	4610      	mov	r0, r2
 8006176:	4798      	blx	r3
 8006178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800617a:	e077      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa98 	bl	80066b4 <USBD_CtlError>
            err++;
 8006184:	7afb      	ldrb	r3, [r7, #11]
 8006186:	3301      	adds	r3, #1
 8006188:	72fb      	strb	r3, [r7, #11]
          break;
 800618a:	e06f      	b.n	800626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d00b      	beq.n	80061b0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	7c12      	ldrb	r2, [r2, #16]
 80061a4:	f107 0108 	add.w	r1, r7, #8
 80061a8:	4610      	mov	r0, r2
 80061aa:	4798      	blx	r3
 80061ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061ae:	e05d      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa7e 	bl	80066b4 <USBD_CtlError>
            err++;
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	3301      	adds	r3, #1
 80061bc:	72fb      	strb	r3, [r7, #11]
          break;
 80061be:	e055      	b.n	800626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d2:	691b      	ldr	r3, [r3, #16]
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	7c12      	ldrb	r2, [r2, #16]
 80061d8:	f107 0108 	add.w	r1, r7, #8
 80061dc:	4610      	mov	r0, r2
 80061de:	4798      	blx	r3
 80061e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061e2:	e043      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061e4:	6839      	ldr	r1, [r7, #0]
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 fa64 	bl	80066b4 <USBD_CtlError>
            err++;
 80061ec:	7afb      	ldrb	r3, [r7, #11]
 80061ee:	3301      	adds	r3, #1
 80061f0:	72fb      	strb	r3, [r7, #11]
          break;
 80061f2:	e03b      	b.n	800626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00b      	beq.n	8006218 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006206:	695b      	ldr	r3, [r3, #20]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	7c12      	ldrb	r2, [r2, #16]
 800620c:	f107 0108 	add.w	r1, r7, #8
 8006210:	4610      	mov	r0, r2
 8006212:	4798      	blx	r3
 8006214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006216:	e029      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 fa4a 	bl	80066b4 <USBD_CtlError>
            err++;
 8006220:	7afb      	ldrb	r3, [r7, #11]
 8006222:	3301      	adds	r3, #1
 8006224:	72fb      	strb	r3, [r7, #11]
          break;
 8006226:	e021      	b.n	800626c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00b      	beq.n	800624c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800623a:	699b      	ldr	r3, [r3, #24]
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	7c12      	ldrb	r2, [r2, #16]
 8006240:	f107 0108 	add.w	r1, r7, #8
 8006244:	4610      	mov	r0, r2
 8006246:	4798      	blx	r3
 8006248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800624a:	e00f      	b.n	800626c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 fa30 	bl	80066b4 <USBD_CtlError>
            err++;
 8006254:	7afb      	ldrb	r3, [r7, #11]
 8006256:	3301      	adds	r3, #1
 8006258:	72fb      	strb	r3, [r7, #11]
          break;
 800625a:	e007      	b.n	800626c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fa28 	bl	80066b4 <USBD_CtlError>
          err++;
 8006264:	7afb      	ldrb	r3, [r7, #11]
 8006266:	3301      	adds	r3, #1
 8006268:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800626a:	bf00      	nop
      }
      break;
 800626c:	e037      	b.n	80062de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	7c1b      	ldrb	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d109      	bne.n	800628a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800627c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800627e:	f107 0208 	add.w	r2, r7, #8
 8006282:	4610      	mov	r0, r2
 8006284:	4798      	blx	r3
 8006286:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006288:	e029      	b.n	80062de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fa11 	bl	80066b4 <USBD_CtlError>
        err++;
 8006292:	7afb      	ldrb	r3, [r7, #11]
 8006294:	3301      	adds	r3, #1
 8006296:	72fb      	strb	r3, [r7, #11]
      break;
 8006298:	e021      	b.n	80062de <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	7c1b      	ldrb	r3, [r3, #16]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10d      	bne.n	80062be <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062aa:	f107 0208 	add.w	r2, r7, #8
 80062ae:	4610      	mov	r0, r2
 80062b0:	4798      	blx	r3
 80062b2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	3301      	adds	r3, #1
 80062b8:	2207      	movs	r2, #7
 80062ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80062bc:	e00f      	b.n	80062de <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80062be:	6839      	ldr	r1, [r7, #0]
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f000 f9f7 	bl	80066b4 <USBD_CtlError>
        err++;
 80062c6:	7afb      	ldrb	r3, [r7, #11]
 80062c8:	3301      	adds	r3, #1
 80062ca:	72fb      	strb	r3, [r7, #11]
      break;
 80062cc:	e007      	b.n	80062de <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80062ce:	6839      	ldr	r1, [r7, #0]
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f9ef 	bl	80066b4 <USBD_CtlError>
      err++;
 80062d6:	7afb      	ldrb	r3, [r7, #11]
 80062d8:	3301      	adds	r3, #1
 80062da:	72fb      	strb	r3, [r7, #11]
      break;
 80062dc:	bf00      	nop
  }

  if (err != 0U)
 80062de:	7afb      	ldrb	r3, [r7, #11]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11e      	bne.n	8006322 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	88db      	ldrh	r3, [r3, #6]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d016      	beq.n	800631a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80062ec:	893b      	ldrh	r3, [r7, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00e      	beq.n	8006310 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88da      	ldrh	r2, [r3, #6]
 80062f6:	893b      	ldrh	r3, [r7, #8]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	bf28      	it	cs
 80062fc:	4613      	movcs	r3, r2
 80062fe:	b29b      	uxth	r3, r3
 8006300:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006302:	893b      	ldrh	r3, [r7, #8]
 8006304:	461a      	mov	r2, r3
 8006306:	68f9      	ldr	r1, [r7, #12]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fa44 	bl	8006796 <USBD_CtlSendData>
 800630e:	e009      	b.n	8006324 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006310:	6839      	ldr	r1, [r7, #0]
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f000 f9ce 	bl	80066b4 <USBD_CtlError>
 8006318:	e004      	b.n	8006324 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fa95 	bl	800684a <USBD_CtlSendStatus>
 8006320:	e000      	b.n	8006324 <USBD_GetDescriptor+0x2cc>
    return;
 8006322:	bf00      	nop
  }
}
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop

0800632c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	889b      	ldrh	r3, [r3, #4]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d131      	bne.n	80063a2 <USBD_SetAddress+0x76>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	88db      	ldrh	r3, [r3, #6]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d12d      	bne.n	80063a2 <USBD_SetAddress+0x76>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	885b      	ldrh	r3, [r3, #2]
 800634a:	2b7f      	cmp	r3, #127	; 0x7f
 800634c:	d829      	bhi.n	80063a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	885b      	ldrh	r3, [r3, #2]
 8006352:	b2db      	uxtb	r3, r3
 8006354:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006358:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b03      	cmp	r3, #3
 8006364:	d104      	bne.n	8006370 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006366:	6839      	ldr	r1, [r7, #0]
 8006368:	6878      	ldr	r0, [r7, #4]
 800636a:	f000 f9a3 	bl	80066b4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800636e:	e01d      	b.n	80063ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7bfa      	ldrb	r2, [r7, #15]
 8006374:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006378:	7bfb      	ldrb	r3, [r7, #15]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f003 fac0 	bl	8009902 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f000 fa61 	bl	800684a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006388:	7bfb      	ldrb	r3, [r7, #15]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d004      	beq.n	8006398 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2202      	movs	r2, #2
 8006392:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006396:	e009      	b.n	80063ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063a0:	e004      	b.n	80063ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f985 	bl	80066b4 <USBD_CtlError>
  }
}
 80063aa:	bf00      	nop
 80063ac:	bf00      	nop
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	4b4c      	ldr	r3, [pc, #304]	; (80064fc <USBD_SetConfig+0x148>)
 80063ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063cc:	4b4b      	ldr	r3, [pc, #300]	; (80064fc <USBD_SetConfig+0x148>)
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d905      	bls.n	80063e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f96c 	bl	80066b4 <USBD_CtlError>
    return USBD_FAIL;
 80063dc:	2303      	movs	r3, #3
 80063de:	e088      	b.n	80064f2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d002      	beq.n	80063f2 <USBD_SetConfig+0x3e>
 80063ec:	2b03      	cmp	r3, #3
 80063ee:	d025      	beq.n	800643c <USBD_SetConfig+0x88>
 80063f0:	e071      	b.n	80064d6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80063f2:	4b42      	ldr	r3, [pc, #264]	; (80064fc <USBD_SetConfig+0x148>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d01c      	beq.n	8006434 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80063fa:	4b40      	ldr	r3, [pc, #256]	; (80064fc <USBD_SetConfig+0x148>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006404:	4b3d      	ldr	r3, [pc, #244]	; (80064fc <USBD_SetConfig+0x148>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff f948 	bl	80056a0 <USBD_SetClassConfig>
 8006410:	4603      	mov	r3, r0
 8006412:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006414:	7bfb      	ldrb	r3, [r7, #15]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d004      	beq.n	8006424 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800641a:	6839      	ldr	r1, [r7, #0]
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f000 f949 	bl	80066b4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006422:	e065      	b.n	80064f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fa10 	bl	800684a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2203      	movs	r2, #3
 800642e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006432:	e05d      	b.n	80064f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 fa08 	bl	800684a <USBD_CtlSendStatus>
      break;
 800643a:	e059      	b.n	80064f0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800643c:	4b2f      	ldr	r3, [pc, #188]	; (80064fc <USBD_SetConfig+0x148>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d112      	bne.n	800646a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800644c:	4b2b      	ldr	r3, [pc, #172]	; (80064fc <USBD_SetConfig+0x148>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	461a      	mov	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006456:	4b29      	ldr	r3, [pc, #164]	; (80064fc <USBD_SetConfig+0x148>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff f93b 	bl	80056d8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f9f1 	bl	800684a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006468:	e042      	b.n	80064f0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800646a:	4b24      	ldr	r3, [pc, #144]	; (80064fc <USBD_SetConfig+0x148>)
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	461a      	mov	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d02a      	beq.n	80064ce <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	b2db      	uxtb	r3, r3
 800647e:	4619      	mov	r1, r3
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f7ff f929 	bl	80056d8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006486:	4b1d      	ldr	r3, [pc, #116]	; (80064fc <USBD_SetConfig+0x148>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	461a      	mov	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006490:	4b1a      	ldr	r3, [pc, #104]	; (80064fc <USBD_SetConfig+0x148>)
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	4619      	mov	r1, r3
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f7ff f902 	bl	80056a0 <USBD_SetClassConfig>
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00f      	beq.n	80064c6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80064a6:	6839      	ldr	r1, [r7, #0]
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f000 f903 	bl	80066b4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f7ff f90e 	bl	80056d8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2202      	movs	r2, #2
 80064c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064c4:	e014      	b.n	80064f0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f9bf 	bl	800684a <USBD_CtlSendStatus>
      break;
 80064cc:	e010      	b.n	80064f0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f9bb 	bl	800684a <USBD_CtlSendStatus>
      break;
 80064d4:	e00c      	b.n	80064f0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80064d6:	6839      	ldr	r1, [r7, #0]
 80064d8:	6878      	ldr	r0, [r7, #4]
 80064da:	f000 f8eb 	bl	80066b4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064de:	4b07      	ldr	r3, [pc, #28]	; (80064fc <USBD_SetConfig+0x148>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	4619      	mov	r1, r3
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f7ff f8f7 	bl	80056d8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80064ea:	2303      	movs	r3, #3
 80064ec:	73fb      	strb	r3, [r7, #15]
      break;
 80064ee:	bf00      	nop
  }

  return ret;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	20006a29 	.word	0x20006a29

08006500 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	88db      	ldrh	r3, [r3, #6]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d004      	beq.n	800651c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006512:	6839      	ldr	r1, [r7, #0]
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f000 f8cd 	bl	80066b4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800651a:	e023      	b.n	8006564 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	dc02      	bgt.n	800652e <USBD_GetConfig+0x2e>
 8006528:	2b00      	cmp	r3, #0
 800652a:	dc03      	bgt.n	8006534 <USBD_GetConfig+0x34>
 800652c:	e015      	b.n	800655a <USBD_GetConfig+0x5a>
 800652e:	2b03      	cmp	r3, #3
 8006530:	d00b      	beq.n	800654a <USBD_GetConfig+0x4a>
 8006532:	e012      	b.n	800655a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	3308      	adds	r3, #8
 800653e:	2201      	movs	r2, #1
 8006540:	4619      	mov	r1, r3
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f927 	bl	8006796 <USBD_CtlSendData>
        break;
 8006548:	e00c      	b.n	8006564 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3304      	adds	r3, #4
 800654e:	2201      	movs	r2, #1
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f000 f91f 	bl	8006796 <USBD_CtlSendData>
        break;
 8006558:	e004      	b.n	8006564 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8a9 	bl	80066b4 <USBD_CtlError>
        break;
 8006562:	bf00      	nop
}
 8006564:	bf00      	nop
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800657c:	b2db      	uxtb	r3, r3
 800657e:	3b01      	subs	r3, #1
 8006580:	2b02      	cmp	r3, #2
 8006582:	d81e      	bhi.n	80065c2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	88db      	ldrh	r3, [r3, #6]
 8006588:	2b02      	cmp	r3, #2
 800658a:	d004      	beq.n	8006596 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800658c:	6839      	ldr	r1, [r7, #0]
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f890 	bl	80066b4 <USBD_CtlError>
        break;
 8006594:	e01a      	b.n	80065cc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f043 0202 	orr.w	r2, r3, #2
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	330c      	adds	r3, #12
 80065b6:	2202      	movs	r2, #2
 80065b8:	4619      	mov	r1, r3
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 f8eb 	bl	8006796 <USBD_CtlSendData>
      break;
 80065c0:	e004      	b.n	80065cc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80065c2:	6839      	ldr	r1, [r7, #0]
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 f875 	bl	80066b4 <USBD_CtlError>
      break;
 80065ca:	bf00      	nop
  }
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	885b      	ldrh	r3, [r3, #2]
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d106      	bne.n	80065f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f92b 	bl	800684a <USBD_CtlSendStatus>
  }
}
 80065f4:	bf00      	nop
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800660c:	b2db      	uxtb	r3, r3
 800660e:	3b01      	subs	r3, #1
 8006610:	2b02      	cmp	r3, #2
 8006612:	d80b      	bhi.n	800662c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	885b      	ldrh	r3, [r3, #2]
 8006618:	2b01      	cmp	r3, #1
 800661a:	d10c      	bne.n	8006636 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f910 	bl	800684a <USBD_CtlSendStatus>
      }
      break;
 800662a:	e004      	b.n	8006636 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800662c:	6839      	ldr	r1, [r7, #0]
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 f840 	bl	80066b4 <USBD_CtlError>
      break;
 8006634:	e000      	b.n	8006638 <USBD_ClrFeature+0x3c>
      break;
 8006636:	bf00      	nop
  }
}
 8006638:	bf00      	nop
 800663a:	3708      	adds	r7, #8
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}

08006640 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
 8006648:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	781a      	ldrb	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3301      	adds	r3, #1
 800665a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	781a      	ldrb	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	3301      	adds	r3, #1
 8006668:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fabb 	bl	8005be6 <SWAPBYTE>
 8006670:	4603      	mov	r3, r0
 8006672:	461a      	mov	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	3301      	adds	r3, #1
 800667c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	3301      	adds	r3, #1
 8006682:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7ff faae 	bl	8005be6 <SWAPBYTE>
 800668a:	4603      	mov	r3, r0
 800668c:	461a      	mov	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800669e:	68f8      	ldr	r0, [r7, #12]
 80066a0:	f7ff faa1 	bl	8005be6 <SWAPBYTE>
 80066a4:	4603      	mov	r3, r0
 80066a6:	461a      	mov	r2, r3
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	80da      	strh	r2, [r3, #6]
}
 80066ac:	bf00      	nop
 80066ae:	3710      	adds	r7, #16
 80066b0:	46bd      	mov	sp, r7
 80066b2:	bd80      	pop	{r7, pc}

080066b4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80066be:	2180      	movs	r1, #128	; 0x80
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f003 f8b4 	bl	800982e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f003 f8b0 	bl	800982e <USBD_LL_StallEP>
}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	60f8      	str	r0, [r7, #12]
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d036      	beq.n	800675a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066f0:	6938      	ldr	r0, [r7, #16]
 80066f2:	f000 f836 	bl	8006762 <USBD_GetLen>
 80066f6:	4603      	mov	r3, r0
 80066f8:	3301      	adds	r3, #1
 80066fa:	b29b      	uxth	r3, r3
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	b29a      	uxth	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	687a      	ldr	r2, [r7, #4]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006710:	7dfb      	ldrb	r3, [r7, #23]
 8006712:	3301      	adds	r3, #1
 8006714:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	4413      	add	r3, r2
 800671c:	2203      	movs	r2, #3
 800671e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006720:	7dfb      	ldrb	r3, [r7, #23]
 8006722:	3301      	adds	r3, #1
 8006724:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006726:	e013      	b.n	8006750 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006728:	7dfb      	ldrb	r3, [r7, #23]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	4413      	add	r3, r2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	7812      	ldrb	r2, [r2, #0]
 8006732:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	3301      	adds	r3, #1
 8006738:	613b      	str	r3, [r7, #16]
    idx++;
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	3301      	adds	r3, #1
 800673e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	4413      	add	r3, r2
 8006746:	2200      	movs	r2, #0
 8006748:	701a      	strb	r2, [r3, #0]
    idx++;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	3301      	adds	r3, #1
 800674e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e7      	bne.n	8006728 <USBD_GetString+0x52>
 8006758:	e000      	b.n	800675c <USBD_GetString+0x86>
    return;
 800675a:	bf00      	nop
  }
}
 800675c:	3718      	adds	r7, #24
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006772:	e005      	b.n	8006780 <USBD_GetLen+0x1e>
  {
    len++;
 8006774:	7bfb      	ldrb	r3, [r7, #15]
 8006776:	3301      	adds	r3, #1
 8006778:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3301      	adds	r3, #1
 800677e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006780:	68bb      	ldr	r3, [r7, #8]
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1f5      	bne.n	8006774 <USBD_GetLen+0x12>
  }

  return len;
 8006788:	7bfb      	ldrb	r3, [r7, #15]
}
 800678a:	4618      	mov	r0, r3
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr

08006796 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2202      	movs	r2, #2
 80067a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	68ba      	ldr	r2, [r7, #8]
 80067ba:	2100      	movs	r1, #0
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f003 f8bf 	bl	8009940 <USBD_LL_Transmit>

  return USBD_OK;
 80067c2:	2300      	movs	r3, #0
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3710      	adds	r7, #16
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}

080067cc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	60f8      	str	r0, [r7, #12]
 80067d4:	60b9      	str	r1, [r7, #8]
 80067d6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	2100      	movs	r1, #0
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f003 f8ae 	bl	8009940 <USBD_LL_Transmit>

  return USBD_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}

080067ee <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80067ee:	b580      	push	{r7, lr}
 80067f0:	b084      	sub	sp, #16
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	60f8      	str	r0, [r7, #12]
 80067f6:	60b9      	str	r1, [r7, #8]
 80067f8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2203      	movs	r2, #3
 80067fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	687a      	ldr	r2, [r7, #4]
 8006806:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	687a      	ldr	r2, [r7, #4]
 800680e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	68ba      	ldr	r2, [r7, #8]
 8006816:	2100      	movs	r1, #0
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f003 f8b2 	bl	8009982 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b084      	sub	sp, #16
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	2100      	movs	r1, #0
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f003 f8a1 	bl	8009982 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800684a:	b580      	push	{r7, lr}
 800684c:	b082      	sub	sp, #8
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2204      	movs	r2, #4
 8006856:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800685a:	2300      	movs	r3, #0
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f003 f86d 	bl	8009940 <USBD_LL_Transmit>

  return USBD_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2205      	movs	r2, #5
 800687c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006880:	2300      	movs	r3, #0
 8006882:	2200      	movs	r2, #0
 8006884:	2100      	movs	r1, #0
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f003 f87b 	bl	8009982 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3708      	adds	r7, #8
 8006892:	46bd      	mov	sp, r7
 8006894:	bd80      	pop	{r7, pc}

08006896 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006896:	b580      	push	{r7, lr}
 8006898:	b084      	sub	sp, #16
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80068a2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80068a6:	f003 f8a1 	bl	80099ec <USBD_static_malloc>
 80068aa:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d105      	bne.n	80068be <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80068ba:	2302      	movs	r3, #2
 80068bc:	e066      	b.n	800698c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	68fa      	ldr	r2, [r7, #12]
 80068c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	7c1b      	ldrb	r3, [r3, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d119      	bne.n	8006902 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80068ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068d2:	2202      	movs	r2, #2
 80068d4:	2181      	movs	r1, #129	; 0x81
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f002 ff45 	bl	8009766 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80068e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e6:	2202      	movs	r2, #2
 80068e8:	2101      	movs	r1, #1
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f002 ff3b 	bl	8009766 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2210      	movs	r2, #16
 80068fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006900:	e016      	b.n	8006930 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006902:	2340      	movs	r3, #64	; 0x40
 8006904:	2202      	movs	r2, #2
 8006906:	2181      	movs	r1, #129	; 0x81
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f002 ff2c 	bl	8009766 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006914:	2340      	movs	r3, #64	; 0x40
 8006916:	2202      	movs	r2, #2
 8006918:	2101      	movs	r1, #1
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f002 ff23 	bl	8009766 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2201      	movs	r2, #1
 8006924:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2210      	movs	r2, #16
 800692c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006930:	2308      	movs	r3, #8
 8006932:	2203      	movs	r2, #3
 8006934:	2182      	movs	r1, #130	; 0x82
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f002 ff15 	bl	8009766 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	7c1b      	ldrb	r3, [r3, #16]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d109      	bne.n	800697a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800696c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006970:	2101      	movs	r1, #1
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f003 f805 	bl	8009982 <USBD_LL_PrepareReceive>
 8006978:	e007      	b.n	800698a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006980:	2340      	movs	r3, #64	; 0x40
 8006982:	2101      	movs	r1, #1
 8006984:	6878      	ldr	r0, [r7, #4]
 8006986:	f002 fffc 	bl	8009982 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3710      	adds	r7, #16
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	460b      	mov	r3, r1
 800699e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80069a0:	2181      	movs	r1, #129	; 0x81
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f002 ff05 	bl	80097b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80069ae:	2101      	movs	r1, #1
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f002 fefe 	bl	80097b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80069be:	2182      	movs	r1, #130	; 0x82
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f002 fef6 	bl	80097b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069f0:	4618      	mov	r0, r3
 80069f2:	f003 f809 	bl	8009a08 <USBD_static_free>
    pdev->pClassData = NULL;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a18:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d101      	bne.n	8006a30 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0af      	b.n	8006b90 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d03f      	beq.n	8006abc <USBD_CDC_Setup+0xb4>
 8006a3c:	2b20      	cmp	r3, #32
 8006a3e:	f040 809f 	bne.w	8006b80 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d02e      	beq.n	8006aa8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	b25b      	sxtb	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da16      	bge.n	8006a82 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006a60:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a62:	683a      	ldr	r2, [r7, #0]
 8006a64:	88d2      	ldrh	r2, [r2, #6]
 8006a66:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	88db      	ldrh	r3, [r3, #6]
 8006a6c:	2b07      	cmp	r3, #7
 8006a6e:	bf28      	it	cs
 8006a70:	2307      	movcs	r3, #7
 8006a72:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	89fa      	ldrh	r2, [r7, #14]
 8006a78:	4619      	mov	r1, r3
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f7ff fe8b 	bl	8006796 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006a80:	e085      	b.n	8006b8e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	785a      	ldrb	r2, [r3, #1]
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	88db      	ldrh	r3, [r3, #6]
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006a98:	6939      	ldr	r1, [r7, #16]
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	88db      	ldrh	r3, [r3, #6]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f7ff fea4 	bl	80067ee <USBD_CtlPrepareRx>
      break;
 8006aa6:	e072      	b.n	8006b8e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	7850      	ldrb	r0, [r2, #1]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	4798      	blx	r3
      break;
 8006aba:	e068      	b.n	8006b8e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	785b      	ldrb	r3, [r3, #1]
 8006ac0:	2b0b      	cmp	r3, #11
 8006ac2:	d852      	bhi.n	8006b6a <USBD_CDC_Setup+0x162>
 8006ac4:	a201      	add	r2, pc, #4	; (adr r2, 8006acc <USBD_CDC_Setup+0xc4>)
 8006ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aca:	bf00      	nop
 8006acc:	08006afd 	.word	0x08006afd
 8006ad0:	08006b79 	.word	0x08006b79
 8006ad4:	08006b6b 	.word	0x08006b6b
 8006ad8:	08006b6b 	.word	0x08006b6b
 8006adc:	08006b6b 	.word	0x08006b6b
 8006ae0:	08006b6b 	.word	0x08006b6b
 8006ae4:	08006b6b 	.word	0x08006b6b
 8006ae8:	08006b6b 	.word	0x08006b6b
 8006aec:	08006b6b 	.word	0x08006b6b
 8006af0:	08006b6b 	.word	0x08006b6b
 8006af4:	08006b27 	.word	0x08006b27
 8006af8:	08006b51 	.word	0x08006b51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b03      	cmp	r3, #3
 8006b06:	d107      	bne.n	8006b18 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006b08:	f107 030a 	add.w	r3, r7, #10
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	4619      	mov	r1, r3
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7ff fe40 	bl	8006796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b16:	e032      	b.n	8006b7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff fdca 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b20:	2303      	movs	r3, #3
 8006b22:	75fb      	strb	r3, [r7, #23]
          break;
 8006b24:	e02b      	b.n	8006b7e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d107      	bne.n	8006b42 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006b32:	f107 030d 	add.w	r3, r7, #13
 8006b36:	2201      	movs	r2, #1
 8006b38:	4619      	mov	r1, r3
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff fe2b 	bl	8006796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b40:	e01d      	b.n	8006b7e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff fdb5 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4e:	e016      	b.n	8006b7e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b03      	cmp	r3, #3
 8006b5a:	d00f      	beq.n	8006b7c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8006b5c:	6839      	ldr	r1, [r7, #0]
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f7ff fda8 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006b64:	2303      	movs	r3, #3
 8006b66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006b68:	e008      	b.n	8006b7c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b6a:	6839      	ldr	r1, [r7, #0]
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fda1 	bl	80066b4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006b72:	2303      	movs	r3, #3
 8006b74:	75fb      	strb	r3, [r7, #23]
          break;
 8006b76:	e002      	b.n	8006b7e <USBD_CDC_Setup+0x176>
          break;
 8006b78:	bf00      	nop
 8006b7a:	e008      	b.n	8006b8e <USBD_CDC_Setup+0x186>
          break;
 8006b7c:	bf00      	nop
      }
      break;
 8006b7e:	e006      	b.n	8006b8e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006b80:	6839      	ldr	r1, [r7, #0]
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7ff fd96 	bl	80066b4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b8c:	bf00      	nop
  }

  return (uint8_t)ret;
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006baa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e04f      	b.n	8006c5a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bc0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006bc2:	78fa      	ldrb	r2, [r7, #3]
 8006bc4:	6879      	ldr	r1, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	440b      	add	r3, r1
 8006bd0:	3318      	adds	r3, #24
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d029      	beq.n	8006c2c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	3318      	adds	r3, #24
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	78f9      	ldrb	r1, [r7, #3]
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	460b      	mov	r3, r1
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	1a5b      	subs	r3, r3, r1
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4403      	add	r3, r0
 8006bf8:	3344      	adds	r3, #68	; 0x44
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	fbb2 f1f3 	udiv	r1, r2, r3
 8006c00:	fb03 f301 	mul.w	r3, r3, r1
 8006c04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d110      	bne.n	8006c2c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8006c0a:	78fa      	ldrb	r2, [r7, #3]
 8006c0c:	6879      	ldr	r1, [r7, #4]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	009b      	lsls	r3, r3, #2
 8006c12:	4413      	add	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	440b      	add	r3, r1
 8006c18:	3318      	adds	r3, #24
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006c1e:	78f9      	ldrb	r1, [r7, #3]
 8006c20:	2300      	movs	r3, #0
 8006c22:	2200      	movs	r2, #0
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f002 fe8b 	bl	8009940 <USBD_LL_Transmit>
 8006c2a:	e015      	b.n	8006c58 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c3a:	691b      	ldr	r3, [r3, #16]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00b      	beq.n	8006c58 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c46:	691b      	ldr	r3, [r3, #16]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006c54:	78fa      	ldrb	r2, [r7, #3]
 8006c56:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3710      	adds	r7, #16
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}

08006c62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b084      	sub	sp, #16
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c74:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e015      	b.n	8006cb0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006c84:	78fb      	ldrb	r3, [r7, #3]
 8006c86:	4619      	mov	r1, r3
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f002 fe9b 	bl	80099c4 <USBD_LL_GetRxDataSize>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ca4:	68fa      	ldr	r2, [r7, #12]
 8006ca6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006caa:	4611      	mov	r1, r2
 8006cac:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006cc6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d101      	bne.n	8006cd2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e01b      	b.n	8006d0a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d015      	beq.n	8006d08 <USBD_CDC_EP0_RxReady+0x50>
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006ce2:	2bff      	cmp	r3, #255	; 0xff
 8006ce4:	d010      	beq.n	8006d08 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006cf4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006cf6:	68fa      	ldr	r2, [r7, #12]
 8006cf8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006cfc:	b292      	uxth	r2, r2
 8006cfe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	22ff      	movs	r2, #255	; 0xff
 8006d04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2243      	movs	r2, #67	; 0x43
 8006d20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006d22:	4b03      	ldr	r3, [pc, #12]	; (8006d30 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006d24:	4618      	mov	r0, r3
 8006d26:	370c      	adds	r7, #12
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2e:	4770      	bx	lr
 8006d30:	2000011c 	.word	0x2000011c

08006d34 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2243      	movs	r2, #67	; 0x43
 8006d40:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006d42:	4b03      	ldr	r3, [pc, #12]	; (8006d50 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	370c      	adds	r7, #12
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr
 8006d50:	200000d8 	.word	0x200000d8

08006d54 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b083      	sub	sp, #12
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2243      	movs	r2, #67	; 0x43
 8006d60:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006d62:	4b03      	ldr	r3, [pc, #12]	; (8006d70 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr
 8006d70:	20000160 	.word	0x20000160

08006d74 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	220a      	movs	r2, #10
 8006d80:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006d82:	4b03      	ldr	r3, [pc, #12]	; (8006d90 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	370c      	adds	r7, #12
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8e:	4770      	bx	lr
 8006d90:	20000094 	.word	0x20000094

08006d94 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006d94:	b480      	push	{r7}
 8006d96:	b083      	sub	sp, #12
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d101      	bne.n	8006da8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006da4:	2303      	movs	r3, #3
 8006da6:	e004      	b.n	8006db2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	683a      	ldr	r2, [r7, #0]
 8006dac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b087      	sub	sp, #28
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dd0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006dd8:	2303      	movs	r3, #3
 8006dda:	e008      	b.n	8006dee <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006dec:	2300      	movs	r3, #0
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e0a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d101      	bne.n	8006e16 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006e12:	2303      	movs	r3, #3
 8006e14:	e004      	b.n	8006e20 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3714      	adds	r7, #20
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006e2c:	b580      	push	{r7, lr}
 8006e2e:	b084      	sub	sp, #16
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e3a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d101      	bne.n	8006e4e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e4a:	2303      	movs	r3, #3
 8006e4c:	e01a      	b.n	8006e84 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d114      	bne.n	8006e82 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006e76:	2181      	movs	r1, #129	; 0x81
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f002 fd61 	bl	8009940 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	3710      	adds	r7, #16
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}

08006e8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e9a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d101      	bne.n	8006eaa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	e016      	b.n	8006ed8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	7c1b      	ldrb	r3, [r3, #16]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d109      	bne.n	8006ec6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ebc:	2101      	movs	r1, #1
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f002 fd5f 	bl	8009982 <USBD_LL_PrepareReceive>
 8006ec4:	e007      	b.n	8006ed6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ecc:	2340      	movs	r3, #64	; 0x40
 8006ece:	2101      	movs	r1, #1
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f002 fd56 	bl	8009982 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ed6:	2300      	movs	r3, #0
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}

08006ee0 <cdcAvailable>:
uint8_t  rx_buf[512];
bool     rx_full = false;


uint32_t cdcAvailable(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	; (8006f10 <cdcAvailable+0x30>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <cdcAvailable+0x34>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	1ad3      	subs	r3, r2, r3
 8006ef0:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <cdcAvailable+0x38>)
 8006ef2:	6812      	ldr	r2, [r2, #0]
 8006ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ef8:	fb02 f201 	mul.w	r2, r2, r1
 8006efc:	1a9b      	subs	r3, r3, r2
 8006efe:	607b      	str	r3, [r7, #4]

  return ret;
 8006f00:	687b      	ldr	r3, [r7, #4]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	20006a2c 	.word	0x20006a2c
 8006f14:	20006a30 	.word	0x20006a30
 8006f18:	200001ac 	.word	0x200001ac

08006f1c <cdcRead>:

uint8_t cdcRead(void)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
  uint8_t ret;

  ret = rx_buf[rx_out];
 8006f22:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <cdcRead+0x44>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a0f      	ldr	r2, [pc, #60]	; (8006f64 <cdcRead+0x48>)
 8006f28:	5cd3      	ldrb	r3, [r2, r3]
 8006f2a:	71fb      	strb	r3, [r7, #7]

  if (rx_out != rx_in)
 8006f2c:	4b0c      	ldr	r3, [pc, #48]	; (8006f60 <cdcRead+0x44>)
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	4b0d      	ldr	r3, [pc, #52]	; (8006f68 <cdcRead+0x4c>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d00b      	beq.n	8006f50 <cdcRead+0x34>
  {
    rx_out = (rx_out + 1) % rx_len;
 8006f38:	4b09      	ldr	r3, [pc, #36]	; (8006f60 <cdcRead+0x44>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	3301      	adds	r3, #1
 8006f3e:	4a0b      	ldr	r2, [pc, #44]	; (8006f6c <cdcRead+0x50>)
 8006f40:	6812      	ldr	r2, [r2, #0]
 8006f42:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f46:	fb02 f201 	mul.w	r2, r2, r1
 8006f4a:	1a9b      	subs	r3, r3, r2
 8006f4c:	4a04      	ldr	r2, [pc, #16]	; (8006f60 <cdcRead+0x44>)
 8006f4e:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006f50:	79fb      	ldrb	r3, [r7, #7]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr
 8006f5e:	bf00      	nop
 8006f60:	20006a30 	.word	0x20006a30
 8006f64:	20007ff4 	.word	0x20007ff4
 8006f68:	20006a2c 	.word	0x20006a2c
 8006f6c:	200001ac 	.word	0x200001ac

08006f70 <cdcDataIn>:

void cdcDataIn(uint8_t rx_data)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b085      	sub	sp, #20
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8006f7a:	4b0f      	ldr	r3, [pc, #60]	; (8006fb8 <cdcDataIn+0x48>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	490f      	ldr	r1, [pc, #60]	; (8006fbc <cdcDataIn+0x4c>)
 8006f80:	79fa      	ldrb	r2, [r7, #7]
 8006f82:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8006f84:	4b0c      	ldr	r3, [pc, #48]	; (8006fb8 <cdcDataIn+0x48>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <cdcDataIn+0x50>)
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006f92:	fb02 f201 	mul.w	r2, r2, r1
 8006f96:	1a9b      	subs	r3, r3, r2
 8006f98:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8006f9a:	4b0a      	ldr	r3, [pc, #40]	; (8006fc4 <cdcDataIn+0x54>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68fa      	ldr	r2, [r7, #12]
 8006fa0:	429a      	cmp	r2, r3
 8006fa2:	d002      	beq.n	8006faa <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8006fa4:	4a04      	ldr	r2, [pc, #16]	; (8006fb8 <cdcDataIn+0x48>)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	6013      	str	r3, [r2, #0]
  }
}
 8006faa:	bf00      	nop
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	20006a2c 	.word	0x20006a2c
 8006fbc:	20007ff4 	.word	0x20007ff4
 8006fc0:	200001ac 	.word	0x200001ac
 8006fc4:	20006a30 	.word	0x20006a30

08006fc8 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b084      	sub	sp, #16
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t pre_time;
  uint8_t ret;

  if(cdcIsInit() != true)
 8006fd2:	f7fa fb35 	bl	8001640 <cdcIsInit>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	f083 0301 	eor.w	r3, r3, #1
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d001      	beq.n	8006fe6 <cdcWrite+0x1e>
  {
	  return 0;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	e01e      	b.n	8007024 <cdcWrite+0x5c>
  }
  pre_time = millis();
 8006fe6:	f7fa f838 	bl	800105a <millis>
 8006fea:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	b29b      	uxth	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 f928 	bl	8007248 <CDC_Transmit_FS>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 8006ffc:	7afb      	ldrb	r3, [r7, #11]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d101      	bne.n	8007006 <cdcWrite+0x3e>
    {
      return length;
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	e00e      	b.n	8007024 <cdcWrite+0x5c>
    }
    else if (ret == USBD_FAIL)
 8007006:	7afb      	ldrb	r3, [r7, #11]
 8007008:	2b03      	cmp	r3, #3
 800700a:	d101      	bne.n	8007010 <cdcWrite+0x48>
    {
      return 0;
 800700c:	2300      	movs	r3, #0
 800700e:	e009      	b.n	8007024 <cdcWrite+0x5c>
    }

    if (millis()-pre_time >= 100)
 8007010:	f7fa f823 	bl	800105a <millis>
 8007014:	4602      	mov	r2, r0
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	1ad3      	subs	r3, r2, r3
 800701a:	2b63      	cmp	r3, #99	; 0x63
 800701c:	d800      	bhi.n	8007020 <cdcWrite+0x58>
    ret = CDC_Transmit_FS(p_data, length);
 800701e:	e7e5      	b.n	8006fec <cdcWrite+0x24>
    {
      break;
 8007020:	bf00      	nop
    }
  }

  return 0;
 8007022:	2300      	movs	r3, #0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3710      	adds	r7, #16
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007030:	2200      	movs	r2, #0
 8007032:	4905      	ldr	r1, [pc, #20]	; (8007048 <CDC_Init_FS+0x1c>)
 8007034:	4805      	ldr	r0, [pc, #20]	; (800704c <CDC_Init_FS+0x20>)
 8007036:	f7ff fec2 	bl	8006dbe <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800703a:	4905      	ldr	r1, [pc, #20]	; (8007050 <CDC_Init_FS+0x24>)
 800703c:	4803      	ldr	r0, [pc, #12]	; (800704c <CDC_Init_FS+0x20>)
 800703e:	f7ff fedc 	bl	8006dfa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007042:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007044:	4618      	mov	r0, r3
 8007046:	bd80      	pop	{r7, pc}
 8007048:	20007bf4 	.word	0x20007bf4
 800704c:	20007524 	.word	0x20007524
 8007050:	200077f4 	.word	0x200077f4

08007054 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007058:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800705a:	4618      	mov	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007062:	4770      	bx	lr

08007064 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
 800706a:	4603      	mov	r3, r0
 800706c:	6039      	str	r1, [r7, #0]
 800706e:	71fb      	strb	r3, [r7, #7]
 8007070:	4613      	mov	r3, r2
 8007072:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007074:	79fb      	ldrb	r3, [r7, #7]
 8007076:	2b23      	cmp	r3, #35	; 0x23
 8007078:	f200 80a3 	bhi.w	80071c2 <CDC_Control_FS+0x15e>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <CDC_Control_FS+0x20>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080071c3 	.word	0x080071c3
 8007088:	080071c3 	.word	0x080071c3
 800708c:	080071c3 	.word	0x080071c3
 8007090:	080071c3 	.word	0x080071c3
 8007094:	080071c3 	.word	0x080071c3
 8007098:	080071c3 	.word	0x080071c3
 800709c:	080071c3 	.word	0x080071c3
 80070a0:	080071c3 	.word	0x080071c3
 80070a4:	080071c3 	.word	0x080071c3
 80070a8:	080071c3 	.word	0x080071c3
 80070ac:	080071c3 	.word	0x080071c3
 80070b0:	080071c3 	.word	0x080071c3
 80070b4:	080071c3 	.word	0x080071c3
 80070b8:	080071c3 	.word	0x080071c3
 80070bc:	080071c3 	.word	0x080071c3
 80070c0:	080071c3 	.word	0x080071c3
 80070c4:	080071c3 	.word	0x080071c3
 80070c8:	080071c3 	.word	0x080071c3
 80070cc:	080071c3 	.word	0x080071c3
 80070d0:	080071c3 	.word	0x080071c3
 80070d4:	080071c3 	.word	0x080071c3
 80070d8:	080071c3 	.word	0x080071c3
 80070dc:	080071c3 	.word	0x080071c3
 80070e0:	080071c3 	.word	0x080071c3
 80070e4:	080071c3 	.word	0x080071c3
 80070e8:	080071c3 	.word	0x080071c3
 80070ec:	080071c3 	.word	0x080071c3
 80070f0:	080071c3 	.word	0x080071c3
 80070f4:	080071c3 	.word	0x080071c3
 80070f8:	080071c3 	.word	0x080071c3
 80070fc:	080071c3 	.word	0x080071c3
 8007100:	080071c3 	.word	0x080071c3
 8007104:	08007115 	.word	0x08007115
 8007108:	0800716f 	.word	0x0800716f
 800710c:	080071c3 	.word	0x080071c3
 8007110:	080071c3 	.word	0x080071c3
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	461a      	mov	r2, r3
 800711a:	4b2e      	ldr	r3, [pc, #184]	; (80071d4 <CDC_Control_FS+0x170>)
 800711c:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 800711e:	4b2d      	ldr	r3, [pc, #180]	; (80071d4 <CDC_Control_FS+0x170>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	3201      	adds	r2, #1
 8007126:	7812      	ldrb	r2, [r2, #0]
 8007128:	0212      	lsls	r2, r2, #8
 800712a:	4313      	orrs	r3, r2
 800712c:	4a29      	ldr	r2, [pc, #164]	; (80071d4 <CDC_Control_FS+0x170>)
 800712e:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8007130:	4b28      	ldr	r3, [pc, #160]	; (80071d4 <CDC_Control_FS+0x170>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	3202      	adds	r2, #2
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	0412      	lsls	r2, r2, #16
 800713c:	4313      	orrs	r3, r2
 800713e:	4a25      	ldr	r2, [pc, #148]	; (80071d4 <CDC_Control_FS+0x170>)
 8007140:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8007142:	4b24      	ldr	r3, [pc, #144]	; (80071d4 <CDC_Control_FS+0x170>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	3203      	adds	r2, #3
 800714a:	7812      	ldrb	r2, [r2, #0]
 800714c:	0612      	lsls	r2, r2, #24
 800714e:	4313      	orrs	r3, r2
 8007150:	4a20      	ldr	r2, [pc, #128]	; (80071d4 <CDC_Control_FS+0x170>)
 8007152:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	791a      	ldrb	r2, [r3, #4]
 8007158:	4b1e      	ldr	r3, [pc, #120]	; (80071d4 <CDC_Control_FS+0x170>)
 800715a:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	795a      	ldrb	r2, [r3, #5]
 8007160:	4b1c      	ldr	r3, [pc, #112]	; (80071d4 <CDC_Control_FS+0x170>)
 8007162:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	799a      	ldrb	r2, [r3, #6]
 8007168:	4b1a      	ldr	r3, [pc, #104]	; (80071d4 <CDC_Control_FS+0x170>)
 800716a:	719a      	strb	r2, [r3, #6]
    break;
 800716c:	e02a      	b.n	80071c4 <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800716e:	4b19      	ldr	r3, [pc, #100]	; (80071d4 <CDC_Control_FS+0x170>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8007178:	4b16      	ldr	r3, [pc, #88]	; (80071d4 <CDC_Control_FS+0x170>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	0a1a      	lsrs	r2, r3, #8
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	3301      	adds	r3, #1
 8007182:	b2d2      	uxtb	r2, r2
 8007184:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8007186:	4b13      	ldr	r3, [pc, #76]	; (80071d4 <CDC_Control_FS+0x170>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	0c1a      	lsrs	r2, r3, #16
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	3302      	adds	r3, #2
 8007190:	b2d2      	uxtb	r2, r2
 8007192:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8007194:	4b0f      	ldr	r3, [pc, #60]	; (80071d4 <CDC_Control_FS+0x170>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	0e1a      	lsrs	r2, r3, #24
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	3303      	adds	r3, #3
 800719e:	b2d2      	uxtb	r2, r2
 80071a0:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4a0b      	ldr	r2, [pc, #44]	; (80071d4 <CDC_Control_FS+0x170>)
 80071a8:	7912      	ldrb	r2, [r2, #4]
 80071aa:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	3305      	adds	r3, #5
 80071b0:	4a08      	ldr	r2, [pc, #32]	; (80071d4 <CDC_Control_FS+0x170>)
 80071b2:	7952      	ldrb	r2, [r2, #5]
 80071b4:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	3306      	adds	r3, #6
 80071ba:	4a06      	ldr	r2, [pc, #24]	; (80071d4 <CDC_Control_FS+0x170>)
 80071bc:	7992      	ldrb	r2, [r2, #6]
 80071be:	701a      	strb	r2, [r3, #0]
    break;
 80071c0:	e000      	b.n	80071c4 <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80071c2:	bf00      	nop
  }

  return (USBD_OK);
 80071c4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	370c      	adds	r7, #12
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	200001a4 	.word	0x200001a4

080071d8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80071d8:	b590      	push	{r4, r7, lr}
 80071da:	b085      	sub	sp, #20
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
 80071e0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	for (int i=0; i<*Len; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	e009      	b.n	80071fc <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff febd 	bl	8006f70 <cdcDataIn>
	for (int i=0; i<*Len; i++)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	3301      	adds	r3, #1
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681a      	ldr	r2, [r3, #0]
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	429a      	cmp	r2, r3
 8007204:	d8f0      	bhi.n	80071e8 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  // ?��?�� 버퍼?��?�� 비어?��?�� ?��?��?�� ?��
  buf_len = (rx_len - cdcAvailable()) - 1;
 8007206:	4b0d      	ldr	r3, [pc, #52]	; (800723c <CDC_Receive_FS+0x64>)
 8007208:	681c      	ldr	r4, [r3, #0]
 800720a:	f7ff fe69 	bl	8006ee0 <cdcAvailable>
 800720e:	4603      	mov	r3, r0
 8007210:	1ae3      	subs	r3, r4, r3
 8007212:	3b01      	subs	r3, #1
 8007214:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	2b3f      	cmp	r3, #63	; 0x3f
 800721a:	d907      	bls.n	800722c <CDC_Receive_FS+0x54>
  {
    // ?��?�� ?��?��?��?�� 보내�?.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4808      	ldr	r0, [pc, #32]	; (8007240 <CDC_Receive_FS+0x68>)
 8007220:	f7ff fdeb 	bl	8006dfa <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007224:	4806      	ldr	r0, [pc, #24]	; (8007240 <CDC_Receive_FS+0x68>)
 8007226:	f7ff fe31 	bl	8006e8c <USBD_CDC_ReceivePacket>
 800722a:	e002      	b.n	8007232 <CDC_Receive_FS+0x5a>
  }
  else
  {
    // 버퍼 ?��?��?�� �?족하?��, 기다?��?��..
    rx_full = true;
 800722c:	4b05      	ldr	r3, [pc, #20]	; (8007244 <CDC_Receive_FS+0x6c>)
 800722e:	2201      	movs	r2, #1
 8007230:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 8007232:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007234:	4618      	mov	r0, r3
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	bd90      	pop	{r4, r7, pc}
 800723c:	200001ac 	.word	0x200001ac
 8007240:	20007524 	.word	0x20007524
 8007244:	20006a34 	.word	0x20006a34

08007248 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007254:	2300      	movs	r3, #0
 8007256:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007258:	4b0d      	ldr	r3, [pc, #52]	; (8007290 <CDC_Transmit_FS+0x48>)
 800725a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800725e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007266:	2b00      	cmp	r3, #0
 8007268:	d001      	beq.n	800726e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800726a:	2301      	movs	r3, #1
 800726c:	e00b      	b.n	8007286 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800726e:	887b      	ldrh	r3, [r7, #2]
 8007270:	461a      	mov	r2, r3
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	4806      	ldr	r0, [pc, #24]	; (8007290 <CDC_Transmit_FS+0x48>)
 8007276:	f7ff fda2 	bl	8006dbe <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800727a:	4805      	ldr	r0, [pc, #20]	; (8007290 <CDC_Transmit_FS+0x48>)
 800727c:	f7ff fdd6 	bl	8006e2c <USBD_CDC_TransmitPacket>
 8007280:	4603      	mov	r3, r0
 8007282:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8007284:	7bfb      	ldrb	r3, [r7, #15]
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}
 800728e:	bf00      	nop
 8007290:	20007524 	.word	0x20007524

08007294 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	4613      	mov	r3, r2
 80072a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80072a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	6039      	str	r1, [r7, #0]
 80072c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	2212      	movs	r2, #18
 80072c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80072ca:	4b03      	ldr	r3, [pc, #12]	; (80072d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	200001e0 	.word	0x200001e0

080072dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	4603      	mov	r3, r0
 80072e4:	6039      	str	r1, [r7, #0]
 80072e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	2204      	movs	r2, #4
 80072ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80072ee:	4b03      	ldr	r3, [pc, #12]	; (80072fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr
 80072fc:	200001f4 	.word	0x200001f4

08007300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	4603      	mov	r3, r0
 8007308:	6039      	str	r1, [r7, #0]
 800730a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800730c:	79fb      	ldrb	r3, [r7, #7]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d105      	bne.n	800731e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007312:	683a      	ldr	r2, [r7, #0]
 8007314:	4907      	ldr	r1, [pc, #28]	; (8007334 <USBD_FS_ProductStrDescriptor+0x34>)
 8007316:	4808      	ldr	r0, [pc, #32]	; (8007338 <USBD_FS_ProductStrDescriptor+0x38>)
 8007318:	f7ff f9dd 	bl	80066d6 <USBD_GetString>
 800731c:	e004      	b.n	8007328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800731e:	683a      	ldr	r2, [r7, #0]
 8007320:	4904      	ldr	r1, [pc, #16]	; (8007334 <USBD_FS_ProductStrDescriptor+0x34>)
 8007322:	4805      	ldr	r0, [pc, #20]	; (8007338 <USBD_FS_ProductStrDescriptor+0x38>)
 8007324:	f7ff f9d7 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007328:	4b02      	ldr	r3, [pc, #8]	; (8007334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
 8007332:	bf00      	nop
 8007334:	200081f4 	.word	0x200081f4
 8007338:	0801870c 	.word	0x0801870c

0800733c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	4603      	mov	r3, r0
 8007344:	6039      	str	r1, [r7, #0]
 8007346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	4904      	ldr	r1, [pc, #16]	; (800735c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800734c:	4804      	ldr	r0, [pc, #16]	; (8007360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800734e:	f7ff f9c2 	bl	80066d6 <USBD_GetString>
  return USBD_StrDesc;
 8007352:	4b02      	ldr	r3, [pc, #8]	; (800735c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007354:	4618      	mov	r0, r3
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}
 800735c:	200081f4 	.word	0x200081f4
 8007360:	08018724 	.word	0x08018724

08007364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b082      	sub	sp, #8
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	6039      	str	r1, [r7, #0]
 800736e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	221a      	movs	r2, #26
 8007374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007376:	f000 f843 	bl	8007400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800737a:	4b02      	ldr	r3, [pc, #8]	; (8007384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800737c:	4618      	mov	r0, r3
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	200001f8 	.word	0x200001f8

08007388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b082      	sub	sp, #8
 800738c:	af00      	add	r7, sp, #0
 800738e:	4603      	mov	r3, r0
 8007390:	6039      	str	r1, [r7, #0]
 8007392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007394:	79fb      	ldrb	r3, [r7, #7]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d105      	bne.n	80073a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800739a:	683a      	ldr	r2, [r7, #0]
 800739c:	4907      	ldr	r1, [pc, #28]	; (80073bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800739e:	4808      	ldr	r0, [pc, #32]	; (80073c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073a0:	f7ff f999 	bl	80066d6 <USBD_GetString>
 80073a4:	e004      	b.n	80073b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	4904      	ldr	r1, [pc, #16]	; (80073bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80073aa:	4805      	ldr	r0, [pc, #20]	; (80073c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80073ac:	f7ff f993 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073b0:	4b02      	ldr	r3, [pc, #8]	; (80073bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
 80073ba:	bf00      	nop
 80073bc:	200081f4 	.word	0x200081f4
 80073c0:	08018738 	.word	0x08018738

080073c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	4603      	mov	r3, r0
 80073cc:	6039      	str	r1, [r7, #0]
 80073ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80073d0:	79fb      	ldrb	r3, [r7, #7]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d105      	bne.n	80073e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073d6:	683a      	ldr	r2, [r7, #0]
 80073d8:	4907      	ldr	r1, [pc, #28]	; (80073f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073da:	4808      	ldr	r0, [pc, #32]	; (80073fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073dc:	f7ff f97b 	bl	80066d6 <USBD_GetString>
 80073e0:	e004      	b.n	80073ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4904      	ldr	r1, [pc, #16]	; (80073f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80073e6:	4805      	ldr	r0, [pc, #20]	; (80073fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80073e8:	f7ff f975 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80073ec:	4b02      	ldr	r3, [pc, #8]	; (80073f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3708      	adds	r7, #8
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	200081f4 	.word	0x200081f4
 80073fc:	08018744 	.word	0x08018744

08007400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007406:	4b0f      	ldr	r3, [pc, #60]	; (8007444 <Get_SerialNum+0x44>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800740c:	4b0e      	ldr	r3, [pc, #56]	; (8007448 <Get_SerialNum+0x48>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007412:	4b0e      	ldr	r3, [pc, #56]	; (800744c <Get_SerialNum+0x4c>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d009      	beq.n	800743a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007426:	2208      	movs	r2, #8
 8007428:	4909      	ldr	r1, [pc, #36]	; (8007450 <Get_SerialNum+0x50>)
 800742a:	68f8      	ldr	r0, [r7, #12]
 800742c:	f000 f814 	bl	8007458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007430:	2204      	movs	r2, #4
 8007432:	4908      	ldr	r1, [pc, #32]	; (8007454 <Get_SerialNum+0x54>)
 8007434:	68b8      	ldr	r0, [r7, #8]
 8007436:	f000 f80f 	bl	8007458 <IntToUnicode>
  }
}
 800743a:	bf00      	nop
 800743c:	3710      	adds	r7, #16
 800743e:	46bd      	mov	sp, r7
 8007440:	bd80      	pop	{r7, pc}
 8007442:	bf00      	nop
 8007444:	1fff7a10 	.word	0x1fff7a10
 8007448:	1fff7a14 	.word	0x1fff7a14
 800744c:	1fff7a18 	.word	0x1fff7a18
 8007450:	200001fa 	.word	0x200001fa
 8007454:	2000020a 	.word	0x2000020a

08007458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007458:	b480      	push	{r7}
 800745a:	b087      	sub	sp, #28
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	4613      	mov	r3, r2
 8007464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007466:	2300      	movs	r3, #0
 8007468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800746a:	2300      	movs	r3, #0
 800746c:	75fb      	strb	r3, [r7, #23]
 800746e:	e027      	b.n	80074c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	0f1b      	lsrs	r3, r3, #28
 8007474:	2b09      	cmp	r3, #9
 8007476:	d80b      	bhi.n	8007490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	0f1b      	lsrs	r3, r3, #28
 800747c:	b2da      	uxtb	r2, r3
 800747e:	7dfb      	ldrb	r3, [r7, #23]
 8007480:	005b      	lsls	r3, r3, #1
 8007482:	4619      	mov	r1, r3
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	440b      	add	r3, r1
 8007488:	3230      	adds	r2, #48	; 0x30
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e00a      	b.n	80074a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	0f1b      	lsrs	r3, r3, #28
 8007494:	b2da      	uxtb	r2, r3
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	4619      	mov	r1, r3
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	440b      	add	r3, r1
 80074a0:	3237      	adds	r2, #55	; 0x37
 80074a2:	b2d2      	uxtb	r2, r2
 80074a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	011b      	lsls	r3, r3, #4
 80074aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	3301      	adds	r3, #1
 80074b2:	68ba      	ldr	r2, [r7, #8]
 80074b4:	4413      	add	r3, r2
 80074b6:	2200      	movs	r2, #0
 80074b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80074ba:	7dfb      	ldrb	r3, [r7, #23]
 80074bc:	3301      	adds	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]
 80074c0:	7dfa      	ldrb	r2, [r7, #23]
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d3d3      	bcc.n	8007470 <IntToUnicode+0x18>
  }
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
	...

080074d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074d8:	b480      	push	{r7}
 80074da:	b083      	sub	sp, #12
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	6039      	str	r1, [r7, #0]
 80074e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2212      	movs	r2, #18
 80074e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80074ea:	4b03      	ldr	r3, [pc, #12]	; (80074f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	370c      	adds	r7, #12
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr
 80074f8:	20000230 	.word	0x20000230

080074fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007508:	683b      	ldr	r3, [r7, #0]
 800750a:	2204      	movs	r2, #4
 800750c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800750e:	4b03      	ldr	r3, [pc, #12]	; (800751c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007510:	4618      	mov	r0, r3
 8007512:	370c      	adds	r7, #12
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	20000244 	.word	0x20000244

08007520 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	4603      	mov	r3, r0
 8007528:	6039      	str	r1, [r7, #0]
 800752a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800752c:	79fb      	ldrb	r3, [r7, #7]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d105      	bne.n	800753e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	4907      	ldr	r1, [pc, #28]	; (8007554 <USBD_FS_ProductStrDescriptor+0x34>)
 8007536:	4808      	ldr	r0, [pc, #32]	; (8007558 <USBD_FS_ProductStrDescriptor+0x38>)
 8007538:	f7ff f8cd 	bl	80066d6 <USBD_GetString>
 800753c:	e004      	b.n	8007548 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800753e:	683a      	ldr	r2, [r7, #0]
 8007540:	4904      	ldr	r1, [pc, #16]	; (8007554 <USBD_FS_ProductStrDescriptor+0x34>)
 8007542:	4805      	ldr	r0, [pc, #20]	; (8007558 <USBD_FS_ProductStrDescriptor+0x38>)
 8007544:	f7ff f8c7 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007548:	4b02      	ldr	r3, [pc, #8]	; (8007554 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800754a:	4618      	mov	r0, r3
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}
 8007552:	bf00      	nop
 8007554:	200081f4 	.word	0x200081f4
 8007558:	08018754 	.word	0x08018754

0800755c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	4603      	mov	r3, r0
 8007564:	6039      	str	r1, [r7, #0]
 8007566:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007568:	683a      	ldr	r2, [r7, #0]
 800756a:	4904      	ldr	r1, [pc, #16]	; (800757c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800756c:	4804      	ldr	r0, [pc, #16]	; (8007580 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800756e:	f7ff f8b2 	bl	80066d6 <USBD_GetString>
  return USBD_StrDesc;
 8007572:	4b02      	ldr	r3, [pc, #8]	; (800757c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	200081f4 	.word	0x200081f4
 8007580:	08018768 	.word	0x08018768

08007584 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	4603      	mov	r3, r0
 800758c:	6039      	str	r1, [r7, #0]
 800758e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	221a      	movs	r2, #26
 8007594:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007596:	f000 f843 	bl	8007620 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800759a:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800759c:	4618      	mov	r0, r3
 800759e:	3708      	adds	r7, #8
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	20000248 	.word	0x20000248

080075a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	4603      	mov	r3, r0
 80075b0:	6039      	str	r1, [r7, #0]
 80075b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d105      	bne.n	80075c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075ba:	683a      	ldr	r2, [r7, #0]
 80075bc:	4907      	ldr	r1, [pc, #28]	; (80075dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80075be:	4808      	ldr	r0, [pc, #32]	; (80075e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075c0:	f7ff f889 	bl	80066d6 <USBD_GetString>
 80075c4:	e004      	b.n	80075d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	4904      	ldr	r1, [pc, #16]	; (80075dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80075ca:	4805      	ldr	r0, [pc, #20]	; (80075e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80075cc:	f7ff f883 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80075d0:	4b02      	ldr	r3, [pc, #8]	; (80075dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200081f4 	.word	0x200081f4
 80075e0:	0801877c 	.word	0x0801877c

080075e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b082      	sub	sp, #8
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	4603      	mov	r3, r0
 80075ec:	6039      	str	r1, [r7, #0]
 80075ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80075f0:	79fb      	ldrb	r3, [r7, #7]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d105      	bne.n	8007602 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80075f6:	683a      	ldr	r2, [r7, #0]
 80075f8:	4907      	ldr	r1, [pc, #28]	; (8007618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80075fa:	4808      	ldr	r0, [pc, #32]	; (800761c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80075fc:	f7ff f86b 	bl	80066d6 <USBD_GetString>
 8007600:	e004      	b.n	800760c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4904      	ldr	r1, [pc, #16]	; (8007618 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007606:	4805      	ldr	r0, [pc, #20]	; (800761c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007608:	f7ff f865 	bl	80066d6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800760c:	4b02      	ldr	r3, [pc, #8]	; (8007618 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800760e:	4618      	mov	r0, r3
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}
 8007616:	bf00      	nop
 8007618:	200081f4 	.word	0x200081f4
 800761c:	08018788 	.word	0x08018788

08007620 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007626:	4b0f      	ldr	r3, [pc, #60]	; (8007664 <Get_SerialNum+0x44>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800762c:	4b0e      	ldr	r3, [pc, #56]	; (8007668 <Get_SerialNum+0x48>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007632:	4b0e      	ldr	r3, [pc, #56]	; (800766c <Get_SerialNum+0x4c>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4413      	add	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d009      	beq.n	800765a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007646:	2208      	movs	r2, #8
 8007648:	4909      	ldr	r1, [pc, #36]	; (8007670 <Get_SerialNum+0x50>)
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f000 f814 	bl	8007678 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007650:	2204      	movs	r2, #4
 8007652:	4908      	ldr	r1, [pc, #32]	; (8007674 <Get_SerialNum+0x54>)
 8007654:	68b8      	ldr	r0, [r7, #8]
 8007656:	f000 f80f 	bl	8007678 <IntToUnicode>
  }
}
 800765a:	bf00      	nop
 800765c:	3710      	adds	r7, #16
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	1fff7a10 	.word	0x1fff7a10
 8007668:	1fff7a14 	.word	0x1fff7a14
 800766c:	1fff7a18 	.word	0x1fff7a18
 8007670:	2000024a 	.word	0x2000024a
 8007674:	2000025a 	.word	0x2000025a

08007678 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800768a:	2300      	movs	r3, #0
 800768c:	75fb      	strb	r3, [r7, #23]
 800768e:	e027      	b.n	80076e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	0f1b      	lsrs	r3, r3, #28
 8007694:	2b09      	cmp	r3, #9
 8007696:	d80b      	bhi.n	80076b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	0f1b      	lsrs	r3, r3, #28
 800769c:	b2da      	uxtb	r2, r3
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	005b      	lsls	r3, r3, #1
 80076a2:	4619      	mov	r1, r3
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	440b      	add	r3, r1
 80076a8:	3230      	adds	r2, #48	; 0x30
 80076aa:	b2d2      	uxtb	r2, r2
 80076ac:	701a      	strb	r2, [r3, #0]
 80076ae:	e00a      	b.n	80076c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	0f1b      	lsrs	r3, r3, #28
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
 80076b8:	005b      	lsls	r3, r3, #1
 80076ba:	4619      	mov	r1, r3
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	440b      	add	r3, r1
 80076c0:	3237      	adds	r2, #55	; 0x37
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	011b      	lsls	r3, r3, #4
 80076ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	3301      	adds	r3, #1
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	4413      	add	r3, r2
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80076da:	7dfb      	ldrb	r3, [r7, #23]
 80076dc:	3301      	adds	r3, #1
 80076de:	75fb      	strb	r3, [r7, #23]
 80076e0:	7dfa      	ldrb	r2, [r7, #23]
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d3d3      	bcc.n	8007690 <IntToUnicode+0x18>
  }
}
 80076e8:	bf00      	nop
 80076ea:	bf00      	nop
 80076ec:	371c      	adds	r7, #28
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8007702:	f44f 701d 	mov.w	r0, #628	; 0x274
 8007706:	f002 f971 	bl	80099ec <USBD_static_malloc>
 800770a:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d105      	bne.n	800771e <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2200      	movs	r2, #0
 8007716:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800771a:	2302      	movs	r3, #2
 800771c:	e034      	b.n	8007788 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68fa      	ldr	r2, [r7, #12]
 8007722:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	7c1b      	ldrb	r3, [r3, #16]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d115      	bne.n	800775a <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800772e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007732:	2202      	movs	r2, #2
 8007734:	2101      	movs	r1, #1
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f002 f815 	bl	8009766 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2201      	movs	r2, #1
 8007740:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8007744:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007748:	2202      	movs	r2, #2
 800774a:	2181      	movs	r1, #129	; 0x81
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f002 f80a 	bl	8009766 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2201      	movs	r2, #1
 8007756:	871a      	strh	r2, [r3, #56]	; 0x38
 8007758:	e012      	b.n	8007780 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800775a:	2340      	movs	r3, #64	; 0x40
 800775c:	2202      	movs	r2, #2
 800775e:	2101      	movs	r1, #1
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f002 f800 	bl	8009766 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2201      	movs	r2, #1
 800776a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800776e:	2340      	movs	r3, #64	; 0x40
 8007770:	2202      	movs	r2, #2
 8007772:	2181      	movs	r1, #129	; 0x81
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 fff6 	bl	8009766 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2201      	movs	r2, #1
 800777e:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f998 	bl	8007ab6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800779c:	2101      	movs	r1, #1
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f002 f807 	bl	80097b2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2200      	movs	r2, #0
 80077a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80077ac:	2181      	movs	r1, #129	; 0x81
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f001 ffff 	bl	80097b2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2200      	movs	r2, #0
 80077b8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d00c      	beq.n	80077de <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f9d4 	bl	8007b72 <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077d0:	4618      	mov	r0, r3
 80077d2:	f002 f919 	bl	8009a08 <USBD_static_free>
    pdev->pClassData = NULL;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b086      	sub	sp, #24
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077f8:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80077fe:	2300      	movs	r3, #0
 8007800:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d101      	bne.n	800780c <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007808:	2303      	movs	r3, #3
 800780a:	e0db      	b.n	80079c4 <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007814:	2b00      	cmp	r3, #0
 8007816:	d04e      	beq.n	80078b6 <USBD_MSC_Setup+0xce>
 8007818:	2b20      	cmp	r3, #32
 800781a:	f040 80cb 	bne.w	80079b4 <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	785b      	ldrb	r3, [r3, #1]
 8007822:	2bfe      	cmp	r3, #254	; 0xfe
 8007824:	d002      	beq.n	800782c <USBD_MSC_Setup+0x44>
 8007826:	2bff      	cmp	r3, #255	; 0xff
 8007828:	d025      	beq.n	8007876 <USBD_MSC_Setup+0x8e>
 800782a:	e03c      	b.n	80078a6 <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	885b      	ldrh	r3, [r3, #2]
 8007830:	2b00      	cmp	r3, #0
 8007832:	d119      	bne.n	8007868 <USBD_MSC_Setup+0x80>
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	88db      	ldrh	r3, [r3, #6]
 8007838:	2b01      	cmp	r3, #1
 800783a:	d115      	bne.n	8007868 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8007842:	2b00      	cmp	r3, #0
 8007844:	da10      	bge.n	8007868 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	4798      	blx	r3
 8007850:	4603      	mov	r3, r0
 8007852:	461a      	mov	r2, r3
 8007854:	693b      	ldr	r3, [r7, #16]
 8007856:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	2201      	movs	r2, #1
 800785c:	4619      	mov	r1, r3
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fe ff99 	bl	8006796 <USBD_CtlSendData>
 8007864:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007866:	e025      	b.n	80078b4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8007868:	6839      	ldr	r1, [r7, #0]
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	f7fe ff22 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007870:	2303      	movs	r3, #3
 8007872:	75fb      	strb	r3, [r7, #23]
          break;
 8007874:	e01e      	b.n	80078b4 <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	885b      	ldrh	r3, [r3, #2]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10c      	bne.n	8007898 <USBD_MSC_Setup+0xb0>
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	88db      	ldrh	r3, [r3, #6]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d108      	bne.n	8007898 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800788c:	2b00      	cmp	r3, #0
 800788e:	db03      	blt.n	8007898 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 f948 	bl	8007b26 <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007896:	e00d      	b.n	80078b4 <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f7fe ff0a 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 80078a0:	2303      	movs	r3, #3
 80078a2:	75fb      	strb	r3, [r7, #23]
          break;
 80078a4:	e006      	b.n	80078b4 <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80078a6:	6839      	ldr	r1, [r7, #0]
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7fe ff03 	bl	80066b4 <USBD_CtlError>
          ret = USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	75fb      	strb	r3, [r7, #23]
          break;
 80078b2:	bf00      	nop
      }
      break;
 80078b4:	e085      	b.n	80079c2 <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	785b      	ldrb	r3, [r3, #1]
 80078ba:	2b0b      	cmp	r3, #11
 80078bc:	d871      	bhi.n	80079a2 <USBD_MSC_Setup+0x1ba>
 80078be:	a201      	add	r2, pc, #4	; (adr r2, 80078c4 <USBD_MSC_Setup+0xdc>)
 80078c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c4:	080078f5 	.word	0x080078f5
 80078c8:	08007971 	.word	0x08007971
 80078cc:	080079a3 	.word	0x080079a3
 80078d0:	080079a3 	.word	0x080079a3
 80078d4:	080079a3 	.word	0x080079a3
 80078d8:	080079a3 	.word	0x080079a3
 80078dc:	080079a3 	.word	0x080079a3
 80078e0:	080079a3 	.word	0x080079a3
 80078e4:	080079a3 	.word	0x080079a3
 80078e8:	080079a3 	.word	0x080079a3
 80078ec:	0800791f 	.word	0x0800791f
 80078f0:	08007949 	.word	0x08007949
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b03      	cmp	r3, #3
 80078fe:	d107      	bne.n	8007910 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007900:	f107 030e 	add.w	r3, r7, #14
 8007904:	2202      	movs	r2, #2
 8007906:	4619      	mov	r1, r3
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fe ff44 	bl	8006796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800790e:	e050      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f7fe fece 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	75fb      	strb	r3, [r7, #23]
          break;
 800791c:	e049      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b03      	cmp	r3, #3
 8007928:	d107      	bne.n	800793a <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800792a:	693b      	ldr	r3, [r7, #16]
 800792c:	3304      	adds	r3, #4
 800792e:	2201      	movs	r2, #1
 8007930:	4619      	mov	r1, r3
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f7fe ff2f 	bl	8006796 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007938:	e03b      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800793a:	6839      	ldr	r1, [r7, #0]
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f7fe feb9 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007942:	2303      	movs	r3, #3
 8007944:	75fb      	strb	r3, [r7, #23]
          break;
 8007946:	e034      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800794e:	b2db      	uxtb	r3, r3
 8007950:	2b03      	cmp	r3, #3
 8007952:	d106      	bne.n	8007962 <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	885b      	ldrh	r3, [r3, #2]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	461a      	mov	r2, r3
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007960:	e027      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 8007962:	6839      	ldr	r1, [r7, #0]
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f7fe fea5 	bl	80066b4 <USBD_CtlError>
            ret = USBD_FAIL;
 800796a:	2303      	movs	r3, #3
 800796c:	75fb      	strb	r3, [r7, #23]
          break;
 800796e:	e020      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b03      	cmp	r3, #3
 800797a:	d119      	bne.n	80079b0 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	885b      	ldrh	r3, [r3, #2]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d115      	bne.n	80079b0 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	889b      	ldrh	r3, [r3, #4]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	4619      	mov	r1, r3
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f001 ff2f 	bl	80097f0 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	889b      	ldrh	r3, [r3, #4]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4619      	mov	r1, r3
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fa82 	bl	8007ea4 <MSC_BOT_CplClrFeature>
            }
          }
          break;
 80079a0:	e006      	b.n	80079b0 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 80079a2:	6839      	ldr	r1, [r7, #0]
 80079a4:	6878      	ldr	r0, [r7, #4]
 80079a6:	f7fe fe85 	bl	80066b4 <USBD_CtlError>
          ret = USBD_FAIL;
 80079aa:	2303      	movs	r3, #3
 80079ac:	75fb      	strb	r3, [r7, #23]
          break;
 80079ae:	e000      	b.n	80079b2 <USBD_MSC_Setup+0x1ca>
          break;
 80079b0:	bf00      	nop
      }
      break;
 80079b2:	e006      	b.n	80079c2 <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 80079b4:	6839      	ldr	r1, [r7, #0]
 80079b6:	6878      	ldr	r0, [r7, #4]
 80079b8:	f7fe fe7c 	bl	80066b4 <USBD_CtlError>
      ret = USBD_FAIL;
 80079bc:	2303      	movs	r3, #3
 80079be:	75fb      	strb	r3, [r7, #23]
      break;
 80079c0:	bf00      	nop
  }

  return (uint8_t)ret;
 80079c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
 80079d4:	460b      	mov	r3, r1
 80079d6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 80079d8:	78fb      	ldrb	r3, [r7, #3]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 f8dc 	bl	8007b9a <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 80079e2:	2300      	movs	r3, #0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b082      	sub	sp, #8
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80079f8:	78fb      	ldrb	r3, [r7, #3]
 80079fa:	4619      	mov	r1, r3
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f902 	bl	8007c06 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8007a02:	2300      	movs	r3, #0
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3708      	adds	r7, #8
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bd80      	pop	{r7, pc}

08007a0c <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	2000029c 	.word	0x2000029c

08007a2c <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2220      	movs	r2, #32
 8007a38:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007a3a:	4b03      	ldr	r3, [pc, #12]	; (8007a48 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	370c      	adds	r7, #12
 8007a40:	46bd      	mov	sp, r7
 8007a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a46:	4770      	bx	lr
 8007a48:	200002bc 	.word	0x200002bc

08007a4c <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2220      	movs	r2, #32
 8007a58:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007a5a:	4b03      	ldr	r3, [pc, #12]	; (8007a68 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	200002dc 	.word	0x200002dc

08007a6c <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b083      	sub	sp, #12
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	220a      	movs	r2, #10
 8007a78:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007a7a:	4b03      	ldr	r3, [pc, #12]	; (8007a88 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	200002fc 	.word	0x200002fc

08007a8c <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e004      	b.n	8007aaa <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	683a      	ldr	r2, [r7, #0]
 8007aa4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ac4:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d028      	beq.n	8007b1e <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	2200      	movs	r2, #0
 8007adc:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	2000      	movs	r0, #0
 8007afa:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8007afc:	2101      	movs	r1, #1
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f001 fe76 	bl	80097f0 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8007b04:	2181      	movs	r1, #129	; 0x81
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f001 fe72 	bl	80097f0 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007b12:	231f      	movs	r3, #31
 8007b14:	2101      	movs	r1, #1
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f001 ff33 	bl	8009982 <USBD_LL_PrepareReceive>
 8007b1c:	e000      	b.n	8007b20 <MSC_BOT_Init+0x6a>
    return;
 8007b1e:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bd80      	pop	{r7, pc}

08007b26 <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8007b26:	b580      	push	{r7, lr}
 8007b28:	b084      	sub	sp, #16
 8007b2a:	af00      	add	r7, sp, #0
 8007b2c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b34:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d016      	beq.n	8007b6a <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2201      	movs	r2, #1
 8007b46:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8007b48:	2181      	movs	r1, #129	; 0x81
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f001 fe8e 	bl	800986c <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8007b50:	2101      	movs	r1, #1
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f001 fe8a 	bl	800986c <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007b5e:	231f      	movs	r3, #31
 8007b60:	2101      	movs	r1, #1
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f001 ff0d 	bl	8009982 <USBD_LL_PrepareReceive>
 8007b68:	e000      	b.n	8007b6c <MSC_BOT_Reset+0x46>
    return;
 8007b6a:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007b6c:	3710      	adds	r7, #16
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007b72:	b480      	push	{r7}
 8007b74:	b085      	sub	sp, #20
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007b80:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d002      	beq.n	8007b8e <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	721a      	strb	r2, [r3, #8]
  }
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007b9a:	b580      	push	{r7, lr}
 8007b9c:	b084      	sub	sp, #16
 8007b9e:	af00      	add	r7, sp, #0
 8007ba0:	6078      	str	r0, [r7, #4]
 8007ba2:	460b      	mov	r3, r1
 8007ba4:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007bac:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d020      	beq.n	8007bf6 <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	7a1b      	ldrb	r3, [r3, #8]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d005      	beq.n	8007bc8 <MSC_BOT_DataIn+0x2e>
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	db1c      	blt.n	8007bfa <MSC_BOT_DataIn+0x60>
 8007bc0:	3b03      	subs	r3, #3
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d819      	bhi.n	8007bfa <MSC_BOT_DataIn+0x60>
 8007bc6:	e011      	b.n	8007bec <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6878      	ldr	r0, [r7, #4]
 8007bd8:	f000 f992 	bl	8007f00 <SCSI_ProcessCmd>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	da0d      	bge.n	8007bfe <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007be2:	2101      	movs	r1, #1
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 f8fb 	bl	8007de0 <MSC_BOT_SendCSW>
      }
      break;
 8007bea:	e008      	b.n	8007bfe <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007bec:	2100      	movs	r1, #0
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f8f6 	bl	8007de0 <MSC_BOT_SendCSW>
      break;
 8007bf4:	e004      	b.n	8007c00 <MSC_BOT_DataIn+0x66>
    return;
 8007bf6:	bf00      	nop
 8007bf8:	e002      	b.n	8007c00 <MSC_BOT_DataIn+0x66>

    default:
      break;
 8007bfa:	bf00      	nop
 8007bfc:	e000      	b.n	8007c00 <MSC_BOT_DataIn+0x66>
      break;
 8007bfe:	bf00      	nop
  }
}
 8007c00:	3710      	adds	r7, #16
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b084      	sub	sp, #16
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
 8007c0e:	460b      	mov	r3, r1
 8007c10:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c18:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01c      	beq.n	8007c5a <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	7a1b      	ldrb	r3, [r3, #8]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <MSC_BOT_DataOut+0x28>
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d004      	beq.n	8007c36 <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8007c2c:	e018      	b.n	8007c60 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f81a 	bl	8007c68 <MSC_BOT_CBW_Decode>
      break;
 8007c34:	e014      	b.n	8007c60 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007c42:	461a      	mov	r2, r3
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f95b 	bl	8007f00 <SCSI_ProcessCmd>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	da06      	bge.n	8007c5e <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007c50:	2101      	movs	r1, #1
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8c4 	bl	8007de0 <MSC_BOT_SendCSW>
      break;
 8007c58:	e001      	b.n	8007c5e <MSC_BOT_DataOut+0x58>
    return;
 8007c5a:	bf00      	nop
 8007c5c:	e000      	b.n	8007c60 <MSC_BOT_DataOut+0x5a>
      break;
 8007c5e:	bf00      	nop
  }
}
 8007c60:	3710      	adds	r7, #16
 8007c62:	46bd      	mov	sp, r7
 8007c64:	bd80      	pop	{r7, pc}
	...

08007c68 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c76:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d077      	beq.n	8007d6e <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007c96:	2101      	movs	r1, #1
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f001 fe93 	bl	80099c4 <USBD_LL_GetRxDataSize>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b1f      	cmp	r3, #31
 8007ca2:	d114      	bne.n	8007cce <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007caa:	4a34      	ldr	r2, [pc, #208]	; (8007d7c <MSC_BOT_CBW_Decode+0x114>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d10e      	bne.n	8007cce <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d809      	bhi.n	8007cce <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d004      	beq.n	8007cce <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007cca:	2b10      	cmp	r3, #16
 8007ccc:	d90e      	bls.n	8007cec <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007cd4:	2320      	movs	r3, #32
 8007cd6:	2205      	movs	r2, #5
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fdbc 	bl	8008856 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2202      	movs	r2, #2
 8007ce2:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f8ab 	bl	8007e40 <MSC_BOT_Abort>
 8007cea:	e043      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f900 	bl	8007f00 <SCSI_ProcessCmd>
 8007d00:	4603      	mov	r3, r0
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	da0c      	bge.n	8007d20 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	7a1b      	ldrb	r3, [r3, #8]
 8007d0a:	2b05      	cmp	r3, #5
 8007d0c:	d104      	bne.n	8007d18 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007d0e:	2101      	movs	r1, #1
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f000 f865 	bl	8007de0 <MSC_BOT_SendCSW>
 8007d16:	e02d      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f891 	bl	8007e40 <MSC_BOT_Abort>
 8007d1e:	e029      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	7a1b      	ldrb	r3, [r3, #8]
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d024      	beq.n	8007d72 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d020      	beq.n	8007d72 <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8007d34:	2b03      	cmp	r3, #3
 8007d36:	d01c      	beq.n	8007d72 <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d009      	beq.n	8007d54 <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	f103 0110 	add.w	r1, r3, #16
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	68db      	ldr	r3, [r3, #12]
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 f817 	bl	8007d80 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007d52:	e00f      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d104      	bne.n	8007d66 <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f83e 	bl	8007de0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007d64:	e006      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f86a 	bl	8007e40 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007d6c:	e002      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
    return;
 8007d6e:	bf00      	nop
 8007d70:	e000      	b.n	8007d74 <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 8007d72:	bf00      	nop
    }
  }
}
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	43425355 	.word	0x43425355

08007d80 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d92:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	bf28      	it	cs
 8007da0:	4613      	movcs	r3, r2
 8007da2:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d015      	beq.n	8007dd6 <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	68ba      	ldr	r2, [r7, #8]
 8007dcc:	2181      	movs	r1, #129	; 0x81
 8007dce:	68f8      	ldr	r0, [r7, #12]
 8007dd0:	f001 fdb6 	bl	8009940 <USBD_LL_Transmit>
 8007dd4:	e000      	b.n	8007dd8 <MSC_BOT_SendData+0x58>
    return;
 8007dd6:	bf00      	nop
}
 8007dd8:	3718      	adds	r7, #24
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	460b      	mov	r3, r1
 8007dea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007df2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d01b      	beq.n	8007e32 <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	4a0f      	ldr	r2, [pc, #60]	; (8007e3c <MSC_BOT_SendCSW+0x5c>)
 8007dfe:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	78fa      	ldrb	r2, [r7, #3]
 8007e06:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f503 720c 	add.w	r2, r3, #560	; 0x230
 8007e16:	230d      	movs	r3, #13
 8007e18:	2181      	movs	r1, #129	; 0x81
 8007e1a:	6878      	ldr	r0, [r7, #4]
 8007e1c:	f001 fd90 	bl	8009940 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007e26:	231f      	movs	r3, #31
 8007e28:	2101      	movs	r1, #1
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f001 fda9 	bl	8009982 <USBD_LL_PrepareReceive>
 8007e30:	e000      	b.n	8007e34 <MSC_BOT_SendCSW+0x54>
    return;
 8007e32:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop
 8007e3c:	53425355 	.word	0x53425355

08007e40 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e4e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d022      	beq.n	8007e9c <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d10c      	bne.n	8007e7a <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d007      	beq.n	8007e7a <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d103      	bne.n	8007e7a <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007e72:	2101      	movs	r1, #1
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f001 fcda 	bl	800982e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007e7a:	2181      	movs	r1, #129	; 0x81
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fcd6 	bl	800982e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	7a5b      	ldrb	r3, [r3, #9]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d109      	bne.n	8007e9e <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007e8a:	2181      	movs	r1, #129	; 0x81
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	f001 fcce 	bl	800982e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007e92:	2101      	movs	r1, #1
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f001 fcca 	bl	800982e <USBD_LL_StallEP>
 8007e9a:	e000      	b.n	8007e9e <MSC_BOT_Abort+0x5e>
    return;
 8007e9c:	bf00      	nop
  }
}
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007eb6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d019      	beq.n	8007ef2 <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	7a5b      	ldrb	r3, [r3, #9]
 8007ec2:	2b02      	cmp	r3, #2
 8007ec4:	d108      	bne.n	8007ed8 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007ec6:	2181      	movs	r1, #129	; 0x81
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f001 fcb0 	bl	800982e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007ece:	2101      	movs	r1, #1
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f001 fcac 	bl	800982e <USBD_LL_StallEP>
 8007ed6:	e00f      	b.n	8007ef8 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007ed8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da0a      	bge.n	8007ef6 <MSC_BOT_CplClrFeature+0x52>
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	7a5b      	ldrb	r3, [r3, #9]
 8007ee4:	2b01      	cmp	r3, #1
 8007ee6:	d006      	beq.n	8007ef6 <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007ee8:	2101      	movs	r1, #1
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff ff78 	bl	8007de0 <MSC_BOT_SendCSW>
 8007ef0:	e002      	b.n	8007ef8 <MSC_BOT_CplClrFeature+0x54>
    return;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8007ef6:	bf00      	nop
  }
}
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	460b      	mov	r3, r1
 8007f0a:	607a      	str	r2, [r7, #4]
 8007f0c:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f14:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d102      	bne.n	8007f22 <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8007f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f20:	e168      	b.n	80081f4 <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	2baa      	cmp	r3, #170	; 0xaa
 8007f28:	f000 8144 	beq.w	80081b4 <SCSI_ProcessCmd+0x2b4>
 8007f2c:	2baa      	cmp	r3, #170	; 0xaa
 8007f2e:	f300 8153 	bgt.w	80081d8 <SCSI_ProcessCmd+0x2d8>
 8007f32:	2ba8      	cmp	r3, #168	; 0xa8
 8007f34:	f000 812c 	beq.w	8008190 <SCSI_ProcessCmd+0x290>
 8007f38:	2ba8      	cmp	r3, #168	; 0xa8
 8007f3a:	f300 814d 	bgt.w	80081d8 <SCSI_ProcessCmd+0x2d8>
 8007f3e:	2b5a      	cmp	r3, #90	; 0x5a
 8007f40:	f300 80c0 	bgt.w	80080c4 <SCSI_ProcessCmd+0x1c4>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f2c0 8147 	blt.w	80081d8 <SCSI_ProcessCmd+0x2d8>
 8007f4a:	2b5a      	cmp	r3, #90	; 0x5a
 8007f4c:	f200 8144 	bhi.w	80081d8 <SCSI_ProcessCmd+0x2d8>
 8007f50:	a201      	add	r2, pc, #4	; (adr r2, 8007f58 <SCSI_ProcessCmd+0x58>)
 8007f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f56:	bf00      	nop
 8007f58:	080080cb 	.word	0x080080cb
 8007f5c:	080081d9 	.word	0x080081d9
 8007f60:	080081d9 	.word	0x080081d9
 8007f64:	080080dd 	.word	0x080080dd
 8007f68:	080081d9 	.word	0x080081d9
 8007f6c:	080081d9 	.word	0x080081d9
 8007f70:	080081d9 	.word	0x080081d9
 8007f74:	080081d9 	.word	0x080081d9
 8007f78:	080081d9 	.word	0x080081d9
 8007f7c:	080081d9 	.word	0x080081d9
 8007f80:	080081d9 	.word	0x080081d9
 8007f84:	080081d9 	.word	0x080081d9
 8007f88:	080081d9 	.word	0x080081d9
 8007f8c:	080081d9 	.word	0x080081d9
 8007f90:	080081d9 	.word	0x080081d9
 8007f94:	080081d9 	.word	0x080081d9
 8007f98:	080081d9 	.word	0x080081d9
 8007f9c:	080081d9 	.word	0x080081d9
 8007fa0:	080080ef 	.word	0x080080ef
 8007fa4:	080081d9 	.word	0x080081d9
 8007fa8:	080081d9 	.word	0x080081d9
 8007fac:	080081d9 	.word	0x080081d9
 8007fb0:	080081d9 	.word	0x080081d9
 8007fb4:	080081d9 	.word	0x080081d9
 8007fb8:	080081d9 	.word	0x080081d9
 8007fbc:	080081d9 	.word	0x080081d9
 8007fc0:	08008125 	.word	0x08008125
 8007fc4:	08008101 	.word	0x08008101
 8007fc8:	080081d9 	.word	0x080081d9
 8007fcc:	080081d9 	.word	0x080081d9
 8007fd0:	08008113 	.word	0x08008113
 8007fd4:	080081d9 	.word	0x080081d9
 8007fd8:	080081d9 	.word	0x080081d9
 8007fdc:	080081d9 	.word	0x080081d9
 8007fe0:	080081d9 	.word	0x080081d9
 8007fe4:	08008149 	.word	0x08008149
 8007fe8:	080081d9 	.word	0x080081d9
 8007fec:	0800815b 	.word	0x0800815b
 8007ff0:	080081d9 	.word	0x080081d9
 8007ff4:	080081d9 	.word	0x080081d9
 8007ff8:	0800817f 	.word	0x0800817f
 8007ffc:	080081d9 	.word	0x080081d9
 8008000:	080081a3 	.word	0x080081a3
 8008004:	080081d9 	.word	0x080081d9
 8008008:	080081d9 	.word	0x080081d9
 800800c:	080081d9 	.word	0x080081d9
 8008010:	080081d9 	.word	0x080081d9
 8008014:	080081c7 	.word	0x080081c7
 8008018:	080081d9 	.word	0x080081d9
 800801c:	080081d9 	.word	0x080081d9
 8008020:	080081d9 	.word	0x080081d9
 8008024:	080081d9 	.word	0x080081d9
 8008028:	080081d9 	.word	0x080081d9
 800802c:	080081d9 	.word	0x080081d9
 8008030:	080081d9 	.word	0x080081d9
 8008034:	080081d9 	.word	0x080081d9
 8008038:	080081d9 	.word	0x080081d9
 800803c:	080081d9 	.word	0x080081d9
 8008040:	080081d9 	.word	0x080081d9
 8008044:	080081d9 	.word	0x080081d9
 8008048:	080081d9 	.word	0x080081d9
 800804c:	080081d9 	.word	0x080081d9
 8008050:	080081d9 	.word	0x080081d9
 8008054:	080081d9 	.word	0x080081d9
 8008058:	080081d9 	.word	0x080081d9
 800805c:	080081d9 	.word	0x080081d9
 8008060:	080081d9 	.word	0x080081d9
 8008064:	080081d9 	.word	0x080081d9
 8008068:	080081d9 	.word	0x080081d9
 800806c:	080081d9 	.word	0x080081d9
 8008070:	080081d9 	.word	0x080081d9
 8008074:	080081d9 	.word	0x080081d9
 8008078:	080081d9 	.word	0x080081d9
 800807c:	080081d9 	.word	0x080081d9
 8008080:	080081d9 	.word	0x080081d9
 8008084:	080081d9 	.word	0x080081d9
 8008088:	080081d9 	.word	0x080081d9
 800808c:	080081d9 	.word	0x080081d9
 8008090:	080081d9 	.word	0x080081d9
 8008094:	080081d9 	.word	0x080081d9
 8008098:	080081d9 	.word	0x080081d9
 800809c:	080081d9 	.word	0x080081d9
 80080a0:	080081d9 	.word	0x080081d9
 80080a4:	080081d9 	.word	0x080081d9
 80080a8:	080081d9 	.word	0x080081d9
 80080ac:	080081d9 	.word	0x080081d9
 80080b0:	080081d9 	.word	0x080081d9
 80080b4:	080081d9 	.word	0x080081d9
 80080b8:	080081d9 	.word	0x080081d9
 80080bc:	080081d9 	.word	0x080081d9
 80080c0:	08008137 	.word	0x08008137
 80080c4:	2b9e      	cmp	r3, #158	; 0x9e
 80080c6:	d051      	beq.n	800816c <SCSI_ProcessCmd+0x26c>
 80080c8:	e086      	b.n	80081d8 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 80080ca:	7afb      	ldrb	r3, [r7, #11]
 80080cc:	687a      	ldr	r2, [r7, #4]
 80080ce:	4619      	mov	r1, r3
 80080d0:	68f8      	ldr	r0, [r7, #12]
 80080d2:	f000 f893 	bl	80081fc <SCSI_TestUnitReady>
 80080d6:	4603      	mov	r3, r0
 80080d8:	75fb      	strb	r3, [r7, #23]
      break;
 80080da:	e089      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 80080dc:	7afb      	ldrb	r3, [r7, #11]
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4619      	mov	r1, r3
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f000 fb38 	bl	8008758 <SCSI_RequestSense>
 80080e8:	4603      	mov	r3, r0
 80080ea:	75fb      	strb	r3, [r7, #23]
      break;
 80080ec:	e080      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 80080ee:	7afb      	ldrb	r3, [r7, #11]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	4619      	mov	r1, r3
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f8d1 	bl	800829c <SCSI_Inquiry>
 80080fa:	4603      	mov	r3, r0
 80080fc:	75fb      	strb	r3, [r7, #23]
      break;
 80080fe:	e077      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8008100:	7afb      	ldrb	r3, [r7, #11]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	4619      	mov	r1, r3
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f000 fbec 	bl	80088e4 <SCSI_StartStopUnit>
 800810c:	4603      	mov	r3, r0
 800810e:	75fb      	strb	r3, [r7, #23]
      break;
 8008110:	e06e      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8008112:	7afb      	ldrb	r3, [r7, #11]
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	4619      	mov	r1, r3
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f000 fc34 	bl	8008986 <SCSI_AllowPreventRemovable>
 800811e:	4603      	mov	r3, r0
 8008120:	75fb      	strb	r3, [r7, #23]
      break;
 8008122:	e065      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8008124:	7afb      	ldrb	r3, [r7, #11]
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	4619      	mov	r1, r3
 800812a:	68f8      	ldr	r0, [r7, #12]
 800812c:	f000 fabc 	bl	80086a8 <SCSI_ModeSense6>
 8008130:	4603      	mov	r3, r0
 8008132:	75fb      	strb	r3, [r7, #23]
      break;
 8008134:	e05c      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4619      	mov	r1, r3
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f000 fadf 	bl	8008700 <SCSI_ModeSense10>
 8008142:	4603      	mov	r3, r0
 8008144:	75fb      	strb	r3, [r7, #23]
      break;
 8008146:	e053      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8008148:	7afb      	ldrb	r3, [r7, #11]
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4619      	mov	r1, r3
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 fa37 	bl	80085c2 <SCSI_ReadFormatCapacity>
 8008154:	4603      	mov	r3, r0
 8008156:	75fb      	strb	r3, [r7, #23]
      break;
 8008158:	e04a      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800815a:	7afb      	ldrb	r3, [r7, #11]
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4619      	mov	r1, r3
 8008160:	68f8      	ldr	r0, [r7, #12]
 8008162:	f000 f90f 	bl	8008384 <SCSI_ReadCapacity10>
 8008166:	4603      	mov	r3, r0
 8008168:	75fb      	strb	r3, [r7, #23]
      break;
 800816a:	e041      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800816c:	7afb      	ldrb	r3, [r7, #11]
 800816e:	687a      	ldr	r2, [r7, #4]
 8008170:	4619      	mov	r1, r3
 8008172:	68f8      	ldr	r0, [r7, #12]
 8008174:	f000 f97b 	bl	800846e <SCSI_ReadCapacity16>
 8008178:	4603      	mov	r3, r0
 800817a:	75fb      	strb	r3, [r7, #23]
      break;
 800817c:	e038      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 800817e:	7afb      	ldrb	r3, [r7, #11]
 8008180:	687a      	ldr	r2, [r7, #4]
 8008182:	4619      	mov	r1, r3
 8008184:	68f8      	ldr	r0, [r7, #12]
 8008186:	f000 fc27 	bl	80089d8 <SCSI_Read10>
 800818a:	4603      	mov	r3, r0
 800818c:	75fb      	strb	r3, [r7, #23]
      break;
 800818e:	e02f      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8008190:	7afb      	ldrb	r3, [r7, #11]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	4619      	mov	r1, r3
 8008196:	68f8      	ldr	r0, [r7, #12]
 8008198:	f000 fcbe 	bl	8008b18 <SCSI_Read12>
 800819c:	4603      	mov	r3, r0
 800819e:	75fb      	strb	r3, [r7, #23]
      break;
 80081a0:	e026      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 80081a2:	7afb      	ldrb	r3, [r7, #11]
 80081a4:	687a      	ldr	r2, [r7, #4]
 80081a6:	4619      	mov	r1, r3
 80081a8:	68f8      	ldr	r0, [r7, #12]
 80081aa:	f000 fd60 	bl	8008c6e <SCSI_Write10>
 80081ae:	4603      	mov	r3, r0
 80081b0:	75fb      	strb	r3, [r7, #23]
      break;
 80081b2:	e01d      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 80081b4:	7afb      	ldrb	r3, [r7, #11]
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	4619      	mov	r1, r3
 80081ba:	68f8      	ldr	r0, [r7, #12]
 80081bc:	f000 fe1c 	bl	8008df8 <SCSI_Write12>
 80081c0:	4603      	mov	r3, r0
 80081c2:	75fb      	strb	r3, [r7, #23]
      break;
 80081c4:	e014      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 80081c6:	7afb      	ldrb	r3, [r7, #11]
 80081c8:	687a      	ldr	r2, [r7, #4]
 80081ca:	4619      	mov	r1, r3
 80081cc:	68f8      	ldr	r0, [r7, #12]
 80081ce:	f000 fee8 	bl	8008fa2 <SCSI_Verify10>
 80081d2:	4603      	mov	r3, r0
 80081d4:	75fb      	strb	r3, [r7, #23]
      break;
 80081d6:	e00b      	b.n	80081f0 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80081d8:	7af9      	ldrb	r1, [r7, #11]
 80081da:	2320      	movs	r3, #32
 80081dc:	2205      	movs	r2, #5
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 fb39 	bl	8008856 <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	2202      	movs	r2, #2
 80081e8:	725a      	strb	r2, [r3, #9]
      ret = -1;
 80081ea:	23ff      	movs	r3, #255	; 0xff
 80081ec:	75fb      	strb	r3, [r7, #23]
      break;
 80081ee:	bf00      	nop
  }

  return ret;
 80081f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3718      	adds	r7, #24
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b086      	sub	sp, #24
 8008200:	af00      	add	r7, sp, #0
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	460b      	mov	r3, r1
 8008206:	607a      	str	r2, [r7, #4]
 8008208:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008210:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d102      	bne.n	800821e <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8008218:	f04f 33ff 	mov.w	r3, #4294967295
 800821c:	e03a      	b.n	8008294 <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00a      	beq.n	800823e <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800822e:	2320      	movs	r3, #32
 8008230:	2205      	movs	r2, #5
 8008232:	68f8      	ldr	r0, [r7, #12]
 8008234:	f000 fb0f 	bl	8008856 <SCSI_SenseCode>

    return -1;
 8008238:	f04f 33ff 	mov.w	r3, #4294967295
 800823c:	e02a      	b.n	8008294 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008244:	2b02      	cmp	r3, #2
 8008246:	d10b      	bne.n	8008260 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008248:	7af9      	ldrb	r1, [r7, #11]
 800824a:	233a      	movs	r3, #58	; 0x3a
 800824c:	2202      	movs	r2, #2
 800824e:	68f8      	ldr	r0, [r7, #12]
 8008250:	f000 fb01 	bl	8008856 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	2205      	movs	r2, #5
 8008258:	721a      	strb	r2, [r3, #8]
    return -1;
 800825a:	f04f 33ff 	mov.w	r3, #4294967295
 800825e:	e019      	b.n	8008294 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008266:	689b      	ldr	r3, [r3, #8]
 8008268:	7afa      	ldrb	r2, [r7, #11]
 800826a:	4610      	mov	r0, r2
 800826c:	4798      	blx	r3
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d00b      	beq.n	800828c <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008274:	7af9      	ldrb	r1, [r7, #11]
 8008276:	233a      	movs	r3, #58	; 0x3a
 8008278:	2202      	movs	r2, #2
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f000 faeb 	bl	8008856 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	2205      	movs	r2, #5
 8008284:	721a      	strb	r2, [r3, #8]

    return -1;
 8008286:	f04f 33ff 	mov.w	r3, #4294967295
 800828a:	e003      	b.n	8008294 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	60da      	str	r2, [r3, #12]

  return 0;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	460b      	mov	r3, r1
 80082a6:	607a      	str	r2, [r7, #4]
 80082a8:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082b0:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d102      	bne.n	80082be <SCSI_Inquiry+0x22>
  {
    return -1;
 80082b8:	f04f 33ff 	mov.w	r3, #4294967295
 80082bc:	e05a      	b.n	8008374 <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 80082be:	69bb      	ldr	r3, [r7, #24]
 80082c0:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d10a      	bne.n	80082de <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80082c8:	69bb      	ldr	r3, [r7, #24]
 80082ca:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80082ce:	2320      	movs	r3, #32
 80082d0:	2205      	movs	r2, #5
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f000 fabf 	bl	8008856 <SCSI_SenseCode>
    return -1;
 80082d8:	f04f 33ff 	mov.w	r3, #4294967295
 80082dc:	e04a      	b.n	8008374 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	3301      	adds	r3, #1
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d020      	beq.n	800832e <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	3302      	adds	r3, #2
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d105      	bne.n	8008302 <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80082f6:	2206      	movs	r2, #6
 80082f8:	4920      	ldr	r1, [pc, #128]	; (800837c <SCSI_Inquiry+0xe0>)
 80082fa:	69b8      	ldr	r0, [r7, #24]
 80082fc:	f000 ffb4 	bl	8009268 <SCSI_UpdateBotData>
 8008300:	e037      	b.n	8008372 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	3302      	adds	r3, #2
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	2b80      	cmp	r3, #128	; 0x80
 800830a:	d105      	bne.n	8008318 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800830c:	2208      	movs	r2, #8
 800830e:	491c      	ldr	r1, [pc, #112]	; (8008380 <SCSI_Inquiry+0xe4>)
 8008310:	69b8      	ldr	r0, [r7, #24]
 8008312:	f000 ffa9 	bl	8009268 <SCSI_UpdateBotData>
 8008316:	e02c      	b.n	8008372 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8008318:	69bb      	ldr	r3, [r7, #24]
 800831a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800831e:	2324      	movs	r3, #36	; 0x24
 8008320:	2205      	movs	r2, #5
 8008322:	68f8      	ldr	r0, [r7, #12]
 8008324:	f000 fa97 	bl	8008856 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8008328:	f04f 33ff 	mov.w	r3, #4294967295
 800832c:	e022      	b.n	8008374 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008334:	69d9      	ldr	r1, [r3, #28]
 8008336:	7afa      	ldrb	r2, [r7, #11]
 8008338:	4613      	mov	r3, r2
 800833a:	00db      	lsls	r3, r3, #3
 800833c:	4413      	add	r3, r2
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	440b      	add	r3, r1
 8008342:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	3304      	adds	r3, #4
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	b29b      	uxth	r3, r3
 800834c:	3305      	adds	r3, #5
 800834e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	3304      	adds	r3, #4
 8008354:	781b      	ldrb	r3, [r3, #0]
 8008356:	b29b      	uxth	r3, r3
 8008358:	8bfa      	ldrh	r2, [r7, #30]
 800835a:	429a      	cmp	r2, r3
 800835c:	d303      	bcc.n	8008366 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	3304      	adds	r3, #4
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8008366:	8bfb      	ldrh	r3, [r7, #30]
 8008368:	461a      	mov	r2, r3
 800836a:	6979      	ldr	r1, [r7, #20]
 800836c:	69b8      	ldr	r0, [r7, #24]
 800836e:	f000 ff7b 	bl	8009268 <SCSI_UpdateBotData>
  }

  return 0;
 8008372:	2300      	movs	r3, #0
}
 8008374:	4618      	mov	r0, r3
 8008376:	3720      	adds	r7, #32
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000308 	.word	0x20000308
 8008380:	20000310 	.word	0x20000310

08008384 <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	460b      	mov	r3, r1
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008398:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d102      	bne.n	80083a6 <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 80083a0:	f04f 33ff 	mov.w	r3, #4294967295
 80083a4:	e05f      	b.n	8008466 <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	697a      	ldr	r2, [r7, #20]
 80083b0:	f502 711a 	add.w	r1, r2, #616	; 0x268
 80083b4:	697a      	ldr	r2, [r7, #20]
 80083b6:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80083ba:	7af8      	ldrb	r0, [r7, #11]
 80083bc:	4798      	blx	r3
 80083be:	4603      	mov	r3, r0
 80083c0:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80083c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d104      	bne.n	80083d4 <SCSI_ReadCapacity10+0x50>
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d108      	bne.n	80083e6 <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80083d4:	7af9      	ldrb	r1, [r7, #11]
 80083d6:	233a      	movs	r3, #58	; 0x3a
 80083d8:	2202      	movs	r2, #2
 80083da:	68f8      	ldr	r0, [r7, #12]
 80083dc:	f000 fa3b 	bl	8008856 <SCSI_SenseCode>
    return -1;
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	e03f      	b.n	8008466 <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083ec:	3b01      	subs	r3, #1
 80083ee:	0e1b      	lsrs	r3, r3, #24
 80083f0:	b2da      	uxtb	r2, r3
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80083fc:	3b01      	subs	r3, #1
 80083fe:	0c1b      	lsrs	r3, r3, #16
 8008400:	b2da      	uxtb	r2, r3
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800840c:	3b01      	subs	r3, #1
 800840e:	0a1b      	lsrs	r3, r3, #8
 8008410:	b2da      	uxtb	r2, r3
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800841c:	b2db      	uxtb	r3, r3
 800841e:	3b01      	subs	r3, #1
 8008420:	b2da      	uxtb	r2, r3
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800842c:	161b      	asrs	r3, r3, #24
 800842e:	b2da      	uxtb	r2, r3
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800843a:	141b      	asrs	r3, r3, #16
 800843c:	b2da      	uxtb	r2, r3
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008448:	0a1b      	lsrs	r3, r3, #8
 800844a:	b29b      	uxth	r3, r3
 800844c:	b2da      	uxtb	r2, r3
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008458:	b2da      	uxtb	r2, r3
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	2208      	movs	r2, #8
 8008462:	60da      	str	r2, [r3, #12]

  return 0;
 8008464:	2300      	movs	r3, #0

}
 8008466:	4618      	mov	r0, r3
 8008468:	3718      	adds	r7, #24
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b088      	sub	sp, #32
 8008472:	af00      	add	r7, sp, #0
 8008474:	60f8      	str	r0, [r7, #12]
 8008476:	460b      	mov	r3, r1
 8008478:	607a      	str	r2, [r7, #4]
 800847a:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008482:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d102      	bne.n	8008490 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 800848a:	f04f 33ff 	mov.w	r3, #4294967295
 800848e:	e094      	b.n	80085ba <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	69ba      	ldr	r2, [r7, #24]
 800849a:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800849e:	69ba      	ldr	r2, [r7, #24]
 80084a0:	f502 7219 	add.w	r2, r2, #612	; 0x264
 80084a4:	7af8      	ldrb	r0, [r7, #11]
 80084a6:	4798      	blx	r3
 80084a8:	4603      	mov	r3, r0
 80084aa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80084ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d104      	bne.n	80084be <SCSI_ReadCapacity16+0x50>
 80084b4:	69bb      	ldr	r3, [r7, #24]
 80084b6:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80084ba:	2b02      	cmp	r3, #2
 80084bc:	d108      	bne.n	80084d0 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80084be:	7af9      	ldrb	r1, [r7, #11]
 80084c0:	233a      	movs	r3, #58	; 0x3a
 80084c2:	2202      	movs	r2, #2
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f9c6 	bl	8008856 <SCSI_SenseCode>
    return -1;
 80084ca:	f04f 33ff 	mov.w	r3, #4294967295
 80084ce:	e074      	b.n	80085ba <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	330a      	adds	r3, #10
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	330b      	adds	r3, #11
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80084e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	330c      	adds	r3, #12
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80084ea:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80084ec:	687a      	ldr	r2, [r7, #4]
 80084ee:	320d      	adds	r2, #13
 80084f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80084f2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80084f4:	69bb      	ldr	r3, [r7, #24]
 80084f6:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80084f8:	2300      	movs	r3, #0
 80084fa:	77fb      	strb	r3, [r7, #31]
 80084fc:	e007      	b.n	800850e <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80084fe:	7ffb      	ldrb	r3, [r7, #31]
 8008500:	69ba      	ldr	r2, [r7, #24]
 8008502:	4413      	add	r3, r2
 8008504:	2200      	movs	r2, #0
 8008506:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8008508:	7ffb      	ldrb	r3, [r7, #31]
 800850a:	3301      	adds	r3, #1
 800850c:	77fb      	strb	r3, [r7, #31]
 800850e:	7ffa      	ldrb	r2, [r7, #31]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	429a      	cmp	r2, r3
 8008516:	d3f2      	bcc.n	80084fe <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800851e:	3b01      	subs	r3, #1
 8008520:	0e1b      	lsrs	r3, r3, #24
 8008522:	b2da      	uxtb	r2, r3
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800852e:	3b01      	subs	r3, #1
 8008530:	0c1b      	lsrs	r3, r3, #16
 8008532:	b2da      	uxtb	r2, r3
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800853e:	3b01      	subs	r3, #1
 8008540:	0a1b      	lsrs	r3, r3, #8
 8008542:	b2da      	uxtb	r2, r3
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800854e:	b2db      	uxtb	r3, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	b2da      	uxtb	r2, r3
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800855e:	161b      	asrs	r3, r3, #24
 8008560:	b2da      	uxtb	r2, r3
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800856c:	141b      	asrs	r3, r3, #16
 800856e:	b2da      	uxtb	r2, r3
 8008570:	69bb      	ldr	r3, [r7, #24]
 8008572:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800857a:	0a1b      	lsrs	r3, r3, #8
 800857c:	b29b      	uxth	r3, r3
 800857e:	b2da      	uxtb	r2, r3
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800858a:	b2da      	uxtb	r2, r3
 800858c:	69bb      	ldr	r3, [r7, #24]
 800858e:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	330a      	adds	r3, #10
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	330b      	adds	r3, #11
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80085a0:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	330c      	adds	r3, #12
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80085aa:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	320d      	adds	r2, #13
 80085b0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80085b2:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80085b4:	69bb      	ldr	r3, [r7, #24]
 80085b6:	60da      	str	r2, [r3, #12]

  return 0;
 80085b8:	2300      	movs	r3, #0
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3720      	adds	r7, #32
 80085be:	46bd      	mov	sp, r7
 80085c0:	bd80      	pop	{r7, pc}

080085c2 <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80085c2:	b580      	push	{r7, lr}
 80085c4:	b088      	sub	sp, #32
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	60f8      	str	r0, [r7, #12]
 80085ca:	460b      	mov	r3, r1
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d6:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d102      	bne.n	80085e4 <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 80085de:	f04f 33ff 	mov.w	r3, #4294967295
 80085e2:	e05c      	b.n	800869e <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f107 0214 	add.w	r2, r7, #20
 80085f0:	f107 0110 	add.w	r1, r7, #16
 80085f4:	7af8      	ldrb	r0, [r7, #11]
 80085f6:	4798      	blx	r3
 80085f8:	4603      	mov	r3, r0
 80085fa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80085fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d104      	bne.n	800860e <SCSI_ReadFormatCapacity+0x4c>
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800860a:	2b02      	cmp	r3, #2
 800860c:	d108      	bne.n	8008620 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800860e:	7af9      	ldrb	r1, [r7, #11]
 8008610:	233a      	movs	r3, #58	; 0x3a
 8008612:	2202      	movs	r2, #2
 8008614:	68f8      	ldr	r0, [r7, #12]
 8008616:	f000 f91e 	bl	8008856 <SCSI_SenseCode>
    return -1;
 800861a:	f04f 33ff 	mov.w	r3, #4294967295
 800861e:	e03e      	b.n	800869e <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 8008620:	2300      	movs	r3, #0
 8008622:	83fb      	strh	r3, [r7, #30]
 8008624:	e007      	b.n	8008636 <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 8008626:	8bfb      	ldrh	r3, [r7, #30]
 8008628:	69ba      	ldr	r2, [r7, #24]
 800862a:	4413      	add	r3, r2
 800862c:	2200      	movs	r2, #0
 800862e:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8008630:	8bfb      	ldrh	r3, [r7, #30]
 8008632:	3301      	adds	r3, #1
 8008634:	83fb      	strh	r3, [r7, #30]
 8008636:	8bfb      	ldrh	r3, [r7, #30]
 8008638:	2b0b      	cmp	r3, #11
 800863a:	d9f4      	bls.n	8008626 <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	2208      	movs	r2, #8
 8008640:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	3b01      	subs	r3, #1
 8008646:	0e1b      	lsrs	r3, r3, #24
 8008648:	b2da      	uxtb	r2, r3
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	3b01      	subs	r3, #1
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	b2da      	uxtb	r2, r3
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	3b01      	subs	r3, #1
 800865e:	0a1b      	lsrs	r3, r3, #8
 8008660:	b2da      	uxtb	r2, r3
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	b2db      	uxtb	r3, r3
 800866a:	3b01      	subs	r3, #1
 800866c:	b2da      	uxtb	r2, r3
 800866e:	69bb      	ldr	r3, [r7, #24]
 8008670:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8008672:	69bb      	ldr	r3, [r7, #24]
 8008674:	2202      	movs	r2, #2
 8008676:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008678:	8abb      	ldrh	r3, [r7, #20]
 800867a:	141b      	asrs	r3, r3, #16
 800867c:	b2da      	uxtb	r2, r3
 800867e:	69bb      	ldr	r3, [r7, #24]
 8008680:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8008682:	8abb      	ldrh	r3, [r7, #20]
 8008684:	0a1b      	lsrs	r3, r3, #8
 8008686:	b29b      	uxth	r3, r3
 8008688:	b2da      	uxtb	r2, r3
 800868a:	69bb      	ldr	r3, [r7, #24]
 800868c:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800868e:	8abb      	ldrh	r3, [r7, #20]
 8008690:	b2da      	uxtb	r2, r3
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8008696:	69bb      	ldr	r3, [r7, #24]
 8008698:	220c      	movs	r2, #12
 800869a:	60da      	str	r2, [r3, #12]

  return 0;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3720      	adds	r7, #32
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
	...

080086a8 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80086a8:	b580      	push	{r7, lr}
 80086aa:	b086      	sub	sp, #24
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	60f8      	str	r0, [r7, #12]
 80086b0:	460b      	mov	r3, r1
 80086b2:	607a      	str	r2, [r7, #4]
 80086b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086bc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80086be:	2317      	movs	r3, #23
 80086c0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d102      	bne.n	80086ce <SCSI_ModeSense6+0x26>
  {
    return -1;
 80086c8:	f04f 33ff 	mov.w	r3, #4294967295
 80086cc:	e011      	b.n	80086f2 <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3304      	adds	r3, #4
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	8afa      	ldrh	r2, [r7, #22]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d303      	bcc.n	80086e4 <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80086e4:	8afb      	ldrh	r3, [r7, #22]
 80086e6:	461a      	mov	r2, r3
 80086e8:	4904      	ldr	r1, [pc, #16]	; (80086fc <SCSI_ModeSense6+0x54>)
 80086ea:	6938      	ldr	r0, [r7, #16]
 80086ec:	f000 fdbc 	bl	8009268 <SCSI_UpdateBotData>

  return 0;
 80086f0:	2300      	movs	r3, #0
}
 80086f2:	4618      	mov	r0, r3
 80086f4:	3718      	adds	r7, #24
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000318 	.word	0x20000318

08008700 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	460b      	mov	r3, r1
 800870a:	607a      	str	r2, [r7, #4]
 800870c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008714:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8008716:	231b      	movs	r3, #27
 8008718:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <SCSI_ModeSense10+0x26>
  {
    return -1;
 8008720:	f04f 33ff 	mov.w	r3, #4294967295
 8008724:	e011      	b.n	800874a <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	3308      	adds	r3, #8
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	b29b      	uxth	r3, r3
 800872e:	8afa      	ldrh	r2, [r7, #22]
 8008730:	429a      	cmp	r2, r3
 8008732:	d303      	bcc.n	800873c <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	3308      	adds	r3, #8
 8008738:	781b      	ldrb	r3, [r3, #0]
 800873a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800873c:	8afb      	ldrh	r3, [r7, #22]
 800873e:	461a      	mov	r2, r3
 8008740:	4904      	ldr	r1, [pc, #16]	; (8008754 <SCSI_ModeSense10+0x54>)
 8008742:	6938      	ldr	r0, [r7, #16]
 8008744:	f000 fd90 	bl	8009268 <SCSI_UpdateBotData>

  return 0;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3718      	adds	r7, #24
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20000330 	.word	0x20000330

08008758 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b086      	sub	sp, #24
 800875c:	af00      	add	r7, sp, #0
 800875e:	60f8      	str	r0, [r7, #12]
 8008760:	460b      	mov	r3, r1
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800876c:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d102      	bne.n	800877a <SCSI_RequestSense+0x22>
  {
    return -1;
 8008774:	f04f 33ff 	mov.w	r3, #4294967295
 8008778:	e069      	b.n	800884e <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008780:	2b00      	cmp	r3, #0
 8008782:	d10a      	bne.n	800879a <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800878a:	2320      	movs	r3, #32
 800878c:	2205      	movs	r2, #5
 800878e:	68f8      	ldr	r0, [r7, #12]
 8008790:	f000 f861 	bl	8008856 <SCSI_SenseCode>
    return -1;
 8008794:	f04f 33ff 	mov.w	r3, #4294967295
 8008798:	e059      	b.n	800884e <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800879a:	2300      	movs	r3, #0
 800879c:	75fb      	strb	r3, [r7, #23]
 800879e:	e007      	b.n	80087b0 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 80087a0:	7dfb      	ldrb	r3, [r7, #23]
 80087a2:	693a      	ldr	r2, [r7, #16]
 80087a4:	4413      	add	r3, r2
 80087a6:	2200      	movs	r2, #0
 80087a8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80087aa:	7dfb      	ldrb	r3, [r7, #23]
 80087ac:	3301      	adds	r3, #1
 80087ae:	75fb      	strb	r3, [r7, #23]
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	2b11      	cmp	r3, #17
 80087b4:	d9f4      	bls.n	80087a0 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	2270      	movs	r2, #112	; 0x70
 80087ba:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	220c      	movs	r2, #12
 80087c0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d02e      	beq.n	8008830 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80087d8:	461a      	mov	r2, r3
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3248      	adds	r2, #72	; 0x48
 80087de:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80087ec:	693a      	ldr	r2, [r7, #16]
 80087ee:	3348      	adds	r3, #72	; 0x48
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	4413      	add	r3, r2
 80087f4:	791a      	ldrb	r2, [r3, #4]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80087fa:	693b      	ldr	r3, [r7, #16]
 80087fc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008800:	693a      	ldr	r2, [r7, #16]
 8008802:	3348      	adds	r3, #72	; 0x48
 8008804:	00db      	lsls	r3, r3, #3
 8008806:	4413      	add	r3, r2
 8008808:	795a      	ldrb	r2, [r3, #5]
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008814:	3301      	adds	r3, #1
 8008816:	b2da      	uxtb	r2, r3
 8008818:	693b      	ldr	r3, [r7, #16]
 800881a:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008824:	2b04      	cmp	r3, #4
 8008826:	d103      	bne.n	8008830 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	2200      	movs	r2, #0
 800882c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	2212      	movs	r2, #18
 8008834:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	3304      	adds	r3, #4
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b12      	cmp	r3, #18
 800883e:	d805      	bhi.n	800884c <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	3304      	adds	r3, #4
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	461a      	mov	r2, r3
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	3718      	adds	r7, #24
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8008856:	b480      	push	{r7}
 8008858:	b085      	sub	sp, #20
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
 800885e:	4608      	mov	r0, r1
 8008860:	4611      	mov	r1, r2
 8008862:	461a      	mov	r2, r3
 8008864:	4603      	mov	r3, r0
 8008866:	70fb      	strb	r3, [r7, #3]
 8008868:	460b      	mov	r3, r1
 800886a:	70bb      	strb	r3, [r7, #2]
 800886c:	4613      	mov	r3, r2
 800886e:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008876:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d02c      	beq.n	80088d8 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008884:	461a      	mov	r2, r3
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	3248      	adds	r2, #72	; 0x48
 800888a:	78b9      	ldrb	r1, [r7, #2]
 800888c:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008896:	68fa      	ldr	r2, [r7, #12]
 8008898:	3348      	adds	r3, #72	; 0x48
 800889a:	00db      	lsls	r3, r3, #3
 800889c:	4413      	add	r3, r2
 800889e:	787a      	ldrb	r2, [r7, #1]
 80088a0:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80088a8:	68fa      	ldr	r2, [r7, #12]
 80088aa:	3348      	adds	r3, #72	; 0x48
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	4413      	add	r3, r2
 80088b0:	2200      	movs	r2, #0
 80088b2:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80088ba:	3301      	adds	r3, #1
 80088bc:	b2da      	uxtb	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	d105      	bne.n	80088da <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 80088d6:	e000      	b.n	80088da <SCSI_SenseCode+0x84>
    return;
 80088d8:	bf00      	nop
  }
}
 80088da:	3714      	adds	r7, #20
 80088dc:	46bd      	mov	sp, r7
 80088de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e2:	4770      	bx	lr

080088e4 <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	460b      	mov	r3, r1
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088f8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d102      	bne.n	8008906 <SCSI_StartStopUnit+0x22>
  {
    return -1;
 8008900:	f04f 33ff 	mov.w	r3, #4294967295
 8008904:	e03b      	b.n	800897e <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800890c:	2b01      	cmp	r3, #1
 800890e:	d10f      	bne.n	8008930 <SCSI_StartStopUnit+0x4c>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	3304      	adds	r3, #4
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d108      	bne.n	8008930 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800891e:	7af9      	ldrb	r1, [r7, #11]
 8008920:	2324      	movs	r3, #36	; 0x24
 8008922:	2205      	movs	r2, #5
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff ff96 	bl	8008856 <SCSI_SenseCode>

    return -1;
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	e026      	b.n	800897e <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	3304      	adds	r3, #4
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	f003 0303 	and.w	r3, r3, #3
 800893a:	2b01      	cmp	r3, #1
 800893c:	d104      	bne.n	8008948 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008946:	e016      	b.n	8008976 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	3304      	adds	r3, #4
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	f003 0303 	and.w	r3, r3, #3
 8008952:	2b02      	cmp	r3, #2
 8008954:	d104      	bne.n	8008960 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	2202      	movs	r2, #2
 800895a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800895e:	e00a      	b.n	8008976 <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	781b      	ldrb	r3, [r3, #0]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	2b03      	cmp	r3, #3
 800896c:	d103      	bne.n	8008976 <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	2200      	movs	r2, #0
 800897a:	60da      	str	r2, [r3, #12]

  return 0;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3718      	adds	r7, #24
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}

08008986 <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008986:	b480      	push	{r7}
 8008988:	b087      	sub	sp, #28
 800898a:	af00      	add	r7, sp, #0
 800898c:	60f8      	str	r0, [r7, #12]
 800898e:	460b      	mov	r3, r1
 8008990:	607a      	str	r2, [r7, #4]
 8008992:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800899a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800899c:	697b      	ldr	r3, [r7, #20]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d102      	bne.n	80089a8 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 80089a2:	f04f 33ff 	mov.w	r3, #4294967295
 80089a6:	e011      	b.n	80089cc <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	3304      	adds	r3, #4
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d104      	bne.n	80089bc <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80089b2:	697b      	ldr	r3, [r7, #20]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80089ba:	e003      	b.n	80089c4 <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 80089bc:	697b      	ldr	r3, [r7, #20]
 80089be:	2201      	movs	r2, #1
 80089c0:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2200      	movs	r2, #0
 80089c8:	60da      	str	r2, [r3, #12]

  return 0;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	460b      	mov	r3, r1
 80089e2:	607a      	str	r2, [r7, #4]
 80089e4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089ec:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d102      	bne.n	80089fa <SCSI_Read10+0x22>
  {
    return -1;
 80089f4:	f04f 33ff 	mov.w	r3, #4294967295
 80089f8:	e08a      	b.n	8008b10 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	7a1b      	ldrb	r3, [r3, #8]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d17c      	bne.n	8008afc <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008a08:	b25b      	sxtb	r3, r3
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	db0a      	blt.n	8008a24 <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008a14:	2320      	movs	r3, #32
 8008a16:	2205      	movs	r2, #5
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f7ff ff1c 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	e075      	b.n	8008b10 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008a2a:	2b02      	cmp	r3, #2
 8008a2c:	d108      	bne.n	8008a40 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008a2e:	7af9      	ldrb	r1, [r7, #11]
 8008a30:	233a      	movs	r3, #58	; 0x3a
 8008a32:	2202      	movs	r2, #2
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff ff0e 	bl	8008856 <SCSI_SenseCode>

      return -1;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	e067      	b.n	8008b10 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a46:	689b      	ldr	r3, [r3, #8]
 8008a48:	7afa      	ldrb	r2, [r7, #11]
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008a54:	7af9      	ldrb	r1, [r7, #11]
 8008a56:	233a      	movs	r3, #58	; 0x3a
 8008a58:	2202      	movs	r2, #2
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fefb 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	e054      	b.n	8008b10 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3303      	adds	r3, #3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a76:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008a80:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	3205      	adds	r2, #5
 8008a86:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008a88:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3307      	adds	r3, #7
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	687a      	ldr	r2, [r7, #4]
 8008a9a:	3208      	adds	r2, #8
 8008a9c:	7812      	ldrb	r2, [r2, #0]
 8008a9e:	431a      	orrs	r2, r3
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ab2:	7af9      	ldrb	r1, [r7, #11]
 8008ab4:	68f8      	ldr	r0, [r7, #12]
 8008ab6:	f000 faad 	bl	8009014 <SCSI_CheckAddressRange>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	da02      	bge.n	8008ac6 <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac4:	e024      	b.n	8008b10 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ad2:	6979      	ldr	r1, [r7, #20]
 8008ad4:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008ad8:	fb01 f303 	mul.w	r3, r1, r3
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d00a      	beq.n	8008af6 <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008ae0:	697b      	ldr	r3, [r7, #20]
 8008ae2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008ae6:	2320      	movs	r3, #32
 8008ae8:	2205      	movs	r2, #5
 8008aea:	68f8      	ldr	r0, [r7, #12]
 8008aec:	f7ff feb3 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008af0:	f04f 33ff 	mov.w	r3, #4294967295
 8008af4:	e00c      	b.n	8008b10 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	2202      	movs	r2, #2
 8008afa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b02:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008b04:	7afb      	ldrb	r3, [r7, #11]
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f000 faab 	bl	8009064 <SCSI_ProcessRead>
 8008b0e:	4603      	mov	r3, r0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3718      	adds	r7, #24
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}

08008b18 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b086      	sub	sp, #24
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	460b      	mov	r3, r1
 8008b22:	607a      	str	r2, [r7, #4]
 8008b24:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b2c:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d102      	bne.n	8008b3a <SCSI_Read12+0x22>
  {
    return -1;
 8008b34:	f04f 33ff 	mov.w	r3, #4294967295
 8008b38:	e095      	b.n	8008c66 <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	7a1b      	ldrb	r3, [r3, #8]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	f040 8087 	bne.w	8008c52 <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008b4a:	b25b      	sxtb	r3, r3
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	db0a      	blt.n	8008b66 <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008b56:	2320      	movs	r3, #32
 8008b58:	2205      	movs	r2, #5
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f7ff fe7b 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008b60:	f04f 33ff 	mov.w	r3, #4294967295
 8008b64:	e07f      	b.n	8008c66 <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008b6c:	2b02      	cmp	r3, #2
 8008b6e:	d108      	bne.n	8008b82 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b70:	7af9      	ldrb	r1, [r7, #11]
 8008b72:	233a      	movs	r3, #58	; 0x3a
 8008b74:	2202      	movs	r2, #2
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	f7ff fe6d 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b80:	e071      	b.n	8008c66 <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	7afa      	ldrb	r2, [r7, #11]
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d008      	beq.n	8008ba8 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008b96:	7af9      	ldrb	r1, [r7, #11]
 8008b98:	233a      	movs	r3, #58	; 0x3a
 8008b9a:	2202      	movs	r2, #2
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7ff fe5a 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba6:	e05e      	b.n	8008c66 <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3302      	adds	r3, #2
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3303      	adds	r3, #3
 8008bb4:	781b      	ldrb	r3, [r3, #0]
 8008bb6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008bb8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008bc2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008bc4:	687a      	ldr	r2, [r7, #4]
 8008bc6:	3205      	adds	r2, #5
 8008bc8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008bca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	3306      	adds	r3, #6
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	3307      	adds	r3, #7
 8008bde:	781b      	ldrb	r3, [r3, #0]
 8008be0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008be2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3308      	adds	r3, #8
 8008be8:	781b      	ldrb	r3, [r3, #0]
 8008bea:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008bec:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008bee:	687a      	ldr	r2, [r7, #4]
 8008bf0:	3209      	adds	r2, #9
 8008bf2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008bf4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c08:	7af9      	ldrb	r1, [r7, #11]
 8008c0a:	68f8      	ldr	r0, [r7, #12]
 8008c0c:	f000 fa02 	bl	8009014 <SCSI_CheckAddressRange>
 8008c10:	4603      	mov	r3, r0
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	da02      	bge.n	8008c1c <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008c16:	f04f 33ff 	mov.w	r3, #4294967295
 8008c1a:	e024      	b.n	8008c66 <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c28:	6979      	ldr	r1, [r7, #20]
 8008c2a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008c2e:	fb01 f303 	mul.w	r3, r1, r3
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d00a      	beq.n	8008c4c <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	2205      	movs	r2, #5
 8008c40:	68f8      	ldr	r0, [r7, #12]
 8008c42:	f7ff fe08 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008c46:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4a:	e00c      	b.n	8008c66 <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c58:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008c5a:	7afb      	ldrb	r3, [r7, #11]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 fa00 	bl	8009064 <SCSI_ProcessRead>
 8008c64:	4603      	mov	r3, r0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	3718      	adds	r7, #24
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	bd80      	pop	{r7, pc}

08008c6e <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008c6e:	b580      	push	{r7, lr}
 8008c70:	b086      	sub	sp, #24
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	60f8      	str	r0, [r7, #12]
 8008c76:	460b      	mov	r3, r1
 8008c78:	607a      	str	r2, [r7, #4]
 8008c7a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c82:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d102      	bne.n	8008c90 <SCSI_Write10+0x22>
  {
    return -1;
 8008c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8e:	e0af      	b.n	8008df0 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	7a1b      	ldrb	r3, [r3, #8]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 80a5 	bne.w	8008de4 <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008caa:	2320      	movs	r3, #32
 8008cac:	2205      	movs	r2, #5
 8008cae:	68f8      	ldr	r0, [r7, #12]
 8008cb0:	f7ff fdd1 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8008cb8:	e09a      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008cc0:	b25b      	sxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	da0a      	bge.n	8008cdc <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008ccc:	2320      	movs	r3, #32
 8008cce:	2205      	movs	r2, #5
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7ff fdc0 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cda:	e089      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	7afa      	ldrb	r2, [r7, #11]
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	4798      	blx	r3
 8008cea:	4603      	mov	r3, r0
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d008      	beq.n	8008d02 <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008cf0:	7af9      	ldrb	r1, [r7, #11]
 8008cf2:	233a      	movs	r3, #58	; 0x3a
 8008cf4:	2202      	movs	r2, #2
 8008cf6:	68f8      	ldr	r0, [r7, #12]
 8008cf8:	f7ff fdad 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008cfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008d00:	e076      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	7afa      	ldrb	r2, [r7, #11]
 8008d0c:	4610      	mov	r0, r2
 8008d0e:	4798      	blx	r3
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d008      	beq.n	8008d28 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008d16:	7af9      	ldrb	r1, [r7, #11]
 8008d18:	2327      	movs	r3, #39	; 0x27
 8008d1a:	2202      	movs	r2, #2
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fd9a 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008d22:	f04f 33ff 	mov.w	r3, #4294967295
 8008d26:	e063      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3302      	adds	r3, #2
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	3303      	adds	r3, #3
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008d38:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008d42:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	3205      	adds	r2, #5
 8008d48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008d4a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	3307      	adds	r3, #7
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	3208      	adds	r2, #8
 8008d5e:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008d60:	431a      	orrs	r2, r3
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d74:	7af9      	ldrb	r1, [r7, #11]
 8008d76:	68f8      	ldr	r0, [r7, #12]
 8008d78:	f000 f94c 	bl	8009014 <SCSI_CheckAddressRange>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	da02      	bge.n	8008d88 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008d82:	f04f 33ff 	mov.w	r3, #4294967295
 8008d86:	e033      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d8e:	697a      	ldr	r2, [r7, #20]
 8008d90:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008d94:	fb02 f303 	mul.w	r3, r2, r3
 8008d98:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d00a      	beq.n	8008dbc <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008dac:	2320      	movs	r3, #32
 8008dae:	2205      	movs	r2, #5
 8008db0:	68f8      	ldr	r0, [r7, #12]
 8008db2:	f7ff fd50 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008db6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dba:	e019      	b.n	8008df0 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dc2:	bf28      	it	cs
 8008dc4:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008dc8:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	2201      	movs	r2, #1
 8008dce:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	f103 0210 	add.w	r2, r3, #16
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	2101      	movs	r1, #1
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 fdd1 	bl	8009982 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e005      	b.n	8008df0 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 8008de4:	7afb      	ldrb	r3, [r7, #11]
 8008de6:	4619      	mov	r1, r3
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f9b4 	bl	8009156 <SCSI_ProcessWrite>
 8008dee:	4603      	mov	r3, r0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3718      	adds	r7, #24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd80      	pop	{r7, pc}

08008df8 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b086      	sub	sp, #24
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	60f8      	str	r0, [r7, #12]
 8008e00:	460b      	mov	r3, r1
 8008e02:	607a      	str	r2, [r7, #4]
 8008e04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008e0c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d102      	bne.n	8008e1a <SCSI_Write12+0x22>
  {
    return -1;
 8008e14:	f04f 33ff 	mov.w	r3, #4294967295
 8008e18:	e0bf      	b.n	8008f9a <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	7a1b      	ldrb	r3, [r3, #8]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	f040 80b5 	bne.w	8008f8e <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008e34:	2320      	movs	r3, #32
 8008e36:	2205      	movs	r2, #5
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f7ff fd0c 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e42:	e0aa      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008e4a:	b25b      	sxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	da0a      	bge.n	8008e66 <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008e50:	697b      	ldr	r3, [r7, #20]
 8008e52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008e56:	2320      	movs	r3, #32
 8008e58:	2205      	movs	r2, #5
 8008e5a:	68f8      	ldr	r0, [r7, #12]
 8008e5c:	f7ff fcfb 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008e60:	f04f 33ff 	mov.w	r3, #4294967295
 8008e64:	e099      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e6c:	689b      	ldr	r3, [r3, #8]
 8008e6e:	7afa      	ldrb	r2, [r7, #11]
 8008e70:	4610      	mov	r0, r2
 8008e72:	4798      	blx	r3
 8008e74:	4603      	mov	r3, r0
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00b      	beq.n	8008e92 <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008e7a:	7af9      	ldrb	r1, [r7, #11]
 8008e7c:	233a      	movs	r3, #58	; 0x3a
 8008e7e:	2202      	movs	r2, #2
 8008e80:	68f8      	ldr	r0, [r7, #12]
 8008e82:	f7ff fce8 	bl	8008856 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	2205      	movs	r2, #5
 8008e8a:	721a      	strb	r2, [r3, #8]
      return -1;
 8008e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008e90:	e083      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	7afa      	ldrb	r2, [r7, #11]
 8008e9c:	4610      	mov	r0, r2
 8008e9e:	4798      	blx	r3
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d00b      	beq.n	8008ebe <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008ea6:	7af9      	ldrb	r1, [r7, #11]
 8008ea8:	2327      	movs	r3, #39	; 0x27
 8008eaa:	2202      	movs	r2, #2
 8008eac:	68f8      	ldr	r0, [r7, #12]
 8008eae:	f7ff fcd2 	bl	8008856 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	2205      	movs	r2, #5
 8008eb6:	721a      	strb	r2, [r3, #8]
      return -1;
 8008eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ebc:	e06d      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3303      	adds	r3, #3
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ece:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008ed8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	3205      	adds	r2, #5
 8008ede:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008ee0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	3306      	adds	r3, #6
 8008eec:	781b      	ldrb	r3, [r3, #0]
 8008eee:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3307      	adds	r3, #7
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008ef8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	3308      	adds	r3, #8
 8008efe:	781b      	ldrb	r3, [r3, #0]
 8008f00:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008f02:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	3209      	adds	r2, #9
 8008f08:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008f0a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008f1e:	7af9      	ldrb	r1, [r7, #11]
 8008f20:	68f8      	ldr	r0, [r7, #12]
 8008f22:	f000 f877 	bl	8009014 <SCSI_CheckAddressRange>
 8008f26:	4603      	mov	r3, r0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da02      	bge.n	8008f32 <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008f2c:	f04f 33ff 	mov.w	r3, #4294967295
 8008f30:	e033      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008f32:	697b      	ldr	r3, [r7, #20]
 8008f34:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008f3e:	fb02 f303 	mul.w	r3, r2, r3
 8008f42:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d00a      	beq.n	8008f66 <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008f56:	2320      	movs	r3, #32
 8008f58:	2205      	movs	r2, #5
 8008f5a:	68f8      	ldr	r0, [r7, #12]
 8008f5c:	f7ff fc7b 	bl	8008856 <SCSI_SenseCode>
      return -1;
 8008f60:	f04f 33ff 	mov.w	r3, #4294967295
 8008f64:	e019      	b.n	8008f9a <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f6c:	bf28      	it	cs
 8008f6e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008f72:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	2201      	movs	r2, #1
 8008f78:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	f103 0210 	add.w	r2, r3, #16
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	2101      	movs	r1, #1
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 fcfc 	bl	8009982 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	e005      	b.n	8008f9a <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8008f8e:	7afb      	ldrb	r3, [r7, #11]
 8008f90:	4619      	mov	r1, r3
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 f8df 	bl	8009156 <SCSI_ProcessWrite>
 8008f98:	4603      	mov	r3, r0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3718      	adds	r7, #24
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}

08008fa2 <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008fa2:	b580      	push	{r7, lr}
 8008fa4:	b086      	sub	sp, #24
 8008fa6:	af00      	add	r7, sp, #0
 8008fa8:	60f8      	str	r0, [r7, #12]
 8008faa:	460b      	mov	r3, r1
 8008fac:	607a      	str	r2, [r7, #4]
 8008fae:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008fb6:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008fb8:	697b      	ldr	r3, [r7, #20]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <SCSI_Verify10+0x22>
  {
    return -1;
 8008fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8008fc2:	e023      	b.n	800900c <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	3301      	adds	r3, #1
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	f003 0302 	and.w	r3, r3, #2
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d008      	beq.n	8008fe4 <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008fd2:	7af9      	ldrb	r1, [r7, #11]
 8008fd4:	2324      	movs	r3, #36	; 0x24
 8008fd6:	2205      	movs	r2, #5
 8008fd8:	68f8      	ldr	r0, [r7, #12]
 8008fda:	f7ff fc3c 	bl	8008856 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008fde:	f04f 33ff 	mov.w	r3, #4294967295
 8008fe2:	e013      	b.n	800900c <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ff0:	7af9      	ldrb	r1, [r7, #11]
 8008ff2:	68f8      	ldr	r0, [r7, #12]
 8008ff4:	f000 f80e 	bl	8009014 <SCSI_CheckAddressRange>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	da02      	bge.n	8009004 <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8008ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8009002:	e003      	b.n	800900c <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	2200      	movs	r2, #0
 8009008:	60da      	str	r2, [r3, #12]

  return 0;
 800900a:	2300      	movs	r3, #0
}
 800900c:	4618      	mov	r0, r3
 800900e:	3718      	adds	r7, #24
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b086      	sub	sp, #24
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	607a      	str	r2, [r7, #4]
 800901e:	603b      	str	r3, [r7, #0]
 8009020:	460b      	mov	r3, r1
 8009022:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800902a:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d102      	bne.n	8009038 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8009032:	f04f 33ff 	mov.w	r3, #4294967295
 8009036:	e011      	b.n	800905c <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	441a      	add	r2, r3
 800903e:	697b      	ldr	r3, [r7, #20]
 8009040:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8009044:	429a      	cmp	r2, r3
 8009046:	d908      	bls.n	800905a <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8009048:	7af9      	ldrb	r1, [r7, #11]
 800904a:	2321      	movs	r3, #33	; 0x21
 800904c:	2205      	movs	r2, #5
 800904e:	68f8      	ldr	r0, [r7, #12]
 8009050:	f7ff fc01 	bl	8008856 <SCSI_SenseCode>
    return -1;
 8009054:	f04f 33ff 	mov.w	r3, #4294967295
 8009058:	e000      	b.n	800905c <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}

08009064 <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009064:	b590      	push	{r4, r7, lr}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009076:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800907e:	68fa      	ldr	r2, [r7, #12]
 8009080:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009084:	fb02 f303 	mul.w	r3, r2, r3
 8009088:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d102      	bne.n	8009096 <SCSI_ProcessRead+0x32>
  {
    return -1;
 8009090:	f04f 33ff 	mov.w	r3, #4294967295
 8009094:	e05b      	b.n	800914e <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800909c:	bf28      	it	cs
 800909e:	f44f 7300 	movcs.w	r3, #512	; 0x200
 80090a2:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80090aa:	691c      	ldr	r4, [r3, #16]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f103 0110 	add.w	r1, r3, #16
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80090be:	4618      	mov	r0, r3
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	78f8      	ldrb	r0, [r7, #3]
 80090ca:	47a0      	blx	r4
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	da08      	bge.n	80090e4 <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 80090d2:	78f9      	ldrb	r1, [r7, #3]
 80090d4:	2311      	movs	r3, #17
 80090d6:	2204      	movs	r2, #4
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f7ff fbbc 	bl	8008856 <SCSI_SenseCode>
    return -1;
 80090de:	f04f 33ff 	mov.w	r3, #4294967295
 80090e2:	e034      	b.n	800914e <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	f103 0210 	add.w	r2, r3, #16
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	2181      	movs	r1, #129	; 0x81
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fc26 	bl	8009940 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8009100:	4619      	mov	r1, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	fbb3 f3f1 	udiv	r3, r3, r1
 8009108:	441a      	add	r2, r3
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800911c:	4619      	mov	r1, r3
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	fbb3 f3f1 	udiv	r3, r3, r1
 8009124:	1ad2      	subs	r2, r2, r3
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	1ad2      	subs	r2, r2, r3
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009142:	2b00      	cmp	r3, #0
 8009144:	d102      	bne.n	800914c <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2203      	movs	r2, #3
 800914a:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800914c:	2300      	movs	r3, #0
}
 800914e:	4618      	mov	r0, r3
 8009150:	3714      	adds	r7, #20
 8009152:	46bd      	mov	sp, r7
 8009154:	bd90      	pop	{r4, r7, pc}

08009156 <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8009156:	b590      	push	{r4, r7, lr}
 8009158:	b085      	sub	sp, #20
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
 800915e:	460b      	mov	r3, r1
 8009160:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009168:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8009176:	fb02 f303 	mul.w	r3, r2, r3
 800917a:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d102      	bne.n	8009188 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8009182:	f04f 33ff 	mov.w	r3, #4294967295
 8009186:	e06b      	b.n	8009260 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800918e:	bf28      	it	cs
 8009190:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8009194:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800919c:	695c      	ldr	r4, [r3, #20]
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f103 0110 	add.w	r1, r3, #16
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091b0:	4618      	mov	r0, r3
 80091b2:	68bb      	ldr	r3, [r7, #8]
 80091b4:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	78f8      	ldrb	r0, [r7, #3]
 80091bc:	47a0      	blx	r4
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	da08      	bge.n	80091d6 <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80091c4:	78f9      	ldrb	r1, [r7, #3]
 80091c6:	2303      	movs	r3, #3
 80091c8:	2204      	movs	r2, #4
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7ff fb43 	bl	8008856 <SCSI_SenseCode>
    return -1;
 80091d0:	f04f 33ff 	mov.w	r3, #4294967295
 80091d4:	e044      	b.n	8009260 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091e2:	4619      	mov	r1, r3
 80091e4:	68bb      	ldr	r3, [r7, #8]
 80091e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80091ea:	441a      	add	r2, r3
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 80091fe:	4619      	mov	r1, r3
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	fbb3 f3f1 	udiv	r3, r3, r1
 8009206:	1ad2      	subs	r2, r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	1ad2      	subs	r2, r2, r3
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009224:	2b00      	cmp	r3, #0
 8009226:	d104      	bne.n	8009232 <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8009228:	2100      	movs	r1, #0
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f7fe fdd8 	bl	8007de0 <MSC_BOT_SendCSW>
 8009230:	e015      	b.n	800925e <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8009238:	68fa      	ldr	r2, [r7, #12]
 800923a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800923e:	fb02 f303 	mul.w	r3, r2, r3
 8009242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009246:	bf28      	it	cs
 8009248:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800924c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f103 0210 	add.w	r2, r3, #16
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	2101      	movs	r1, #1
 8009258:	6878      	ldr	r0, [r7, #4]
 800925a:	f000 fb92 	bl	8009982 <USBD_LL_PrepareReceive>
  }

  return 0;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3714      	adds	r7, #20
 8009264:	46bd      	mov	sp, r7
 8009266:	bd90      	pop	{r4, r7, pc}

08009268 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	4613      	mov	r3, r2
 8009274:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8009276:	88fb      	ldrh	r3, [r7, #6]
 8009278:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d102      	bne.n	8009286 <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8009280:	f04f 33ff 	mov.w	r3, #4294967295
 8009284:	e013      	b.n	80092ae <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8009286:	8afa      	ldrh	r2, [r7, #22]
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800928c:	e00b      	b.n	80092a6 <SCSI_UpdateBotData+0x3e>
  {
    len--;
 800928e:	8afb      	ldrh	r3, [r7, #22]
 8009290:	3b01      	subs	r3, #1
 8009292:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8009294:	8afb      	ldrh	r3, [r7, #22]
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	441a      	add	r2, r3
 800929a:	8afb      	ldrh	r3, [r7, #22]
 800929c:	7811      	ldrb	r1, [r2, #0]
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4413      	add	r3, r2
 80092a2:	460a      	mov	r2, r1
 80092a4:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80092a6:	8afb      	ldrh	r3, [r7, #22]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d1f0      	bne.n	800928e <SCSI_UpdateBotData+0x26>
  }

  return 0;
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	371c      	adds	r7, #28
 80092b2:	46bd      	mov	sp, r7
 80092b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b8:	4770      	bx	lr

080092ba <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80092ba:	b480      	push	{r7}
 80092bc:	b083      	sub	sp, #12
 80092be:	af00      	add	r7, sp, #0
 80092c0:	4603      	mov	r3, r0
 80092c2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80092c4:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	370c      	adds	r7, #12
 80092ca:	46bd      	mov	sp, r7
 80092cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d0:	4770      	bx	lr

080092d2 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80092d2:	b580      	push	{r7, lr}
 80092d4:	b08e      	sub	sp, #56	; 0x38
 80092d6:	af00      	add	r7, sp, #0
 80092d8:	4603      	mov	r3, r0
 80092da:	60b9      	str	r1, [r7, #8]
 80092dc:	607a      	str	r2, [r7, #4]
 80092de:	73fb      	strb	r3, [r7, #15]
  sd_info_t info;
  int8_t ret = -1;
 80092e0:	23ff      	movs	r3, #255	; 0xff
 80092e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (sdIsDetected() == true)
 80092e6:	f7fa fb73 	bl	80039d0 <sdIsDetected>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00f      	beq.n	8009310 <STORAGE_GetCapacity_FS+0x3e>
  {
    sdGetInfo(&info);
 80092f0:	f107 0310 	add.w	r3, r7, #16
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fa fb81 	bl	80039fc <sdGetInfo>

    *block_num = info.log_block_numbers - 1;
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	1e5a      	subs	r2, r3, #1
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	601a      	str	r2, [r3, #0]
    *block_size = info.log_block_size;
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	b29a      	uxth	r2, r3
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	801a      	strh	r2, [r3, #0]
    ret = 0;
 800930a:	2300      	movs	r3, #0
 800930c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret;
 8009310:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009314:	4618      	mov	r0, r3
 8009316:	3738      	adds	r7, #56	; 0x38
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b084      	sub	sp, #16
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	71fb      	strb	r3, [r7, #7]
  static int8_t prev_status = 0;
  int8_t ret = -1;
 8009326:	23ff      	movs	r3, #255	; 0xff
 8009328:	73fb      	strb	r3, [r7, #15]

  if (sdIsDetected() == true)
 800932a:	f7fa fb51 	bl	80039d0 <sdIsDetected>
 800932e:	4603      	mov	r3, r0
 8009330:	2b00      	cmp	r3, #0
 8009332:	d00a      	beq.n	800934a <STORAGE_IsReady_FS+0x2e>
  {
    if (sdIsBusy() != true)
 8009334:	f7fa fbb8 	bl	8003aa8 <sdIsBusy>
 8009338:	4603      	mov	r3, r0
 800933a:	f083 0301 	eor.w	r3, r3, #1
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b00      	cmp	r3, #0
 8009342:	d00a      	beq.n	800935a <STORAGE_IsReady_FS+0x3e>
    {
      ret = 0;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]
 8009348:	e007      	b.n	800935a <STORAGE_IsReady_FS+0x3e>
    }
  }
  else if (prev_status == 0)
 800934a:	4b07      	ldr	r3, [pc, #28]	; (8009368 <STORAGE_IsReady_FS+0x4c>)
 800934c:	f993 3000 	ldrsb.w	r3, [r3]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d102      	bne.n	800935a <STORAGE_IsReady_FS+0x3e>
  {
    prev_status = -1;
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <STORAGE_IsReady_FS+0x4c>)
 8009356:	22ff      	movs	r2, #255	; 0xff
 8009358:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 800935a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}
 8009366:	bf00      	nop
 8009368:	20006a35 	.word	0x20006a35

0800936c <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8009376:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009378:	4618      	mov	r0, r3
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b086      	sub	sp, #24
 8009388:	af00      	add	r7, sp, #0
 800938a:	60b9      	str	r1, [r7, #8]
 800938c:	607a      	str	r2, [r7, #4]
 800938e:	461a      	mov	r2, r3
 8009390:	4603      	mov	r3, r0
 8009392:	73fb      	strb	r3, [r7, #15]
 8009394:	4613      	mov	r3, r2
 8009396:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;
 8009398:	23ff      	movs	r3, #255	; 0xff
 800939a:	75fb      	strb	r3, [r7, #23]

  if (sdIsDetected() == true)
 800939c:	f7fa fb18 	bl	80039d0 <sdIsDetected>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00b      	beq.n	80093be <STORAGE_Read_FS+0x3a>
  {
    if (sdReadBlocks(blk_addr, buf, blk_len, 1000) == true)
 80093a6:	89ba      	ldrh	r2, [r7, #12]
 80093a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f7fa fbb0 	bl	8003b14 <sdReadBlocks>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <STORAGE_Read_FS+0x3a>
    {
      ret = 0;
 80093ba:	2300      	movs	r3, #0
 80093bc:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 80093be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	3718      	adds	r7, #24
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b086      	sub	sp, #24
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	60b9      	str	r1, [r7, #8]
 80093d2:	607a      	str	r2, [r7, #4]
 80093d4:	461a      	mov	r2, r3
 80093d6:	4603      	mov	r3, r0
 80093d8:	73fb      	strb	r3, [r7, #15]
 80093da:	4613      	mov	r3, r2
 80093dc:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;
 80093de:	23ff      	movs	r3, #255	; 0xff
 80093e0:	75fb      	strb	r3, [r7, #23]

  if (sdIsDetected() == true)
 80093e2:	f7fa faf5 	bl	80039d0 <sdIsDetected>
 80093e6:	4603      	mov	r3, r0
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d00b      	beq.n	8009404 <STORAGE_Write_FS+0x3a>
  {
    if (sdWriteBlocks(blk_addr, buf, blk_len, 1000) == true)
 80093ec:	89ba      	ldrh	r2, [r7, #12]
 80093ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093f2:	68b9      	ldr	r1, [r7, #8]
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f7fa fbf7 	bl	8003be8 <sdWriteBlocks>
 80093fa:	4603      	mov	r3, r0
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d001      	beq.n	8009404 <STORAGE_Write_FS+0x3a>
    {
      ret = 0;
 8009400:	2300      	movs	r3, #0
 8009402:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8009404:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009408:	4618      	mov	r0, r3
 800940a:	3718      	adds	r7, #24
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8009410:	b480      	push	{r7}
 8009412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8009414:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8009416:	4618      	mov	r0, r3
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr

08009420 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b08a      	sub	sp, #40	; 0x28
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009428:	f107 0314 	add.w	r3, r7, #20
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
 8009430:	605a      	str	r2, [r3, #4]
 8009432:	609a      	str	r2, [r3, #8]
 8009434:	60da      	str	r2, [r3, #12]
 8009436:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009440:	d13a      	bne.n	80094b8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009442:	2300      	movs	r3, #0
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	4b1e      	ldr	r3, [pc, #120]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800944a:	4a1d      	ldr	r2, [pc, #116]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 800944c:	f043 0301 	orr.w	r3, r3, #1
 8009450:	6313      	str	r3, [r2, #48]	; 0x30
 8009452:	4b1b      	ldr	r3, [pc, #108]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009456:	f003 0301 	and.w	r3, r3, #1
 800945a:	613b      	str	r3, [r7, #16]
 800945c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800945e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009464:	2302      	movs	r3, #2
 8009466:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009468:	2300      	movs	r3, #0
 800946a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800946c:	2303      	movs	r3, #3
 800946e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009470:	230a      	movs	r3, #10
 8009472:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009474:	f107 0314 	add.w	r3, r7, #20
 8009478:	4619      	mov	r1, r3
 800947a:	4812      	ldr	r0, [pc, #72]	; (80094c4 <HAL_PCD_MspInit+0xa4>)
 800947c:	f005 fbde 	bl	800ec3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009480:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009484:	4a0e      	ldr	r2, [pc, #56]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800948a:	6353      	str	r3, [r2, #52]	; 0x34
 800948c:	2300      	movs	r3, #0
 800948e:	60fb      	str	r3, [r7, #12]
 8009490:	4b0b      	ldr	r3, [pc, #44]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009494:	4a0a      	ldr	r2, [pc, #40]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 8009496:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800949a:	6453      	str	r3, [r2, #68]	; 0x44
 800949c:	4b08      	ldr	r3, [pc, #32]	; (80094c0 <HAL_PCD_MspInit+0xa0>)
 800949e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094a4:	60fb      	str	r3, [r7, #12]
 80094a6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 80094a8:	2200      	movs	r2, #0
 80094aa:	2106      	movs	r1, #6
 80094ac:	2043      	movs	r0, #67	; 0x43
 80094ae:	f004 fd08 	bl	800dec2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094b2:	2043      	movs	r0, #67	; 0x43
 80094b4:	f004 fd21 	bl	800defa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094b8:	bf00      	nop
 80094ba:	3728      	adds	r7, #40	; 0x28
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40023800 	.word	0x40023800
 80094c4:	40020000 	.word	0x40020000

080094c8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fc f912 	bl	8005708 <USBD_LL_SetupStage>
}
 80094e4:	bf00      	nop
 80094e6:	3708      	adds	r7, #8
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b082      	sub	sp, #8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	460b      	mov	r3, r1
 80094f6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80094fe:	78fa      	ldrb	r2, [r7, #3]
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	00db      	lsls	r3, r3, #3
 8009506:	1a9b      	subs	r3, r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	78fb      	ldrb	r3, [r7, #3]
 8009514:	4619      	mov	r1, r3
 8009516:	f7fc f94c 	bl	80057b2 <USBD_LL_DataOutStage>
}
 800951a:	bf00      	nop
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009522:	b580      	push	{r7, lr}
 8009524:	b082      	sub	sp, #8
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
 800952a:	460b      	mov	r3, r1
 800952c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009534:	78fa      	ldrb	r2, [r7, #3]
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	4613      	mov	r3, r2
 800953a:	00db      	lsls	r3, r3, #3
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	009b      	lsls	r3, r3, #2
 8009540:	440b      	add	r3, r1
 8009542:	3348      	adds	r3, #72	; 0x48
 8009544:	681a      	ldr	r2, [r3, #0]
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	4619      	mov	r1, r3
 800954a:	f7fc f995 	bl	8005878 <USBD_LL_DataInStage>
}
 800954e:	bf00      	nop
 8009550:	3708      	adds	r7, #8
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009556:	b580      	push	{r7, lr}
 8009558:	b082      	sub	sp, #8
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009564:	4618      	mov	r0, r3
 8009566:	f7fc faa9 	bl	8005abc <USBD_LL_SOF>
}
 800956a:	bf00      	nop
 800956c:	3708      	adds	r7, #8
 800956e:	46bd      	mov	sp, r7
 8009570:	bd80      	pop	{r7, pc}

08009572 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009572:	b580      	push	{r7, lr}
 8009574:	b084      	sub	sp, #16
 8009576:	af00      	add	r7, sp, #0
 8009578:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800957a:	2301      	movs	r3, #1
 800957c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d001      	beq.n	800958a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009586:	f7f7 fde3 	bl	8001150 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009590:	7bfa      	ldrb	r2, [r7, #15]
 8009592:	4611      	mov	r1, r2
 8009594:	4618      	mov	r0, r3
 8009596:	f7fc fa53 	bl	8005a40 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fc f9ff 	bl	80059a4 <USBD_LL_Reset>
}
 80095a6:	bf00      	nop
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
	...

080095b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b082      	sub	sp, #8
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80095be:	4618      	mov	r0, r3
 80095c0:	f7fc fa4e 	bl	8005a60 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	687a      	ldr	r2, [r7, #4]
 80095d0:	6812      	ldr	r2, [r2, #0]
 80095d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80095d6:	f043 0301 	orr.w	r3, r3, #1
 80095da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d005      	beq.n	80095f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80095e4:	4b04      	ldr	r3, [pc, #16]	; (80095f8 <HAL_PCD_SuspendCallback+0x48>)
 80095e6:	691b      	ldr	r3, [r3, #16]
 80095e8:	4a03      	ldr	r2, [pc, #12]	; (80095f8 <HAL_PCD_SuspendCallback+0x48>)
 80095ea:	f043 0306 	orr.w	r3, r3, #6
 80095ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80095f0:	bf00      	nop
 80095f2:	3708      	adds	r7, #8
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	e000ed00 	.word	0xe000ed00

080095fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b082      	sub	sp, #8
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800960a:	4618      	mov	r0, r3
 800960c:	f7fc fa3e 	bl	8005a8c <USBD_LL_Resume>
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009618:	b580      	push	{r7, lr}
 800961a:	b082      	sub	sp, #8
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
 8009620:	460b      	mov	r3, r1
 8009622:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800962a:	78fa      	ldrb	r2, [r7, #3]
 800962c:	4611      	mov	r1, r2
 800962e:	4618      	mov	r0, r3
 8009630:	f7fc fa8c 	bl	8005b4c <USBD_LL_IsoOUTIncomplete>
}
 8009634:	bf00      	nop
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	460b      	mov	r3, r1
 8009646:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800964e:	78fa      	ldrb	r2, [r7, #3]
 8009650:	4611      	mov	r1, r2
 8009652:	4618      	mov	r0, r3
 8009654:	f7fc fa54 	bl	8005b00 <USBD_LL_IsoINIncomplete>
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800966e:	4618      	mov	r0, r3
 8009670:	f7fc fa92 	bl	8005b98 <USBD_LL_DevConnected>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800968a:	4618      	mov	r0, r3
 800968c:	f7fc fa8f 	bl	8005bae <USBD_LL_DevDisconnected>
}
 8009690:	bf00      	nop
 8009692:	3708      	adds	r7, #8
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	781b      	ldrb	r3, [r3, #0]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d13c      	bne.n	8009722 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096a8:	4a20      	ldr	r2, [pc, #128]	; (800972c <USBD_LL_Init+0x94>)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	4a1e      	ldr	r2, [pc, #120]	; (800972c <USBD_LL_Init+0x94>)
 80096b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096b8:	4b1c      	ldr	r3, [pc, #112]	; (800972c <USBD_LL_Init+0x94>)
 80096ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80096c0:	4b1a      	ldr	r3, [pc, #104]	; (800972c <USBD_LL_Init+0x94>)
 80096c2:	2204      	movs	r2, #4
 80096c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80096c6:	4b19      	ldr	r3, [pc, #100]	; (800972c <USBD_LL_Init+0x94>)
 80096c8:	2202      	movs	r2, #2
 80096ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80096cc:	4b17      	ldr	r3, [pc, #92]	; (800972c <USBD_LL_Init+0x94>)
 80096ce:	2200      	movs	r2, #0
 80096d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80096d2:	4b16      	ldr	r3, [pc, #88]	; (800972c <USBD_LL_Init+0x94>)
 80096d4:	2202      	movs	r2, #2
 80096d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80096d8:	4b14      	ldr	r3, [pc, #80]	; (800972c <USBD_LL_Init+0x94>)
 80096da:	2201      	movs	r2, #1
 80096dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80096de:	4b13      	ldr	r3, [pc, #76]	; (800972c <USBD_LL_Init+0x94>)
 80096e0:	2200      	movs	r2, #0
 80096e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80096e4:	4b11      	ldr	r3, [pc, #68]	; (800972c <USBD_LL_Init+0x94>)
 80096e6:	2200      	movs	r2, #0
 80096e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80096ea:	4b10      	ldr	r3, [pc, #64]	; (800972c <USBD_LL_Init+0x94>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80096f0:	4b0e      	ldr	r3, [pc, #56]	; (800972c <USBD_LL_Init+0x94>)
 80096f2:	2200      	movs	r2, #0
 80096f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80096f6:	480d      	ldr	r0, [pc, #52]	; (800972c <USBD_LL_Init+0x94>)
 80096f8:	f005 fc6f 	bl	800efda <HAL_PCD_Init>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d001      	beq.n	8009706 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009702:	f7f7 fd25 	bl	8001150 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009706:	2180      	movs	r1, #128	; 0x80
 8009708:	4808      	ldr	r0, [pc, #32]	; (800972c <USBD_LL_Init+0x94>)
 800970a:	f006 fdfa 	bl	8010302 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800970e:	2240      	movs	r2, #64	; 0x40
 8009710:	2100      	movs	r1, #0
 8009712:	4806      	ldr	r0, [pc, #24]	; (800972c <USBD_LL_Init+0x94>)
 8009714:	f006 fdae 	bl	8010274 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009718:	2280      	movs	r2, #128	; 0x80
 800971a:	2101      	movs	r1, #1
 800971c:	4803      	ldr	r0, [pc, #12]	; (800972c <USBD_LL_Init+0x94>)
 800971e:	f006 fda9 	bl	8010274 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009722:	2300      	movs	r3, #0
}
 8009724:	4618      	mov	r0, r3
 8009726:	3708      	adds	r7, #8
 8009728:	46bd      	mov	sp, r7
 800972a:	bd80      	pop	{r7, pc}
 800972c:	200083f4 	.word	0x200083f4

08009730 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009730:	b580      	push	{r7, lr}
 8009732:	b084      	sub	sp, #16
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800973c:	2300      	movs	r3, #0
 800973e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009746:	4618      	mov	r0, r3
 8009748:	f005 fd64 	bl	800f214 <HAL_PCD_Start>
 800974c:	4603      	mov	r3, r0
 800974e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009750:	7bfb      	ldrb	r3, [r7, #15]
 8009752:	4618      	mov	r0, r3
 8009754:	f000 f962 	bl	8009a1c <USBD_Get_USB_Status>
 8009758:	4603      	mov	r3, r0
 800975a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800975c:	7bbb      	ldrb	r3, [r7, #14]
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}

08009766 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009766:	b580      	push	{r7, lr}
 8009768:	b084      	sub	sp, #16
 800976a:	af00      	add	r7, sp, #0
 800976c:	6078      	str	r0, [r7, #4]
 800976e:	4608      	mov	r0, r1
 8009770:	4611      	mov	r1, r2
 8009772:	461a      	mov	r2, r3
 8009774:	4603      	mov	r3, r0
 8009776:	70fb      	strb	r3, [r7, #3]
 8009778:	460b      	mov	r3, r1
 800977a:	70bb      	strb	r3, [r7, #2]
 800977c:	4613      	mov	r3, r2
 800977e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009780:	2300      	movs	r3, #0
 8009782:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009784:	2300      	movs	r3, #0
 8009786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800978e:	78bb      	ldrb	r3, [r7, #2]
 8009790:	883a      	ldrh	r2, [r7, #0]
 8009792:	78f9      	ldrb	r1, [r7, #3]
 8009794:	f006 f948 	bl	800fa28 <HAL_PCD_EP_Open>
 8009798:	4603      	mov	r3, r0
 800979a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800979c:	7bfb      	ldrb	r3, [r7, #15]
 800979e:	4618      	mov	r0, r3
 80097a0:	f000 f93c 	bl	8009a1c <USBD_Get_USB_Status>
 80097a4:	4603      	mov	r3, r0
 80097a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097a8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
 80097ba:	460b      	mov	r3, r1
 80097bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097be:	2300      	movs	r3, #0
 80097c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c2:	2300      	movs	r3, #0
 80097c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80097cc:	78fa      	ldrb	r2, [r7, #3]
 80097ce:	4611      	mov	r1, r2
 80097d0:	4618      	mov	r0, r3
 80097d2:	f006 f991 	bl	800faf8 <HAL_PCD_EP_Close>
 80097d6:	4603      	mov	r3, r0
 80097d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097da:	7bfb      	ldrb	r3, [r7, #15]
 80097dc:	4618      	mov	r0, r3
 80097de:	f000 f91d 	bl	8009a1c <USBD_Get_USB_Status>
 80097e2:	4603      	mov	r3, r0
 80097e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e6:	7bbb      	ldrb	r3, [r7, #14]
}
 80097e8:	4618      	mov	r0, r3
 80097ea:	3710      	adds	r7, #16
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}

080097f0 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
 80097f8:	460b      	mov	r3, r1
 80097fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fc:	2300      	movs	r3, #0
 80097fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009800:	2300      	movs	r3, #0
 8009802:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800980a:	78fa      	ldrb	r2, [r7, #3]
 800980c:	4611      	mov	r1, r2
 800980e:	4618      	mov	r0, r3
 8009810:	f006 fb23 	bl	800fe5a <HAL_PCD_EP_Flush>
 8009814:	4603      	mov	r3, r0
 8009816:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009818:	7bfb      	ldrb	r3, [r7, #15]
 800981a:	4618      	mov	r0, r3
 800981c:	f000 f8fe 	bl	8009a1c <USBD_Get_USB_Status>
 8009820:	4603      	mov	r3, r0
 8009822:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009824:	7bbb      	ldrb	r3, [r7, #14]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3710      	adds	r7, #16
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}

0800982e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800982e:	b580      	push	{r7, lr}
 8009830:	b084      	sub	sp, #16
 8009832:	af00      	add	r7, sp, #0
 8009834:	6078      	str	r0, [r7, #4]
 8009836:	460b      	mov	r3, r1
 8009838:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983a:	2300      	movs	r3, #0
 800983c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800983e:	2300      	movs	r3, #0
 8009840:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009848:	78fa      	ldrb	r2, [r7, #3]
 800984a:	4611      	mov	r1, r2
 800984c:	4618      	mov	r0, r3
 800984e:	f006 fa4a 	bl	800fce6 <HAL_PCD_EP_SetStall>
 8009852:	4603      	mov	r3, r0
 8009854:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009856:	7bfb      	ldrb	r3, [r7, #15]
 8009858:	4618      	mov	r0, r3
 800985a:	f000 f8df 	bl	8009a1c <USBD_Get_USB_Status>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009862:	7bbb      	ldrb	r3, [r7, #14]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987c:	2300      	movs	r3, #0
 800987e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009886:	78fa      	ldrb	r2, [r7, #3]
 8009888:	4611      	mov	r1, r2
 800988a:	4618      	mov	r0, r3
 800988c:	f006 fa8f 	bl	800fdae <HAL_PCD_EP_ClrStall>
 8009890:	4603      	mov	r3, r0
 8009892:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009894:	7bfb      	ldrb	r3, [r7, #15]
 8009896:	4618      	mov	r0, r3
 8009898:	f000 f8c0 	bl	8009a1c <USBD_Get_USB_Status>
 800989c:	4603      	mov	r3, r0
 800989e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3710      	adds	r7, #16
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098aa:	b480      	push	{r7}
 80098ac:	b085      	sub	sp, #20
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
 80098b2:	460b      	mov	r3, r1
 80098b4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80098bc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	da0b      	bge.n	80098de <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098c6:	78fb      	ldrb	r3, [r7, #3]
 80098c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098cc:	68f9      	ldr	r1, [r7, #12]
 80098ce:	4613      	mov	r3, r2
 80098d0:	00db      	lsls	r3, r3, #3
 80098d2:	1a9b      	subs	r3, r3, r2
 80098d4:	009b      	lsls	r3, r3, #2
 80098d6:	440b      	add	r3, r1
 80098d8:	333e      	adds	r3, #62	; 0x3e
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	e00b      	b.n	80098f6 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098de:	78fb      	ldrb	r3, [r7, #3]
 80098e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098e4:	68f9      	ldr	r1, [r7, #12]
 80098e6:	4613      	mov	r3, r2
 80098e8:	00db      	lsls	r3, r3, #3
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	440b      	add	r3, r1
 80098f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80098f4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
 800990a:	460b      	mov	r3, r1
 800990c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	4611      	mov	r1, r2
 8009920:	4618      	mov	r0, r3
 8009922:	f006 f85c 	bl	800f9de <HAL_PCD_SetAddress>
 8009926:	4603      	mov	r3, r0
 8009928:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992a:	7bfb      	ldrb	r3, [r7, #15]
 800992c:	4618      	mov	r0, r3
 800992e:	f000 f875 	bl	8009a1c <USBD_Get_USB_Status>
 8009932:	4603      	mov	r3, r0
 8009934:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009936:	7bbb      	ldrb	r3, [r7, #14]
}
 8009938:	4618      	mov	r0, r3
 800993a:	3710      	adds	r7, #16
 800993c:	46bd      	mov	sp, r7
 800993e:	bd80      	pop	{r7, pc}

08009940 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b086      	sub	sp, #24
 8009944:	af00      	add	r7, sp, #0
 8009946:	60f8      	str	r0, [r7, #12]
 8009948:	607a      	str	r2, [r7, #4]
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	460b      	mov	r3, r1
 800994e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009950:	2300      	movs	r3, #0
 8009952:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009954:	2300      	movs	r3, #0
 8009956:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800995e:	7af9      	ldrb	r1, [r7, #11]
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	687a      	ldr	r2, [r7, #4]
 8009964:	f006 f975 	bl	800fc52 <HAL_PCD_EP_Transmit>
 8009968:	4603      	mov	r3, r0
 800996a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996c:	7dfb      	ldrb	r3, [r7, #23]
 800996e:	4618      	mov	r0, r3
 8009970:	f000 f854 	bl	8009a1c <USBD_Get_USB_Status>
 8009974:	4603      	mov	r3, r0
 8009976:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009978:	7dbb      	ldrb	r3, [r7, #22]
}
 800997a:	4618      	mov	r0, r3
 800997c:	3718      	adds	r7, #24
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}

08009982 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009982:	b580      	push	{r7, lr}
 8009984:	b086      	sub	sp, #24
 8009986:	af00      	add	r7, sp, #0
 8009988:	60f8      	str	r0, [r7, #12]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
 800998e:	460b      	mov	r3, r1
 8009990:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009992:	2300      	movs	r3, #0
 8009994:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80099a0:	7af9      	ldrb	r1, [r7, #11]
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	f006 f8f1 	bl	800fb8c <HAL_PCD_EP_Receive>
 80099aa:	4603      	mov	r3, r0
 80099ac:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099ae:	7dfb      	ldrb	r3, [r7, #23]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f833 	bl	8009a1c <USBD_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099ba:	7dbb      	ldrb	r3, [r7, #22]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3718      	adds	r7, #24
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}

080099c4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f006 f921 	bl	800fc22 <HAL_PCD_EP_GetRxCount>
 80099e0:	4603      	mov	r3, r0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}
	...

080099ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099f4:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <USBD_static_malloc+0x18>)
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20006a38 	.word	0x20006a38

08009a08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d817      	bhi.n	8009a60 <USBD_Get_USB_Status+0x44>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBD_Get_USB_Status+0x1c>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a49 	.word	0x08009a49
 8009a3c:	08009a4f 	.word	0x08009a4f
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a5b 	.word	0x08009a5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e00b      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e008      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e005      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5e:	e002      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a60:	2303      	movs	r3, #3
 8009a62:	73fb      	strb	r3, [r7, #15]
    break;
 8009a64:	bf00      	nop
  }
  return usb_status;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <hwInit>:




void hwInit(void)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	af00      	add	r7, sp, #0
  bspInit();
 8009a78:	f7f7 fac8 	bl	800100c <bspInit>

  cliInit(); /* 다른 모듈 보다 가장 위에서 초기화 해줘야함 */
 8009a7c:	f7f7 fdec 	bl	8001658 <cliInit>
  ledInit();
 8009a80:	f7f9 fe6e 	bl	8003760 <ledInit>
  usbInit();
 8009a84:	f7fa fe58 	bl	8004738 <usbInit>
  uartInit();
 8009a88:	f7fa fdac 	bl	80045e4 <uartInit>
  buttonInit();
 8009a8c:	f7f7 fcf6 	bl	800147c <buttonInit>
  gpioInit();
 8009a90:	f7f9 f8d6 	bl	8002c40 <gpioInit>
  flashInit();
 8009a94:	f7f8 ff02 	bl	800289c <flashInit>
  spiInit();
 8009a98:	f7fa fb08 	bl	80040ac <spiInit>

  if (sdInit() == true)
 8009a9c:	f7f9 ff3a 	bl	8003914 <sdInit>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d001      	beq.n	8009aaa <hwInit+0x36>
  {
	 fatfsInit();
 8009aa6:	f7f8 fd21 	bl	80024ec <fatfsInit>
  }

  if (buttonGetPressed(_DEF_BUTTON1) == true && sdIsDetected() == true)
 8009aaa:	2000      	movs	r0, #0
 8009aac:	f7f7 fd36 	bl	800151c <buttonGetPressed>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d008      	beq.n	8009ac8 <hwInit+0x54>
 8009ab6:	f7f9 ff8b 	bl	80039d0 <sdIsDetected>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d003      	beq.n	8009ac8 <hwInit+0x54>
  {
	  usbBegin(USB_MSC_MODE);
 8009ac0:	2002      	movs	r0, #2
 8009ac2:	f7fa fe45 	bl	8004750 <usbBegin>
 8009ac6:	e002      	b.n	8009ace <hwInit+0x5a>
  }
  else
  {
	  usbBegin(USB_CDC_MODE);
 8009ac8:	2001      	movs	r0, #1
 8009aca:	f7fa fe41 	bl	8004750 <usbBegin>
  }

  lcdInit();
 8009ace:	f7f9 fac5 	bl	800305c <lcdInit>
}
 8009ad2:	bf00      	nop
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	4a08      	ldr	r2, [pc, #32]	; (8009b08 <disk_status+0x30>)
 8009ae6:	009b      	lsls	r3, r3, #2
 8009ae8:	4413      	add	r3, r2
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	79fa      	ldrb	r2, [r7, #7]
 8009af0:	4905      	ldr	r1, [pc, #20]	; (8009b08 <disk_status+0x30>)
 8009af2:	440a      	add	r2, r1
 8009af4:	7b12      	ldrb	r2, [r2, #12]
 8009af6:	4610      	mov	r0, r2
 8009af8:	4798      	blx	r3
 8009afa:	4603      	mov	r3, r0
 8009afc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b00:	4618      	mov	r0, r3
 8009b02:	3710      	adds	r7, #16
 8009b04:	46bd      	mov	sp, r7
 8009b06:	bd80      	pop	{r7, pc}
 8009b08:	20006c84 	.word	0x20006c84

08009b0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	4603      	mov	r3, r0
 8009b14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009b16:	2300      	movs	r3, #0
 8009b18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	4a0d      	ldr	r2, [pc, #52]	; (8009b54 <disk_initialize+0x48>)
 8009b1e:	5cd3      	ldrb	r3, [r2, r3]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d111      	bne.n	8009b48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8009b24:	79fb      	ldrb	r3, [r7, #7]
 8009b26:	4a0b      	ldr	r2, [pc, #44]	; (8009b54 <disk_initialize+0x48>)
 8009b28:	2101      	movs	r1, #1
 8009b2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	4a09      	ldr	r2, [pc, #36]	; (8009b54 <disk_initialize+0x48>)
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	79fa      	ldrb	r2, [r7, #7]
 8009b3a:	4906      	ldr	r1, [pc, #24]	; (8009b54 <disk_initialize+0x48>)
 8009b3c:	440a      	add	r2, r1
 8009b3e:	7b12      	ldrb	r2, [r2, #12]
 8009b40:	4610      	mov	r0, r2
 8009b42:	4798      	blx	r3
 8009b44:	4603      	mov	r3, r0
 8009b46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3710      	adds	r7, #16
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20006c84 	.word	0x20006c84

08009b58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009b58:	b590      	push	{r4, r7, lr}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
 8009b62:	603b      	str	r3, [r7, #0]
 8009b64:	4603      	mov	r3, r0
 8009b66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
 8009b6a:	4a0a      	ldr	r2, [pc, #40]	; (8009b94 <disk_read+0x3c>)
 8009b6c:	009b      	lsls	r3, r3, #2
 8009b6e:	4413      	add	r3, r2
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	689c      	ldr	r4, [r3, #8]
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <disk_read+0x3c>)
 8009b78:	4413      	add	r3, r2
 8009b7a:	7b18      	ldrb	r0, [r3, #12]
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	687a      	ldr	r2, [r7, #4]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	47a0      	blx	r4
 8009b84:	4603      	mov	r3, r0
 8009b86:	75fb      	strb	r3, [r7, #23]
  return res;
 8009b88:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	371c      	adds	r7, #28
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd90      	pop	{r4, r7, pc}
 8009b92:	bf00      	nop
 8009b94:	20006c84 	.word	0x20006c84

08009b98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009b98:	b590      	push	{r4, r7, lr}
 8009b9a:	b087      	sub	sp, #28
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	603b      	str	r3, [r7, #0]
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	4a0a      	ldr	r2, [pc, #40]	; (8009bd4 <disk_write+0x3c>)
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	685b      	ldr	r3, [r3, #4]
 8009bb2:	68dc      	ldr	r4, [r3, #12]
 8009bb4:	7bfb      	ldrb	r3, [r7, #15]
 8009bb6:	4a07      	ldr	r2, [pc, #28]	; (8009bd4 <disk_write+0x3c>)
 8009bb8:	4413      	add	r3, r2
 8009bba:	7b18      	ldrb	r0, [r3, #12]
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	47a0      	blx	r4
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8009bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bca:	4618      	mov	r0, r3
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd90      	pop	{r4, r7, pc}
 8009bd2:	bf00      	nop
 8009bd4:	20006c84 	.word	0x20006c84

08009bd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	b084      	sub	sp, #16
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	4603      	mov	r3, r0
 8009be0:	603a      	str	r2, [r7, #0]
 8009be2:	71fb      	strb	r3, [r7, #7]
 8009be4:	460b      	mov	r3, r1
 8009be6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009be8:	79fb      	ldrb	r3, [r7, #7]
 8009bea:	4a09      	ldr	r2, [pc, #36]	; (8009c10 <disk_ioctl+0x38>)
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	691b      	ldr	r3, [r3, #16]
 8009bf4:	79fa      	ldrb	r2, [r7, #7]
 8009bf6:	4906      	ldr	r1, [pc, #24]	; (8009c10 <disk_ioctl+0x38>)
 8009bf8:	440a      	add	r2, r1
 8009bfa:	7b10      	ldrb	r0, [r2, #12]
 8009bfc:	79b9      	ldrb	r1, [r7, #6]
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	4798      	blx	r3
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
  return res;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20006c84 	.word	0x20006c84

08009c14 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 8009c14:	b480      	push	{r7}
 8009c16:	af00      	add	r7, sp, #0
  return 0;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c22:	4770      	bx	lr

08009c24 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009c24:	b480      	push	{r7}
 8009c26:	b085      	sub	sp, #20
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3301      	adds	r3, #1
 8009c30:	781b      	ldrb	r3, [r3, #0]
 8009c32:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009c34:	89fb      	ldrh	r3, [r7, #14]
 8009c36:	021b      	lsls	r3, r3, #8
 8009c38:	b21a      	sxth	r2, r3
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	b21b      	sxth	r3, r3
 8009c40:	4313      	orrs	r3, r2
 8009c42:	b21b      	sxth	r3, r3
 8009c44:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009c46:	89fb      	ldrh	r3, [r7, #14]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3303      	adds	r3, #3
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	3202      	adds	r2, #2
 8009c6c:	7812      	ldrb	r2, [r2, #0]
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	021b      	lsls	r3, r3, #8
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	3201      	adds	r2, #1
 8009c7a:	7812      	ldrb	r2, [r2, #0]
 8009c7c:	4313      	orrs	r3, r2
 8009c7e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	021b      	lsls	r3, r3, #8
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	4313      	orrs	r3, r2
 8009c8a:	60fb      	str	r3, [r7, #12]
	return rv;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
}
 8009c8e:	4618      	mov	r0, r3
 8009c90:	3714      	adds	r7, #20
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009c9a:	b480      	push	{r7}
 8009c9c:	b083      	sub	sp, #12
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
 8009ca2:	460b      	mov	r3, r1
 8009ca4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	1c5a      	adds	r2, r3, #1
 8009caa:	607a      	str	r2, [r7, #4]
 8009cac:	887a      	ldrh	r2, [r7, #2]
 8009cae:	b2d2      	uxtb	r2, r2
 8009cb0:	701a      	strb	r2, [r3, #0]
 8009cb2:	887b      	ldrh	r3, [r7, #2]
 8009cb4:	0a1b      	lsrs	r3, r3, #8
 8009cb6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	1c5a      	adds	r2, r3, #1
 8009cbc:	607a      	str	r2, [r7, #4]
 8009cbe:	887a      	ldrh	r2, [r7, #2]
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]
}
 8009cc4:	bf00      	nop
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	1c5a      	adds	r2, r3, #1
 8009cde:	607a      	str	r2, [r7, #4]
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	b2d2      	uxtb	r2, r2
 8009ce4:	701a      	strb	r2, [r3, #0]
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	0a1b      	lsrs	r3, r3, #8
 8009cea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	1c5a      	adds	r2, r3, #1
 8009cf0:	607a      	str	r2, [r7, #4]
 8009cf2:	683a      	ldr	r2, [r7, #0]
 8009cf4:	b2d2      	uxtb	r2, r2
 8009cf6:	701a      	strb	r2, [r3, #0]
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	0a1b      	lsrs	r3, r3, #8
 8009cfc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	1c5a      	adds	r2, r3, #1
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	683a      	ldr	r2, [r7, #0]
 8009d06:	b2d2      	uxtb	r2, r2
 8009d08:	701a      	strb	r2, [r3, #0]
 8009d0a:	683b      	ldr	r3, [r7, #0]
 8009d0c:	0a1b      	lsrs	r3, r3, #8
 8009d0e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	1c5a      	adds	r2, r3, #1
 8009d14:	607a      	str	r2, [r7, #4]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	b2d2      	uxtb	r2, r2
 8009d1a:	701a      	strb	r2, [r3, #0]
}
 8009d1c:	bf00      	nop
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009d28:	b480      	push	{r7}
 8009d2a:	b087      	sub	sp, #28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d00d      	beq.n	8009d5e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009d42:	693a      	ldr	r2, [r7, #16]
 8009d44:	1c53      	adds	r3, r2, #1
 8009d46:	613b      	str	r3, [r7, #16]
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	1c59      	adds	r1, r3, #1
 8009d4c:	6179      	str	r1, [r7, #20]
 8009d4e:	7812      	ldrb	r2, [r2, #0]
 8009d50:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	3b01      	subs	r3, #1
 8009d56:	607b      	str	r3, [r7, #4]
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d1f1      	bne.n	8009d42 <mem_cpy+0x1a>
	}
}
 8009d5e:	bf00      	nop
 8009d60:	371c      	adds	r7, #28
 8009d62:	46bd      	mov	sp, r7
 8009d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d68:	4770      	bx	lr

08009d6a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009d6a:	b480      	push	{r7}
 8009d6c:	b087      	sub	sp, #28
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009d7a:	697b      	ldr	r3, [r7, #20]
 8009d7c:	1c5a      	adds	r2, r3, #1
 8009d7e:	617a      	str	r2, [r7, #20]
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	b2d2      	uxtb	r2, r2
 8009d84:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	3b01      	subs	r3, #1
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d1f3      	bne.n	8009d7a <mem_set+0x10>
}
 8009d92:	bf00      	nop
 8009d94:	bf00      	nop
 8009d96:	371c      	adds	r7, #28
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr

08009da0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009da0:	b480      	push	{r7}
 8009da2:	b089      	sub	sp, #36	; 0x24
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	60f8      	str	r0, [r7, #12]
 8009da8:	60b9      	str	r1, [r7, #8]
 8009daa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	61fb      	str	r3, [r7, #28]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009db4:	2300      	movs	r3, #0
 8009db6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	1c5a      	adds	r2, r3, #1
 8009dbc:	61fa      	str	r2, [r7, #28]
 8009dbe:	781b      	ldrb	r3, [r3, #0]
 8009dc0:	4619      	mov	r1, r3
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	1c5a      	adds	r2, r3, #1
 8009dc6:	61ba      	str	r2, [r7, #24]
 8009dc8:	781b      	ldrb	r3, [r3, #0]
 8009dca:	1acb      	subs	r3, r1, r3
 8009dcc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	607b      	str	r3, [r7, #4]
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <mem_cmp+0x40>
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d0eb      	beq.n	8009db8 <mem_cmp+0x18>

	return r;
 8009de0:	697b      	ldr	r3, [r7, #20]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3724      	adds	r7, #36	; 0x24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009dee:	b480      	push	{r7}
 8009df0:	b083      	sub	sp, #12
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
 8009df6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009df8:	e002      	b.n	8009e00 <chk_chr+0x12>
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	607b      	str	r3, [r7, #4]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d005      	beq.n	8009e14 <chk_chr+0x26>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	461a      	mov	r2, r3
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d1f2      	bne.n	8009dfa <chk_chr+0xc>
	return *str;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	781b      	ldrb	r3, [r3, #0]
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e2e:	2300      	movs	r3, #0
 8009e30:	60bb      	str	r3, [r7, #8]
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	60fb      	str	r3, [r7, #12]
 8009e36:	e029      	b.n	8009e8c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009e38:	4a27      	ldr	r2, [pc, #156]	; (8009ed8 <chk_lock+0xb4>)
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	011b      	lsls	r3, r3, #4
 8009e3e:	4413      	add	r3, r2
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d01d      	beq.n	8009e82 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e46:	4a24      	ldr	r2, [pc, #144]	; (8009ed8 <chk_lock+0xb4>)
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	011b      	lsls	r3, r3, #4
 8009e4c:	4413      	add	r3, r2
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d116      	bne.n	8009e86 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009e58:	4a1f      	ldr	r2, [pc, #124]	; (8009ed8 <chk_lock+0xb4>)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	011b      	lsls	r3, r3, #4
 8009e5e:	4413      	add	r3, r2
 8009e60:	3304      	adds	r3, #4
 8009e62:	681a      	ldr	r2, [r3, #0]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d10c      	bne.n	8009e86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e6c:	4a1a      	ldr	r2, [pc, #104]	; (8009ed8 <chk_lock+0xb4>)
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	011b      	lsls	r3, r3, #4
 8009e72:	4413      	add	r3, r2
 8009e74:	3308      	adds	r3, #8
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d102      	bne.n	8009e86 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009e80:	e007      	b.n	8009e92 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009e82:	2301      	movs	r3, #1
 8009e84:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	60fb      	str	r3, [r7, #12]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d9d2      	bls.n	8009e38 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2b02      	cmp	r3, #2
 8009e96:	d109      	bne.n	8009eac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d102      	bne.n	8009ea4 <chk_lock+0x80>
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b02      	cmp	r3, #2
 8009ea2:	d101      	bne.n	8009ea8 <chk_lock+0x84>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	e010      	b.n	8009eca <chk_lock+0xa6>
 8009ea8:	2312      	movs	r3, #18
 8009eaa:	e00e      	b.n	8009eca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d108      	bne.n	8009ec4 <chk_lock+0xa0>
 8009eb2:	4a09      	ldr	r2, [pc, #36]	; (8009ed8 <chk_lock+0xb4>)
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	011b      	lsls	r3, r3, #4
 8009eb8:	4413      	add	r3, r2
 8009eba:	330c      	adds	r3, #12
 8009ebc:	881b      	ldrh	r3, [r3, #0]
 8009ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ec2:	d101      	bne.n	8009ec8 <chk_lock+0xa4>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	e000      	b.n	8009eca <chk_lock+0xa6>
 8009ec8:	2300      	movs	r3, #0
}
 8009eca:	4618      	mov	r0, r3
 8009ecc:	3714      	adds	r7, #20
 8009ece:	46bd      	mov	sp, r7
 8009ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed4:	4770      	bx	lr
 8009ed6:	bf00      	nop
 8009ed8:	20006c64 	.word	0x20006c64

08009edc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009edc:	b480      	push	{r7}
 8009ede:	b083      	sub	sp, #12
 8009ee0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	607b      	str	r3, [r7, #4]
 8009ee6:	e002      	b.n	8009eee <enq_lock+0x12>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	3301      	adds	r3, #1
 8009eec:	607b      	str	r3, [r7, #4]
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d806      	bhi.n	8009f02 <enq_lock+0x26>
 8009ef4:	4a09      	ldr	r2, [pc, #36]	; (8009f1c <enq_lock+0x40>)
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	011b      	lsls	r3, r3, #4
 8009efa:	4413      	add	r3, r2
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f2      	bne.n	8009ee8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2b02      	cmp	r3, #2
 8009f06:	bf14      	ite	ne
 8009f08:	2301      	movne	r3, #1
 8009f0a:	2300      	moveq	r3, #0
 8009f0c:	b2db      	uxtb	r3, r3
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	20006c64 	.word	0x20006c64

08009f20 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b085      	sub	sp, #20
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60fb      	str	r3, [r7, #12]
 8009f2e:	e01f      	b.n	8009f70 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009f30:	4a41      	ldr	r2, [pc, #260]	; (800a038 <inc_lock+0x118>)
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	011b      	lsls	r3, r3, #4
 8009f36:	4413      	add	r3, r2
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	429a      	cmp	r2, r3
 8009f40:	d113      	bne.n	8009f6a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009f42:	4a3d      	ldr	r2, [pc, #244]	; (800a038 <inc_lock+0x118>)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	011b      	lsls	r3, r3, #4
 8009f48:	4413      	add	r3, r2
 8009f4a:	3304      	adds	r3, #4
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d109      	bne.n	8009f6a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009f56:	4a38      	ldr	r2, [pc, #224]	; (800a038 <inc_lock+0x118>)
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	011b      	lsls	r3, r3, #4
 8009f5c:	4413      	add	r3, r2
 8009f5e:	3308      	adds	r3, #8
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d006      	beq.n	8009f78 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	3301      	adds	r3, #1
 8009f6e:	60fb      	str	r3, [r7, #12]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d9dc      	bls.n	8009f30 <inc_lock+0x10>
 8009f76:	e000      	b.n	8009f7a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009f78:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d132      	bne.n	8009fe6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009f80:	2300      	movs	r3, #0
 8009f82:	60fb      	str	r3, [r7, #12]
 8009f84:	e002      	b.n	8009f8c <inc_lock+0x6c>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	60fb      	str	r3, [r7, #12]
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	2b01      	cmp	r3, #1
 8009f90:	d806      	bhi.n	8009fa0 <inc_lock+0x80>
 8009f92:	4a29      	ldr	r2, [pc, #164]	; (800a038 <inc_lock+0x118>)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	011b      	lsls	r3, r3, #4
 8009f98:	4413      	add	r3, r2
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d1f2      	bne.n	8009f86 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2b02      	cmp	r3, #2
 8009fa4:	d101      	bne.n	8009faa <inc_lock+0x8a>
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	e040      	b.n	800a02c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	4922      	ldr	r1, [pc, #136]	; (800a038 <inc_lock+0x118>)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	011b      	lsls	r3, r3, #4
 8009fb4:	440b      	add	r3, r1
 8009fb6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689a      	ldr	r2, [r3, #8]
 8009fbc:	491e      	ldr	r1, [pc, #120]	; (800a038 <inc_lock+0x118>)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	011b      	lsls	r3, r3, #4
 8009fc2:	440b      	add	r3, r1
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	695a      	ldr	r2, [r3, #20]
 8009fcc:	491a      	ldr	r1, [pc, #104]	; (800a038 <inc_lock+0x118>)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	440b      	add	r3, r1
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009fd8:	4a17      	ldr	r2, [pc, #92]	; (800a038 <inc_lock+0x118>)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	011b      	lsls	r3, r3, #4
 8009fde:	4413      	add	r3, r2
 8009fe0:	330c      	adds	r3, #12
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d009      	beq.n	800a000 <inc_lock+0xe0>
 8009fec:	4a12      	ldr	r2, [pc, #72]	; (800a038 <inc_lock+0x118>)
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	011b      	lsls	r3, r3, #4
 8009ff2:	4413      	add	r3, r2
 8009ff4:	330c      	adds	r3, #12
 8009ff6:	881b      	ldrh	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <inc_lock+0xe0>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	e015      	b.n	800a02c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d108      	bne.n	800a018 <inc_lock+0xf8>
 800a006:	4a0c      	ldr	r2, [pc, #48]	; (800a038 <inc_lock+0x118>)
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	011b      	lsls	r3, r3, #4
 800a00c:	4413      	add	r3, r2
 800a00e:	330c      	adds	r3, #12
 800a010:	881b      	ldrh	r3, [r3, #0]
 800a012:	3301      	adds	r3, #1
 800a014:	b29a      	uxth	r2, r3
 800a016:	e001      	b.n	800a01c <inc_lock+0xfc>
 800a018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a01c:	4906      	ldr	r1, [pc, #24]	; (800a038 <inc_lock+0x118>)
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	011b      	lsls	r3, r3, #4
 800a022:	440b      	add	r3, r1
 800a024:	330c      	adds	r3, #12
 800a026:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	3301      	adds	r3, #1
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	3714      	adds	r7, #20
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	20006c64 	.word	0x20006c64

0800a03c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	3b01      	subs	r3, #1
 800a048:	607b      	str	r3, [r7, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d825      	bhi.n	800a09c <dec_lock+0x60>
		n = Files[i].ctr;
 800a050:	4a17      	ldr	r2, [pc, #92]	; (800a0b0 <dec_lock+0x74>)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	4413      	add	r3, r2
 800a058:	330c      	adds	r3, #12
 800a05a:	881b      	ldrh	r3, [r3, #0]
 800a05c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a05e:	89fb      	ldrh	r3, [r7, #14]
 800a060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a064:	d101      	bne.n	800a06a <dec_lock+0x2e>
 800a066:	2300      	movs	r3, #0
 800a068:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a06a:	89fb      	ldrh	r3, [r7, #14]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <dec_lock+0x3a>
 800a070:	89fb      	ldrh	r3, [r7, #14]
 800a072:	3b01      	subs	r3, #1
 800a074:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a076:	4a0e      	ldr	r2, [pc, #56]	; (800a0b0 <dec_lock+0x74>)
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	011b      	lsls	r3, r3, #4
 800a07c:	4413      	add	r3, r2
 800a07e:	330c      	adds	r3, #12
 800a080:	89fa      	ldrh	r2, [r7, #14]
 800a082:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a084:	89fb      	ldrh	r3, [r7, #14]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d105      	bne.n	800a096 <dec_lock+0x5a>
 800a08a:	4a09      	ldr	r2, [pc, #36]	; (800a0b0 <dec_lock+0x74>)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	4413      	add	r3, r2
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a096:	2300      	movs	r3, #0
 800a098:	737b      	strb	r3, [r7, #13]
 800a09a:	e001      	b.n	800a0a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a09c:	2302      	movs	r3, #2
 800a09e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a0a0:	7b7b      	ldrb	r3, [r7, #13]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3714      	adds	r7, #20
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ac:	4770      	bx	lr
 800a0ae:	bf00      	nop
 800a0b0:	20006c64 	.word	0x20006c64

0800a0b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a0bc:	2300      	movs	r3, #0
 800a0be:	60fb      	str	r3, [r7, #12]
 800a0c0:	e010      	b.n	800a0e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a0c2:	4a0d      	ldr	r2, [pc, #52]	; (800a0f8 <clear_lock+0x44>)
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	011b      	lsls	r3, r3, #4
 800a0c8:	4413      	add	r3, r2
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d105      	bne.n	800a0de <clear_lock+0x2a>
 800a0d2:	4a09      	ldr	r2, [pc, #36]	; (800a0f8 <clear_lock+0x44>)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	011b      	lsls	r3, r3, #4
 800a0d8:	4413      	add	r3, r2
 800a0da:	2200      	movs	r2, #0
 800a0dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	3301      	adds	r3, #1
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d9eb      	bls.n	800a0c2 <clear_lock+0xe>
	}
}
 800a0ea:	bf00      	nop
 800a0ec:	bf00      	nop
 800a0ee:	3714      	adds	r7, #20
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr
 800a0f8:	20006c64 	.word	0x20006c64

0800a0fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a0fc:	b580      	push	{r7, lr}
 800a0fe:	b086      	sub	sp, #24
 800a100:	af00      	add	r7, sp, #0
 800a102:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a104:	2300      	movs	r3, #0
 800a106:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	78db      	ldrb	r3, [r3, #3]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d034      	beq.n	800a17a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a114:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	7858      	ldrb	r0, [r3, #1]
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a120:	2301      	movs	r3, #1
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	f7ff fd38 	bl	8009b98 <disk_write>
 800a128:	4603      	mov	r3, r0
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d002      	beq.n	800a134 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a12e:	2301      	movs	r3, #1
 800a130:	73fb      	strb	r3, [r7, #15]
 800a132:	e022      	b.n	800a17a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	697a      	ldr	r2, [r7, #20]
 800a140:	1ad2      	subs	r2, r2, r3
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	69db      	ldr	r3, [r3, #28]
 800a146:	429a      	cmp	r2, r3
 800a148:	d217      	bcs.n	800a17a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	789b      	ldrb	r3, [r3, #2]
 800a14e:	613b      	str	r3, [r7, #16]
 800a150:	e010      	b.n	800a174 <sync_window+0x78>
					wsect += fs->fsize;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	697a      	ldr	r2, [r7, #20]
 800a158:	4413      	add	r3, r2
 800a15a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	7858      	ldrb	r0, [r3, #1]
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a166:	2301      	movs	r3, #1
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	f7ff fd15 	bl	8009b98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a16e:	693b      	ldr	r3, [r7, #16]
 800a170:	3b01      	subs	r3, #1
 800a172:	613b      	str	r3, [r7, #16]
 800a174:	693b      	ldr	r3, [r7, #16]
 800a176:	2b01      	cmp	r3, #1
 800a178:	d8eb      	bhi.n	800a152 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3718      	adds	r7, #24
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
 800a18c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a196:	683a      	ldr	r2, [r7, #0]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d01b      	beq.n	800a1d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7ff ffad 	bl	800a0fc <sync_window>
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a1a6:	7bfb      	ldrb	r3, [r7, #15]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d113      	bne.n	800a1d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	7858      	ldrb	r0, [r3, #1]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	683a      	ldr	r2, [r7, #0]
 800a1ba:	f7ff fccd 	bl	8009b58 <disk_read>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d004      	beq.n	800a1ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a1c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a1c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	683a      	ldr	r2, [r7, #0]
 800a1d2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3710      	adds	r7, #16
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f7ff ff87 	bl	800a0fc <sync_window>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a1f2:	7bfb      	ldrb	r3, [r7, #15]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d158      	bne.n	800a2aa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	d148      	bne.n	800a292 <sync_fs+0xb2>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	791b      	ldrb	r3, [r3, #4]
 800a204:	2b01      	cmp	r3, #1
 800a206:	d144      	bne.n	800a292 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	3334      	adds	r3, #52	; 0x34
 800a20c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a210:	2100      	movs	r1, #0
 800a212:	4618      	mov	r0, r3
 800a214:	f7ff fda9 	bl	8009d6a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	3334      	adds	r3, #52	; 0x34
 800a21c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a220:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a224:	4618      	mov	r0, r3
 800a226:	f7ff fd38 	bl	8009c9a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	3334      	adds	r3, #52	; 0x34
 800a22e:	4921      	ldr	r1, [pc, #132]	; (800a2b4 <sync_fs+0xd4>)
 800a230:	4618      	mov	r0, r3
 800a232:	f7ff fd4d 	bl	8009cd0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	3334      	adds	r3, #52	; 0x34
 800a23a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a23e:	491e      	ldr	r1, [pc, #120]	; (800a2b8 <sync_fs+0xd8>)
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fd45 	bl	8009cd0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	3334      	adds	r3, #52	; 0x34
 800a24a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	695b      	ldr	r3, [r3, #20]
 800a252:	4619      	mov	r1, r3
 800a254:	4610      	mov	r0, r2
 800a256:	f7ff fd3b 	bl	8009cd0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	3334      	adds	r3, #52	; 0x34
 800a25e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	691b      	ldr	r3, [r3, #16]
 800a266:	4619      	mov	r1, r3
 800a268:	4610      	mov	r0, r2
 800a26a:	f7ff fd31 	bl	8009cd0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	1c5a      	adds	r2, r3, #1
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	7858      	ldrb	r0, [r3, #1]
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a286:	2301      	movs	r3, #1
 800a288:	f7ff fc86 	bl	8009b98 <disk_write>
			fs->fsi_flag = 0;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	785b      	ldrb	r3, [r3, #1]
 800a296:	2200      	movs	r2, #0
 800a298:	2100      	movs	r1, #0
 800a29a:	4618      	mov	r0, r3
 800a29c:	f7ff fc9c 	bl	8009bd8 <disk_ioctl>
 800a2a0:	4603      	mov	r3, r0
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d001      	beq.n	800a2aa <sync_fs+0xca>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	3710      	adds	r7, #16
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	41615252 	.word	0x41615252
 800a2b8:	61417272 	.word	0x61417272

0800a2bc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a2bc:	b480      	push	{r7}
 800a2be:	b083      	sub	sp, #12
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]
 800a2c4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	3b02      	subs	r3, #2
 800a2ca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	699b      	ldr	r3, [r3, #24]
 800a2d0:	3b02      	subs	r3, #2
 800a2d2:	683a      	ldr	r2, [r7, #0]
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	d301      	bcc.n	800a2dc <clust2sect+0x20>
 800a2d8:	2300      	movs	r3, #0
 800a2da:	e008      	b.n	800a2ee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	895b      	ldrh	r3, [r3, #10]
 800a2e0:	461a      	mov	r2, r3
 800a2e2:	683b      	ldr	r3, [r7, #0]
 800a2e4:	fb03 f202 	mul.w	r2, r3, r2
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2ec:	4413      	add	r3, r2
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	370c      	adds	r7, #12
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b086      	sub	sp, #24
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	2b01      	cmp	r3, #1
 800a30e:	d904      	bls.n	800a31a <get_fat+0x20>
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	429a      	cmp	r2, r3
 800a318:	d302      	bcc.n	800a320 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a31a:	2301      	movs	r3, #1
 800a31c:	617b      	str	r3, [r7, #20]
 800a31e:	e08f      	b.n	800a440 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a320:	f04f 33ff 	mov.w	r3, #4294967295
 800a324:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a326:	693b      	ldr	r3, [r7, #16]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	2b03      	cmp	r3, #3
 800a32c:	d062      	beq.n	800a3f4 <get_fat+0xfa>
 800a32e:	2b03      	cmp	r3, #3
 800a330:	dc7c      	bgt.n	800a42c <get_fat+0x132>
 800a332:	2b01      	cmp	r3, #1
 800a334:	d002      	beq.n	800a33c <get_fat+0x42>
 800a336:	2b02      	cmp	r3, #2
 800a338:	d042      	beq.n	800a3c0 <get_fat+0xc6>
 800a33a:	e077      	b.n	800a42c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	60fb      	str	r3, [r7, #12]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	085b      	lsrs	r3, r3, #1
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	4413      	add	r3, r2
 800a348:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	0a5b      	lsrs	r3, r3, #9
 800a352:	4413      	add	r3, r2
 800a354:	4619      	mov	r1, r3
 800a356:	6938      	ldr	r0, [r7, #16]
 800a358:	f7ff ff14 	bl	800a184 <move_window>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d167      	bne.n	800a432 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1c5a      	adds	r2, r3, #1
 800a366:	60fa      	str	r2, [r7, #12]
 800a368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a36c:	693a      	ldr	r2, [r7, #16]
 800a36e:	4413      	add	r3, r2
 800a370:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a374:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a376:	693b      	ldr	r3, [r7, #16]
 800a378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	0a5b      	lsrs	r3, r3, #9
 800a37e:	4413      	add	r3, r2
 800a380:	4619      	mov	r1, r3
 800a382:	6938      	ldr	r0, [r7, #16]
 800a384:	f7ff fefe 	bl	800a184 <move_window>
 800a388:	4603      	mov	r3, r0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d153      	bne.n	800a436 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a394:	693a      	ldr	r2, [r7, #16]
 800a396:	4413      	add	r3, r2
 800a398:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a39c:	021b      	lsls	r3, r3, #8
 800a39e:	461a      	mov	r2, r3
 800a3a0:	68bb      	ldr	r3, [r7, #8]
 800a3a2:	4313      	orrs	r3, r2
 800a3a4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d002      	beq.n	800a3b6 <get_fat+0xbc>
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	091b      	lsrs	r3, r3, #4
 800a3b4:	e002      	b.n	800a3bc <get_fat+0xc2>
 800a3b6:	68bb      	ldr	r3, [r7, #8]
 800a3b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a3bc:	617b      	str	r3, [r7, #20]
			break;
 800a3be:	e03f      	b.n	800a440 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	0a1b      	lsrs	r3, r3, #8
 800a3c8:	4413      	add	r3, r2
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	6938      	ldr	r0, [r7, #16]
 800a3ce:	f7ff fed9 	bl	800a184 <move_window>
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d130      	bne.n	800a43a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	005b      	lsls	r3, r3, #1
 800a3e2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a3e6:	4413      	add	r3, r2
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f7ff fc1b 	bl	8009c24 <ld_word>
 800a3ee:	4603      	mov	r3, r0
 800a3f0:	617b      	str	r3, [r7, #20]
			break;
 800a3f2:	e025      	b.n	800a440 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	09db      	lsrs	r3, r3, #7
 800a3fc:	4413      	add	r3, r2
 800a3fe:	4619      	mov	r1, r3
 800a400:	6938      	ldr	r0, [r7, #16]
 800a402:	f7ff febf 	bl	800a184 <move_window>
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d118      	bne.n	800a43e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a41a:	4413      	add	r3, r2
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7ff fc19 	bl	8009c54 <ld_dword>
 800a422:	4603      	mov	r3, r0
 800a424:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a428:	617b      	str	r3, [r7, #20]
			break;
 800a42a:	e009      	b.n	800a440 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a42c:	2301      	movs	r3, #1
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e006      	b.n	800a440 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a432:	bf00      	nop
 800a434:	e004      	b.n	800a440 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a436:	bf00      	nop
 800a438:	e002      	b.n	800a440 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a43a:	bf00      	nop
 800a43c:	e000      	b.n	800a440 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a43e:	bf00      	nop
		}
	}

	return val;
 800a440:	697b      	ldr	r3, [r7, #20]
}
 800a442:	4618      	mov	r0, r3
 800a444:	3718      	adds	r7, #24
 800a446:	46bd      	mov	sp, r7
 800a448:	bd80      	pop	{r7, pc}

0800a44a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a44a:	b590      	push	{r4, r7, lr}
 800a44c:	b089      	sub	sp, #36	; 0x24
 800a44e:	af00      	add	r7, sp, #0
 800a450:	60f8      	str	r0, [r7, #12]
 800a452:	60b9      	str	r1, [r7, #8]
 800a454:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a456:	2302      	movs	r3, #2
 800a458:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	f240 80d2 	bls.w	800a606 <put_fat+0x1bc>
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	699b      	ldr	r3, [r3, #24]
 800a466:	68ba      	ldr	r2, [r7, #8]
 800a468:	429a      	cmp	r2, r3
 800a46a:	f080 80cc 	bcs.w	800a606 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	2b03      	cmp	r3, #3
 800a474:	f000 8096 	beq.w	800a5a4 <put_fat+0x15a>
 800a478:	2b03      	cmp	r3, #3
 800a47a:	f300 80cd 	bgt.w	800a618 <put_fat+0x1ce>
 800a47e:	2b01      	cmp	r3, #1
 800a480:	d002      	beq.n	800a488 <put_fat+0x3e>
 800a482:	2b02      	cmp	r3, #2
 800a484:	d06e      	beq.n	800a564 <put_fat+0x11a>
 800a486:	e0c7      	b.n	800a618 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	61bb      	str	r3, [r7, #24]
 800a48c:	69bb      	ldr	r3, [r7, #24]
 800a48e:	085b      	lsrs	r3, r3, #1
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	4413      	add	r3, r2
 800a494:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a49a:	69bb      	ldr	r3, [r7, #24]
 800a49c:	0a5b      	lsrs	r3, r3, #9
 800a49e:	4413      	add	r3, r2
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f7ff fe6e 	bl	800a184 <move_window>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a4ac:	7ffb      	ldrb	r3, [r7, #31]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 80ab 	bne.w	800a60a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	1c59      	adds	r1, r3, #1
 800a4be:	61b9      	str	r1, [r7, #24]
 800a4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4c4:	4413      	add	r3, r2
 800a4c6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a4c8:	68bb      	ldr	r3, [r7, #8]
 800a4ca:	f003 0301 	and.w	r3, r3, #1
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d00d      	beq.n	800a4ee <put_fat+0xa4>
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	b25b      	sxtb	r3, r3
 800a4d8:	f003 030f 	and.w	r3, r3, #15
 800a4dc:	b25a      	sxtb	r2, r3
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	b2db      	uxtb	r3, r3
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	b25b      	sxtb	r3, r3
 800a4e6:	4313      	orrs	r3, r2
 800a4e8:	b25b      	sxtb	r3, r3
 800a4ea:	b2db      	uxtb	r3, r3
 800a4ec:	e001      	b.n	800a4f2 <put_fat+0xa8>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	b2db      	uxtb	r3, r3
 800a4f2:	697a      	ldr	r2, [r7, #20]
 800a4f4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	2201      	movs	r2, #1
 800a4fa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	0a5b      	lsrs	r3, r3, #9
 800a504:	4413      	add	r3, r2
 800a506:	4619      	mov	r1, r3
 800a508:	68f8      	ldr	r0, [r7, #12]
 800a50a:	f7ff fe3b 	bl	800a184 <move_window>
 800a50e:	4603      	mov	r3, r0
 800a510:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a512:	7ffb      	ldrb	r3, [r7, #31]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d17a      	bne.n	800a60e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a524:	4413      	add	r3, r2
 800a526:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	f003 0301 	and.w	r3, r3, #1
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d003      	beq.n	800a53a <put_fat+0xf0>
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	091b      	lsrs	r3, r3, #4
 800a536:	b2db      	uxtb	r3, r3
 800a538:	e00e      	b.n	800a558 <put_fat+0x10e>
 800a53a:	697b      	ldr	r3, [r7, #20]
 800a53c:	781b      	ldrb	r3, [r3, #0]
 800a53e:	b25b      	sxtb	r3, r3
 800a540:	f023 030f 	bic.w	r3, r3, #15
 800a544:	b25a      	sxtb	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	0a1b      	lsrs	r3, r3, #8
 800a54a:	b25b      	sxtb	r3, r3
 800a54c:	f003 030f 	and.w	r3, r3, #15
 800a550:	b25b      	sxtb	r3, r3
 800a552:	4313      	orrs	r3, r2
 800a554:	b25b      	sxtb	r3, r3
 800a556:	b2db      	uxtb	r3, r3
 800a558:	697a      	ldr	r2, [r7, #20]
 800a55a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	2201      	movs	r2, #1
 800a560:	70da      	strb	r2, [r3, #3]
			break;
 800a562:	e059      	b.n	800a618 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	0a1b      	lsrs	r3, r3, #8
 800a56c:	4413      	add	r3, r2
 800a56e:	4619      	mov	r1, r3
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f7ff fe07 	bl	800a184 <move_window>
 800a576:	4603      	mov	r3, r0
 800a578:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a57a:	7ffb      	ldrb	r3, [r7, #31]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d148      	bne.n	800a612 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	005b      	lsls	r3, r3, #1
 800a58a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a58e:	4413      	add	r3, r2
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	b292      	uxth	r2, r2
 800a594:	4611      	mov	r1, r2
 800a596:	4618      	mov	r0, r3
 800a598:	f7ff fb7f 	bl	8009c9a <st_word>
			fs->wflag = 1;
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	2201      	movs	r2, #1
 800a5a0:	70da      	strb	r2, [r3, #3]
			break;
 800a5a2:	e039      	b.n	800a618 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a5a8:	68bb      	ldr	r3, [r7, #8]
 800a5aa:	09db      	lsrs	r3, r3, #7
 800a5ac:	4413      	add	r3, r2
 800a5ae:	4619      	mov	r1, r3
 800a5b0:	68f8      	ldr	r0, [r7, #12]
 800a5b2:	f7ff fde7 	bl	800a184 <move_window>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a5ba:	7ffb      	ldrb	r3, [r7, #31]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d12a      	bne.n	800a616 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	009b      	lsls	r3, r3, #2
 800a5d0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5d4:	4413      	add	r3, r2
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	f7ff fb3c 	bl	8009c54 <ld_dword>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a5e2:	4323      	orrs	r3, r4
 800a5e4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5f4:	4413      	add	r3, r2
 800a5f6:	6879      	ldr	r1, [r7, #4]
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f7ff fb69 	bl	8009cd0 <st_dword>
			fs->wflag = 1;
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2201      	movs	r2, #1
 800a602:	70da      	strb	r2, [r3, #3]
			break;
 800a604:	e008      	b.n	800a618 <put_fat+0x1ce>
		}
	}
 800a606:	bf00      	nop
 800a608:	e006      	b.n	800a618 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a60a:	bf00      	nop
 800a60c:	e004      	b.n	800a618 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a60e:	bf00      	nop
 800a610:	e002      	b.n	800a618 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a612:	bf00      	nop
 800a614:	e000      	b.n	800a618 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a616:	bf00      	nop
	return res;
 800a618:	7ffb      	ldrb	r3, [r7, #31]
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3724      	adds	r7, #36	; 0x24
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd90      	pop	{r4, r7, pc}

0800a622 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b088      	sub	sp, #32
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a62e:	2300      	movs	r3, #0
 800a630:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b01      	cmp	r3, #1
 800a63c:	d904      	bls.n	800a648 <remove_chain+0x26>
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	699b      	ldr	r3, [r3, #24]
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	429a      	cmp	r2, r3
 800a646:	d301      	bcc.n	800a64c <remove_chain+0x2a>
 800a648:	2302      	movs	r3, #2
 800a64a:	e04b      	b.n	800a6e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d00c      	beq.n	800a66c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	6879      	ldr	r1, [r7, #4]
 800a658:	69b8      	ldr	r0, [r7, #24]
 800a65a:	f7ff fef6 	bl	800a44a <put_fat>
 800a65e:	4603      	mov	r3, r0
 800a660:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a662:	7ffb      	ldrb	r3, [r7, #31]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <remove_chain+0x4a>
 800a668:	7ffb      	ldrb	r3, [r7, #31]
 800a66a:	e03b      	b.n	800a6e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a66c:	68b9      	ldr	r1, [r7, #8]
 800a66e:	68f8      	ldr	r0, [r7, #12]
 800a670:	f7ff fe43 	bl	800a2fa <get_fat>
 800a674:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d031      	beq.n	800a6e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a67c:	697b      	ldr	r3, [r7, #20]
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d101      	bne.n	800a686 <remove_chain+0x64>
 800a682:	2302      	movs	r3, #2
 800a684:	e02e      	b.n	800a6e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a68c:	d101      	bne.n	800a692 <remove_chain+0x70>
 800a68e:	2301      	movs	r3, #1
 800a690:	e028      	b.n	800a6e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a692:	2200      	movs	r2, #0
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	69b8      	ldr	r0, [r7, #24]
 800a698:	f7ff fed7 	bl	800a44a <put_fat>
 800a69c:	4603      	mov	r3, r0
 800a69e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a6a0:	7ffb      	ldrb	r3, [r7, #31]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <remove_chain+0x88>
 800a6a6:	7ffb      	ldrb	r3, [r7, #31]
 800a6a8:	e01c      	b.n	800a6e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	695a      	ldr	r2, [r3, #20]
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	3b02      	subs	r3, #2
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d20b      	bcs.n	800a6d0 <remove_chain+0xae>
			fs->free_clst++;
 800a6b8:	69bb      	ldr	r3, [r7, #24]
 800a6ba:	695b      	ldr	r3, [r3, #20]
 800a6bc:	1c5a      	adds	r2, r3, #1
 800a6be:	69bb      	ldr	r3, [r7, #24]
 800a6c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	791b      	ldrb	r3, [r3, #4]
 800a6c6:	f043 0301 	orr.w	r3, r3, #1
 800a6ca:	b2da      	uxtb	r2, r3
 800a6cc:	69bb      	ldr	r3, [r7, #24]
 800a6ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a6d4:	69bb      	ldr	r3, [r7, #24]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d3c6      	bcc.n	800a66c <remove_chain+0x4a>
 800a6de:	e000      	b.n	800a6e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a6e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3720      	adds	r7, #32
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b088      	sub	sp, #32
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
 800a6f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d10d      	bne.n	800a71e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	691b      	ldr	r3, [r3, #16]
 800a706:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a708:	69bb      	ldr	r3, [r7, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d004      	beq.n	800a718 <create_chain+0x2c>
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	699b      	ldr	r3, [r3, #24]
 800a712:	69ba      	ldr	r2, [r7, #24]
 800a714:	429a      	cmp	r2, r3
 800a716:	d31b      	bcc.n	800a750 <create_chain+0x64>
 800a718:	2301      	movs	r3, #1
 800a71a:	61bb      	str	r3, [r7, #24]
 800a71c:	e018      	b.n	800a750 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a71e:	6839      	ldr	r1, [r7, #0]
 800a720:	6878      	ldr	r0, [r7, #4]
 800a722:	f7ff fdea 	bl	800a2fa <get_fat>
 800a726:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d801      	bhi.n	800a732 <create_chain+0x46>
 800a72e:	2301      	movs	r3, #1
 800a730:	e070      	b.n	800a814 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a738:	d101      	bne.n	800a73e <create_chain+0x52>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	e06a      	b.n	800a814 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	699b      	ldr	r3, [r3, #24]
 800a742:	68fa      	ldr	r2, [r7, #12]
 800a744:	429a      	cmp	r2, r3
 800a746:	d201      	bcs.n	800a74c <create_chain+0x60>
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	e063      	b.n	800a814 <create_chain+0x128>
		scl = clst;
 800a74c:	683b      	ldr	r3, [r7, #0]
 800a74e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a750:	69bb      	ldr	r3, [r7, #24]
 800a752:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a754:	69fb      	ldr	r3, [r7, #28]
 800a756:	3301      	adds	r3, #1
 800a758:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	699b      	ldr	r3, [r3, #24]
 800a75e:	69fa      	ldr	r2, [r7, #28]
 800a760:	429a      	cmp	r2, r3
 800a762:	d307      	bcc.n	800a774 <create_chain+0x88>
				ncl = 2;
 800a764:	2302      	movs	r3, #2
 800a766:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a768:	69fa      	ldr	r2, [r7, #28]
 800a76a:	69bb      	ldr	r3, [r7, #24]
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d901      	bls.n	800a774 <create_chain+0x88>
 800a770:	2300      	movs	r3, #0
 800a772:	e04f      	b.n	800a814 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a774:	69f9      	ldr	r1, [r7, #28]
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f7ff fdbf 	bl	800a2fa <get_fat>
 800a77c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00e      	beq.n	800a7a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2b01      	cmp	r3, #1
 800a788:	d003      	beq.n	800a792 <create_chain+0xa6>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a790:	d101      	bne.n	800a796 <create_chain+0xaa>
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	e03e      	b.n	800a814 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a796:	69fa      	ldr	r2, [r7, #28]
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d1da      	bne.n	800a754 <create_chain+0x68>
 800a79e:	2300      	movs	r3, #0
 800a7a0:	e038      	b.n	800a814 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a7a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a7a4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7a8:	69f9      	ldr	r1, [r7, #28]
 800a7aa:	6938      	ldr	r0, [r7, #16]
 800a7ac:	f7ff fe4d 	bl	800a44a <put_fat>
 800a7b0:	4603      	mov	r3, r0
 800a7b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d109      	bne.n	800a7ce <create_chain+0xe2>
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d006      	beq.n	800a7ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a7c0:	69fa      	ldr	r2, [r7, #28]
 800a7c2:	6839      	ldr	r1, [r7, #0]
 800a7c4:	6938      	ldr	r0, [r7, #16]
 800a7c6:	f7ff fe40 	bl	800a44a <put_fat>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d116      	bne.n	800a802 <create_chain+0x116>
		fs->last_clst = ncl;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	69fa      	ldr	r2, [r7, #28]
 800a7d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	695a      	ldr	r2, [r3, #20]
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	699b      	ldr	r3, [r3, #24]
 800a7e2:	3b02      	subs	r3, #2
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d804      	bhi.n	800a7f2 <create_chain+0x106>
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	695b      	ldr	r3, [r3, #20]
 800a7ec:	1e5a      	subs	r2, r3, #1
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a7f2:	693b      	ldr	r3, [r7, #16]
 800a7f4:	791b      	ldrb	r3, [r3, #4]
 800a7f6:	f043 0301 	orr.w	r3, r3, #1
 800a7fa:	b2da      	uxtb	r2, r3
 800a7fc:	693b      	ldr	r3, [r7, #16]
 800a7fe:	711a      	strb	r2, [r3, #4]
 800a800:	e007      	b.n	800a812 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d102      	bne.n	800a80e <create_chain+0x122>
 800a808:	f04f 33ff 	mov.w	r3, #4294967295
 800a80c:	e000      	b.n	800a810 <create_chain+0x124>
 800a80e:	2301      	movs	r3, #1
 800a810:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a812:	69fb      	ldr	r3, [r7, #28]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3720      	adds	r7, #32
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b087      	sub	sp, #28
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a830:	3304      	adds	r3, #4
 800a832:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	0a5b      	lsrs	r3, r3, #9
 800a838:	68fa      	ldr	r2, [r7, #12]
 800a83a:	8952      	ldrh	r2, [r2, #10]
 800a83c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a840:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	1d1a      	adds	r2, r3, #4
 800a846:	613a      	str	r2, [r7, #16]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <clmt_clust+0x3a>
 800a852:	2300      	movs	r3, #0
 800a854:	e010      	b.n	800a878 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a856:	697a      	ldr	r2, [r7, #20]
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d307      	bcc.n	800a86e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a85e:	697a      	ldr	r2, [r7, #20]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	3304      	adds	r3, #4
 800a86a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a86c:	e7e9      	b.n	800a842 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a86e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	4413      	add	r3, r2
}
 800a878:	4618      	mov	r0, r3
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr

0800a884 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b086      	sub	sp, #24
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a89a:	d204      	bcs.n	800a8a6 <dir_sdi+0x22>
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	f003 031f 	and.w	r3, r3, #31
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <dir_sdi+0x26>
		return FR_INT_ERR;
 800a8a6:	2302      	movs	r3, #2
 800a8a8:	e063      	b.n	800a972 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	683a      	ldr	r2, [r7, #0]
 800a8ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a8b6:	697b      	ldr	r3, [r7, #20]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <dir_sdi+0x46>
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	2b02      	cmp	r3, #2
 800a8c2:	d902      	bls.n	800a8ca <dir_sdi+0x46>
		clst = fs->dirbase;
 800a8c4:	693b      	ldr	r3, [r7, #16]
 800a8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a8ca:	697b      	ldr	r3, [r7, #20]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10c      	bne.n	800a8ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	095b      	lsrs	r3, r3, #5
 800a8d4:	693a      	ldr	r2, [r7, #16]
 800a8d6:	8912      	ldrh	r2, [r2, #8]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	d301      	bcc.n	800a8e0 <dir_sdi+0x5c>
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e048      	b.n	800a972 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a8e0:	693b      	ldr	r3, [r7, #16]
 800a8e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	61da      	str	r2, [r3, #28]
 800a8e8:	e029      	b.n	800a93e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	895b      	ldrh	r3, [r3, #10]
 800a8ee:	025b      	lsls	r3, r3, #9
 800a8f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a8f2:	e019      	b.n	800a928 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6979      	ldr	r1, [r7, #20]
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	f7ff fcfe 	bl	800a2fa <get_fat>
 800a8fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a906:	d101      	bne.n	800a90c <dir_sdi+0x88>
 800a908:	2301      	movs	r3, #1
 800a90a:	e032      	b.n	800a972 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2b01      	cmp	r3, #1
 800a910:	d904      	bls.n	800a91c <dir_sdi+0x98>
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	699b      	ldr	r3, [r3, #24]
 800a916:	697a      	ldr	r2, [r7, #20]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d301      	bcc.n	800a920 <dir_sdi+0x9c>
 800a91c:	2302      	movs	r3, #2
 800a91e:	e028      	b.n	800a972 <dir_sdi+0xee>
			ofs -= csz;
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	1ad3      	subs	r3, r2, r3
 800a926:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a928:	683a      	ldr	r2, [r7, #0]
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d2e1      	bcs.n	800a8f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a930:	6979      	ldr	r1, [r7, #20]
 800a932:	6938      	ldr	r0, [r7, #16]
 800a934:	f7ff fcc2 	bl	800a2bc <clust2sect>
 800a938:	4602      	mov	r2, r0
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	69db      	ldr	r3, [r3, #28]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d101      	bne.n	800a950 <dir_sdi+0xcc>
 800a94c:	2302      	movs	r3, #2
 800a94e:	e010      	b.n	800a972 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	69da      	ldr	r2, [r3, #28]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	0a5b      	lsrs	r3, r3, #9
 800a958:	441a      	add	r2, r3
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a95e:	693b      	ldr	r3, [r7, #16]
 800a960:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a96a:	441a      	add	r2, r3
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a970:	2300      	movs	r3, #0
}
 800a972:	4618      	mov	r0, r3
 800a974:	3718      	adds	r7, #24
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b086      	sub	sp, #24
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	695b      	ldr	r3, [r3, #20]
 800a98e:	3320      	adds	r3, #32
 800a990:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	69db      	ldr	r3, [r3, #28]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d003      	beq.n	800a9a2 <dir_next+0x28>
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9a0:	d301      	bcc.n	800a9a6 <dir_next+0x2c>
 800a9a2:	2304      	movs	r3, #4
 800a9a4:	e0aa      	b.n	800aafc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	f040 8098 	bne.w	800aae2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	69db      	ldr	r3, [r3, #28]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699b      	ldr	r3, [r3, #24]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d10b      	bne.n	800a9dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	095b      	lsrs	r3, r3, #5
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	8912      	ldrh	r2, [r2, #8]
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	f0c0 8088 	bcc.w	800aae2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	61da      	str	r2, [r3, #28]
 800a9d8:	2304      	movs	r3, #4
 800a9da:	e08f      	b.n	800aafc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	0a5b      	lsrs	r3, r3, #9
 800a9e0:	68fa      	ldr	r2, [r7, #12]
 800a9e2:	8952      	ldrh	r2, [r2, #10]
 800a9e4:	3a01      	subs	r2, #1
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d17a      	bne.n	800aae2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	4610      	mov	r0, r2
 800a9f6:	f7ff fc80 	bl	800a2fa <get_fat>
 800a9fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a9fc:	697b      	ldr	r3, [r7, #20]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d801      	bhi.n	800aa06 <dir_next+0x8c>
 800aa02:	2302      	movs	r3, #2
 800aa04:	e07a      	b.n	800aafc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa0c:	d101      	bne.n	800aa12 <dir_next+0x98>
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e074      	b.n	800aafc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	699b      	ldr	r3, [r3, #24]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d358      	bcc.n	800aace <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d104      	bne.n	800aa2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	2200      	movs	r2, #0
 800aa26:	61da      	str	r2, [r3, #28]
 800aa28:	2304      	movs	r3, #4
 800aa2a:	e067      	b.n	800aafc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	4619      	mov	r1, r3
 800aa34:	4610      	mov	r0, r2
 800aa36:	f7ff fe59 	bl	800a6ec <create_chain>
 800aa3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d101      	bne.n	800aa46 <dir_next+0xcc>
 800aa42:	2307      	movs	r3, #7
 800aa44:	e05a      	b.n	800aafc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <dir_next+0xd6>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e055      	b.n	800aafc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa56:	d101      	bne.n	800aa5c <dir_next+0xe2>
 800aa58:	2301      	movs	r3, #1
 800aa5a:	e04f      	b.n	800aafc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7ff fb4d 	bl	800a0fc <sync_window>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <dir_next+0xf2>
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e047      	b.n	800aafc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	3334      	adds	r3, #52	; 0x34
 800aa70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa74:	2100      	movs	r1, #0
 800aa76:	4618      	mov	r0, r3
 800aa78:	f7ff f977 	bl	8009d6a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	613b      	str	r3, [r7, #16]
 800aa80:	6979      	ldr	r1, [r7, #20]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff fc1a 	bl	800a2bc <clust2sect>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	631a      	str	r2, [r3, #48]	; 0x30
 800aa8e:	e012      	b.n	800aab6 <dir_next+0x13c>
						fs->wflag = 1;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	2201      	movs	r2, #1
 800aa94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800aa96:	68f8      	ldr	r0, [r7, #12]
 800aa98:	f7ff fb30 	bl	800a0fc <sync_window>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d001      	beq.n	800aaa6 <dir_next+0x12c>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	e02a      	b.n	800aafc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	3301      	adds	r3, #1
 800aaaa:	613b      	str	r3, [r7, #16]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab0:	1c5a      	adds	r2, r3, #1
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	631a      	str	r2, [r3, #48]	; 0x30
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	895b      	ldrh	r3, [r3, #10]
 800aaba:	461a      	mov	r2, r3
 800aabc:	693b      	ldr	r3, [r7, #16]
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d3e6      	bcc.n	800aa90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aac6:	693b      	ldr	r3, [r7, #16]
 800aac8:	1ad2      	subs	r2, r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800aad4:	6979      	ldr	r1, [r7, #20]
 800aad6:	68f8      	ldr	r0, [r7, #12]
 800aad8:	f7ff fbf0 	bl	800a2bc <clust2sect>
 800aadc:	4602      	mov	r2, r0
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	68ba      	ldr	r2, [r7, #8]
 800aae6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaf4:	441a      	add	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
 800ab0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ab14:	2100      	movs	r1, #0
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff feb4 	bl	800a884 <dir_sdi>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ab20:	7dfb      	ldrb	r3, [r7, #23]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d12b      	bne.n	800ab7e <dir_alloc+0x7a>
		n = 0;
 800ab26:	2300      	movs	r3, #0
 800ab28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	4619      	mov	r1, r3
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f7ff fb27 	bl	800a184 <move_window>
 800ab36:	4603      	mov	r3, r0
 800ab38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ab3a:	7dfb      	ldrb	r3, [r7, #23]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d11d      	bne.n	800ab7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	6a1b      	ldr	r3, [r3, #32]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	2be5      	cmp	r3, #229	; 0xe5
 800ab48:	d004      	beq.n	800ab54 <dir_alloc+0x50>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6a1b      	ldr	r3, [r3, #32]
 800ab4e:	781b      	ldrb	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d107      	bne.n	800ab64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3301      	adds	r3, #1
 800ab58:	613b      	str	r3, [r7, #16]
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	429a      	cmp	r2, r3
 800ab60:	d102      	bne.n	800ab68 <dir_alloc+0x64>
 800ab62:	e00c      	b.n	800ab7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ab64:	2300      	movs	r3, #0
 800ab66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ab68:	2101      	movs	r1, #1
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f7ff ff05 	bl	800a97a <dir_next>
 800ab70:	4603      	mov	r3, r0
 800ab72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ab74:	7dfb      	ldrb	r3, [r7, #23]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d0d7      	beq.n	800ab2a <dir_alloc+0x26>
 800ab7a:	e000      	b.n	800ab7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ab7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ab7e:	7dfb      	ldrb	r3, [r7, #23]
 800ab80:	2b04      	cmp	r3, #4
 800ab82:	d101      	bne.n	800ab88 <dir_alloc+0x84>
 800ab84:	2307      	movs	r3, #7
 800ab86:	75fb      	strb	r3, [r7, #23]
	return res;
 800ab88:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}

0800ab92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ab92:	b580      	push	{r7, lr}
 800ab94:	b084      	sub	sp, #16
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	331a      	adds	r3, #26
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7ff f83f 	bl	8009c24 <ld_word>
 800aba6:	4603      	mov	r3, r0
 800aba8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	2b03      	cmp	r3, #3
 800abb0:	d109      	bne.n	800abc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	3314      	adds	r3, #20
 800abb6:	4618      	mov	r0, r3
 800abb8:	f7ff f834 	bl	8009c24 <ld_word>
 800abbc:	4603      	mov	r3, r0
 800abbe:	041b      	lsls	r3, r3, #16
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	4313      	orrs	r3, r2
 800abc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800abc6:	68fb      	ldr	r3, [r7, #12]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	60f8      	str	r0, [r7, #12]
 800abd8:	60b9      	str	r1, [r7, #8]
 800abda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	331a      	adds	r3, #26
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	b292      	uxth	r2, r2
 800abe4:	4611      	mov	r1, r2
 800abe6:	4618      	mov	r0, r3
 800abe8:	f7ff f857 	bl	8009c9a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b03      	cmp	r3, #3
 800abf2:	d109      	bne.n	800ac08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	f103 0214 	add.w	r2, r3, #20
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	0c1b      	lsrs	r3, r3, #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	4619      	mov	r1, r3
 800ac02:	4610      	mov	r0, r2
 800ac04:	f7ff f849 	bl	8009c9a <st_word>
	}
}
 800ac08:	bf00      	nop
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}

0800ac10 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ac10:	b590      	push	{r4, r7, lr}
 800ac12:	b087      	sub	sp, #28
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	331a      	adds	r3, #26
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff f800 	bl	8009c24 <ld_word>
 800ac24:	4603      	mov	r3, r0
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d001      	beq.n	800ac2e <cmp_lfn+0x1e>
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	e059      	b.n	800ace2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac36:	1e5a      	subs	r2, r3, #1
 800ac38:	4613      	mov	r3, r2
 800ac3a:	005b      	lsls	r3, r3, #1
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	4413      	add	r3, r2
 800ac42:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ac44:	2301      	movs	r3, #1
 800ac46:	81fb      	strh	r3, [r7, #14]
 800ac48:	2300      	movs	r3, #0
 800ac4a:	613b      	str	r3, [r7, #16]
 800ac4c:	e033      	b.n	800acb6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ac4e:	4a27      	ldr	r2, [pc, #156]	; (800acec <cmp_lfn+0xdc>)
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	4413      	add	r3, r2
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	461a      	mov	r2, r3
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	4413      	add	r3, r2
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe ffe1 	bl	8009c24 <ld_word>
 800ac62:	4603      	mov	r3, r0
 800ac64:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ac66:	89fb      	ldrh	r3, [r7, #14]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d01a      	beq.n	800aca2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2bfe      	cmp	r3, #254	; 0xfe
 800ac70:	d812      	bhi.n	800ac98 <cmp_lfn+0x88>
 800ac72:	89bb      	ldrh	r3, [r7, #12]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f002 ff29 	bl	800dacc <ff_wtoupper>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	461c      	mov	r4, r3
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	1c5a      	adds	r2, r3, #1
 800ac82:	617a      	str	r2, [r7, #20]
 800ac84:	005b      	lsls	r3, r3, #1
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	4413      	add	r3, r2
 800ac8a:	881b      	ldrh	r3, [r3, #0]
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f002 ff1d 	bl	800dacc <ff_wtoupper>
 800ac92:	4603      	mov	r3, r0
 800ac94:	429c      	cmp	r4, r3
 800ac96:	d001      	beq.n	800ac9c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800ac98:	2300      	movs	r3, #0
 800ac9a:	e022      	b.n	800ace2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800ac9c:	89bb      	ldrh	r3, [r7, #12]
 800ac9e:	81fb      	strh	r3, [r7, #14]
 800aca0:	e006      	b.n	800acb0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800aca2:	89bb      	ldrh	r3, [r7, #12]
 800aca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aca8:	4293      	cmp	r3, r2
 800acaa:	d001      	beq.n	800acb0 <cmp_lfn+0xa0>
 800acac:	2300      	movs	r3, #0
 800acae:	e018      	b.n	800ace2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	3301      	adds	r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
 800acb6:	693b      	ldr	r3, [r7, #16]
 800acb8:	2b0c      	cmp	r3, #12
 800acba:	d9c8      	bls.n	800ac4e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d00b      	beq.n	800ace0 <cmp_lfn+0xd0>
 800acc8:	89fb      	ldrh	r3, [r7, #14]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d008      	beq.n	800ace0 <cmp_lfn+0xd0>
 800acce:	697b      	ldr	r3, [r7, #20]
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	4413      	add	r3, r2
 800acd6:	881b      	ldrh	r3, [r3, #0]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d001      	beq.n	800ace0 <cmp_lfn+0xd0>
 800acdc:	2300      	movs	r3, #0
 800acde:	e000      	b.n	800ace2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800ace0:	2301      	movs	r3, #1
}
 800ace2:	4618      	mov	r0, r3
 800ace4:	371c      	adds	r7, #28
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bd90      	pop	{r4, r7, pc}
 800acea:	bf00      	nop
 800acec:	080220e4 	.word	0x080220e4

0800acf0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	331a      	adds	r3, #26
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7fe ff90 	bl	8009c24 <ld_word>
 800ad04:	4603      	mov	r3, r0
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d001      	beq.n	800ad0e <pick_lfn+0x1e>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	e04d      	b.n	800adaa <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ad16:	1e5a      	subs	r2, r3, #1
 800ad18:	4613      	mov	r3, r2
 800ad1a:	005b      	lsls	r3, r3, #1
 800ad1c:	4413      	add	r3, r2
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad24:	2301      	movs	r3, #1
 800ad26:	81fb      	strh	r3, [r7, #14]
 800ad28:	2300      	movs	r3, #0
 800ad2a:	613b      	str	r3, [r7, #16]
 800ad2c:	e028      	b.n	800ad80 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ad2e:	4a21      	ldr	r2, [pc, #132]	; (800adb4 <pick_lfn+0xc4>)
 800ad30:	693b      	ldr	r3, [r7, #16]
 800ad32:	4413      	add	r3, r2
 800ad34:	781b      	ldrb	r3, [r3, #0]
 800ad36:	461a      	mov	r2, r3
 800ad38:	683b      	ldr	r3, [r7, #0]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe ff71 	bl	8009c24 <ld_word>
 800ad42:	4603      	mov	r3, r0
 800ad44:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ad46:	89fb      	ldrh	r3, [r7, #14]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d00f      	beq.n	800ad6c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2bfe      	cmp	r3, #254	; 0xfe
 800ad50:	d901      	bls.n	800ad56 <pick_lfn+0x66>
 800ad52:	2300      	movs	r3, #0
 800ad54:	e029      	b.n	800adaa <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ad56:	89bb      	ldrh	r3, [r7, #12]
 800ad58:	81fb      	strh	r3, [r7, #14]
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	617a      	str	r2, [r7, #20]
 800ad60:	005b      	lsls	r3, r3, #1
 800ad62:	687a      	ldr	r2, [r7, #4]
 800ad64:	4413      	add	r3, r2
 800ad66:	89fa      	ldrh	r2, [r7, #14]
 800ad68:	801a      	strh	r2, [r3, #0]
 800ad6a:	e006      	b.n	800ad7a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ad6c:	89bb      	ldrh	r3, [r7, #12]
 800ad6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d001      	beq.n	800ad7a <pick_lfn+0x8a>
 800ad76:	2300      	movs	r3, #0
 800ad78:	e017      	b.n	800adaa <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	3301      	adds	r3, #1
 800ad7e:	613b      	str	r3, [r7, #16]
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b0c      	cmp	r3, #12
 800ad84:	d9d3      	bls.n	800ad2e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	781b      	ldrb	r3, [r3, #0]
 800ad8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	2bfe      	cmp	r3, #254	; 0xfe
 800ad96:	d901      	bls.n	800ad9c <pick_lfn+0xac>
 800ad98:	2300      	movs	r3, #0
 800ad9a:	e006      	b.n	800adaa <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	687a      	ldr	r2, [r7, #4]
 800ada2:	4413      	add	r3, r2
 800ada4:	2200      	movs	r2, #0
 800ada6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ada8:	2301      	movs	r3, #1
}
 800adaa:	4618      	mov	r0, r3
 800adac:	3718      	adds	r7, #24
 800adae:	46bd      	mov	sp, r7
 800adb0:	bd80      	pop	{r7, pc}
 800adb2:	bf00      	nop
 800adb4:	080220e4 	.word	0x080220e4

0800adb8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	4611      	mov	r1, r2
 800adc4:	461a      	mov	r2, r3
 800adc6:	460b      	mov	r3, r1
 800adc8:	71fb      	strb	r3, [r7, #7]
 800adca:	4613      	mov	r3, r2
 800adcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	330d      	adds	r3, #13
 800add2:	79ba      	ldrb	r2, [r7, #6]
 800add4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	330b      	adds	r3, #11
 800adda:	220f      	movs	r2, #15
 800addc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	330c      	adds	r3, #12
 800ade2:	2200      	movs	r2, #0
 800ade4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	331a      	adds	r3, #26
 800adea:	2100      	movs	r1, #0
 800adec:	4618      	mov	r0, r3
 800adee:	f7fe ff54 	bl	8009c9a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	1e5a      	subs	r2, r3, #1
 800adf6:	4613      	mov	r3, r2
 800adf8:	005b      	lsls	r3, r3, #1
 800adfa:	4413      	add	r3, r2
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	4413      	add	r3, r2
 800ae00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	82fb      	strh	r3, [r7, #22]
 800ae06:	2300      	movs	r3, #0
 800ae08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ae0a:	8afb      	ldrh	r3, [r7, #22]
 800ae0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae10:	4293      	cmp	r3, r2
 800ae12:	d007      	beq.n	800ae24 <put_lfn+0x6c>
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	61fa      	str	r2, [r7, #28]
 800ae1a:	005b      	lsls	r3, r3, #1
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4413      	add	r3, r2
 800ae20:	881b      	ldrh	r3, [r3, #0]
 800ae22:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ae24:	4a17      	ldr	r2, [pc, #92]	; (800ae84 <put_lfn+0xcc>)
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	4413      	add	r3, r2
 800ae2a:	781b      	ldrb	r3, [r3, #0]
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	4413      	add	r3, r2
 800ae32:	8afa      	ldrh	r2, [r7, #22]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7fe ff2f 	bl	8009c9a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ae3c:	8afb      	ldrh	r3, [r7, #22]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <put_lfn+0x90>
 800ae42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ae46:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	61bb      	str	r3, [r7, #24]
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	2b0c      	cmp	r3, #12
 800ae52:	d9da      	bls.n	800ae0a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ae54:	8afb      	ldrh	r3, [r7, #22]
 800ae56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ae5a:	4293      	cmp	r3, r2
 800ae5c:	d006      	beq.n	800ae6c <put_lfn+0xb4>
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	005b      	lsls	r3, r3, #1
 800ae62:	68fa      	ldr	r2, [r7, #12]
 800ae64:	4413      	add	r3, r2
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d103      	bne.n	800ae74 <put_lfn+0xbc>
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae72:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	79fa      	ldrb	r2, [r7, #7]
 800ae78:	701a      	strb	r2, [r3, #0]
}
 800ae7a:	bf00      	nop
 800ae7c:	3720      	adds	r7, #32
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	080220e4 	.word	0x080220e4

0800ae88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08c      	sub	sp, #48	; 0x30
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
 800ae92:	607a      	str	r2, [r7, #4]
 800ae94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ae96:	220b      	movs	r2, #11
 800ae98:	68b9      	ldr	r1, [r7, #8]
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f7fe ff44 	bl	8009d28 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	d92b      	bls.n	800aefe <gen_numname+0x76>
		sr = seq;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800aeaa:	e022      	b.n	800aef2 <gen_numname+0x6a>
			wc = *lfn++;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1c9a      	adds	r2, r3, #2
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	881b      	ldrh	r3, [r3, #0]
 800aeb4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeba:	e017      	b.n	800aeec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	005a      	lsls	r2, r3, #1
 800aec0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aec2:	f003 0301 	and.w	r3, r3, #1
 800aec6:	4413      	add	r3, r2
 800aec8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800aeca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aecc:	085b      	lsrs	r3, r3, #1
 800aece:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d005      	beq.n	800aee6 <gen_numname+0x5e>
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aee0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800aee4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800aee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee8:	3301      	adds	r3, #1
 800aeea:	62bb      	str	r3, [r7, #40]	; 0x28
 800aeec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aeee:	2b0f      	cmp	r3, #15
 800aef0:	d9e4      	bls.n	800aebc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	881b      	ldrh	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1d8      	bne.n	800aeac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aefa:	69fb      	ldr	r3, [r7, #28]
 800aefc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aefe:	2307      	movs	r3, #7
 800af00:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800af02:	683b      	ldr	r3, [r7, #0]
 800af04:	b2db      	uxtb	r3, r3
 800af06:	f003 030f 	and.w	r3, r3, #15
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	3330      	adds	r3, #48	; 0x30
 800af0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800af12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af16:	2b39      	cmp	r3, #57	; 0x39
 800af18:	d904      	bls.n	800af24 <gen_numname+0x9c>
 800af1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af1e:	3307      	adds	r3, #7
 800af20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	1e5a      	subs	r2, r3, #1
 800af28:	62ba      	str	r2, [r7, #40]	; 0x28
 800af2a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800af2e:	4413      	add	r3, r2
 800af30:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800af34:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	091b      	lsrs	r3, r3, #4
 800af3c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d1de      	bne.n	800af02 <gen_numname+0x7a>
	ns[i] = '~';
 800af44:	f107 0214 	add.w	r2, r7, #20
 800af48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af4a:	4413      	add	r3, r2
 800af4c:	227e      	movs	r2, #126	; 0x7e
 800af4e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800af50:	2300      	movs	r3, #0
 800af52:	627b      	str	r3, [r7, #36]	; 0x24
 800af54:	e002      	b.n	800af5c <gen_numname+0xd4>
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	3301      	adds	r3, #1
 800af5a:	627b      	str	r3, [r7, #36]	; 0x24
 800af5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af60:	429a      	cmp	r2, r3
 800af62:	d205      	bcs.n	800af70 <gen_numname+0xe8>
 800af64:	68fa      	ldr	r2, [r7, #12]
 800af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af68:	4413      	add	r3, r2
 800af6a:	781b      	ldrb	r3, [r3, #0]
 800af6c:	2b20      	cmp	r3, #32
 800af6e:	d1f2      	bne.n	800af56 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800af70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af72:	2b07      	cmp	r3, #7
 800af74:	d808      	bhi.n	800af88 <gen_numname+0x100>
 800af76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af78:	1c5a      	adds	r2, r3, #1
 800af7a:	62ba      	str	r2, [r7, #40]	; 0x28
 800af7c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800af80:	4413      	add	r3, r2
 800af82:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800af86:	e000      	b.n	800af8a <gen_numname+0x102>
 800af88:	2120      	movs	r1, #32
 800af8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	627a      	str	r2, [r7, #36]	; 0x24
 800af90:	68fa      	ldr	r2, [r7, #12]
 800af92:	4413      	add	r3, r2
 800af94:	460a      	mov	r2, r1
 800af96:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800af98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9a:	2b07      	cmp	r3, #7
 800af9c:	d9e8      	bls.n	800af70 <gen_numname+0xe8>
}
 800af9e:	bf00      	nop
 800afa0:	bf00      	nop
 800afa2:	3730      	adds	r7, #48	; 0x30
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800afa8:	b480      	push	{r7}
 800afaa:	b085      	sub	sp, #20
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800afb0:	2300      	movs	r3, #0
 800afb2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800afb4:	230b      	movs	r3, #11
 800afb6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	0852      	lsrs	r2, r2, #1
 800afbe:	01db      	lsls	r3, r3, #7
 800afc0:	4313      	orrs	r3, r2
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	1c59      	adds	r1, r3, #1
 800afc8:	6079      	str	r1, [r7, #4]
 800afca:	781b      	ldrb	r3, [r3, #0]
 800afcc:	4413      	add	r3, r2
 800afce:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800afd0:	68bb      	ldr	r3, [r7, #8]
 800afd2:	3b01      	subs	r3, #1
 800afd4:	60bb      	str	r3, [r7, #8]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d1ed      	bne.n	800afb8 <sum_sfn+0x10>
	return sum;
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800afde:	4618      	mov	r0, r3
 800afe0:	3714      	adds	r7, #20
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr

0800afea <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b086      	sub	sp, #24
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
 800aff2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aff4:	2304      	movs	r3, #4
 800aff6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800affe:	23ff      	movs	r3, #255	; 0xff
 800b000:	757b      	strb	r3, [r7, #21]
 800b002:	23ff      	movs	r3, #255	; 0xff
 800b004:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800b006:	e081      	b.n	800b10c <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	69db      	ldr	r3, [r3, #28]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6938      	ldr	r0, [r7, #16]
 800b010:	f7ff f8b8 	bl	800a184 <move_window>
 800b014:	4603      	mov	r3, r0
 800b016:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d17c      	bne.n	800b118 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a1b      	ldr	r3, [r3, #32]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800b026:	7dbb      	ldrb	r3, [r7, #22]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d102      	bne.n	800b032 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800b02c:	2304      	movs	r3, #4
 800b02e:	75fb      	strb	r3, [r7, #23]
 800b030:	e077      	b.n	800b122 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6a1b      	ldr	r3, [r3, #32]
 800b036:	330b      	adds	r3, #11
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b03e:	73fb      	strb	r3, [r7, #15]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	7bfa      	ldrb	r2, [r7, #15]
 800b044:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800b046:	7dbb      	ldrb	r3, [r7, #22]
 800b048:	2be5      	cmp	r3, #229	; 0xe5
 800b04a:	d00e      	beq.n	800b06a <dir_read+0x80>
 800b04c:	7dbb      	ldrb	r3, [r7, #22]
 800b04e:	2b2e      	cmp	r3, #46	; 0x2e
 800b050:	d00b      	beq.n	800b06a <dir_read+0x80>
 800b052:	7bfb      	ldrb	r3, [r7, #15]
 800b054:	f023 0320 	bic.w	r3, r3, #32
 800b058:	2b08      	cmp	r3, #8
 800b05a:	bf0c      	ite	eq
 800b05c:	2301      	moveq	r3, #1
 800b05e:	2300      	movne	r3, #0
 800b060:	b2db      	uxtb	r3, r3
 800b062:	461a      	mov	r2, r3
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	4293      	cmp	r3, r2
 800b068:	d002      	beq.n	800b070 <dir_read+0x86>
				ord = 0xFF;
 800b06a:	23ff      	movs	r3, #255	; 0xff
 800b06c:	757b      	strb	r3, [r7, #21]
 800b06e:	e044      	b.n	800b0fa <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800b070:	7bfb      	ldrb	r3, [r7, #15]
 800b072:	2b0f      	cmp	r3, #15
 800b074:	d12f      	bne.n	800b0d6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800b076:	7dbb      	ldrb	r3, [r7, #22]
 800b078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00d      	beq.n	800b09c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	7b5b      	ldrb	r3, [r3, #13]
 800b086:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800b088:	7dbb      	ldrb	r3, [r7, #22]
 800b08a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b08e:	75bb      	strb	r3, [r7, #22]
 800b090:	7dbb      	ldrb	r3, [r7, #22]
 800b092:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	695a      	ldr	r2, [r3, #20]
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b09c:	7dba      	ldrb	r2, [r7, #22]
 800b09e:	7d7b      	ldrb	r3, [r7, #21]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d115      	bne.n	800b0d0 <dir_read+0xe6>
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	6a1b      	ldr	r3, [r3, #32]
 800b0a8:	330d      	adds	r3, #13
 800b0aa:	781b      	ldrb	r3, [r3, #0]
 800b0ac:	7d3a      	ldrb	r2, [r7, #20]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d10e      	bne.n	800b0d0 <dir_read+0xe6>
 800b0b2:	693b      	ldr	r3, [r7, #16]
 800b0b4:	68da      	ldr	r2, [r3, #12]
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6a1b      	ldr	r3, [r3, #32]
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	4610      	mov	r0, r2
 800b0be:	f7ff fe17 	bl	800acf0 <pick_lfn>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d003      	beq.n	800b0d0 <dir_read+0xe6>
 800b0c8:	7d7b      	ldrb	r3, [r7, #21]
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	e000      	b.n	800b0d2 <dir_read+0xe8>
 800b0d0:	23ff      	movs	r3, #255	; 0xff
 800b0d2:	757b      	strb	r3, [r7, #21]
 800b0d4:	e011      	b.n	800b0fa <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800b0d6:	7d7b      	ldrb	r3, [r7, #21]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d109      	bne.n	800b0f0 <dir_read+0x106>
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6a1b      	ldr	r3, [r3, #32]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f7ff ff61 	bl	800afa8 <sum_sfn>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	7d3b      	ldrb	r3, [r7, #20]
 800b0ec:	4293      	cmp	r3, r2
 800b0ee:	d015      	beq.n	800b11c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f04f 32ff 	mov.w	r2, #4294967295
 800b0f6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800b0f8:	e010      	b.n	800b11c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800b0fa:	2100      	movs	r1, #0
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fc3c 	bl	800a97a <dir_next>
 800b102:	4603      	mov	r3, r0
 800b104:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b106:	7dfb      	ldrb	r3, [r7, #23]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d109      	bne.n	800b120 <dir_read+0x136>
	while (dp->sect) {
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	2b00      	cmp	r3, #0
 800b112:	f47f af79 	bne.w	800b008 <dir_read+0x1e>
 800b116:	e004      	b.n	800b122 <dir_read+0x138>
		if (res != FR_OK) break;
 800b118:	bf00      	nop
 800b11a:	e002      	b.n	800b122 <dir_read+0x138>
					break;
 800b11c:	bf00      	nop
 800b11e:	e000      	b.n	800b122 <dir_read+0x138>
		if (res != FR_OK) break;
 800b120:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d002      	beq.n	800b12e <dir_read+0x144>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	61da      	str	r2, [r3, #28]
	return res;
 800b12e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b130:	4618      	mov	r0, r3
 800b132:	3718      	adds	r7, #24
 800b134:	46bd      	mov	sp, r7
 800b136:	bd80      	pop	{r7, pc}

0800b138 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b086      	sub	sp, #24
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b146:	2100      	movs	r1, #0
 800b148:	6878      	ldr	r0, [r7, #4]
 800b14a:	f7ff fb9b 	bl	800a884 <dir_sdi>
 800b14e:	4603      	mov	r3, r0
 800b150:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b152:	7dfb      	ldrb	r3, [r7, #23]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d001      	beq.n	800b15c <dir_find+0x24>
 800b158:	7dfb      	ldrb	r3, [r7, #23]
 800b15a:	e0a9      	b.n	800b2b0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b15c:	23ff      	movs	r3, #255	; 0xff
 800b15e:	753b      	strb	r3, [r7, #20]
 800b160:	7d3b      	ldrb	r3, [r7, #20]
 800b162:	757b      	strb	r3, [r7, #21]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f04f 32ff 	mov.w	r2, #4294967295
 800b16a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	69db      	ldr	r3, [r3, #28]
 800b170:	4619      	mov	r1, r3
 800b172:	6938      	ldr	r0, [r7, #16]
 800b174:	f7ff f806 	bl	800a184 <move_window>
 800b178:	4603      	mov	r3, r0
 800b17a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b17c:	7dfb      	ldrb	r3, [r7, #23]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	f040 8090 	bne.w	800b2a4 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6a1b      	ldr	r3, [r3, #32]
 800b188:	781b      	ldrb	r3, [r3, #0]
 800b18a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b18c:	7dbb      	ldrb	r3, [r7, #22]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d102      	bne.n	800b198 <dir_find+0x60>
 800b192:	2304      	movs	r3, #4
 800b194:	75fb      	strb	r3, [r7, #23]
 800b196:	e08a      	b.n	800b2ae <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	6a1b      	ldr	r3, [r3, #32]
 800b19c:	330b      	adds	r3, #11
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b1a4:	73fb      	strb	r3, [r7, #15]
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	7bfa      	ldrb	r2, [r7, #15]
 800b1aa:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800b1ac:	7dbb      	ldrb	r3, [r7, #22]
 800b1ae:	2be5      	cmp	r3, #229	; 0xe5
 800b1b0:	d007      	beq.n	800b1c2 <dir_find+0x8a>
 800b1b2:	7bfb      	ldrb	r3, [r7, #15]
 800b1b4:	f003 0308 	and.w	r3, r3, #8
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <dir_find+0x98>
 800b1bc:	7bfb      	ldrb	r3, [r7, #15]
 800b1be:	2b0f      	cmp	r3, #15
 800b1c0:	d006      	beq.n	800b1d0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b1c2:	23ff      	movs	r3, #255	; 0xff
 800b1c4:	757b      	strb	r3, [r7, #21]
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1cc:	631a      	str	r2, [r3, #48]	; 0x30
 800b1ce:	e05e      	b.n	800b28e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800b1d0:	7bfb      	ldrb	r3, [r7, #15]
 800b1d2:	2b0f      	cmp	r3, #15
 800b1d4:	d136      	bne.n	800b244 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b1dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d154      	bne.n	800b28e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800b1e4:	7dbb      	ldrb	r3, [r7, #22]
 800b1e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00d      	beq.n	800b20a <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	6a1b      	ldr	r3, [r3, #32]
 800b1f2:	7b5b      	ldrb	r3, [r3, #13]
 800b1f4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800b1f6:	7dbb      	ldrb	r3, [r7, #22]
 800b1f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1fc:	75bb      	strb	r3, [r7, #22]
 800b1fe:	7dbb      	ldrb	r3, [r7, #22]
 800b200:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	695a      	ldr	r2, [r3, #20]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800b20a:	7dba      	ldrb	r2, [r7, #22]
 800b20c:	7d7b      	ldrb	r3, [r7, #21]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d115      	bne.n	800b23e <dir_find+0x106>
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	6a1b      	ldr	r3, [r3, #32]
 800b216:	330d      	adds	r3, #13
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	7d3a      	ldrb	r2, [r7, #20]
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d10e      	bne.n	800b23e <dir_find+0x106>
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	68da      	ldr	r2, [r3, #12]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	6a1b      	ldr	r3, [r3, #32]
 800b228:	4619      	mov	r1, r3
 800b22a:	4610      	mov	r0, r2
 800b22c:	f7ff fcf0 	bl	800ac10 <cmp_lfn>
 800b230:	4603      	mov	r3, r0
 800b232:	2b00      	cmp	r3, #0
 800b234:	d003      	beq.n	800b23e <dir_find+0x106>
 800b236:	7d7b      	ldrb	r3, [r7, #21]
 800b238:	3b01      	subs	r3, #1
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	e000      	b.n	800b240 <dir_find+0x108>
 800b23e:	23ff      	movs	r3, #255	; 0xff
 800b240:	757b      	strb	r3, [r7, #21]
 800b242:	e024      	b.n	800b28e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b244:	7d7b      	ldrb	r3, [r7, #21]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d109      	bne.n	800b25e <dir_find+0x126>
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6a1b      	ldr	r3, [r3, #32]
 800b24e:	4618      	mov	r0, r3
 800b250:	f7ff feaa 	bl	800afa8 <sum_sfn>
 800b254:	4603      	mov	r3, r0
 800b256:	461a      	mov	r2, r3
 800b258:	7d3b      	ldrb	r3, [r7, #20]
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d024      	beq.n	800b2a8 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b264:	f003 0301 	and.w	r3, r3, #1
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d10a      	bne.n	800b282 <dir_find+0x14a>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a18      	ldr	r0, [r3, #32]
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	3324      	adds	r3, #36	; 0x24
 800b274:	220b      	movs	r2, #11
 800b276:	4619      	mov	r1, r3
 800b278:	f7fe fd92 	bl	8009da0 <mem_cmp>
 800b27c:	4603      	mov	r3, r0
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d014      	beq.n	800b2ac <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800b282:	23ff      	movs	r3, #255	; 0xff
 800b284:	757b      	strb	r3, [r7, #21]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f04f 32ff 	mov.w	r2, #4294967295
 800b28c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b28e:	2100      	movs	r1, #0
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f7ff fb72 	bl	800a97a <dir_next>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	f43f af65 	beq.w	800b16c <dir_find+0x34>
 800b2a2:	e004      	b.n	800b2ae <dir_find+0x176>
		if (res != FR_OK) break;
 800b2a4:	bf00      	nop
 800b2a6:	e002      	b.n	800b2ae <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800b2a8:	bf00      	nop
 800b2aa:	e000      	b.n	800b2ae <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800b2ac:	bf00      	nop

	return res;
 800b2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b08c      	sub	sp, #48	; 0x30
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b2cc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d001      	beq.n	800b2d8 <dir_register+0x20>
 800b2d4:	2306      	movs	r3, #6
 800b2d6:	e0e0      	b.n	800b49a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800b2d8:	2300      	movs	r3, #0
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
 800b2dc:	e002      	b.n	800b2e4 <dir_register+0x2c>
 800b2de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e0:	3301      	adds	r3, #1
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	68da      	ldr	r2, [r3, #12]
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	005b      	lsls	r3, r3, #1
 800b2ec:	4413      	add	r3, r2
 800b2ee:	881b      	ldrh	r3, [r3, #0]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d1f4      	bne.n	800b2de <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800b2fa:	f107 030c 	add.w	r3, r7, #12
 800b2fe:	220c      	movs	r2, #12
 800b300:	4618      	mov	r0, r3
 800b302:	f7fe fd11 	bl	8009d28 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800b306:	7dfb      	ldrb	r3, [r7, #23]
 800b308:	f003 0301 	and.w	r3, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d032      	beq.n	800b376 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2240      	movs	r2, #64	; 0x40
 800b314:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800b318:	2301      	movs	r3, #1
 800b31a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b31c:	e016      	b.n	800b34c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	68da      	ldr	r2, [r3, #12]
 800b328:	f107 010c 	add.w	r1, r7, #12
 800b32c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b32e:	f7ff fdab 	bl	800ae88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f7ff ff00 	bl	800b138 <dir_find>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800b33e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b342:	2b00      	cmp	r3, #0
 800b344:	d106      	bne.n	800b354 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800b346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b348:	3301      	adds	r3, #1
 800b34a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b34e:	2b63      	cmp	r3, #99	; 0x63
 800b350:	d9e5      	bls.n	800b31e <dir_register+0x66>
 800b352:	e000      	b.n	800b356 <dir_register+0x9e>
			if (res != FR_OK) break;
 800b354:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800b356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b358:	2b64      	cmp	r3, #100	; 0x64
 800b35a:	d101      	bne.n	800b360 <dir_register+0xa8>
 800b35c:	2307      	movs	r3, #7
 800b35e:	e09c      	b.n	800b49a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800b360:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b364:	2b04      	cmp	r3, #4
 800b366:	d002      	beq.n	800b36e <dir_register+0xb6>
 800b368:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b36c:	e095      	b.n	800b49a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800b36e:	7dfa      	ldrb	r2, [r7, #23]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	f003 0302 	and.w	r3, r3, #2
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d007      	beq.n	800b390 <dir_register+0xd8>
 800b380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b382:	330c      	adds	r3, #12
 800b384:	4a47      	ldr	r2, [pc, #284]	; (800b4a4 <dir_register+0x1ec>)
 800b386:	fba2 2303 	umull	r2, r3, r2, r3
 800b38a:	089b      	lsrs	r3, r3, #2
 800b38c:	3301      	adds	r3, #1
 800b38e:	e000      	b.n	800b392 <dir_register+0xda>
 800b390:	2301      	movs	r3, #1
 800b392:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800b394:	6a39      	ldr	r1, [r7, #32]
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f7ff fbb4 	bl	800ab04 <dir_alloc>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800b3a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d148      	bne.n	800b43c <dir_register+0x184>
 800b3aa:	6a3b      	ldr	r3, [r7, #32]
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	623b      	str	r3, [r7, #32]
 800b3b0:	6a3b      	ldr	r3, [r7, #32]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d042      	beq.n	800b43c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	695a      	ldr	r2, [r3, #20]
 800b3ba:	6a3b      	ldr	r3, [r7, #32]
 800b3bc:	015b      	lsls	r3, r3, #5
 800b3be:	1ad3      	subs	r3, r2, r3
 800b3c0:	4619      	mov	r1, r3
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f7ff fa5e 	bl	800a884 <dir_sdi>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b3ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d132      	bne.n	800b43c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	3324      	adds	r3, #36	; 0x24
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7ff fde4 	bl	800afa8 <sum_sfn>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	69db      	ldr	r3, [r3, #28]
 800b3e8:	4619      	mov	r1, r3
 800b3ea:	69f8      	ldr	r0, [r7, #28]
 800b3ec:	f7fe feca 	bl	800a184 <move_window>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800b3f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d11d      	bne.n	800b43a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	68d8      	ldr	r0, [r3, #12]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6a19      	ldr	r1, [r3, #32]
 800b406:	6a3b      	ldr	r3, [r7, #32]
 800b408:	b2da      	uxtb	r2, r3
 800b40a:	7efb      	ldrb	r3, [r7, #27]
 800b40c:	f7ff fcd4 	bl	800adb8 <put_lfn>
				fs->wflag = 1;
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	2201      	movs	r2, #1
 800b414:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800b416:	2100      	movs	r1, #0
 800b418:	6878      	ldr	r0, [r7, #4]
 800b41a:	f7ff faae 	bl	800a97a <dir_next>
 800b41e:	4603      	mov	r3, r0
 800b420:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800b424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d107      	bne.n	800b43c <dir_register+0x184>
 800b42c:	6a3b      	ldr	r3, [r7, #32]
 800b42e:	3b01      	subs	r3, #1
 800b430:	623b      	str	r3, [r7, #32]
 800b432:	6a3b      	ldr	r3, [r7, #32]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1d5      	bne.n	800b3e4 <dir_register+0x12c>
 800b438:	e000      	b.n	800b43c <dir_register+0x184>
				if (res != FR_OK) break;
 800b43a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b43c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b440:	2b00      	cmp	r3, #0
 800b442:	d128      	bne.n	800b496 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	69db      	ldr	r3, [r3, #28]
 800b448:	4619      	mov	r1, r3
 800b44a:	69f8      	ldr	r0, [r7, #28]
 800b44c:	f7fe fe9a 	bl	800a184 <move_window>
 800b450:	4603      	mov	r3, r0
 800b452:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b456:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d11b      	bne.n	800b496 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a1b      	ldr	r3, [r3, #32]
 800b462:	2220      	movs	r2, #32
 800b464:	2100      	movs	r1, #0
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe fc7f 	bl	8009d6a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	6a18      	ldr	r0, [r3, #32]
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	3324      	adds	r3, #36	; 0x24
 800b474:	220b      	movs	r2, #11
 800b476:	4619      	mov	r1, r3
 800b478:	f7fe fc56 	bl	8009d28 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a1b      	ldr	r3, [r3, #32]
 800b486:	330c      	adds	r3, #12
 800b488:	f002 0218 	and.w	r2, r2, #24
 800b48c:	b2d2      	uxtb	r2, r2
 800b48e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	2201      	movs	r2, #1
 800b494:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b496:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3730      	adds	r7, #48	; 0x30
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	4ec4ec4f 	.word	0x4ec4ec4f

0800b4a8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b088      	sub	sp, #32
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
 800b4b0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	69db      	ldr	r3, [r3, #28]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	f000 80c9 	beq.w	800b65a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4d0:	d032      	beq.n	800b538 <get_fileinfo+0x90>
			i = j = 0;
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	61bb      	str	r3, [r7, #24]
 800b4d6:	69bb      	ldr	r3, [r7, #24]
 800b4d8:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b4da:	e01b      	b.n	800b514 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b4dc:	89fb      	ldrh	r3, [r7, #14]
 800b4de:	2100      	movs	r1, #0
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f002 fab7 	bl	800da54 <ff_convert>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b4ea:	89fb      	ldrh	r3, [r7, #14]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d102      	bne.n	800b4f6 <get_fileinfo+0x4e>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	e01a      	b.n	800b52c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b4f6:	69fb      	ldr	r3, [r7, #28]
 800b4f8:	2bfe      	cmp	r3, #254	; 0xfe
 800b4fa:	d902      	bls.n	800b502 <get_fileinfo+0x5a>
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	61fb      	str	r3, [r7, #28]
 800b500:	e014      	b.n	800b52c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b502:	69fb      	ldr	r3, [r7, #28]
 800b504:	1c5a      	adds	r2, r3, #1
 800b506:	61fa      	str	r2, [r7, #28]
 800b508:	89fa      	ldrh	r2, [r7, #14]
 800b50a:	b2d1      	uxtb	r1, r2
 800b50c:	683a      	ldr	r2, [r7, #0]
 800b50e:	4413      	add	r3, r2
 800b510:	460a      	mov	r2, r1
 800b512:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	68da      	ldr	r2, [r3, #12]
 800b518:	69bb      	ldr	r3, [r7, #24]
 800b51a:	1c59      	adds	r1, r3, #1
 800b51c:	61b9      	str	r1, [r7, #24]
 800b51e:	005b      	lsls	r3, r3, #1
 800b520:	4413      	add	r3, r2
 800b522:	881b      	ldrh	r3, [r3, #0]
 800b524:	81fb      	strh	r3, [r7, #14]
 800b526:	89fb      	ldrh	r3, [r7, #14]
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1d7      	bne.n	800b4dc <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b52c:	683a      	ldr	r2, [r7, #0]
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	4413      	add	r3, r2
 800b532:	3316      	adds	r3, #22
 800b534:	2200      	movs	r2, #0
 800b536:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b538:	2300      	movs	r3, #0
 800b53a:	61bb      	str	r3, [r7, #24]
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b540:	683a      	ldr	r2, [r7, #0]
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	4413      	add	r3, r2
 800b546:	3316      	adds	r3, #22
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b54c:	e04c      	b.n	800b5e8 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a1a      	ldr	r2, [r3, #32]
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	1c59      	adds	r1, r3, #1
 800b556:	61f9      	str	r1, [r7, #28]
 800b558:	4413      	add	r3, r2
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b55e:	7dfb      	ldrb	r3, [r7, #23]
 800b560:	2b20      	cmp	r3, #32
 800b562:	d100      	bne.n	800b566 <get_fileinfo+0xbe>
 800b564:	e040      	b.n	800b5e8 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b566:	7dfb      	ldrb	r3, [r7, #23]
 800b568:	2b05      	cmp	r3, #5
 800b56a:	d101      	bne.n	800b570 <get_fileinfo+0xc8>
 800b56c:	23e5      	movs	r3, #229	; 0xe5
 800b56e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b570:	69fb      	ldr	r3, [r7, #28]
 800b572:	2b09      	cmp	r3, #9
 800b574:	d10f      	bne.n	800b596 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b576:	89bb      	ldrh	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d105      	bne.n	800b588 <get_fileinfo+0xe0>
 800b57c:	683a      	ldr	r2, [r7, #0]
 800b57e:	69bb      	ldr	r3, [r7, #24]
 800b580:	4413      	add	r3, r2
 800b582:	3316      	adds	r3, #22
 800b584:	222e      	movs	r2, #46	; 0x2e
 800b586:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b588:	69bb      	ldr	r3, [r7, #24]
 800b58a:	1c5a      	adds	r2, r3, #1
 800b58c:	61ba      	str	r2, [r7, #24]
 800b58e:	683a      	ldr	r2, [r7, #0]
 800b590:	4413      	add	r3, r2
 800b592:	222e      	movs	r2, #46	; 0x2e
 800b594:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b596:	683a      	ldr	r2, [r7, #0]
 800b598:	69bb      	ldr	r3, [r7, #24]
 800b59a:	4413      	add	r3, r2
 800b59c:	3309      	adds	r3, #9
 800b59e:	7dfa      	ldrb	r2, [r7, #23]
 800b5a0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b5a2:	89bb      	ldrh	r3, [r7, #12]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d11c      	bne.n	800b5e2 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b40      	cmp	r3, #64	; 0x40
 800b5ac:	d913      	bls.n	800b5d6 <get_fileinfo+0x12e>
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	2b5a      	cmp	r3, #90	; 0x5a
 800b5b2:	d810      	bhi.n	800b5d6 <get_fileinfo+0x12e>
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	6a1b      	ldr	r3, [r3, #32]
 800b5b8:	330c      	adds	r3, #12
 800b5ba:	781b      	ldrb	r3, [r3, #0]
 800b5bc:	461a      	mov	r2, r3
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	2b08      	cmp	r3, #8
 800b5c2:	d901      	bls.n	800b5c8 <get_fileinfo+0x120>
 800b5c4:	2310      	movs	r3, #16
 800b5c6:	e000      	b.n	800b5ca <get_fileinfo+0x122>
 800b5c8:	2308      	movs	r3, #8
 800b5ca:	4013      	ands	r3, r2
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b5d0:	7dfb      	ldrb	r3, [r7, #23]
 800b5d2:	3320      	adds	r3, #32
 800b5d4:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	69bb      	ldr	r3, [r7, #24]
 800b5da:	4413      	add	r3, r2
 800b5dc:	3316      	adds	r3, #22
 800b5de:	7dfa      	ldrb	r2, [r7, #23]
 800b5e0:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b5e2:	69bb      	ldr	r3, [r7, #24]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b5e8:	69fb      	ldr	r3, [r7, #28]
 800b5ea:	2b0a      	cmp	r3, #10
 800b5ec:	d9af      	bls.n	800b54e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b5ee:	89bb      	ldrh	r3, [r7, #12]
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d10d      	bne.n	800b610 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b5f4:	683a      	ldr	r2, [r7, #0]
 800b5f6:	69bb      	ldr	r3, [r7, #24]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	3316      	adds	r3, #22
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	6a1b      	ldr	r3, [r3, #32]
 800b604:	330c      	adds	r3, #12
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <get_fileinfo+0x168>
 800b60c:	2300      	movs	r3, #0
 800b60e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b610:	683a      	ldr	r2, [r7, #0]
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	4413      	add	r3, r2
 800b616:	3309      	adds	r3, #9
 800b618:	2200      	movs	r2, #0
 800b61a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	7ada      	ldrb	r2, [r3, #11]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	331c      	adds	r3, #28
 800b62c:	4618      	mov	r0, r3
 800b62e:	f7fe fb11 	bl	8009c54 <ld_dword>
 800b632:	4602      	mov	r2, r0
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	3316      	adds	r3, #22
 800b63e:	4618      	mov	r0, r3
 800b640:	f7fe fb08 	bl	8009c54 <ld_dword>
 800b644:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b646:	68bb      	ldr	r3, [r7, #8]
 800b648:	b29a      	uxth	r2, r3
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	80da      	strh	r2, [r3, #6]
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	0c1b      	lsrs	r3, r3, #16
 800b652:	b29a      	uxth	r2, r3
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	809a      	strh	r2, [r3, #4]
 800b658:	e000      	b.n	800b65c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b65a:	bf00      	nop
}
 800b65c:	3720      	adds	r7, #32
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}
	...

0800b664 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	b08a      	sub	sp, #40	; 0x28
 800b668:	af00      	add	r7, sp, #0
 800b66a:	6078      	str	r0, [r7, #4]
 800b66c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	613b      	str	r3, [r7, #16]
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	68db      	ldr	r3, [r3, #12]
 800b67a:	60fb      	str	r3, [r7, #12]
 800b67c:	2300      	movs	r3, #0
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697b      	ldr	r3, [r7, #20]
 800b682:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b684:	69bb      	ldr	r3, [r7, #24]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	61ba      	str	r2, [r7, #24]
 800b68a:	693a      	ldr	r2, [r7, #16]
 800b68c:	4413      	add	r3, r2
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b694:	2b1f      	cmp	r3, #31
 800b696:	d940      	bls.n	800b71a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b69a:	2b2f      	cmp	r3, #47	; 0x2f
 800b69c:	d006      	beq.n	800b6ac <create_name+0x48>
 800b69e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6a0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6a2:	d110      	bne.n	800b6c6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b6a4:	e002      	b.n	800b6ac <create_name+0x48>
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	61bb      	str	r3, [r7, #24]
 800b6ac:	693a      	ldr	r2, [r7, #16]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	2b2f      	cmp	r3, #47	; 0x2f
 800b6b6:	d0f6      	beq.n	800b6a6 <create_name+0x42>
 800b6b8:	693a      	ldr	r2, [r7, #16]
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	4413      	add	r3, r2
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	2b5c      	cmp	r3, #92	; 0x5c
 800b6c2:	d0f0      	beq.n	800b6a6 <create_name+0x42>
			break;
 800b6c4:	e02a      	b.n	800b71c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b6c6:	697b      	ldr	r3, [r7, #20]
 800b6c8:	2bfe      	cmp	r3, #254	; 0xfe
 800b6ca:	d901      	bls.n	800b6d0 <create_name+0x6c>
 800b6cc:	2306      	movs	r3, #6
 800b6ce:	e177      	b.n	800b9c0 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b6d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b6d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6d8:	2101      	movs	r1, #1
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f002 f9ba 	bl	800da54 <ff_convert>
 800b6e0:	4603      	mov	r3, r0
 800b6e2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b6e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <create_name+0x8a>
 800b6ea:	2306      	movs	r3, #6
 800b6ec:	e168      	b.n	800b9c0 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b6ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f0:	2b7f      	cmp	r3, #127	; 0x7f
 800b6f2:	d809      	bhi.n	800b708 <create_name+0xa4>
 800b6f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b6f6:	4619      	mov	r1, r3
 800b6f8:	48b3      	ldr	r0, [pc, #716]	; (800b9c8 <create_name+0x364>)
 800b6fa:	f7fe fb78 	bl	8009dee <chk_chr>
 800b6fe:	4603      	mov	r3, r0
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <create_name+0xa4>
 800b704:	2306      	movs	r3, #6
 800b706:	e15b      	b.n	800b9c0 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b708:	697b      	ldr	r3, [r7, #20]
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	617a      	str	r2, [r7, #20]
 800b70e:	005b      	lsls	r3, r3, #1
 800b710:	68fa      	ldr	r2, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b716:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b718:	e7b4      	b.n	800b684 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b71a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	441a      	add	r2, r3
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b728:	2b1f      	cmp	r3, #31
 800b72a:	d801      	bhi.n	800b730 <create_name+0xcc>
 800b72c:	2304      	movs	r3, #4
 800b72e:	e000      	b.n	800b732 <create_name+0xce>
 800b730:	2300      	movs	r3, #0
 800b732:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b736:	e011      	b.n	800b75c <create_name+0xf8>
		w = lfn[di - 1];
 800b738:	697b      	ldr	r3, [r7, #20]
 800b73a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b73e:	3b01      	subs	r3, #1
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	68fa      	ldr	r2, [r7, #12]
 800b744:	4413      	add	r3, r2
 800b746:	881b      	ldrh	r3, [r3, #0]
 800b748:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b74a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b74c:	2b20      	cmp	r3, #32
 800b74e:	d002      	beq.n	800b756 <create_name+0xf2>
 800b750:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b752:	2b2e      	cmp	r3, #46	; 0x2e
 800b754:	d106      	bne.n	800b764 <create_name+0x100>
		di--;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	3b01      	subs	r3, #1
 800b75a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d1ea      	bne.n	800b738 <create_name+0xd4>
 800b762:	e000      	b.n	800b766 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b764:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	68fa      	ldr	r2, [r7, #12]
 800b76c:	4413      	add	r3, r2
 800b76e:	2200      	movs	r2, #0
 800b770:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b772:	697b      	ldr	r3, [r7, #20]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <create_name+0x118>
 800b778:	2306      	movs	r3, #6
 800b77a:	e121      	b.n	800b9c0 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	3324      	adds	r3, #36	; 0x24
 800b780:	220b      	movs	r2, #11
 800b782:	2120      	movs	r1, #32
 800b784:	4618      	mov	r0, r3
 800b786:	f7fe faf0 	bl	8009d6a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b78a:	2300      	movs	r3, #0
 800b78c:	61bb      	str	r3, [r7, #24]
 800b78e:	e002      	b.n	800b796 <create_name+0x132>
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	3301      	adds	r3, #1
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	005b      	lsls	r3, r3, #1
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	881b      	ldrh	r3, [r3, #0]
 800b7a0:	2b20      	cmp	r3, #32
 800b7a2:	d0f5      	beq.n	800b790 <create_name+0x12c>
 800b7a4:	69bb      	ldr	r3, [r7, #24]
 800b7a6:	005b      	lsls	r3, r3, #1
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	881b      	ldrh	r3, [r3, #0]
 800b7ae:	2b2e      	cmp	r3, #46	; 0x2e
 800b7b0:	d0ee      	beq.n	800b790 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d009      	beq.n	800b7cc <create_name+0x168>
 800b7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7bc:	f043 0303 	orr.w	r3, r3, #3
 800b7c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b7c4:	e002      	b.n	800b7cc <create_name+0x168>
 800b7c6:	697b      	ldr	r3, [r7, #20]
 800b7c8:	3b01      	subs	r3, #1
 800b7ca:	617b      	str	r3, [r7, #20]
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d009      	beq.n	800b7e6 <create_name+0x182>
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	005b      	lsls	r3, r3, #1
 800b7dc:	68fa      	ldr	r2, [r7, #12]
 800b7de:	4413      	add	r3, r2
 800b7e0:	881b      	ldrh	r3, [r3, #0]
 800b7e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b7e4:	d1ef      	bne.n	800b7c6 <create_name+0x162>

	i = b = 0; ni = 8;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b7ec:	2300      	movs	r3, #0
 800b7ee:	623b      	str	r3, [r7, #32]
 800b7f0:	2308      	movs	r3, #8
 800b7f2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b7f4:	69bb      	ldr	r3, [r7, #24]
 800b7f6:	1c5a      	adds	r2, r3, #1
 800b7f8:	61ba      	str	r2, [r7, #24]
 800b7fa:	005b      	lsls	r3, r3, #1
 800b7fc:	68fa      	ldr	r2, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	881b      	ldrh	r3, [r3, #0]
 800b802:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b804:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b806:	2b00      	cmp	r3, #0
 800b808:	f000 8090 	beq.w	800b92c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b80e:	2b20      	cmp	r3, #32
 800b810:	d006      	beq.n	800b820 <create_name+0x1bc>
 800b812:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b814:	2b2e      	cmp	r3, #46	; 0x2e
 800b816:	d10a      	bne.n	800b82e <create_name+0x1ca>
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d006      	beq.n	800b82e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b820:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b824:	f043 0303 	orr.w	r3, r3, #3
 800b828:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b82c:	e07d      	b.n	800b92a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b82e:	6a3a      	ldr	r2, [r7, #32]
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	429a      	cmp	r2, r3
 800b834:	d203      	bcs.n	800b83e <create_name+0x1da>
 800b836:	69ba      	ldr	r2, [r7, #24]
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	429a      	cmp	r2, r3
 800b83c:	d123      	bne.n	800b886 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b83e:	69fb      	ldr	r3, [r7, #28]
 800b840:	2b0b      	cmp	r3, #11
 800b842:	d106      	bne.n	800b852 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b848:	f043 0303 	orr.w	r3, r3, #3
 800b84c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b850:	e06f      	b.n	800b932 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	697b      	ldr	r3, [r7, #20]
 800b856:	429a      	cmp	r2, r3
 800b858:	d005      	beq.n	800b866 <create_name+0x202>
 800b85a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b85e:	f043 0303 	orr.w	r3, r3, #3
 800b862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b866:	69ba      	ldr	r2, [r7, #24]
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	429a      	cmp	r2, r3
 800b86c:	d860      	bhi.n	800b930 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	61bb      	str	r3, [r7, #24]
 800b872:	2308      	movs	r3, #8
 800b874:	623b      	str	r3, [r7, #32]
 800b876:	230b      	movs	r3, #11
 800b878:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b87a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b87e:	009b      	lsls	r3, r3, #2
 800b880:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b884:	e051      	b.n	800b92a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b886:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b888:	2b7f      	cmp	r3, #127	; 0x7f
 800b88a:	d914      	bls.n	800b8b6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b88c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b88e:	2100      	movs	r1, #0
 800b890:	4618      	mov	r0, r3
 800b892:	f002 f8df 	bl	800da54 <ff_convert>
 800b896:	4603      	mov	r3, r0
 800b898:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b89a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d004      	beq.n	800b8aa <create_name+0x246>
 800b8a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8a2:	3b80      	subs	r3, #128	; 0x80
 800b8a4:	4a49      	ldr	r2, [pc, #292]	; (800b9cc <create_name+0x368>)
 800b8a6:	5cd3      	ldrb	r3, [r2, r3]
 800b8a8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b8aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8ae:	f043 0302 	orr.w	r3, r3, #2
 800b8b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b8b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d007      	beq.n	800b8cc <create_name+0x268>
 800b8bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8be:	4619      	mov	r1, r3
 800b8c0:	4843      	ldr	r0, [pc, #268]	; (800b9d0 <create_name+0x36c>)
 800b8c2:	f7fe fa94 	bl	8009dee <chk_chr>
 800b8c6:	4603      	mov	r3, r0
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d008      	beq.n	800b8de <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b8cc:	235f      	movs	r3, #95	; 0x5f
 800b8ce:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b8d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b8d4:	f043 0303 	orr.w	r3, r3, #3
 800b8d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b8dc:	e01b      	b.n	800b916 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b8de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e0:	2b40      	cmp	r3, #64	; 0x40
 800b8e2:	d909      	bls.n	800b8f8 <create_name+0x294>
 800b8e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8e6:	2b5a      	cmp	r3, #90	; 0x5a
 800b8e8:	d806      	bhi.n	800b8f8 <create_name+0x294>
					b |= 2;
 800b8ea:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b8ee:	f043 0302 	orr.w	r3, r3, #2
 800b8f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b8f6:	e00e      	b.n	800b916 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b8f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b8fa:	2b60      	cmp	r3, #96	; 0x60
 800b8fc:	d90b      	bls.n	800b916 <create_name+0x2b2>
 800b8fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b900:	2b7a      	cmp	r3, #122	; 0x7a
 800b902:	d808      	bhi.n	800b916 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b904:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b908:	f043 0301 	orr.w	r3, r3, #1
 800b90c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b912:	3b20      	subs	r3, #32
 800b914:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b916:	6a3b      	ldr	r3, [r7, #32]
 800b918:	1c5a      	adds	r2, r3, #1
 800b91a:	623a      	str	r2, [r7, #32]
 800b91c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b91e:	b2d1      	uxtb	r1, r2
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	4413      	add	r3, r2
 800b924:	460a      	mov	r2, r1
 800b926:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b92a:	e763      	b.n	800b7f4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b92c:	bf00      	nop
 800b92e:	e000      	b.n	800b932 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b930:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b938:	2be5      	cmp	r3, #229	; 0xe5
 800b93a:	d103      	bne.n	800b944 <create_name+0x2e0>
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2205      	movs	r2, #5
 800b940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	2b08      	cmp	r3, #8
 800b948:	d104      	bne.n	800b954 <create_name+0x2f0>
 800b94a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b954:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b958:	f003 030c 	and.w	r3, r3, #12
 800b95c:	2b0c      	cmp	r3, #12
 800b95e:	d005      	beq.n	800b96c <create_name+0x308>
 800b960:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b964:	f003 0303 	and.w	r3, r3, #3
 800b968:	2b03      	cmp	r3, #3
 800b96a:	d105      	bne.n	800b978 <create_name+0x314>
 800b96c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b970:	f043 0302 	orr.w	r3, r3, #2
 800b974:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b978:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b97c:	f003 0302 	and.w	r3, r3, #2
 800b980:	2b00      	cmp	r3, #0
 800b982:	d117      	bne.n	800b9b4 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b984:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b988:	f003 0303 	and.w	r3, r3, #3
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d105      	bne.n	800b99c <create_name+0x338>
 800b990:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b994:	f043 0310 	orr.w	r3, r3, #16
 800b998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b99c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b9a0:	f003 030c 	and.w	r3, r3, #12
 800b9a4:	2b04      	cmp	r3, #4
 800b9a6:	d105      	bne.n	800b9b4 <create_name+0x350>
 800b9a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b9ac:	f043 0308 	orr.w	r3, r3, #8
 800b9b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b9ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b9be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3728      	adds	r7, #40	; 0x28
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	08018798 	.word	0x08018798
 800b9cc:	08022064 	.word	0x08022064
 800b9d0:	080187a4 	.word	0x080187a4

0800b9d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b086      	sub	sp, #24
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b9e8:	e002      	b.n	800b9f0 <follow_path+0x1c>
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	3301      	adds	r3, #1
 800b9ee:	603b      	str	r3, [r7, #0]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	781b      	ldrb	r3, [r3, #0]
 800b9f4:	2b2f      	cmp	r3, #47	; 0x2f
 800b9f6:	d0f8      	beq.n	800b9ea <follow_path+0x16>
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	781b      	ldrb	r3, [r3, #0]
 800b9fc:	2b5c      	cmp	r3, #92	; 0x5c
 800b9fe:	d0f4      	beq.n	800b9ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	2200      	movs	r2, #0
 800ba04:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	781b      	ldrb	r3, [r3, #0]
 800ba0a:	2b1f      	cmp	r3, #31
 800ba0c:	d80a      	bhi.n	800ba24 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2280      	movs	r2, #128	; 0x80
 800ba12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ba16:	2100      	movs	r1, #0
 800ba18:	6878      	ldr	r0, [r7, #4]
 800ba1a:	f7fe ff33 	bl	800a884 <dir_sdi>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	75fb      	strb	r3, [r7, #23]
 800ba22:	e043      	b.n	800baac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ba24:	463b      	mov	r3, r7
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fe1b 	bl	800b664 <create_name>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ba32:	7dfb      	ldrb	r3, [r7, #23]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d134      	bne.n	800baa2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f7ff fb7d 	bl	800b138 <dir_find>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ba48:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ba4a:	7dfb      	ldrb	r3, [r7, #23]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00a      	beq.n	800ba66 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ba50:	7dfb      	ldrb	r3, [r7, #23]
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	d127      	bne.n	800baa6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ba56:	7afb      	ldrb	r3, [r7, #11]
 800ba58:	f003 0304 	and.w	r3, r3, #4
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d122      	bne.n	800baa6 <follow_path+0xd2>
 800ba60:	2305      	movs	r3, #5
 800ba62:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ba64:	e01f      	b.n	800baa6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ba66:	7afb      	ldrb	r3, [r7, #11]
 800ba68:	f003 0304 	and.w	r3, r3, #4
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d11c      	bne.n	800baaa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ba70:	693b      	ldr	r3, [r7, #16]
 800ba72:	799b      	ldrb	r3, [r3, #6]
 800ba74:	f003 0310 	and.w	r3, r3, #16
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d102      	bne.n	800ba82 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ba7c:	2305      	movs	r3, #5
 800ba7e:	75fb      	strb	r3, [r7, #23]
 800ba80:	e014      	b.n	800baac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	695b      	ldr	r3, [r3, #20]
 800ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba90:	4413      	add	r3, r2
 800ba92:	4619      	mov	r1, r3
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7ff f87c 	bl	800ab92 <ld_clust>
 800ba9a:	4602      	mov	r2, r0
 800ba9c:	693b      	ldr	r3, [r7, #16]
 800ba9e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800baa0:	e7c0      	b.n	800ba24 <follow_path+0x50>
			if (res != FR_OK) break;
 800baa2:	bf00      	nop
 800baa4:	e002      	b.n	800baac <follow_path+0xd8>
				break;
 800baa6:	bf00      	nop
 800baa8:	e000      	b.n	800baac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800baaa:	bf00      	nop
			}
		}
	}

	return res;
 800baac:	7dfb      	ldrb	r3, [r7, #23]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3718      	adds	r7, #24
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b087      	sub	sp, #28
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800babe:	f04f 33ff 	mov.w	r3, #4294967295
 800bac2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d031      	beq.n	800bb30 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	e002      	b.n	800bada <get_ldnumber+0x24>
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	3301      	adds	r3, #1
 800bad8:	617b      	str	r3, [r7, #20]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	781b      	ldrb	r3, [r3, #0]
 800bade:	2b1f      	cmp	r3, #31
 800bae0:	d903      	bls.n	800baea <get_ldnumber+0x34>
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	781b      	ldrb	r3, [r3, #0]
 800bae6:	2b3a      	cmp	r3, #58	; 0x3a
 800bae8:	d1f4      	bne.n	800bad4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	2b3a      	cmp	r3, #58	; 0x3a
 800baf0:	d11c      	bne.n	800bb2c <get_ldnumber+0x76>
			tp = *path;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	60fa      	str	r2, [r7, #12]
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	3b30      	subs	r3, #48	; 0x30
 800bb02:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	2b09      	cmp	r3, #9
 800bb08:	d80e      	bhi.n	800bb28 <get_ldnumber+0x72>
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	697b      	ldr	r3, [r7, #20]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d10a      	bne.n	800bb28 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	2b01      	cmp	r3, #1
 800bb16:	d807      	bhi.n	800bb28 <get_ldnumber+0x72>
					vol = (int)i;
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	3301      	adds	r3, #1
 800bb20:	617b      	str	r3, [r7, #20]
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	697a      	ldr	r2, [r7, #20]
 800bb26:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	e002      	b.n	800bb32 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800bb30:	693b      	ldr	r3, [r7, #16]
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	371c      	adds	r7, #28
 800bb36:	46bd      	mov	sp, r7
 800bb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3c:	4770      	bx	lr
	...

0800bb40 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b082      	sub	sp, #8
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	70da      	strb	r2, [r3, #3]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f04f 32ff 	mov.w	r2, #4294967295
 800bb56:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800bb58:	6839      	ldr	r1, [r7, #0]
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f7fe fb12 	bl	800a184 <move_window>
 800bb60:	4603      	mov	r3, r0
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d001      	beq.n	800bb6a <check_fs+0x2a>
 800bb66:	2304      	movs	r3, #4
 800bb68:	e038      	b.n	800bbdc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	3334      	adds	r3, #52	; 0x34
 800bb6e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fe f856 	bl	8009c24 <ld_word>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	461a      	mov	r2, r3
 800bb7c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d001      	beq.n	800bb88 <check_fs+0x48>
 800bb84:	2303      	movs	r3, #3
 800bb86:	e029      	b.n	800bbdc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb8e:	2be9      	cmp	r3, #233	; 0xe9
 800bb90:	d009      	beq.n	800bba6 <check_fs+0x66>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bb98:	2beb      	cmp	r3, #235	; 0xeb
 800bb9a:	d11e      	bne.n	800bbda <check_fs+0x9a>
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800bba2:	2b90      	cmp	r3, #144	; 0x90
 800bba4:	d119      	bne.n	800bbda <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	3334      	adds	r3, #52	; 0x34
 800bbaa:	3336      	adds	r3, #54	; 0x36
 800bbac:	4618      	mov	r0, r3
 800bbae:	f7fe f851 	bl	8009c54 <ld_dword>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800bbb8:	4a0a      	ldr	r2, [pc, #40]	; (800bbe4 <check_fs+0xa4>)
 800bbba:	4293      	cmp	r3, r2
 800bbbc:	d101      	bne.n	800bbc2 <check_fs+0x82>
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	e00c      	b.n	800bbdc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	3334      	adds	r3, #52	; 0x34
 800bbc6:	3352      	adds	r3, #82	; 0x52
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe f843 	bl	8009c54 <ld_dword>
 800bbce:	4603      	mov	r3, r0
 800bbd0:	4a05      	ldr	r2, [pc, #20]	; (800bbe8 <check_fs+0xa8>)
 800bbd2:	4293      	cmp	r3, r2
 800bbd4:	d101      	bne.n	800bbda <check_fs+0x9a>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	e000      	b.n	800bbdc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800bbda:	2302      	movs	r3, #2
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	3708      	adds	r7, #8
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	bd80      	pop	{r7, pc}
 800bbe4:	00544146 	.word	0x00544146
 800bbe8:	33544146 	.word	0x33544146

0800bbec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b096      	sub	sp, #88	; 0x58
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	60f8      	str	r0, [r7, #12]
 800bbf4:	60b9      	str	r1, [r7, #8]
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800bbfa:	68bb      	ldr	r3, [r7, #8]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800bc00:	68f8      	ldr	r0, [r7, #12]
 800bc02:	f7ff ff58 	bl	800bab6 <get_ldnumber>
 800bc06:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	da01      	bge.n	800bc12 <find_volume+0x26>
 800bc0e:	230b      	movs	r3, #11
 800bc10:	e22e      	b.n	800c070 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800bc12:	4aa8      	ldr	r2, [pc, #672]	; (800beb4 <find_volume+0x2c8>)
 800bc14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc1a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d101      	bne.n	800bc26 <find_volume+0x3a>
 800bc22:	230c      	movs	r3, #12
 800bc24:	e224      	b.n	800c070 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc2a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800bc2c:	79fb      	ldrb	r3, [r7, #7]
 800bc2e:	f023 0301 	bic.w	r3, r3, #1
 800bc32:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800bc34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d01a      	beq.n	800bc72 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800bc3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc3e:	785b      	ldrb	r3, [r3, #1]
 800bc40:	4618      	mov	r0, r3
 800bc42:	f7fd ff49 	bl	8009ad8 <disk_status>
 800bc46:	4603      	mov	r3, r0
 800bc48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800bc4c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc50:	f003 0301 	and.w	r3, r3, #1
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d10c      	bne.n	800bc72 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d007      	beq.n	800bc6e <find_volume+0x82>
 800bc5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc62:	f003 0304 	and.w	r3, r3, #4
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d001      	beq.n	800bc6e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800bc6a:	230a      	movs	r3, #10
 800bc6c:	e200      	b.n	800c070 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800bc6e:	2300      	movs	r3, #0
 800bc70:	e1fe      	b.n	800c070 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800bc72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc74:	2200      	movs	r2, #0
 800bc76:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800bc78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7a:	b2da      	uxtb	r2, r3
 800bc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc7e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800bc80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc82:	785b      	ldrb	r3, [r3, #1]
 800bc84:	4618      	mov	r0, r3
 800bc86:	f7fd ff41 	bl	8009b0c <disk_initialize>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800bc90:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d001      	beq.n	800bca0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800bc9c:	2303      	movs	r3, #3
 800bc9e:	e1e7      	b.n	800c070 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800bca0:	79fb      	ldrb	r3, [r7, #7]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d007      	beq.n	800bcb6 <find_volume+0xca>
 800bca6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800bcaa:	f003 0304 	and.w	r3, r3, #4
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d001      	beq.n	800bcb6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800bcb2:	230a      	movs	r3, #10
 800bcb4:	e1dc      	b.n	800c070 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800bcba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bcbc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bcbe:	f7ff ff3f 	bl	800bb40 <check_fs>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800bcc8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bccc:	2b02      	cmp	r3, #2
 800bcce:	d14b      	bne.n	800bd68 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	643b      	str	r3, [r7, #64]	; 0x40
 800bcd4:	e01f      	b.n	800bd16 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800bcd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bcd8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800bcdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bcde:	011b      	lsls	r3, r3, #4
 800bce0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800bce4:	4413      	add	r3, r2
 800bce6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800bce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcea:	3304      	adds	r3, #4
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	d006      	beq.n	800bd00 <find_volume+0x114>
 800bcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcf4:	3308      	adds	r3, #8
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f7fd ffac 	bl	8009c54 <ld_dword>
 800bcfc:	4602      	mov	r2, r0
 800bcfe:	e000      	b.n	800bd02 <find_volume+0x116>
 800bd00:	2200      	movs	r2, #0
 800bd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800bd0a:	440b      	add	r3, r1
 800bd0c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800bd10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd12:	3301      	adds	r3, #1
 800bd14:	643b      	str	r3, [r7, #64]	; 0x40
 800bd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd18:	2b03      	cmp	r3, #3
 800bd1a:	d9dc      	bls.n	800bcd6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800bd20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d002      	beq.n	800bd2c <find_volume+0x140>
 800bd26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd28:	3b01      	subs	r3, #1
 800bd2a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800bd2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800bd34:	4413      	add	r3, r2
 800bd36:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800bd3a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800bd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d005      	beq.n	800bd4e <find_volume+0x162>
 800bd42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bd44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bd46:	f7ff fefb 	bl	800bb40 <check_fs>
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	e000      	b.n	800bd50 <find_volume+0x164>
 800bd4e:	2303      	movs	r3, #3
 800bd50:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800bd54:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	d905      	bls.n	800bd68 <find_volume+0x17c>
 800bd5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd5e:	3301      	adds	r3, #1
 800bd60:	643b      	str	r3, [r7, #64]	; 0x40
 800bd62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd64:	2b03      	cmp	r3, #3
 800bd66:	d9e1      	bls.n	800bd2c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800bd68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd6c:	2b04      	cmp	r3, #4
 800bd6e:	d101      	bne.n	800bd74 <find_volume+0x188>
 800bd70:	2301      	movs	r3, #1
 800bd72:	e17d      	b.n	800c070 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800bd74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bd78:	2b01      	cmp	r3, #1
 800bd7a:	d901      	bls.n	800bd80 <find_volume+0x194>
 800bd7c:	230d      	movs	r3, #13
 800bd7e:	e177      	b.n	800c070 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800bd80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd82:	3334      	adds	r3, #52	; 0x34
 800bd84:	330b      	adds	r3, #11
 800bd86:	4618      	mov	r0, r3
 800bd88:	f7fd ff4c 	bl	8009c24 <ld_word>
 800bd8c:	4603      	mov	r3, r0
 800bd8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd92:	d001      	beq.n	800bd98 <find_volume+0x1ac>
 800bd94:	230d      	movs	r3, #13
 800bd96:	e16b      	b.n	800c070 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800bd98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd9a:	3334      	adds	r3, #52	; 0x34
 800bd9c:	3316      	adds	r3, #22
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd ff40 	bl	8009c24 <ld_word>
 800bda4:	4603      	mov	r3, r0
 800bda6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800bda8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d106      	bne.n	800bdbc <find_volume+0x1d0>
 800bdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdb0:	3334      	adds	r3, #52	; 0x34
 800bdb2:	3324      	adds	r3, #36	; 0x24
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fd ff4d 	bl	8009c54 <ld_dword>
 800bdba:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800bdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdc0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800bdc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800bdc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdca:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	789b      	ldrb	r3, [r3, #2]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d005      	beq.n	800bde0 <find_volume+0x1f4>
 800bdd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd6:	789b      	ldrb	r3, [r3, #2]
 800bdd8:	2b02      	cmp	r3, #2
 800bdda:	d001      	beq.n	800bde0 <find_volume+0x1f4>
 800bddc:	230d      	movs	r3, #13
 800bdde:	e147      	b.n	800c070 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800bde0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde2:	789b      	ldrb	r3, [r3, #2]
 800bde4:	461a      	mov	r2, r3
 800bde6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bde8:	fb02 f303 	mul.w	r3, r2, r3
 800bdec:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800bdee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdf8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800bdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdfc:	895b      	ldrh	r3, [r3, #10]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d008      	beq.n	800be14 <find_volume+0x228>
 800be02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be04:	895b      	ldrh	r3, [r3, #10]
 800be06:	461a      	mov	r2, r3
 800be08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be0a:	895b      	ldrh	r3, [r3, #10]
 800be0c:	3b01      	subs	r3, #1
 800be0e:	4013      	ands	r3, r2
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <find_volume+0x22c>
 800be14:	230d      	movs	r3, #13
 800be16:	e12b      	b.n	800c070 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800be18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be1a:	3334      	adds	r3, #52	; 0x34
 800be1c:	3311      	adds	r3, #17
 800be1e:	4618      	mov	r0, r3
 800be20:	f7fd ff00 	bl	8009c24 <ld_word>
 800be24:	4603      	mov	r3, r0
 800be26:	461a      	mov	r2, r3
 800be28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800be2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be2e:	891b      	ldrh	r3, [r3, #8]
 800be30:	f003 030f 	and.w	r3, r3, #15
 800be34:	b29b      	uxth	r3, r3
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <find_volume+0x252>
 800be3a:	230d      	movs	r3, #13
 800be3c:	e118      	b.n	800c070 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800be3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be40:	3334      	adds	r3, #52	; 0x34
 800be42:	3313      	adds	r3, #19
 800be44:	4618      	mov	r0, r3
 800be46:	f7fd feed 	bl	8009c24 <ld_word>
 800be4a:	4603      	mov	r3, r0
 800be4c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800be4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800be50:	2b00      	cmp	r3, #0
 800be52:	d106      	bne.n	800be62 <find_volume+0x276>
 800be54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be56:	3334      	adds	r3, #52	; 0x34
 800be58:	3320      	adds	r3, #32
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd fefa 	bl	8009c54 <ld_dword>
 800be60:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800be62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800be64:	3334      	adds	r3, #52	; 0x34
 800be66:	330e      	adds	r3, #14
 800be68:	4618      	mov	r0, r3
 800be6a:	f7fd fedb 	bl	8009c24 <ld_word>
 800be6e:	4603      	mov	r3, r0
 800be70:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800be72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800be74:	2b00      	cmp	r3, #0
 800be76:	d101      	bne.n	800be7c <find_volume+0x290>
 800be78:	230d      	movs	r3, #13
 800be7a:	e0f9      	b.n	800c070 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800be7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800be7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800be80:	4413      	add	r3, r2
 800be82:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800be84:	8912      	ldrh	r2, [r2, #8]
 800be86:	0912      	lsrs	r2, r2, #4
 800be88:	b292      	uxth	r2, r2
 800be8a:	4413      	add	r3, r2
 800be8c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800be8e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be92:	429a      	cmp	r2, r3
 800be94:	d201      	bcs.n	800be9a <find_volume+0x2ae>
 800be96:	230d      	movs	r3, #13
 800be98:	e0ea      	b.n	800c070 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800be9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	1ad3      	subs	r3, r2, r3
 800bea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bea2:	8952      	ldrh	r2, [r2, #10]
 800bea4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bea8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800beaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beac:	2b00      	cmp	r3, #0
 800beae:	d103      	bne.n	800beb8 <find_volume+0x2cc>
 800beb0:	230d      	movs	r3, #13
 800beb2:	e0dd      	b.n	800c070 <find_volume+0x484>
 800beb4:	20006c58 	.word	0x20006c58
		fmt = FS_FAT32;
 800beb8:	2303      	movs	r3, #3
 800beba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800bebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d802      	bhi.n	800bece <find_volume+0x2e2>
 800bec8:	2302      	movs	r3, #2
 800beca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800bece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800bed4:	4293      	cmp	r3, r2
 800bed6:	d802      	bhi.n	800bede <find_volume+0x2f2>
 800bed8:	2301      	movs	r3, #1
 800beda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee0:	1c9a      	adds	r2, r3, #2
 800bee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800bee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bee8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800beea:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800beec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800beee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bef0:	441a      	add	r2, r3
 800bef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bef4:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800bef6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befa:	441a      	add	r2, r3
 800befc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800befe:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bf00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf04:	2b03      	cmp	r3, #3
 800bf06:	d11e      	bne.n	800bf46 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bf08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf0a:	3334      	adds	r3, #52	; 0x34
 800bf0c:	332a      	adds	r3, #42	; 0x2a
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fd fe88 	bl	8009c24 <ld_word>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d001      	beq.n	800bf1e <find_volume+0x332>
 800bf1a:	230d      	movs	r3, #13
 800bf1c:	e0a8      	b.n	800c070 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bf1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf20:	891b      	ldrh	r3, [r3, #8]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d001      	beq.n	800bf2a <find_volume+0x33e>
 800bf26:	230d      	movs	r3, #13
 800bf28:	e0a2      	b.n	800c070 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bf2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf2c:	3334      	adds	r3, #52	; 0x34
 800bf2e:	332c      	adds	r3, #44	; 0x2c
 800bf30:	4618      	mov	r0, r3
 800bf32:	f7fd fe8f 	bl	8009c54 <ld_dword>
 800bf36:	4602      	mov	r2, r0
 800bf38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bf3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	009b      	lsls	r3, r3, #2
 800bf42:	647b      	str	r3, [r7, #68]	; 0x44
 800bf44:	e01f      	b.n	800bf86 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bf46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf48:	891b      	ldrh	r3, [r3, #8]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d101      	bne.n	800bf52 <find_volume+0x366>
 800bf4e:	230d      	movs	r3, #13
 800bf50:	e08e      	b.n	800c070 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bf58:	441a      	add	r2, r3
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bf5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bf62:	2b02      	cmp	r3, #2
 800bf64:	d103      	bne.n	800bf6e <find_volume+0x382>
 800bf66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	005b      	lsls	r3, r3, #1
 800bf6c:	e00a      	b.n	800bf84 <find_volume+0x398>
 800bf6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf70:	699a      	ldr	r2, [r3, #24]
 800bf72:	4613      	mov	r3, r2
 800bf74:	005b      	lsls	r3, r3, #1
 800bf76:	4413      	add	r3, r2
 800bf78:	085a      	lsrs	r2, r3, #1
 800bf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf7c:	699b      	ldr	r3, [r3, #24]
 800bf7e:	f003 0301 	and.w	r3, r3, #1
 800bf82:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bf84:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bf86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf88:	69da      	ldr	r2, [r3, #28]
 800bf8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bf8c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bf90:	0a5b      	lsrs	r3, r3, #9
 800bf92:	429a      	cmp	r2, r3
 800bf94:	d201      	bcs.n	800bf9a <find_volume+0x3ae>
 800bf96:	230d      	movs	r3, #13
 800bf98:	e06a      	b.n	800c070 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bf9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf9c:	f04f 32ff 	mov.w	r2, #4294967295
 800bfa0:	615a      	str	r2, [r3, #20]
 800bfa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa4:	695a      	ldr	r2, [r3, #20]
 800bfa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfa8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bfaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfac:	2280      	movs	r2, #128	; 0x80
 800bfae:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bfb0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bfb4:	2b03      	cmp	r3, #3
 800bfb6:	d149      	bne.n	800c04c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bfb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfba:	3334      	adds	r3, #52	; 0x34
 800bfbc:	3330      	adds	r3, #48	; 0x30
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	f7fd fe30 	bl	8009c24 <ld_word>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	2b01      	cmp	r3, #1
 800bfc8:	d140      	bne.n	800c04c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bfca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfcc:	3301      	adds	r3, #1
 800bfce:	4619      	mov	r1, r3
 800bfd0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfd2:	f7fe f8d7 	bl	800a184 <move_window>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d137      	bne.n	800c04c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bfdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfde:	2200      	movs	r2, #0
 800bfe0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	3334      	adds	r3, #52	; 0x34
 800bfe6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7fd fe1a 	bl	8009c24 <ld_word>
 800bff0:	4603      	mov	r3, r0
 800bff2:	461a      	mov	r2, r3
 800bff4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bff8:	429a      	cmp	r2, r3
 800bffa:	d127      	bne.n	800c04c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	3334      	adds	r3, #52	; 0x34
 800c000:	4618      	mov	r0, r3
 800c002:	f7fd fe27 	bl	8009c54 <ld_dword>
 800c006:	4603      	mov	r3, r0
 800c008:	4a1b      	ldr	r2, [pc, #108]	; (800c078 <find_volume+0x48c>)
 800c00a:	4293      	cmp	r3, r2
 800c00c:	d11e      	bne.n	800c04c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c010:	3334      	adds	r3, #52	; 0x34
 800c012:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c016:	4618      	mov	r0, r3
 800c018:	f7fd fe1c 	bl	8009c54 <ld_dword>
 800c01c:	4603      	mov	r3, r0
 800c01e:	4a17      	ldr	r2, [pc, #92]	; (800c07c <find_volume+0x490>)
 800c020:	4293      	cmp	r3, r2
 800c022:	d113      	bne.n	800c04c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c026:	3334      	adds	r3, #52	; 0x34
 800c028:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c02c:	4618      	mov	r0, r3
 800c02e:	f7fd fe11 	bl	8009c54 <ld_dword>
 800c032:	4602      	mov	r2, r0
 800c034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c036:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	3334      	adds	r3, #52	; 0x34
 800c03c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c040:	4618      	mov	r0, r3
 800c042:	f7fd fe07 	bl	8009c54 <ld_dword>
 800c046:	4602      	mov	r2, r0
 800c048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c04e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c052:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c054:	4b0a      	ldr	r3, [pc, #40]	; (800c080 <find_volume+0x494>)
 800c056:	881b      	ldrh	r3, [r3, #0]
 800c058:	3301      	adds	r3, #1
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	4b08      	ldr	r3, [pc, #32]	; (800c080 <find_volume+0x494>)
 800c05e:	801a      	strh	r2, [r3, #0]
 800c060:	4b07      	ldr	r3, [pc, #28]	; (800c080 <find_volume+0x494>)
 800c062:	881a      	ldrh	r2, [r3, #0]
 800c064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c066:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c068:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c06a:	f7fe f823 	bl	800a0b4 <clear_lock>
#endif
	return FR_OK;
 800c06e:	2300      	movs	r3, #0
}
 800c070:	4618      	mov	r0, r3
 800c072:	3758      	adds	r7, #88	; 0x58
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	41615252 	.word	0x41615252
 800c07c:	61417272 	.word	0x61417272
 800c080:	20006c60 	.word	0x20006c60

0800c084 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c08e:	2309      	movs	r3, #9
 800c090:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d01c      	beq.n	800c0d2 <validate+0x4e>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d018      	beq.n	800c0d2 <validate+0x4e>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d013      	beq.n	800c0d2 <validate+0x4e>
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	889a      	ldrh	r2, [r3, #4]
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	88db      	ldrh	r3, [r3, #6]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d10c      	bne.n	800c0d2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	785b      	ldrb	r3, [r3, #1]
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fd fd0a 	bl	8009ad8 <disk_status>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	f003 0301 	and.w	r3, r3, #1
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <validate+0x4e>
			res = FR_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c0d2:	7bfb      	ldrb	r3, [r7, #15]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d102      	bne.n	800c0de <validate+0x5a>
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	e000      	b.n	800c0e0 <validate+0x5c>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	683a      	ldr	r2, [r7, #0]
 800c0e2:	6013      	str	r3, [r2, #0]
	return res;
 800c0e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
	...

0800c0f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4613      	mov	r3, r2
 800c0fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c102:	f107 0310 	add.w	r3, r7, #16
 800c106:	4618      	mov	r0, r3
 800c108:	f7ff fcd5 	bl	800bab6 <get_ldnumber>
 800c10c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c10e:	69fb      	ldr	r3, [r7, #28]
 800c110:	2b00      	cmp	r3, #0
 800c112:	da01      	bge.n	800c118 <f_mount+0x28>
 800c114:	230b      	movs	r3, #11
 800c116:	e02b      	b.n	800c170 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c118:	4a17      	ldr	r2, [pc, #92]	; (800c178 <f_mount+0x88>)
 800c11a:	69fb      	ldr	r3, [r7, #28]
 800c11c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c120:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d005      	beq.n	800c134 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c128:	69b8      	ldr	r0, [r7, #24]
 800c12a:	f7fd ffc3 	bl	800a0b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d002      	beq.n	800c140 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	2200      	movs	r2, #0
 800c13e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	490d      	ldr	r1, [pc, #52]	; (800c178 <f_mount+0x88>)
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d002      	beq.n	800c156 <f_mount+0x66>
 800c150:	79fb      	ldrb	r3, [r7, #7]
 800c152:	2b01      	cmp	r3, #1
 800c154:	d001      	beq.n	800c15a <f_mount+0x6a>
 800c156:	2300      	movs	r3, #0
 800c158:	e00a      	b.n	800c170 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c15a:	f107 010c 	add.w	r1, r7, #12
 800c15e:	f107 0308 	add.w	r3, r7, #8
 800c162:	2200      	movs	r2, #0
 800c164:	4618      	mov	r0, r3
 800c166:	f7ff fd41 	bl	800bbec <find_volume>
 800c16a:	4603      	mov	r3, r0
 800c16c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c16e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c170:	4618      	mov	r0, r3
 800c172:	3720      	adds	r7, #32
 800c174:	46bd      	mov	sp, r7
 800c176:	bd80      	pop	{r7, pc}
 800c178:	20006c58 	.word	0x20006c58

0800c17c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800c182:	af00      	add	r7, sp, #0
 800c184:	f107 030c 	add.w	r3, r7, #12
 800c188:	6018      	str	r0, [r3, #0]
 800c18a:	f107 0308 	add.w	r3, r7, #8
 800c18e:	6019      	str	r1, [r3, #0]
 800c190:	1dfb      	adds	r3, r7, #7
 800c192:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c194:	f107 030c 	add.w	r3, r7, #12
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d101      	bne.n	800c1a2 <f_open+0x26>
 800c19e:	2309      	movs	r3, #9
 800c1a0:	e231      	b.n	800c606 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c1a2:	1dfb      	adds	r3, r7, #7
 800c1a4:	1dfa      	adds	r2, r7, #7
 800c1a6:	7812      	ldrb	r2, [r2, #0]
 800c1a8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800c1ac:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800c1ae:	1dfb      	adds	r3, r7, #7
 800c1b0:	781a      	ldrb	r2, [r3, #0]
 800c1b2:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800c1b6:	f107 0308 	add.w	r3, r7, #8
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7ff fd16 	bl	800bbec <find_volume>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800c1c6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	f040 8210 	bne.w	800c5f0 <f_open+0x474>
		dj.obj.fs = fs;
 800c1d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c1d4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800c1d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c1dc:	f107 0214 	add.w	r2, r7, #20
 800c1e0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800c1e2:	f107 0308 	add.w	r3, r7, #8
 800c1e6:	681a      	ldr	r2, [r3, #0]
 800c1e8:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c1ec:	4611      	mov	r1, r2
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	f7ff fbf0 	bl	800b9d4 <follow_path>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c1fa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d11b      	bne.n	800c23a <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c202:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800c206:	b25b      	sxtb	r3, r3
 800c208:	2b00      	cmp	r3, #0
 800c20a:	da03      	bge.n	800c214 <f_open+0x98>
				res = FR_INVALID_NAME;
 800c20c:	2306      	movs	r3, #6
 800c20e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c212:	e012      	b.n	800c23a <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c214:	1dfb      	adds	r3, r7, #7
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	f023 0301 	bic.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	bf14      	ite	ne
 800c220:	2301      	movne	r3, #1
 800c222:	2300      	moveq	r3, #0
 800c224:	b2db      	uxtb	r3, r3
 800c226:	461a      	mov	r2, r3
 800c228:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c22c:	4611      	mov	r1, r2
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fd fdf8 	bl	8009e24 <chk_lock>
 800c234:	4603      	mov	r3, r0
 800c236:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c23a:	1dfb      	adds	r3, r7, #7
 800c23c:	781b      	ldrb	r3, [r3, #0]
 800c23e:	f003 031c 	and.w	r3, r3, #28
 800c242:	2b00      	cmp	r3, #0
 800c244:	f000 809b 	beq.w	800c37e <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800c248:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d019      	beq.n	800c284 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c250:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c254:	2b04      	cmp	r3, #4
 800c256:	d10e      	bne.n	800c276 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c258:	f7fd fe40 	bl	8009edc <enq_lock>
 800c25c:	4603      	mov	r3, r0
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d006      	beq.n	800c270 <f_open+0xf4>
 800c262:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c266:	4618      	mov	r0, r3
 800c268:	f7ff f826 	bl	800b2b8 <dir_register>
 800c26c:	4603      	mov	r3, r0
 800c26e:	e000      	b.n	800c272 <f_open+0xf6>
 800c270:	2312      	movs	r3, #18
 800c272:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c276:	1dfb      	adds	r3, r7, #7
 800c278:	1dfa      	adds	r2, r7, #7
 800c27a:	7812      	ldrb	r2, [r2, #0]
 800c27c:	f042 0208 	orr.w	r2, r2, #8
 800c280:	701a      	strb	r2, [r3, #0]
 800c282:	e012      	b.n	800c2aa <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c284:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c288:	f003 0311 	and.w	r3, r3, #17
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d003      	beq.n	800c298 <f_open+0x11c>
					res = FR_DENIED;
 800c290:	2307      	movs	r3, #7
 800c292:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c296:	e008      	b.n	800c2aa <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c298:	1dfb      	adds	r3, r7, #7
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d002      	beq.n	800c2aa <f_open+0x12e>
 800c2a4:	2308      	movs	r3, #8
 800c2a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c2aa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	f040 8082 	bne.w	800c3b8 <f_open+0x23c>
 800c2b4:	1dfb      	adds	r3, r7, #7
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	f003 0308 	and.w	r3, r3, #8
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d07b      	beq.n	800c3b8 <f_open+0x23c>
				dw = GET_FATTIME();
 800c2c0:	f7fd fca8 	bl	8009c14 <get_fattime>
 800c2c4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c2c8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c2cc:	330e      	adds	r3, #14
 800c2ce:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f7fd fcfc 	bl	8009cd0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c2d8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c2dc:	3316      	adds	r3, #22
 800c2de:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7fd fcf4 	bl	8009cd0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c2e8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c2ec:	330b      	adds	r3, #11
 800c2ee:	2220      	movs	r2, #32
 800c2f0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c2f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c2f6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c2fa:	4611      	mov	r1, r2
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f7fe fc48 	bl	800ab92 <ld_clust>
 800c302:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c306:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c30a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800c30e:	2200      	movs	r2, #0
 800c310:	4618      	mov	r0, r3
 800c312:	f7fe fc5d 	bl	800abd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c316:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c31a:	331c      	adds	r3, #28
 800c31c:	2100      	movs	r1, #0
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fd fcd6 	bl	8009cd0 <st_dword>
					fs->wflag = 1;
 800c324:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c328:	2201      	movs	r2, #1
 800c32a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c32c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800c330:	2b00      	cmp	r3, #0
 800c332:	d041      	beq.n	800c3b8 <f_open+0x23c>
						dw = fs->winsect;
 800c334:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800c33e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c342:	2200      	movs	r2, #0
 800c344:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fe f96a 	bl	800a622 <remove_chain>
 800c34e:	4603      	mov	r3, r0
 800c350:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800c354:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d12d      	bne.n	800c3b8 <f_open+0x23c>
							res = move_window(fs, dw);
 800c35c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c360:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800c364:	4618      	mov	r0, r3
 800c366:	f7fd ff0d 	bl	800a184 <move_window>
 800c36a:	4603      	mov	r3, r0
 800c36c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c370:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c374:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800c378:	3a01      	subs	r2, #1
 800c37a:	611a      	str	r2, [r3, #16]
 800c37c:	e01c      	b.n	800c3b8 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c37e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c382:	2b00      	cmp	r3, #0
 800c384:	d118      	bne.n	800c3b8 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c386:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c38a:	f003 0310 	and.w	r3, r3, #16
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d003      	beq.n	800c39a <f_open+0x21e>
					res = FR_NO_FILE;
 800c392:	2304      	movs	r3, #4
 800c394:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c398:	e00e      	b.n	800c3b8 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c39a:	1dfb      	adds	r3, r7, #7
 800c39c:	781b      	ldrb	r3, [r3, #0]
 800c39e:	f003 0302 	and.w	r3, r3, #2
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d008      	beq.n	800c3b8 <f_open+0x23c>
 800c3a6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d002      	beq.n	800c3b8 <f_open+0x23c>
						res = FR_DENIED;
 800c3b2:	2307      	movs	r3, #7
 800c3b4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800c3b8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d136      	bne.n	800c42e <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c3c0:	1dfb      	adds	r3, r7, #7
 800c3c2:	781b      	ldrb	r3, [r3, #0]
 800c3c4:	f003 0308 	and.w	r3, r3, #8
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d005      	beq.n	800c3d8 <f_open+0x25c>
				mode |= FA_MODIFIED;
 800c3cc:	1dfb      	adds	r3, r7, #7
 800c3ce:	1dfa      	adds	r2, r7, #7
 800c3d0:	7812      	ldrb	r2, [r2, #0]
 800c3d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c3d6:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c3d8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c3dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3de:	f107 030c 	add.w	r3, r7, #12
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c3e6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c3f2:	1dfb      	adds	r3, r7, #7
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f023 0301 	bic.w	r3, r3, #1
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	bf14      	ite	ne
 800c3fe:	2301      	movne	r3, #1
 800c400:	2300      	moveq	r3, #0
 800c402:	b2db      	uxtb	r3, r3
 800c404:	461a      	mov	r2, r3
 800c406:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800c40a:	4611      	mov	r1, r2
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fd fd87 	bl	8009f20 <inc_lock>
 800c412:	4602      	mov	r2, r0
 800c414:	f107 030c 	add.w	r3, r7, #12
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c41c:	f107 030c 	add.w	r3, r7, #12
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	691b      	ldr	r3, [r3, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d102      	bne.n	800c42e <f_open+0x2b2>
 800c428:	2302      	movs	r3, #2
 800c42a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c42e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c432:	2b00      	cmp	r3, #0
 800c434:	f040 80dc 	bne.w	800c5f0 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c438:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c43c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800c440:	4611      	mov	r1, r2
 800c442:	4618      	mov	r0, r3
 800c444:	f7fe fba5 	bl	800ab92 <ld_clust>
 800c448:	4602      	mov	r2, r0
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c452:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c456:	331c      	adds	r3, #28
 800c458:	4618      	mov	r0, r3
 800c45a:	f7fd fbfb 	bl	8009c54 <ld_dword>
 800c45e:	4602      	mov	r2, r0
 800c460:	f107 030c 	add.w	r3, r7, #12
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c468:	f107 030c 	add.w	r3, r7, #12
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	2200      	movs	r2, #0
 800c470:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c472:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c476:	f107 030c 	add.w	r3, r7, #12
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c47e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c482:	88da      	ldrh	r2, [r3, #6]
 800c484:	f107 030c 	add.w	r3, r7, #12
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c48c:	f107 030c 	add.w	r3, r7, #12
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	1dfa      	adds	r2, r7, #7
 800c494:	7812      	ldrb	r2, [r2, #0]
 800c496:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c498:	f107 030c 	add.w	r3, r7, #12
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2200      	movs	r2, #0
 800c4a0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c4a2:	f107 030c 	add.w	r3, r7, #12
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	2200      	movs	r2, #0
 800c4aa:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c4ac:	f107 030c 	add.w	r3, r7, #12
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c4b6:	f107 030c 	add.w	r3, r7, #12
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	3330      	adds	r3, #48	; 0x30
 800c4be:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7fd fc50 	bl	8009d6a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c4ca:	1dfb      	adds	r3, r7, #7
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	f003 0320 	and.w	r3, r3, #32
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	f000 808c 	beq.w	800c5f0 <f_open+0x474>
 800c4d8:	f107 030c 	add.w	r3, r7, #12
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68db      	ldr	r3, [r3, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 8085 	beq.w	800c5f0 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c4e6:	f107 030c 	add.w	r3, r7, #12
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	68da      	ldr	r2, [r3, #12]
 800c4ee:	f107 030c 	add.w	r3, r7, #12
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c4f6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c4fa:	895b      	ldrh	r3, [r3, #10]
 800c4fc:	025b      	lsls	r3, r3, #9
 800c4fe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c502:	f107 030c 	add.w	r3, r7, #12
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	689b      	ldr	r3, [r3, #8]
 800c50a:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c50e:	f107 030c 	add.w	r3, r7, #12
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	68db      	ldr	r3, [r3, #12]
 800c516:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c51a:	e01f      	b.n	800c55c <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800c51c:	f107 030c 	add.w	r3, r7, #12
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c526:	4618      	mov	r0, r3
 800c528:	f7fd fee7 	bl	800a2fa <get_fat>
 800c52c:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800c530:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c534:	2b01      	cmp	r3, #1
 800c536:	d802      	bhi.n	800c53e <f_open+0x3c2>
 800c538:	2302      	movs	r3, #2
 800c53a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c53e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c546:	d102      	bne.n	800c54e <f_open+0x3d2>
 800c548:	2301      	movs	r3, #1
 800c54a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c54e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c552:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c556:	1ad3      	subs	r3, r2, r3
 800c558:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c55c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c560:	2b00      	cmp	r3, #0
 800c562:	d105      	bne.n	800c570 <f_open+0x3f4>
 800c564:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c568:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c56c:	429a      	cmp	r2, r3
 800c56e:	d8d5      	bhi.n	800c51c <f_open+0x3a0>
				}
				fp->clust = clst;
 800c570:	f107 030c 	add.w	r3, r7, #12
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800c57a:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c57c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c580:	2b00      	cmp	r3, #0
 800c582:	d135      	bne.n	800c5f0 <f_open+0x474>
 800c584:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c588:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d02f      	beq.n	800c5f0 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c590:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c594:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c598:	4618      	mov	r0, r3
 800c59a:	f7fd fe8f 	bl	800a2bc <clust2sect>
 800c59e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800c5a2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d103      	bne.n	800c5b2 <f_open+0x436>
						res = FR_INT_ERR;
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c5b0:	e01e      	b.n	800c5f0 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c5b2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c5b6:	0a5a      	lsrs	r2, r3, #9
 800c5b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c5bc:	441a      	add	r2, r3
 800c5be:	f107 030c 	add.w	r3, r7, #12
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c5c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c5ca:	7858      	ldrb	r0, [r3, #1]
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c5d6:	f107 030c 	add.w	r3, r7, #12
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6a1a      	ldr	r2, [r3, #32]
 800c5de:	2301      	movs	r3, #1
 800c5e0:	f7fd faba 	bl	8009b58 <disk_read>
 800c5e4:	4603      	mov	r3, r0
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d002      	beq.n	800c5f0 <f_open+0x474>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c5f0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <f_open+0x486>
 800c5f8:	f107 030c 	add.w	r3, r7, #12
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	2200      	movs	r2, #0
 800c600:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c602:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800c606:	4618      	mov	r0, r3
 800c608:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b08e      	sub	sp, #56	; 0x38
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	607a      	str	r2, [r7, #4]
 800c61c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c61e:	68bb      	ldr	r3, [r7, #8]
 800c620:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2200      	movs	r2, #0
 800c626:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f107 0214 	add.w	r2, r7, #20
 800c62e:	4611      	mov	r1, r2
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff fd27 	bl	800c084 <validate>
 800c636:	4603      	mov	r3, r0
 800c638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c63c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c640:	2b00      	cmp	r3, #0
 800c642:	d107      	bne.n	800c654 <f_read+0x44>
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	7d5b      	ldrb	r3, [r3, #21]
 800c648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c64c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c650:	2b00      	cmp	r3, #0
 800c652:	d002      	beq.n	800c65a <f_read+0x4a>
 800c654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c658:	e115      	b.n	800c886 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	7d1b      	ldrb	r3, [r3, #20]
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d101      	bne.n	800c66a <f_read+0x5a>
 800c666:	2307      	movs	r3, #7
 800c668:	e10d      	b.n	800c886 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	68da      	ldr	r2, [r3, #12]
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	699b      	ldr	r3, [r3, #24]
 800c672:	1ad3      	subs	r3, r2, r3
 800c674:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	f240 80fe 	bls.w	800c87c <f_read+0x26c>
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c684:	e0fa      	b.n	800c87c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f040 80c6 	bne.w	800c820 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	699b      	ldr	r3, [r3, #24]
 800c698:	0a5b      	lsrs	r3, r3, #9
 800c69a:	697a      	ldr	r2, [r7, #20]
 800c69c:	8952      	ldrh	r2, [r2, #10]
 800c69e:	3a01      	subs	r2, #1
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d12f      	bne.n	800c70a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d103      	bne.n	800c6ba <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	633b      	str	r3, [r7, #48]	; 0x30
 800c6b8:	e013      	b.n	800c6e2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d007      	beq.n	800c6d2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7fe f8a7 	bl	800a81c <clmt_clust>
 800c6ce:	6338      	str	r0, [r7, #48]	; 0x30
 800c6d0:	e007      	b.n	800c6e2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c6d2:	68fa      	ldr	r2, [r7, #12]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	4619      	mov	r1, r3
 800c6da:	4610      	mov	r0, r2
 800c6dc:	f7fd fe0d 	bl	800a2fa <get_fat>
 800c6e0:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e4:	2b01      	cmp	r3, #1
 800c6e6:	d804      	bhi.n	800c6f2 <f_read+0xe2>
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	755a      	strb	r2, [r3, #21]
 800c6ee:	2302      	movs	r3, #2
 800c6f0:	e0c9      	b.n	800c886 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6f8:	d104      	bne.n	800c704 <f_read+0xf4>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	755a      	strb	r2, [r3, #21]
 800c700:	2301      	movs	r3, #1
 800c702:	e0c0      	b.n	800c886 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c708:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c70a:	697a      	ldr	r2, [r7, #20]
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	69db      	ldr	r3, [r3, #28]
 800c710:	4619      	mov	r1, r3
 800c712:	4610      	mov	r0, r2
 800c714:	f7fd fdd2 	bl	800a2bc <clust2sect>
 800c718:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c71a:	69bb      	ldr	r3, [r7, #24]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d104      	bne.n	800c72a <f_read+0x11a>
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	2202      	movs	r2, #2
 800c724:	755a      	strb	r2, [r3, #21]
 800c726:	2302      	movs	r3, #2
 800c728:	e0ad      	b.n	800c886 <f_read+0x276>
			sect += csect;
 800c72a:	69ba      	ldr	r2, [r7, #24]
 800c72c:	69fb      	ldr	r3, [r7, #28]
 800c72e:	4413      	add	r3, r2
 800c730:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	0a5b      	lsrs	r3, r3, #9
 800c736:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d039      	beq.n	800c7b2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c73e:	69fa      	ldr	r2, [r7, #28]
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	4413      	add	r3, r2
 800c744:	697a      	ldr	r2, [r7, #20]
 800c746:	8952      	ldrh	r2, [r2, #10]
 800c748:	4293      	cmp	r3, r2
 800c74a:	d905      	bls.n	800c758 <f_read+0x148>
					cc = fs->csize - csect;
 800c74c:	697b      	ldr	r3, [r7, #20]
 800c74e:	895b      	ldrh	r3, [r3, #10]
 800c750:	461a      	mov	r2, r3
 800c752:	69fb      	ldr	r3, [r7, #28]
 800c754:	1ad3      	subs	r3, r2, r3
 800c756:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c758:	697b      	ldr	r3, [r7, #20]
 800c75a:	7858      	ldrb	r0, [r3, #1]
 800c75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c75e:	69ba      	ldr	r2, [r7, #24]
 800c760:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c762:	f7fd f9f9 	bl	8009b58 <disk_read>
 800c766:	4603      	mov	r3, r0
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d004      	beq.n	800c776 <f_read+0x166>
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2201      	movs	r2, #1
 800c770:	755a      	strb	r2, [r3, #21]
 800c772:	2301      	movs	r3, #1
 800c774:	e087      	b.n	800c886 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	7d1b      	ldrb	r3, [r3, #20]
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	da14      	bge.n	800c7aa <f_read+0x19a>
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	6a1a      	ldr	r2, [r3, #32]
 800c784:	69bb      	ldr	r3, [r7, #24]
 800c786:	1ad3      	subs	r3, r2, r3
 800c788:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d90d      	bls.n	800c7aa <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	6a1a      	ldr	r2, [r3, #32]
 800c792:	69bb      	ldr	r3, [r7, #24]
 800c794:	1ad3      	subs	r3, r2, r3
 800c796:	025b      	lsls	r3, r3, #9
 800c798:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c79a:	18d0      	adds	r0, r2, r3
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3330      	adds	r3, #48	; 0x30
 800c7a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c7a4:	4619      	mov	r1, r3
 800c7a6:	f7fd fabf 	bl	8009d28 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7ac:	025b      	lsls	r3, r3, #9
 800c7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c7b0:	e050      	b.n	800c854 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	6a1b      	ldr	r3, [r3, #32]
 800c7b6:	69ba      	ldr	r2, [r7, #24]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d02e      	beq.n	800c81a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	7d1b      	ldrb	r3, [r3, #20]
 800c7c0:	b25b      	sxtb	r3, r3
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	da18      	bge.n	800c7f8 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c7c6:	697b      	ldr	r3, [r7, #20]
 800c7c8:	7858      	ldrb	r0, [r3, #1]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	6a1a      	ldr	r2, [r3, #32]
 800c7d4:	2301      	movs	r3, #1
 800c7d6:	f7fd f9df 	bl	8009b98 <disk_write>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d004      	beq.n	800c7ea <f_read+0x1da>
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	2201      	movs	r2, #1
 800c7e4:	755a      	strb	r2, [r3, #21]
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e04d      	b.n	800c886 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	7d1b      	ldrb	r3, [r3, #20]
 800c7ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c7f2:	b2da      	uxtb	r2, r3
 800c7f4:	68fb      	ldr	r3, [r7, #12]
 800c7f6:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c7f8:	697b      	ldr	r3, [r7, #20]
 800c7fa:	7858      	ldrb	r0, [r3, #1]
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c802:	2301      	movs	r3, #1
 800c804:	69ba      	ldr	r2, [r7, #24]
 800c806:	f7fd f9a7 	bl	8009b58 <disk_read>
 800c80a:	4603      	mov	r3, r0
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d004      	beq.n	800c81a <f_read+0x20a>
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	2201      	movs	r2, #1
 800c814:	755a      	strb	r2, [r3, #21]
 800c816:	2301      	movs	r3, #1
 800c818:	e035      	b.n	800c886 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	69ba      	ldr	r2, [r7, #24]
 800c81e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	699b      	ldr	r3, [r3, #24]
 800c824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c828:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c82c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c82e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	429a      	cmp	r2, r3
 800c834:	d901      	bls.n	800c83a <f_read+0x22a>
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c848:	4413      	add	r3, r2
 800c84a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c84c:	4619      	mov	r1, r3
 800c84e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c850:	f7fd fa6a 	bl	8009d28 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c858:	4413      	add	r3, r2
 800c85a:	627b      	str	r3, [r7, #36]	; 0x24
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	699a      	ldr	r2, [r3, #24]
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	441a      	add	r2, r3
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	619a      	str	r2, [r3, #24]
 800c868:	683b      	ldr	r3, [r7, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	441a      	add	r2, r3
 800c870:	683b      	ldr	r3, [r7, #0]
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c878:	1ad3      	subs	r3, r2, r3
 800c87a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	f47f af01 	bne.w	800c686 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3738      	adds	r7, #56	; 0x38
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}

0800c88e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c88e:	b580      	push	{r7, lr}
 800c890:	b08c      	sub	sp, #48	; 0x30
 800c892:	af00      	add	r7, sp, #0
 800c894:	60f8      	str	r0, [r7, #12]
 800c896:	60b9      	str	r1, [r7, #8]
 800c898:	607a      	str	r2, [r7, #4]
 800c89a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c8a0:	683b      	ldr	r3, [r7, #0]
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	f107 0210 	add.w	r2, r7, #16
 800c8ac:	4611      	mov	r1, r2
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff fbe8 	bl	800c084 <validate>
 800c8b4:	4603      	mov	r3, r0
 800c8b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c8ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d107      	bne.n	800c8d2 <f_write+0x44>
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	7d5b      	ldrb	r3, [r3, #21]
 800c8c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c8ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d002      	beq.n	800c8d8 <f_write+0x4a>
 800c8d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c8d6:	e14b      	b.n	800cb70 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	7d1b      	ldrb	r3, [r3, #20]
 800c8dc:	f003 0302 	and.w	r3, r3, #2
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d101      	bne.n	800c8e8 <f_write+0x5a>
 800c8e4:	2307      	movs	r3, #7
 800c8e6:	e143      	b.n	800cb70 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	699a      	ldr	r2, [r3, #24]
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	441a      	add	r2, r3
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	699b      	ldr	r3, [r3, #24]
 800c8f4:	429a      	cmp	r2, r3
 800c8f6:	f080 812d 	bcs.w	800cb54 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	43db      	mvns	r3, r3
 800c900:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c902:	e127      	b.n	800cb54 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	699b      	ldr	r3, [r3, #24]
 800c908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f040 80e3 	bne.w	800cad8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	699b      	ldr	r3, [r3, #24]
 800c916:	0a5b      	lsrs	r3, r3, #9
 800c918:	693a      	ldr	r2, [r7, #16]
 800c91a:	8952      	ldrh	r2, [r2, #10]
 800c91c:	3a01      	subs	r2, #1
 800c91e:	4013      	ands	r3, r2
 800c920:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d143      	bne.n	800c9b0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	699b      	ldr	r3, [r3, #24]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10c      	bne.n	800c94a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	689b      	ldr	r3, [r3, #8]
 800c934:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d11a      	bne.n	800c972 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2100      	movs	r1, #0
 800c940:	4618      	mov	r0, r3
 800c942:	f7fd fed3 	bl	800a6ec <create_chain>
 800c946:	62b8      	str	r0, [r7, #40]	; 0x28
 800c948:	e013      	b.n	800c972 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d007      	beq.n	800c962 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	699b      	ldr	r3, [r3, #24]
 800c956:	4619      	mov	r1, r3
 800c958:	68f8      	ldr	r0, [r7, #12]
 800c95a:	f7fd ff5f 	bl	800a81c <clmt_clust>
 800c95e:	62b8      	str	r0, [r7, #40]	; 0x28
 800c960:	e007      	b.n	800c972 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	69db      	ldr	r3, [r3, #28]
 800c968:	4619      	mov	r1, r3
 800c96a:	4610      	mov	r0, r2
 800c96c:	f7fd febe 	bl	800a6ec <create_chain>
 800c970:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	2b00      	cmp	r3, #0
 800c976:	f000 80f2 	beq.w	800cb5e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d104      	bne.n	800c98a <f_write+0xfc>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2202      	movs	r2, #2
 800c984:	755a      	strb	r2, [r3, #21]
 800c986:	2302      	movs	r3, #2
 800c988:	e0f2      	b.n	800cb70 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c98a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c990:	d104      	bne.n	800c99c <f_write+0x10e>
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	2201      	movs	r2, #1
 800c996:	755a      	strb	r2, [r3, #21]
 800c998:	2301      	movs	r3, #1
 800c99a:	e0e9      	b.n	800cb70 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9a0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	689b      	ldr	r3, [r3, #8]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d102      	bne.n	800c9b0 <f_write+0x122>
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c9ae:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	7d1b      	ldrb	r3, [r3, #20]
 800c9b4:	b25b      	sxtb	r3, r3
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	da18      	bge.n	800c9ec <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	7858      	ldrb	r0, [r3, #1]
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a1a      	ldr	r2, [r3, #32]
 800c9c8:	2301      	movs	r3, #1
 800c9ca:	f7fd f8e5 	bl	8009b98 <disk_write>
 800c9ce:	4603      	mov	r3, r0
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d004      	beq.n	800c9de <f_write+0x150>
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	755a      	strb	r2, [r3, #21]
 800c9da:	2301      	movs	r3, #1
 800c9dc:	e0c8      	b.n	800cb70 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	7d1b      	ldrb	r3, [r3, #20]
 800c9e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9e6:	b2da      	uxtb	r2, r3
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c9ec:	693a      	ldr	r2, [r7, #16]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	69db      	ldr	r3, [r3, #28]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	4610      	mov	r0, r2
 800c9f6:	f7fd fc61 	bl	800a2bc <clust2sect>
 800c9fa:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c9fc:	697b      	ldr	r3, [r7, #20]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d104      	bne.n	800ca0c <f_write+0x17e>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2202      	movs	r2, #2
 800ca06:	755a      	strb	r2, [r3, #21]
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e0b1      	b.n	800cb70 <f_write+0x2e2>
			sect += csect;
 800ca0c:	697a      	ldr	r2, [r7, #20]
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	4413      	add	r3, r2
 800ca12:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	0a5b      	lsrs	r3, r3, #9
 800ca18:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ca1a:	6a3b      	ldr	r3, [r7, #32]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d03c      	beq.n	800ca9a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	6a3b      	ldr	r3, [r7, #32]
 800ca24:	4413      	add	r3, r2
 800ca26:	693a      	ldr	r2, [r7, #16]
 800ca28:	8952      	ldrh	r2, [r2, #10]
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	d905      	bls.n	800ca3a <f_write+0x1ac>
					cc = fs->csize - csect;
 800ca2e:	693b      	ldr	r3, [r7, #16]
 800ca30:	895b      	ldrh	r3, [r3, #10]
 800ca32:	461a      	mov	r2, r3
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	1ad3      	subs	r3, r2, r3
 800ca38:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca3a:	693b      	ldr	r3, [r7, #16]
 800ca3c:	7858      	ldrb	r0, [r3, #1]
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	697a      	ldr	r2, [r7, #20]
 800ca42:	69f9      	ldr	r1, [r7, #28]
 800ca44:	f7fd f8a8 	bl	8009b98 <disk_write>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d004      	beq.n	800ca58 <f_write+0x1ca>
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2201      	movs	r2, #1
 800ca52:	755a      	strb	r2, [r3, #21]
 800ca54:	2301      	movs	r3, #1
 800ca56:	e08b      	b.n	800cb70 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	6a1a      	ldr	r2, [r3, #32]
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	1ad3      	subs	r3, r2, r3
 800ca60:	6a3a      	ldr	r2, [r7, #32]
 800ca62:	429a      	cmp	r2, r3
 800ca64:	d915      	bls.n	800ca92 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6a1a      	ldr	r2, [r3, #32]
 800ca70:	697b      	ldr	r3, [r7, #20]
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	025b      	lsls	r3, r3, #9
 800ca76:	69fa      	ldr	r2, [r7, #28]
 800ca78:	4413      	add	r3, r2
 800ca7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca7e:	4619      	mov	r1, r3
 800ca80:	f7fd f952 	bl	8009d28 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	7d1b      	ldrb	r3, [r3, #20]
 800ca88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca8c:	b2da      	uxtb	r2, r3
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ca92:	6a3b      	ldr	r3, [r7, #32]
 800ca94:	025b      	lsls	r3, r3, #9
 800ca96:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ca98:	e03f      	b.n	800cb1a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6a1b      	ldr	r3, [r3, #32]
 800ca9e:	697a      	ldr	r2, [r7, #20]
 800caa0:	429a      	cmp	r2, r3
 800caa2:	d016      	beq.n	800cad2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	699a      	ldr	r2, [r3, #24]
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800caac:	429a      	cmp	r2, r3
 800caae:	d210      	bcs.n	800cad2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800cab0:	693b      	ldr	r3, [r7, #16]
 800cab2:	7858      	ldrb	r0, [r3, #1]
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800caba:	2301      	movs	r3, #1
 800cabc:	697a      	ldr	r2, [r7, #20]
 800cabe:	f7fd f84b 	bl	8009b58 <disk_read>
 800cac2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d004      	beq.n	800cad2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	2201      	movs	r2, #1
 800cacc:	755a      	strb	r2, [r3, #21]
 800cace:	2301      	movs	r3, #1
 800cad0:	e04e      	b.n	800cb70 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	697a      	ldr	r2, [r7, #20]
 800cad6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	699b      	ldr	r3, [r3, #24]
 800cadc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cae0:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cae4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800cae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	429a      	cmp	r2, r3
 800caec:	d901      	bls.n	800caf2 <f_write+0x264>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	699b      	ldr	r3, [r3, #24]
 800cafc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb00:	4413      	add	r3, r2
 800cb02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb04:	69f9      	ldr	r1, [r7, #28]
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fd f90e 	bl	8009d28 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	7d1b      	ldrb	r3, [r3, #20]
 800cb10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb14:	b2da      	uxtb	r2, r3
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800cb1a:	69fa      	ldr	r2, [r7, #28]
 800cb1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1e:	4413      	add	r3, r2
 800cb20:	61fb      	str	r3, [r7, #28]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	699a      	ldr	r2, [r3, #24]
 800cb26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb28:	441a      	add	r2, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	619a      	str	r2, [r3, #24]
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	68da      	ldr	r2, [r3, #12]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	699b      	ldr	r3, [r3, #24]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	bf38      	it	cc
 800cb3a:	461a      	movcc	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	60da      	str	r2, [r3, #12]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681a      	ldr	r2, [r3, #0]
 800cb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb46:	441a      	add	r2, r3
 800cb48:	683b      	ldr	r3, [r7, #0]
 800cb4a:	601a      	str	r2, [r3, #0]
 800cb4c:	687a      	ldr	r2, [r7, #4]
 800cb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb50:	1ad3      	subs	r3, r2, r3
 800cb52:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f47f aed4 	bne.w	800c904 <f_write+0x76>
 800cb5c:	e000      	b.n	800cb60 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800cb5e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	7d1b      	ldrb	r3, [r3, #20]
 800cb64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb68:	b2da      	uxtb	r2, r3
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800cb6e:	2300      	movs	r3, #0
}
 800cb70:	4618      	mov	r0, r3
 800cb72:	3730      	adds	r7, #48	; 0x30
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b086      	sub	sp, #24
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f107 0208 	add.w	r2, r7, #8
 800cb86:	4611      	mov	r1, r2
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f7ff fa7b 	bl	800c084 <validate>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cb92:	7dfb      	ldrb	r3, [r7, #23]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d168      	bne.n	800cc6a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	7d1b      	ldrb	r3, [r3, #20]
 800cb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d062      	beq.n	800cc6a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	7d1b      	ldrb	r3, [r3, #20]
 800cba8:	b25b      	sxtb	r3, r3
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	da15      	bge.n	800cbda <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cbae:	68bb      	ldr	r3, [r7, #8]
 800cbb0:	7858      	ldrb	r0, [r3, #1]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	6a1a      	ldr	r2, [r3, #32]
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	f7fc ffeb 	bl	8009b98 <disk_write>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d001      	beq.n	800cbcc <f_sync+0x54>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e04f      	b.n	800cc6c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	7d1b      	ldrb	r3, [r3, #20]
 800cbd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cbd4:	b2da      	uxtb	r2, r3
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cbda:	f7fd f81b 	bl	8009c14 <get_fattime>
 800cbde:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cbe0:	68ba      	ldr	r2, [r7, #8]
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	4610      	mov	r0, r2
 800cbea:	f7fd facb 	bl	800a184 <move_window>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cbf2:	7dfb      	ldrb	r3, [r7, #23]
 800cbf4:	2b00      	cmp	r3, #0
 800cbf6:	d138      	bne.n	800cc6a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbfc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	330b      	adds	r3, #11
 800cc02:	781a      	ldrb	r2, [r3, #0]
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	330b      	adds	r3, #11
 800cc08:	f042 0220 	orr.w	r2, r2, #32
 800cc0c:	b2d2      	uxtb	r2, r2
 800cc0e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6818      	ldr	r0, [r3, #0]
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	461a      	mov	r2, r3
 800cc1a:	68f9      	ldr	r1, [r7, #12]
 800cc1c:	f7fd ffd8 	bl	800abd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f103 021c 	add.w	r2, r3, #28
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	4610      	mov	r0, r2
 800cc2e:	f7fd f84f 	bl	8009cd0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	3316      	adds	r3, #22
 800cc36:	6939      	ldr	r1, [r7, #16]
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f7fd f849 	bl	8009cd0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	3312      	adds	r3, #18
 800cc42:	2100      	movs	r1, #0
 800cc44:	4618      	mov	r0, r3
 800cc46:	f7fd f828 	bl	8009c9a <st_word>
					fs->wflag = 1;
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fd fac4 	bl	800a1e0 <sync_fs>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	7d1b      	ldrb	r3, [r3, #20]
 800cc60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f7ff ff7b 	bl	800cb78 <f_sync>
 800cc82:	4603      	mov	r3, r0
 800cc84:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d118      	bne.n	800ccbe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f107 0208 	add.w	r2, r7, #8
 800cc92:	4611      	mov	r1, r2
 800cc94:	4618      	mov	r0, r3
 800cc96:	f7ff f9f5 	bl	800c084 <validate>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d10c      	bne.n	800ccbe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	691b      	ldr	r3, [r3, #16]
 800cca8:	4618      	mov	r0, r3
 800ccaa:	f7fd f9c7 	bl	800a03c <dec_lock>
 800ccae:	4603      	mov	r3, r0
 800ccb0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d102      	bne.n	800ccbe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ccbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	3710      	adds	r7, #16
 800ccc4:	46bd      	mov	sp, r7
 800ccc6:	bd80      	pop	{r7, pc}

0800ccc8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b090      	sub	sp, #64	; 0x40
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	6078      	str	r0, [r7, #4]
 800ccd0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f107 0208 	add.w	r2, r7, #8
 800ccd8:	4611      	mov	r1, r2
 800ccda:	4618      	mov	r0, r3
 800ccdc:	f7ff f9d2 	bl	800c084 <validate>
 800cce0:	4603      	mov	r3, r0
 800cce2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cce6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d103      	bne.n	800ccf6 <f_lseek+0x2e>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	7d5b      	ldrb	r3, [r3, #21]
 800ccf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800ccf6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d002      	beq.n	800cd04 <f_lseek+0x3c>
 800ccfe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd02:	e1e6      	b.n	800d0d2 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	f000 80d1 	beq.w	800ceb0 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd14:	d15a      	bne.n	800cdcc <f_lseek+0x104>
			tbl = fp->cltbl;
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1a:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cd1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd1e:	1d1a      	adds	r2, r3, #4
 800cd20:	627a      	str	r2, [r7, #36]	; 0x24
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	617b      	str	r3, [r7, #20]
 800cd26:	2302      	movs	r3, #2
 800cd28:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	689b      	ldr	r3, [r3, #8]
 800cd2e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cd30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d03a      	beq.n	800cdac <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd38:	613b      	str	r3, [r7, #16]
 800cd3a:	2300      	movs	r3, #0
 800cd3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cd3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd40:	3302      	adds	r3, #2
 800cd42:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cd44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd46:	60fb      	str	r3, [r7, #12]
 800cd48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4a:	3301      	adds	r3, #1
 800cd4c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7fd fad1 	bl	800a2fa <get_fat>
 800cd58:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd5c:	2b01      	cmp	r3, #1
 800cd5e:	d804      	bhi.n	800cd6a <f_lseek+0xa2>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2202      	movs	r2, #2
 800cd64:	755a      	strb	r2, [r3, #21]
 800cd66:	2302      	movs	r3, #2
 800cd68:	e1b3      	b.n	800d0d2 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cd6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd70:	d104      	bne.n	800cd7c <f_lseek+0xb4>
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2201      	movs	r2, #1
 800cd76:	755a      	strb	r2, [r3, #21]
 800cd78:	2301      	movs	r3, #1
 800cd7a:	e1aa      	b.n	800d0d2 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	3301      	adds	r3, #1
 800cd80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d0de      	beq.n	800cd44 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cd86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	429a      	cmp	r2, r3
 800cd8c:	d809      	bhi.n	800cda2 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cd8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd90:	1d1a      	adds	r2, r3, #4
 800cd92:	627a      	str	r2, [r7, #36]	; 0x24
 800cd94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9a:	1d1a      	adds	r2, r3, #4
 800cd9c:	627a      	str	r2, [r7, #36]	; 0x24
 800cd9e:	693a      	ldr	r2, [r7, #16]
 800cda0:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cda2:	68bb      	ldr	r3, [r7, #8]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d3c4      	bcc.n	800cd36 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb2:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cdb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	429a      	cmp	r2, r3
 800cdba:	d803      	bhi.n	800cdc4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	601a      	str	r2, [r3, #0]
 800cdc2:	e184      	b.n	800d0ce <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cdc4:	2311      	movs	r3, #17
 800cdc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cdca:	e180      	b.n	800d0ce <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	68db      	ldr	r3, [r3, #12]
 800cdd0:	683a      	ldr	r2, [r7, #0]
 800cdd2:	429a      	cmp	r2, r3
 800cdd4:	d902      	bls.n	800cddc <f_lseek+0x114>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	68db      	ldr	r3, [r3, #12]
 800cdda:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	683a      	ldr	r2, [r7, #0]
 800cde0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cde2:	683b      	ldr	r3, [r7, #0]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	f000 8172 	beq.w	800d0ce <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cdea:	683b      	ldr	r3, [r7, #0]
 800cdec:	3b01      	subs	r3, #1
 800cdee:	4619      	mov	r1, r3
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f7fd fd13 	bl	800a81c <clmt_clust>
 800cdf6:	4602      	mov	r2, r0
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800cdfc:	68ba      	ldr	r2, [r7, #8]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	69db      	ldr	r3, [r3, #28]
 800ce02:	4619      	mov	r1, r3
 800ce04:	4610      	mov	r0, r2
 800ce06:	f7fd fa59 	bl	800a2bc <clust2sect>
 800ce0a:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800ce0c:	69bb      	ldr	r3, [r7, #24]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d104      	bne.n	800ce1c <f_lseek+0x154>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2202      	movs	r2, #2
 800ce16:	755a      	strb	r2, [r3, #21]
 800ce18:	2302      	movs	r3, #2
 800ce1a:	e15a      	b.n	800d0d2 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800ce1c:	683b      	ldr	r3, [r7, #0]
 800ce1e:	3b01      	subs	r3, #1
 800ce20:	0a5b      	lsrs	r3, r3, #9
 800ce22:	68ba      	ldr	r2, [r7, #8]
 800ce24:	8952      	ldrh	r2, [r2, #10]
 800ce26:	3a01      	subs	r2, #1
 800ce28:	4013      	ands	r3, r2
 800ce2a:	69ba      	ldr	r2, [r7, #24]
 800ce2c:	4413      	add	r3, r2
 800ce2e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	f000 8148 	beq.w	800d0ce <f_lseek+0x406>
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	6a1b      	ldr	r3, [r3, #32]
 800ce42:	69ba      	ldr	r2, [r7, #24]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	f000 8142 	beq.w	800d0ce <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	7d1b      	ldrb	r3, [r3, #20]
 800ce4e:	b25b      	sxtb	r3, r3
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	da18      	bge.n	800ce86 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	7858      	ldrb	r0, [r3, #1]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	6a1a      	ldr	r2, [r3, #32]
 800ce62:	2301      	movs	r3, #1
 800ce64:	f7fc fe98 	bl	8009b98 <disk_write>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d004      	beq.n	800ce78 <f_lseek+0x1b0>
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	2201      	movs	r2, #1
 800ce72:	755a      	strb	r2, [r3, #21]
 800ce74:	2301      	movs	r3, #1
 800ce76:	e12c      	b.n	800d0d2 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	7d1b      	ldrb	r3, [r3, #20]
 800ce7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce80:	b2da      	uxtb	r2, r3
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	7858      	ldrb	r0, [r3, #1]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ce90:	2301      	movs	r3, #1
 800ce92:	69ba      	ldr	r2, [r7, #24]
 800ce94:	f7fc fe60 	bl	8009b58 <disk_read>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d004      	beq.n	800cea8 <f_lseek+0x1e0>
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2201      	movs	r2, #1
 800cea2:	755a      	strb	r2, [r3, #21]
 800cea4:	2301      	movs	r3, #1
 800cea6:	e114      	b.n	800d0d2 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	621a      	str	r2, [r3, #32]
 800ceae:	e10e      	b.n	800d0ce <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	683a      	ldr	r2, [r7, #0]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d908      	bls.n	800cecc <f_lseek+0x204>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7d1b      	ldrb	r3, [r3, #20]
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d102      	bne.n	800cecc <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	68db      	ldr	r3, [r3, #12]
 800ceca:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	699b      	ldr	r3, [r3, #24]
 800ced0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ced2:	2300      	movs	r3, #0
 800ced4:	637b      	str	r3, [r7, #52]	; 0x34
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ceda:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800cedc:	683b      	ldr	r3, [r7, #0]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f000 80a7 	beq.w	800d032 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	895b      	ldrh	r3, [r3, #10]
 800cee8:	025b      	lsls	r3, r3, #9
 800ceea:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d01b      	beq.n	800cf2a <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	1e5a      	subs	r2, r3, #1
 800cef6:	69fb      	ldr	r3, [r7, #28]
 800cef8:	fbb2 f2f3 	udiv	r2, r2, r3
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	1e59      	subs	r1, r3, #1
 800cf00:	69fb      	ldr	r3, [r7, #28]
 800cf02:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800cf06:	429a      	cmp	r2, r3
 800cf08:	d30f      	bcc.n	800cf2a <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cf0a:	6a3b      	ldr	r3, [r7, #32]
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	69fb      	ldr	r3, [r7, #28]
 800cf10:	425b      	negs	r3, r3
 800cf12:	401a      	ands	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	699b      	ldr	r3, [r3, #24]
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	1ad3      	subs	r3, r2, r3
 800cf20:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	69db      	ldr	r3, [r3, #28]
 800cf26:	63bb      	str	r3, [r7, #56]	; 0x38
 800cf28:	e022      	b.n	800cf70 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d119      	bne.n	800cf6a <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2100      	movs	r1, #0
 800cf3a:	4618      	mov	r0, r3
 800cf3c:	f7fd fbd6 	bl	800a6ec <create_chain>
 800cf40:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800cf42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d104      	bne.n	800cf52 <f_lseek+0x28a>
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	755a      	strb	r2, [r3, #21]
 800cf4e:	2302      	movs	r3, #2
 800cf50:	e0bf      	b.n	800d0d2 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf58:	d104      	bne.n	800cf64 <f_lseek+0x29c>
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	2201      	movs	r2, #1
 800cf5e:	755a      	strb	r2, [r3, #21]
 800cf60:	2301      	movs	r3, #1
 800cf62:	e0b6      	b.n	800d0d2 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf68:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cf6e:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cf70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d05d      	beq.n	800d032 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cf76:	e03a      	b.n	800cfee <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cf78:	683a      	ldr	r2, [r7, #0]
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	1ad3      	subs	r3, r2, r3
 800cf7e:	603b      	str	r3, [r7, #0]
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	699a      	ldr	r2, [r3, #24]
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	441a      	add	r2, r3
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	7d1b      	ldrb	r3, [r3, #20]
 800cf90:	f003 0302 	and.w	r3, r3, #2
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d00b      	beq.n	800cfb0 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f7fd fba5 	bl	800a6ec <create_chain>
 800cfa2:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cfa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d108      	bne.n	800cfbc <f_lseek+0x2f4>
							ofs = 0; break;
 800cfaa:	2300      	movs	r3, #0
 800cfac:	603b      	str	r3, [r7, #0]
 800cfae:	e022      	b.n	800cff6 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f7fd f9a0 	bl	800a2fa <get_fat>
 800cfba:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cfbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfc2:	d104      	bne.n	800cfce <f_lseek+0x306>
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	2201      	movs	r2, #1
 800cfc8:	755a      	strb	r2, [r3, #21]
 800cfca:	2301      	movs	r3, #1
 800cfcc:	e081      	b.n	800d0d2 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cfce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d904      	bls.n	800cfde <f_lseek+0x316>
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d304      	bcc.n	800cfe8 <f_lseek+0x320>
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2202      	movs	r2, #2
 800cfe2:	755a      	strb	r2, [r3, #21]
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	e074      	b.n	800d0d2 <f_lseek+0x40a>
					fp->clust = clst;
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfec:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cfee:	683a      	ldr	r2, [r7, #0]
 800cff0:	69fb      	ldr	r3, [r7, #28]
 800cff2:	429a      	cmp	r2, r3
 800cff4:	d8c0      	bhi.n	800cf78 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	699a      	ldr	r2, [r3, #24]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	441a      	add	r2, r3
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d012      	beq.n	800d032 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d010:	4618      	mov	r0, r3
 800d012:	f7fd f953 	bl	800a2bc <clust2sect>
 800d016:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d104      	bne.n	800d028 <f_lseek+0x360>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	2202      	movs	r2, #2
 800d022:	755a      	strb	r2, [r3, #21]
 800d024:	2302      	movs	r3, #2
 800d026:	e054      	b.n	800d0d2 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	0a5b      	lsrs	r3, r3, #9
 800d02c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d02e:	4413      	add	r3, r2
 800d030:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	699a      	ldr	r2, [r3, #24]
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	68db      	ldr	r3, [r3, #12]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d90a      	bls.n	800d054 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	699a      	ldr	r2, [r3, #24]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	7d1b      	ldrb	r3, [r3, #20]
 800d04a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	699b      	ldr	r3, [r3, #24]
 800d058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d036      	beq.n	800d0ce <f_lseek+0x406>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	6a1b      	ldr	r3, [r3, #32]
 800d064:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d066:	429a      	cmp	r2, r3
 800d068:	d031      	beq.n	800d0ce <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7d1b      	ldrb	r3, [r3, #20]
 800d06e:	b25b      	sxtb	r3, r3
 800d070:	2b00      	cmp	r3, #0
 800d072:	da18      	bge.n	800d0a6 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	7858      	ldrb	r0, [r3, #1]
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6a1a      	ldr	r2, [r3, #32]
 800d082:	2301      	movs	r3, #1
 800d084:	f7fc fd88 	bl	8009b98 <disk_write>
 800d088:	4603      	mov	r3, r0
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d004      	beq.n	800d098 <f_lseek+0x3d0>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2201      	movs	r2, #1
 800d092:	755a      	strb	r2, [r3, #21]
 800d094:	2301      	movs	r3, #1
 800d096:	e01c      	b.n	800d0d2 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7d1b      	ldrb	r3, [r3, #20]
 800d09c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	7858      	ldrb	r0, [r3, #1]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0b4:	f7fc fd50 	bl	8009b58 <disk_read>
 800d0b8:	4603      	mov	r3, r0
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d004      	beq.n	800d0c8 <f_lseek+0x400>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	2201      	movs	r2, #1
 800d0c2:	755a      	strb	r2, [r3, #21]
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	e004      	b.n	800d0d2 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0cc:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d0ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d0d2:	4618      	mov	r0, r3
 800d0d4:	3740      	adds	r7, #64	; 0x40
 800d0d6:	46bd      	mov	sp, r7
 800d0d8:	bd80      	pop	{r7, pc}

0800d0da <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800d0da:	b580      	push	{r7, lr}
 800d0dc:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	1d3b      	adds	r3, r7, #4
 800d0e4:	6018      	str	r0, [r3, #0]
 800d0e6:	463b      	mov	r3, r7
 800d0e8:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800d0ea:	1d3b      	adds	r3, r7, #4
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d101      	bne.n	800d0f6 <f_opendir+0x1c>
 800d0f2:	2309      	movs	r3, #9
 800d0f4:	e08a      	b.n	800d20c <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 800d0f6:	1d3b      	adds	r3, r7, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800d0fe:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800d102:	463b      	mov	r3, r7
 800d104:	2200      	movs	r2, #0
 800d106:	4618      	mov	r0, r3
 800d108:	f7fe fd70 	bl	800bbec <find_volume>
 800d10c:	4603      	mov	r3, r0
 800d10e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800d112:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d116:	2b00      	cmp	r3, #0
 800d118:	d16e      	bne.n	800d1f8 <f_opendir+0x11e>
		obj->fs = fs;
 800d11a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d11e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d122:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800d124:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d128:	f107 020c 	add.w	r2, r7, #12
 800d12c:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800d12e:	463b      	mov	r3, r7
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	1d3b      	adds	r3, r7, #4
 800d134:	4611      	mov	r1, r2
 800d136:	6818      	ldr	r0, [r3, #0]
 800d138:	f7fe fc4c 	bl	800b9d4 <follow_path>
 800d13c:	4603      	mov	r3, r0
 800d13e:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800d142:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d146:	2b00      	cmp	r3, #0
 800d148:	d14f      	bne.n	800d1ea <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800d14a:	1d3b      	adds	r3, r7, #4
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d152:	b25b      	sxtb	r3, r3
 800d154:	2b00      	cmp	r3, #0
 800d156:	db17      	blt.n	800d188 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800d158:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d15c:	799b      	ldrb	r3, [r3, #6]
 800d15e:	f003 0310 	and.w	r3, r3, #16
 800d162:	2b00      	cmp	r3, #0
 800d164:	d00d      	beq.n	800d182 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800d166:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800d16a:	1d3b      	adds	r3, r7, #4
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	6a1b      	ldr	r3, [r3, #32]
 800d170:	4619      	mov	r1, r3
 800d172:	4610      	mov	r0, r2
 800d174:	f7fd fd0d 	bl	800ab92 <ld_clust>
 800d178:	4602      	mov	r2, r0
 800d17a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d17e:	609a      	str	r2, [r3, #8]
 800d180:	e002      	b.n	800d188 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800d182:	2305      	movs	r3, #5
 800d184:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800d188:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d12c      	bne.n	800d1ea <f_opendir+0x110>
				obj->id = fs->id;
 800d190:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800d194:	88da      	ldrh	r2, [r3, #6]
 800d196:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d19a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800d19c:	1d3b      	adds	r3, r7, #4
 800d19e:	2100      	movs	r1, #0
 800d1a0:	6818      	ldr	r0, [r3, #0]
 800d1a2:	f7fd fb6f 	bl	800a884 <dir_sdi>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800d1ac:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d11a      	bne.n	800d1ea <f_opendir+0x110>
					if (obj->sclust) {
 800d1b4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d1b8:	689b      	ldr	r3, [r3, #8]
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	d011      	beq.n	800d1e2 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800d1be:	1d3b      	adds	r3, r7, #4
 800d1c0:	2100      	movs	r1, #0
 800d1c2:	6818      	ldr	r0, [r3, #0]
 800d1c4:	f7fc feac 	bl	8009f20 <inc_lock>
 800d1c8:	4602      	mov	r2, r0
 800d1ca:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d1ce:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800d1d0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d1d4:	691b      	ldr	r3, [r3, #16]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d107      	bne.n	800d1ea <f_opendir+0x110>
 800d1da:	2312      	movs	r3, #18
 800d1dc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800d1e0:	e003      	b.n	800d1ea <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800d1e2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800d1ea:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d1ee:	2b04      	cmp	r3, #4
 800d1f0:	d102      	bne.n	800d1f8 <f_opendir+0x11e>
 800d1f2:	2305      	movs	r3, #5
 800d1f4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800d1f8:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d003      	beq.n	800d208 <f_opendir+0x12e>
 800d200:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800d204:	2200      	movs	r2, #0
 800d206:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d208:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800d20c:	4618      	mov	r0, r3
 800d20e:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}

0800d216 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800d216:	b580      	push	{r7, lr}
 800d218:	b084      	sub	sp, #16
 800d21a:	af00      	add	r7, sp, #0
 800d21c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f107 0208 	add.w	r2, r7, #8
 800d224:	4611      	mov	r1, r2
 800d226:	4618      	mov	r0, r3
 800d228:	f7fe ff2c 	bl	800c084 <validate>
 800d22c:	4603      	mov	r3, r0
 800d22e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d230:	7bfb      	ldrb	r3, [r7, #15]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d110      	bne.n	800d258 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	691b      	ldr	r3, [r3, #16]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d006      	beq.n	800d24c <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	691b      	ldr	r3, [r3, #16]
 800d242:	4618      	mov	r0, r3
 800d244:	f7fc fefa 	bl	800a03c <dec_lock>
 800d248:	4603      	mov	r3, r0
 800d24a:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800d24c:	7bfb      	ldrb	r3, [r7, #15]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d102      	bne.n	800d258 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	2200      	movs	r2, #0
 800d256:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800d258:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3710      	adds	r7, #16
 800d25e:	46bd      	mov	sp, r7
 800d260:	bd80      	pop	{r7, pc}

0800d262 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800d262:	b580      	push	{r7, lr}
 800d264:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800d268:	af00      	add	r7, sp, #0
 800d26a:	1d3b      	adds	r3, r7, #4
 800d26c:	6018      	str	r0, [r3, #0]
 800d26e:	463b      	mov	r3, r7
 800d270:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800d272:	1d3b      	adds	r3, r7, #4
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800d27a:	4611      	mov	r1, r2
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7fe ff01 	bl	800c084 <validate>
 800d282:	4603      	mov	r3, r0
 800d284:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800d288:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d139      	bne.n	800d304 <f_readdir+0xa2>
		if (!fno) {
 800d290:	463b      	mov	r3, r7
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d108      	bne.n	800d2aa <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800d298:	1d3b      	adds	r3, r7, #4
 800d29a:	2100      	movs	r1, #0
 800d29c:	6818      	ldr	r0, [r3, #0]
 800d29e:	f7fd faf1 	bl	800a884 <dir_sdi>
 800d2a2:	4603      	mov	r3, r0
 800d2a4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800d2a8:	e02c      	b.n	800d304 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 800d2aa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800d2ae:	f107 0208 	add.w	r2, r7, #8
 800d2b2:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800d2b4:	1d3b      	adds	r3, r7, #4
 800d2b6:	2100      	movs	r1, #0
 800d2b8:	6818      	ldr	r0, [r3, #0]
 800d2ba:	f7fd fe96 	bl	800afea <dir_read>
 800d2be:	4603      	mov	r3, r0
 800d2c0:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800d2c4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800d2c8:	2b04      	cmp	r3, #4
 800d2ca:	d102      	bne.n	800d2d2 <f_readdir+0x70>
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800d2d2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d114      	bne.n	800d304 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800d2da:	463a      	mov	r2, r7
 800d2dc:	1d3b      	adds	r3, r7, #4
 800d2de:	6811      	ldr	r1, [r2, #0]
 800d2e0:	6818      	ldr	r0, [r3, #0]
 800d2e2:	f7fe f8e1 	bl	800b4a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800d2e6:	1d3b      	adds	r3, r7, #4
 800d2e8:	2100      	movs	r1, #0
 800d2ea:	6818      	ldr	r0, [r3, #0]
 800d2ec:	f7fd fb45 	bl	800a97a <dir_next>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800d2f6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800d2fa:	2b04      	cmp	r3, #4
 800d2fc:	d102      	bne.n	800d304 <f_readdir+0xa2>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800d304:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800d308:	4618      	mov	r0, r3
 800d30a:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800d30e:	46bd      	mov	sp, r7
 800d310:	bd80      	pop	{r7, pc}

0800d312 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b092      	sub	sp, #72	; 0x48
 800d316:	af00      	add	r7, sp, #0
 800d318:	60f8      	str	r0, [r7, #12]
 800d31a:	60b9      	str	r1, [r7, #8]
 800d31c:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800d31e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800d322:	f107 030c 	add.w	r3, r7, #12
 800d326:	2200      	movs	r2, #0
 800d328:	4618      	mov	r0, r3
 800d32a:	f7fe fc5f 	bl	800bbec <find_volume>
 800d32e:	4603      	mov	r3, r0
 800d330:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800d334:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d338:	2b00      	cmp	r3, #0
 800d33a:	f040 8099 	bne.w	800d470 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800d33e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800d344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d346:	695a      	ldr	r2, [r3, #20]
 800d348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d34a:	699b      	ldr	r3, [r3, #24]
 800d34c:	3b02      	subs	r3, #2
 800d34e:	429a      	cmp	r2, r3
 800d350:	d804      	bhi.n	800d35c <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800d352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d354:	695a      	ldr	r2, [r3, #20]
 800d356:	68bb      	ldr	r3, [r7, #8]
 800d358:	601a      	str	r2, [r3, #0]
 800d35a:	e089      	b.n	800d470 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800d35c:	2300      	movs	r3, #0
 800d35e:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800d360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d362:	781b      	ldrb	r3, [r3, #0]
 800d364:	2b01      	cmp	r3, #1
 800d366:	d128      	bne.n	800d3ba <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800d368:	2302      	movs	r3, #2
 800d36a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d36e:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800d370:	f107 0314 	add.w	r3, r7, #20
 800d374:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d376:	4618      	mov	r0, r3
 800d378:	f7fc ffbf 	bl	800a2fa <get_fat>
 800d37c:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800d37e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d380:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d384:	d103      	bne.n	800d38e <f_getfree+0x7c>
 800d386:	2301      	movs	r3, #1
 800d388:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d38c:	e063      	b.n	800d456 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800d38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d390:	2b01      	cmp	r3, #1
 800d392:	d103      	bne.n	800d39c <f_getfree+0x8a>
 800d394:	2302      	movs	r3, #2
 800d396:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d39a:	e05c      	b.n	800d456 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800d39c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d102      	bne.n	800d3a8 <f_getfree+0x96>
 800d3a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800d3a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d3aa:	3301      	adds	r3, #1
 800d3ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3b0:	699b      	ldr	r3, [r3, #24]
 800d3b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d3b4:	429a      	cmp	r2, r3
 800d3b6:	d3db      	bcc.n	800d370 <f_getfree+0x5e>
 800d3b8:	e04d      	b.n	800d456 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800d3ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3bc:	699b      	ldr	r3, [r3, #24]
 800d3be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3c4:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	637b      	str	r3, [r7, #52]	; 0x34
 800d3ca:	2300      	movs	r3, #0
 800d3cc:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800d3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d113      	bne.n	800d3fc <f_getfree+0xea>
							res = move_window(fs, sect++);
 800d3d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d3d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d8:	1c5a      	adds	r2, r3, #1
 800d3da:	63ba      	str	r2, [r7, #56]	; 0x38
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f7fc fed1 	bl	800a184 <move_window>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800d3e8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d131      	bne.n	800d454 <f_getfree+0x142>
							p = fs->win;
 800d3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3f2:	3334      	adds	r3, #52	; 0x34
 800d3f4:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800d3f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d3fa:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800d3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b02      	cmp	r3, #2
 800d402:	d10f      	bne.n	800d424 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800d404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d406:	f7fc fc0d 	bl	8009c24 <ld_word>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <f_getfree+0x104>
 800d410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d412:	3301      	adds	r3, #1
 800d414:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800d416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d418:	3302      	adds	r3, #2
 800d41a:	633b      	str	r3, [r7, #48]	; 0x30
 800d41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d41e:	3b02      	subs	r3, #2
 800d420:	637b      	str	r3, [r7, #52]	; 0x34
 800d422:	e010      	b.n	800d446 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800d424:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d426:	f7fc fc15 	bl	8009c54 <ld_dword>
 800d42a:	4603      	mov	r3, r0
 800d42c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800d430:	2b00      	cmp	r3, #0
 800d432:	d102      	bne.n	800d43a <f_getfree+0x128>
 800d434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d436:	3301      	adds	r3, #1
 800d438:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800d43a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43c:	3304      	adds	r3, #4
 800d43e:	633b      	str	r3, [r7, #48]	; 0x30
 800d440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d442:	3b04      	subs	r3, #4
 800d444:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800d446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d448:	3b01      	subs	r3, #1
 800d44a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d1bd      	bne.n	800d3ce <f_getfree+0xbc>
 800d452:	e000      	b.n	800d456 <f_getfree+0x144>
							if (res != FR_OK) break;
 800d454:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d45a:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d45e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d460:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d464:	791a      	ldrb	r2, [r3, #4]
 800d466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d468:	f042 0201 	orr.w	r2, r2, #1
 800d46c:	b2d2      	uxtb	r2, r2
 800d46e:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d470:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d474:	4618      	mov	r0, r3
 800d476:	3748      	adds	r7, #72	; 0x48
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	6078      	str	r0, [r7, #4]
 800d484:	460b      	mov	r3, r1
 800d486:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	db25      	blt.n	800d4e0 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	1c5a      	adds	r2, r3, #1
 800d498:	60fa      	str	r2, [r7, #12]
 800d49a:	687a      	ldr	r2, [r7, #4]
 800d49c:	4413      	add	r3, r2
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	2b3c      	cmp	r3, #60	; 0x3c
 800d4a6:	dd12      	ble.n	800d4ce <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6818      	ldr	r0, [r3, #0]
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f103 010c 	add.w	r1, r3, #12
 800d4b2:	68fa      	ldr	r2, [r7, #12]
 800d4b4:	f107 0308 	add.w	r3, r7, #8
 800d4b8:	f7ff f9e9 	bl	800c88e <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d4bc:	68ba      	ldr	r2, [r7, #8]
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d101      	bne.n	800d4c8 <putc_bfd+0x4c>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	e001      	b.n	800d4cc <putc_bfd+0x50>
 800d4c8:	f04f 33ff 	mov.w	r3, #4294967295
 800d4cc:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68fa      	ldr	r2, [r7, #12]
 800d4d2:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	689b      	ldr	r3, [r3, #8]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	609a      	str	r2, [r3, #8]
 800d4de:	e000      	b.n	800d4e2 <putc_bfd+0x66>
	if (i < 0) return;
 800d4e0:	bf00      	nop
}
 800d4e2:	3710      	adds	r7, #16
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd80      	pop	{r7, pc}

0800d4e8 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	685b      	ldr	r3, [r3, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	db16      	blt.n	800d526 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f103 010c 	add.w	r1, r3, #12
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685b      	ldr	r3, [r3, #4]
 800d506:	461a      	mov	r2, r3
 800d508:	f107 030c 	add.w	r3, r7, #12
 800d50c:	f7ff f9bf 	bl	800c88e <f_write>
 800d510:	4603      	mov	r3, r0
 800d512:	2b00      	cmp	r3, #0
 800d514:	d107      	bne.n	800d526 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	68fa      	ldr	r2, [r7, #12]
 800d51c:	4293      	cmp	r3, r2
 800d51e:	d102      	bne.n	800d526 <putc_flush+0x3e>
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	689b      	ldr	r3, [r3, #8]
 800d524:	e001      	b.n	800d52a <putc_flush+0x42>
	return EOF;
 800d526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3710      	adds	r7, #16
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}

0800d532 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d532:	b480      	push	{r7}
 800d534:	b083      	sub	sp, #12
 800d536:	af00      	add	r7, sp, #0
 800d538:	6078      	str	r0, [r7, #4]
 800d53a:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	683a      	ldr	r2, [r7, #0]
 800d540:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	2200      	movs	r2, #0
 800d546:	605a      	str	r2, [r3, #4]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	685a      	ldr	r2, [r3, #4]
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	609a      	str	r2, [r3, #8]
}
 800d550:	bf00      	nop
 800d552:	370c      	adds	r7, #12
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr

0800d55c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d55c:	b40e      	push	{r1, r2, r3}
 800d55e:	b580      	push	{r7, lr}
 800d560:	b0a7      	sub	sp, #156	; 0x9c
 800d562:	af00      	add	r7, sp, #0
 800d564:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d56a:	6879      	ldr	r1, [r7, #4]
 800d56c:	4618      	mov	r0, r3
 800d56e:	f7ff ffe0 	bl	800d532 <putc_init>

	va_start(arp, fmt);
 800d572:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d576:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d578:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d57c:	1c5a      	adds	r2, r3, #1
 800d57e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d582:	781b      	ldrb	r3, [r3, #0]
 800d584:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d588:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	f000 81f4 	beq.w	800d97a <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800d592:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d596:	2b25      	cmp	r3, #37	; 0x25
 800d598:	d008      	beq.n	800d5ac <f_printf+0x50>
			putc_bfd(&pb, c);
 800d59a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d59e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d5a2:	4611      	mov	r1, r2
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	f7ff ff69 	bl	800d47c <putc_bfd>
			continue;
 800d5aa:	e1e5      	b.n	800d978 <f_printf+0x41c>
		}
		w = f = 0;
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d5b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5bc:	1c5a      	adds	r2, r3, #1
 800d5be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d5c8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5cc:	2b30      	cmp	r3, #48	; 0x30
 800d5ce:	d10b      	bne.n	800d5e8 <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d5d0:	2301      	movs	r3, #1
 800d5d2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d5d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5da:	1c5a      	adds	r2, r3, #1
 800d5dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d5e0:	781b      	ldrb	r3, [r3, #0]
 800d5e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d5e6:	e024      	b.n	800d632 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d5e8:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d5ec:	2b2d      	cmp	r3, #45	; 0x2d
 800d5ee:	d120      	bne.n	800d632 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d5f0:	2302      	movs	r3, #2
 800d5f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d5f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d5fa:	1c5a      	adds	r2, r3, #1
 800d5fc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d606:	e014      	b.n	800d632 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d608:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d60c:	4613      	mov	r3, r2
 800d60e:	009b      	lsls	r3, r3, #2
 800d610:	4413      	add	r3, r2
 800d612:	005b      	lsls	r3, r3, #1
 800d614:	461a      	mov	r2, r3
 800d616:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d61a:	4413      	add	r3, r2
 800d61c:	3b30      	subs	r3, #48	; 0x30
 800d61e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d622:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d626:	1c5a      	adds	r2, r3, #1
 800d628:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d632:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d636:	2b2f      	cmp	r3, #47	; 0x2f
 800d638:	d903      	bls.n	800d642 <f_printf+0xe6>
 800d63a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d63e:	2b39      	cmp	r3, #57	; 0x39
 800d640:	d9e2      	bls.n	800d608 <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d642:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d646:	2b6c      	cmp	r3, #108	; 0x6c
 800d648:	d003      	beq.n	800d652 <f_printf+0xf6>
 800d64a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d64e:	2b4c      	cmp	r3, #76	; 0x4c
 800d650:	d10d      	bne.n	800d66e <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d652:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d656:	f043 0304 	orr.w	r3, r3, #4
 800d65a:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d65e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d662:	1c5a      	adds	r2, r3, #1
 800d664:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d668:	781b      	ldrb	r3, [r3, #0]
 800d66a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d66e:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d672:	2b00      	cmp	r3, #0
 800d674:	f000 8183 	beq.w	800d97e <f_printf+0x422>
		d = c;
 800d678:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d67c:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d680:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d684:	2b60      	cmp	r3, #96	; 0x60
 800d686:	d908      	bls.n	800d69a <f_printf+0x13e>
 800d688:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d68c:	2b7a      	cmp	r3, #122	; 0x7a
 800d68e:	d804      	bhi.n	800d69a <f_printf+0x13e>
 800d690:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d694:	3b20      	subs	r3, #32
 800d696:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d69a:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d69e:	3b42      	subs	r3, #66	; 0x42
 800d6a0:	2b16      	cmp	r3, #22
 800d6a2:	f200 8098 	bhi.w	800d7d6 <f_printf+0x27a>
 800d6a6:	a201      	add	r2, pc, #4	; (adr r2, 800d6ac <f_printf+0x150>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d7b7 	.word	0x0800d7b7
 800d6b0:	0800d79f 	.word	0x0800d79f
 800d6b4:	0800d7c7 	.word	0x0800d7c7
 800d6b8:	0800d7d7 	.word	0x0800d7d7
 800d6bc:	0800d7d7 	.word	0x0800d7d7
 800d6c0:	0800d7d7 	.word	0x0800d7d7
 800d6c4:	0800d7d7 	.word	0x0800d7d7
 800d6c8:	0800d7d7 	.word	0x0800d7d7
 800d6cc:	0800d7d7 	.word	0x0800d7d7
 800d6d0:	0800d7d7 	.word	0x0800d7d7
 800d6d4:	0800d7d7 	.word	0x0800d7d7
 800d6d8:	0800d7d7 	.word	0x0800d7d7
 800d6dc:	0800d7d7 	.word	0x0800d7d7
 800d6e0:	0800d7bf 	.word	0x0800d7bf
 800d6e4:	0800d7d7 	.word	0x0800d7d7
 800d6e8:	0800d7d7 	.word	0x0800d7d7
 800d6ec:	0800d7d7 	.word	0x0800d7d7
 800d6f0:	0800d709 	.word	0x0800d709
 800d6f4:	0800d7d7 	.word	0x0800d7d7
 800d6f8:	0800d7c7 	.word	0x0800d7c7
 800d6fc:	0800d7d7 	.word	0x0800d7d7
 800d700:	0800d7d7 	.word	0x0800d7d7
 800d704:	0800d7cf 	.word	0x0800d7cf
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d70a:	1d1a      	adds	r2, r3, #4
 800d70c:	67ba      	str	r2, [r7, #120]	; 0x78
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d712:	2300      	movs	r3, #0
 800d714:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d718:	e004      	b.n	800d724 <f_printf+0x1c8>
 800d71a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d71e:	3301      	adds	r3, #1
 800d720:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d724:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d72a:	4413      	add	r3, r2
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d1f3      	bne.n	800d71a <f_printf+0x1be>
			if (!(f & 2)) {
 800d732:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d736:	f003 0302 	and.w	r3, r3, #2
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d11a      	bne.n	800d774 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d73e:	e005      	b.n	800d74c <f_printf+0x1f0>
 800d740:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d744:	2120      	movs	r1, #32
 800d746:	4618      	mov	r0, r3
 800d748:	f7ff fe98 	bl	800d47c <putc_bfd>
 800d74c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d750:	1c5a      	adds	r2, r3, #1
 800d752:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d756:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d75a:	429a      	cmp	r2, r3
 800d75c:	d8f0      	bhi.n	800d740 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d75e:	e009      	b.n	800d774 <f_printf+0x218>
 800d760:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d766:	781a      	ldrb	r2, [r3, #0]
 800d768:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d76c:	4611      	mov	r1, r2
 800d76e:	4618      	mov	r0, r3
 800d770:	f7ff fe84 	bl	800d47c <putc_bfd>
 800d774:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d1f1      	bne.n	800d760 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d77c:	e005      	b.n	800d78a <f_printf+0x22e>
 800d77e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d782:	2120      	movs	r1, #32
 800d784:	4618      	mov	r0, r3
 800d786:	f7ff fe79 	bl	800d47c <putc_bfd>
 800d78a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d78e:	1c5a      	adds	r2, r3, #1
 800d790:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d794:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d798:	429a      	cmp	r2, r3
 800d79a:	d8f0      	bhi.n	800d77e <f_printf+0x222>
			continue;
 800d79c:	e0ec      	b.n	800d978 <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d79e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7a0:	1d1a      	adds	r2, r3, #4
 800d7a2:	67ba      	str	r2, [r7, #120]	; 0x78
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	b2da      	uxtb	r2, r3
 800d7a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7ac:	4611      	mov	r1, r2
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	f7ff fe64 	bl	800d47c <putc_bfd>
 800d7b4:	e0e0      	b.n	800d978 <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800d7b6:	2302      	movs	r3, #2
 800d7b8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d7bc:	e014      	b.n	800d7e8 <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d7be:	2308      	movs	r3, #8
 800d7c0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d7c4:	e010      	b.n	800d7e8 <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d7c6:	230a      	movs	r3, #10
 800d7c8:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d7cc:	e00c      	b.n	800d7e8 <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d7ce:	2310      	movs	r3, #16
 800d7d0:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d7d4:	e008      	b.n	800d7e8 <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d7d6:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d7da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d7de:	4611      	mov	r1, r2
 800d7e0:	4618      	mov	r0, r3
 800d7e2:	f7ff fe4b 	bl	800d47c <putc_bfd>
 800d7e6:	e0c7      	b.n	800d978 <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d7e8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d7ec:	f003 0304 	and.w	r3, r3, #4
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d004      	beq.n	800d7fe <f_printf+0x2a2>
 800d7f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d7f6:	1d1a      	adds	r2, r3, #4
 800d7f8:	67ba      	str	r2, [r7, #120]	; 0x78
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	e00c      	b.n	800d818 <f_printf+0x2bc>
 800d7fe:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d802:	2b44      	cmp	r3, #68	; 0x44
 800d804:	d104      	bne.n	800d810 <f_printf+0x2b4>
 800d806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d808:	1d1a      	adds	r2, r3, #4
 800d80a:	67ba      	str	r2, [r7, #120]	; 0x78
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	e003      	b.n	800d818 <f_printf+0x2bc>
 800d810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d812:	1d1a      	adds	r2, r3, #4
 800d814:	67ba      	str	r2, [r7, #120]	; 0x78
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d81c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d820:	2b44      	cmp	r3, #68	; 0x44
 800d822:	d10e      	bne.n	800d842 <f_printf+0x2e6>
 800d824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d828:	2b00      	cmp	r3, #0
 800d82a:	da0a      	bge.n	800d842 <f_printf+0x2e6>
			v = 0 - v;
 800d82c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d830:	425b      	negs	r3, r3
 800d832:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d836:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d83a:	f043 0308 	orr.w	r3, r3, #8
 800d83e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d842:	2300      	movs	r3, #0
 800d844:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d848:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d84c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d850:	fbb3 f1f2 	udiv	r1, r3, r2
 800d854:	fb02 f201 	mul.w	r2, r2, r1
 800d858:	1a9b      	subs	r3, r3, r2
 800d85a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d85e:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d862:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d866:	fbb2 f3f3 	udiv	r3, r2, r3
 800d86a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d86e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d872:	2b09      	cmp	r3, #9
 800d874:	d90b      	bls.n	800d88e <f_printf+0x332>
 800d876:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d87a:	2b78      	cmp	r3, #120	; 0x78
 800d87c:	d101      	bne.n	800d882 <f_printf+0x326>
 800d87e:	2227      	movs	r2, #39	; 0x27
 800d880:	e000      	b.n	800d884 <f_printf+0x328>
 800d882:	2207      	movs	r2, #7
 800d884:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d888:	4413      	add	r3, r2
 800d88a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d88e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d892:	1c5a      	adds	r2, r3, #1
 800d894:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d898:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d89c:	3230      	adds	r2, #48	; 0x30
 800d89e:	b2d2      	uxtb	r2, r2
 800d8a0:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800d8a4:	440b      	add	r3, r1
 800d8a6:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d8aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d003      	beq.n	800d8ba <f_printf+0x35e>
 800d8b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8b6:	2b1f      	cmp	r3, #31
 800d8b8:	d9c6      	bls.n	800d848 <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d8ba:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d8be:	f003 0308 	and.w	r3, r3, #8
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d00a      	beq.n	800d8dc <f_printf+0x380>
 800d8c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8ca:	1c5a      	adds	r2, r3, #1
 800d8cc:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d8d0:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d8d4:	4413      	add	r3, r2
 800d8d6:	222d      	movs	r2, #45	; 0x2d
 800d8d8:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d8dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d8e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d8e4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d8e8:	f003 0301 	and.w	r3, r3, #1
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d001      	beq.n	800d8f4 <f_printf+0x398>
 800d8f0:	2330      	movs	r3, #48	; 0x30
 800d8f2:	e000      	b.n	800d8f6 <f_printf+0x39a>
 800d8f4:	2320      	movs	r3, #32
 800d8f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d8fa:	e007      	b.n	800d90c <f_printf+0x3b0>
 800d8fc:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fdb8 	bl	800d47c <putc_bfd>
 800d90c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d910:	f003 0302 	and.w	r3, r3, #2
 800d914:	2b00      	cmp	r3, #0
 800d916:	d108      	bne.n	800d92a <f_printf+0x3ce>
 800d918:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d91c:	1c5a      	adds	r2, r3, #1
 800d91e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d922:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d926:	429a      	cmp	r2, r3
 800d928:	d8e8      	bhi.n	800d8fc <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800d92a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d92e:	3b01      	subs	r3, #1
 800d930:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d934:	f107 020c 	add.w	r2, r7, #12
 800d938:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d93c:	4413      	add	r3, r2
 800d93e:	781a      	ldrb	r2, [r3, #0]
 800d940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d944:	4611      	mov	r1, r2
 800d946:	4618      	mov	r0, r3
 800d948:	f7ff fd98 	bl	800d47c <putc_bfd>
		} while (i);
 800d94c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d950:	2b00      	cmp	r3, #0
 800d952:	d1ea      	bne.n	800d92a <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800d954:	e007      	b.n	800d966 <f_printf+0x40a>
 800d956:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d95a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d95e:	4611      	mov	r1, r2
 800d960:	4618      	mov	r0, r3
 800d962:	f7ff fd8b 	bl	800d47c <putc_bfd>
 800d966:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d96a:	1c5a      	adds	r2, r3, #1
 800d96c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d970:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d974:	429a      	cmp	r2, r3
 800d976:	d8ee      	bhi.n	800d956 <f_printf+0x3fa>
		c = *fmt++;
 800d978:	e5fe      	b.n	800d578 <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d97a:	bf00      	nop
 800d97c:	e000      	b.n	800d980 <f_printf+0x424>
		if (!c) break;
 800d97e:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d980:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d984:	4618      	mov	r0, r3
 800d986:	f7ff fdaf 	bl	800d4e8 <putc_flush>
 800d98a:	4603      	mov	r3, r0
}
 800d98c:	4618      	mov	r0, r3
 800d98e:	379c      	adds	r7, #156	; 0x9c
 800d990:	46bd      	mov	sp, r7
 800d992:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d996:	b003      	add	sp, #12
 800d998:	4770      	bx	lr
 800d99a:	bf00      	nop

0800d99c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d99c:	b480      	push	{r7}
 800d99e:	b087      	sub	sp, #28
 800d9a0:	af00      	add	r7, sp, #0
 800d9a2:	60f8      	str	r0, [r7, #12]
 800d9a4:	60b9      	str	r1, [r7, #8]
 800d9a6:	4613      	mov	r3, r2
 800d9a8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d9b2:	4b1f      	ldr	r3, [pc, #124]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9b4:	7b9b      	ldrb	r3, [r3, #14]
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b01      	cmp	r3, #1
 800d9ba:	d831      	bhi.n	800da20 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d9bc:	4b1c      	ldr	r3, [pc, #112]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9be:	7b9b      	ldrb	r3, [r3, #14]
 800d9c0:	b2db      	uxtb	r3, r3
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	4b1a      	ldr	r3, [pc, #104]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9c6:	2100      	movs	r1, #0
 800d9c8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d9ca:	4b19      	ldr	r3, [pc, #100]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9cc:	7b9b      	ldrb	r3, [r3, #14]
 800d9ce:	b2db      	uxtb	r3, r3
 800d9d0:	4a17      	ldr	r2, [pc, #92]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9d2:	009b      	lsls	r3, r3, #2
 800d9d4:	4413      	add	r3, r2
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d9da:	4b15      	ldr	r3, [pc, #84]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9dc:	7b9b      	ldrb	r3, [r3, #14]
 800d9de:	b2db      	uxtb	r3, r3
 800d9e0:	461a      	mov	r2, r3
 800d9e2:	4b13      	ldr	r3, [pc, #76]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9e4:	4413      	add	r3, r2
 800d9e6:	79fa      	ldrb	r2, [r7, #7]
 800d9e8:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d9ea:	4b11      	ldr	r3, [pc, #68]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9ec:	7b9b      	ldrb	r3, [r3, #14]
 800d9ee:	b2db      	uxtb	r3, r3
 800d9f0:	1c5a      	adds	r2, r3, #1
 800d9f2:	b2d1      	uxtb	r1, r2
 800d9f4:	4a0e      	ldr	r2, [pc, #56]	; (800da30 <FATFS_LinkDriverEx+0x94>)
 800d9f6:	7391      	strb	r1, [r2, #14]
 800d9f8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d9fa:	7dbb      	ldrb	r3, [r7, #22]
 800d9fc:	3330      	adds	r3, #48	; 0x30
 800d9fe:	b2da      	uxtb	r2, r3
 800da00:	68bb      	ldr	r3, [r7, #8]
 800da02:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	3301      	adds	r3, #1
 800da08:	223a      	movs	r2, #58	; 0x3a
 800da0a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	3302      	adds	r3, #2
 800da10:	222f      	movs	r2, #47	; 0x2f
 800da12:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	3303      	adds	r3, #3
 800da18:	2200      	movs	r2, #0
 800da1a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800da1c:	2300      	movs	r3, #0
 800da1e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
}
 800da22:	4618      	mov	r0, r3
 800da24:	371c      	adds	r7, #28
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
 800da2e:	bf00      	nop
 800da30:	20006c84 	.word	0x20006c84

0800da34 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
 800da3c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800da3e:	2200      	movs	r2, #0
 800da40:	6839      	ldr	r1, [r7, #0]
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f7ff ffaa 	bl	800d99c <FATFS_LinkDriverEx>
 800da48:	4603      	mov	r3, r0
}
 800da4a:	4618      	mov	r0, r3
 800da4c:	3708      	adds	r7, #8
 800da4e:	46bd      	mov	sp, r7
 800da50:	bd80      	pop	{r7, pc}
	...

0800da54 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	4603      	mov	r3, r0
 800da5c:	6039      	str	r1, [r7, #0]
 800da5e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800da60:	88fb      	ldrh	r3, [r7, #6]
 800da62:	2b7f      	cmp	r3, #127	; 0x7f
 800da64:	d802      	bhi.n	800da6c <ff_convert+0x18>
		c = chr;
 800da66:	88fb      	ldrh	r3, [r7, #6]
 800da68:	81fb      	strh	r3, [r7, #14]
 800da6a:	e025      	b.n	800dab8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800da6c:	683b      	ldr	r3, [r7, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d00b      	beq.n	800da8a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800da72:	88fb      	ldrh	r3, [r7, #6]
 800da74:	2bff      	cmp	r3, #255	; 0xff
 800da76:	d805      	bhi.n	800da84 <ff_convert+0x30>
 800da78:	88fb      	ldrh	r3, [r7, #6]
 800da7a:	3b80      	subs	r3, #128	; 0x80
 800da7c:	4a12      	ldr	r2, [pc, #72]	; (800dac8 <ff_convert+0x74>)
 800da7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da82:	e000      	b.n	800da86 <ff_convert+0x32>
 800da84:	2300      	movs	r3, #0
 800da86:	81fb      	strh	r3, [r7, #14]
 800da88:	e016      	b.n	800dab8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800da8a:	2300      	movs	r3, #0
 800da8c:	81fb      	strh	r3, [r7, #14]
 800da8e:	e009      	b.n	800daa4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800da90:	89fb      	ldrh	r3, [r7, #14]
 800da92:	4a0d      	ldr	r2, [pc, #52]	; (800dac8 <ff_convert+0x74>)
 800da94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800da98:	88fa      	ldrh	r2, [r7, #6]
 800da9a:	429a      	cmp	r2, r3
 800da9c:	d006      	beq.n	800daac <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800da9e:	89fb      	ldrh	r3, [r7, #14]
 800daa0:	3301      	adds	r3, #1
 800daa2:	81fb      	strh	r3, [r7, #14]
 800daa4:	89fb      	ldrh	r3, [r7, #14]
 800daa6:	2b7f      	cmp	r3, #127	; 0x7f
 800daa8:	d9f2      	bls.n	800da90 <ff_convert+0x3c>
 800daaa:	e000      	b.n	800daae <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800daac:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800daae:	89fb      	ldrh	r3, [r7, #14]
 800dab0:	3380      	adds	r3, #128	; 0x80
 800dab2:	b29b      	uxth	r3, r3
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dab8:	89fb      	ldrh	r3, [r7, #14]
}
 800daba:	4618      	mov	r0, r3
 800dabc:	3714      	adds	r7, #20
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr
 800dac6:	bf00      	nop
 800dac8:	080220f4 	.word	0x080220f4

0800dacc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dacc:	b480      	push	{r7}
 800dace:	b087      	sub	sp, #28
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	4603      	mov	r3, r0
 800dad4:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dad6:	88fb      	ldrh	r3, [r7, #6]
 800dad8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dadc:	d201      	bcs.n	800dae2 <ff_wtoupper+0x16>
 800dade:	4b3e      	ldr	r3, [pc, #248]	; (800dbd8 <ff_wtoupper+0x10c>)
 800dae0:	e000      	b.n	800dae4 <ff_wtoupper+0x18>
 800dae2:	4b3e      	ldr	r3, [pc, #248]	; (800dbdc <ff_wtoupper+0x110>)
 800dae4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dae6:	697b      	ldr	r3, [r7, #20]
 800dae8:	1c9a      	adds	r2, r3, #2
 800daea:	617a      	str	r2, [r7, #20]
 800daec:	881b      	ldrh	r3, [r3, #0]
 800daee:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800daf0:	8a7b      	ldrh	r3, [r7, #18]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d068      	beq.n	800dbc8 <ff_wtoupper+0xfc>
 800daf6:	88fa      	ldrh	r2, [r7, #6]
 800daf8:	8a7b      	ldrh	r3, [r7, #18]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d364      	bcc.n	800dbc8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dafe:	697b      	ldr	r3, [r7, #20]
 800db00:	1c9a      	adds	r2, r3, #2
 800db02:	617a      	str	r2, [r7, #20]
 800db04:	881b      	ldrh	r3, [r3, #0]
 800db06:	823b      	strh	r3, [r7, #16]
 800db08:	8a3b      	ldrh	r3, [r7, #16]
 800db0a:	0a1b      	lsrs	r3, r3, #8
 800db0c:	81fb      	strh	r3, [r7, #14]
 800db0e:	8a3b      	ldrh	r3, [r7, #16]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800db14:	88fa      	ldrh	r2, [r7, #6]
 800db16:	8a79      	ldrh	r1, [r7, #18]
 800db18:	8a3b      	ldrh	r3, [r7, #16]
 800db1a:	440b      	add	r3, r1
 800db1c:	429a      	cmp	r2, r3
 800db1e:	da49      	bge.n	800dbb4 <ff_wtoupper+0xe8>
			switch (cmd) {
 800db20:	89fb      	ldrh	r3, [r7, #14]
 800db22:	2b08      	cmp	r3, #8
 800db24:	d84f      	bhi.n	800dbc6 <ff_wtoupper+0xfa>
 800db26:	a201      	add	r2, pc, #4	; (adr r2, 800db2c <ff_wtoupper+0x60>)
 800db28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db2c:	0800db51 	.word	0x0800db51
 800db30:	0800db63 	.word	0x0800db63
 800db34:	0800db79 	.word	0x0800db79
 800db38:	0800db81 	.word	0x0800db81
 800db3c:	0800db89 	.word	0x0800db89
 800db40:	0800db91 	.word	0x0800db91
 800db44:	0800db99 	.word	0x0800db99
 800db48:	0800dba1 	.word	0x0800dba1
 800db4c:	0800dba9 	.word	0x0800dba9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800db50:	88fa      	ldrh	r2, [r7, #6]
 800db52:	8a7b      	ldrh	r3, [r7, #18]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	4413      	add	r3, r2
 800db5c:	881b      	ldrh	r3, [r3, #0]
 800db5e:	80fb      	strh	r3, [r7, #6]
 800db60:	e027      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800db62:	88fa      	ldrh	r2, [r7, #6]
 800db64:	8a7b      	ldrh	r3, [r7, #18]
 800db66:	1ad3      	subs	r3, r2, r3
 800db68:	b29b      	uxth	r3, r3
 800db6a:	f003 0301 	and.w	r3, r3, #1
 800db6e:	b29b      	uxth	r3, r3
 800db70:	88fa      	ldrh	r2, [r7, #6]
 800db72:	1ad3      	subs	r3, r2, r3
 800db74:	80fb      	strh	r3, [r7, #6]
 800db76:	e01c      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800db78:	88fb      	ldrh	r3, [r7, #6]
 800db7a:	3b10      	subs	r3, #16
 800db7c:	80fb      	strh	r3, [r7, #6]
 800db7e:	e018      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800db80:	88fb      	ldrh	r3, [r7, #6]
 800db82:	3b20      	subs	r3, #32
 800db84:	80fb      	strh	r3, [r7, #6]
 800db86:	e014      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800db88:	88fb      	ldrh	r3, [r7, #6]
 800db8a:	3b30      	subs	r3, #48	; 0x30
 800db8c:	80fb      	strh	r3, [r7, #6]
 800db8e:	e010      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800db90:	88fb      	ldrh	r3, [r7, #6]
 800db92:	3b1a      	subs	r3, #26
 800db94:	80fb      	strh	r3, [r7, #6]
 800db96:	e00c      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800db98:	88fb      	ldrh	r3, [r7, #6]
 800db9a:	3308      	adds	r3, #8
 800db9c:	80fb      	strh	r3, [r7, #6]
 800db9e:	e008      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800dba0:	88fb      	ldrh	r3, [r7, #6]
 800dba2:	3b50      	subs	r3, #80	; 0x50
 800dba4:	80fb      	strh	r3, [r7, #6]
 800dba6:	e004      	b.n	800dbb2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800dba8:	88fb      	ldrh	r3, [r7, #6]
 800dbaa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800dbae:	80fb      	strh	r3, [r7, #6]
 800dbb0:	bf00      	nop
			}
			break;
 800dbb2:	e008      	b.n	800dbc6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800dbb4:	89fb      	ldrh	r3, [r7, #14]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d195      	bne.n	800dae6 <ff_wtoupper+0x1a>
 800dbba:	8a3b      	ldrh	r3, [r7, #16]
 800dbbc:	005b      	lsls	r3, r3, #1
 800dbbe:	697a      	ldr	r2, [r7, #20]
 800dbc0:	4413      	add	r3, r2
 800dbc2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dbc4:	e78f      	b.n	800dae6 <ff_wtoupper+0x1a>
			break;
 800dbc6:	bf00      	nop
	}

	return chr;
 800dbc8:	88fb      	ldrh	r3, [r7, #6]
}
 800dbca:	4618      	mov	r0, r3
 800dbcc:	371c      	adds	r7, #28
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbd4:	4770      	bx	lr
 800dbd6:	bf00      	nop
 800dbd8:	080221f4 	.word	0x080221f4
 800dbdc:	080223e8 	.word	0x080223e8

0800dbe0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800dbe0:	b580      	push	{r7, lr}
 800dbe2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800dbe4:	4b0e      	ldr	r3, [pc, #56]	; (800dc20 <HAL_Init+0x40>)
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	4a0d      	ldr	r2, [pc, #52]	; (800dc20 <HAL_Init+0x40>)
 800dbea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800dbee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800dbf0:	4b0b      	ldr	r3, [pc, #44]	; (800dc20 <HAL_Init+0x40>)
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	4a0a      	ldr	r2, [pc, #40]	; (800dc20 <HAL_Init+0x40>)
 800dbf6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800dbfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800dbfc:	4b08      	ldr	r3, [pc, #32]	; (800dc20 <HAL_Init+0x40>)
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	4a07      	ldr	r2, [pc, #28]	; (800dc20 <HAL_Init+0x40>)
 800dc02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800dc06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800dc08:	2003      	movs	r0, #3
 800dc0a:	f000 f94f 	bl	800deac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800dc0e:	2000      	movs	r0, #0
 800dc10:	f000 f808 	bl	800dc24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800dc14:	f7f3 faa2 	bl	800115c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	bd80      	pop	{r7, pc}
 800dc1e:	bf00      	nop
 800dc20:	40023c00 	.word	0x40023c00

0800dc24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b082      	sub	sp, #8
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800dc2c:	4b12      	ldr	r3, [pc, #72]	; (800dc78 <HAL_InitTick+0x54>)
 800dc2e:	681a      	ldr	r2, [r3, #0]
 800dc30:	4b12      	ldr	r3, [pc, #72]	; (800dc7c <HAL_InitTick+0x58>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	4619      	mov	r1, r3
 800dc36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800dc3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800dc3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800dc42:	4618      	mov	r0, r3
 800dc44:	f000 f967 	bl	800df16 <HAL_SYSTICK_Config>
 800dc48:	4603      	mov	r3, r0
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d001      	beq.n	800dc52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800dc4e:	2301      	movs	r3, #1
 800dc50:	e00e      	b.n	800dc70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2b0f      	cmp	r3, #15
 800dc56:	d80a      	bhi.n	800dc6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800dc58:	2200      	movs	r2, #0
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc60:	f000 f92f 	bl	800dec2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800dc64:	4a06      	ldr	r2, [pc, #24]	; (800dc80 <HAL_InitTick+0x5c>)
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800dc6a:	2300      	movs	r3, #0
 800dc6c:	e000      	b.n	800dc70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3708      	adds	r7, #8
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	20000000 	.word	0x20000000
 800dc7c:	20000370 	.word	0x20000370
 800dc80:	2000036c 	.word	0x2000036c

0800dc84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800dc84:	b480      	push	{r7}
 800dc86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800dc88:	4b06      	ldr	r3, [pc, #24]	; (800dca4 <HAL_IncTick+0x20>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b06      	ldr	r3, [pc, #24]	; (800dca8 <HAL_IncTick+0x24>)
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	4413      	add	r3, r2
 800dc94:	4a04      	ldr	r2, [pc, #16]	; (800dca8 <HAL_IncTick+0x24>)
 800dc96:	6013      	str	r3, [r2, #0]
}
 800dc98:	bf00      	nop
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca0:	4770      	bx	lr
 800dca2:	bf00      	nop
 800dca4:	20000370 	.word	0x20000370
 800dca8:	200087fc 	.word	0x200087fc

0800dcac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800dcac:	b480      	push	{r7}
 800dcae:	af00      	add	r7, sp, #0
  return uwTick;
 800dcb0:	4b03      	ldr	r3, [pc, #12]	; (800dcc0 <HAL_GetTick+0x14>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
}
 800dcb4:	4618      	mov	r0, r3
 800dcb6:	46bd      	mov	sp, r7
 800dcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop
 800dcc0:	200087fc 	.word	0x200087fc

0800dcc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800dcc4:	b580      	push	{r7, lr}
 800dcc6:	b084      	sub	sp, #16
 800dcc8:	af00      	add	r7, sp, #0
 800dcca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800dccc:	f7ff ffee 	bl	800dcac <HAL_GetTick>
 800dcd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dcdc:	d005      	beq.n	800dcea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800dcde:	4b0a      	ldr	r3, [pc, #40]	; (800dd08 <HAL_Delay+0x44>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	461a      	mov	r2, r3
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	4413      	add	r3, r2
 800dce8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800dcea:	bf00      	nop
 800dcec:	f7ff ffde 	bl	800dcac <HAL_GetTick>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	1ad3      	subs	r3, r2, r3
 800dcf6:	68fa      	ldr	r2, [r7, #12]
 800dcf8:	429a      	cmp	r2, r3
 800dcfa:	d8f7      	bhi.n	800dcec <HAL_Delay+0x28>
  {
  }
}
 800dcfc:	bf00      	nop
 800dcfe:	bf00      	nop
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}
 800dd06:	bf00      	nop
 800dd08:	20000370 	.word	0x20000370

0800dd0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b085      	sub	sp, #20
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f003 0307 	and.w	r3, r3, #7
 800dd1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dd1c:	4b0c      	ldr	r3, [pc, #48]	; (800dd50 <__NVIC_SetPriorityGrouping+0x44>)
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dd22:	68ba      	ldr	r2, [r7, #8]
 800dd24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dd28:	4013      	ands	r3, r2
 800dd2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dd34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dd38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dd3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dd3e:	4a04      	ldr	r2, [pc, #16]	; (800dd50 <__NVIC_SetPriorityGrouping+0x44>)
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	60d3      	str	r3, [r2, #12]
}
 800dd44:	bf00      	nop
 800dd46:	3714      	adds	r7, #20
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	e000ed00 	.word	0xe000ed00

0800dd54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd54:	b480      	push	{r7}
 800dd56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd58:	4b04      	ldr	r3, [pc, #16]	; (800dd6c <__NVIC_GetPriorityGrouping+0x18>)
 800dd5a:	68db      	ldr	r3, [r3, #12]
 800dd5c:	0a1b      	lsrs	r3, r3, #8
 800dd5e:	f003 0307 	and.w	r3, r3, #7
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	46bd      	mov	sp, r7
 800dd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd6a:	4770      	bx	lr
 800dd6c:	e000ed00 	.word	0xe000ed00

0800dd70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd70:	b480      	push	{r7}
 800dd72:	b083      	sub	sp, #12
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	4603      	mov	r3, r0
 800dd78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	db0b      	blt.n	800dd9a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd82:	79fb      	ldrb	r3, [r7, #7]
 800dd84:	f003 021f 	and.w	r2, r3, #31
 800dd88:	4907      	ldr	r1, [pc, #28]	; (800dda8 <__NVIC_EnableIRQ+0x38>)
 800dd8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd8e:	095b      	lsrs	r3, r3, #5
 800dd90:	2001      	movs	r0, #1
 800dd92:	fa00 f202 	lsl.w	r2, r0, r2
 800dd96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800dd9a:	bf00      	nop
 800dd9c:	370c      	adds	r7, #12
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda4:	4770      	bx	lr
 800dda6:	bf00      	nop
 800dda8:	e000e100 	.word	0xe000e100

0800ddac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ddac:	b480      	push	{r7}
 800ddae:	b083      	sub	sp, #12
 800ddb0:	af00      	add	r7, sp, #0
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	6039      	str	r1, [r7, #0]
 800ddb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ddb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	db0a      	blt.n	800ddd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddc0:	683b      	ldr	r3, [r7, #0]
 800ddc2:	b2da      	uxtb	r2, r3
 800ddc4:	490c      	ldr	r1, [pc, #48]	; (800ddf8 <__NVIC_SetPriority+0x4c>)
 800ddc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddca:	0112      	lsls	r2, r2, #4
 800ddcc:	b2d2      	uxtb	r2, r2
 800ddce:	440b      	add	r3, r1
 800ddd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800ddd4:	e00a      	b.n	800ddec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	b2da      	uxtb	r2, r3
 800ddda:	4908      	ldr	r1, [pc, #32]	; (800ddfc <__NVIC_SetPriority+0x50>)
 800dddc:	79fb      	ldrb	r3, [r7, #7]
 800ddde:	f003 030f 	and.w	r3, r3, #15
 800dde2:	3b04      	subs	r3, #4
 800dde4:	0112      	lsls	r2, r2, #4
 800dde6:	b2d2      	uxtb	r2, r2
 800dde8:	440b      	add	r3, r1
 800ddea:	761a      	strb	r2, [r3, #24]
}
 800ddec:	bf00      	nop
 800ddee:	370c      	adds	r7, #12
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr
 800ddf8:	e000e100 	.word	0xe000e100
 800ddfc:	e000ed00 	.word	0xe000ed00

0800de00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de00:	b480      	push	{r7}
 800de02:	b089      	sub	sp, #36	; 0x24
 800de04:	af00      	add	r7, sp, #0
 800de06:	60f8      	str	r0, [r7, #12]
 800de08:	60b9      	str	r1, [r7, #8]
 800de0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	f003 0307 	and.w	r3, r3, #7
 800de12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	f1c3 0307 	rsb	r3, r3, #7
 800de1a:	2b04      	cmp	r3, #4
 800de1c:	bf28      	it	cs
 800de1e:	2304      	movcs	r3, #4
 800de20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de22:	69fb      	ldr	r3, [r7, #28]
 800de24:	3304      	adds	r3, #4
 800de26:	2b06      	cmp	r3, #6
 800de28:	d902      	bls.n	800de30 <NVIC_EncodePriority+0x30>
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	3b03      	subs	r3, #3
 800de2e:	e000      	b.n	800de32 <NVIC_EncodePriority+0x32>
 800de30:	2300      	movs	r3, #0
 800de32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de34:	f04f 32ff 	mov.w	r2, #4294967295
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	fa02 f303 	lsl.w	r3, r2, r3
 800de3e:	43da      	mvns	r2, r3
 800de40:	68bb      	ldr	r3, [r7, #8]
 800de42:	401a      	ands	r2, r3
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800de48:	f04f 31ff 	mov.w	r1, #4294967295
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	fa01 f303 	lsl.w	r3, r1, r3
 800de52:	43d9      	mvns	r1, r3
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de58:	4313      	orrs	r3, r2
         );
}
 800de5a:	4618      	mov	r0, r3
 800de5c:	3724      	adds	r7, #36	; 0x24
 800de5e:	46bd      	mov	sp, r7
 800de60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de64:	4770      	bx	lr
	...

0800de68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	3b01      	subs	r3, #1
 800de74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de78:	d301      	bcc.n	800de7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de7a:	2301      	movs	r3, #1
 800de7c:	e00f      	b.n	800de9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de7e:	4a0a      	ldr	r2, [pc, #40]	; (800dea8 <SysTick_Config+0x40>)
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	3b01      	subs	r3, #1
 800de84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800de86:	210f      	movs	r1, #15
 800de88:	f04f 30ff 	mov.w	r0, #4294967295
 800de8c:	f7ff ff8e 	bl	800ddac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800de90:	4b05      	ldr	r3, [pc, #20]	; (800dea8 <SysTick_Config+0x40>)
 800de92:	2200      	movs	r2, #0
 800de94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800de96:	4b04      	ldr	r3, [pc, #16]	; (800dea8 <SysTick_Config+0x40>)
 800de98:	2207      	movs	r2, #7
 800de9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800de9c:	2300      	movs	r3, #0
}
 800de9e:	4618      	mov	r0, r3
 800dea0:	3708      	adds	r7, #8
 800dea2:	46bd      	mov	sp, r7
 800dea4:	bd80      	pop	{r7, pc}
 800dea6:	bf00      	nop
 800dea8:	e000e010 	.word	0xe000e010

0800deac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f7ff ff29 	bl	800dd0c <__NVIC_SetPriorityGrouping>
}
 800deba:	bf00      	nop
 800debc:	3708      	adds	r7, #8
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800dec2:	b580      	push	{r7, lr}
 800dec4:	b086      	sub	sp, #24
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	4603      	mov	r3, r0
 800deca:	60b9      	str	r1, [r7, #8]
 800decc:	607a      	str	r2, [r7, #4]
 800dece:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ded0:	2300      	movs	r3, #0
 800ded2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800ded4:	f7ff ff3e 	bl	800dd54 <__NVIC_GetPriorityGrouping>
 800ded8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800deda:	687a      	ldr	r2, [r7, #4]
 800dedc:	68b9      	ldr	r1, [r7, #8]
 800dede:	6978      	ldr	r0, [r7, #20]
 800dee0:	f7ff ff8e 	bl	800de00 <NVIC_EncodePriority>
 800dee4:	4602      	mov	r2, r0
 800dee6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800deea:	4611      	mov	r1, r2
 800deec:	4618      	mov	r0, r3
 800deee:	f7ff ff5d 	bl	800ddac <__NVIC_SetPriority>
}
 800def2:	bf00      	nop
 800def4:	3718      	adds	r7, #24
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}

0800defa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800defa:	b580      	push	{r7, lr}
 800defc:	b082      	sub	sp, #8
 800defe:	af00      	add	r7, sp, #0
 800df00:	4603      	mov	r3, r0
 800df02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df08:	4618      	mov	r0, r3
 800df0a:	f7ff ff31 	bl	800dd70 <__NVIC_EnableIRQ>
}
 800df0e:	bf00      	nop
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f7ff ffa2 	bl	800de68 <SysTick_Config>
 800df24:	4603      	mov	r3, r0
}
 800df26:	4618      	mov	r0, r3
 800df28:	3708      	adds	r7, #8
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
	...

0800df30 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800df30:	b580      	push	{r7, lr}
 800df32:	b086      	sub	sp, #24
 800df34:	af00      	add	r7, sp, #0
 800df36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800df38:	2300      	movs	r3, #0
 800df3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800df3c:	f7ff feb6 	bl	800dcac <HAL_GetTick>
 800df40:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800df48:	2301      	movs	r3, #1
 800df4a:	e099      	b.n	800e080 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2200      	movs	r2, #0
 800df50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	2202      	movs	r2, #2
 800df58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	681a      	ldr	r2, [r3, #0]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f022 0201 	bic.w	r2, r2, #1
 800df6a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800df6c:	e00f      	b.n	800df8e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800df6e:	f7ff fe9d 	bl	800dcac <HAL_GetTick>
 800df72:	4602      	mov	r2, r0
 800df74:	693b      	ldr	r3, [r7, #16]
 800df76:	1ad3      	subs	r3, r2, r3
 800df78:	2b05      	cmp	r3, #5
 800df7a:	d908      	bls.n	800df8e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	2220      	movs	r2, #32
 800df80:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	2203      	movs	r2, #3
 800df86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800df8a:	2303      	movs	r3, #3
 800df8c:	e078      	b.n	800e080 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f003 0301 	and.w	r3, r3, #1
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d1e8      	bne.n	800df6e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800dfa4:	697a      	ldr	r2, [r7, #20]
 800dfa6:	4b38      	ldr	r3, [pc, #224]	; (800e088 <HAL_DMA_Init+0x158>)
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	685a      	ldr	r2, [r3, #4]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	689b      	ldr	r3, [r3, #8]
 800dfb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dfba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	691b      	ldr	r3, [r3, #16]
 800dfc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800dfc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	699b      	ldr	r3, [r3, #24]
 800dfcc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800dfd2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1b      	ldr	r3, [r3, #32]
 800dfd8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800dfda:	697a      	ldr	r2, [r7, #20]
 800dfdc:	4313      	orrs	r3, r2
 800dfde:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfe4:	2b04      	cmp	r3, #4
 800dfe6:	d107      	bne.n	800dff8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff0:	4313      	orrs	r3, r2
 800dff2:	697a      	ldr	r2, [r7, #20]
 800dff4:	4313      	orrs	r3, r2
 800dff6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	697a      	ldr	r2, [r7, #20]
 800dffe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	695b      	ldr	r3, [r3, #20]
 800e006:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e008:	697b      	ldr	r3, [r7, #20]
 800e00a:	f023 0307 	bic.w	r3, r3, #7
 800e00e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e014:	697a      	ldr	r2, [r7, #20]
 800e016:	4313      	orrs	r3, r2
 800e018:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e01e:	2b04      	cmp	r3, #4
 800e020:	d117      	bne.n	800e052 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e026:	697a      	ldr	r2, [r7, #20]
 800e028:	4313      	orrs	r3, r2
 800e02a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d00e      	beq.n	800e052 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f000 fa9d 	bl	800e574 <DMA_CheckFifoParam>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d008      	beq.n	800e052 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	2240      	movs	r2, #64	; 0x40
 800e044:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2201      	movs	r2, #1
 800e04a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e04e:	2301      	movs	r3, #1
 800e050:	e016      	b.n	800e080 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	697a      	ldr	r2, [r7, #20]
 800e058:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e05a:	6878      	ldr	r0, [r7, #4]
 800e05c:	f000 fa54 	bl	800e508 <DMA_CalcBaseAndBitshift>
 800e060:	4603      	mov	r3, r0
 800e062:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e068:	223f      	movs	r2, #63	; 0x3f
 800e06a:	409a      	lsls	r2, r3
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2201      	movs	r2, #1
 800e07a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e07e:	2300      	movs	r3, #0
}
 800e080:	4618      	mov	r0, r3
 800e082:	3718      	adds	r7, #24
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	f010803f 	.word	0xf010803f

0800e08c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b086      	sub	sp, #24
 800e090:	af00      	add	r7, sp, #0
 800e092:	60f8      	str	r0, [r7, #12]
 800e094:	60b9      	str	r1, [r7, #8]
 800e096:	607a      	str	r2, [r7, #4]
 800e098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e09a:	2300      	movs	r3, #0
 800e09c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e0a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d101      	bne.n	800e0b2 <HAL_DMA_Start_IT+0x26>
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	e040      	b.n	800e134 <HAL_DMA_Start_IT+0xa8>
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d12f      	bne.n	800e126 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	2202      	movs	r2, #2
 800e0ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	687a      	ldr	r2, [r7, #4]
 800e0d8:	68b9      	ldr	r1, [r7, #8]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 f9e6 	bl	800e4ac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e0e4:	223f      	movs	r2, #63	; 0x3f
 800e0e6:	409a      	lsls	r2, r3
 800e0e8:	693b      	ldr	r3, [r7, #16]
 800e0ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	f042 0216 	orr.w	r2, r2, #22
 800e0fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e100:	2b00      	cmp	r3, #0
 800e102:	d007      	beq.n	800e114 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	681a      	ldr	r2, [r3, #0]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f042 0208 	orr.w	r2, r2, #8
 800e112:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	681a      	ldr	r2, [r3, #0]
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	f042 0201 	orr.w	r2, r2, #1
 800e122:	601a      	str	r2, [r3, #0]
 800e124:	e005      	b.n	800e132 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e12e:	2302      	movs	r3, #2
 800e130:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e132:	7dfb      	ldrb	r3, [r7, #23]
}
 800e134:	4618      	mov	r0, r3
 800e136:	3718      	adds	r7, #24
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800e13c:	b480      	push	{r7}
 800e13e:	b083      	sub	sp, #12
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e14a:	b2db      	uxtb	r3, r3
 800e14c:	2b02      	cmp	r3, #2
 800e14e:	d004      	beq.n	800e15a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2280      	movs	r2, #128	; 0x80
 800e154:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800e156:	2301      	movs	r3, #1
 800e158:	e00c      	b.n	800e174 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2205      	movs	r2, #5
 800e15e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	681a      	ldr	r2, [r3, #0]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	f022 0201 	bic.w	r2, r2, #1
 800e170:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800e172:	2300      	movs	r3, #0
}
 800e174:	4618      	mov	r0, r3
 800e176:	370c      	adds	r7, #12
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
 800e186:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e188:	2300      	movs	r3, #0
 800e18a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e18c:	4b92      	ldr	r3, [pc, #584]	; (800e3d8 <HAL_DMA_IRQHandler+0x258>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	4a92      	ldr	r2, [pc, #584]	; (800e3dc <HAL_DMA_IRQHandler+0x25c>)
 800e192:	fba2 2303 	umull	r2, r3, r2, r3
 800e196:	0a9b      	lsrs	r3, r3, #10
 800e198:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e19e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1aa:	2208      	movs	r2, #8
 800e1ac:	409a      	lsls	r2, r3
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	4013      	ands	r3, r2
 800e1b2:	2b00      	cmp	r3, #0
 800e1b4:	d01a      	beq.n	800e1ec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	681b      	ldr	r3, [r3, #0]
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	f003 0304 	and.w	r3, r3, #4
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d013      	beq.n	800e1ec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	681a      	ldr	r2, [r3, #0]
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	f022 0204 	bic.w	r2, r2, #4
 800e1d2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1d8:	2208      	movs	r2, #8
 800e1da:	409a      	lsls	r2, r3
 800e1dc:	693b      	ldr	r3, [r7, #16]
 800e1de:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1e4:	f043 0201 	orr.w	r2, r3, #1
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e1f0:	2201      	movs	r2, #1
 800e1f2:	409a      	lsls	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d012      	beq.n	800e222 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	695b      	ldr	r3, [r3, #20]
 800e202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00b      	beq.n	800e222 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e20e:	2201      	movs	r2, #1
 800e210:	409a      	lsls	r2, r3
 800e212:	693b      	ldr	r3, [r7, #16]
 800e214:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e21a:	f043 0202 	orr.w	r2, r3, #2
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e226:	2204      	movs	r2, #4
 800e228:	409a      	lsls	r2, r3
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	4013      	ands	r3, r2
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d012      	beq.n	800e258 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	f003 0302 	and.w	r3, r3, #2
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	d00b      	beq.n	800e258 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e244:	2204      	movs	r2, #4
 800e246:	409a      	lsls	r2, r3
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e250:	f043 0204 	orr.w	r2, r3, #4
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e25c:	2210      	movs	r2, #16
 800e25e:	409a      	lsls	r2, r3
 800e260:	68fb      	ldr	r3, [r7, #12]
 800e262:	4013      	ands	r3, r2
 800e264:	2b00      	cmp	r3, #0
 800e266:	d043      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f003 0308 	and.w	r3, r3, #8
 800e272:	2b00      	cmp	r3, #0
 800e274:	d03c      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e27a:	2210      	movs	r2, #16
 800e27c:	409a      	lsls	r2, r3
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d018      	beq.n	800e2c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d108      	bne.n	800e2b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d024      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	4798      	blx	r3
 800e2ae:	e01f      	b.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d01b      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	4798      	blx	r3
 800e2c0:	e016      	b.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d107      	bne.n	800e2e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	681a      	ldr	r2, [r3, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	f022 0208 	bic.w	r2, r2, #8
 800e2de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d003      	beq.n	800e2f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e2f4:	2220      	movs	r2, #32
 800e2f6:	409a      	lsls	r2, r3
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	4013      	ands	r3, r2
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	f000 808e 	beq.w	800e41e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	f003 0310 	and.w	r3, r3, #16
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f000 8086 	beq.w	800e41e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e316:	2220      	movs	r2, #32
 800e318:	409a      	lsls	r2, r3
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e324:	b2db      	uxtb	r3, r3
 800e326:	2b05      	cmp	r3, #5
 800e328:	d136      	bne.n	800e398 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f022 0216 	bic.w	r2, r2, #22
 800e338:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	695a      	ldr	r2, [r3, #20]
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e348:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d103      	bne.n	800e35a <HAL_DMA_IRQHandler+0x1da>
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e356:	2b00      	cmp	r3, #0
 800e358:	d007      	beq.n	800e36a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	681a      	ldr	r2, [r3, #0]
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	f022 0208 	bic.w	r2, r2, #8
 800e368:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e36e:	223f      	movs	r2, #63	; 0x3f
 800e370:	409a      	lsls	r2, r3
 800e372:	693b      	ldr	r3, [r7, #16]
 800e374:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2201      	movs	r2, #1
 800e382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d07d      	beq.n	800e48a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	4798      	blx	r3
        }
        return;
 800e396:	e078      	b.n	800e48a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d01c      	beq.n	800e3e0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d108      	bne.n	800e3c6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d030      	beq.n	800e41e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3c0:	6878      	ldr	r0, [r7, #4]
 800e3c2:	4798      	blx	r3
 800e3c4:	e02b      	b.n	800e41e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d027      	beq.n	800e41e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	4798      	blx	r3
 800e3d6:	e022      	b.n	800e41e <HAL_DMA_IRQHandler+0x29e>
 800e3d8:	20000000 	.word	0x20000000
 800e3dc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d10f      	bne.n	800e40e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	681a      	ldr	r2, [r3, #0]
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	f022 0210 	bic.w	r2, r2, #16
 800e3fc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	2201      	movs	r2, #1
 800e40a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e412:	2b00      	cmp	r3, #0
 800e414:	d003      	beq.n	800e41e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800e416:	687b      	ldr	r3, [r7, #4]
 800e418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e422:	2b00      	cmp	r3, #0
 800e424:	d032      	beq.n	800e48c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d022      	beq.n	800e478 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2205      	movs	r2, #5
 800e436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681a      	ldr	r2, [r3, #0]
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	f022 0201 	bic.w	r2, r2, #1
 800e448:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	3301      	adds	r3, #1
 800e44e:	60bb      	str	r3, [r7, #8]
 800e450:	697a      	ldr	r2, [r7, #20]
 800e452:	429a      	cmp	r2, r3
 800e454:	d307      	bcc.n	800e466 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	f003 0301 	and.w	r3, r3, #1
 800e460:	2b00      	cmp	r3, #0
 800e462:	d1f2      	bne.n	800e44a <HAL_DMA_IRQHandler+0x2ca>
 800e464:	e000      	b.n	800e468 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800e466:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2200      	movs	r2, #0
 800e46c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2201      	movs	r2, #1
 800e474:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	4798      	blx	r3
 800e488:	e000      	b.n	800e48c <HAL_DMA_IRQHandler+0x30c>
        return;
 800e48a:	bf00      	nop
    }
  }
}
 800e48c:	3718      	adds	r7, #24
 800e48e:	46bd      	mov	sp, r7
 800e490:	bd80      	pop	{r7, pc}
 800e492:	bf00      	nop

0800e494 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e494:	b480      	push	{r7}
 800e496:	b083      	sub	sp, #12
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr

0800e4ac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e4ac:	b480      	push	{r7}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	60f8      	str	r0, [r7, #12]
 800e4b4:	60b9      	str	r1, [r7, #8]
 800e4b6:	607a      	str	r2, [r7, #4]
 800e4b8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	681a      	ldr	r2, [r3, #0]
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e4c8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	683a      	ldr	r2, [r7, #0]
 800e4d0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	2b40      	cmp	r3, #64	; 0x40
 800e4d8:	d108      	bne.n	800e4ec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	687a      	ldr	r2, [r7, #4]
 800e4e0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	68ba      	ldr	r2, [r7, #8]
 800e4e8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e4ea:	e007      	b.n	800e4fc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68ba      	ldr	r2, [r7, #8]
 800e4f2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	687a      	ldr	r2, [r7, #4]
 800e4fa:	60da      	str	r2, [r3, #12]
}
 800e4fc:	bf00      	nop
 800e4fe:	3714      	adds	r7, #20
 800e500:	46bd      	mov	sp, r7
 800e502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e506:	4770      	bx	lr

0800e508 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e508:	b480      	push	{r7}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	b2db      	uxtb	r3, r3
 800e516:	3b10      	subs	r3, #16
 800e518:	4a14      	ldr	r2, [pc, #80]	; (800e56c <DMA_CalcBaseAndBitshift+0x64>)
 800e51a:	fba2 2303 	umull	r2, r3, r2, r3
 800e51e:	091b      	lsrs	r3, r3, #4
 800e520:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e522:	4a13      	ldr	r2, [pc, #76]	; (800e570 <DMA_CalcBaseAndBitshift+0x68>)
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	4413      	add	r3, r2
 800e528:	781b      	ldrb	r3, [r3, #0]
 800e52a:	461a      	mov	r2, r3
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	2b03      	cmp	r3, #3
 800e534:	d909      	bls.n	800e54a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e53e:	f023 0303 	bic.w	r3, r3, #3
 800e542:	1d1a      	adds	r2, r3, #4
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	659a      	str	r2, [r3, #88]	; 0x58
 800e548:	e007      	b.n	800e55a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e552:	f023 0303 	bic.w	r3, r3, #3
 800e556:	687a      	ldr	r2, [r7, #4]
 800e558:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e55e:	4618      	mov	r0, r3
 800e560:	3714      	adds	r7, #20
 800e562:	46bd      	mov	sp, r7
 800e564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e568:	4770      	bx	lr
 800e56a:	bf00      	nop
 800e56c:	aaaaaaab 	.word	0xaaaaaaab
 800e570:	080224a4 	.word	0x080224a4

0800e574 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e574:	b480      	push	{r7}
 800e576:	b085      	sub	sp, #20
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e57c:	2300      	movs	r3, #0
 800e57e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e584:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	699b      	ldr	r3, [r3, #24]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d11f      	bne.n	800e5ce <DMA_CheckFifoParam+0x5a>
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	2b03      	cmp	r3, #3
 800e592:	d856      	bhi.n	800e642 <DMA_CheckFifoParam+0xce>
 800e594:	a201      	add	r2, pc, #4	; (adr r2, 800e59c <DMA_CheckFifoParam+0x28>)
 800e596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e59a:	bf00      	nop
 800e59c:	0800e5ad 	.word	0x0800e5ad
 800e5a0:	0800e5bf 	.word	0x0800e5bf
 800e5a4:	0800e5ad 	.word	0x0800e5ad
 800e5a8:	0800e643 	.word	0x0800e643
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d046      	beq.n	800e646 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e5bc:	e043      	b.n	800e646 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5c2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e5c6:	d140      	bne.n	800e64a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e5c8:	2301      	movs	r3, #1
 800e5ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e5cc:	e03d      	b.n	800e64a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	699b      	ldr	r3, [r3, #24]
 800e5d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5d6:	d121      	bne.n	800e61c <DMA_CheckFifoParam+0xa8>
 800e5d8:	68bb      	ldr	r3, [r7, #8]
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d837      	bhi.n	800e64e <DMA_CheckFifoParam+0xda>
 800e5de:	a201      	add	r2, pc, #4	; (adr r2, 800e5e4 <DMA_CheckFifoParam+0x70>)
 800e5e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5e4:	0800e5f5 	.word	0x0800e5f5
 800e5e8:	0800e5fb 	.word	0x0800e5fb
 800e5ec:	0800e5f5 	.word	0x0800e5f5
 800e5f0:	0800e60d 	.word	0x0800e60d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5f8:	e030      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e602:	2b00      	cmp	r3, #0
 800e604:	d025      	beq.n	800e652 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e606:	2301      	movs	r3, #1
 800e608:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e60a:	e022      	b.n	800e652 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e610:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e614:	d11f      	bne.n	800e656 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e616:	2301      	movs	r3, #1
 800e618:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e61a:	e01c      	b.n	800e656 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e61c:	68bb      	ldr	r3, [r7, #8]
 800e61e:	2b02      	cmp	r3, #2
 800e620:	d903      	bls.n	800e62a <DMA_CheckFifoParam+0xb6>
 800e622:	68bb      	ldr	r3, [r7, #8]
 800e624:	2b03      	cmp	r3, #3
 800e626:	d003      	beq.n	800e630 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e628:	e018      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e62a:	2301      	movs	r3, #1
 800e62c:	73fb      	strb	r3, [r7, #15]
      break;
 800e62e:	e015      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00e      	beq.n	800e65a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73fb      	strb	r3, [r7, #15]
      break;
 800e640:	e00b      	b.n	800e65a <DMA_CheckFifoParam+0xe6>
      break;
 800e642:	bf00      	nop
 800e644:	e00a      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;
 800e646:	bf00      	nop
 800e648:	e008      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;
 800e64a:	bf00      	nop
 800e64c:	e006      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;
 800e64e:	bf00      	nop
 800e650:	e004      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;
 800e652:	bf00      	nop
 800e654:	e002      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;   
 800e656:	bf00      	nop
 800e658:	e000      	b.n	800e65c <DMA_CheckFifoParam+0xe8>
      break;
 800e65a:	bf00      	nop
    }
  } 
  
  return status; 
 800e65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e65e:	4618      	mov	r0, r3
 800e660:	3714      	adds	r7, #20
 800e662:	46bd      	mov	sp, r7
 800e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e668:	4770      	bx	lr
 800e66a:	bf00      	nop

0800e66c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e66c:	b580      	push	{r7, lr}
 800e66e:	b086      	sub	sp, #24
 800e670:	af00      	add	r7, sp, #0
 800e672:	60f8      	str	r0, [r7, #12]
 800e674:	60b9      	str	r1, [r7, #8]
 800e676:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e67a:	2301      	movs	r3, #1
 800e67c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e67e:	4b23      	ldr	r3, [pc, #140]	; (800e70c <HAL_FLASH_Program+0xa0>)
 800e680:	7e1b      	ldrb	r3, [r3, #24]
 800e682:	2b01      	cmp	r3, #1
 800e684:	d101      	bne.n	800e68a <HAL_FLASH_Program+0x1e>
 800e686:	2302      	movs	r3, #2
 800e688:	e03b      	b.n	800e702 <HAL_FLASH_Program+0x96>
 800e68a:	4b20      	ldr	r3, [pc, #128]	; (800e70c <HAL_FLASH_Program+0xa0>)
 800e68c:	2201      	movs	r2, #1
 800e68e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e690:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e694:	f000 f870 	bl	800e778 <FLASH_WaitForLastOperation>
 800e698:	4603      	mov	r3, r0
 800e69a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800e69c:	7dfb      	ldrb	r3, [r7, #23]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d12b      	bne.n	800e6fa <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d105      	bne.n	800e6b4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800e6a8:	783b      	ldrb	r3, [r7, #0]
 800e6aa:	4619      	mov	r1, r3
 800e6ac:	68b8      	ldr	r0, [r7, #8]
 800e6ae:	f000 f91b 	bl	800e8e8 <FLASH_Program_Byte>
 800e6b2:	e016      	b.n	800e6e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800e6b4:	68fb      	ldr	r3, [r7, #12]
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d105      	bne.n	800e6c6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800e6ba:	883b      	ldrh	r3, [r7, #0]
 800e6bc:	4619      	mov	r1, r3
 800e6be:	68b8      	ldr	r0, [r7, #8]
 800e6c0:	f000 f8ee 	bl	800e8a0 <FLASH_Program_HalfWord>
 800e6c4:	e00d      	b.n	800e6e2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	2b02      	cmp	r3, #2
 800e6ca:	d105      	bne.n	800e6d8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	68b8      	ldr	r0, [r7, #8]
 800e6d2:	f000 f8c3 	bl	800e85c <FLASH_Program_Word>
 800e6d6:	e004      	b.n	800e6e2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800e6d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6dc:	68b8      	ldr	r0, [r7, #8]
 800e6de:	f000 f88b 	bl	800e7f8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e6e2:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e6e6:	f000 f847 	bl	800e778 <FLASH_WaitForLastOperation>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800e6ee:	4b08      	ldr	r3, [pc, #32]	; (800e710 <HAL_FLASH_Program+0xa4>)
 800e6f0:	691b      	ldr	r3, [r3, #16]
 800e6f2:	4a07      	ldr	r2, [pc, #28]	; (800e710 <HAL_FLASH_Program+0xa4>)
 800e6f4:	f023 0301 	bic.w	r3, r3, #1
 800e6f8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e6fa:	4b04      	ldr	r3, [pc, #16]	; (800e70c <HAL_FLASH_Program+0xa0>)
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	761a      	strb	r2, [r3, #24]
  
  return status;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20008800 	.word	0x20008800
 800e710:	40023c00 	.word	0x40023c00

0800e714 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e71a:	2300      	movs	r3, #0
 800e71c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e71e:	4b0b      	ldr	r3, [pc, #44]	; (800e74c <HAL_FLASH_Unlock+0x38>)
 800e720:	691b      	ldr	r3, [r3, #16]
 800e722:	2b00      	cmp	r3, #0
 800e724:	da0b      	bge.n	800e73e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e726:	4b09      	ldr	r3, [pc, #36]	; (800e74c <HAL_FLASH_Unlock+0x38>)
 800e728:	4a09      	ldr	r2, [pc, #36]	; (800e750 <HAL_FLASH_Unlock+0x3c>)
 800e72a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e72c:	4b07      	ldr	r3, [pc, #28]	; (800e74c <HAL_FLASH_Unlock+0x38>)
 800e72e:	4a09      	ldr	r2, [pc, #36]	; (800e754 <HAL_FLASH_Unlock+0x40>)
 800e730:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e732:	4b06      	ldr	r3, [pc, #24]	; (800e74c <HAL_FLASH_Unlock+0x38>)
 800e734:	691b      	ldr	r3, [r3, #16]
 800e736:	2b00      	cmp	r3, #0
 800e738:	da01      	bge.n	800e73e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e73a:	2301      	movs	r3, #1
 800e73c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e73e:	79fb      	ldrb	r3, [r7, #7]
}
 800e740:	4618      	mov	r0, r3
 800e742:	370c      	adds	r7, #12
 800e744:	46bd      	mov	sp, r7
 800e746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e74a:	4770      	bx	lr
 800e74c:	40023c00 	.word	0x40023c00
 800e750:	45670123 	.word	0x45670123
 800e754:	cdef89ab 	.word	0xcdef89ab

0800e758 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e758:	b480      	push	{r7}
 800e75a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800e75c:	4b05      	ldr	r3, [pc, #20]	; (800e774 <HAL_FLASH_Lock+0x1c>)
 800e75e:	691b      	ldr	r3, [r3, #16]
 800e760:	4a04      	ldr	r2, [pc, #16]	; (800e774 <HAL_FLASH_Lock+0x1c>)
 800e762:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e766:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800e768:	2300      	movs	r3, #0
}
 800e76a:	4618      	mov	r0, r3
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr
 800e774:	40023c00 	.word	0x40023c00

0800e778 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800e778:	b580      	push	{r7, lr}
 800e77a:	b084      	sub	sp, #16
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e780:	2300      	movs	r3, #0
 800e782:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e784:	4b1a      	ldr	r3, [pc, #104]	; (800e7f0 <FLASH_WaitForLastOperation+0x78>)
 800e786:	2200      	movs	r2, #0
 800e788:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800e78a:	f7ff fa8f 	bl	800dcac <HAL_GetTick>
 800e78e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e790:	e010      	b.n	800e7b4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e798:	d00c      	beq.n	800e7b4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d007      	beq.n	800e7b0 <FLASH_WaitForLastOperation+0x38>
 800e7a0:	f7ff fa84 	bl	800dcac <HAL_GetTick>
 800e7a4:	4602      	mov	r2, r0
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	1ad3      	subs	r3, r2, r3
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d201      	bcs.n	800e7b4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800e7b0:	2303      	movs	r3, #3
 800e7b2:	e019      	b.n	800e7e8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e7b4:	4b0f      	ldr	r3, [pc, #60]	; (800e7f4 <FLASH_WaitForLastOperation+0x7c>)
 800e7b6:	68db      	ldr	r3, [r3, #12]
 800e7b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d1e8      	bne.n	800e792 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e7c0:	4b0c      	ldr	r3, [pc, #48]	; (800e7f4 <FLASH_WaitForLastOperation+0x7c>)
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	f003 0301 	and.w	r3, r3, #1
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d002      	beq.n	800e7d2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e7cc:	4b09      	ldr	r3, [pc, #36]	; (800e7f4 <FLASH_WaitForLastOperation+0x7c>)
 800e7ce:	2201      	movs	r2, #1
 800e7d0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e7d2:	4b08      	ldr	r3, [pc, #32]	; (800e7f4 <FLASH_WaitForLastOperation+0x7c>)
 800e7d4:	68db      	ldr	r3, [r3, #12]
 800e7d6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d003      	beq.n	800e7e6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800e7de:	f000 f8a5 	bl	800e92c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e7e2:	2301      	movs	r3, #1
 800e7e4:	e000      	b.n	800e7e8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800e7e6:	2300      	movs	r3, #0
  
}  
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	3710      	adds	r7, #16
 800e7ec:	46bd      	mov	sp, r7
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	20008800 	.word	0x20008800
 800e7f4:	40023c00 	.word	0x40023c00

0800e7f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e7f8:	b480      	push	{r7}
 800e7fa:	b085      	sub	sp, #20
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e804:	4b14      	ldr	r3, [pc, #80]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e806:	691b      	ldr	r3, [r3, #16]
 800e808:	4a13      	ldr	r2, [pc, #76]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e80a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e80e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800e810:	4b11      	ldr	r3, [pc, #68]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e812:	691b      	ldr	r3, [r3, #16]
 800e814:	4a10      	ldr	r2, [pc, #64]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e816:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e81a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e81c:	4b0e      	ldr	r3, [pc, #56]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e81e:	691b      	ldr	r3, [r3, #16]
 800e820:	4a0d      	ldr	r2, [pc, #52]	; (800e858 <FLASH_Program_DoubleWord+0x60>)
 800e822:	f043 0301 	orr.w	r3, r3, #1
 800e826:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	683a      	ldr	r2, [r7, #0]
 800e82c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800e82e:	f3bf 8f6f 	isb	sy
}
 800e832:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800e834:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e838:	f04f 0200 	mov.w	r2, #0
 800e83c:	f04f 0300 	mov.w	r3, #0
 800e840:	000a      	movs	r2, r1
 800e842:	2300      	movs	r3, #0
 800e844:	68f9      	ldr	r1, [r7, #12]
 800e846:	3104      	adds	r1, #4
 800e848:	4613      	mov	r3, r2
 800e84a:	600b      	str	r3, [r1, #0]
}
 800e84c:	bf00      	nop
 800e84e:	3714      	adds	r7, #20
 800e850:	46bd      	mov	sp, r7
 800e852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e856:	4770      	bx	lr
 800e858:	40023c00 	.word	0x40023c00

0800e85c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b083      	sub	sp, #12
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e866:	4b0d      	ldr	r3, [pc, #52]	; (800e89c <FLASH_Program_Word+0x40>)
 800e868:	691b      	ldr	r3, [r3, #16]
 800e86a:	4a0c      	ldr	r2, [pc, #48]	; (800e89c <FLASH_Program_Word+0x40>)
 800e86c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e870:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800e872:	4b0a      	ldr	r3, [pc, #40]	; (800e89c <FLASH_Program_Word+0x40>)
 800e874:	691b      	ldr	r3, [r3, #16]
 800e876:	4a09      	ldr	r2, [pc, #36]	; (800e89c <FLASH_Program_Word+0x40>)
 800e878:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e87c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e87e:	4b07      	ldr	r3, [pc, #28]	; (800e89c <FLASH_Program_Word+0x40>)
 800e880:	691b      	ldr	r3, [r3, #16]
 800e882:	4a06      	ldr	r2, [pc, #24]	; (800e89c <FLASH_Program_Word+0x40>)
 800e884:	f043 0301 	orr.w	r3, r3, #1
 800e888:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	683a      	ldr	r2, [r7, #0]
 800e88e:	601a      	str	r2, [r3, #0]
}
 800e890:	bf00      	nop
 800e892:	370c      	adds	r7, #12
 800e894:	46bd      	mov	sp, r7
 800e896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89a:	4770      	bx	lr
 800e89c:	40023c00 	.word	0x40023c00

0800e8a0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	460b      	mov	r3, r1
 800e8aa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e8ac:	4b0d      	ldr	r3, [pc, #52]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	4a0c      	ldr	r2, [pc, #48]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e8b8:	4b0a      	ldr	r3, [pc, #40]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8ba:	691b      	ldr	r3, [r3, #16]
 800e8bc:	4a09      	ldr	r2, [pc, #36]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e8c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e8c4:	4b07      	ldr	r3, [pc, #28]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	4a06      	ldr	r2, [pc, #24]	; (800e8e4 <FLASH_Program_HalfWord+0x44>)
 800e8ca:	f043 0301 	orr.w	r3, r3, #1
 800e8ce:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	887a      	ldrh	r2, [r7, #2]
 800e8d4:	801a      	strh	r2, [r3, #0]
}
 800e8d6:	bf00      	nop
 800e8d8:	370c      	adds	r7, #12
 800e8da:	46bd      	mov	sp, r7
 800e8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8e0:	4770      	bx	lr
 800e8e2:	bf00      	nop
 800e8e4:	40023c00 	.word	0x40023c00

0800e8e8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e8e8:	b480      	push	{r7}
 800e8ea:	b083      	sub	sp, #12
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e8f4:	4b0c      	ldr	r3, [pc, #48]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e8f6:	691b      	ldr	r3, [r3, #16]
 800e8f8:	4a0b      	ldr	r2, [pc, #44]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e8fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e8fe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e900:	4b09      	ldr	r3, [pc, #36]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e902:	4a09      	ldr	r2, [pc, #36]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e904:	691b      	ldr	r3, [r3, #16]
 800e906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e908:	4b07      	ldr	r3, [pc, #28]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e90a:	691b      	ldr	r3, [r3, #16]
 800e90c:	4a06      	ldr	r2, [pc, #24]	; (800e928 <FLASH_Program_Byte+0x40>)
 800e90e:	f043 0301 	orr.w	r3, r3, #1
 800e912:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	78fa      	ldrb	r2, [r7, #3]
 800e918:	701a      	strb	r2, [r3, #0]
}
 800e91a:	bf00      	nop
 800e91c:	370c      	adds	r7, #12
 800e91e:	46bd      	mov	sp, r7
 800e920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e924:	4770      	bx	lr
 800e926:	bf00      	nop
 800e928:	40023c00 	.word	0x40023c00

0800e92c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e92c:	b480      	push	{r7}
 800e92e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e930:	4b2f      	ldr	r3, [pc, #188]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e932:	68db      	ldr	r3, [r3, #12]
 800e934:	f003 0310 	and.w	r3, r3, #16
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d008      	beq.n	800e94e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e93c:	4b2d      	ldr	r3, [pc, #180]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e93e:	69db      	ldr	r3, [r3, #28]
 800e940:	f043 0310 	orr.w	r3, r3, #16
 800e944:	4a2b      	ldr	r2, [pc, #172]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e946:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e948:	4b29      	ldr	r3, [pc, #164]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e94a:	2210      	movs	r2, #16
 800e94c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e94e:	4b28      	ldr	r3, [pc, #160]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e950:	68db      	ldr	r3, [r3, #12]
 800e952:	f003 0320 	and.w	r3, r3, #32
 800e956:	2b00      	cmp	r3, #0
 800e958:	d008      	beq.n	800e96c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e95a:	4b26      	ldr	r3, [pc, #152]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e95c:	69db      	ldr	r3, [r3, #28]
 800e95e:	f043 0308 	orr.w	r3, r3, #8
 800e962:	4a24      	ldr	r2, [pc, #144]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e964:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e966:	4b22      	ldr	r3, [pc, #136]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e968:	2220      	movs	r2, #32
 800e96a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e96c:	4b20      	ldr	r3, [pc, #128]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e96e:	68db      	ldr	r3, [r3, #12]
 800e970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d008      	beq.n	800e98a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e978:	4b1e      	ldr	r3, [pc, #120]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e97a:	69db      	ldr	r3, [r3, #28]
 800e97c:	f043 0304 	orr.w	r3, r3, #4
 800e980:	4a1c      	ldr	r2, [pc, #112]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e982:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e984:	4b1a      	ldr	r3, [pc, #104]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e986:	2240      	movs	r2, #64	; 0x40
 800e988:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e98a:	4b19      	ldr	r3, [pc, #100]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e992:	2b00      	cmp	r3, #0
 800e994:	d008      	beq.n	800e9a8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e996:	4b17      	ldr	r3, [pc, #92]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e998:	69db      	ldr	r3, [r3, #28]
 800e99a:	f043 0302 	orr.w	r3, r3, #2
 800e99e:	4a15      	ldr	r2, [pc, #84]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e9a0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e9a2:	4b13      	ldr	r3, [pc, #76]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e9a4:	2280      	movs	r2, #128	; 0x80
 800e9a6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e9a8:	4b11      	ldr	r3, [pc, #68]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e9aa:	68db      	ldr	r3, [r3, #12]
 800e9ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d009      	beq.n	800e9c8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e9b4:	4b0f      	ldr	r3, [pc, #60]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e9b6:	69db      	ldr	r3, [r3, #28]
 800e9b8:	f043 0301 	orr.w	r3, r3, #1
 800e9bc:	4a0d      	ldr	r2, [pc, #52]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e9be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e9c0:	4b0b      	ldr	r3, [pc, #44]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e9c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9c6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e9c8:	4b09      	ldr	r3, [pc, #36]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	f003 0302 	and.w	r3, r3, #2
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d008      	beq.n	800e9e6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e9d4:	4b07      	ldr	r3, [pc, #28]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e9d6:	69db      	ldr	r3, [r3, #28]
 800e9d8:	f043 0320 	orr.w	r3, r3, #32
 800e9dc:	4a05      	ldr	r2, [pc, #20]	; (800e9f4 <FLASH_SetErrorCode+0xc8>)
 800e9de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e9e0:	4b03      	ldr	r3, [pc, #12]	; (800e9f0 <FLASH_SetErrorCode+0xc4>)
 800e9e2:	2202      	movs	r2, #2
 800e9e4:	60da      	str	r2, [r3, #12]
  }
}
 800e9e6:	bf00      	nop
 800e9e8:	46bd      	mov	sp, r7
 800e9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ee:	4770      	bx	lr
 800e9f0:	40023c00 	.word	0x40023c00
 800e9f4:	20008800 	.word	0x20008800

0800e9f8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e9f8:	b580      	push	{r7, lr}
 800e9fa:	b084      	sub	sp, #16
 800e9fc:	af00      	add	r7, sp, #0
 800e9fe:	6078      	str	r0, [r7, #4]
 800ea00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800ea02:	2301      	movs	r3, #1
 800ea04:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800ea06:	2300      	movs	r3, #0
 800ea08:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800ea0a:	4b31      	ldr	r3, [pc, #196]	; (800ead0 <HAL_FLASHEx_Erase+0xd8>)
 800ea0c:	7e1b      	ldrb	r3, [r3, #24]
 800ea0e:	2b01      	cmp	r3, #1
 800ea10:	d101      	bne.n	800ea16 <HAL_FLASHEx_Erase+0x1e>
 800ea12:	2302      	movs	r3, #2
 800ea14:	e058      	b.n	800eac8 <HAL_FLASHEx_Erase+0xd0>
 800ea16:	4b2e      	ldr	r3, [pc, #184]	; (800ead0 <HAL_FLASHEx_Erase+0xd8>)
 800ea18:	2201      	movs	r2, #1
 800ea1a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ea1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ea20:	f7ff feaa 	bl	800e778 <FLASH_WaitForLastOperation>
 800ea24:	4603      	mov	r3, r0
 800ea26:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800ea28:	7bfb      	ldrb	r3, [r7, #15]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d148      	bne.n	800eac0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	f04f 32ff 	mov.w	r2, #4294967295
 800ea34:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b01      	cmp	r3, #1
 800ea3c:	d115      	bne.n	800ea6a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	691b      	ldr	r3, [r3, #16]
 800ea42:	b2da      	uxtb	r2, r3
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	4619      	mov	r1, r3
 800ea4a:	4610      	mov	r0, r2
 800ea4c:	f000 f844 	bl	800ead8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ea50:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ea54:	f7ff fe90 	bl	800e778 <FLASH_WaitForLastOperation>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800ea5c:	4b1d      	ldr	r3, [pc, #116]	; (800ead4 <HAL_FLASHEx_Erase+0xdc>)
 800ea5e:	691b      	ldr	r3, [r3, #16]
 800ea60:	4a1c      	ldr	r2, [pc, #112]	; (800ead4 <HAL_FLASHEx_Erase+0xdc>)
 800ea62:	f023 0304 	bic.w	r3, r3, #4
 800ea66:	6113      	str	r3, [r2, #16]
 800ea68:	e028      	b.n	800eabc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	689b      	ldr	r3, [r3, #8]
 800ea6e:	60bb      	str	r3, [r7, #8]
 800ea70:	e01c      	b.n	800eaac <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	691b      	ldr	r3, [r3, #16]
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	4619      	mov	r1, r3
 800ea7a:	68b8      	ldr	r0, [r7, #8]
 800ea7c:	f000 f850 	bl	800eb20 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ea80:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ea84:	f7ff fe78 	bl	800e778 <FLASH_WaitForLastOperation>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800ea8c:	4b11      	ldr	r3, [pc, #68]	; (800ead4 <HAL_FLASHEx_Erase+0xdc>)
 800ea8e:	691b      	ldr	r3, [r3, #16]
 800ea90:	4a10      	ldr	r2, [pc, #64]	; (800ead4 <HAL_FLASHEx_Erase+0xdc>)
 800ea92:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800ea96:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800ea98:	7bfb      	ldrb	r3, [r7, #15]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d003      	beq.n	800eaa6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	68ba      	ldr	r2, [r7, #8]
 800eaa2:	601a      	str	r2, [r3, #0]
          break;
 800eaa4:	e00a      	b.n	800eabc <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	60bb      	str	r3, [r7, #8]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	68da      	ldr	r2, [r3, #12]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	689b      	ldr	r3, [r3, #8]
 800eab4:	4413      	add	r3, r2
 800eab6:	68ba      	ldr	r2, [r7, #8]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d3da      	bcc.n	800ea72 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800eabc:	f000 f878 	bl	800ebb0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800eac0:	4b03      	ldr	r3, [pc, #12]	; (800ead0 <HAL_FLASHEx_Erase+0xd8>)
 800eac2:	2200      	movs	r2, #0
 800eac4:	761a      	strb	r2, [r3, #24]

  return status;
 800eac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3710      	adds	r7, #16
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}
 800ead0:	20008800 	.word	0x20008800
 800ead4:	40023c00 	.word	0x40023c00

0800ead8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800ead8:	b480      	push	{r7}
 800eada:	b083      	sub	sp, #12
 800eadc:	af00      	add	r7, sp, #0
 800eade:	4603      	mov	r3, r0
 800eae0:	6039      	str	r1, [r7, #0]
 800eae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800eae4:	4b0d      	ldr	r3, [pc, #52]	; (800eb1c <FLASH_MassErase+0x44>)
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	4a0c      	ldr	r2, [pc, #48]	; (800eb1c <FLASH_MassErase+0x44>)
 800eaea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eaee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800eaf0:	4b0a      	ldr	r3, [pc, #40]	; (800eb1c <FLASH_MassErase+0x44>)
 800eaf2:	691b      	ldr	r3, [r3, #16]
 800eaf4:	4a09      	ldr	r2, [pc, #36]	; (800eb1c <FLASH_MassErase+0x44>)
 800eaf6:	f043 0304 	orr.w	r3, r3, #4
 800eafa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800eafc:	4b07      	ldr	r3, [pc, #28]	; (800eb1c <FLASH_MassErase+0x44>)
 800eafe:	691a      	ldr	r2, [r3, #16]
 800eb00:	79fb      	ldrb	r3, [r7, #7]
 800eb02:	021b      	lsls	r3, r3, #8
 800eb04:	4313      	orrs	r3, r2
 800eb06:	4a05      	ldr	r2, [pc, #20]	; (800eb1c <FLASH_MassErase+0x44>)
 800eb08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb0c:	6113      	str	r3, [r2, #16]
}
 800eb0e:	bf00      	nop
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
 800eb1a:	bf00      	nop
 800eb1c:	40023c00 	.word	0x40023c00

0800eb20 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b085      	sub	sp, #20
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800eb30:	78fb      	ldrb	r3, [r7, #3]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d102      	bne.n	800eb3c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800eb36:	2300      	movs	r3, #0
 800eb38:	60fb      	str	r3, [r7, #12]
 800eb3a:	e010      	b.n	800eb5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800eb3c:	78fb      	ldrb	r3, [r7, #3]
 800eb3e:	2b01      	cmp	r3, #1
 800eb40:	d103      	bne.n	800eb4a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800eb42:	f44f 7380 	mov.w	r3, #256	; 0x100
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	e009      	b.n	800eb5e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800eb4a:	78fb      	ldrb	r3, [r7, #3]
 800eb4c:	2b02      	cmp	r3, #2
 800eb4e:	d103      	bne.n	800eb58 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800eb50:	f44f 7300 	mov.w	r3, #512	; 0x200
 800eb54:	60fb      	str	r3, [r7, #12]
 800eb56:	e002      	b.n	800eb5e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800eb58:	f44f 7340 	mov.w	r3, #768	; 0x300
 800eb5c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800eb5e:	4b13      	ldr	r3, [pc, #76]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	4a12      	ldr	r2, [pc, #72]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eb68:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800eb6a:	4b10      	ldr	r3, [pc, #64]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb6c:	691a      	ldr	r2, [r3, #16]
 800eb6e:	490f      	ldr	r1, [pc, #60]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	4313      	orrs	r3, r2
 800eb74:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800eb76:	4b0d      	ldr	r3, [pc, #52]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb78:	691b      	ldr	r3, [r3, #16]
 800eb7a:	4a0c      	ldr	r2, [pc, #48]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb7c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800eb80:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800eb82:	4b0a      	ldr	r3, [pc, #40]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb84:	691a      	ldr	r2, [r3, #16]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	00db      	lsls	r3, r3, #3
 800eb8a:	4313      	orrs	r3, r2
 800eb8c:	4a07      	ldr	r2, [pc, #28]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb8e:	f043 0302 	orr.w	r3, r3, #2
 800eb92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800eb94:	4b05      	ldr	r3, [pc, #20]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	4a04      	ldr	r2, [pc, #16]	; (800ebac <FLASH_Erase_Sector+0x8c>)
 800eb9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800eb9e:	6113      	str	r3, [r2, #16]
}
 800eba0:	bf00      	nop
 800eba2:	3714      	adds	r7, #20
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr
 800ebac:	40023c00 	.word	0x40023c00

0800ebb0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800ebb0:	b480      	push	{r7}
 800ebb2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800ebb4:	4b20      	ldr	r3, [pc, #128]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d017      	beq.n	800ebf0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800ebc0:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	4a1c      	ldr	r2, [pc, #112]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebc6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ebca:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800ebcc:	4b1a      	ldr	r3, [pc, #104]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	4a19      	ldr	r2, [pc, #100]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebd2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800ebd6:	6013      	str	r3, [r2, #0]
 800ebd8:	4b17      	ldr	r3, [pc, #92]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	4a16      	ldr	r2, [pc, #88]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ebe2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800ebe4:	4b14      	ldr	r3, [pc, #80]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	4a13      	ldr	r2, [pc, #76]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800ebee:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800ebf0:	4b11      	ldr	r3, [pc, #68]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d017      	beq.n	800ec2c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800ebfc:	4b0e      	ldr	r3, [pc, #56]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	4a0d      	ldr	r2, [pc, #52]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ec06:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800ec08:	4b0b      	ldr	r3, [pc, #44]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a0a      	ldr	r2, [pc, #40]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec0e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800ec12:	6013      	str	r3, [r2, #0]
 800ec14:	4b08      	ldr	r3, [pc, #32]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a07      	ldr	r2, [pc, #28]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ec1e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800ec20:	4b05      	ldr	r3, [pc, #20]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	4a04      	ldr	r2, [pc, #16]	; (800ec38 <FLASH_FlushCaches+0x88>)
 800ec26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ec2a:	6013      	str	r3, [r2, #0]
  }
}
 800ec2c:	bf00      	nop
 800ec2e:	46bd      	mov	sp, r7
 800ec30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec34:	4770      	bx	lr
 800ec36:	bf00      	nop
 800ec38:	40023c00 	.word	0x40023c00

0800ec3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ec3c:	b480      	push	{r7}
 800ec3e:	b089      	sub	sp, #36	; 0x24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
 800ec44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ec46:	2300      	movs	r3, #0
 800ec48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ec52:	2300      	movs	r3, #0
 800ec54:	61fb      	str	r3, [r7, #28]
 800ec56:	e159      	b.n	800ef0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ec58:	2201      	movs	r2, #1
 800ec5a:	69fb      	ldr	r3, [r7, #28]
 800ec5c:	fa02 f303 	lsl.w	r3, r2, r3
 800ec60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	697a      	ldr	r2, [r7, #20]
 800ec68:	4013      	ands	r3, r2
 800ec6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ec6c:	693a      	ldr	r2, [r7, #16]
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	f040 8148 	bne.w	800ef06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ec76:	683b      	ldr	r3, [r7, #0]
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	f003 0303 	and.w	r3, r3, #3
 800ec7e:	2b01      	cmp	r3, #1
 800ec80:	d005      	beq.n	800ec8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	685b      	ldr	r3, [r3, #4]
 800ec86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ec8a:	2b02      	cmp	r3, #2
 800ec8c:	d130      	bne.n	800ecf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	005b      	lsls	r3, r3, #1
 800ec98:	2203      	movs	r2, #3
 800ec9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ec9e:	43db      	mvns	r3, r3
 800eca0:	69ba      	ldr	r2, [r7, #24]
 800eca2:	4013      	ands	r3, r2
 800eca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800eca6:	683b      	ldr	r3, [r7, #0]
 800eca8:	68da      	ldr	r2, [r3, #12]
 800ecaa:	69fb      	ldr	r3, [r7, #28]
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	fa02 f303 	lsl.w	r3, r2, r3
 800ecb2:	69ba      	ldr	r2, [r7, #24]
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	69ba      	ldr	r2, [r7, #24]
 800ecbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	685b      	ldr	r3, [r3, #4]
 800ecc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	fa02 f303 	lsl.w	r3, r2, r3
 800eccc:	43db      	mvns	r3, r3
 800ecce:	69ba      	ldr	r2, [r7, #24]
 800ecd0:	4013      	ands	r3, r2
 800ecd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	685b      	ldr	r3, [r3, #4]
 800ecd8:	091b      	lsrs	r3, r3, #4
 800ecda:	f003 0201 	and.w	r2, r3, #1
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	fa02 f303 	lsl.w	r3, r2, r3
 800ece4:	69ba      	ldr	r2, [r7, #24]
 800ece6:	4313      	orrs	r3, r2
 800ece8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	69ba      	ldr	r2, [r7, #24]
 800ecee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ecf0:	683b      	ldr	r3, [r7, #0]
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	f003 0303 	and.w	r3, r3, #3
 800ecf8:	2b03      	cmp	r3, #3
 800ecfa:	d017      	beq.n	800ed2c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	005b      	lsls	r3, r3, #1
 800ed06:	2203      	movs	r2, #3
 800ed08:	fa02 f303 	lsl.w	r3, r2, r3
 800ed0c:	43db      	mvns	r3, r3
 800ed0e:	69ba      	ldr	r2, [r7, #24]
 800ed10:	4013      	ands	r3, r2
 800ed12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	689a      	ldr	r2, [r3, #8]
 800ed18:	69fb      	ldr	r3, [r7, #28]
 800ed1a:	005b      	lsls	r3, r3, #1
 800ed1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed20:	69ba      	ldr	r2, [r7, #24]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	69ba      	ldr	r2, [r7, #24]
 800ed2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f003 0303 	and.w	r3, r3, #3
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d123      	bne.n	800ed80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ed38:	69fb      	ldr	r3, [r7, #28]
 800ed3a:	08da      	lsrs	r2, r3, #3
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	3208      	adds	r2, #8
 800ed40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	f003 0307 	and.w	r3, r3, #7
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	220f      	movs	r2, #15
 800ed50:	fa02 f303 	lsl.w	r3, r2, r3
 800ed54:	43db      	mvns	r3, r3
 800ed56:	69ba      	ldr	r2, [r7, #24]
 800ed58:	4013      	ands	r3, r2
 800ed5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	691a      	ldr	r2, [r3, #16]
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	f003 0307 	and.w	r3, r3, #7
 800ed66:	009b      	lsls	r3, r3, #2
 800ed68:	fa02 f303 	lsl.w	r3, r2, r3
 800ed6c:	69ba      	ldr	r2, [r7, #24]
 800ed6e:	4313      	orrs	r3, r2
 800ed70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ed72:	69fb      	ldr	r3, [r7, #28]
 800ed74:	08da      	lsrs	r2, r3, #3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	3208      	adds	r2, #8
 800ed7a:	69b9      	ldr	r1, [r7, #24]
 800ed7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	005b      	lsls	r3, r3, #1
 800ed8a:	2203      	movs	r2, #3
 800ed8c:	fa02 f303 	lsl.w	r3, r2, r3
 800ed90:	43db      	mvns	r3, r3
 800ed92:	69ba      	ldr	r2, [r7, #24]
 800ed94:	4013      	ands	r3, r2
 800ed96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f003 0203 	and.w	r2, r3, #3
 800eda0:	69fb      	ldr	r3, [r7, #28]
 800eda2:	005b      	lsls	r3, r3, #1
 800eda4:	fa02 f303 	lsl.w	r3, r2, r3
 800eda8:	69ba      	ldr	r2, [r7, #24]
 800edaa:	4313      	orrs	r3, r2
 800edac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	69ba      	ldr	r2, [r7, #24]
 800edb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	685b      	ldr	r3, [r3, #4]
 800edb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f000 80a2 	beq.w	800ef06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800edc2:	2300      	movs	r3, #0
 800edc4:	60fb      	str	r3, [r7, #12]
 800edc6:	4b57      	ldr	r3, [pc, #348]	; (800ef24 <HAL_GPIO_Init+0x2e8>)
 800edc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edca:	4a56      	ldr	r2, [pc, #344]	; (800ef24 <HAL_GPIO_Init+0x2e8>)
 800edcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800edd0:	6453      	str	r3, [r2, #68]	; 0x44
 800edd2:	4b54      	ldr	r3, [pc, #336]	; (800ef24 <HAL_GPIO_Init+0x2e8>)
 800edd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800edda:	60fb      	str	r3, [r7, #12]
 800eddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800edde:	4a52      	ldr	r2, [pc, #328]	; (800ef28 <HAL_GPIO_Init+0x2ec>)
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	089b      	lsrs	r3, r3, #2
 800ede4:	3302      	adds	r3, #2
 800ede6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800edec:	69fb      	ldr	r3, [r7, #28]
 800edee:	f003 0303 	and.w	r3, r3, #3
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	220f      	movs	r2, #15
 800edf6:	fa02 f303 	lsl.w	r3, r2, r3
 800edfa:	43db      	mvns	r3, r3
 800edfc:	69ba      	ldr	r2, [r7, #24]
 800edfe:	4013      	ands	r3, r2
 800ee00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	4a49      	ldr	r2, [pc, #292]	; (800ef2c <HAL_GPIO_Init+0x2f0>)
 800ee06:	4293      	cmp	r3, r2
 800ee08:	d019      	beq.n	800ee3e <HAL_GPIO_Init+0x202>
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	4a48      	ldr	r2, [pc, #288]	; (800ef30 <HAL_GPIO_Init+0x2f4>)
 800ee0e:	4293      	cmp	r3, r2
 800ee10:	d013      	beq.n	800ee3a <HAL_GPIO_Init+0x1fe>
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	4a47      	ldr	r2, [pc, #284]	; (800ef34 <HAL_GPIO_Init+0x2f8>)
 800ee16:	4293      	cmp	r3, r2
 800ee18:	d00d      	beq.n	800ee36 <HAL_GPIO_Init+0x1fa>
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	4a46      	ldr	r2, [pc, #280]	; (800ef38 <HAL_GPIO_Init+0x2fc>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	d007      	beq.n	800ee32 <HAL_GPIO_Init+0x1f6>
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	4a45      	ldr	r2, [pc, #276]	; (800ef3c <HAL_GPIO_Init+0x300>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	d101      	bne.n	800ee2e <HAL_GPIO_Init+0x1f2>
 800ee2a:	2304      	movs	r3, #4
 800ee2c:	e008      	b.n	800ee40 <HAL_GPIO_Init+0x204>
 800ee2e:	2307      	movs	r3, #7
 800ee30:	e006      	b.n	800ee40 <HAL_GPIO_Init+0x204>
 800ee32:	2303      	movs	r3, #3
 800ee34:	e004      	b.n	800ee40 <HAL_GPIO_Init+0x204>
 800ee36:	2302      	movs	r3, #2
 800ee38:	e002      	b.n	800ee40 <HAL_GPIO_Init+0x204>
 800ee3a:	2301      	movs	r3, #1
 800ee3c:	e000      	b.n	800ee40 <HAL_GPIO_Init+0x204>
 800ee3e:	2300      	movs	r3, #0
 800ee40:	69fa      	ldr	r2, [r7, #28]
 800ee42:	f002 0203 	and.w	r2, r2, #3
 800ee46:	0092      	lsls	r2, r2, #2
 800ee48:	4093      	lsls	r3, r2
 800ee4a:	69ba      	ldr	r2, [r7, #24]
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ee50:	4935      	ldr	r1, [pc, #212]	; (800ef28 <HAL_GPIO_Init+0x2ec>)
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	089b      	lsrs	r3, r3, #2
 800ee56:	3302      	adds	r3, #2
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ee5e:	4b38      	ldr	r3, [pc, #224]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	43db      	mvns	r3, r3
 800ee68:	69ba      	ldr	r2, [r7, #24]
 800ee6a:	4013      	ands	r3, r2
 800ee6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685b      	ldr	r3, [r3, #4]
 800ee72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d003      	beq.n	800ee82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ee7a:	69ba      	ldr	r2, [r7, #24]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	4313      	orrs	r3, r2
 800ee80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ee82:	4a2f      	ldr	r2, [pc, #188]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800ee84:	69bb      	ldr	r3, [r7, #24]
 800ee86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ee88:	4b2d      	ldr	r3, [pc, #180]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800ee8a:	685b      	ldr	r3, [r3, #4]
 800ee8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	43db      	mvns	r3, r3
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	4013      	ands	r3, r2
 800ee96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	685b      	ldr	r3, [r3, #4]
 800ee9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d003      	beq.n	800eeac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800eea4:	69ba      	ldr	r2, [r7, #24]
 800eea6:	693b      	ldr	r3, [r7, #16]
 800eea8:	4313      	orrs	r3, r2
 800eeaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800eeac:	4a24      	ldr	r2, [pc, #144]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800eeb2:	4b23      	ldr	r3, [pc, #140]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800eeb4:	689b      	ldr	r3, [r3, #8]
 800eeb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800eeb8:	693b      	ldr	r3, [r7, #16]
 800eeba:	43db      	mvns	r3, r3
 800eebc:	69ba      	ldr	r2, [r7, #24]
 800eebe:	4013      	ands	r3, r2
 800eec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800eec2:	683b      	ldr	r3, [r7, #0]
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d003      	beq.n	800eed6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800eece:	69ba      	ldr	r2, [r7, #24]
 800eed0:	693b      	ldr	r3, [r7, #16]
 800eed2:	4313      	orrs	r3, r2
 800eed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800eed6:	4a1a      	ldr	r2, [pc, #104]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800eed8:	69bb      	ldr	r3, [r7, #24]
 800eeda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800eedc:	4b18      	ldr	r3, [pc, #96]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800eede:	68db      	ldr	r3, [r3, #12]
 800eee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800eee2:	693b      	ldr	r3, [r7, #16]
 800eee4:	43db      	mvns	r3, r3
 800eee6:	69ba      	ldr	r2, [r7, #24]
 800eee8:	4013      	ands	r3, r2
 800eeea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d003      	beq.n	800ef00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800eef8:	69ba      	ldr	r2, [r7, #24]
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	4313      	orrs	r3, r2
 800eefe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ef00:	4a0f      	ldr	r2, [pc, #60]	; (800ef40 <HAL_GPIO_Init+0x304>)
 800ef02:	69bb      	ldr	r3, [r7, #24]
 800ef04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	3301      	adds	r3, #1
 800ef0a:	61fb      	str	r3, [r7, #28]
 800ef0c:	69fb      	ldr	r3, [r7, #28]
 800ef0e:	2b0f      	cmp	r3, #15
 800ef10:	f67f aea2 	bls.w	800ec58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800ef14:	bf00      	nop
 800ef16:	bf00      	nop
 800ef18:	3724      	adds	r7, #36	; 0x24
 800ef1a:	46bd      	mov	sp, r7
 800ef1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef20:	4770      	bx	lr
 800ef22:	bf00      	nop
 800ef24:	40023800 	.word	0x40023800
 800ef28:	40013800 	.word	0x40013800
 800ef2c:	40020000 	.word	0x40020000
 800ef30:	40020400 	.word	0x40020400
 800ef34:	40020800 	.word	0x40020800
 800ef38:	40020c00 	.word	0x40020c00
 800ef3c:	40021000 	.word	0x40021000
 800ef40:	40013c00 	.word	0x40013c00

0800ef44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	691a      	ldr	r2, [r3, #16]
 800ef54:	887b      	ldrh	r3, [r7, #2]
 800ef56:	4013      	ands	r3, r2
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d002      	beq.n	800ef62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800ef5c:	2301      	movs	r3, #1
 800ef5e:	73fb      	strb	r3, [r7, #15]
 800ef60:	e001      	b.n	800ef66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800ef62:	2300      	movs	r3, #0
 800ef64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800ef66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b083      	sub	sp, #12
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	460b      	mov	r3, r1
 800ef7e:	807b      	strh	r3, [r7, #2]
 800ef80:	4613      	mov	r3, r2
 800ef82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800ef84:	787b      	ldrb	r3, [r7, #1]
 800ef86:	2b00      	cmp	r3, #0
 800ef88:	d003      	beq.n	800ef92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ef8a:	887a      	ldrh	r2, [r7, #2]
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800ef90:	e003      	b.n	800ef9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800ef92:	887b      	ldrh	r3, [r7, #2]
 800ef94:	041a      	lsls	r2, r3, #16
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	619a      	str	r2, [r3, #24]
}
 800ef9a:	bf00      	nop
 800ef9c:	370c      	adds	r7, #12
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr

0800efa6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800efa6:	b480      	push	{r7}
 800efa8:	b085      	sub	sp, #20
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
 800efae:	460b      	mov	r3, r1
 800efb0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	695b      	ldr	r3, [r3, #20]
 800efb6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800efb8:	887a      	ldrh	r2, [r7, #2]
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	4013      	ands	r3, r2
 800efbe:	041a      	lsls	r2, r3, #16
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	43d9      	mvns	r1, r3
 800efc4:	887b      	ldrh	r3, [r7, #2]
 800efc6:	400b      	ands	r3, r1
 800efc8:	431a      	orrs	r2, r3
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	619a      	str	r2, [r3, #24]
}
 800efce:	bf00      	nop
 800efd0:	3714      	adds	r7, #20
 800efd2:	46bd      	mov	sp, r7
 800efd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd8:	4770      	bx	lr

0800efda <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800efda:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efdc:	b08f      	sub	sp, #60	; 0x3c
 800efde:	af0a      	add	r7, sp, #40	; 0x28
 800efe0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d101      	bne.n	800efec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800efe8:	2301      	movs	r3, #1
 800efea:	e10f      	b.n	800f20c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800eff8:	b2db      	uxtb	r3, r3
 800effa:	2b00      	cmp	r3, #0
 800effc:	d106      	bne.n	800f00c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	2200      	movs	r2, #0
 800f002:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f7fa fa0a 	bl	8009420 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	2203      	movs	r2, #3
 800f010:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d102      	bne.n	800f026 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2200      	movs	r2, #0
 800f024:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f004 fcbd 	bl	80139aa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	603b      	str	r3, [r7, #0]
 800f036:	687e      	ldr	r6, [r7, #4]
 800f038:	466d      	mov	r5, sp
 800f03a:	f106 0410 	add.w	r4, r6, #16
 800f03e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f040:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f042:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f044:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f046:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f04a:	e885 0003 	stmia.w	r5, {r0, r1}
 800f04e:	1d33      	adds	r3, r6, #4
 800f050:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f052:	6838      	ldr	r0, [r7, #0]
 800f054:	f004 fb94 	bl	8013780 <USB_CoreInit>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d005      	beq.n	800f06a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	2202      	movs	r2, #2
 800f062:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800f066:	2301      	movs	r3, #1
 800f068:	e0d0      	b.n	800f20c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	2100      	movs	r1, #0
 800f070:	4618      	mov	r0, r3
 800f072:	f004 fcab 	bl	80139cc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f076:	2300      	movs	r3, #0
 800f078:	73fb      	strb	r3, [r7, #15]
 800f07a:	e04a      	b.n	800f112 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f07c:	7bfa      	ldrb	r2, [r7, #15]
 800f07e:	6879      	ldr	r1, [r7, #4]
 800f080:	4613      	mov	r3, r2
 800f082:	00db      	lsls	r3, r3, #3
 800f084:	1a9b      	subs	r3, r3, r2
 800f086:	009b      	lsls	r3, r3, #2
 800f088:	440b      	add	r3, r1
 800f08a:	333d      	adds	r3, #61	; 0x3d
 800f08c:	2201      	movs	r2, #1
 800f08e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f090:	7bfa      	ldrb	r2, [r7, #15]
 800f092:	6879      	ldr	r1, [r7, #4]
 800f094:	4613      	mov	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	1a9b      	subs	r3, r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	440b      	add	r3, r1
 800f09e:	333c      	adds	r3, #60	; 0x3c
 800f0a0:	7bfa      	ldrb	r2, [r7, #15]
 800f0a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f0a4:	7bfa      	ldrb	r2, [r7, #15]
 800f0a6:	7bfb      	ldrb	r3, [r7, #15]
 800f0a8:	b298      	uxth	r0, r3
 800f0aa:	6879      	ldr	r1, [r7, #4]
 800f0ac:	4613      	mov	r3, r2
 800f0ae:	00db      	lsls	r3, r3, #3
 800f0b0:	1a9b      	subs	r3, r3, r2
 800f0b2:	009b      	lsls	r3, r3, #2
 800f0b4:	440b      	add	r3, r1
 800f0b6:	3342      	adds	r3, #66	; 0x42
 800f0b8:	4602      	mov	r2, r0
 800f0ba:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f0bc:	7bfa      	ldrb	r2, [r7, #15]
 800f0be:	6879      	ldr	r1, [r7, #4]
 800f0c0:	4613      	mov	r3, r2
 800f0c2:	00db      	lsls	r3, r3, #3
 800f0c4:	1a9b      	subs	r3, r3, r2
 800f0c6:	009b      	lsls	r3, r3, #2
 800f0c8:	440b      	add	r3, r1
 800f0ca:	333f      	adds	r3, #63	; 0x3f
 800f0cc:	2200      	movs	r2, #0
 800f0ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f0d0:	7bfa      	ldrb	r2, [r7, #15]
 800f0d2:	6879      	ldr	r1, [r7, #4]
 800f0d4:	4613      	mov	r3, r2
 800f0d6:	00db      	lsls	r3, r3, #3
 800f0d8:	1a9b      	subs	r3, r3, r2
 800f0da:	009b      	lsls	r3, r3, #2
 800f0dc:	440b      	add	r3, r1
 800f0de:	3344      	adds	r3, #68	; 0x44
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f0e4:	7bfa      	ldrb	r2, [r7, #15]
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	1a9b      	subs	r3, r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	440b      	add	r3, r1
 800f0f2:	3348      	adds	r3, #72	; 0x48
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f0f8:	7bfa      	ldrb	r2, [r7, #15]
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	4613      	mov	r3, r2
 800f0fe:	00db      	lsls	r3, r3, #3
 800f100:	1a9b      	subs	r3, r3, r2
 800f102:	009b      	lsls	r3, r3, #2
 800f104:	440b      	add	r3, r1
 800f106:	3350      	adds	r3, #80	; 0x50
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f10c:	7bfb      	ldrb	r3, [r7, #15]
 800f10e:	3301      	adds	r3, #1
 800f110:	73fb      	strb	r3, [r7, #15]
 800f112:	7bfa      	ldrb	r2, [r7, #15]
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	685b      	ldr	r3, [r3, #4]
 800f118:	429a      	cmp	r2, r3
 800f11a:	d3af      	bcc.n	800f07c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f11c:	2300      	movs	r3, #0
 800f11e:	73fb      	strb	r3, [r7, #15]
 800f120:	e044      	b.n	800f1ac <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f122:	7bfa      	ldrb	r2, [r7, #15]
 800f124:	6879      	ldr	r1, [r7, #4]
 800f126:	4613      	mov	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	440b      	add	r3, r1
 800f130:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800f134:	2200      	movs	r2, #0
 800f136:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f138:	7bfa      	ldrb	r2, [r7, #15]
 800f13a:	6879      	ldr	r1, [r7, #4]
 800f13c:	4613      	mov	r3, r2
 800f13e:	00db      	lsls	r3, r3, #3
 800f140:	1a9b      	subs	r3, r3, r2
 800f142:	009b      	lsls	r3, r3, #2
 800f144:	440b      	add	r3, r1
 800f146:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800f14a:	7bfa      	ldrb	r2, [r7, #15]
 800f14c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f14e:	7bfa      	ldrb	r2, [r7, #15]
 800f150:	6879      	ldr	r1, [r7, #4]
 800f152:	4613      	mov	r3, r2
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	1a9b      	subs	r3, r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	440b      	add	r3, r1
 800f15c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f160:	2200      	movs	r2, #0
 800f162:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f164:	7bfa      	ldrb	r2, [r7, #15]
 800f166:	6879      	ldr	r1, [r7, #4]
 800f168:	4613      	mov	r3, r2
 800f16a:	00db      	lsls	r3, r3, #3
 800f16c:	1a9b      	subs	r3, r3, r2
 800f16e:	009b      	lsls	r3, r3, #2
 800f170:	440b      	add	r3, r1
 800f172:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800f176:	2200      	movs	r2, #0
 800f178:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f17a:	7bfa      	ldrb	r2, [r7, #15]
 800f17c:	6879      	ldr	r1, [r7, #4]
 800f17e:	4613      	mov	r3, r2
 800f180:	00db      	lsls	r3, r3, #3
 800f182:	1a9b      	subs	r3, r3, r2
 800f184:	009b      	lsls	r3, r3, #2
 800f186:	440b      	add	r3, r1
 800f188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800f18c:	2200      	movs	r2, #0
 800f18e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f190:	7bfa      	ldrb	r2, [r7, #15]
 800f192:	6879      	ldr	r1, [r7, #4]
 800f194:	4613      	mov	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	1a9b      	subs	r3, r3, r2
 800f19a:	009b      	lsls	r3, r3, #2
 800f19c:	440b      	add	r3, r1
 800f19e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f1a6:	7bfb      	ldrb	r3, [r7, #15]
 800f1a8:	3301      	adds	r3, #1
 800f1aa:	73fb      	strb	r3, [r7, #15]
 800f1ac:	7bfa      	ldrb	r2, [r7, #15]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	685b      	ldr	r3, [r3, #4]
 800f1b2:	429a      	cmp	r2, r3
 800f1b4:	d3b5      	bcc.n	800f122 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	603b      	str	r3, [r7, #0]
 800f1bc:	687e      	ldr	r6, [r7, #4]
 800f1be:	466d      	mov	r5, sp
 800f1c0:	f106 0410 	add.w	r4, r6, #16
 800f1c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1c8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f1ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f1cc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f1d0:	e885 0003 	stmia.w	r5, {r0, r1}
 800f1d4:	1d33      	adds	r3, r6, #4
 800f1d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f1d8:	6838      	ldr	r0, [r7, #0]
 800f1da:	f004 fc21 	bl	8013a20 <USB_DevInit>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d005      	beq.n	800f1f0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	2202      	movs	r2, #2
 800f1e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e00d      	b.n	800f20c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	2200      	movs	r2, #0
 800f1f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	2201      	movs	r2, #1
 800f1fc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	4618      	mov	r0, r3
 800f206:	f005 fc69 	bl	8014adc <USB_DevDisconnect>

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3714      	adds	r7, #20
 800f210:	46bd      	mov	sp, r7
 800f212:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f214 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f214:	b580      	push	{r7, lr}
 800f216:	b084      	sub	sp, #16
 800f218:	af00      	add	r7, sp, #0
 800f21a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f228:	2b01      	cmp	r3, #1
 800f22a:	d101      	bne.n	800f230 <HAL_PCD_Start+0x1c>
 800f22c:	2302      	movs	r3, #2
 800f22e:	e020      	b.n	800f272 <HAL_PCD_Start+0x5e>
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	2201      	movs	r2, #1
 800f234:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f23c:	2b01      	cmp	r3, #1
 800f23e:	d109      	bne.n	800f254 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f244:	2b01      	cmp	r3, #1
 800f246:	d005      	beq.n	800f254 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f24c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4618      	mov	r0, r3
 800f25a:	f004 fb95 	bl	8013988 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	4618      	mov	r0, r3
 800f264:	f005 fc19 	bl	8014a9a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2200      	movs	r2, #0
 800f26c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f270:	2300      	movs	r3, #0
}
 800f272:	4618      	mov	r0, r3
 800f274:	3710      	adds	r7, #16
 800f276:	46bd      	mov	sp, r7
 800f278:	bd80      	pop	{r7, pc}

0800f27a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f27a:	b590      	push	{r4, r7, lr}
 800f27c:	b08d      	sub	sp, #52	; 0x34
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f288:	6a3b      	ldr	r3, [r7, #32]
 800f28a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	4618      	mov	r0, r3
 800f292:	f005 fcd7 	bl	8014c44 <USB_GetMode>
 800f296:	4603      	mov	r3, r0
 800f298:	2b00      	cmp	r3, #0
 800f29a:	f040 839d 	bne.w	800f9d8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	f005 fc3b 	bl	8014b1e <USB_ReadInterrupts>
 800f2a8:	4603      	mov	r3, r0
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	f000 8393 	beq.w	800f9d6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f005 fc32 	bl	8014b1e <USB_ReadInterrupts>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	f003 0302 	and.w	r3, r3, #2
 800f2c0:	2b02      	cmp	r3, #2
 800f2c2:	d107      	bne.n	800f2d4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	681b      	ldr	r3, [r3, #0]
 800f2c8:	695a      	ldr	r2, [r3, #20]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	f002 0202 	and.w	r2, r2, #2
 800f2d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f005 fc20 	bl	8014b1e <USB_ReadInterrupts>
 800f2de:	4603      	mov	r3, r0
 800f2e0:	f003 0310 	and.w	r3, r3, #16
 800f2e4:	2b10      	cmp	r3, #16
 800f2e6:	d161      	bne.n	800f3ac <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	699a      	ldr	r2, [r3, #24]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	f022 0210 	bic.w	r2, r2, #16
 800f2f6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800f2f8:	6a3b      	ldr	r3, [r7, #32]
 800f2fa:	6a1b      	ldr	r3, [r3, #32]
 800f2fc:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800f2fe:	69bb      	ldr	r3, [r7, #24]
 800f300:	f003 020f 	and.w	r2, r3, #15
 800f304:	4613      	mov	r3, r2
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	1a9b      	subs	r3, r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	4413      	add	r3, r2
 800f314:	3304      	adds	r3, #4
 800f316:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f318:	69bb      	ldr	r3, [r7, #24]
 800f31a:	0c5b      	lsrs	r3, r3, #17
 800f31c:	f003 030f 	and.w	r3, r3, #15
 800f320:	2b02      	cmp	r3, #2
 800f322:	d124      	bne.n	800f36e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f324:	69ba      	ldr	r2, [r7, #24]
 800f326:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f32a:	4013      	ands	r3, r2
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d035      	beq.n	800f39c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	091b      	lsrs	r3, r3, #4
 800f338:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f33a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f33e:	b29b      	uxth	r3, r3
 800f340:	461a      	mov	r2, r3
 800f342:	6a38      	ldr	r0, [r7, #32]
 800f344:	f005 fa86 	bl	8014854 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f348:	697b      	ldr	r3, [r7, #20]
 800f34a:	68da      	ldr	r2, [r3, #12]
 800f34c:	69bb      	ldr	r3, [r7, #24]
 800f34e:	091b      	lsrs	r3, r3, #4
 800f350:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f354:	441a      	add	r2, r3
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f35a:	697b      	ldr	r3, [r7, #20]
 800f35c:	699a      	ldr	r2, [r3, #24]
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	091b      	lsrs	r3, r3, #4
 800f362:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f366:	441a      	add	r2, r3
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	619a      	str	r2, [r3, #24]
 800f36c:	e016      	b.n	800f39c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800f36e:	69bb      	ldr	r3, [r7, #24]
 800f370:	0c5b      	lsrs	r3, r3, #17
 800f372:	f003 030f 	and.w	r3, r3, #15
 800f376:	2b06      	cmp	r3, #6
 800f378:	d110      	bne.n	800f39c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f380:	2208      	movs	r2, #8
 800f382:	4619      	mov	r1, r3
 800f384:	6a38      	ldr	r0, [r7, #32]
 800f386:	f005 fa65 	bl	8014854 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f38a:	697b      	ldr	r3, [r7, #20]
 800f38c:	699a      	ldr	r2, [r3, #24]
 800f38e:	69bb      	ldr	r3, [r7, #24]
 800f390:	091b      	lsrs	r3, r3, #4
 800f392:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f396:	441a      	add	r2, r3
 800f398:	697b      	ldr	r3, [r7, #20]
 800f39a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	699a      	ldr	r2, [r3, #24]
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	f042 0210 	orr.w	r2, r2, #16
 800f3aa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f005 fbb4 	bl	8014b1e <USB_ReadInterrupts>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f3bc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f3c0:	d16e      	bne.n	800f4a0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800f3c2:	2300      	movs	r3, #0
 800f3c4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	4618      	mov	r0, r3
 800f3cc:	f005 fbba 	bl	8014b44 <USB_ReadDevAllOutEpInterrupt>
 800f3d0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f3d2:	e062      	b.n	800f49a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d6:	f003 0301 	and.w	r3, r3, #1
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d057      	beq.n	800f48e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f3e4:	b2d2      	uxtb	r2, r2
 800f3e6:	4611      	mov	r1, r2
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f005 fbdf 	bl	8014bac <USB_ReadDevOutEPInterrupt>
 800f3ee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f3f0:	693b      	ldr	r3, [r7, #16]
 800f3f2:	f003 0301 	and.w	r3, r3, #1
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00c      	beq.n	800f414 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3fc:	015a      	lsls	r2, r3, #5
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	4413      	add	r3, r2
 800f402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f406:	461a      	mov	r2, r3
 800f408:	2301      	movs	r3, #1
 800f40a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f40c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f40e:	6878      	ldr	r0, [r7, #4]
 800f410:	f000 fdde 	bl	800ffd0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	f003 0308 	and.w	r3, r3, #8
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00c      	beq.n	800f438 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f41e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f420:	015a      	lsls	r2, r3, #5
 800f422:	69fb      	ldr	r3, [r7, #28]
 800f424:	4413      	add	r3, r2
 800f426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f42a:	461a      	mov	r2, r3
 800f42c:	2308      	movs	r3, #8
 800f42e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f430:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f432:	6878      	ldr	r0, [r7, #4]
 800f434:	f000 fed8 	bl	80101e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f438:	693b      	ldr	r3, [r7, #16]
 800f43a:	f003 0310 	and.w	r3, r3, #16
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d008      	beq.n	800f454 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f444:	015a      	lsls	r2, r3, #5
 800f446:	69fb      	ldr	r3, [r7, #28]
 800f448:	4413      	add	r3, r2
 800f44a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f44e:	461a      	mov	r2, r3
 800f450:	2310      	movs	r3, #16
 800f452:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f454:	693b      	ldr	r3, [r7, #16]
 800f456:	f003 0320 	and.w	r3, r3, #32
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d008      	beq.n	800f470 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f460:	015a      	lsls	r2, r3, #5
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	4413      	add	r3, r2
 800f466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f46a:	461a      	mov	r2, r3
 800f46c:	2320      	movs	r3, #32
 800f46e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f470:	693b      	ldr	r3, [r7, #16]
 800f472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f476:	2b00      	cmp	r3, #0
 800f478:	d009      	beq.n	800f48e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f47a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f47c:	015a      	lsls	r2, r3, #5
 800f47e:	69fb      	ldr	r3, [r7, #28]
 800f480:	4413      	add	r3, r2
 800f482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f486:	461a      	mov	r2, r3
 800f488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f48c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f490:	3301      	adds	r3, #1
 800f492:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	085b      	lsrs	r3, r3, #1
 800f498:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d199      	bne.n	800f3d4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f005 fb3a 	bl	8014b1e <USB_ReadInterrupts>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f4b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f4b4:	f040 80c0 	bne.w	800f638 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f005 fb5b 	bl	8014b78 <USB_ReadDevAllInEpInterrupt>
 800f4c2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f4c8:	e0b2      	b.n	800f630 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f4ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4cc:	f003 0301 	and.w	r3, r3, #1
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	f000 80a7 	beq.w	800f624 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4dc:	b2d2      	uxtb	r2, r2
 800f4de:	4611      	mov	r1, r2
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	f005 fb81 	bl	8014be8 <USB_ReadDevInEPInterrupt>
 800f4e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f4e8:	693b      	ldr	r3, [r7, #16]
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d057      	beq.n	800f5a2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4f4:	f003 030f 	and.w	r3, r3, #15
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	fa02 f303 	lsl.w	r3, r2, r3
 800f4fe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f500:	69fb      	ldr	r3, [r7, #28]
 800f502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f506:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	43db      	mvns	r3, r3
 800f50c:	69f9      	ldr	r1, [r7, #28]
 800f50e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f512:	4013      	ands	r3, r2
 800f514:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f518:	015a      	lsls	r2, r3, #5
 800f51a:	69fb      	ldr	r3, [r7, #28]
 800f51c:	4413      	add	r3, r2
 800f51e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f522:	461a      	mov	r2, r3
 800f524:	2301      	movs	r3, #1
 800f526:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	691b      	ldr	r3, [r3, #16]
 800f52c:	2b01      	cmp	r3, #1
 800f52e:	d132      	bne.n	800f596 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f530:	6879      	ldr	r1, [r7, #4]
 800f532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f534:	4613      	mov	r3, r2
 800f536:	00db      	lsls	r3, r3, #3
 800f538:	1a9b      	subs	r3, r3, r2
 800f53a:	009b      	lsls	r3, r3, #2
 800f53c:	440b      	add	r3, r1
 800f53e:	3348      	adds	r3, #72	; 0x48
 800f540:	6819      	ldr	r1, [r3, #0]
 800f542:	6878      	ldr	r0, [r7, #4]
 800f544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f546:	4613      	mov	r3, r2
 800f548:	00db      	lsls	r3, r3, #3
 800f54a:	1a9b      	subs	r3, r3, r2
 800f54c:	009b      	lsls	r3, r3, #2
 800f54e:	4403      	add	r3, r0
 800f550:	3344      	adds	r3, #68	; 0x44
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	4419      	add	r1, r3
 800f556:	6878      	ldr	r0, [r7, #4]
 800f558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f55a:	4613      	mov	r3, r2
 800f55c:	00db      	lsls	r3, r3, #3
 800f55e:	1a9b      	subs	r3, r3, r2
 800f560:	009b      	lsls	r3, r3, #2
 800f562:	4403      	add	r3, r0
 800f564:	3348      	adds	r3, #72	; 0x48
 800f566:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d113      	bne.n	800f596 <HAL_PCD_IRQHandler+0x31c>
 800f56e:	6879      	ldr	r1, [r7, #4]
 800f570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f572:	4613      	mov	r3, r2
 800f574:	00db      	lsls	r3, r3, #3
 800f576:	1a9b      	subs	r3, r3, r2
 800f578:	009b      	lsls	r3, r3, #2
 800f57a:	440b      	add	r3, r1
 800f57c:	3350      	adds	r3, #80	; 0x50
 800f57e:	681b      	ldr	r3, [r3, #0]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d108      	bne.n	800f596 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	6818      	ldr	r0, [r3, #0]
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f58e:	461a      	mov	r2, r3
 800f590:	2101      	movs	r1, #1
 800f592:	f005 fb89 	bl	8014ca8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	4619      	mov	r1, r3
 800f59c:	6878      	ldr	r0, [r7, #4]
 800f59e:	f7f9 ffc0 	bl	8009522 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	f003 0308 	and.w	r3, r3, #8
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d008      	beq.n	800f5be <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f5ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ae:	015a      	lsls	r2, r3, #5
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	4413      	add	r3, r2
 800f5b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b8:	461a      	mov	r2, r3
 800f5ba:	2308      	movs	r3, #8
 800f5bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f5be:	693b      	ldr	r3, [r7, #16]
 800f5c0:	f003 0310 	and.w	r3, r3, #16
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d008      	beq.n	800f5da <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ca:	015a      	lsls	r2, r3, #5
 800f5cc:	69fb      	ldr	r3, [r7, #28]
 800f5ce:	4413      	add	r3, r2
 800f5d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5d4:	461a      	mov	r2, r3
 800f5d6:	2310      	movs	r3, #16
 800f5d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d008      	beq.n	800f5f6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	015a      	lsls	r2, r3, #5
 800f5e8:	69fb      	ldr	r3, [r7, #28]
 800f5ea:	4413      	add	r3, r2
 800f5ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	2340      	movs	r3, #64	; 0x40
 800f5f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	f003 0302 	and.w	r3, r3, #2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d008      	beq.n	800f612 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	015a      	lsls	r2, r3, #5
 800f604:	69fb      	ldr	r3, [r7, #28]
 800f606:	4413      	add	r3, r2
 800f608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f60c:	461a      	mov	r2, r3
 800f60e:	2302      	movs	r3, #2
 800f610:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d003      	beq.n	800f624 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f61c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f61e:	6878      	ldr	r0, [r7, #4]
 800f620:	f000 fc48 	bl	800feb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f626:	3301      	adds	r3, #1
 800f628:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f62c:	085b      	lsrs	r3, r3, #1
 800f62e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f632:	2b00      	cmp	r3, #0
 800f634:	f47f af49 	bne.w	800f4ca <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	4618      	mov	r0, r3
 800f63e:	f005 fa6e 	bl	8014b1e <USB_ReadInterrupts>
 800f642:	4603      	mov	r3, r0
 800f644:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f648:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f64c:	d122      	bne.n	800f694 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f654:	685b      	ldr	r3, [r3, #4]
 800f656:	69fa      	ldr	r2, [r7, #28]
 800f658:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f65c:	f023 0301 	bic.w	r3, r3, #1
 800f660:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800f668:	2b01      	cmp	r3, #1
 800f66a:	d108      	bne.n	800f67e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	2200      	movs	r2, #0
 800f670:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f674:	2100      	movs	r1, #0
 800f676:	6878      	ldr	r0, [r7, #4]
 800f678:	f000 fe54 	bl	8010324 <HAL_PCDEx_LPM_Callback>
 800f67c:	e002      	b.n	800f684 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7f9 ffbc 	bl	80095fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	695a      	ldr	r2, [r3, #20]
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	681b      	ldr	r3, [r3, #0]
 800f68e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	4618      	mov	r0, r3
 800f69a:	f005 fa40 	bl	8014b1e <USB_ReadInterrupts>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f6a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f6a8:	d112      	bne.n	800f6d0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b0:	689b      	ldr	r3, [r3, #8]
 800f6b2:	f003 0301 	and.w	r3, r3, #1
 800f6b6:	2b01      	cmp	r3, #1
 800f6b8:	d102      	bne.n	800f6c0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f6ba:	6878      	ldr	r0, [r7, #4]
 800f6bc:	f7f9 ff78 	bl	80095b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	681b      	ldr	r3, [r3, #0]
 800f6c4:	695a      	ldr	r2, [r3, #20]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f6ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	f005 fa22 	bl	8014b1e <USB_ReadInterrupts>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f6e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6e4:	f040 80c7 	bne.w	800f876 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f6e8:	69fb      	ldr	r3, [r7, #28]
 800f6ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6ee:	685b      	ldr	r3, [r3, #4]
 800f6f0:	69fa      	ldr	r2, [r7, #28]
 800f6f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f6f6:	f023 0301 	bic.w	r3, r3, #1
 800f6fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	2110      	movs	r1, #16
 800f702:	4618      	mov	r0, r3
 800f704:	f004 faf0 	bl	8013ce8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f708:	2300      	movs	r3, #0
 800f70a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f70c:	e056      	b.n	800f7bc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f70e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f710:	015a      	lsls	r2, r3, #5
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	4413      	add	r3, r2
 800f716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f71a:	461a      	mov	r2, r3
 800f71c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f720:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f724:	015a      	lsls	r2, r3, #5
 800f726:	69fb      	ldr	r3, [r7, #28]
 800f728:	4413      	add	r3, r2
 800f72a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f72e:	681b      	ldr	r3, [r3, #0]
 800f730:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f732:	0151      	lsls	r1, r2, #5
 800f734:	69fa      	ldr	r2, [r7, #28]
 800f736:	440a      	add	r2, r1
 800f738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f73c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f740:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f744:	015a      	lsls	r2, r3, #5
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	4413      	add	r3, r2
 800f74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f74e:	681b      	ldr	r3, [r3, #0]
 800f750:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f752:	0151      	lsls	r1, r2, #5
 800f754:	69fa      	ldr	r2, [r7, #28]
 800f756:	440a      	add	r2, r1
 800f758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f75c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f760:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f764:	015a      	lsls	r2, r3, #5
 800f766:	69fb      	ldr	r3, [r7, #28]
 800f768:	4413      	add	r3, r2
 800f76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f76e:	461a      	mov	r2, r3
 800f770:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f774:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f778:	015a      	lsls	r2, r3, #5
 800f77a:	69fb      	ldr	r3, [r7, #28]
 800f77c:	4413      	add	r3, r2
 800f77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f786:	0151      	lsls	r1, r2, #5
 800f788:	69fa      	ldr	r2, [r7, #28]
 800f78a:	440a      	add	r2, r1
 800f78c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f790:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f794:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f798:	015a      	lsls	r2, r3, #5
 800f79a:	69fb      	ldr	r3, [r7, #28]
 800f79c:	4413      	add	r3, r2
 800f79e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7a6:	0151      	lsls	r1, r2, #5
 800f7a8:	69fa      	ldr	r2, [r7, #28]
 800f7aa:	440a      	add	r2, r1
 800f7ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f7b0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f7b4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f7b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b8:	3301      	adds	r3, #1
 800f7ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	685b      	ldr	r3, [r3, #4]
 800f7c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f7c2:	429a      	cmp	r2, r3
 800f7c4:	d3a3      	bcc.n	800f70e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f7c6:	69fb      	ldr	r3, [r7, #28]
 800f7c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7cc:	69db      	ldr	r3, [r3, #28]
 800f7ce:	69fa      	ldr	r2, [r7, #28]
 800f7d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7d4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f7d8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d016      	beq.n	800f810 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f7e2:	69fb      	ldr	r3, [r7, #28]
 800f7e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f7e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f7ec:	69fa      	ldr	r2, [r7, #28]
 800f7ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f7f2:	f043 030b 	orr.w	r3, r3, #11
 800f7f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f7fa:	69fb      	ldr	r3, [r7, #28]
 800f7fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f802:	69fa      	ldr	r2, [r7, #28]
 800f804:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f808:	f043 030b 	orr.w	r3, r3, #11
 800f80c:	6453      	str	r3, [r2, #68]	; 0x44
 800f80e:	e015      	b.n	800f83c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f816:	695b      	ldr	r3, [r3, #20]
 800f818:	69fa      	ldr	r2, [r7, #28]
 800f81a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f81e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f822:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f826:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f828:	69fb      	ldr	r3, [r7, #28]
 800f82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f82e:	691b      	ldr	r3, [r3, #16]
 800f830:	69fa      	ldr	r2, [r7, #28]
 800f832:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f836:	f043 030b 	orr.w	r3, r3, #11
 800f83a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	69fa      	ldr	r2, [r7, #28]
 800f846:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f84a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f84e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	6818      	ldr	r0, [r3, #0]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	691b      	ldr	r3, [r3, #16]
 800f858:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f860:	461a      	mov	r2, r3
 800f862:	f005 fa21 	bl	8014ca8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	695a      	ldr	r2, [r3, #20]
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f874:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f005 f94f 	bl	8014b1e <USB_ReadInterrupts>
 800f880:	4603      	mov	r3, r0
 800f882:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f886:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f88a:	d124      	bne.n	800f8d6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	4618      	mov	r0, r3
 800f892:	f005 f9e5 	bl	8014c60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	681b      	ldr	r3, [r3, #0]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f004 fa85 	bl	8013daa <USB_GetDevSpeed>
 800f8a0:	4603      	mov	r3, r0
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681c      	ldr	r4, [r3, #0]
 800f8ac:	f001 f95a 	bl	8010b64 <HAL_RCC_GetHCLKFreq>
 800f8b0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f8b6:	b2db      	uxtb	r3, r3
 800f8b8:	461a      	mov	r2, r3
 800f8ba:	4620      	mov	r0, r4
 800f8bc:	f003 ffc2 	bl	8013844 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f8c0:	6878      	ldr	r0, [r7, #4]
 800f8c2:	f7f9 fe56 	bl	8009572 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	695a      	ldr	r2, [r3, #20]
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f8d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f005 f91f 	bl	8014b1e <USB_ReadInterrupts>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	f003 0308 	and.w	r3, r3, #8
 800f8e6:	2b08      	cmp	r3, #8
 800f8e8:	d10a      	bne.n	800f900 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f7f9 fe33 	bl	8009556 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	695a      	ldr	r2, [r3, #20]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f002 0208 	and.w	r2, r2, #8
 800f8fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	4618      	mov	r0, r3
 800f906:	f005 f90a 	bl	8014b1e <USB_ReadInterrupts>
 800f90a:	4603      	mov	r3, r0
 800f90c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f914:	d10f      	bne.n	800f936 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f916:	2300      	movs	r3, #0
 800f918:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f91c:	b2db      	uxtb	r3, r3
 800f91e:	4619      	mov	r1, r3
 800f920:	6878      	ldr	r0, [r7, #4]
 800f922:	f7f9 fe8b 	bl	800963c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	695a      	ldr	r2, [r3, #20]
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f934:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4618      	mov	r0, r3
 800f93c:	f005 f8ef 	bl	8014b1e <USB_ReadInterrupts>
 800f940:	4603      	mov	r3, r0
 800f942:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f946:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f94a:	d10f      	bne.n	800f96c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f94c:	2300      	movs	r3, #0
 800f94e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f952:	b2db      	uxtb	r3, r3
 800f954:	4619      	mov	r1, r3
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f7f9 fe5e 	bl	8009618 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	695a      	ldr	r2, [r3, #20]
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f96a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	4618      	mov	r0, r3
 800f972:	f005 f8d4 	bl	8014b1e <USB_ReadInterrupts>
 800f976:	4603      	mov	r3, r0
 800f978:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f97c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f980:	d10a      	bne.n	800f998 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f982:	6878      	ldr	r0, [r7, #4]
 800f984:	f7f9 fe6c 	bl	8009660 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	695a      	ldr	r2, [r3, #20]
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	4618      	mov	r0, r3
 800f99e:	f005 f8be 	bl	8014b1e <USB_ReadInterrupts>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	f003 0304 	and.w	r3, r3, #4
 800f9a8:	2b04      	cmp	r3, #4
 800f9aa:	d115      	bne.n	800f9d8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f9b4:	69bb      	ldr	r3, [r7, #24]
 800f9b6:	f003 0304 	and.w	r3, r3, #4
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d002      	beq.n	800f9c4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f7f9 fe5c 	bl	800967c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	6859      	ldr	r1, [r3, #4]
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	69ba      	ldr	r2, [r7, #24]
 800f9d0:	430a      	orrs	r2, r1
 800f9d2:	605a      	str	r2, [r3, #4]
 800f9d4:	e000      	b.n	800f9d8 <HAL_PCD_IRQHandler+0x75e>
      return;
 800f9d6:	bf00      	nop
    }
  }
}
 800f9d8:	3734      	adds	r7, #52	; 0x34
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd90      	pop	{r4, r7, pc}

0800f9de <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f9de:	b580      	push	{r7, lr}
 800f9e0:	b082      	sub	sp, #8
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f9f0:	2b01      	cmp	r3, #1
 800f9f2:	d101      	bne.n	800f9f8 <HAL_PCD_SetAddress+0x1a>
 800f9f4:	2302      	movs	r3, #2
 800f9f6:	e013      	b.n	800fa20 <HAL_PCD_SetAddress+0x42>
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	2201      	movs	r2, #1
 800f9fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	78fa      	ldrb	r2, [r7, #3]
 800fa0e:	4611      	mov	r1, r2
 800fa10:	4618      	mov	r0, r3
 800fa12:	f005 f81c 	bl	8014a4e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fa1e:	2300      	movs	r3, #0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3708      	adds	r7, #8
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd80      	pop	{r7, pc}

0800fa28 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b084      	sub	sp, #16
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
 800fa30:	4608      	mov	r0, r1
 800fa32:	4611      	mov	r1, r2
 800fa34:	461a      	mov	r2, r3
 800fa36:	4603      	mov	r3, r0
 800fa38:	70fb      	strb	r3, [r7, #3]
 800fa3a:	460b      	mov	r3, r1
 800fa3c:	803b      	strh	r3, [r7, #0]
 800fa3e:	4613      	mov	r3, r2
 800fa40:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fa42:	2300      	movs	r3, #0
 800fa44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fa46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	da0f      	bge.n	800fa6e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fa4e:	78fb      	ldrb	r3, [r7, #3]
 800fa50:	f003 020f 	and.w	r2, r3, #15
 800fa54:	4613      	mov	r3, r2
 800fa56:	00db      	lsls	r3, r3, #3
 800fa58:	1a9b      	subs	r3, r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	3338      	adds	r3, #56	; 0x38
 800fa5e:	687a      	ldr	r2, [r7, #4]
 800fa60:	4413      	add	r3, r2
 800fa62:	3304      	adds	r3, #4
 800fa64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	2201      	movs	r2, #1
 800fa6a:	705a      	strb	r2, [r3, #1]
 800fa6c:	e00f      	b.n	800fa8e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fa6e:	78fb      	ldrb	r3, [r7, #3]
 800fa70:	f003 020f 	and.w	r2, r3, #15
 800fa74:	4613      	mov	r3, r2
 800fa76:	00db      	lsls	r3, r3, #3
 800fa78:	1a9b      	subs	r3, r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fa80:	687a      	ldr	r2, [r7, #4]
 800fa82:	4413      	add	r3, r2
 800fa84:	3304      	adds	r3, #4
 800fa86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fa8e:	78fb      	ldrb	r3, [r7, #3]
 800fa90:	f003 030f 	and.w	r3, r3, #15
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fa9a:	883a      	ldrh	r2, [r7, #0]
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	78ba      	ldrb	r2, [r7, #2]
 800faa4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	785b      	ldrb	r3, [r3, #1]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d004      	beq.n	800fab8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	781b      	ldrb	r3, [r3, #0]
 800fab2:	b29a      	uxth	r2, r3
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fab8:	78bb      	ldrb	r3, [r7, #2]
 800faba:	2b02      	cmp	r3, #2
 800fabc:	d102      	bne.n	800fac4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	2200      	movs	r2, #0
 800fac2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800faca:	2b01      	cmp	r3, #1
 800facc:	d101      	bne.n	800fad2 <HAL_PCD_EP_Open+0xaa>
 800face:	2302      	movs	r3, #2
 800fad0:	e00e      	b.n	800faf0 <HAL_PCD_EP_Open+0xc8>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2201      	movs	r2, #1
 800fad6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	68f9      	ldr	r1, [r7, #12]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f004 f987 	bl	8013df4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800faee:	7afb      	ldrb	r3, [r7, #11]
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b084      	sub	sp, #16
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
 800fb00:	460b      	mov	r3, r1
 800fb02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fb04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	da0f      	bge.n	800fb2c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fb0c:	78fb      	ldrb	r3, [r7, #3]
 800fb0e:	f003 020f 	and.w	r2, r3, #15
 800fb12:	4613      	mov	r3, r2
 800fb14:	00db      	lsls	r3, r3, #3
 800fb16:	1a9b      	subs	r3, r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	3338      	adds	r3, #56	; 0x38
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	4413      	add	r3, r2
 800fb20:	3304      	adds	r3, #4
 800fb22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	2201      	movs	r2, #1
 800fb28:	705a      	strb	r2, [r3, #1]
 800fb2a:	e00f      	b.n	800fb4c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fb2c:	78fb      	ldrb	r3, [r7, #3]
 800fb2e:	f003 020f 	and.w	r2, r3, #15
 800fb32:	4613      	mov	r3, r2
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	1a9b      	subs	r3, r3, r2
 800fb38:	009b      	lsls	r3, r3, #2
 800fb3a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fb3e:	687a      	ldr	r2, [r7, #4]
 800fb40:	4413      	add	r3, r2
 800fb42:	3304      	adds	r3, #4
 800fb44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	2200      	movs	r2, #0
 800fb4a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800fb4c:	78fb      	ldrb	r3, [r7, #3]
 800fb4e:	f003 030f 	and.w	r3, r3, #15
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fb5e:	2b01      	cmp	r3, #1
 800fb60:	d101      	bne.n	800fb66 <HAL_PCD_EP_Close+0x6e>
 800fb62:	2302      	movs	r3, #2
 800fb64:	e00e      	b.n	800fb84 <HAL_PCD_EP_Close+0x8c>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	68f9      	ldr	r1, [r7, #12]
 800fb74:	4618      	mov	r0, r3
 800fb76:	f004 f9c5 	bl	8013f04 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3710      	adds	r7, #16
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	607a      	str	r2, [r7, #4]
 800fb96:	603b      	str	r3, [r7, #0]
 800fb98:	460b      	mov	r3, r1
 800fb9a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fb9c:	7afb      	ldrb	r3, [r7, #11]
 800fb9e:	f003 020f 	and.w	r2, r3, #15
 800fba2:	4613      	mov	r3, r2
 800fba4:	00db      	lsls	r3, r3, #3
 800fba6:	1a9b      	subs	r3, r3, r2
 800fba8:	009b      	lsls	r3, r3, #2
 800fbaa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fbae:	68fa      	ldr	r2, [r7, #12]
 800fbb0:	4413      	add	r3, r2
 800fbb2:	3304      	adds	r3, #4
 800fbb4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	687a      	ldr	r2, [r7, #4]
 800fbba:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	683a      	ldr	r2, [r7, #0]
 800fbc0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800fbc2:	697b      	ldr	r3, [r7, #20]
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800fbc8:	697b      	ldr	r3, [r7, #20]
 800fbca:	2200      	movs	r2, #0
 800fbcc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fbce:	7afb      	ldrb	r3, [r7, #11]
 800fbd0:	f003 030f 	and.w	r3, r3, #15
 800fbd4:	b2da      	uxtb	r2, r3
 800fbd6:	697b      	ldr	r3, [r7, #20]
 800fbd8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	691b      	ldr	r3, [r3, #16]
 800fbde:	2b01      	cmp	r3, #1
 800fbe0:	d102      	bne.n	800fbe8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fbe2:	687a      	ldr	r2, [r7, #4]
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fbe8:	7afb      	ldrb	r3, [r7, #11]
 800fbea:	f003 030f 	and.w	r3, r3, #15
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d109      	bne.n	800fc06 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	6818      	ldr	r0, [r3, #0]
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	691b      	ldr	r3, [r3, #16]
 800fbfa:	b2db      	uxtb	r3, r3
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	6979      	ldr	r1, [r7, #20]
 800fc00:	f004 fca0 	bl	8014544 <USB_EP0StartXfer>
 800fc04:	e008      	b.n	800fc18 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	6818      	ldr	r0, [r3, #0]
 800fc0a:	68fb      	ldr	r3, [r7, #12]
 800fc0c:	691b      	ldr	r3, [r3, #16]
 800fc0e:	b2db      	uxtb	r3, r3
 800fc10:	461a      	mov	r2, r3
 800fc12:	6979      	ldr	r1, [r7, #20]
 800fc14:	f004 fa52 	bl	80140bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800fc18:	2300      	movs	r3, #0
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	3718      	adds	r7, #24
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	bd80      	pop	{r7, pc}

0800fc22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fc22:	b480      	push	{r7}
 800fc24:	b083      	sub	sp, #12
 800fc26:	af00      	add	r7, sp, #0
 800fc28:	6078      	str	r0, [r7, #4]
 800fc2a:	460b      	mov	r3, r1
 800fc2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fc2e:	78fb      	ldrb	r3, [r7, #3]
 800fc30:	f003 020f 	and.w	r2, r3, #15
 800fc34:	6879      	ldr	r1, [r7, #4]
 800fc36:	4613      	mov	r3, r2
 800fc38:	00db      	lsls	r3, r3, #3
 800fc3a:	1a9b      	subs	r3, r3, r2
 800fc3c:	009b      	lsls	r3, r3, #2
 800fc3e:	440b      	add	r3, r1
 800fc40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fc44:	681b      	ldr	r3, [r3, #0]
}
 800fc46:	4618      	mov	r0, r3
 800fc48:	370c      	adds	r7, #12
 800fc4a:	46bd      	mov	sp, r7
 800fc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc50:	4770      	bx	lr

0800fc52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fc52:	b580      	push	{r7, lr}
 800fc54:	b086      	sub	sp, #24
 800fc56:	af00      	add	r7, sp, #0
 800fc58:	60f8      	str	r0, [r7, #12]
 800fc5a:	607a      	str	r2, [r7, #4]
 800fc5c:	603b      	str	r3, [r7, #0]
 800fc5e:	460b      	mov	r3, r1
 800fc60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fc62:	7afb      	ldrb	r3, [r7, #11]
 800fc64:	f003 020f 	and.w	r2, r3, #15
 800fc68:	4613      	mov	r3, r2
 800fc6a:	00db      	lsls	r3, r3, #3
 800fc6c:	1a9b      	subs	r3, r3, r2
 800fc6e:	009b      	lsls	r3, r3, #2
 800fc70:	3338      	adds	r3, #56	; 0x38
 800fc72:	68fa      	ldr	r2, [r7, #12]
 800fc74:	4413      	add	r3, r2
 800fc76:	3304      	adds	r3, #4
 800fc78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fc7a:	697b      	ldr	r3, [r7, #20]
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800fc80:	697b      	ldr	r3, [r7, #20]
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800fc86:	697b      	ldr	r3, [r7, #20]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800fc8c:	697b      	ldr	r3, [r7, #20]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fc92:	7afb      	ldrb	r3, [r7, #11]
 800fc94:	f003 030f 	and.w	r3, r3, #15
 800fc98:	b2da      	uxtb	r2, r3
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	691b      	ldr	r3, [r3, #16]
 800fca2:	2b01      	cmp	r3, #1
 800fca4:	d102      	bne.n	800fcac <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800fca6:	687a      	ldr	r2, [r7, #4]
 800fca8:	697b      	ldr	r3, [r7, #20]
 800fcaa:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fcac:	7afb      	ldrb	r3, [r7, #11]
 800fcae:	f003 030f 	and.w	r3, r3, #15
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d109      	bne.n	800fcca <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fcb6:	68fb      	ldr	r3, [r7, #12]
 800fcb8:	6818      	ldr	r0, [r3, #0]
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	691b      	ldr	r3, [r3, #16]
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	461a      	mov	r2, r3
 800fcc2:	6979      	ldr	r1, [r7, #20]
 800fcc4:	f004 fc3e 	bl	8014544 <USB_EP0StartXfer>
 800fcc8:	e008      	b.n	800fcdc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fcca:	68fb      	ldr	r3, [r7, #12]
 800fccc:	6818      	ldr	r0, [r3, #0]
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	691b      	ldr	r3, [r3, #16]
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	461a      	mov	r2, r3
 800fcd6:	6979      	ldr	r1, [r7, #20]
 800fcd8:	f004 f9f0 	bl	80140bc <USB_EPStartXfer>
  }

  return HAL_OK;
 800fcdc:	2300      	movs	r3, #0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3718      	adds	r7, #24
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}

0800fce6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fce6:	b580      	push	{r7, lr}
 800fce8:	b084      	sub	sp, #16
 800fcea:	af00      	add	r7, sp, #0
 800fcec:	6078      	str	r0, [r7, #4]
 800fcee:	460b      	mov	r3, r1
 800fcf0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800fcf2:	78fb      	ldrb	r3, [r7, #3]
 800fcf4:	f003 020f 	and.w	r2, r3, #15
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d901      	bls.n	800fd04 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800fd00:	2301      	movs	r3, #1
 800fd02:	e050      	b.n	800fda6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fd04:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	da0f      	bge.n	800fd2c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd0c:	78fb      	ldrb	r3, [r7, #3]
 800fd0e:	f003 020f 	and.w	r2, r3, #15
 800fd12:	4613      	mov	r3, r2
 800fd14:	00db      	lsls	r3, r3, #3
 800fd16:	1a9b      	subs	r3, r3, r2
 800fd18:	009b      	lsls	r3, r3, #2
 800fd1a:	3338      	adds	r3, #56	; 0x38
 800fd1c:	687a      	ldr	r2, [r7, #4]
 800fd1e:	4413      	add	r3, r2
 800fd20:	3304      	adds	r3, #4
 800fd22:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	2201      	movs	r2, #1
 800fd28:	705a      	strb	r2, [r3, #1]
 800fd2a:	e00d      	b.n	800fd48 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fd2c:	78fa      	ldrb	r2, [r7, #3]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	00db      	lsls	r3, r3, #3
 800fd32:	1a9b      	subs	r3, r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fd3a:	687a      	ldr	r2, [r7, #4]
 800fd3c:	4413      	add	r3, r2
 800fd3e:	3304      	adds	r3, #4
 800fd40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	2200      	movs	r2, #0
 800fd46:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	2201      	movs	r2, #1
 800fd4c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fd4e:	78fb      	ldrb	r3, [r7, #3]
 800fd50:	f003 030f 	and.w	r3, r3, #15
 800fd54:	b2da      	uxtb	r2, r3
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fd60:	2b01      	cmp	r3, #1
 800fd62:	d101      	bne.n	800fd68 <HAL_PCD_EP_SetStall+0x82>
 800fd64:	2302      	movs	r3, #2
 800fd66:	e01e      	b.n	800fda6 <HAL_PCD_EP_SetStall+0xc0>
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	2201      	movs	r2, #1
 800fd6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	68f9      	ldr	r1, [r7, #12]
 800fd76:	4618      	mov	r0, r3
 800fd78:	f004 fd95 	bl	80148a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800fd7c:	78fb      	ldrb	r3, [r7, #3]
 800fd7e:	f003 030f 	and.w	r3, r3, #15
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d10a      	bne.n	800fd9c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6818      	ldr	r0, [r3, #0]
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	691b      	ldr	r3, [r3, #16]
 800fd8e:	b2d9      	uxtb	r1, r3
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fd96:	461a      	mov	r2, r3
 800fd98:	f004 ff86 	bl	8014ca8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3710      	adds	r7, #16
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}

0800fdae <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fdae:	b580      	push	{r7, lr}
 800fdb0:	b084      	sub	sp, #16
 800fdb2:	af00      	add	r7, sp, #0
 800fdb4:	6078      	str	r0, [r7, #4]
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800fdba:	78fb      	ldrb	r3, [r7, #3]
 800fdbc:	f003 020f 	and.w	r2, r3, #15
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	685b      	ldr	r3, [r3, #4]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d901      	bls.n	800fdcc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	e042      	b.n	800fe52 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800fdcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	da0f      	bge.n	800fdf4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fdd4:	78fb      	ldrb	r3, [r7, #3]
 800fdd6:	f003 020f 	and.w	r2, r3, #15
 800fdda:	4613      	mov	r3, r2
 800fddc:	00db      	lsls	r3, r3, #3
 800fdde:	1a9b      	subs	r3, r3, r2
 800fde0:	009b      	lsls	r3, r3, #2
 800fde2:	3338      	adds	r3, #56	; 0x38
 800fde4:	687a      	ldr	r2, [r7, #4]
 800fde6:	4413      	add	r3, r2
 800fde8:	3304      	adds	r3, #4
 800fdea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fdec:	68fb      	ldr	r3, [r7, #12]
 800fdee:	2201      	movs	r2, #1
 800fdf0:	705a      	strb	r2, [r3, #1]
 800fdf2:	e00f      	b.n	800fe14 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdf4:	78fb      	ldrb	r3, [r7, #3]
 800fdf6:	f003 020f 	and.w	r2, r3, #15
 800fdfa:	4613      	mov	r3, r2
 800fdfc:	00db      	lsls	r3, r3, #3
 800fdfe:	1a9b      	subs	r3, r3, r2
 800fe00:	009b      	lsls	r3, r3, #2
 800fe02:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	4413      	add	r3, r2
 800fe0a:	3304      	adds	r3, #4
 800fe0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	2200      	movs	r2, #0
 800fe12:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2200      	movs	r2, #0
 800fe18:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe1a:	78fb      	ldrb	r3, [r7, #3]
 800fe1c:	f003 030f 	and.w	r3, r3, #15
 800fe20:	b2da      	uxtb	r2, r3
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d101      	bne.n	800fe34 <HAL_PCD_EP_ClrStall+0x86>
 800fe30:	2302      	movs	r3, #2
 800fe32:	e00e      	b.n	800fe52 <HAL_PCD_EP_ClrStall+0xa4>
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	2201      	movs	r2, #1
 800fe38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	68f9      	ldr	r1, [r7, #12]
 800fe42:	4618      	mov	r0, r3
 800fe44:	f004 fd9d 	bl	8014982 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	2200      	movs	r2, #0
 800fe4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	3710      	adds	r7, #16
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b082      	sub	sp, #8
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	6078      	str	r0, [r7, #4]
 800fe62:	460b      	mov	r3, r1
 800fe64:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fe6c:	2b01      	cmp	r3, #1
 800fe6e:	d101      	bne.n	800fe74 <HAL_PCD_EP_Flush+0x1a>
 800fe70:	2302      	movs	r3, #2
 800fe72:	e01b      	b.n	800feac <HAL_PCD_EP_Flush+0x52>
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	2201      	movs	r2, #1
 800fe78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800fe7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	da09      	bge.n	800fe98 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681a      	ldr	r2, [r3, #0]
 800fe88:	78fb      	ldrb	r3, [r7, #3]
 800fe8a:	f003 030f 	and.w	r3, r3, #15
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f003 ff29 	bl	8013ce8 <USB_FlushTxFifo>
 800fe96:	e004      	b.n	800fea2 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	f003 ff49 	bl	8013d34 <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	2200      	movs	r2, #0
 800fea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800feaa:	2300      	movs	r3, #0
}
 800feac:	4618      	mov	r0, r3
 800feae:	3708      	adds	r7, #8
 800feb0:	46bd      	mov	sp, r7
 800feb2:	bd80      	pop	{r7, pc}

0800feb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b08a      	sub	sp, #40	; 0x28
 800feb8:	af02      	add	r7, sp, #8
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	681b      	ldr	r3, [r3, #0]
 800fec2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fec4:	697b      	ldr	r3, [r7, #20]
 800fec6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800fec8:	683a      	ldr	r2, [r7, #0]
 800feca:	4613      	mov	r3, r2
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	1a9b      	subs	r3, r3, r2
 800fed0:	009b      	lsls	r3, r3, #2
 800fed2:	3338      	adds	r3, #56	; 0x38
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	4413      	add	r3, r2
 800fed8:	3304      	adds	r3, #4
 800feda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	699a      	ldr	r2, [r3, #24]
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	695b      	ldr	r3, [r3, #20]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d901      	bls.n	800feec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800fee8:	2301      	movs	r3, #1
 800feea:	e06c      	b.n	800ffc6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	695a      	ldr	r2, [r3, #20]
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	699b      	ldr	r3, [r3, #24]
 800fef4:	1ad3      	subs	r3, r2, r3
 800fef6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	689b      	ldr	r3, [r3, #8]
 800fefc:	69fa      	ldr	r2, [r7, #28]
 800fefe:	429a      	cmp	r2, r3
 800ff00:	d902      	bls.n	800ff08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	689b      	ldr	r3, [r3, #8]
 800ff06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800ff08:	69fb      	ldr	r3, [r7, #28]
 800ff0a:	3303      	adds	r3, #3
 800ff0c:	089b      	lsrs	r3, r3, #2
 800ff0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ff10:	e02b      	b.n	800ff6a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	695a      	ldr	r2, [r3, #20]
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	699b      	ldr	r3, [r3, #24]
 800ff1a:	1ad3      	subs	r3, r2, r3
 800ff1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	689b      	ldr	r3, [r3, #8]
 800ff22:	69fa      	ldr	r2, [r7, #28]
 800ff24:	429a      	cmp	r2, r3
 800ff26:	d902      	bls.n	800ff2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	689b      	ldr	r3, [r3, #8]
 800ff2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800ff2e:	69fb      	ldr	r3, [r7, #28]
 800ff30:	3303      	adds	r3, #3
 800ff32:	089b      	lsrs	r3, r3, #2
 800ff34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	68d9      	ldr	r1, [r3, #12]
 800ff3a:	683b      	ldr	r3, [r7, #0]
 800ff3c:	b2da      	uxtb	r2, r3
 800ff3e:	69fb      	ldr	r3, [r7, #28]
 800ff40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ff46:	b2db      	uxtb	r3, r3
 800ff48:	9300      	str	r3, [sp, #0]
 800ff4a:	4603      	mov	r3, r0
 800ff4c:	6978      	ldr	r0, [r7, #20]
 800ff4e:	f004 fc4c 	bl	80147ea <USB_WritePacket>

    ep->xfer_buff  += len;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	68da      	ldr	r2, [r3, #12]
 800ff56:	69fb      	ldr	r3, [r7, #28]
 800ff58:	441a      	add	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	699a      	ldr	r2, [r3, #24]
 800ff62:	69fb      	ldr	r3, [r7, #28]
 800ff64:	441a      	add	r2, r3
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ff6a:	683b      	ldr	r3, [r7, #0]
 800ff6c:	015a      	lsls	r2, r3, #5
 800ff6e:	693b      	ldr	r3, [r7, #16]
 800ff70:	4413      	add	r3, r2
 800ff72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff76:	699b      	ldr	r3, [r3, #24]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	69ba      	ldr	r2, [r7, #24]
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d809      	bhi.n	800ff94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	699a      	ldr	r2, [r3, #24]
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d203      	bcs.n	800ff94 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	695b      	ldr	r3, [r3, #20]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1be      	bne.n	800ff12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	695a      	ldr	r2, [r3, #20]
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	699b      	ldr	r3, [r3, #24]
 800ff9c:	429a      	cmp	r2, r3
 800ff9e:	d811      	bhi.n	800ffc4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	f003 030f 	and.w	r3, r3, #15
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	fa02 f303 	lsl.w	r3, r2, r3
 800ffac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ffb6:	68bb      	ldr	r3, [r7, #8]
 800ffb8:	43db      	mvns	r3, r3
 800ffba:	6939      	ldr	r1, [r7, #16]
 800ffbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffc0:	4013      	ands	r3, r2
 800ffc2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800ffc4:	2300      	movs	r3, #0
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3720      	adds	r7, #32
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}
	...

0800ffd0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af00      	add	r7, sp, #0
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffe0:	697b      	ldr	r3, [r7, #20]
 800ffe2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	333c      	adds	r3, #60	; 0x3c
 800ffe8:	3304      	adds	r3, #4
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ffee:	683b      	ldr	r3, [r7, #0]
 800fff0:	015a      	lsls	r2, r3, #5
 800fff2:	693b      	ldr	r3, [r7, #16]
 800fff4:	4413      	add	r3, r2
 800fff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fffa:	689b      	ldr	r3, [r3, #8]
 800fffc:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	691b      	ldr	r3, [r3, #16]
 8010002:	2b01      	cmp	r3, #1
 8010004:	f040 80a0 	bne.w	8010148 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	f003 0308 	and.w	r3, r3, #8
 801000e:	2b00      	cmp	r3, #0
 8010010:	d015      	beq.n	801003e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	4a72      	ldr	r2, [pc, #456]	; (80101e0 <PCD_EP_OutXfrComplete_int+0x210>)
 8010016:	4293      	cmp	r3, r2
 8010018:	f240 80dd 	bls.w	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010022:	2b00      	cmp	r3, #0
 8010024:	f000 80d7 	beq.w	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	015a      	lsls	r2, r3, #5
 801002c:	693b      	ldr	r3, [r7, #16]
 801002e:	4413      	add	r3, r2
 8010030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010034:	461a      	mov	r2, r3
 8010036:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801003a:	6093      	str	r3, [r2, #8]
 801003c:	e0cb      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	f003 0320 	and.w	r3, r3, #32
 8010044:	2b00      	cmp	r3, #0
 8010046:	d009      	beq.n	801005c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	015a      	lsls	r2, r3, #5
 801004c:	693b      	ldr	r3, [r7, #16]
 801004e:	4413      	add	r3, r2
 8010050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010054:	461a      	mov	r2, r3
 8010056:	2320      	movs	r3, #32
 8010058:	6093      	str	r3, [r2, #8]
 801005a:	e0bc      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 801005c:	68bb      	ldr	r3, [r7, #8]
 801005e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010062:	2b00      	cmp	r3, #0
 8010064:	f040 80b7 	bne.w	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010068:	68fb      	ldr	r3, [r7, #12]
 801006a:	4a5d      	ldr	r2, [pc, #372]	; (80101e0 <PCD_EP_OutXfrComplete_int+0x210>)
 801006c:	4293      	cmp	r3, r2
 801006e:	d90f      	bls.n	8010090 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010070:	68bb      	ldr	r3, [r7, #8]
 8010072:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010076:	2b00      	cmp	r3, #0
 8010078:	d00a      	beq.n	8010090 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010086:	461a      	mov	r2, r3
 8010088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801008c:	6093      	str	r3, [r2, #8]
 801008e:	e0a2      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8010090:	6879      	ldr	r1, [r7, #4]
 8010092:	683a      	ldr	r2, [r7, #0]
 8010094:	4613      	mov	r3, r2
 8010096:	00db      	lsls	r3, r3, #3
 8010098:	1a9b      	subs	r3, r3, r2
 801009a:	009b      	lsls	r3, r3, #2
 801009c:	440b      	add	r3, r1
 801009e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80100a2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	0159      	lsls	r1, r3, #5
 80100a8:	693b      	ldr	r3, [r7, #16]
 80100aa:	440b      	add	r3, r1
 80100ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100b0:	691b      	ldr	r3, [r3, #16]
 80100b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80100b6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	683a      	ldr	r2, [r7, #0]
 80100bc:	4613      	mov	r3, r2
 80100be:	00db      	lsls	r3, r3, #3
 80100c0:	1a9b      	subs	r3, r3, r2
 80100c2:	009b      	lsls	r3, r3, #2
 80100c4:	4403      	add	r3, r0
 80100c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80100ca:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80100cc:	6879      	ldr	r1, [r7, #4]
 80100ce:	683a      	ldr	r2, [r7, #0]
 80100d0:	4613      	mov	r3, r2
 80100d2:	00db      	lsls	r3, r3, #3
 80100d4:	1a9b      	subs	r3, r3, r2
 80100d6:	009b      	lsls	r3, r3, #2
 80100d8:	440b      	add	r3, r1
 80100da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80100de:	6819      	ldr	r1, [r3, #0]
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	683a      	ldr	r2, [r7, #0]
 80100e4:	4613      	mov	r3, r2
 80100e6:	00db      	lsls	r3, r3, #3
 80100e8:	1a9b      	subs	r3, r3, r2
 80100ea:	009b      	lsls	r3, r3, #2
 80100ec:	4403      	add	r3, r0
 80100ee:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80100f2:	681b      	ldr	r3, [r3, #0]
 80100f4:	4419      	add	r1, r3
 80100f6:	6878      	ldr	r0, [r7, #4]
 80100f8:	683a      	ldr	r2, [r7, #0]
 80100fa:	4613      	mov	r3, r2
 80100fc:	00db      	lsls	r3, r3, #3
 80100fe:	1a9b      	subs	r3, r3, r2
 8010100:	009b      	lsls	r3, r3, #2
 8010102:	4403      	add	r3, r0
 8010104:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8010108:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d114      	bne.n	801013a <PCD_EP_OutXfrComplete_int+0x16a>
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	683a      	ldr	r2, [r7, #0]
 8010114:	4613      	mov	r3, r2
 8010116:	00db      	lsls	r3, r3, #3
 8010118:	1a9b      	subs	r3, r3, r2
 801011a:	009b      	lsls	r3, r3, #2
 801011c:	440b      	add	r3, r1
 801011e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d108      	bne.n	801013a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	6818      	ldr	r0, [r3, #0]
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8010132:	461a      	mov	r2, r3
 8010134:	2101      	movs	r1, #1
 8010136:	f004 fdb7 	bl	8014ca8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	b2db      	uxtb	r3, r3
 801013e:	4619      	mov	r1, r3
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7f9 f9d3 	bl	80094ec <HAL_PCD_DataOutStageCallback>
 8010146:	e046      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4a26      	ldr	r2, [pc, #152]	; (80101e4 <PCD_EP_OutXfrComplete_int+0x214>)
 801014c:	4293      	cmp	r3, r2
 801014e:	d124      	bne.n	801019a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010156:	2b00      	cmp	r3, #0
 8010158:	d00a      	beq.n	8010170 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 801015a:	683b      	ldr	r3, [r7, #0]
 801015c:	015a      	lsls	r2, r3, #5
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	4413      	add	r3, r2
 8010162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010166:	461a      	mov	r2, r3
 8010168:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801016c:	6093      	str	r3, [r2, #8]
 801016e:	e032      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	f003 0320 	and.w	r3, r3, #32
 8010176:	2b00      	cmp	r3, #0
 8010178:	d008      	beq.n	801018c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	015a      	lsls	r2, r3, #5
 801017e:	693b      	ldr	r3, [r7, #16]
 8010180:	4413      	add	r3, r2
 8010182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010186:	461a      	mov	r2, r3
 8010188:	2320      	movs	r3, #32
 801018a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	b2db      	uxtb	r3, r3
 8010190:	4619      	mov	r1, r3
 8010192:	6878      	ldr	r0, [r7, #4]
 8010194:	f7f9 f9aa 	bl	80094ec <HAL_PCD_DataOutStageCallback>
 8010198:	e01d      	b.n	80101d6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 801019a:	683b      	ldr	r3, [r7, #0]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d114      	bne.n	80101ca <PCD_EP_OutXfrComplete_int+0x1fa>
 80101a0:	6879      	ldr	r1, [r7, #4]
 80101a2:	683a      	ldr	r2, [r7, #0]
 80101a4:	4613      	mov	r3, r2
 80101a6:	00db      	lsls	r3, r3, #3
 80101a8:	1a9b      	subs	r3, r3, r2
 80101aa:	009b      	lsls	r3, r3, #2
 80101ac:	440b      	add	r3, r1
 80101ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d108      	bne.n	80101ca <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	6818      	ldr	r0, [r3, #0]
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80101c2:	461a      	mov	r2, r3
 80101c4:	2100      	movs	r1, #0
 80101c6:	f004 fd6f 	bl	8014ca8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80101ca:	683b      	ldr	r3, [r7, #0]
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	4619      	mov	r1, r3
 80101d0:	6878      	ldr	r0, [r7, #4]
 80101d2:	f7f9 f98b 	bl	80094ec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80101d6:	2300      	movs	r3, #0
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	4f54300a 	.word	0x4f54300a
 80101e4:	4f54310a 	.word	0x4f54310a

080101e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80101e8:	b580      	push	{r7, lr}
 80101ea:	b086      	sub	sp, #24
 80101ec:	af00      	add	r7, sp, #0
 80101ee:	6078      	str	r0, [r7, #4]
 80101f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f8:	697b      	ldr	r3, [r7, #20]
 80101fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	333c      	adds	r3, #60	; 0x3c
 8010200:	3304      	adds	r3, #4
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010206:	683b      	ldr	r3, [r7, #0]
 8010208:	015a      	lsls	r2, r3, #5
 801020a:	693b      	ldr	r3, [r7, #16]
 801020c:	4413      	add	r3, r2
 801020e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010212:	689b      	ldr	r3, [r3, #8]
 8010214:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	4a15      	ldr	r2, [pc, #84]	; (8010270 <PCD_EP_OutSetupPacket_int+0x88>)
 801021a:	4293      	cmp	r3, r2
 801021c:	d90e      	bls.n	801023c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8010224:	2b00      	cmp	r3, #0
 8010226:	d009      	beq.n	801023c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010228:	683b      	ldr	r3, [r7, #0]
 801022a:	015a      	lsls	r2, r3, #5
 801022c:	693b      	ldr	r3, [r7, #16]
 801022e:	4413      	add	r3, r2
 8010230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010234:	461a      	mov	r2, r3
 8010236:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801023a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7f9 f943 	bl	80094c8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	4a0a      	ldr	r2, [pc, #40]	; (8010270 <PCD_EP_OutSetupPacket_int+0x88>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d90c      	bls.n	8010264 <PCD_EP_OutSetupPacket_int+0x7c>
 801024a:	687b      	ldr	r3, [r7, #4]
 801024c:	691b      	ldr	r3, [r3, #16]
 801024e:	2b01      	cmp	r3, #1
 8010250:	d108      	bne.n	8010264 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6818      	ldr	r0, [r3, #0]
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801025c:	461a      	mov	r2, r3
 801025e:	2101      	movs	r1, #1
 8010260:	f004 fd22 	bl	8014ca8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8010264:	2300      	movs	r3, #0
}
 8010266:	4618      	mov	r0, r3
 8010268:	3718      	adds	r7, #24
 801026a:	46bd      	mov	sp, r7
 801026c:	bd80      	pop	{r7, pc}
 801026e:	bf00      	nop
 8010270:	4f54300a 	.word	0x4f54300a

08010274 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010274:	b480      	push	{r7}
 8010276:	b085      	sub	sp, #20
 8010278:	af00      	add	r7, sp, #0
 801027a:	6078      	str	r0, [r7, #4]
 801027c:	460b      	mov	r3, r1
 801027e:	70fb      	strb	r3, [r7, #3]
 8010280:	4613      	mov	r3, r2
 8010282:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	681b      	ldr	r3, [r3, #0]
 8010288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801028a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801028c:	78fb      	ldrb	r3, [r7, #3]
 801028e:	2b00      	cmp	r3, #0
 8010290:	d107      	bne.n	80102a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010292:	883b      	ldrh	r3, [r7, #0]
 8010294:	0419      	lsls	r1, r3, #16
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	68ba      	ldr	r2, [r7, #8]
 801029c:	430a      	orrs	r2, r1
 801029e:	629a      	str	r2, [r3, #40]	; 0x28
 80102a0:	e028      	b.n	80102f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102a8:	0c1b      	lsrs	r3, r3, #16
 80102aa:	68ba      	ldr	r2, [r7, #8]
 80102ac:	4413      	add	r3, r2
 80102ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80102b0:	2300      	movs	r3, #0
 80102b2:	73fb      	strb	r3, [r7, #15]
 80102b4:	e00d      	b.n	80102d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	681a      	ldr	r2, [r3, #0]
 80102ba:	7bfb      	ldrb	r3, [r7, #15]
 80102bc:	3340      	adds	r3, #64	; 0x40
 80102be:	009b      	lsls	r3, r3, #2
 80102c0:	4413      	add	r3, r2
 80102c2:	685b      	ldr	r3, [r3, #4]
 80102c4:	0c1b      	lsrs	r3, r3, #16
 80102c6:	68ba      	ldr	r2, [r7, #8]
 80102c8:	4413      	add	r3, r2
 80102ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80102cc:	7bfb      	ldrb	r3, [r7, #15]
 80102ce:	3301      	adds	r3, #1
 80102d0:	73fb      	strb	r3, [r7, #15]
 80102d2:	7bfa      	ldrb	r2, [r7, #15]
 80102d4:	78fb      	ldrb	r3, [r7, #3]
 80102d6:	3b01      	subs	r3, #1
 80102d8:	429a      	cmp	r2, r3
 80102da:	d3ec      	bcc.n	80102b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80102dc:	883b      	ldrh	r3, [r7, #0]
 80102de:	0418      	lsls	r0, r3, #16
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6819      	ldr	r1, [r3, #0]
 80102e4:	78fb      	ldrb	r3, [r7, #3]
 80102e6:	3b01      	subs	r3, #1
 80102e8:	68ba      	ldr	r2, [r7, #8]
 80102ea:	4302      	orrs	r2, r0
 80102ec:	3340      	adds	r3, #64	; 0x40
 80102ee:	009b      	lsls	r3, r3, #2
 80102f0:	440b      	add	r3, r1
 80102f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3714      	adds	r7, #20
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8010302:	b480      	push	{r7}
 8010304:	b083      	sub	sp, #12
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
 801030a:	460b      	mov	r3, r1
 801030c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	887a      	ldrh	r2, [r7, #2]
 8010314:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8010316:	2300      	movs	r3, #0
}
 8010318:	4618      	mov	r0, r3
 801031a:	370c      	adds	r7, #12
 801031c:	46bd      	mov	sp, r7
 801031e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010322:	4770      	bx	lr

08010324 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8010324:	b480      	push	{r7}
 8010326:	b083      	sub	sp, #12
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
 801032c:	460b      	mov	r3, r1
 801032e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8010330:	bf00      	nop
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801033c:	b580      	push	{r7, lr}
 801033e:	b086      	sub	sp, #24
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	2b00      	cmp	r3, #0
 8010348:	d101      	bne.n	801034e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801034a:	2301      	movs	r3, #1
 801034c:	e264      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f003 0301 	and.w	r3, r3, #1
 8010356:	2b00      	cmp	r3, #0
 8010358:	d075      	beq.n	8010446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801035a:	4ba3      	ldr	r3, [pc, #652]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 801035c:	689b      	ldr	r3, [r3, #8]
 801035e:	f003 030c 	and.w	r3, r3, #12
 8010362:	2b04      	cmp	r3, #4
 8010364:	d00c      	beq.n	8010380 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010366:	4ba0      	ldr	r3, [pc, #640]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801036e:	2b08      	cmp	r3, #8
 8010370:	d112      	bne.n	8010398 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010372:	4b9d      	ldr	r3, [pc, #628]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801037a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801037e:	d10b      	bne.n	8010398 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010380:	4b99      	ldr	r3, [pc, #612]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010382:	681b      	ldr	r3, [r3, #0]
 8010384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010388:	2b00      	cmp	r3, #0
 801038a:	d05b      	beq.n	8010444 <HAL_RCC_OscConfig+0x108>
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	685b      	ldr	r3, [r3, #4]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d157      	bne.n	8010444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010394:	2301      	movs	r3, #1
 8010396:	e23f      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103a0:	d106      	bne.n	80103b0 <HAL_RCC_OscConfig+0x74>
 80103a2:	4b91      	ldr	r3, [pc, #580]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103a4:	681b      	ldr	r3, [r3, #0]
 80103a6:	4a90      	ldr	r2, [pc, #576]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103ac:	6013      	str	r3, [r2, #0]
 80103ae:	e01d      	b.n	80103ec <HAL_RCC_OscConfig+0xb0>
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	685b      	ldr	r3, [r3, #4]
 80103b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80103b8:	d10c      	bne.n	80103d4 <HAL_RCC_OscConfig+0x98>
 80103ba:	4b8b      	ldr	r3, [pc, #556]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	4a8a      	ldr	r2, [pc, #552]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80103c4:	6013      	str	r3, [r2, #0]
 80103c6:	4b88      	ldr	r3, [pc, #544]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103c8:	681b      	ldr	r3, [r3, #0]
 80103ca:	4a87      	ldr	r2, [pc, #540]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80103d0:	6013      	str	r3, [r2, #0]
 80103d2:	e00b      	b.n	80103ec <HAL_RCC_OscConfig+0xb0>
 80103d4:	4b84      	ldr	r3, [pc, #528]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103d6:	681b      	ldr	r3, [r3, #0]
 80103d8:	4a83      	ldr	r2, [pc, #524]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80103de:	6013      	str	r3, [r2, #0]
 80103e0:	4b81      	ldr	r3, [pc, #516]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4a80      	ldr	r2, [pc, #512]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80103e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80103ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	685b      	ldr	r3, [r3, #4]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d013      	beq.n	801041c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80103f4:	f7fd fc5a 	bl	800dcac <HAL_GetTick>
 80103f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80103fa:	e008      	b.n	801040e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80103fc:	f7fd fc56 	bl	800dcac <HAL_GetTick>
 8010400:	4602      	mov	r2, r0
 8010402:	693b      	ldr	r3, [r7, #16]
 8010404:	1ad3      	subs	r3, r2, r3
 8010406:	2b64      	cmp	r3, #100	; 0x64
 8010408:	d901      	bls.n	801040e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 801040a:	2303      	movs	r3, #3
 801040c:	e204      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801040e:	4b76      	ldr	r3, [pc, #472]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010416:	2b00      	cmp	r3, #0
 8010418:	d0f0      	beq.n	80103fc <HAL_RCC_OscConfig+0xc0>
 801041a:	e014      	b.n	8010446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801041c:	f7fd fc46 	bl	800dcac <HAL_GetTick>
 8010420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010422:	e008      	b.n	8010436 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8010424:	f7fd fc42 	bl	800dcac <HAL_GetTick>
 8010428:	4602      	mov	r2, r0
 801042a:	693b      	ldr	r3, [r7, #16]
 801042c:	1ad3      	subs	r3, r2, r3
 801042e:	2b64      	cmp	r3, #100	; 0x64
 8010430:	d901      	bls.n	8010436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8010432:	2303      	movs	r3, #3
 8010434:	e1f0      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8010436:	4b6c      	ldr	r3, [pc, #432]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801043e:	2b00      	cmp	r3, #0
 8010440:	d1f0      	bne.n	8010424 <HAL_RCC_OscConfig+0xe8>
 8010442:	e000      	b.n	8010446 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	681b      	ldr	r3, [r3, #0]
 801044a:	f003 0302 	and.w	r3, r3, #2
 801044e:	2b00      	cmp	r3, #0
 8010450:	d063      	beq.n	801051a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010452:	4b65      	ldr	r3, [pc, #404]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010454:	689b      	ldr	r3, [r3, #8]
 8010456:	f003 030c 	and.w	r3, r3, #12
 801045a:	2b00      	cmp	r3, #0
 801045c:	d00b      	beq.n	8010476 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801045e:	4b62      	ldr	r3, [pc, #392]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010460:	689b      	ldr	r3, [r3, #8]
 8010462:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010466:	2b08      	cmp	r3, #8
 8010468:	d11c      	bne.n	80104a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801046a:	4b5f      	ldr	r3, [pc, #380]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 801046c:	685b      	ldr	r3, [r3, #4]
 801046e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010472:	2b00      	cmp	r3, #0
 8010474:	d116      	bne.n	80104a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010476:	4b5c      	ldr	r3, [pc, #368]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010478:	681b      	ldr	r3, [r3, #0]
 801047a:	f003 0302 	and.w	r3, r3, #2
 801047e:	2b00      	cmp	r3, #0
 8010480:	d005      	beq.n	801048e <HAL_RCC_OscConfig+0x152>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68db      	ldr	r3, [r3, #12]
 8010486:	2b01      	cmp	r3, #1
 8010488:	d001      	beq.n	801048e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801048a:	2301      	movs	r3, #1
 801048c:	e1c4      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801048e:	4b56      	ldr	r3, [pc, #344]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	00db      	lsls	r3, r3, #3
 801049c:	4952      	ldr	r1, [pc, #328]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 801049e:	4313      	orrs	r3, r2
 80104a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80104a2:	e03a      	b.n	801051a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d020      	beq.n	80104ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80104ac:	4b4f      	ldr	r3, [pc, #316]	; (80105ec <HAL_RCC_OscConfig+0x2b0>)
 80104ae:	2201      	movs	r2, #1
 80104b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104b2:	f7fd fbfb 	bl	800dcac <HAL_GetTick>
 80104b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80104b8:	e008      	b.n	80104cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80104ba:	f7fd fbf7 	bl	800dcac <HAL_GetTick>
 80104be:	4602      	mov	r2, r0
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	2b02      	cmp	r3, #2
 80104c6:	d901      	bls.n	80104cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80104c8:	2303      	movs	r3, #3
 80104ca:	e1a5      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80104cc:	4b46      	ldr	r3, [pc, #280]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 0302 	and.w	r3, r3, #2
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d0f0      	beq.n	80104ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80104d8:	4b43      	ldr	r3, [pc, #268]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	691b      	ldr	r3, [r3, #16]
 80104e4:	00db      	lsls	r3, r3, #3
 80104e6:	4940      	ldr	r1, [pc, #256]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80104e8:	4313      	orrs	r3, r2
 80104ea:	600b      	str	r3, [r1, #0]
 80104ec:	e015      	b.n	801051a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80104ee:	4b3f      	ldr	r3, [pc, #252]	; (80105ec <HAL_RCC_OscConfig+0x2b0>)
 80104f0:	2200      	movs	r2, #0
 80104f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80104f4:	f7fd fbda 	bl	800dcac <HAL_GetTick>
 80104f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80104fa:	e008      	b.n	801050e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80104fc:	f7fd fbd6 	bl	800dcac <HAL_GetTick>
 8010500:	4602      	mov	r2, r0
 8010502:	693b      	ldr	r3, [r7, #16]
 8010504:	1ad3      	subs	r3, r2, r3
 8010506:	2b02      	cmp	r3, #2
 8010508:	d901      	bls.n	801050e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 801050a:	2303      	movs	r3, #3
 801050c:	e184      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 801050e:	4b36      	ldr	r3, [pc, #216]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	f003 0302 	and.w	r3, r3, #2
 8010516:	2b00      	cmp	r3, #0
 8010518:	d1f0      	bne.n	80104fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	f003 0308 	and.w	r3, r3, #8
 8010522:	2b00      	cmp	r3, #0
 8010524:	d030      	beq.n	8010588 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	695b      	ldr	r3, [r3, #20]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d016      	beq.n	801055c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801052e:	4b30      	ldr	r3, [pc, #192]	; (80105f0 <HAL_RCC_OscConfig+0x2b4>)
 8010530:	2201      	movs	r2, #1
 8010532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010534:	f7fd fbba 	bl	800dcac <HAL_GetTick>
 8010538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801053a:	e008      	b.n	801054e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801053c:	f7fd fbb6 	bl	800dcac <HAL_GetTick>
 8010540:	4602      	mov	r2, r0
 8010542:	693b      	ldr	r3, [r7, #16]
 8010544:	1ad3      	subs	r3, r2, r3
 8010546:	2b02      	cmp	r3, #2
 8010548:	d901      	bls.n	801054e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801054a:	2303      	movs	r3, #3
 801054c:	e164      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801054e:	4b26      	ldr	r3, [pc, #152]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 8010550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010552:	f003 0302 	and.w	r3, r3, #2
 8010556:	2b00      	cmp	r3, #0
 8010558:	d0f0      	beq.n	801053c <HAL_RCC_OscConfig+0x200>
 801055a:	e015      	b.n	8010588 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801055c:	4b24      	ldr	r3, [pc, #144]	; (80105f0 <HAL_RCC_OscConfig+0x2b4>)
 801055e:	2200      	movs	r2, #0
 8010560:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010562:	f7fd fba3 	bl	800dcac <HAL_GetTick>
 8010566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010568:	e008      	b.n	801057c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801056a:	f7fd fb9f 	bl	800dcac <HAL_GetTick>
 801056e:	4602      	mov	r2, r0
 8010570:	693b      	ldr	r3, [r7, #16]
 8010572:	1ad3      	subs	r3, r2, r3
 8010574:	2b02      	cmp	r3, #2
 8010576:	d901      	bls.n	801057c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8010578:	2303      	movs	r3, #3
 801057a:	e14d      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801057c:	4b1a      	ldr	r3, [pc, #104]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 801057e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010580:	f003 0302 	and.w	r3, r3, #2
 8010584:	2b00      	cmp	r3, #0
 8010586:	d1f0      	bne.n	801056a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	f003 0304 	and.w	r3, r3, #4
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 80a0 	beq.w	80106d6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010596:	2300      	movs	r3, #0
 8010598:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801059a:	4b13      	ldr	r3, [pc, #76]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 801059c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801059e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d10f      	bne.n	80105c6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80105a6:	2300      	movs	r3, #0
 80105a8:	60bb      	str	r3, [r7, #8]
 80105aa:	4b0f      	ldr	r3, [pc, #60]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80105ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ae:	4a0e      	ldr	r2, [pc, #56]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80105b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80105b4:	6413      	str	r3, [r2, #64]	; 0x40
 80105b6:	4b0c      	ldr	r3, [pc, #48]	; (80105e8 <HAL_RCC_OscConfig+0x2ac>)
 80105b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80105be:	60bb      	str	r3, [r7, #8]
 80105c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80105c2:	2301      	movs	r3, #1
 80105c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105c6:	4b0b      	ldr	r3, [pc, #44]	; (80105f4 <HAL_RCC_OscConfig+0x2b8>)
 80105c8:	681b      	ldr	r3, [r3, #0]
 80105ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d121      	bne.n	8010616 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80105d2:	4b08      	ldr	r3, [pc, #32]	; (80105f4 <HAL_RCC_OscConfig+0x2b8>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	4a07      	ldr	r2, [pc, #28]	; (80105f4 <HAL_RCC_OscConfig+0x2b8>)
 80105d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80105dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80105de:	f7fd fb65 	bl	800dcac <HAL_GetTick>
 80105e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80105e4:	e011      	b.n	801060a <HAL_RCC_OscConfig+0x2ce>
 80105e6:	bf00      	nop
 80105e8:	40023800 	.word	0x40023800
 80105ec:	42470000 	.word	0x42470000
 80105f0:	42470e80 	.word	0x42470e80
 80105f4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80105f8:	f7fd fb58 	bl	800dcac <HAL_GetTick>
 80105fc:	4602      	mov	r2, r0
 80105fe:	693b      	ldr	r3, [r7, #16]
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	2b02      	cmp	r3, #2
 8010604:	d901      	bls.n	801060a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8010606:	2303      	movs	r3, #3
 8010608:	e106      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801060a:	4b85      	ldr	r3, [pc, #532]	; (8010820 <HAL_RCC_OscConfig+0x4e4>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010612:	2b00      	cmp	r3, #0
 8010614:	d0f0      	beq.n	80105f8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	689b      	ldr	r3, [r3, #8]
 801061a:	2b01      	cmp	r3, #1
 801061c:	d106      	bne.n	801062c <HAL_RCC_OscConfig+0x2f0>
 801061e:	4b81      	ldr	r3, [pc, #516]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010622:	4a80      	ldr	r2, [pc, #512]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010624:	f043 0301 	orr.w	r3, r3, #1
 8010628:	6713      	str	r3, [r2, #112]	; 0x70
 801062a:	e01c      	b.n	8010666 <HAL_RCC_OscConfig+0x32a>
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	2b05      	cmp	r3, #5
 8010632:	d10c      	bne.n	801064e <HAL_RCC_OscConfig+0x312>
 8010634:	4b7b      	ldr	r3, [pc, #492]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010638:	4a7a      	ldr	r2, [pc, #488]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 801063a:	f043 0304 	orr.w	r3, r3, #4
 801063e:	6713      	str	r3, [r2, #112]	; 0x70
 8010640:	4b78      	ldr	r3, [pc, #480]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010644:	4a77      	ldr	r2, [pc, #476]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010646:	f043 0301 	orr.w	r3, r3, #1
 801064a:	6713      	str	r3, [r2, #112]	; 0x70
 801064c:	e00b      	b.n	8010666 <HAL_RCC_OscConfig+0x32a>
 801064e:	4b75      	ldr	r3, [pc, #468]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010652:	4a74      	ldr	r2, [pc, #464]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010654:	f023 0301 	bic.w	r3, r3, #1
 8010658:	6713      	str	r3, [r2, #112]	; 0x70
 801065a:	4b72      	ldr	r3, [pc, #456]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 801065c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801065e:	4a71      	ldr	r2, [pc, #452]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010660:	f023 0304 	bic.w	r3, r3, #4
 8010664:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	689b      	ldr	r3, [r3, #8]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d015      	beq.n	801069a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801066e:	f7fd fb1d 	bl	800dcac <HAL_GetTick>
 8010672:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010674:	e00a      	b.n	801068c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010676:	f7fd fb19 	bl	800dcac <HAL_GetTick>
 801067a:	4602      	mov	r2, r0
 801067c:	693b      	ldr	r3, [r7, #16]
 801067e:	1ad3      	subs	r3, r2, r3
 8010680:	f241 3288 	movw	r2, #5000	; 0x1388
 8010684:	4293      	cmp	r3, r2
 8010686:	d901      	bls.n	801068c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8010688:	2303      	movs	r3, #3
 801068a:	e0c5      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801068c:	4b65      	ldr	r3, [pc, #404]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 801068e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010690:	f003 0302 	and.w	r3, r3, #2
 8010694:	2b00      	cmp	r3, #0
 8010696:	d0ee      	beq.n	8010676 <HAL_RCC_OscConfig+0x33a>
 8010698:	e014      	b.n	80106c4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801069a:	f7fd fb07 	bl	800dcac <HAL_GetTick>
 801069e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80106a0:	e00a      	b.n	80106b8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80106a2:	f7fd fb03 	bl	800dcac <HAL_GetTick>
 80106a6:	4602      	mov	r2, r0
 80106a8:	693b      	ldr	r3, [r7, #16]
 80106aa:	1ad3      	subs	r3, r2, r3
 80106ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80106b0:	4293      	cmp	r3, r2
 80106b2:	d901      	bls.n	80106b8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80106b4:	2303      	movs	r3, #3
 80106b6:	e0af      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80106b8:	4b5a      	ldr	r3, [pc, #360]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 80106ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106bc:	f003 0302 	and.w	r3, r3, #2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d1ee      	bne.n	80106a2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80106c4:	7dfb      	ldrb	r3, [r7, #23]
 80106c6:	2b01      	cmp	r3, #1
 80106c8:	d105      	bne.n	80106d6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80106ca:	4b56      	ldr	r3, [pc, #344]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 80106cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ce:	4a55      	ldr	r2, [pc, #340]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 80106d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80106d4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	699b      	ldr	r3, [r3, #24]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	f000 809b 	beq.w	8010816 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80106e0:	4b50      	ldr	r3, [pc, #320]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 80106e2:	689b      	ldr	r3, [r3, #8]
 80106e4:	f003 030c 	and.w	r3, r3, #12
 80106e8:	2b08      	cmp	r3, #8
 80106ea:	d05c      	beq.n	80107a6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	699b      	ldr	r3, [r3, #24]
 80106f0:	2b02      	cmp	r3, #2
 80106f2:	d141      	bne.n	8010778 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80106f4:	4b4c      	ldr	r3, [pc, #304]	; (8010828 <HAL_RCC_OscConfig+0x4ec>)
 80106f6:	2200      	movs	r2, #0
 80106f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106fa:	f7fd fad7 	bl	800dcac <HAL_GetTick>
 80106fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010700:	e008      	b.n	8010714 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010702:	f7fd fad3 	bl	800dcac <HAL_GetTick>
 8010706:	4602      	mov	r2, r0
 8010708:	693b      	ldr	r3, [r7, #16]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	2b02      	cmp	r3, #2
 801070e:	d901      	bls.n	8010714 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8010710:	2303      	movs	r3, #3
 8010712:	e081      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010714:	4b43      	ldr	r3, [pc, #268]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801071c:	2b00      	cmp	r3, #0
 801071e:	d1f0      	bne.n	8010702 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	69da      	ldr	r2, [r3, #28]
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	6a1b      	ldr	r3, [r3, #32]
 8010728:	431a      	orrs	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801072e:	019b      	lsls	r3, r3, #6
 8010730:	431a      	orrs	r2, r3
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010736:	085b      	lsrs	r3, r3, #1
 8010738:	3b01      	subs	r3, #1
 801073a:	041b      	lsls	r3, r3, #16
 801073c:	431a      	orrs	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010742:	061b      	lsls	r3, r3, #24
 8010744:	4937      	ldr	r1, [pc, #220]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 8010746:	4313      	orrs	r3, r2
 8010748:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801074a:	4b37      	ldr	r3, [pc, #220]	; (8010828 <HAL_RCC_OscConfig+0x4ec>)
 801074c:	2201      	movs	r2, #1
 801074e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010750:	f7fd faac 	bl	800dcac <HAL_GetTick>
 8010754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010756:	e008      	b.n	801076a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010758:	f7fd faa8 	bl	800dcac <HAL_GetTick>
 801075c:	4602      	mov	r2, r0
 801075e:	693b      	ldr	r3, [r7, #16]
 8010760:	1ad3      	subs	r3, r2, r3
 8010762:	2b02      	cmp	r3, #2
 8010764:	d901      	bls.n	801076a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8010766:	2303      	movs	r3, #3
 8010768:	e056      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801076a:	4b2e      	ldr	r3, [pc, #184]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010772:	2b00      	cmp	r3, #0
 8010774:	d0f0      	beq.n	8010758 <HAL_RCC_OscConfig+0x41c>
 8010776:	e04e      	b.n	8010816 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010778:	4b2b      	ldr	r3, [pc, #172]	; (8010828 <HAL_RCC_OscConfig+0x4ec>)
 801077a:	2200      	movs	r2, #0
 801077c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801077e:	f7fd fa95 	bl	800dcac <HAL_GetTick>
 8010782:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010784:	e008      	b.n	8010798 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010786:	f7fd fa91 	bl	800dcac <HAL_GetTick>
 801078a:	4602      	mov	r2, r0
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	1ad3      	subs	r3, r2, r3
 8010790:	2b02      	cmp	r3, #2
 8010792:	d901      	bls.n	8010798 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010794:	2303      	movs	r3, #3
 8010796:	e03f      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010798:	4b22      	ldr	r3, [pc, #136]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	d1f0      	bne.n	8010786 <HAL_RCC_OscConfig+0x44a>
 80107a4:	e037      	b.n	8010816 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	699b      	ldr	r3, [r3, #24]
 80107aa:	2b01      	cmp	r3, #1
 80107ac:	d101      	bne.n	80107b2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80107ae:	2301      	movs	r3, #1
 80107b0:	e032      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80107b2:	4b1c      	ldr	r3, [pc, #112]	; (8010824 <HAL_RCC_OscConfig+0x4e8>)
 80107b4:	685b      	ldr	r3, [r3, #4]
 80107b6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	699b      	ldr	r3, [r3, #24]
 80107bc:	2b01      	cmp	r3, #1
 80107be:	d028      	beq.n	8010812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80107c6:	687b      	ldr	r3, [r7, #4]
 80107c8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d121      	bne.n	8010812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80107d8:	429a      	cmp	r2, r3
 80107da:	d11a      	bne.n	8010812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80107dc:	68fa      	ldr	r2, [r7, #12]
 80107de:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80107e2:	4013      	ands	r3, r2
 80107e4:	687a      	ldr	r2, [r7, #4]
 80107e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80107e8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80107ea:	4293      	cmp	r3, r2
 80107ec:	d111      	bne.n	8010812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80107f8:	085b      	lsrs	r3, r3, #1
 80107fa:	3b01      	subs	r3, #1
 80107fc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80107fe:	429a      	cmp	r2, r3
 8010800:	d107      	bne.n	8010812 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801080c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 801080e:	429a      	cmp	r2, r3
 8010810:	d001      	beq.n	8010816 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8010812:	2301      	movs	r3, #1
 8010814:	e000      	b.n	8010818 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8010816:	2300      	movs	r3, #0
}
 8010818:	4618      	mov	r0, r3
 801081a:	3718      	adds	r7, #24
 801081c:	46bd      	mov	sp, r7
 801081e:	bd80      	pop	{r7, pc}
 8010820:	40007000 	.word	0x40007000
 8010824:	40023800 	.word	0x40023800
 8010828:	42470060 	.word	0x42470060

0801082c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801082c:	b580      	push	{r7, lr}
 801082e:	b084      	sub	sp, #16
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d101      	bne.n	8010840 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801083c:	2301      	movs	r3, #1
 801083e:	e0cc      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010840:	4b68      	ldr	r3, [pc, #416]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	f003 0307 	and.w	r3, r3, #7
 8010848:	683a      	ldr	r2, [r7, #0]
 801084a:	429a      	cmp	r2, r3
 801084c:	d90c      	bls.n	8010868 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801084e:	4b65      	ldr	r3, [pc, #404]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010850:	683a      	ldr	r2, [r7, #0]
 8010852:	b2d2      	uxtb	r2, r2
 8010854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010856:	4b63      	ldr	r3, [pc, #396]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	f003 0307 	and.w	r3, r3, #7
 801085e:	683a      	ldr	r2, [r7, #0]
 8010860:	429a      	cmp	r2, r3
 8010862:	d001      	beq.n	8010868 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010864:	2301      	movs	r3, #1
 8010866:	e0b8      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	681b      	ldr	r3, [r3, #0]
 801086c:	f003 0302 	and.w	r3, r3, #2
 8010870:	2b00      	cmp	r3, #0
 8010872:	d020      	beq.n	80108b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f003 0304 	and.w	r3, r3, #4
 801087c:	2b00      	cmp	r3, #0
 801087e:	d005      	beq.n	801088c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010880:	4b59      	ldr	r3, [pc, #356]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010882:	689b      	ldr	r3, [r3, #8]
 8010884:	4a58      	ldr	r2, [pc, #352]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010886:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801088a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	f003 0308 	and.w	r3, r3, #8
 8010894:	2b00      	cmp	r3, #0
 8010896:	d005      	beq.n	80108a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010898:	4b53      	ldr	r3, [pc, #332]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	4a52      	ldr	r2, [pc, #328]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801089e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80108a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80108a4:	4b50      	ldr	r3, [pc, #320]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	689b      	ldr	r3, [r3, #8]
 80108b0:	494d      	ldr	r1, [pc, #308]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108b2:	4313      	orrs	r3, r2
 80108b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f003 0301 	and.w	r3, r3, #1
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d044      	beq.n	801094c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	685b      	ldr	r3, [r3, #4]
 80108c6:	2b01      	cmp	r3, #1
 80108c8:	d107      	bne.n	80108da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80108ca:	4b47      	ldr	r3, [pc, #284]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108cc:	681b      	ldr	r3, [r3, #0]
 80108ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d119      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108d6:	2301      	movs	r3, #1
 80108d8:	e07f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	685b      	ldr	r3, [r3, #4]
 80108de:	2b02      	cmp	r3, #2
 80108e0:	d003      	beq.n	80108ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80108e6:	2b03      	cmp	r3, #3
 80108e8:	d107      	bne.n	80108fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80108ea:	4b3f      	ldr	r3, [pc, #252]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108ec:	681b      	ldr	r3, [r3, #0]
 80108ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d109      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80108f6:	2301      	movs	r3, #1
 80108f8:	e06f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80108fa:	4b3b      	ldr	r3, [pc, #236]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f003 0302 	and.w	r3, r3, #2
 8010902:	2b00      	cmp	r3, #0
 8010904:	d101      	bne.n	801090a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010906:	2301      	movs	r3, #1
 8010908:	e067      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801090a:	4b37      	ldr	r3, [pc, #220]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801090c:	689b      	ldr	r3, [r3, #8]
 801090e:	f023 0203 	bic.w	r2, r3, #3
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	685b      	ldr	r3, [r3, #4]
 8010916:	4934      	ldr	r1, [pc, #208]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010918:	4313      	orrs	r3, r2
 801091a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 801091c:	f7fd f9c6 	bl	800dcac <HAL_GetTick>
 8010920:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010922:	e00a      	b.n	801093a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010924:	f7fd f9c2 	bl	800dcac <HAL_GetTick>
 8010928:	4602      	mov	r2, r0
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	1ad3      	subs	r3, r2, r3
 801092e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010932:	4293      	cmp	r3, r2
 8010934:	d901      	bls.n	801093a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010936:	2303      	movs	r3, #3
 8010938:	e04f      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801093a:	4b2b      	ldr	r3, [pc, #172]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801093c:	689b      	ldr	r3, [r3, #8]
 801093e:	f003 020c 	and.w	r2, r3, #12
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	009b      	lsls	r3, r3, #2
 8010948:	429a      	cmp	r2, r3
 801094a:	d1eb      	bne.n	8010924 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 801094c:	4b25      	ldr	r3, [pc, #148]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	f003 0307 	and.w	r3, r3, #7
 8010954:	683a      	ldr	r2, [r7, #0]
 8010956:	429a      	cmp	r2, r3
 8010958:	d20c      	bcs.n	8010974 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801095a:	4b22      	ldr	r3, [pc, #136]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 801095c:	683a      	ldr	r2, [r7, #0]
 801095e:	b2d2      	uxtb	r2, r2
 8010960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010962:	4b20      	ldr	r3, [pc, #128]	; (80109e4 <HAL_RCC_ClockConfig+0x1b8>)
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	f003 0307 	and.w	r3, r3, #7
 801096a:	683a      	ldr	r2, [r7, #0]
 801096c:	429a      	cmp	r2, r3
 801096e:	d001      	beq.n	8010974 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010970:	2301      	movs	r3, #1
 8010972:	e032      	b.n	80109da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	f003 0304 	and.w	r3, r3, #4
 801097c:	2b00      	cmp	r3, #0
 801097e:	d008      	beq.n	8010992 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010980:	4b19      	ldr	r3, [pc, #100]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 8010982:	689b      	ldr	r3, [r3, #8]
 8010984:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	68db      	ldr	r3, [r3, #12]
 801098c:	4916      	ldr	r1, [pc, #88]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 801098e:	4313      	orrs	r3, r2
 8010990:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	681b      	ldr	r3, [r3, #0]
 8010996:	f003 0308 	and.w	r3, r3, #8
 801099a:	2b00      	cmp	r3, #0
 801099c:	d009      	beq.n	80109b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 801099e:	4b12      	ldr	r3, [pc, #72]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	691b      	ldr	r3, [r3, #16]
 80109aa:	00db      	lsls	r3, r3, #3
 80109ac:	490e      	ldr	r1, [pc, #56]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109ae:	4313      	orrs	r3, r2
 80109b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80109b2:	f000 f821 	bl	80109f8 <HAL_RCC_GetSysClockFreq>
 80109b6:	4602      	mov	r2, r0
 80109b8:	4b0b      	ldr	r3, [pc, #44]	; (80109e8 <HAL_RCC_ClockConfig+0x1bc>)
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	091b      	lsrs	r3, r3, #4
 80109be:	f003 030f 	and.w	r3, r3, #15
 80109c2:	490a      	ldr	r1, [pc, #40]	; (80109ec <HAL_RCC_ClockConfig+0x1c0>)
 80109c4:	5ccb      	ldrb	r3, [r1, r3]
 80109c6:	fa22 f303 	lsr.w	r3, r2, r3
 80109ca:	4a09      	ldr	r2, [pc, #36]	; (80109f0 <HAL_RCC_ClockConfig+0x1c4>)
 80109cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80109ce:	4b09      	ldr	r3, [pc, #36]	; (80109f4 <HAL_RCC_ClockConfig+0x1c8>)
 80109d0:	681b      	ldr	r3, [r3, #0]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fd f926 	bl	800dc24 <HAL_InitTick>

  return HAL_OK;
 80109d8:	2300      	movs	r3, #0
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	40023c00 	.word	0x40023c00
 80109e8:	40023800 	.word	0x40023800
 80109ec:	080187e0 	.word	0x080187e0
 80109f0:	20000000 	.word	0x20000000
 80109f4:	2000036c 	.word	0x2000036c

080109f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80109f8:	b5b0      	push	{r4, r5, r7, lr}
 80109fa:	b084      	sub	sp, #16
 80109fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80109fe:	2100      	movs	r1, #0
 8010a00:	6079      	str	r1, [r7, #4]
 8010a02:	2100      	movs	r1, #0
 8010a04:	60f9      	str	r1, [r7, #12]
 8010a06:	2100      	movs	r1, #0
 8010a08:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010a0e:	4952      	ldr	r1, [pc, #328]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010a10:	6889      	ldr	r1, [r1, #8]
 8010a12:	f001 010c 	and.w	r1, r1, #12
 8010a16:	2908      	cmp	r1, #8
 8010a18:	d00d      	beq.n	8010a36 <HAL_RCC_GetSysClockFreq+0x3e>
 8010a1a:	2908      	cmp	r1, #8
 8010a1c:	f200 8094 	bhi.w	8010b48 <HAL_RCC_GetSysClockFreq+0x150>
 8010a20:	2900      	cmp	r1, #0
 8010a22:	d002      	beq.n	8010a2a <HAL_RCC_GetSysClockFreq+0x32>
 8010a24:	2904      	cmp	r1, #4
 8010a26:	d003      	beq.n	8010a30 <HAL_RCC_GetSysClockFreq+0x38>
 8010a28:	e08e      	b.n	8010b48 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010a2a:	4b4c      	ldr	r3, [pc, #304]	; (8010b5c <HAL_RCC_GetSysClockFreq+0x164>)
 8010a2c:	60bb      	str	r3, [r7, #8]
       break;
 8010a2e:	e08e      	b.n	8010b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010a30:	4b4b      	ldr	r3, [pc, #300]	; (8010b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8010a32:	60bb      	str	r3, [r7, #8]
      break;
 8010a34:	e08b      	b.n	8010b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010a36:	4948      	ldr	r1, [pc, #288]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010a38:	6849      	ldr	r1, [r1, #4]
 8010a3a:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8010a3e:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010a40:	4945      	ldr	r1, [pc, #276]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010a42:	6849      	ldr	r1, [r1, #4]
 8010a44:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8010a48:	2900      	cmp	r1, #0
 8010a4a:	d024      	beq.n	8010a96 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010a4c:	4942      	ldr	r1, [pc, #264]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010a4e:	6849      	ldr	r1, [r1, #4]
 8010a50:	0989      	lsrs	r1, r1, #6
 8010a52:	4608      	mov	r0, r1
 8010a54:	f04f 0100 	mov.w	r1, #0
 8010a58:	f240 14ff 	movw	r4, #511	; 0x1ff
 8010a5c:	f04f 0500 	mov.w	r5, #0
 8010a60:	ea00 0204 	and.w	r2, r0, r4
 8010a64:	ea01 0305 	and.w	r3, r1, r5
 8010a68:	493d      	ldr	r1, [pc, #244]	; (8010b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8010a6a:	fb01 f003 	mul.w	r0, r1, r3
 8010a6e:	2100      	movs	r1, #0
 8010a70:	fb01 f102 	mul.w	r1, r1, r2
 8010a74:	1844      	adds	r4, r0, r1
 8010a76:	493a      	ldr	r1, [pc, #232]	; (8010b60 <HAL_RCC_GetSysClockFreq+0x168>)
 8010a78:	fba2 0101 	umull	r0, r1, r2, r1
 8010a7c:	1863      	adds	r3, r4, r1
 8010a7e:	4619      	mov	r1, r3
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	461a      	mov	r2, r3
 8010a84:	f04f 0300 	mov.w	r3, #0
 8010a88:	f7f0 f8ee 	bl	8000c68 <__aeabi_uldivmod>
 8010a8c:	4602      	mov	r2, r0
 8010a8e:	460b      	mov	r3, r1
 8010a90:	4613      	mov	r3, r2
 8010a92:	60fb      	str	r3, [r7, #12]
 8010a94:	e04a      	b.n	8010b2c <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010a96:	4b30      	ldr	r3, [pc, #192]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010a98:	685b      	ldr	r3, [r3, #4]
 8010a9a:	099b      	lsrs	r3, r3, #6
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	f04f 0300 	mov.w	r3, #0
 8010aa2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8010aa6:	f04f 0100 	mov.w	r1, #0
 8010aaa:	ea02 0400 	and.w	r4, r2, r0
 8010aae:	ea03 0501 	and.w	r5, r3, r1
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	4629      	mov	r1, r5
 8010ab6:	f04f 0200 	mov.w	r2, #0
 8010aba:	f04f 0300 	mov.w	r3, #0
 8010abe:	014b      	lsls	r3, r1, #5
 8010ac0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8010ac4:	0142      	lsls	r2, r0, #5
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	4619      	mov	r1, r3
 8010aca:	1b00      	subs	r0, r0, r4
 8010acc:	eb61 0105 	sbc.w	r1, r1, r5
 8010ad0:	f04f 0200 	mov.w	r2, #0
 8010ad4:	f04f 0300 	mov.w	r3, #0
 8010ad8:	018b      	lsls	r3, r1, #6
 8010ada:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8010ade:	0182      	lsls	r2, r0, #6
 8010ae0:	1a12      	subs	r2, r2, r0
 8010ae2:	eb63 0301 	sbc.w	r3, r3, r1
 8010ae6:	f04f 0000 	mov.w	r0, #0
 8010aea:	f04f 0100 	mov.w	r1, #0
 8010aee:	00d9      	lsls	r1, r3, #3
 8010af0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8010af4:	00d0      	lsls	r0, r2, #3
 8010af6:	4602      	mov	r2, r0
 8010af8:	460b      	mov	r3, r1
 8010afa:	1912      	adds	r2, r2, r4
 8010afc:	eb45 0303 	adc.w	r3, r5, r3
 8010b00:	f04f 0000 	mov.w	r0, #0
 8010b04:	f04f 0100 	mov.w	r1, #0
 8010b08:	0299      	lsls	r1, r3, #10
 8010b0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8010b0e:	0290      	lsls	r0, r2, #10
 8010b10:	4602      	mov	r2, r0
 8010b12:	460b      	mov	r3, r1
 8010b14:	4610      	mov	r0, r2
 8010b16:	4619      	mov	r1, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	461a      	mov	r2, r3
 8010b1c:	f04f 0300 	mov.w	r3, #0
 8010b20:	f7f0 f8a2 	bl	8000c68 <__aeabi_uldivmod>
 8010b24:	4602      	mov	r2, r0
 8010b26:	460b      	mov	r3, r1
 8010b28:	4613      	mov	r3, r2
 8010b2a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010b2c:	4b0a      	ldr	r3, [pc, #40]	; (8010b58 <HAL_RCC_GetSysClockFreq+0x160>)
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	0c1b      	lsrs	r3, r3, #16
 8010b32:	f003 0303 	and.w	r3, r3, #3
 8010b36:	3301      	adds	r3, #1
 8010b38:	005b      	lsls	r3, r3, #1
 8010b3a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	683b      	ldr	r3, [r7, #0]
 8010b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8010b44:	60bb      	str	r3, [r7, #8]
      break;
 8010b46:	e002      	b.n	8010b4e <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010b48:	4b04      	ldr	r3, [pc, #16]	; (8010b5c <HAL_RCC_GetSysClockFreq+0x164>)
 8010b4a:	60bb      	str	r3, [r7, #8]
      break;
 8010b4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010b4e:	68bb      	ldr	r3, [r7, #8]
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bdb0      	pop	{r4, r5, r7, pc}
 8010b58:	40023800 	.word	0x40023800
 8010b5c:	00f42400 	.word	0x00f42400
 8010b60:	017d7840 	.word	0x017d7840

08010b64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010b64:	b480      	push	{r7}
 8010b66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010b68:	4b03      	ldr	r3, [pc, #12]	; (8010b78 <HAL_RCC_GetHCLKFreq+0x14>)
 8010b6a:	681b      	ldr	r3, [r3, #0]
}
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
 8010b76:	bf00      	nop
 8010b78:	20000000 	.word	0x20000000

08010b7c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8010b7c:	b580      	push	{r7, lr}
 8010b7e:	b082      	sub	sp, #8
 8010b80:	af00      	add	r7, sp, #0
 8010b82:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d101      	bne.n	8010b8e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8010b8a:	2301      	movs	r3, #1
 8010b8c:	e022      	b.n	8010bd4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010b94:	b2db      	uxtb	r3, r3
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d105      	bne.n	8010ba6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8010b9a:	687b      	ldr	r3, [r7, #4]
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8010ba0:	6878      	ldr	r0, [r7, #4]
 8010ba2:	f7f3 f86b 	bl	8003c7c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	2203      	movs	r2, #3
 8010baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 f814 	bl	8010bdc <HAL_SD_InitCard>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d001      	beq.n	8010bbe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e00a      	b.n	8010bd4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8010bc4:	687b      	ldr	r3, [r7, #4]
 8010bc6:	2200      	movs	r2, #0
 8010bc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	2201      	movs	r2, #1
 8010bce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8010bd2:	2300      	movs	r3, #0
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3708      	adds	r7, #8
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8010bdc:	b5b0      	push	{r4, r5, r7, lr}
 8010bde:	b08e      	sub	sp, #56	; 0x38
 8010be0:	af04      	add	r7, sp, #16
 8010be2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8010be4:	2300      	movs	r3, #0
 8010be6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8010be8:	2300      	movs	r3, #0
 8010bea:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8010bec:	2300      	movs	r3, #0
 8010bee:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8010bf8:	2376      	movs	r3, #118	; 0x76
 8010bfa:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	681d      	ldr	r5, [r3, #0]
 8010c00:	466c      	mov	r4, sp
 8010c02:	f107 0314 	add.w	r3, r7, #20
 8010c06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010c0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010c0e:	f107 0308 	add.w	r3, r7, #8
 8010c12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010c14:	4628      	mov	r0, r5
 8010c16:	f002 f83f 	bl	8012c98 <SDIO_Init>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8010c20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d001      	beq.n	8010c2c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8010c28:	2301      	movs	r3, #1
 8010c2a:	e04c      	b.n	8010cc6 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8010c2c:	4b28      	ldr	r3, [pc, #160]	; (8010cd0 <HAL_SD_InitCard+0xf4>)
 8010c2e:	2200      	movs	r2, #0
 8010c30:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	4618      	mov	r0, r3
 8010c38:	f002 f877 	bl	8012d2a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8010c3c:	4b24      	ldr	r3, [pc, #144]	; (8010cd0 <HAL_SD_InitCard+0xf4>)
 8010c3e:	2201      	movs	r2, #1
 8010c40:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8010c42:	6878      	ldr	r0, [r7, #4]
 8010c44:	f001 f80e 	bl	8011c64 <SD_PowerON>
 8010c48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c4a:	6a3b      	ldr	r3, [r7, #32]
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d00b      	beq.n	8010c68 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	2201      	movs	r2, #1
 8010c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c5c:	6a3b      	ldr	r3, [r7, #32]
 8010c5e:	431a      	orrs	r2, r3
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010c64:	2301      	movs	r3, #1
 8010c66:	e02e      	b.n	8010cc6 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8010c68:	6878      	ldr	r0, [r7, #4]
 8010c6a:	f000 ff2f 	bl	8011acc <SD_InitCard>
 8010c6e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c70:	6a3b      	ldr	r3, [r7, #32]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00b      	beq.n	8010c8e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	431a      	orrs	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010c8a:	2301      	movs	r3, #1
 8010c8c:	e01b      	b.n	8010cc6 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	681b      	ldr	r3, [r3, #0]
 8010c92:	f44f 7100 	mov.w	r1, #512	; 0x200
 8010c96:	4618      	mov	r0, r3
 8010c98:	f002 f8da 	bl	8012e50 <SDMMC_CmdBlockLength>
 8010c9c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00f      	beq.n	8010cc4 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	4a0a      	ldr	r2, [pc, #40]	; (8010cd4 <HAL_SD_InitCard+0xf8>)
 8010caa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010cb0:	6a3b      	ldr	r3, [r7, #32]
 8010cb2:	431a      	orrs	r2, r3
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8010cc0:	2301      	movs	r3, #1
 8010cc2:	e000      	b.n	8010cc6 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8010cc4:	2300      	movs	r3, #0
}
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	3728      	adds	r7, #40	; 0x28
 8010cca:	46bd      	mov	sp, r7
 8010ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8010cce:	bf00      	nop
 8010cd0:	422580a0 	.word	0x422580a0
 8010cd4:	004005ff 	.word	0x004005ff

08010cd8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8010cd8:	b580      	push	{r7, lr}
 8010cda:	b08c      	sub	sp, #48	; 0x30
 8010cdc:	af00      	add	r7, sp, #0
 8010cde:	60f8      	str	r0, [r7, #12]
 8010ce0:	60b9      	str	r1, [r7, #8]
 8010ce2:	607a      	str	r2, [r7, #4]
 8010ce4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8010cea:	68bb      	ldr	r3, [r7, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d107      	bne.n	8010d00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010cf0:	68fb      	ldr	r3, [r7, #12]
 8010cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cf4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	e0c0      	b.n	8010e82 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010d00:	68fb      	ldr	r3, [r7, #12]
 8010d02:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010d06:	b2db      	uxtb	r3, r3
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	f040 80b9 	bne.w	8010e80 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010d0e:	68fb      	ldr	r3, [r7, #12]
 8010d10:	2200      	movs	r2, #0
 8010d12:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d16:	683b      	ldr	r3, [r7, #0]
 8010d18:	441a      	add	r2, r3
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010d1e:	429a      	cmp	r2, r3
 8010d20:	d907      	bls.n	8010d32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010d26:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010d2a:	68fb      	ldr	r3, [r7, #12]
 8010d2c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010d2e:	2301      	movs	r3, #1
 8010d30:	e0a7      	b.n	8010e82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	2203      	movs	r2, #3
 8010d36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	2200      	movs	r2, #0
 8010d40:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010d48:	68fa      	ldr	r2, [r7, #12]
 8010d4a:	6812      	ldr	r2, [r2, #0]
 8010d4c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8010d50:	f043 0302 	orr.w	r3, r3, #2
 8010d54:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d5a:	4a4c      	ldr	r2, [pc, #304]	; (8010e8c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8010d5c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d62:	4a4b      	ldr	r2, [pc, #300]	; (8010e90 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8010d64:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d6a:	2200      	movs	r2, #0
 8010d6c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010d6e:	68fb      	ldr	r3, [r7, #12]
 8010d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d72:	2200      	movs	r2, #0
 8010d74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8010d76:	68fb      	ldr	r3, [r7, #12]
 8010d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010d82:	68fb      	ldr	r3, [r7, #12]
 8010d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d86:	689a      	ldr	r2, [r3, #8]
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010d8c:	681b      	ldr	r3, [r3, #0]
 8010d8e:	430a      	orrs	r2, r1
 8010d90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010d92:	68fb      	ldr	r3, [r7, #12]
 8010d94:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	3380      	adds	r3, #128	; 0x80
 8010d9c:	4619      	mov	r1, r3
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	683b      	ldr	r3, [r7, #0]
 8010da2:	025b      	lsls	r3, r3, #9
 8010da4:	089b      	lsrs	r3, r3, #2
 8010da6:	f7fd f971 	bl	800e08c <HAL_DMA_Start_IT>
 8010daa:	4603      	mov	r3, r0
 8010dac:	2b00      	cmp	r3, #0
 8010dae:	d017      	beq.n	8010de0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	681b      	ldr	r3, [r3, #0]
 8010dba:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8010dbe:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	4a33      	ldr	r2, [pc, #204]	; (8010e94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8010dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010dcc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010dd0:	68fb      	ldr	r3, [r7, #12]
 8010dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	2201      	movs	r2, #1
 8010dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8010ddc:	2301      	movs	r3, #1
 8010dde:	e050      	b.n	8010e82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8010de0:	4b2d      	ldr	r3, [pc, #180]	; (8010e98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8010de2:	2201      	movs	r2, #1
 8010de4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dea:	2b01      	cmp	r3, #1
 8010dec:	d002      	beq.n	8010df4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8010dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010df0:	025b      	lsls	r3, r3, #9
 8010df2:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010df4:	f04f 33ff 	mov.w	r3, #4294967295
 8010df8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010dfa:	683b      	ldr	r3, [r7, #0]
 8010dfc:	025b      	lsls	r3, r3, #9
 8010dfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8010e00:	2390      	movs	r3, #144	; 0x90
 8010e02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8010e04:	2302      	movs	r3, #2
 8010e06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010e08:	2300      	movs	r3, #0
 8010e0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010e0c:	2301      	movs	r3, #1
 8010e0e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010e10:	68fb      	ldr	r3, [r7, #12]
 8010e12:	681b      	ldr	r3, [r3, #0]
 8010e14:	f107 0210 	add.w	r2, r7, #16
 8010e18:	4611      	mov	r1, r2
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f001 ffec 	bl	8012df8 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d90a      	bls.n	8010e3c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2282      	movs	r2, #130	; 0x82
 8010e2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010e2c:	68fb      	ldr	r3, [r7, #12]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e32:	4618      	mov	r0, r3
 8010e34:	f002 f850 	bl	8012ed8 <SDMMC_CmdReadMultiBlock>
 8010e38:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010e3a:	e009      	b.n	8010e50 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010e3c:	68fb      	ldr	r3, [r7, #12]
 8010e3e:	2281      	movs	r2, #129	; 0x81
 8010e40:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f002 f823 	bl	8012e94 <SDMMC_CmdReadSingleBlock>
 8010e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8010e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d012      	beq.n	8010e7c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	681b      	ldr	r3, [r3, #0]
 8010e5a:	4a0e      	ldr	r2, [pc, #56]	; (8010e94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8010e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e64:	431a      	orrs	r2, r3
 8010e66:	68fb      	ldr	r3, [r7, #12]
 8010e68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2201      	movs	r2, #1
 8010e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010e72:	68fb      	ldr	r3, [r7, #12]
 8010e74:	2200      	movs	r2, #0
 8010e76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8010e78:	2301      	movs	r3, #1
 8010e7a:	e002      	b.n	8010e82 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	e000      	b.n	8010e82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8010e80:	2302      	movs	r3, #2
  }
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	3730      	adds	r7, #48	; 0x30
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd80      	pop	{r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	080118db 	.word	0x080118db
 8010e90:	0801194d 	.word	0x0801194d
 8010e94:	004005ff 	.word	0x004005ff
 8010e98:	4225858c 	.word	0x4225858c

08010e9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b08c      	sub	sp, #48	; 0x30
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	60f8      	str	r0, [r7, #12]
 8010ea4:	60b9      	str	r1, [r7, #8]
 8010ea6:	607a      	str	r2, [r7, #4]
 8010ea8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8010eae:	68bb      	ldr	r3, [r7, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d107      	bne.n	8010ec4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010ec0:	2301      	movs	r3, #1
 8010ec2:	e0c5      	b.n	8011050 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010eca:	b2db      	uxtb	r3, r3
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	f040 80be 	bne.w	801104e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010ed2:	68fb      	ldr	r3, [r7, #12]
 8010ed4:	2200      	movs	r2, #0
 8010ed6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010ed8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010eda:	683b      	ldr	r3, [r7, #0]
 8010edc:	441a      	add	r2, r3
 8010ede:	68fb      	ldr	r3, [r7, #12]
 8010ee0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ee2:	429a      	cmp	r2, r3
 8010ee4:	d907      	bls.n	8010ef6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eea:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	e0ac      	b.n	8011050 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2203      	movs	r2, #3
 8010efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010efe:	68fb      	ldr	r3, [r7, #12]
 8010f00:	681b      	ldr	r3, [r3, #0]
 8010f02:	2200      	movs	r2, #0
 8010f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f0c:	68fa      	ldr	r2, [r7, #12]
 8010f0e:	6812      	ldr	r2, [r2, #0]
 8010f10:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8010f14:	f043 0302 	orr.w	r3, r3, #2
 8010f18:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f1e:	4a4e      	ldr	r2, [pc, #312]	; (8011058 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8010f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f26:	4a4d      	ldr	r2, [pc, #308]	; (801105c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8010f28:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f2e:	2200      	movs	r2, #0
 8010f30:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010f32:	68fb      	ldr	r3, [r7, #12]
 8010f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f36:	2b01      	cmp	r3, #1
 8010f38:	d002      	beq.n	8010f40 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8010f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3c:	025b      	lsls	r3, r3, #9
 8010f3e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d90a      	bls.n	8010f5c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	22a0      	movs	r2, #160	; 0xa0
 8010f4a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f52:	4618      	mov	r0, r3
 8010f54:	f002 f804 	bl	8012f60 <SDMMC_CmdWriteMultiBlock>
 8010f58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010f5a:	e009      	b.n	8010f70 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	2290      	movs	r2, #144	; 0x90
 8010f60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010f62:	68fb      	ldr	r3, [r7, #12]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010f68:	4618      	mov	r0, r3
 8010f6a:	f001 ffd7 	bl	8012f1c <SDMMC_CmdWriteSingleBlock>
 8010f6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8010f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d012      	beq.n	8010f9c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	681b      	ldr	r3, [r3, #0]
 8010f7a:	4a39      	ldr	r2, [pc, #228]	; (8011060 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8010f7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010f7e:	68fb      	ldr	r3, [r7, #12]
 8010f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f84:	431a      	orrs	r2, r3
 8010f86:	68fb      	ldr	r3, [r7, #12]
 8010f88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	2200      	movs	r2, #0
 8010f96:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010f98:	2301      	movs	r3, #1
 8010f9a:	e059      	b.n	8011050 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8010f9c:	4b31      	ldr	r3, [pc, #196]	; (8011064 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8010f9e:	2201      	movs	r2, #1
 8010fa0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fa6:	2240      	movs	r2, #64	; 0x40
 8010fa8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8010faa:	68fb      	ldr	r3, [r7, #12]
 8010fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	681b      	ldr	r3, [r3, #0]
 8010fb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fba:	689a      	ldr	r2, [r3, #8]
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fc0:	681b      	ldr	r3, [r3, #0]
 8010fc2:	430a      	orrs	r2, r1
 8010fc4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010fca:	68b9      	ldr	r1, [r7, #8]
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	681b      	ldr	r3, [r3, #0]
 8010fd0:	3380      	adds	r3, #128	; 0x80
 8010fd2:	461a      	mov	r2, r3
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	025b      	lsls	r3, r3, #9
 8010fd8:	089b      	lsrs	r3, r3, #2
 8010fda:	f7fd f857 	bl	800e08c <HAL_DMA_Start_IT>
 8010fde:	4603      	mov	r3, r0
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d01c      	beq.n	801101e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	681b      	ldr	r3, [r3, #0]
 8010fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	6812      	ldr	r2, [r2, #0]
 8010fee:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8010ff2:	f023 0302 	bic.w	r3, r3, #2
 8010ff6:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	4a18      	ldr	r2, [pc, #96]	; (8011060 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8010ffe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8011000:	68fb      	ldr	r3, [r7, #12]
 8011002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011004:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	2201      	movs	r2, #1
 8011010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	2200      	movs	r2, #0
 8011018:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 801101a:	2301      	movs	r3, #1
 801101c:	e018      	b.n	8011050 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801101e:	f04f 33ff 	mov.w	r3, #4294967295
 8011022:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	025b      	lsls	r3, r3, #9
 8011028:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 801102a:	2390      	movs	r3, #144	; 0x90
 801102c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 801102e:	2300      	movs	r3, #0
 8011030:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8011032:	2300      	movs	r3, #0
 8011034:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8011036:	2301      	movs	r3, #1
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	f107 0210 	add.w	r2, r7, #16
 8011042:	4611      	mov	r1, r2
 8011044:	4618      	mov	r0, r3
 8011046:	f001 fed7 	bl	8012df8 <SDIO_ConfigData>

      return HAL_OK;
 801104a:	2300      	movs	r3, #0
 801104c:	e000      	b.n	8011050 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 801104e:	2302      	movs	r3, #2
  }
}
 8011050:	4618      	mov	r0, r3
 8011052:	3730      	adds	r7, #48	; 0x30
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}
 8011058:	080118b1 	.word	0x080118b1
 801105c:	0801194d 	.word	0x0801194d
 8011060:	004005ff 	.word	0x004005ff
 8011064:	4225858c 	.word	0x4225858c

08011068 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8011068:	b580      	push	{r7, lr}
 801106a:	b084      	sub	sp, #16
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011074:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	681b      	ldr	r3, [r3, #0]
 801107a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801107c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011080:	2b00      	cmp	r3, #0
 8011082:	d008      	beq.n	8011096 <HAL_SD_IRQHandler+0x2e>
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	f003 0308 	and.w	r3, r3, #8
 801108a:	2b00      	cmp	r3, #0
 801108c:	d003      	beq.n	8011096 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801108e:	6878      	ldr	r0, [r7, #4]
 8011090:	f001 f807 	bl	80120a2 <SD_Read_IT>
 8011094:	e165      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801109c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f000 808f 	beq.w	80111c4 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80110ae:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110b6:	687a      	ldr	r2, [r7, #4]
 80110b8:	6812      	ldr	r2, [r2, #0]
 80110ba:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 80110be:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 80110c2:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	681b      	ldr	r3, [r3, #0]
 80110c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	681b      	ldr	r3, [r3, #0]
 80110ce:	f022 0201 	bic.w	r2, r2, #1
 80110d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f003 0308 	and.w	r3, r3, #8
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d039      	beq.n	8011152 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80110de:	68fb      	ldr	r3, [r7, #12]
 80110e0:	f003 0302 	and.w	r3, r3, #2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d104      	bne.n	80110f2 <HAL_SD_IRQHandler+0x8a>
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	f003 0320 	and.w	r3, r3, #32
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d011      	beq.n	8011116 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	681b      	ldr	r3, [r3, #0]
 80110f6:	4618      	mov	r0, r3
 80110f8:	f001 ff54 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 80110fc:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80110fe:	68bb      	ldr	r3, [r7, #8]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d008      	beq.n	8011116 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011108:	68bb      	ldr	r3, [r7, #8]
 801110a:	431a      	orrs	r2, r3
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 f92f 	bl	8011374 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	f240 523a 	movw	r2, #1338	; 0x53a
 801111e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8011120:	687b      	ldr	r3, [r7, #4]
 8011122:	2201      	movs	r2, #1
 8011124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	2200      	movs	r2, #0
 801112c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f003 0301 	and.w	r3, r3, #1
 8011134:	2b00      	cmp	r3, #0
 8011136:	d104      	bne.n	8011142 <HAL_SD_IRQHandler+0xda>
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	f003 0302 	and.w	r3, r3, #2
 801113e:	2b00      	cmp	r3, #0
 8011140:	d003      	beq.n	801114a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8011142:	6878      	ldr	r0, [r7, #4]
 8011144:	f7f2 fd30 	bl	8003ba8 <HAL_SD_RxCpltCallback>
 8011148:	e10b      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801114a:	6878      	ldr	r0, [r7, #4]
 801114c:	f7f2 fd3c 	bl	8003bc8 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8011150:	e107      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011158:	2b00      	cmp	r3, #0
 801115a:	f000 8102 	beq.w	8011362 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801115e:	68fb      	ldr	r3, [r7, #12]
 8011160:	f003 0320 	and.w	r3, r3, #32
 8011164:	2b00      	cmp	r3, #0
 8011166:	d011      	beq.n	801118c <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	681b      	ldr	r3, [r3, #0]
 801116c:	4618      	mov	r0, r3
 801116e:	f001 ff19 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 8011172:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8011174:	68bb      	ldr	r3, [r7, #8]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d008      	beq.n	801118c <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	431a      	orrs	r2, r3
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8011186:	6878      	ldr	r0, [r7, #4]
 8011188:	f000 f8f4 	bl	8011374 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	f003 0301 	and.w	r3, r3, #1
 8011192:	2b00      	cmp	r3, #0
 8011194:	f040 80e5 	bne.w	8011362 <HAL_SD_IRQHandler+0x2fa>
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	f003 0302 	and.w	r3, r3, #2
 801119e:	2b00      	cmp	r3, #0
 80111a0:	f040 80df 	bne.w	8011362 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80111a4:	687b      	ldr	r3, [r7, #4]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	f022 0208 	bic.w	r2, r2, #8
 80111b2:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2201      	movs	r2, #1
 80111b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7f2 fd03 	bl	8003bc8 <HAL_SD_TxCpltCallback>
}
 80111c2:	e0ce      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d008      	beq.n	80111e4 <HAL_SD_IRQHandler+0x17c>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	f003 0308 	and.w	r3, r3, #8
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d003      	beq.n	80111e4 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80111dc:	6878      	ldr	r0, [r7, #4]
 80111de:	f000 ffb1 	bl	8012144 <SD_Write_IT>
 80111e2:	e0be      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	681b      	ldr	r3, [r3, #0]
 80111e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111ea:	f240 233a 	movw	r3, #570	; 0x23a
 80111ee:	4013      	ands	r3, r2
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	f000 80b6 	beq.w	8011362 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80111f6:	687b      	ldr	r3, [r7, #4]
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111fc:	f003 0302 	and.w	r3, r3, #2
 8011200:	2b00      	cmp	r3, #0
 8011202:	d005      	beq.n	8011210 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011208:	f043 0202 	orr.w	r2, r3, #2
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011216:	f003 0308 	and.w	r3, r3, #8
 801121a:	2b00      	cmp	r3, #0
 801121c:	d005      	beq.n	801122a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011222:	f043 0208 	orr.w	r2, r3, #8
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	681b      	ldr	r3, [r3, #0]
 801122e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011230:	f003 0320 	and.w	r3, r3, #32
 8011234:	2b00      	cmp	r3, #0
 8011236:	d005      	beq.n	8011244 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801123c:	f043 0220 	orr.w	r2, r3, #32
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801124a:	f003 0310 	and.w	r3, r3, #16
 801124e:	2b00      	cmp	r3, #0
 8011250:	d005      	beq.n	801125e <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011256:	f043 0210 	orr.w	r2, r3, #16
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011264:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011268:	2b00      	cmp	r3, #0
 801126a:	d005      	beq.n	8011278 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011270:	f043 0208 	orr.w	r2, r3, #8
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	f240 723a 	movw	r2, #1850	; 0x73a
 8011280:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	681b      	ldr	r3, [r3, #0]
 8011286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011288:	687a      	ldr	r2, [r7, #4]
 801128a:	6812      	ldr	r2, [r2, #0]
 801128c:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8011290:	f023 0302 	bic.w	r3, r3, #2
 8011294:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4618      	mov	r0, r3
 801129c:	f001 fe82 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 80112a0:	4602      	mov	r2, r0
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112a6:	431a      	orrs	r2, r3
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	f003 0308 	and.w	r3, r3, #8
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d00a      	beq.n	80112cc <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2201      	movs	r2, #1
 80112ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2200      	movs	r2, #0
 80112c2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80112c4:	6878      	ldr	r0, [r7, #4]
 80112c6:	f000 f855 	bl	8011374 <HAL_SD_ErrorCallback>
}
 80112ca:	e04a      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d045      	beq.n	8011362 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f003 0310 	and.w	r3, r3, #16
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d104      	bne.n	80112ea <HAL_SD_IRQHandler+0x282>
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	f003 0320 	and.w	r3, r3, #32
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d011      	beq.n	801130e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ee:	4a1f      	ldr	r2, [pc, #124]	; (801136c <HAL_SD_IRQHandler+0x304>)
 80112f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112f6:	4618      	mov	r0, r3
 80112f8:	f7fc ff20 	bl	800e13c <HAL_DMA_Abort_IT>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d02f      	beq.n	8011362 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011306:	4618      	mov	r0, r3
 8011308:	f000 fb72 	bl	80119f0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 801130c:	e029      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f003 0301 	and.w	r3, r3, #1
 8011314:	2b00      	cmp	r3, #0
 8011316:	d104      	bne.n	8011322 <HAL_SD_IRQHandler+0x2ba>
 8011318:	68fb      	ldr	r3, [r7, #12]
 801131a:	f003 0302 	and.w	r3, r3, #2
 801131e:	2b00      	cmp	r3, #0
 8011320:	d011      	beq.n	8011346 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011326:	4a12      	ldr	r2, [pc, #72]	; (8011370 <HAL_SD_IRQHandler+0x308>)
 8011328:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801132e:	4618      	mov	r0, r3
 8011330:	f7fc ff04 	bl	800e13c <HAL_DMA_Abort_IT>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d013      	beq.n	8011362 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801133e:	4618      	mov	r0, r3
 8011340:	f000 fb8d 	bl	8011a5e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8011344:	e00d      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2200      	movs	r2, #0
 801134a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	2201      	movs	r2, #1
 8011350:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8011354:	687b      	ldr	r3, [r7, #4]
 8011356:	2200      	movs	r2, #0
 8011358:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 f814 	bl	8011388 <HAL_SD_AbortCallback>
}
 8011360:	e7ff      	b.n	8011362 <HAL_SD_IRQHandler+0x2fa>
 8011362:	bf00      	nop
 8011364:	3710      	adds	r7, #16
 8011366:	46bd      	mov	sp, r7
 8011368:	bd80      	pop	{r7, pc}
 801136a:	bf00      	nop
 801136c:	080119f1 	.word	0x080119f1
 8011370:	08011a5f 	.word	0x08011a5f

08011374 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8011374:	b480      	push	{r7}
 8011376:	b083      	sub	sp, #12
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801137c:	bf00      	nop
 801137e:	370c      	adds	r7, #12
 8011380:	46bd      	mov	sp, r7
 8011382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011386:	4770      	bx	lr

08011388 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011388:	b480      	push	{r7}
 801138a:	b083      	sub	sp, #12
 801138c:	af00      	add	r7, sp, #0
 801138e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8011390:	bf00      	nop
 8011392:	370c      	adds	r7, #12
 8011394:	46bd      	mov	sp, r7
 8011396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139a:	4770      	bx	lr

0801139c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801139c:	b480      	push	{r7}
 801139e:	b083      	sub	sp, #12
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80113a6:	687b      	ldr	r3, [r7, #4]
 80113a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113aa:	0f9b      	lsrs	r3, r3, #30
 80113ac:	b2da      	uxtb	r2, r3
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113b6:	0e9b      	lsrs	r3, r3, #26
 80113b8:	b2db      	uxtb	r3, r3
 80113ba:	f003 030f 	and.w	r3, r3, #15
 80113be:	b2da      	uxtb	r2, r3
 80113c0:	683b      	ldr	r3, [r7, #0]
 80113c2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113c8:	0e1b      	lsrs	r3, r3, #24
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f003 0303 	and.w	r3, r3, #3
 80113d0:	b2da      	uxtb	r2, r3
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113da:	0c1b      	lsrs	r3, r3, #16
 80113dc:	b2da      	uxtb	r2, r3
 80113de:	683b      	ldr	r3, [r7, #0]
 80113e0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113e6:	0a1b      	lsrs	r3, r3, #8
 80113e8:	b2da      	uxtb	r2, r3
 80113ea:	683b      	ldr	r3, [r7, #0]
 80113ec:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80113ee:	687b      	ldr	r3, [r7, #4]
 80113f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80113f2:	b2da      	uxtb	r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113fc:	0d1b      	lsrs	r3, r3, #20
 80113fe:	b29a      	uxth	r2, r3
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011408:	0c1b      	lsrs	r3, r3, #16
 801140a:	b2db      	uxtb	r3, r3
 801140c:	f003 030f 	and.w	r3, r3, #15
 8011410:	b2da      	uxtb	r2, r3
 8011412:	683b      	ldr	r3, [r7, #0]
 8011414:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8011416:	687b      	ldr	r3, [r7, #4]
 8011418:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801141a:	0bdb      	lsrs	r3, r3, #15
 801141c:	b2db      	uxtb	r3, r3
 801141e:	f003 0301 	and.w	r3, r3, #1
 8011422:	b2da      	uxtb	r2, r3
 8011424:	683b      	ldr	r3, [r7, #0]
 8011426:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801142c:	0b9b      	lsrs	r3, r3, #14
 801142e:	b2db      	uxtb	r3, r3
 8011430:	f003 0301 	and.w	r3, r3, #1
 8011434:	b2da      	uxtb	r2, r3
 8011436:	683b      	ldr	r3, [r7, #0]
 8011438:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801143e:	0b5b      	lsrs	r3, r3, #13
 8011440:	b2db      	uxtb	r3, r3
 8011442:	f003 0301 	and.w	r3, r3, #1
 8011446:	b2da      	uxtb	r2, r3
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011450:	0b1b      	lsrs	r3, r3, #12
 8011452:	b2db      	uxtb	r3, r3
 8011454:	f003 0301 	and.w	r3, r3, #1
 8011458:	b2da      	uxtb	r2, r3
 801145a:	683b      	ldr	r3, [r7, #0]
 801145c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801145e:	683b      	ldr	r3, [r7, #0]
 8011460:	2200      	movs	r2, #0
 8011462:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011468:	2b00      	cmp	r3, #0
 801146a:	d163      	bne.n	8011534 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011470:	009a      	lsls	r2, r3, #2
 8011472:	f640 73fc 	movw	r3, #4092	; 0xffc
 8011476:	4013      	ands	r3, r2
 8011478:	687a      	ldr	r2, [r7, #4]
 801147a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 801147c:	0f92      	lsrs	r2, r2, #30
 801147e:	431a      	orrs	r2, r3
 8011480:	683b      	ldr	r3, [r7, #0]
 8011482:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011488:	0edb      	lsrs	r3, r3, #27
 801148a:	b2db      	uxtb	r3, r3
 801148c:	f003 0307 	and.w	r3, r3, #7
 8011490:	b2da      	uxtb	r2, r3
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801149a:	0e1b      	lsrs	r3, r3, #24
 801149c:	b2db      	uxtb	r3, r3
 801149e:	f003 0307 	and.w	r3, r3, #7
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114ac:	0d5b      	lsrs	r3, r3, #21
 80114ae:	b2db      	uxtb	r3, r3
 80114b0:	f003 0307 	and.w	r3, r3, #7
 80114b4:	b2da      	uxtb	r2, r3
 80114b6:	683b      	ldr	r3, [r7, #0]
 80114b8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114be:	0c9b      	lsrs	r3, r3, #18
 80114c0:	b2db      	uxtb	r3, r3
 80114c2:	f003 0307 	and.w	r3, r3, #7
 80114c6:	b2da      	uxtb	r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80114d0:	0bdb      	lsrs	r3, r3, #15
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	f003 0307 	and.w	r3, r3, #7
 80114d8:	b2da      	uxtb	r2, r3
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80114de:	683b      	ldr	r3, [r7, #0]
 80114e0:	691b      	ldr	r3, [r3, #16]
 80114e2:	1c5a      	adds	r2, r3, #1
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80114e8:	683b      	ldr	r3, [r7, #0]
 80114ea:	7e1b      	ldrb	r3, [r3, #24]
 80114ec:	b2db      	uxtb	r3, r3
 80114ee:	f003 0307 	and.w	r3, r3, #7
 80114f2:	3302      	adds	r3, #2
 80114f4:	2201      	movs	r2, #1
 80114f6:	fa02 f303 	lsl.w	r3, r2, r3
 80114fa:	687a      	ldr	r2, [r7, #4]
 80114fc:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80114fe:	fb02 f203 	mul.w	r2, r2, r3
 8011502:	687b      	ldr	r3, [r7, #4]
 8011504:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8011506:	683b      	ldr	r3, [r7, #0]
 8011508:	7a1b      	ldrb	r3, [r3, #8]
 801150a:	b2db      	uxtb	r3, r3
 801150c:	f003 030f 	and.w	r3, r3, #15
 8011510:	2201      	movs	r2, #1
 8011512:	409a      	lsls	r2, r3
 8011514:	687b      	ldr	r3, [r7, #4]
 8011516:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801151c:	687a      	ldr	r2, [r7, #4]
 801151e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011520:	0a52      	lsrs	r2, r2, #9
 8011522:	fb02 f203 	mul.w	r2, r2, r3
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011530:	661a      	str	r2, [r3, #96]	; 0x60
 8011532:	e031      	b.n	8011598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011538:	2b01      	cmp	r3, #1
 801153a:	d11d      	bne.n	8011578 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011540:	041b      	lsls	r3, r3, #16
 8011542:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8011546:	687b      	ldr	r3, [r7, #4]
 8011548:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801154a:	0c1b      	lsrs	r3, r3, #16
 801154c:	431a      	orrs	r2, r3
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	691b      	ldr	r3, [r3, #16]
 8011556:	3301      	adds	r3, #1
 8011558:	029a      	lsls	r2, r3, #10
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	f44f 7200 	mov.w	r2, #512	; 0x200
 801156c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	661a      	str	r2, [r3, #96]	; 0x60
 8011576:	e00f      	b.n	8011598 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	681b      	ldr	r3, [r3, #0]
 801157c:	4a58      	ldr	r2, [pc, #352]	; (80116e0 <HAL_SD_GetCardCSD+0x344>)
 801157e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011580:	687b      	ldr	r3, [r7, #4]
 8011582:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011584:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	2201      	movs	r2, #1
 8011590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011594:	2301      	movs	r3, #1
 8011596:	e09d      	b.n	80116d4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801159c:	0b9b      	lsrs	r3, r3, #14
 801159e:	b2db      	uxtb	r3, r3
 80115a0:	f003 0301 	and.w	r3, r3, #1
 80115a4:	b2da      	uxtb	r2, r3
 80115a6:	683b      	ldr	r3, [r7, #0]
 80115a8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115ae:	09db      	lsrs	r3, r3, #7
 80115b0:	b2db      	uxtb	r3, r3
 80115b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115b6:	b2da      	uxtb	r2, r3
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115c0:	b2db      	uxtb	r3, r3
 80115c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80115c6:	b2da      	uxtb	r2, r3
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115d0:	0fdb      	lsrs	r3, r3, #31
 80115d2:	b2da      	uxtb	r2, r3
 80115d4:	683b      	ldr	r3, [r7, #0]
 80115d6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115dc:	0f5b      	lsrs	r3, r3, #29
 80115de:	b2db      	uxtb	r3, r3
 80115e0:	f003 0303 	and.w	r3, r3, #3
 80115e4:	b2da      	uxtb	r2, r3
 80115e6:	683b      	ldr	r3, [r7, #0]
 80115e8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115ee:	0e9b      	lsrs	r3, r3, #26
 80115f0:	b2db      	uxtb	r3, r3
 80115f2:	f003 0307 	and.w	r3, r3, #7
 80115f6:	b2da      	uxtb	r2, r3
 80115f8:	683b      	ldr	r3, [r7, #0]
 80115fa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011600:	0d9b      	lsrs	r3, r3, #22
 8011602:	b2db      	uxtb	r3, r3
 8011604:	f003 030f 	and.w	r3, r3, #15
 8011608:	b2da      	uxtb	r2, r3
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011612:	0d5b      	lsrs	r3, r3, #21
 8011614:	b2db      	uxtb	r3, r3
 8011616:	f003 0301 	and.w	r3, r3, #1
 801161a:	b2da      	uxtb	r2, r3
 801161c:	683b      	ldr	r3, [r7, #0]
 801161e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	2200      	movs	r2, #0
 8011626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801162e:	0c1b      	lsrs	r3, r3, #16
 8011630:	b2db      	uxtb	r3, r3
 8011632:	f003 0301 	and.w	r3, r3, #1
 8011636:	b2da      	uxtb	r2, r3
 8011638:	683b      	ldr	r3, [r7, #0]
 801163a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011642:	0bdb      	lsrs	r3, r3, #15
 8011644:	b2db      	uxtb	r3, r3
 8011646:	f003 0301 	and.w	r3, r3, #1
 801164a:	b2da      	uxtb	r2, r3
 801164c:	683b      	ldr	r3, [r7, #0]
 801164e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011652:	687b      	ldr	r3, [r7, #4]
 8011654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011656:	0b9b      	lsrs	r3, r3, #14
 8011658:	b2db      	uxtb	r3, r3
 801165a:	f003 0301 	and.w	r3, r3, #1
 801165e:	b2da      	uxtb	r2, r3
 8011660:	683b      	ldr	r3, [r7, #0]
 8011662:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801166a:	0b5b      	lsrs	r3, r3, #13
 801166c:	b2db      	uxtb	r3, r3
 801166e:	f003 0301 	and.w	r3, r3, #1
 8011672:	b2da      	uxtb	r2, r3
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801167e:	0b1b      	lsrs	r3, r3, #12
 8011680:	b2db      	uxtb	r3, r3
 8011682:	f003 0301 	and.w	r3, r3, #1
 8011686:	b2da      	uxtb	r2, r3
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011692:	0a9b      	lsrs	r3, r3, #10
 8011694:	b2db      	uxtb	r3, r3
 8011696:	f003 0303 	and.w	r3, r3, #3
 801169a:	b2da      	uxtb	r2, r3
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116a6:	0a1b      	lsrs	r3, r3, #8
 80116a8:	b2db      	uxtb	r3, r3
 80116aa:	f003 0303 	and.w	r3, r3, #3
 80116ae:	b2da      	uxtb	r2, r3
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ba:	085b      	lsrs	r3, r3, #1
 80116bc:	b2db      	uxtb	r3, r3
 80116be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80116c2:	b2da      	uxtb	r2, r3
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80116ca:	683b      	ldr	r3, [r7, #0]
 80116cc:	2201      	movs	r2, #1
 80116ce:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80116d2:	2300      	movs	r3, #0
}
 80116d4:	4618      	mov	r0, r3
 80116d6:	370c      	adds	r7, #12
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr
 80116e0:	004005ff 	.word	0x004005ff

080116e4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80116e4:	b480      	push	{r7}
 80116e6:	b083      	sub	sp, #12
 80116e8:	af00      	add	r7, sp, #0
 80116ea:	6078      	str	r0, [r7, #4]
 80116ec:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011702:	683b      	ldr	r3, [r7, #0]
 8011704:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801170a:	683b      	ldr	r3, [r7, #0]
 801170c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011712:	683b      	ldr	r3, [r7, #0]
 8011714:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801171a:	683b      	ldr	r3, [r7, #0]
 801171c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011722:	683b      	ldr	r3, [r7, #0]
 8011724:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	370c      	adds	r7, #12
 8011734:	46bd      	mov	sp, r7
 8011736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801173a:	4770      	bx	lr

0801173c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 801173c:	b5b0      	push	{r4, r5, r7, lr}
 801173e:	b08e      	sub	sp, #56	; 0x38
 8011740:	af04      	add	r7, sp, #16
 8011742:	6078      	str	r0, [r7, #4]
 8011744:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8011746:	2300      	movs	r3, #0
 8011748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 801174c:	687b      	ldr	r3, [r7, #4]
 801174e:	2203      	movs	r2, #3
 8011750:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011758:	2b03      	cmp	r3, #3
 801175a:	d02e      	beq.n	80117ba <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 801175c:	683b      	ldr	r3, [r7, #0]
 801175e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011762:	d106      	bne.n	8011772 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011768:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	639a      	str	r2, [r3, #56]	; 0x38
 8011770:	e029      	b.n	80117c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011778:	d10a      	bne.n	8011790 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801177a:	6878      	ldr	r0, [r7, #4]
 801177c:	f000 fb28 	bl	8011dd0 <SD_WideBus_Enable>
 8011780:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011786:	6a3b      	ldr	r3, [r7, #32]
 8011788:	431a      	orrs	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	639a      	str	r2, [r3, #56]	; 0x38
 801178e:	e01a      	b.n	80117c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8011790:	683b      	ldr	r3, [r7, #0]
 8011792:	2b00      	cmp	r3, #0
 8011794:	d10a      	bne.n	80117ac <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f000 fb65 	bl	8011e66 <SD_WideBus_Disable>
 801179c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80117a2:	6a3b      	ldr	r3, [r7, #32]
 80117a4:	431a      	orrs	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	639a      	str	r2, [r3, #56]	; 0x38
 80117aa:	e00c      	b.n	80117c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	639a      	str	r2, [r3, #56]	; 0x38
 80117b8:	e005      	b.n	80117c6 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117be:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d00b      	beq.n	80117e6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4a26      	ldr	r2, [pc, #152]	; (801186c <HAL_SD_ConfigWideBusOperation+0x130>)
 80117d4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	2201      	movs	r2, #1
 80117da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80117de:	2301      	movs	r3, #1
 80117e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117e4:	e01f      	b.n	8011826 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	689b      	ldr	r3, [r3, #8]
 80117f0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80117f2:	687b      	ldr	r3, [r7, #4]
 80117f4:	68db      	ldr	r3, [r3, #12]
 80117f6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80117f8:	683b      	ldr	r3, [r7, #0]
 80117fa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	695b      	ldr	r3, [r3, #20]
 8011800:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8011802:	687b      	ldr	r3, [r7, #4]
 8011804:	699b      	ldr	r3, [r3, #24]
 8011806:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	681d      	ldr	r5, [r3, #0]
 801180c:	466c      	mov	r4, sp
 801180e:	f107 0314 	add.w	r3, r7, #20
 8011812:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011816:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801181a:	f107 0308 	add.w	r3, r7, #8
 801181e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011820:	4628      	mov	r0, r5
 8011822:	f001 fa39 	bl	8012c98 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801182e:	4618      	mov	r0, r3
 8011830:	f001 fb0e 	bl	8012e50 <SDMMC_CmdBlockLength>
 8011834:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011836:	6a3b      	ldr	r3, [r7, #32]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d00c      	beq.n	8011856 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	4a0a      	ldr	r2, [pc, #40]	; (801186c <HAL_SD_ConfigWideBusOperation+0x130>)
 8011842:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011848:	6a3b      	ldr	r3, [r7, #32]
 801184a:	431a      	orrs	r2, r3
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011850:	2301      	movs	r3, #1
 8011852:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	2201      	movs	r2, #1
 801185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 801185e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011862:	4618      	mov	r0, r3
 8011864:	3728      	adds	r7, #40	; 0x28
 8011866:	46bd      	mov	sp, r7
 8011868:	bdb0      	pop	{r4, r5, r7, pc}
 801186a:	bf00      	nop
 801186c:	004005ff 	.word	0x004005ff

08011870 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011870:	b580      	push	{r7, lr}
 8011872:	b086      	sub	sp, #24
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8011878:	2300      	movs	r3, #0
 801187a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 801187c:	f107 030c 	add.w	r3, r7, #12
 8011880:	4619      	mov	r1, r3
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f000 fa7c 	bl	8011d80 <SD_SendStatus>
 8011888:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801188a:	697b      	ldr	r3, [r7, #20]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d005      	beq.n	801189c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011894:	697b      	ldr	r3, [r7, #20]
 8011896:	431a      	orrs	r2, r3
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	0a5b      	lsrs	r3, r3, #9
 80118a0:	f003 030f 	and.w	r3, r3, #15
 80118a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80118a6:	693b      	ldr	r3, [r7, #16]
}
 80118a8:	4618      	mov	r0, r3
 80118aa:	3718      	adds	r7, #24
 80118ac:	46bd      	mov	sp, r7
 80118ae:	bd80      	pop	{r7, pc}

080118b0 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80118b0:	b480      	push	{r7}
 80118b2:	b085      	sub	sp, #20
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118bc:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80118cc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80118ce:	bf00      	nop
 80118d0:	3714      	adds	r7, #20
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr

080118da <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80118da:	b580      	push	{r7, lr}
 80118dc:	b084      	sub	sp, #16
 80118de:	af00      	add	r7, sp, #0
 80118e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118e6:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118ec:	2b82      	cmp	r3, #130	; 0x82
 80118ee:	d111      	bne.n	8011914 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	681b      	ldr	r3, [r3, #0]
 80118f4:	4618      	mov	r0, r3
 80118f6:	f001 fb55 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 80118fa:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80118fc:	68bb      	ldr	r3, [r7, #8]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d008      	beq.n	8011914 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011906:	68bb      	ldr	r3, [r7, #8]
 8011908:	431a      	orrs	r2, r3
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 801190e:	68f8      	ldr	r0, [r7, #12]
 8011910:	f7ff fd30 	bl	8011374 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	f022 0208 	bic.w	r2, r2, #8
 8011922:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f240 523a 	movw	r2, #1338	; 0x53a
 801192c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	2201      	movs	r2, #1
 8011932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	2200      	movs	r2, #0
 801193a:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 801193c:	68f8      	ldr	r0, [r7, #12]
 801193e:	f7f2 f933 	bl	8003ba8 <HAL_SD_RxCpltCallback>
#endif
}
 8011942:	bf00      	nop
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}
	...

0801194c <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b086      	sub	sp, #24
 8011950:	af00      	add	r7, sp, #0
 8011952:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011958:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801195a:	6878      	ldr	r0, [r7, #4]
 801195c:	f7fc fd9a 	bl	800e494 <HAL_DMA_GetError>
 8011960:	4603      	mov	r3, r0
 8011962:	2b02      	cmp	r3, #2
 8011964:	d03e      	beq.n	80119e4 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801196a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801196c:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 801196e:	697b      	ldr	r3, [r7, #20]
 8011970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011974:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8011976:	693b      	ldr	r3, [r7, #16]
 8011978:	2b01      	cmp	r3, #1
 801197a:	d002      	beq.n	8011982 <SD_DMAError+0x36>
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	2b01      	cmp	r3, #1
 8011980:	d12d      	bne.n	80119de <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	681b      	ldr	r3, [r3, #0]
 8011986:	4a19      	ldr	r2, [pc, #100]	; (80119ec <SD_DMAError+0xa0>)
 8011988:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	681b      	ldr	r3, [r3, #0]
 801198e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011990:	697b      	ldr	r3, [r7, #20]
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8011998:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801199a:	697b      	ldr	r3, [r7, #20]
 801199c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80119a2:	697b      	ldr	r3, [r7, #20]
 80119a4:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80119a6:	6978      	ldr	r0, [r7, #20]
 80119a8:	f7ff ff62 	bl	8011870 <HAL_SD_GetCardState>
 80119ac:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	2b06      	cmp	r3, #6
 80119b2:	d002      	beq.n	80119ba <SD_DMAError+0x6e>
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	2b05      	cmp	r3, #5
 80119b8:	d10a      	bne.n	80119d0 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80119ba:	697b      	ldr	r3, [r7, #20]
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	4618      	mov	r0, r3
 80119c0:	f001 faf0 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 80119c4:	4602      	mov	r2, r0
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119ca:	431a      	orrs	r2, r3
 80119cc:	697b      	ldr	r3, [r7, #20]
 80119ce:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80119d0:	697b      	ldr	r3, [r7, #20]
 80119d2:	2201      	movs	r2, #1
 80119d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80119d8:	697b      	ldr	r3, [r7, #20]
 80119da:	2200      	movs	r2, #0
 80119dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80119de:	6978      	ldr	r0, [r7, #20]
 80119e0:	f7ff fcc8 	bl	8011374 <HAL_SD_ErrorCallback>
#endif
  }
}
 80119e4:	bf00      	nop
 80119e6:	3718      	adds	r7, #24
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	004005ff 	.word	0x004005ff

080119f0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b084      	sub	sp, #16
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119fc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	f240 523a 	movw	r2, #1338	; 0x53a
 8011a06:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011a08:	68f8      	ldr	r0, [r7, #12]
 8011a0a:	f7ff ff31 	bl	8011870 <HAL_SD_GetCardState>
 8011a0e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011a10:	68fb      	ldr	r3, [r7, #12]
 8011a12:	2201      	movs	r2, #1
 8011a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	2200      	movs	r2, #0
 8011a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011a1e:	68bb      	ldr	r3, [r7, #8]
 8011a20:	2b06      	cmp	r3, #6
 8011a22:	d002      	beq.n	8011a2a <SD_DMATxAbort+0x3a>
 8011a24:	68bb      	ldr	r3, [r7, #8]
 8011a26:	2b05      	cmp	r3, #5
 8011a28:	d10a      	bne.n	8011a40 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011a2a:	68fb      	ldr	r3, [r7, #12]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f001 fab8 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 8011a34:	4602      	mov	r2, r0
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a3a:	431a      	orrs	r2, r3
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d103      	bne.n	8011a50 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f7ff fc9d 	bl	8011388 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011a4e:	e002      	b.n	8011a56 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8011a50:	68f8      	ldr	r0, [r7, #12]
 8011a52:	f7ff fc8f 	bl	8011374 <HAL_SD_ErrorCallback>
}
 8011a56:	bf00      	nop
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}

08011a5e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8011a5e:	b580      	push	{r7, lr}
 8011a60:	b084      	sub	sp, #16
 8011a62:	af00      	add	r7, sp, #0
 8011a64:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a6a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	681b      	ldr	r3, [r3, #0]
 8011a70:	f240 523a 	movw	r2, #1338	; 0x53a
 8011a74:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8011a76:	68f8      	ldr	r0, [r7, #12]
 8011a78:	f7ff fefa 	bl	8011870 <HAL_SD_GetCardState>
 8011a7c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2201      	movs	r2, #1
 8011a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	2200      	movs	r2, #0
 8011a8a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	2b06      	cmp	r3, #6
 8011a90:	d002      	beq.n	8011a98 <SD_DMARxAbort+0x3a>
 8011a92:	68bb      	ldr	r3, [r7, #8]
 8011a94:	2b05      	cmp	r3, #5
 8011a96:	d10a      	bne.n	8011aae <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	681b      	ldr	r3, [r3, #0]
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	f001 fa81 	bl	8012fa4 <SDMMC_CmdStopTransfer>
 8011aa2:	4602      	mov	r2, r0
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011aa8:	431a      	orrs	r2, r3
 8011aaa:	68fb      	ldr	r3, [r7, #12]
 8011aac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d103      	bne.n	8011abe <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8011ab6:	68f8      	ldr	r0, [r7, #12]
 8011ab8:	f7ff fc66 	bl	8011388 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011abc:	e002      	b.n	8011ac4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8011abe:	68f8      	ldr	r0, [r7, #12]
 8011ac0:	f7ff fc58 	bl	8011374 <HAL_SD_ErrorCallback>
}
 8011ac4:	bf00      	nop
 8011ac6:	3710      	adds	r7, #16
 8011ac8:	46bd      	mov	sp, r7
 8011aca:	bd80      	pop	{r7, pc}

08011acc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8011acc:	b5b0      	push	{r4, r5, r7, lr}
 8011ace:	b094      	sub	sp, #80	; 0x50
 8011ad0:	af04      	add	r7, sp, #16
 8011ad2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8011ad4:	2301      	movs	r3, #1
 8011ad6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	4618      	mov	r0, r3
 8011ade:	f001 f933 	bl	8012d48 <SDIO_GetPowerState>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d102      	bne.n	8011aee <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011ae8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8011aec:	e0b6      	b.n	8011c5c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011af2:	2b03      	cmp	r3, #3
 8011af4:	d02f      	beq.n	8011b56 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	4618      	mov	r0, r3
 8011afc:	f001 fb5c 	bl	80131b8 <SDMMC_CmdSendCID>
 8011b00:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d001      	beq.n	8011b0c <SD_InitCard+0x40>
    {
      return errorstate;
 8011b08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b0a:	e0a7      	b.n	8011c5c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	2100      	movs	r1, #0
 8011b12:	4618      	mov	r0, r3
 8011b14:	f001 f95d 	bl	8012dd2 <SDIO_GetResponse>
 8011b18:	4602      	mov	r2, r0
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011b1e:	687b      	ldr	r3, [r7, #4]
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	2104      	movs	r1, #4
 8011b24:	4618      	mov	r0, r3
 8011b26:	f001 f954 	bl	8012dd2 <SDIO_GetResponse>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	687b      	ldr	r3, [r7, #4]
 8011b2e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2108      	movs	r1, #8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f001 f94b 	bl	8012dd2 <SDIO_GetResponse>
 8011b3c:	4602      	mov	r2, r0
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	210c      	movs	r1, #12
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f001 f942 	bl	8012dd2 <SDIO_GetResponse>
 8011b4e:	4602      	mov	r2, r0
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b5a:	2b03      	cmp	r3, #3
 8011b5c:	d00d      	beq.n	8011b7a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	f107 020e 	add.w	r2, r7, #14
 8011b66:	4611      	mov	r1, r2
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f001 fb62 	bl	8013232 <SDMMC_CmdSetRelAdd>
 8011b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d001      	beq.n	8011b7a <SD_InitCard+0xae>
    {
      return errorstate;
 8011b76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b78:	e070      	b.n	8011c5c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011b7e:	2b03      	cmp	r3, #3
 8011b80:	d036      	beq.n	8011bf0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8011b82:	89fb      	ldrh	r3, [r7, #14]
 8011b84:	461a      	mov	r2, r3
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681a      	ldr	r2, [r3, #0]
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b92:	041b      	lsls	r3, r3, #16
 8011b94:	4619      	mov	r1, r3
 8011b96:	4610      	mov	r0, r2
 8011b98:	f001 fb2c 	bl	80131f4 <SDMMC_CmdSendCSD>
 8011b9c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d001      	beq.n	8011ba8 <SD_InitCard+0xdc>
    {
      return errorstate;
 8011ba4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011ba6:	e059      	b.n	8011c5c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	2100      	movs	r1, #0
 8011bae:	4618      	mov	r0, r3
 8011bb0:	f001 f90f 	bl	8012dd2 <SDIO_GetResponse>
 8011bb4:	4602      	mov	r2, r0
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	681b      	ldr	r3, [r3, #0]
 8011bbe:	2104      	movs	r1, #4
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f001 f906 	bl	8012dd2 <SDIO_GetResponse>
 8011bc6:	4602      	mov	r2, r0
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2108      	movs	r1, #8
 8011bd2:	4618      	mov	r0, r3
 8011bd4:	f001 f8fd 	bl	8012dd2 <SDIO_GetResponse>
 8011bd8:	4602      	mov	r2, r0
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	210c      	movs	r1, #12
 8011be4:	4618      	mov	r0, r3
 8011be6:	f001 f8f4 	bl	8012dd2 <SDIO_GetResponse>
 8011bea:	4602      	mov	r2, r0
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	681b      	ldr	r3, [r3, #0]
 8011bf4:	2104      	movs	r1, #4
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	f001 f8eb 	bl	8012dd2 <SDIO_GetResponse>
 8011bfc:	4603      	mov	r3, r0
 8011bfe:	0d1a      	lsrs	r2, r3, #20
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011c04:	f107 0310 	add.w	r3, r7, #16
 8011c08:	4619      	mov	r1, r3
 8011c0a:	6878      	ldr	r0, [r7, #4]
 8011c0c:	f7ff fbc6 	bl	801139c <HAL_SD_GetCardCSD>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d002      	beq.n	8011c1c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011c16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011c1a:	e01f      	b.n	8011c5c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6819      	ldr	r1, [r3, #0]
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c24:	041b      	lsls	r3, r3, #16
 8011c26:	461a      	mov	r2, r3
 8011c28:	f04f 0300 	mov.w	r3, #0
 8011c2c:	4608      	mov	r0, r1
 8011c2e:	f001 f9db 	bl	8012fe8 <SDMMC_CmdSelDesel>
 8011c32:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d001      	beq.n	8011c3e <SD_InitCard+0x172>
  {
    return errorstate;
 8011c3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c3c:	e00e      	b.n	8011c5c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	681d      	ldr	r5, [r3, #0]
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	466c      	mov	r4, sp
 8011c46:	f103 0210 	add.w	r2, r3, #16
 8011c4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8011c4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011c50:	3304      	adds	r3, #4
 8011c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011c54:	4628      	mov	r0, r5
 8011c56:	f001 f81f 	bl	8012c98 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8011c5a:	2300      	movs	r3, #0
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3740      	adds	r7, #64	; 0x40
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bdb0      	pop	{r4, r5, r7, pc}

08011c64 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b086      	sub	sp, #24
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8011c70:	2300      	movs	r3, #0
 8011c72:	617b      	str	r3, [r7, #20]
 8011c74:	2300      	movs	r3, #0
 8011c76:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	681b      	ldr	r3, [r3, #0]
 8011c7c:	4618      	mov	r0, r3
 8011c7e:	f001 f9d6 	bl	801302e <SDMMC_CmdGoIdleState>
 8011c82:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c84:	68fb      	ldr	r3, [r7, #12]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <SD_PowerON+0x2a>
  {
    return errorstate;
 8011c8a:	68fb      	ldr	r3, [r7, #12]
 8011c8c:	e072      	b.n	8011d74 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4618      	mov	r0, r3
 8011c94:	f001 f9e9 	bl	801306a <SDMMC_CmdOperCond>
 8011c98:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d00d      	beq.n	8011cbc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	4618      	mov	r0, r3
 8011cac:	f001 f9bf 	bl	801302e <SDMMC_CmdGoIdleState>
 8011cb0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d004      	beq.n	8011cc2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	e05b      	b.n	8011d74 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2201      	movs	r2, #1
 8011cc0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011cc6:	2b01      	cmp	r3, #1
 8011cc8:	d137      	bne.n	8011d3a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011cca:	687b      	ldr	r3, [r7, #4]
 8011ccc:	681b      	ldr	r3, [r3, #0]
 8011cce:	2100      	movs	r1, #0
 8011cd0:	4618      	mov	r0, r3
 8011cd2:	f001 f9e9 	bl	80130a8 <SDMMC_CmdAppCommand>
 8011cd6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d02d      	beq.n	8011d3a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011cde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011ce2:	e047      	b.n	8011d74 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2100      	movs	r1, #0
 8011cea:	4618      	mov	r0, r3
 8011cec:	f001 f9dc 	bl	80130a8 <SDMMC_CmdAppCommand>
 8011cf0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011cf2:	68fb      	ldr	r3, [r7, #12]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d001      	beq.n	8011cfc <SD_PowerON+0x98>
    {
      return errorstate;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
 8011cfa:	e03b      	b.n	8011d74 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	491e      	ldr	r1, [pc, #120]	; (8011d7c <SD_PowerON+0x118>)
 8011d02:	4618      	mov	r0, r3
 8011d04:	f001 f9f2 	bl	80130ec <SDMMC_CmdAppOperCommand>
 8011d08:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d002      	beq.n	8011d16 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011d10:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011d14:	e02e      	b.n	8011d74 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	2100      	movs	r1, #0
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f001 f858 	bl	8012dd2 <SDIO_GetResponse>
 8011d22:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011d24:	697b      	ldr	r3, [r7, #20]
 8011d26:	0fdb      	lsrs	r3, r3, #31
 8011d28:	2b01      	cmp	r3, #1
 8011d2a:	d101      	bne.n	8011d30 <SD_PowerON+0xcc>
 8011d2c:	2301      	movs	r3, #1
 8011d2e:	e000      	b.n	8011d32 <SD_PowerON+0xce>
 8011d30:	2300      	movs	r3, #0
 8011d32:	613b      	str	r3, [r7, #16]

    count++;
 8011d34:	68bb      	ldr	r3, [r7, #8]
 8011d36:	3301      	adds	r3, #1
 8011d38:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011d40:	4293      	cmp	r3, r2
 8011d42:	d802      	bhi.n	8011d4a <SD_PowerON+0xe6>
 8011d44:	693b      	ldr	r3, [r7, #16]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d0cc      	beq.n	8011ce4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8011d4a:	68bb      	ldr	r3, [r7, #8]
 8011d4c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011d50:	4293      	cmp	r3, r2
 8011d52:	d902      	bls.n	8011d5a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011d54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8011d58:	e00c      	b.n	8011d74 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8011d5a:	697b      	ldr	r3, [r7, #20]
 8011d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d003      	beq.n	8011d6c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2201      	movs	r2, #1
 8011d68:	645a      	str	r2, [r3, #68]	; 0x44
 8011d6a:	e002      	b.n	8011d72 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2200      	movs	r2, #0
 8011d70:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8011d72:	2300      	movs	r3, #0
}
 8011d74:	4618      	mov	r0, r3
 8011d76:	3718      	adds	r7, #24
 8011d78:	46bd      	mov	sp, r7
 8011d7a:	bd80      	pop	{r7, pc}
 8011d7c:	c1100000 	.word	0xc1100000

08011d80 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011d80:	b580      	push	{r7, lr}
 8011d82:	b084      	sub	sp, #16
 8011d84:	af00      	add	r7, sp, #0
 8011d86:	6078      	str	r0, [r7, #4]
 8011d88:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8011d8a:	683b      	ldr	r3, [r7, #0]
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d102      	bne.n	8011d96 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011d90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011d94:	e018      	b.n	8011dc8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	681a      	ldr	r2, [r3, #0]
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011d9e:	041b      	lsls	r3, r3, #16
 8011da0:	4619      	mov	r1, r3
 8011da2:	4610      	mov	r0, r2
 8011da4:	f001 fa66 	bl	8013274 <SDMMC_CmdSendStatus>
 8011da8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d001      	beq.n	8011db4 <SD_SendStatus+0x34>
  {
    return errorstate;
 8011db0:	68fb      	ldr	r3, [r7, #12]
 8011db2:	e009      	b.n	8011dc8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	2100      	movs	r1, #0
 8011dba:	4618      	mov	r0, r3
 8011dbc:	f001 f809 	bl	8012dd2 <SDIO_GetResponse>
 8011dc0:	4602      	mov	r2, r0
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8011dc6:	2300      	movs	r3, #0
}
 8011dc8:	4618      	mov	r0, r3
 8011dca:	3710      	adds	r7, #16
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}

08011dd0 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b086      	sub	sp, #24
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8011dd8:	2300      	movs	r3, #0
 8011dda:	60fb      	str	r3, [r7, #12]
 8011ddc:	2300      	movs	r3, #0
 8011dde:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	681b      	ldr	r3, [r3, #0]
 8011de4:	2100      	movs	r1, #0
 8011de6:	4618      	mov	r0, r3
 8011de8:	f000 fff3 	bl	8012dd2 <SDIO_GetResponse>
 8011dec:	4603      	mov	r3, r0
 8011dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011df2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011df6:	d102      	bne.n	8011dfe <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011df8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011dfc:	e02f      	b.n	8011e5e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011dfe:	f107 030c 	add.w	r3, r7, #12
 8011e02:	4619      	mov	r1, r3
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 f879 	bl	8011efc <SD_FindSCR>
 8011e0a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011e0c:	697b      	ldr	r3, [r7, #20]
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d001      	beq.n	8011e16 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8011e12:	697b      	ldr	r3, [r7, #20]
 8011e14:	e023      	b.n	8011e5e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011e16:	693b      	ldr	r3, [r7, #16]
 8011e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d01c      	beq.n	8011e5a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	681a      	ldr	r2, [r3, #0]
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011e28:	041b      	lsls	r3, r3, #16
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	4610      	mov	r0, r2
 8011e2e:	f001 f93b 	bl	80130a8 <SDMMC_CmdAppCommand>
 8011e32:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011e34:	697b      	ldr	r3, [r7, #20]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d001      	beq.n	8011e3e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	e00f      	b.n	8011e5e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011e3e:	687b      	ldr	r3, [r7, #4]
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	2102      	movs	r1, #2
 8011e44:	4618      	mov	r0, r3
 8011e46:	f001 f974 	bl	8013132 <SDMMC_CmdBusWidth>
 8011e4a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011e4c:	697b      	ldr	r3, [r7, #20]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d001      	beq.n	8011e56 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8011e52:	697b      	ldr	r3, [r7, #20]
 8011e54:	e003      	b.n	8011e5e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011e56:	2300      	movs	r3, #0
 8011e58:	e001      	b.n	8011e5e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011e5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011e5e:	4618      	mov	r0, r3
 8011e60:	3718      	adds	r7, #24
 8011e62:	46bd      	mov	sp, r7
 8011e64:	bd80      	pop	{r7, pc}

08011e66 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011e66:	b580      	push	{r7, lr}
 8011e68:	b086      	sub	sp, #24
 8011e6a:	af00      	add	r7, sp, #0
 8011e6c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	2300      	movs	r3, #0
 8011e74:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2100      	movs	r1, #0
 8011e7c:	4618      	mov	r0, r3
 8011e7e:	f000 ffa8 	bl	8012dd2 <SDIO_GetResponse>
 8011e82:	4603      	mov	r3, r0
 8011e84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e8c:	d102      	bne.n	8011e94 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011e92:	e02f      	b.n	8011ef4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011e94:	f107 030c 	add.w	r3, r7, #12
 8011e98:	4619      	mov	r1, r3
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f000 f82e 	bl	8011efc <SD_FindSCR>
 8011ea0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011ea2:	697b      	ldr	r3, [r7, #20]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d001      	beq.n	8011eac <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011ea8:	697b      	ldr	r3, [r7, #20]
 8011eaa:	e023      	b.n	8011ef4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011eac:	693b      	ldr	r3, [r7, #16]
 8011eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d01c      	beq.n	8011ef0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	681a      	ldr	r2, [r3, #0]
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ebe:	041b      	lsls	r3, r3, #16
 8011ec0:	4619      	mov	r1, r3
 8011ec2:	4610      	mov	r0, r2
 8011ec4:	f001 f8f0 	bl	80130a8 <SDMMC_CmdAppCommand>
 8011ec8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011eca:	697b      	ldr	r3, [r7, #20]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d001      	beq.n	8011ed4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011ed0:	697b      	ldr	r3, [r7, #20]
 8011ed2:	e00f      	b.n	8011ef4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	2100      	movs	r1, #0
 8011eda:	4618      	mov	r0, r3
 8011edc:	f001 f929 	bl	8013132 <SDMMC_CmdBusWidth>
 8011ee0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d001      	beq.n	8011eec <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011ee8:	697b      	ldr	r3, [r7, #20]
 8011eea:	e003      	b.n	8011ef4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011eec:	2300      	movs	r3, #0
 8011eee:	e001      	b.n	8011ef4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011ef0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	3718      	adds	r7, #24
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	bd80      	pop	{r7, pc}

08011efc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011efc:	b590      	push	{r4, r7, lr}
 8011efe:	b08f      	sub	sp, #60	; 0x3c
 8011f00:	af00      	add	r7, sp, #0
 8011f02:	6078      	str	r0, [r7, #4]
 8011f04:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011f06:	f7fb fed1 	bl	800dcac <HAL_GetTick>
 8011f0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011f0c:	2300      	movs	r3, #0
 8011f0e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8011f10:	2300      	movs	r3, #0
 8011f12:	60bb      	str	r3, [r7, #8]
 8011f14:	2300      	movs	r3, #0
 8011f16:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011f18:	683b      	ldr	r3, [r7, #0]
 8011f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	2108      	movs	r1, #8
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 ff94 	bl	8012e50 <SDMMC_CmdBlockLength>
 8011f28:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d001      	beq.n	8011f34 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f32:	e0b2      	b.n	801209a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011f34:	687b      	ldr	r3, [r7, #4]
 8011f36:	681a      	ldr	r2, [r3, #0]
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011f3c:	041b      	lsls	r3, r3, #16
 8011f3e:	4619      	mov	r1, r3
 8011f40:	4610      	mov	r0, r2
 8011f42:	f001 f8b1 	bl	80130a8 <SDMMC_CmdAppCommand>
 8011f46:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f4a:	2b00      	cmp	r3, #0
 8011f4c:	d001      	beq.n	8011f52 <SD_FindSCR+0x56>
  {
    return errorstate;
 8011f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f50:	e0a3      	b.n	801209a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011f52:	f04f 33ff 	mov.w	r3, #4294967295
 8011f56:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011f58:	2308      	movs	r3, #8
 8011f5a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8011f5c:	2330      	movs	r3, #48	; 0x30
 8011f5e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8011f60:	2302      	movs	r3, #2
 8011f62:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8011f64:	2300      	movs	r3, #0
 8011f66:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8011f68:	2301      	movs	r3, #1
 8011f6a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	f107 0210 	add.w	r2, r7, #16
 8011f74:	4611      	mov	r1, r2
 8011f76:	4618      	mov	r0, r3
 8011f78:	f000 ff3e 	bl	8012df8 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4618      	mov	r0, r3
 8011f82:	f001 f8f8 	bl	8013176 <SDMMC_CmdSendSCR>
 8011f86:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d02a      	beq.n	8011fe4 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8011f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f90:	e083      	b.n	801209a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	d00f      	beq.n	8011fc0 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	6819      	ldr	r1, [r3, #0]
 8011fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	f107 0208 	add.w	r2, r7, #8
 8011fac:	18d4      	adds	r4, r2, r3
 8011fae:	4608      	mov	r0, r1
 8011fb0:	f000 fe9d 	bl	8012cee <SDIO_ReadFIFO>
 8011fb4:	4603      	mov	r3, r0
 8011fb6:	6023      	str	r3, [r4, #0]
      index++;
 8011fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fba:	3301      	adds	r3, #1
 8011fbc:	637b      	str	r3, [r7, #52]	; 0x34
 8011fbe:	e006      	b.n	8011fce <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d012      	beq.n	8011ff4 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011fce:	f7fb fe6d 	bl	800dcac <HAL_GetTick>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fdc:	d102      	bne.n	8011fe4 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011fde:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011fe2:	e05a      	b.n	801209a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fea:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d0cf      	beq.n	8011f92 <SD_FindSCR+0x96>
 8011ff2:	e000      	b.n	8011ff6 <SD_FindSCR+0xfa>
      break;
 8011ff4:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	681b      	ldr	r3, [r3, #0]
 8011ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011ffc:	f003 0308 	and.w	r3, r3, #8
 8012000:	2b00      	cmp	r3, #0
 8012002:	d005      	beq.n	8012010 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	2208      	movs	r2, #8
 801200a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 801200c:	2308      	movs	r3, #8
 801200e:	e044      	b.n	801209a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	681b      	ldr	r3, [r3, #0]
 8012014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012016:	f003 0302 	and.w	r3, r3, #2
 801201a:	2b00      	cmp	r3, #0
 801201c:	d005      	beq.n	801202a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	2202      	movs	r2, #2
 8012024:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8012026:	2302      	movs	r3, #2
 8012028:	e037      	b.n	801209a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012030:	f003 0320 	and.w	r3, r3, #32
 8012034:	2b00      	cmp	r3, #0
 8012036:	d005      	beq.n	8012044 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	2220      	movs	r2, #32
 801203e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8012040:	2320      	movs	r3, #32
 8012042:	e02a      	b.n	801209a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	f240 523a 	movw	r2, #1338	; 0x53a
 801204c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	061a      	lsls	r2, r3, #24
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	021b      	lsls	r3, r3, #8
 8012056:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801205a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 801205c:	68fb      	ldr	r3, [r7, #12]
 801205e:	0a1b      	lsrs	r3, r3, #8
 8012060:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8012064:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	0e1b      	lsrs	r3, r3, #24
 801206a:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	601a      	str	r2, [r3, #0]
    scr++;
 8012070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012072:	3304      	adds	r3, #4
 8012074:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012076:	68bb      	ldr	r3, [r7, #8]
 8012078:	061a      	lsls	r2, r3, #24
 801207a:	68bb      	ldr	r3, [r7, #8]
 801207c:	021b      	lsls	r3, r3, #8
 801207e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012082:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8012084:	68bb      	ldr	r3, [r7, #8]
 8012086:	0a1b      	lsrs	r3, r3, #8
 8012088:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 801208c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 801208e:	68bb      	ldr	r3, [r7, #8]
 8012090:	0e1b      	lsrs	r3, r3, #24
 8012092:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8012094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012096:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8012098:	2300      	movs	r3, #0
}
 801209a:	4618      	mov	r0, r3
 801209c:	373c      	adds	r7, #60	; 0x3c
 801209e:	46bd      	mov	sp, r7
 80120a0:	bd90      	pop	{r4, r7, pc}

080120a2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80120a2:	b580      	push	{r7, lr}
 80120a4:	b086      	sub	sp, #24
 80120a6:	af00      	add	r7, sp, #0
 80120a8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80120ae:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120b4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d03f      	beq.n	801213c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80120bc:	2300      	movs	r3, #0
 80120be:	617b      	str	r3, [r7, #20]
 80120c0:	e033      	b.n	801212a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	4618      	mov	r0, r3
 80120c8:	f000 fe11 	bl	8012cee <SDIO_ReadFIFO>
 80120cc:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80120ce:	68bb      	ldr	r3, [r7, #8]
 80120d0:	b2da      	uxtb	r2, r3
 80120d2:	68fb      	ldr	r3, [r7, #12]
 80120d4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80120d6:	68fb      	ldr	r3, [r7, #12]
 80120d8:	3301      	adds	r3, #1
 80120da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80120dc:	693b      	ldr	r3, [r7, #16]
 80120de:	3b01      	subs	r3, #1
 80120e0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80120e2:	68bb      	ldr	r3, [r7, #8]
 80120e4:	0a1b      	lsrs	r3, r3, #8
 80120e6:	b2da      	uxtb	r2, r3
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80120ec:	68fb      	ldr	r3, [r7, #12]
 80120ee:	3301      	adds	r3, #1
 80120f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80120f2:	693b      	ldr	r3, [r7, #16]
 80120f4:	3b01      	subs	r3, #1
 80120f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80120f8:	68bb      	ldr	r3, [r7, #8]
 80120fa:	0c1b      	lsrs	r3, r3, #16
 80120fc:	b2da      	uxtb	r2, r3
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	701a      	strb	r2, [r3, #0]
      tmp++;
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	3301      	adds	r3, #1
 8012106:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012108:	693b      	ldr	r3, [r7, #16]
 801210a:	3b01      	subs	r3, #1
 801210c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	0e1b      	lsrs	r3, r3, #24
 8012112:	b2da      	uxtb	r2, r3
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	701a      	strb	r2, [r3, #0]
      tmp++;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	3301      	adds	r3, #1
 801211c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 801211e:	693b      	ldr	r3, [r7, #16]
 8012120:	3b01      	subs	r3, #1
 8012122:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8012124:	697b      	ldr	r3, [r7, #20]
 8012126:	3301      	adds	r3, #1
 8012128:	617b      	str	r3, [r7, #20]
 801212a:	697b      	ldr	r3, [r7, #20]
 801212c:	2b07      	cmp	r3, #7
 801212e:	d9c8      	bls.n	80120c2 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	68fa      	ldr	r2, [r7, #12]
 8012134:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	693a      	ldr	r2, [r7, #16]
 801213a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 801213c:	bf00      	nop
 801213e:	3718      	adds	r7, #24
 8012140:	46bd      	mov	sp, r7
 8012142:	bd80      	pop	{r7, pc}

08012144 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8012144:	b580      	push	{r7, lr}
 8012146:	b086      	sub	sp, #24
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	6a1b      	ldr	r3, [r3, #32]
 8012150:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012156:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8012158:	693b      	ldr	r3, [r7, #16]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d043      	beq.n	80121e6 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 801215e:	2300      	movs	r3, #0
 8012160:	617b      	str	r3, [r7, #20]
 8012162:	e037      	b.n	80121d4 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	60bb      	str	r3, [r7, #8]
      tmp++;
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	3301      	adds	r3, #1
 801216e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	3b01      	subs	r3, #1
 8012174:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8012176:	68fb      	ldr	r3, [r7, #12]
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	021a      	lsls	r2, r3, #8
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	4313      	orrs	r3, r2
 8012180:	60bb      	str	r3, [r7, #8]
      tmp++;
 8012182:	68fb      	ldr	r3, [r7, #12]
 8012184:	3301      	adds	r3, #1
 8012186:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8012188:	693b      	ldr	r3, [r7, #16]
 801218a:	3b01      	subs	r3, #1
 801218c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	781b      	ldrb	r3, [r3, #0]
 8012192:	041a      	lsls	r2, r3, #16
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	4313      	orrs	r3, r2
 8012198:	60bb      	str	r3, [r7, #8]
      tmp++;
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80121a0:	693b      	ldr	r3, [r7, #16]
 80121a2:	3b01      	subs	r3, #1
 80121a4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	061a      	lsls	r2, r3, #24
 80121ac:	68bb      	ldr	r3, [r7, #8]
 80121ae:	4313      	orrs	r3, r2
 80121b0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	3301      	adds	r3, #1
 80121b6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	3b01      	subs	r3, #1
 80121bc:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	f107 0208 	add.w	r2, r7, #8
 80121c6:	4611      	mov	r1, r2
 80121c8:	4618      	mov	r0, r3
 80121ca:	f000 fd9d 	bl	8012d08 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	3301      	adds	r3, #1
 80121d2:	617b      	str	r3, [r7, #20]
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2b07      	cmp	r3, #7
 80121d8:	d9c4      	bls.n	8012164 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	68fa      	ldr	r2, [r7, #12]
 80121de:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80121e6:	bf00      	nop
 80121e8:	3718      	adds	r7, #24
 80121ea:	46bd      	mov	sp, r7
 80121ec:	bd80      	pop	{r7, pc}

080121ee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80121ee:	b580      	push	{r7, lr}
 80121f0:	b082      	sub	sp, #8
 80121f2:	af00      	add	r7, sp, #0
 80121f4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d101      	bne.n	8012200 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	e07b      	b.n	80122f8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012204:	2b00      	cmp	r3, #0
 8012206:	d108      	bne.n	801221a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012210:	d009      	beq.n	8012226 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	61da      	str	r2, [r3, #28]
 8012218:	e005      	b.n	8012226 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2200      	movs	r2, #0
 801221e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2200      	movs	r2, #0
 8012224:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012232:	b2db      	uxtb	r3, r3
 8012234:	2b00      	cmp	r3, #0
 8012236:	d106      	bne.n	8012246 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2200      	movs	r2, #0
 801223c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f7f2 f913 	bl	800446c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	2202      	movs	r2, #2
 801224a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	681a      	ldr	r2, [r3, #0]
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	681b      	ldr	r3, [r3, #0]
 8012258:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801225c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801225e:	687b      	ldr	r3, [r7, #4]
 8012260:	685b      	ldr	r3, [r3, #4]
 8012262:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	689b      	ldr	r3, [r3, #8]
 801226a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801226e:	431a      	orrs	r2, r3
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	68db      	ldr	r3, [r3, #12]
 8012274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012278:	431a      	orrs	r2, r3
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	f003 0302 	and.w	r3, r3, #2
 8012282:	431a      	orrs	r2, r3
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	695b      	ldr	r3, [r3, #20]
 8012288:	f003 0301 	and.w	r3, r3, #1
 801228c:	431a      	orrs	r2, r3
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	699b      	ldr	r3, [r3, #24]
 8012292:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012296:	431a      	orrs	r2, r3
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	69db      	ldr	r3, [r3, #28]
 801229c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80122a0:	431a      	orrs	r2, r3
 80122a2:	687b      	ldr	r3, [r7, #4]
 80122a4:	6a1b      	ldr	r3, [r3, #32]
 80122a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80122aa:	ea42 0103 	orr.w	r1, r2, r3
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80122b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80122b6:	687b      	ldr	r3, [r7, #4]
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	430a      	orrs	r2, r1
 80122bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	699b      	ldr	r3, [r3, #24]
 80122c2:	0c1b      	lsrs	r3, r3, #16
 80122c4:	f003 0104 	and.w	r1, r3, #4
 80122c8:	687b      	ldr	r3, [r7, #4]
 80122ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122cc:	f003 0210 	and.w	r2, r3, #16
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	430a      	orrs	r2, r1
 80122d6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	69da      	ldr	r2, [r3, #28]
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80122e6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	2201      	movs	r2, #1
 80122f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80122f6:	2300      	movs	r3, #0
}
 80122f8:	4618      	mov	r0, r3
 80122fa:	3708      	adds	r7, #8
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}

08012300 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b08c      	sub	sp, #48	; 0x30
 8012304:	af00      	add	r7, sp, #0
 8012306:	60f8      	str	r0, [r7, #12]
 8012308:	60b9      	str	r1, [r7, #8]
 801230a:	607a      	str	r2, [r7, #4]
 801230c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801230e:	2301      	movs	r3, #1
 8012310:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8012312:	2300      	movs	r3, #0
 8012314:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801231e:	2b01      	cmp	r3, #1
 8012320:	d101      	bne.n	8012326 <HAL_SPI_TransmitReceive+0x26>
 8012322:	2302      	movs	r3, #2
 8012324:	e18a      	b.n	801263c <HAL_SPI_TransmitReceive+0x33c>
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	2201      	movs	r2, #1
 801232a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801232e:	f7fb fcbd 	bl	800dcac <HAL_GetTick>
 8012332:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801233a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8012344:	887b      	ldrh	r3, [r7, #2]
 8012346:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8012348:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801234c:	2b01      	cmp	r3, #1
 801234e:	d00f      	beq.n	8012370 <HAL_SPI_TransmitReceive+0x70>
 8012350:	69fb      	ldr	r3, [r7, #28]
 8012352:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012356:	d107      	bne.n	8012368 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	2b00      	cmp	r3, #0
 801235e:	d103      	bne.n	8012368 <HAL_SPI_TransmitReceive+0x68>
 8012360:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8012364:	2b04      	cmp	r3, #4
 8012366:	d003      	beq.n	8012370 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8012368:	2302      	movs	r3, #2
 801236a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 801236e:	e15b      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8012370:	68bb      	ldr	r3, [r7, #8]
 8012372:	2b00      	cmp	r3, #0
 8012374:	d005      	beq.n	8012382 <HAL_SPI_TransmitReceive+0x82>
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d002      	beq.n	8012382 <HAL_SPI_TransmitReceive+0x82>
 801237c:	887b      	ldrh	r3, [r7, #2]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d103      	bne.n	801238a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8012382:	2301      	movs	r3, #1
 8012384:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8012388:	e14e      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801238a:	68fb      	ldr	r3, [r7, #12]
 801238c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012390:	b2db      	uxtb	r3, r3
 8012392:	2b04      	cmp	r3, #4
 8012394:	d003      	beq.n	801239e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2205      	movs	r2, #5
 801239a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	2200      	movs	r2, #0
 80123a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80123a4:	68fb      	ldr	r3, [r7, #12]
 80123a6:	687a      	ldr	r2, [r7, #4]
 80123a8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	887a      	ldrh	r2, [r7, #2]
 80123ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	887a      	ldrh	r2, [r7, #2]
 80123b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	68ba      	ldr	r2, [r7, #8]
 80123ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	887a      	ldrh	r2, [r7, #2]
 80123c0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80123c2:	68fb      	ldr	r3, [r7, #12]
 80123c4:	887a      	ldrh	r2, [r7, #2]
 80123c6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2200      	movs	r2, #0
 80123cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	2200      	movs	r2, #0
 80123d2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123de:	2b40      	cmp	r3, #64	; 0x40
 80123e0:	d007      	beq.n	80123f2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	681a      	ldr	r2, [r3, #0]
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80123f0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	68db      	ldr	r3, [r3, #12]
 80123f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80123fa:	d178      	bne.n	80124ee <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	685b      	ldr	r3, [r3, #4]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d002      	beq.n	801240a <HAL_SPI_TransmitReceive+0x10a>
 8012404:	8b7b      	ldrh	r3, [r7, #26]
 8012406:	2b01      	cmp	r3, #1
 8012408:	d166      	bne.n	80124d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801240e:	881a      	ldrh	r2, [r3, #0]
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	681b      	ldr	r3, [r3, #0]
 8012414:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801241a:	1c9a      	adds	r2, r3, #2
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012424:	b29b      	uxth	r3, r3
 8012426:	3b01      	subs	r3, #1
 8012428:	b29a      	uxth	r2, r3
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801242e:	e053      	b.n	80124d8 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012430:	68fb      	ldr	r3, [r7, #12]
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	f003 0302 	and.w	r3, r3, #2
 801243a:	2b02      	cmp	r3, #2
 801243c:	d11b      	bne.n	8012476 <HAL_SPI_TransmitReceive+0x176>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012442:	b29b      	uxth	r3, r3
 8012444:	2b00      	cmp	r3, #0
 8012446:	d016      	beq.n	8012476 <HAL_SPI_TransmitReceive+0x176>
 8012448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801244a:	2b01      	cmp	r3, #1
 801244c:	d113      	bne.n	8012476 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012452:	881a      	ldrh	r2, [r3, #0]
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801245e:	1c9a      	adds	r2, r3, #2
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012468:	b29b      	uxth	r3, r3
 801246a:	3b01      	subs	r3, #1
 801246c:	b29a      	uxth	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012472:	2300      	movs	r3, #0
 8012474:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012476:	68fb      	ldr	r3, [r7, #12]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	689b      	ldr	r3, [r3, #8]
 801247c:	f003 0301 	and.w	r3, r3, #1
 8012480:	2b01      	cmp	r3, #1
 8012482:	d119      	bne.n	80124b8 <HAL_SPI_TransmitReceive+0x1b8>
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012488:	b29b      	uxth	r3, r3
 801248a:	2b00      	cmp	r3, #0
 801248c:	d014      	beq.n	80124b8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68da      	ldr	r2, [r3, #12]
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012498:	b292      	uxth	r2, r2
 801249a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124a0:	1c9a      	adds	r2, r3, #2
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124aa:	b29b      	uxth	r3, r3
 80124ac:	3b01      	subs	r3, #1
 80124ae:	b29a      	uxth	r2, r3
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80124b4:	2301      	movs	r3, #1
 80124b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80124b8:	f7fb fbf8 	bl	800dcac <HAL_GetTick>
 80124bc:	4602      	mov	r2, r0
 80124be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c0:	1ad3      	subs	r3, r2, r3
 80124c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d807      	bhi.n	80124d8 <HAL_SPI_TransmitReceive+0x1d8>
 80124c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80124ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ce:	d003      	beq.n	80124d8 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80124d0:	2303      	movs	r3, #3
 80124d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80124d6:	e0a7      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80124d8:	68fb      	ldr	r3, [r7, #12]
 80124da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80124dc:	b29b      	uxth	r3, r3
 80124de:	2b00      	cmp	r3, #0
 80124e0:	d1a6      	bne.n	8012430 <HAL_SPI_TransmitReceive+0x130>
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80124e6:	b29b      	uxth	r3, r3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d1a1      	bne.n	8012430 <HAL_SPI_TransmitReceive+0x130>
 80124ec:	e07c      	b.n	80125e8 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80124ee:	68fb      	ldr	r3, [r7, #12]
 80124f0:	685b      	ldr	r3, [r3, #4]
 80124f2:	2b00      	cmp	r3, #0
 80124f4:	d002      	beq.n	80124fc <HAL_SPI_TransmitReceive+0x1fc>
 80124f6:	8b7b      	ldrh	r3, [r7, #26]
 80124f8:	2b01      	cmp	r3, #1
 80124fa:	d16b      	bne.n	80125d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012500:	68fb      	ldr	r3, [r7, #12]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	330c      	adds	r3, #12
 8012506:	7812      	ldrb	r2, [r2, #0]
 8012508:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801250a:	68fb      	ldr	r3, [r7, #12]
 801250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801250e:	1c5a      	adds	r2, r3, #1
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012514:	68fb      	ldr	r3, [r7, #12]
 8012516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012518:	b29b      	uxth	r3, r3
 801251a:	3b01      	subs	r3, #1
 801251c:	b29a      	uxth	r2, r3
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012522:	e057      	b.n	80125d4 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	681b      	ldr	r3, [r3, #0]
 8012528:	689b      	ldr	r3, [r3, #8]
 801252a:	f003 0302 	and.w	r3, r3, #2
 801252e:	2b02      	cmp	r3, #2
 8012530:	d11c      	bne.n	801256c <HAL_SPI_TransmitReceive+0x26c>
 8012532:	68fb      	ldr	r3, [r7, #12]
 8012534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012536:	b29b      	uxth	r3, r3
 8012538:	2b00      	cmp	r3, #0
 801253a:	d017      	beq.n	801256c <HAL_SPI_TransmitReceive+0x26c>
 801253c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801253e:	2b01      	cmp	r3, #1
 8012540:	d114      	bne.n	801256c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012542:	68fb      	ldr	r3, [r7, #12]
 8012544:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012546:	68fb      	ldr	r3, [r7, #12]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	330c      	adds	r3, #12
 801254c:	7812      	ldrb	r2, [r2, #0]
 801254e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012550:	68fb      	ldr	r3, [r7, #12]
 8012552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012554:	1c5a      	adds	r2, r3, #1
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801255a:	68fb      	ldr	r3, [r7, #12]
 801255c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801255e:	b29b      	uxth	r3, r3
 8012560:	3b01      	subs	r3, #1
 8012562:	b29a      	uxth	r2, r3
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012568:	2300      	movs	r3, #0
 801256a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	689b      	ldr	r3, [r3, #8]
 8012572:	f003 0301 	and.w	r3, r3, #1
 8012576:	2b01      	cmp	r3, #1
 8012578:	d119      	bne.n	80125ae <HAL_SPI_TransmitReceive+0x2ae>
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801257e:	b29b      	uxth	r3, r3
 8012580:	2b00      	cmp	r3, #0
 8012582:	d014      	beq.n	80125ae <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	681b      	ldr	r3, [r3, #0]
 8012588:	68da      	ldr	r2, [r3, #12]
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801258e:	b2d2      	uxtb	r2, r2
 8012590:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012596:	1c5a      	adds	r2, r3, #1
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125a0:	b29b      	uxth	r3, r3
 80125a2:	3b01      	subs	r3, #1
 80125a4:	b29a      	uxth	r2, r3
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80125aa:	2301      	movs	r3, #1
 80125ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80125ae:	f7fb fb7d 	bl	800dcac <HAL_GetTick>
 80125b2:	4602      	mov	r2, r0
 80125b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b6:	1ad3      	subs	r3, r2, r3
 80125b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80125ba:	429a      	cmp	r2, r3
 80125bc:	d803      	bhi.n	80125c6 <HAL_SPI_TransmitReceive+0x2c6>
 80125be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125c4:	d102      	bne.n	80125cc <HAL_SPI_TransmitReceive+0x2cc>
 80125c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d103      	bne.n	80125d4 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80125cc:	2303      	movs	r3, #3
 80125ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80125d2:	e029      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80125d8:	b29b      	uxth	r3, r3
 80125da:	2b00      	cmp	r3, #0
 80125dc:	d1a2      	bne.n	8012524 <HAL_SPI_TransmitReceive+0x224>
 80125de:	68fb      	ldr	r3, [r7, #12]
 80125e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d19d      	bne.n	8012524 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80125e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80125ec:	68f8      	ldr	r0, [r7, #12]
 80125ee:	f000 fb11 	bl	8012c14 <SPI_EndRxTxTransaction>
 80125f2:	4603      	mov	r3, r0
 80125f4:	2b00      	cmp	r3, #0
 80125f6:	d006      	beq.n	8012606 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80125f8:	2301      	movs	r3, #1
 80125fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2220      	movs	r2, #32
 8012602:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012604:	e010      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	689b      	ldr	r3, [r3, #8]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d10b      	bne.n	8012626 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801260e:	2300      	movs	r3, #0
 8012610:	617b      	str	r3, [r7, #20]
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	681b      	ldr	r3, [r3, #0]
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	617b      	str	r3, [r7, #20]
 801261a:	68fb      	ldr	r3, [r7, #12]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	689b      	ldr	r3, [r3, #8]
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	e000      	b.n	8012628 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8012626:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2201      	movs	r2, #1
 801262c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8012638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801263c:	4618      	mov	r0, r3
 801263e:	3730      	adds	r7, #48	; 0x30
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012644:	b580      	push	{r7, lr}
 8012646:	b086      	sub	sp, #24
 8012648:	af00      	add	r7, sp, #0
 801264a:	60f8      	str	r0, [r7, #12]
 801264c:	60b9      	str	r1, [r7, #8]
 801264e:	4613      	mov	r3, r2
 8012650:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012652:	2300      	movs	r3, #0
 8012654:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801265c:	2b01      	cmp	r3, #1
 801265e:	d101      	bne.n	8012664 <HAL_SPI_Transmit_DMA+0x20>
 8012660:	2302      	movs	r3, #2
 8012662:	e09b      	b.n	801279c <HAL_SPI_Transmit_DMA+0x158>
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	2201      	movs	r2, #1
 8012668:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012672:	b2db      	uxtb	r3, r3
 8012674:	2b01      	cmp	r3, #1
 8012676:	d002      	beq.n	801267e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8012678:	2302      	movs	r3, #2
 801267a:	75fb      	strb	r3, [r7, #23]
    goto error;
 801267c:	e089      	b.n	8012792 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 801267e:	68bb      	ldr	r3, [r7, #8]
 8012680:	2b00      	cmp	r3, #0
 8012682:	d002      	beq.n	801268a <HAL_SPI_Transmit_DMA+0x46>
 8012684:	88fb      	ldrh	r3, [r7, #6]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d102      	bne.n	8012690 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 801268a:	2301      	movs	r3, #1
 801268c:	75fb      	strb	r3, [r7, #23]
    goto error;
 801268e:	e080      	b.n	8012792 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2203      	movs	r2, #3
 8012694:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8012698:	68fb      	ldr	r3, [r7, #12]
 801269a:	2200      	movs	r2, #0
 801269c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	68ba      	ldr	r2, [r7, #8]
 80126a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	88fa      	ldrh	r2, [r7, #6]
 80126a8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80126aa:	68fb      	ldr	r3, [r7, #12]
 80126ac:	88fa      	ldrh	r2, [r7, #6]
 80126ae:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	2200      	movs	r2, #0
 80126b4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80126b6:	68fb      	ldr	r3, [r7, #12]
 80126b8:	2200      	movs	r2, #0
 80126ba:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	2200      	movs	r2, #0
 80126c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	2200      	movs	r2, #0
 80126c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80126c8:	68fb      	ldr	r3, [r7, #12]
 80126ca:	2200      	movs	r2, #0
 80126cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	689b      	ldr	r3, [r3, #8]
 80126d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80126d6:	d10f      	bne.n	80126f8 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	681b      	ldr	r3, [r3, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	681b      	ldr	r3, [r3, #0]
 80126e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80126e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80126f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80126f8:	68fb      	ldr	r3, [r7, #12]
 80126fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80126fc:	4a29      	ldr	r2, [pc, #164]	; (80127a4 <HAL_SPI_Transmit_DMA+0x160>)
 80126fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8012700:	68fb      	ldr	r3, [r7, #12]
 8012702:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012704:	4a28      	ldr	r2, [pc, #160]	; (80127a8 <HAL_SPI_Transmit_DMA+0x164>)
 8012706:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801270c:	4a27      	ldr	r2, [pc, #156]	; (80127ac <HAL_SPI_Transmit_DMA+0x168>)
 801270e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8012710:	68fb      	ldr	r3, [r7, #12]
 8012712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012714:	2200      	movs	r2, #0
 8012716:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012720:	4619      	mov	r1, r3
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	330c      	adds	r3, #12
 8012728:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801272e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012730:	f7fb fcac 	bl	800e08c <HAL_DMA_Start_IT>
 8012734:	4603      	mov	r3, r0
 8012736:	2b00      	cmp	r3, #0
 8012738:	d00c      	beq.n	8012754 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801273e:	f043 0210 	orr.w	r2, r3, #16
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8012746:	2301      	movs	r3, #1
 8012748:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	2201      	movs	r2, #1
 801274e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8012752:	e01e      	b.n	8012792 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801275e:	2b40      	cmp	r3, #64	; 0x40
 8012760:	d007      	beq.n	8012772 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	681a      	ldr	r2, [r3, #0]
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012770:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	685a      	ldr	r2, [r3, #4]
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	f042 0220 	orr.w	r2, r2, #32
 8012780:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	685a      	ldr	r2, [r3, #4]
 8012788:	68fb      	ldr	r3, [r7, #12]
 801278a:	681b      	ldr	r3, [r3, #0]
 801278c:	f042 0202 	orr.w	r2, r2, #2
 8012790:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	2200      	movs	r2, #0
 8012796:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801279a:	7dfb      	ldrb	r3, [r7, #23]
}
 801279c:	4618      	mov	r0, r3
 801279e:	3718      	adds	r7, #24
 80127a0:	46bd      	mov	sp, r7
 80127a2:	bd80      	pop	{r7, pc}
 80127a4:	08012a81 	.word	0x08012a81
 80127a8:	080129d9 	.word	0x080129d9
 80127ac:	08012a9d 	.word	0x08012a9d

080127b0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b088      	sub	sp, #32
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80127b8:	687b      	ldr	r3, [r7, #4]
 80127ba:	681b      	ldr	r3, [r3, #0]
 80127bc:	685b      	ldr	r3, [r3, #4]
 80127be:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	689b      	ldr	r3, [r3, #8]
 80127c6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80127c8:	69bb      	ldr	r3, [r7, #24]
 80127ca:	099b      	lsrs	r3, r3, #6
 80127cc:	f003 0301 	and.w	r3, r3, #1
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	d10f      	bne.n	80127f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80127d4:	69bb      	ldr	r3, [r7, #24]
 80127d6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80127da:	2b00      	cmp	r3, #0
 80127dc:	d00a      	beq.n	80127f4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80127de:	69fb      	ldr	r3, [r7, #28]
 80127e0:	099b      	lsrs	r3, r3, #6
 80127e2:	f003 0301 	and.w	r3, r3, #1
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d004      	beq.n	80127f4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127ee:	6878      	ldr	r0, [r7, #4]
 80127f0:	4798      	blx	r3
    return;
 80127f2:	e0d7      	b.n	80129a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80127f4:	69bb      	ldr	r3, [r7, #24]
 80127f6:	085b      	lsrs	r3, r3, #1
 80127f8:	f003 0301 	and.w	r3, r3, #1
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00a      	beq.n	8012816 <HAL_SPI_IRQHandler+0x66>
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	09db      	lsrs	r3, r3, #7
 8012804:	f003 0301 	and.w	r3, r3, #1
 8012808:	2b00      	cmp	r3, #0
 801280a:	d004      	beq.n	8012816 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012810:	6878      	ldr	r0, [r7, #4]
 8012812:	4798      	blx	r3
    return;
 8012814:	e0c6      	b.n	80129a4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8012816:	69bb      	ldr	r3, [r7, #24]
 8012818:	095b      	lsrs	r3, r3, #5
 801281a:	f003 0301 	and.w	r3, r3, #1
 801281e:	2b00      	cmp	r3, #0
 8012820:	d10c      	bne.n	801283c <HAL_SPI_IRQHandler+0x8c>
 8012822:	69bb      	ldr	r3, [r7, #24]
 8012824:	099b      	lsrs	r3, r3, #6
 8012826:	f003 0301 	and.w	r3, r3, #1
 801282a:	2b00      	cmp	r3, #0
 801282c:	d106      	bne.n	801283c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 801282e:	69bb      	ldr	r3, [r7, #24]
 8012830:	0a1b      	lsrs	r3, r3, #8
 8012832:	f003 0301 	and.w	r3, r3, #1
 8012836:	2b00      	cmp	r3, #0
 8012838:	f000 80b4 	beq.w	80129a4 <HAL_SPI_IRQHandler+0x1f4>
 801283c:	69fb      	ldr	r3, [r7, #28]
 801283e:	095b      	lsrs	r3, r3, #5
 8012840:	f003 0301 	and.w	r3, r3, #1
 8012844:	2b00      	cmp	r3, #0
 8012846:	f000 80ad 	beq.w	80129a4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801284a:	69bb      	ldr	r3, [r7, #24]
 801284c:	099b      	lsrs	r3, r3, #6
 801284e:	f003 0301 	and.w	r3, r3, #1
 8012852:	2b00      	cmp	r3, #0
 8012854:	d023      	beq.n	801289e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801285c:	b2db      	uxtb	r3, r3
 801285e:	2b03      	cmp	r3, #3
 8012860:	d011      	beq.n	8012886 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012866:	f043 0204 	orr.w	r2, r3, #4
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801286e:	2300      	movs	r3, #0
 8012870:	617b      	str	r3, [r7, #20]
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	681b      	ldr	r3, [r3, #0]
 8012876:	68db      	ldr	r3, [r3, #12]
 8012878:	617b      	str	r3, [r7, #20]
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	681b      	ldr	r3, [r3, #0]
 801287e:	689b      	ldr	r3, [r3, #8]
 8012880:	617b      	str	r3, [r7, #20]
 8012882:	697b      	ldr	r3, [r7, #20]
 8012884:	e00b      	b.n	801289e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012886:	2300      	movs	r3, #0
 8012888:	613b      	str	r3, [r7, #16]
 801288a:	687b      	ldr	r3, [r7, #4]
 801288c:	681b      	ldr	r3, [r3, #0]
 801288e:	68db      	ldr	r3, [r3, #12]
 8012890:	613b      	str	r3, [r7, #16]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	689b      	ldr	r3, [r3, #8]
 8012898:	613b      	str	r3, [r7, #16]
 801289a:	693b      	ldr	r3, [r7, #16]
        return;
 801289c:	e082      	b.n	80129a4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 801289e:	69bb      	ldr	r3, [r7, #24]
 80128a0:	095b      	lsrs	r3, r3, #5
 80128a2:	f003 0301 	and.w	r3, r3, #1
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d014      	beq.n	80128d4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128ae:	f043 0201 	orr.w	r2, r3, #1
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80128b6:	2300      	movs	r3, #0
 80128b8:	60fb      	str	r3, [r7, #12]
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	681b      	ldr	r3, [r3, #0]
 80128be:	689b      	ldr	r3, [r3, #8]
 80128c0:	60fb      	str	r3, [r7, #12]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	681a      	ldr	r2, [r3, #0]
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80128d0:	601a      	str	r2, [r3, #0]
 80128d2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80128d4:	69bb      	ldr	r3, [r7, #24]
 80128d6:	0a1b      	lsrs	r3, r3, #8
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00c      	beq.n	80128fa <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128e4:	f043 0208 	orr.w	r2, r3, #8
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80128ec:	2300      	movs	r3, #0
 80128ee:	60bb      	str	r3, [r7, #8]
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	689b      	ldr	r3, [r3, #8]
 80128f6:	60bb      	str	r3, [r7, #8]
 80128f8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d04f      	beq.n	80129a2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	681b      	ldr	r3, [r3, #0]
 8012906:	685a      	ldr	r2, [r3, #4]
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012910:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	2201      	movs	r2, #1
 8012916:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801291a:	69fb      	ldr	r3, [r7, #28]
 801291c:	f003 0302 	and.w	r3, r3, #2
 8012920:	2b00      	cmp	r3, #0
 8012922:	d104      	bne.n	801292e <HAL_SPI_IRQHandler+0x17e>
 8012924:	69fb      	ldr	r3, [r7, #28]
 8012926:	f003 0301 	and.w	r3, r3, #1
 801292a:	2b00      	cmp	r3, #0
 801292c:	d034      	beq.n	8012998 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 801292e:	687b      	ldr	r3, [r7, #4]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	685a      	ldr	r2, [r3, #4]
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f022 0203 	bic.w	r2, r2, #3
 801293c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012942:	2b00      	cmp	r3, #0
 8012944:	d011      	beq.n	801296a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801294a:	4a18      	ldr	r2, [pc, #96]	; (80129ac <HAL_SPI_IRQHandler+0x1fc>)
 801294c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012952:	4618      	mov	r0, r3
 8012954:	f7fb fbf2 	bl	800e13c <HAL_DMA_Abort_IT>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d005      	beq.n	801296a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801296e:	2b00      	cmp	r3, #0
 8012970:	d016      	beq.n	80129a0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012976:	4a0d      	ldr	r2, [pc, #52]	; (80129ac <HAL_SPI_IRQHandler+0x1fc>)
 8012978:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801297e:	4618      	mov	r0, r3
 8012980:	f7fb fbdc 	bl	800e13c <HAL_DMA_Abort_IT>
 8012984:	4603      	mov	r3, r0
 8012986:	2b00      	cmp	r3, #0
 8012988:	d00a      	beq.n	80129a0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801298e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012992:	687b      	ldr	r3, [r7, #4]
 8012994:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8012996:	e003      	b.n	80129a0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f000 f813 	bl	80129c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801299e:	e000      	b.n	80129a2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80129a0:	bf00      	nop
    return;
 80129a2:	bf00      	nop
  }
}
 80129a4:	3720      	adds	r7, #32
 80129a6:	46bd      	mov	sp, r7
 80129a8:	bd80      	pop	{r7, pc}
 80129aa:	bf00      	nop
 80129ac:	08012add 	.word	0x08012add

080129b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80129b8:	bf00      	nop
 80129ba:	370c      	adds	r7, #12
 80129bc:	46bd      	mov	sp, r7
 80129be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c2:	4770      	bx	lr

080129c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80129c4:	b480      	push	{r7}
 80129c6:	b083      	sub	sp, #12
 80129c8:	af00      	add	r7, sp, #0
 80129ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80129cc:	bf00      	nop
 80129ce:	370c      	adds	r7, #12
 80129d0:	46bd      	mov	sp, r7
 80129d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129d6:	4770      	bx	lr

080129d8 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b086      	sub	sp, #24
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129e4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80129e6:	f7fb f961 	bl	800dcac <HAL_GetTick>
 80129ea:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80129f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80129fa:	d03b      	beq.n	8012a74 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	685a      	ldr	r2, [r3, #4]
 8012a02:	697b      	ldr	r3, [r7, #20]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	f022 0220 	bic.w	r2, r2, #32
 8012a0a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012a0c:	697b      	ldr	r3, [r7, #20]
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	685a      	ldr	r2, [r3, #4]
 8012a12:	697b      	ldr	r3, [r7, #20]
 8012a14:	681b      	ldr	r3, [r3, #0]
 8012a16:	f022 0202 	bic.w	r2, r2, #2
 8012a1a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012a1c:	693a      	ldr	r2, [r7, #16]
 8012a1e:	2164      	movs	r1, #100	; 0x64
 8012a20:	6978      	ldr	r0, [r7, #20]
 8012a22:	f000 f8f7 	bl	8012c14 <SPI_EndRxTxTransaction>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d005      	beq.n	8012a38 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012a2c:	697b      	ldr	r3, [r7, #20]
 8012a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a30:	f043 0220 	orr.w	r2, r3, #32
 8012a34:	697b      	ldr	r3, [r7, #20]
 8012a36:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	689b      	ldr	r3, [r3, #8]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d10a      	bne.n	8012a56 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012a40:	2300      	movs	r3, #0
 8012a42:	60fb      	str	r3, [r7, #12]
 8012a44:	697b      	ldr	r3, [r7, #20]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	68db      	ldr	r3, [r3, #12]
 8012a4a:	60fb      	str	r3, [r7, #12]
 8012a4c:	697b      	ldr	r3, [r7, #20]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	689b      	ldr	r3, [r3, #8]
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8012a56:	697b      	ldr	r3, [r7, #20]
 8012a58:	2200      	movs	r2, #0
 8012a5a:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8012a5c:	697b      	ldr	r3, [r7, #20]
 8012a5e:	2201      	movs	r2, #1
 8012a60:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d003      	beq.n	8012a74 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012a6c:	6978      	ldr	r0, [r7, #20]
 8012a6e:	f7ff ffa9 	bl	80129c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012a72:	e002      	b.n	8012a7a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8012a74:	6978      	ldr	r0, [r7, #20]
 8012a76:	f7f1 fcdb 	bl	8004430 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a7a:	3718      	adds	r7, #24
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b084      	sub	sp, #16
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a8c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012a8e:	68f8      	ldr	r0, [r7, #12]
 8012a90:	f7ff ff8e 	bl	80129b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012a94:	bf00      	nop
 8012a96:	3710      	adds	r7, #16
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012aa4:	687b      	ldr	r3, [r7, #4]
 8012aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012aa8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	681b      	ldr	r3, [r3, #0]
 8012aae:	685a      	ldr	r2, [r3, #4]
 8012ab0:	68fb      	ldr	r3, [r7, #12]
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	f022 0203 	bic.w	r2, r2, #3
 8012ab8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012abe:	f043 0210 	orr.w	r2, r3, #16
 8012ac2:	68fb      	ldr	r3, [r7, #12]
 8012ac4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	2201      	movs	r2, #1
 8012aca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	f7ff ff78 	bl	80129c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012ad4:	bf00      	nop
 8012ad6:	3710      	adds	r7, #16
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b084      	sub	sp, #16
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8012ae4:	687b      	ldr	r3, [r7, #4]
 8012ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ae8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8012aea:	68fb      	ldr	r3, [r7, #12]
 8012aec:	2200      	movs	r2, #0
 8012aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	2200      	movs	r2, #0
 8012af4:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8012af6:	68f8      	ldr	r0, [r7, #12]
 8012af8:	f7ff ff64 	bl	80129c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012afc:	bf00      	nop
 8012afe:	3710      	adds	r7, #16
 8012b00:	46bd      	mov	sp, r7
 8012b02:	bd80      	pop	{r7, pc}

08012b04 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012b04:	b580      	push	{r7, lr}
 8012b06:	b088      	sub	sp, #32
 8012b08:	af00      	add	r7, sp, #0
 8012b0a:	60f8      	str	r0, [r7, #12]
 8012b0c:	60b9      	str	r1, [r7, #8]
 8012b0e:	603b      	str	r3, [r7, #0]
 8012b10:	4613      	mov	r3, r2
 8012b12:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012b14:	f7fb f8ca 	bl	800dcac <HAL_GetTick>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b1c:	1a9b      	subs	r3, r3, r2
 8012b1e:	683a      	ldr	r2, [r7, #0]
 8012b20:	4413      	add	r3, r2
 8012b22:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8012b24:	f7fb f8c2 	bl	800dcac <HAL_GetTick>
 8012b28:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8012b2a:	4b39      	ldr	r3, [pc, #228]	; (8012c10 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	015b      	lsls	r3, r3, #5
 8012b30:	0d1b      	lsrs	r3, r3, #20
 8012b32:	69fa      	ldr	r2, [r7, #28]
 8012b34:	fb02 f303 	mul.w	r3, r2, r3
 8012b38:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012b3a:	e054      	b.n	8012be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012b3c:	683b      	ldr	r3, [r7, #0]
 8012b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b42:	d050      	beq.n	8012be6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012b44:	f7fb f8b2 	bl	800dcac <HAL_GetTick>
 8012b48:	4602      	mov	r2, r0
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	69fa      	ldr	r2, [r7, #28]
 8012b50:	429a      	cmp	r2, r3
 8012b52:	d902      	bls.n	8012b5a <SPI_WaitFlagStateUntilTimeout+0x56>
 8012b54:	69fb      	ldr	r3, [r7, #28]
 8012b56:	2b00      	cmp	r3, #0
 8012b58:	d13d      	bne.n	8012bd6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	681b      	ldr	r3, [r3, #0]
 8012b5e:	685a      	ldr	r2, [r3, #4]
 8012b60:	68fb      	ldr	r3, [r7, #12]
 8012b62:	681b      	ldr	r3, [r3, #0]
 8012b64:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012b68:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8012b6a:	68fb      	ldr	r3, [r7, #12]
 8012b6c:	685b      	ldr	r3, [r3, #4]
 8012b6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012b72:	d111      	bne.n	8012b98 <SPI_WaitFlagStateUntilTimeout+0x94>
 8012b74:	68fb      	ldr	r3, [r7, #12]
 8012b76:	689b      	ldr	r3, [r3, #8]
 8012b78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b7c:	d004      	beq.n	8012b88 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	689b      	ldr	r3, [r3, #8]
 8012b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012b86:	d107      	bne.n	8012b98 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	681a      	ldr	r2, [r3, #0]
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	681b      	ldr	r3, [r3, #0]
 8012b92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012b96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012ba0:	d10f      	bne.n	8012bc2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	681a      	ldr	r2, [r3, #0]
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	681b      	ldr	r3, [r3, #0]
 8012bac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012bb0:	601a      	str	r2, [r3, #0]
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	68fb      	ldr	r3, [r7, #12]
 8012bba:	681b      	ldr	r3, [r3, #0]
 8012bbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012bc0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	2201      	movs	r2, #1
 8012bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8012bd2:	2303      	movs	r3, #3
 8012bd4:	e017      	b.n	8012c06 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8012bd6:	697b      	ldr	r3, [r7, #20]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d101      	bne.n	8012be0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8012bdc:	2300      	movs	r3, #0
 8012bde:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8012be0:	697b      	ldr	r3, [r7, #20]
 8012be2:	3b01      	subs	r3, #1
 8012be4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	681b      	ldr	r3, [r3, #0]
 8012bea:	689a      	ldr	r2, [r3, #8]
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	4013      	ands	r3, r2
 8012bf0:	68ba      	ldr	r2, [r7, #8]
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	bf0c      	ite	eq
 8012bf6:	2301      	moveq	r3, #1
 8012bf8:	2300      	movne	r3, #0
 8012bfa:	b2db      	uxtb	r3, r3
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	79fb      	ldrb	r3, [r7, #7]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d19b      	bne.n	8012b3c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012c04:	2300      	movs	r3, #0
}
 8012c06:	4618      	mov	r0, r3
 8012c08:	3720      	adds	r7, #32
 8012c0a:	46bd      	mov	sp, r7
 8012c0c:	bd80      	pop	{r7, pc}
 8012c0e:	bf00      	nop
 8012c10:	20000000 	.word	0x20000000

08012c14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b088      	sub	sp, #32
 8012c18:	af02      	add	r7, sp, #8
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012c20:	4b1b      	ldr	r3, [pc, #108]	; (8012c90 <SPI_EndRxTxTransaction+0x7c>)
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	4a1b      	ldr	r2, [pc, #108]	; (8012c94 <SPI_EndRxTxTransaction+0x80>)
 8012c26:	fba2 2303 	umull	r2, r3, r2, r3
 8012c2a:	0d5b      	lsrs	r3, r3, #21
 8012c2c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012c30:	fb02 f303 	mul.w	r3, r2, r3
 8012c34:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	685b      	ldr	r3, [r3, #4]
 8012c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012c3e:	d112      	bne.n	8012c66 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	9300      	str	r3, [sp, #0]
 8012c44:	68bb      	ldr	r3, [r7, #8]
 8012c46:	2200      	movs	r2, #0
 8012c48:	2180      	movs	r1, #128	; 0x80
 8012c4a:	68f8      	ldr	r0, [r7, #12]
 8012c4c:	f7ff ff5a 	bl	8012b04 <SPI_WaitFlagStateUntilTimeout>
 8012c50:	4603      	mov	r3, r0
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d016      	beq.n	8012c84 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c5a:	f043 0220 	orr.w	r2, r3, #32
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012c62:	2303      	movs	r3, #3
 8012c64:	e00f      	b.n	8012c86 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012c66:	697b      	ldr	r3, [r7, #20]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d00a      	beq.n	8012c82 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012c6c:	697b      	ldr	r3, [r7, #20]
 8012c6e:	3b01      	subs	r3, #1
 8012c70:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012c72:	68fb      	ldr	r3, [r7, #12]
 8012c74:	681b      	ldr	r3, [r3, #0]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c7c:	2b80      	cmp	r3, #128	; 0x80
 8012c7e:	d0f2      	beq.n	8012c66 <SPI_EndRxTxTransaction+0x52>
 8012c80:	e000      	b.n	8012c84 <SPI_EndRxTxTransaction+0x70>
        break;
 8012c82:	bf00      	nop
  }

  return HAL_OK;
 8012c84:	2300      	movs	r3, #0
}
 8012c86:	4618      	mov	r0, r3
 8012c88:	3718      	adds	r7, #24
 8012c8a:	46bd      	mov	sp, r7
 8012c8c:	bd80      	pop	{r7, pc}
 8012c8e:	bf00      	nop
 8012c90:	20000000 	.word	0x20000000
 8012c94:	165e9f81 	.word	0x165e9f81

08012c98 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012c98:	b084      	sub	sp, #16
 8012c9a:	b480      	push	{r7}
 8012c9c:	b085      	sub	sp, #20
 8012c9e:	af00      	add	r7, sp, #0
 8012ca0:	6078      	str	r0, [r7, #4]
 8012ca2:	f107 001c 	add.w	r0, r7, #28
 8012ca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012caa:	2300      	movs	r3, #0
 8012cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012cae:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012cb0:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012cb2:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012cb6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012cba:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012cbe:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012cc2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012cc4:	68fa      	ldr	r2, [r7, #12]
 8012cc6:	4313      	orrs	r3, r2
 8012cc8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	685b      	ldr	r3, [r3, #4]
 8012cce:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8012cd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012cd6:	68fa      	ldr	r2, [r7, #12]
 8012cd8:	431a      	orrs	r2, r3
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012cde:	2300      	movs	r3, #0
}
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	3714      	adds	r7, #20
 8012ce4:	46bd      	mov	sp, r7
 8012ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cea:	b004      	add	sp, #16
 8012cec:	4770      	bx	lr

08012cee <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8012cee:	b480      	push	{r7}
 8012cf0:	b083      	sub	sp, #12
 8012cf2:	af00      	add	r7, sp, #0
 8012cf4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012cfc:	4618      	mov	r0, r3
 8012cfe:	370c      	adds	r7, #12
 8012d00:	46bd      	mov	sp, r7
 8012d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d06:	4770      	bx	lr

08012d08 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012d08:	b480      	push	{r7}
 8012d0a:	b083      	sub	sp, #12
 8012d0c:	af00      	add	r7, sp, #0
 8012d0e:	6078      	str	r0, [r7, #4]
 8012d10:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012d12:	683b      	ldr	r3, [r7, #0]
 8012d14:	681a      	ldr	r2, [r3, #0]
 8012d16:	687b      	ldr	r3, [r7, #4]
 8012d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012d1c:	2300      	movs	r3, #0
}
 8012d1e:	4618      	mov	r0, r3
 8012d20:	370c      	adds	r7, #12
 8012d22:	46bd      	mov	sp, r7
 8012d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d28:	4770      	bx	lr

08012d2a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012d2a:	b580      	push	{r7, lr}
 8012d2c:	b082      	sub	sp, #8
 8012d2e:	af00      	add	r7, sp, #0
 8012d30:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2203      	movs	r2, #3
 8012d36:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012d38:	2002      	movs	r0, #2
 8012d3a:	f7fa ffc3 	bl	800dcc4 <HAL_Delay>
  
  return HAL_OK;
 8012d3e:	2300      	movs	r3, #0
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3708      	adds	r7, #8
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8012d50:	687b      	ldr	r3, [r7, #4]
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	f003 0303 	and.w	r3, r3, #3
}
 8012d58:	4618      	mov	r0, r3
 8012d5a:	370c      	adds	r7, #12
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d62:	4770      	bx	lr

08012d64 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012d64:	b480      	push	{r7}
 8012d66:	b085      	sub	sp, #20
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012d72:	683b      	ldr	r3, [r7, #0]
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d7a:	683b      	ldr	r3, [r7, #0]
 8012d7c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012d7e:	683b      	ldr	r3, [r7, #0]
 8012d80:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d82:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012d84:	683b      	ldr	r3, [r7, #0]
 8012d86:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012d88:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012d8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012d90:	68fa      	ldr	r2, [r7, #12]
 8012d92:	4313      	orrs	r3, r2
 8012d94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	68db      	ldr	r3, [r3, #12]
 8012d9a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012d9e:	f023 030f 	bic.w	r3, r3, #15
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	431a      	orrs	r2, r3
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012daa:	2300      	movs	r3, #0
}
 8012dac:	4618      	mov	r0, r3
 8012dae:	3714      	adds	r7, #20
 8012db0:	46bd      	mov	sp, r7
 8012db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012db6:	4770      	bx	lr

08012db8 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8012db8:	b480      	push	{r7}
 8012dba:	b083      	sub	sp, #12
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	691b      	ldr	r3, [r3, #16]
 8012dc4:	b2db      	uxtb	r3, r3
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	370c      	adds	r7, #12
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd0:	4770      	bx	lr

08012dd2 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012dd2:	b480      	push	{r7}
 8012dd4:	b085      	sub	sp, #20
 8012dd6:	af00      	add	r7, sp, #0
 8012dd8:	6078      	str	r0, [r7, #4]
 8012dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3314      	adds	r3, #20
 8012de0:	461a      	mov	r2, r3
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	4413      	add	r3, r2
 8012de6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	681b      	ldr	r3, [r3, #0]
}  
 8012dec:	4618      	mov	r0, r3
 8012dee:	3714      	adds	r7, #20
 8012df0:	46bd      	mov	sp, r7
 8012df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df6:	4770      	bx	lr

08012df8 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012df8:	b480      	push	{r7}
 8012dfa:	b085      	sub	sp, #20
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
 8012e00:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012e02:	2300      	movs	r3, #0
 8012e04:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	681a      	ldr	r2, [r3, #0]
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8012e0e:	683b      	ldr	r3, [r7, #0]
 8012e10:	685a      	ldr	r2, [r3, #4]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e1e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8012e20:	683b      	ldr	r3, [r7, #0]
 8012e22:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8012e24:	431a      	orrs	r2, r3
                       Data->DPSM);
 8012e26:	683b      	ldr	r3, [r7, #0]
 8012e28:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8012e2a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012e2c:	68fa      	ldr	r2, [r7, #12]
 8012e2e:	4313      	orrs	r3, r2
 8012e30:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e36:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	431a      	orrs	r2, r3
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8012e42:	2300      	movs	r3, #0

}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3714      	adds	r7, #20
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b088      	sub	sp, #32
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8012e5a:	683b      	ldr	r3, [r7, #0]
 8012e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8012e5e:	2310      	movs	r3, #16
 8012e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012e62:	2340      	movs	r3, #64	; 0x40
 8012e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012e66:	2300      	movs	r3, #0
 8012e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012e6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012e70:	f107 0308 	add.w	r3, r7, #8
 8012e74:	4619      	mov	r1, r3
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f7ff ff74 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8012e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012e80:	2110      	movs	r1, #16
 8012e82:	6878      	ldr	r0, [r7, #4]
 8012e84:	f000 fa44 	bl	8013310 <SDMMC_GetCmdResp1>
 8012e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012e8a:	69fb      	ldr	r3, [r7, #28]
}
 8012e8c:	4618      	mov	r0, r3
 8012e8e:	3720      	adds	r7, #32
 8012e90:	46bd      	mov	sp, r7
 8012e92:	bd80      	pop	{r7, pc}

08012e94 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b088      	sub	sp, #32
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012e9e:	683b      	ldr	r3, [r7, #0]
 8012ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8012ea2:	2311      	movs	r3, #17
 8012ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012ea6:	2340      	movs	r3, #64	; 0x40
 8012ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012eb2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012eb4:	f107 0308 	add.w	r3, r7, #8
 8012eb8:	4619      	mov	r1, r3
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f7ff ff52 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8012ec4:	2111      	movs	r1, #17
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f000 fa22 	bl	8013310 <SDMMC_GetCmdResp1>
 8012ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012ece:	69fb      	ldr	r3, [r7, #28]
}
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	3720      	adds	r7, #32
 8012ed4:	46bd      	mov	sp, r7
 8012ed6:	bd80      	pop	{r7, pc}

08012ed8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b088      	sub	sp, #32
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
 8012ee0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8012ee6:	2312      	movs	r3, #18
 8012ee8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012eea:	2340      	movs	r3, #64	; 0x40
 8012eec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012eee:	2300      	movs	r3, #0
 8012ef0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012ef6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012ef8:	f107 0308 	add.w	r3, r7, #8
 8012efc:	4619      	mov	r1, r3
 8012efe:	6878      	ldr	r0, [r7, #4]
 8012f00:	f7ff ff30 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f08:	2112      	movs	r1, #18
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f000 fa00 	bl	8013310 <SDMMC_GetCmdResp1>
 8012f10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f12:	69fb      	ldr	r3, [r7, #28]
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	3720      	adds	r7, #32
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	bd80      	pop	{r7, pc}

08012f1c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b088      	sub	sp, #32
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8012f2a:	2318      	movs	r3, #24
 8012f2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f2e:	2340      	movs	r3, #64	; 0x40
 8012f30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f32:	2300      	movs	r3, #0
 8012f34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f3c:	f107 0308 	add.w	r3, r7, #8
 8012f40:	4619      	mov	r1, r3
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7ff ff0e 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8012f48:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f4c:	2118      	movs	r1, #24
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f000 f9de 	bl	8013310 <SDMMC_GetCmdResp1>
 8012f54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f56:	69fb      	ldr	r3, [r7, #28]
}
 8012f58:	4618      	mov	r0, r3
 8012f5a:	3720      	adds	r7, #32
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}

08012f60 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8012f60:	b580      	push	{r7, lr}
 8012f62:	b088      	sub	sp, #32
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
 8012f68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8012f6e:	2319      	movs	r3, #25
 8012f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012f72:	2340      	movs	r3, #64	; 0x40
 8012f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012f76:	2300      	movs	r3, #0
 8012f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012f80:	f107 0308 	add.w	r3, r7, #8
 8012f84:	4619      	mov	r1, r3
 8012f86:	6878      	ldr	r0, [r7, #4]
 8012f88:	f7ff feec 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8012f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012f90:	2119      	movs	r1, #25
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	f000 f9bc 	bl	8013310 <SDMMC_GetCmdResp1>
 8012f98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012f9a:	69fb      	ldr	r3, [r7, #28]
}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	3720      	adds	r7, #32
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	bd80      	pop	{r7, pc}

08012fa4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b088      	sub	sp, #32
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8012fac:	2300      	movs	r3, #0
 8012fae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8012fb0:	230c      	movs	r3, #12
 8012fb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012fb4:	2340      	movs	r3, #64	; 0x40
 8012fb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8012fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012fc0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8012fc2:	f107 0308 	add.w	r3, r7, #8
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	6878      	ldr	r0, [r7, #4]
 8012fca:	f7ff fecb 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8012fce:	4a05      	ldr	r2, [pc, #20]	; (8012fe4 <SDMMC_CmdStopTransfer+0x40>)
 8012fd0:	210c      	movs	r1, #12
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f000 f99c 	bl	8013310 <SDMMC_GetCmdResp1>
 8012fd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8012fda:	69fb      	ldr	r3, [r7, #28]
}
 8012fdc:	4618      	mov	r0, r3
 8012fde:	3720      	adds	r7, #32
 8012fe0:	46bd      	mov	sp, r7
 8012fe2:	bd80      	pop	{r7, pc}
 8012fe4:	05f5e100 	.word	0x05f5e100

08012fe8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b08a      	sub	sp, #40	; 0x28
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8012ff8:	2307      	movs	r3, #7
 8012ffa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8012ffc:	2340      	movs	r3, #64	; 0x40
 8012ffe:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013000:	2300      	movs	r3, #0
 8013002:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013008:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801300a:	f107 0310 	add.w	r3, r7, #16
 801300e:	4619      	mov	r1, r3
 8013010:	68f8      	ldr	r0, [r7, #12]
 8013012:	f7ff fea7 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8013016:	f241 3288 	movw	r2, #5000	; 0x1388
 801301a:	2107      	movs	r1, #7
 801301c:	68f8      	ldr	r0, [r7, #12]
 801301e:	f000 f977 	bl	8013310 <SDMMC_GetCmdResp1>
 8013022:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8013024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013026:	4618      	mov	r0, r3
 8013028:	3728      	adds	r7, #40	; 0x28
 801302a:	46bd      	mov	sp, r7
 801302c:	bd80      	pop	{r7, pc}

0801302e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 801302e:	b580      	push	{r7, lr}
 8013030:	b088      	sub	sp, #32
 8013032:	af00      	add	r7, sp, #0
 8013034:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8013036:	2300      	movs	r3, #0
 8013038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 801303a:	2300      	movs	r3, #0
 801303c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 801303e:	2300      	movs	r3, #0
 8013040:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013042:	2300      	movs	r3, #0
 8013044:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013046:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801304a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801304c:	f107 0308 	add.w	r3, r7, #8
 8013050:	4619      	mov	r1, r3
 8013052:	6878      	ldr	r0, [r7, #4]
 8013054:	f7ff fe86 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f000 f92d 	bl	80132b8 <SDMMC_GetCmdError>
 801305e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013060:	69fb      	ldr	r3, [r7, #28]
}
 8013062:	4618      	mov	r0, r3
 8013064:	3720      	adds	r7, #32
 8013066:	46bd      	mov	sp, r7
 8013068:	bd80      	pop	{r7, pc}

0801306a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 801306a:	b580      	push	{r7, lr}
 801306c:	b088      	sub	sp, #32
 801306e:	af00      	add	r7, sp, #0
 8013070:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8013072:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8013076:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013078:	2308      	movs	r3, #8
 801307a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801307c:	2340      	movs	r3, #64	; 0x40
 801307e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013080:	2300      	movs	r3, #0
 8013082:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013088:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801308a:	f107 0308 	add.w	r3, r7, #8
 801308e:	4619      	mov	r1, r3
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	f7ff fe67 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8013096:	6878      	ldr	r0, [r7, #4]
 8013098:	f000 fb24 	bl	80136e4 <SDMMC_GetCmdResp7>
 801309c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801309e:	69fb      	ldr	r3, [r7, #28]
}
 80130a0:	4618      	mov	r0, r3
 80130a2:	3720      	adds	r7, #32
 80130a4:	46bd      	mov	sp, r7
 80130a6:	bd80      	pop	{r7, pc}

080130a8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b088      	sub	sp, #32
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80130b2:	683b      	ldr	r3, [r7, #0]
 80130b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80130b6:	2337      	movs	r3, #55	; 0x37
 80130b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80130ba:	2340      	movs	r3, #64	; 0x40
 80130bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80130be:	2300      	movs	r3, #0
 80130c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130c8:	f107 0308 	add.w	r3, r7, #8
 80130cc:	4619      	mov	r1, r3
 80130ce:	6878      	ldr	r0, [r7, #4]
 80130d0:	f7ff fe48 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80130d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80130d8:	2137      	movs	r1, #55	; 0x37
 80130da:	6878      	ldr	r0, [r7, #4]
 80130dc:	f000 f918 	bl	8013310 <SDMMC_GetCmdResp1>
 80130e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130e2:	69fb      	ldr	r3, [r7, #28]
}
 80130e4:	4618      	mov	r0, r3
 80130e6:	3720      	adds	r7, #32
 80130e8:	46bd      	mov	sp, r7
 80130ea:	bd80      	pop	{r7, pc}

080130ec <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b088      	sub	sp, #32
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80130fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8013102:	2329      	movs	r3, #41	; 0x29
 8013104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013106:	2340      	movs	r3, #64	; 0x40
 8013108:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801310a:	2300      	movs	r3, #0
 801310c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801310e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013112:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013114:	f107 0308 	add.w	r3, r7, #8
 8013118:	4619      	mov	r1, r3
 801311a:	6878      	ldr	r0, [r7, #4]
 801311c:	f7ff fe22 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8013120:	6878      	ldr	r0, [r7, #4]
 8013122:	f000 fa2b 	bl	801357c <SDMMC_GetCmdResp3>
 8013126:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013128:	69fb      	ldr	r3, [r7, #28]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3720      	adds	r7, #32
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}

08013132 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8013132:	b580      	push	{r7, lr}
 8013134:	b088      	sub	sp, #32
 8013136:	af00      	add	r7, sp, #0
 8013138:	6078      	str	r0, [r7, #4]
 801313a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 801313c:	683b      	ldr	r3, [r7, #0]
 801313e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013140:	2306      	movs	r3, #6
 8013142:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013144:	2340      	movs	r3, #64	; 0x40
 8013146:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013148:	2300      	movs	r3, #0
 801314a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801314c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013150:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013152:	f107 0308 	add.w	r3, r7, #8
 8013156:	4619      	mov	r1, r3
 8013158:	6878      	ldr	r0, [r7, #4]
 801315a:	f7ff fe03 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 801315e:	f241 3288 	movw	r2, #5000	; 0x1388
 8013162:	2106      	movs	r1, #6
 8013164:	6878      	ldr	r0, [r7, #4]
 8013166:	f000 f8d3 	bl	8013310 <SDMMC_GetCmdResp1>
 801316a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801316c:	69fb      	ldr	r3, [r7, #28]
}
 801316e:	4618      	mov	r0, r3
 8013170:	3720      	adds	r7, #32
 8013172:	46bd      	mov	sp, r7
 8013174:	bd80      	pop	{r7, pc}

08013176 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8013176:	b580      	push	{r7, lr}
 8013178:	b088      	sub	sp, #32
 801317a:	af00      	add	r7, sp, #0
 801317c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 801317e:	2300      	movs	r3, #0
 8013180:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8013182:	2333      	movs	r3, #51	; 0x33
 8013184:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013186:	2340      	movs	r3, #64	; 0x40
 8013188:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801318a:	2300      	movs	r3, #0
 801318c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801318e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013192:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013194:	f107 0308 	add.w	r3, r7, #8
 8013198:	4619      	mov	r1, r3
 801319a:	6878      	ldr	r0, [r7, #4]
 801319c:	f7ff fde2 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80131a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80131a4:	2133      	movs	r1, #51	; 0x33
 80131a6:	6878      	ldr	r0, [r7, #4]
 80131a8:	f000 f8b2 	bl	8013310 <SDMMC_GetCmdResp1>
 80131ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131ae:	69fb      	ldr	r3, [r7, #28]
}
 80131b0:	4618      	mov	r0, r3
 80131b2:	3720      	adds	r7, #32
 80131b4:	46bd      	mov	sp, r7
 80131b6:	bd80      	pop	{r7, pc}

080131b8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80131b8:	b580      	push	{r7, lr}
 80131ba:	b088      	sub	sp, #32
 80131bc:	af00      	add	r7, sp, #0
 80131be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80131c0:	2300      	movs	r3, #0
 80131c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80131c4:	2302      	movs	r3, #2
 80131c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80131c8:	23c0      	movs	r3, #192	; 0xc0
 80131ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80131cc:	2300      	movs	r3, #0
 80131ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80131d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131d6:	f107 0308 	add.w	r3, r7, #8
 80131da:	4619      	mov	r1, r3
 80131dc:	6878      	ldr	r0, [r7, #4]
 80131de:	f7ff fdc1 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80131e2:	6878      	ldr	r0, [r7, #4]
 80131e4:	f000 f982 	bl	80134ec <SDMMC_GetCmdResp2>
 80131e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131ea:	69fb      	ldr	r3, [r7, #28]
}
 80131ec:	4618      	mov	r0, r3
 80131ee:	3720      	adds	r7, #32
 80131f0:	46bd      	mov	sp, r7
 80131f2:	bd80      	pop	{r7, pc}

080131f4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
 80131fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8013202:	2309      	movs	r3, #9
 8013204:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8013206:	23c0      	movs	r3, #192	; 0xc0
 8013208:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801320a:	2300      	movs	r3, #0
 801320c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801320e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013212:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013214:	f107 0308 	add.w	r3, r7, #8
 8013218:	4619      	mov	r1, r3
 801321a:	6878      	ldr	r0, [r7, #4]
 801321c:	f7ff fda2 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8013220:	6878      	ldr	r0, [r7, #4]
 8013222:	f000 f963 	bl	80134ec <SDMMC_GetCmdResp2>
 8013226:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013228:	69fb      	ldr	r3, [r7, #28]
}
 801322a:	4618      	mov	r0, r3
 801322c:	3720      	adds	r7, #32
 801322e:	46bd      	mov	sp, r7
 8013230:	bd80      	pop	{r7, pc}

08013232 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8013232:	b580      	push	{r7, lr}
 8013234:	b088      	sub	sp, #32
 8013236:	af00      	add	r7, sp, #0
 8013238:	6078      	str	r0, [r7, #4]
 801323a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801323c:	2300      	movs	r3, #0
 801323e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013240:	2303      	movs	r3, #3
 8013242:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013244:	2340      	movs	r3, #64	; 0x40
 8013246:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013248:	2300      	movs	r3, #0
 801324a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801324c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013250:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013252:	f107 0308 	add.w	r3, r7, #8
 8013256:	4619      	mov	r1, r3
 8013258:	6878      	ldr	r0, [r7, #4]
 801325a:	f7ff fd83 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 801325e:	683a      	ldr	r2, [r7, #0]
 8013260:	2103      	movs	r1, #3
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f000 f9c8 	bl	80135f8 <SDMMC_GetCmdResp6>
 8013268:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801326a:	69fb      	ldr	r3, [r7, #28]
}
 801326c:	4618      	mov	r0, r3
 801326e:	3720      	adds	r7, #32
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b088      	sub	sp, #32
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8013282:	230d      	movs	r3, #13
 8013284:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013286:	2340      	movs	r3, #64	; 0x40
 8013288:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801328a:	2300      	movs	r3, #0
 801328c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801328e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013292:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013294:	f107 0308 	add.w	r3, r7, #8
 8013298:	4619      	mov	r1, r3
 801329a:	6878      	ldr	r0, [r7, #4]
 801329c:	f7ff fd62 	bl	8012d64 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80132a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80132a4:	210d      	movs	r1, #13
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f000 f832 	bl	8013310 <SDMMC_GetCmdResp1>
 80132ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ae:	69fb      	ldr	r3, [r7, #28]
}
 80132b0:	4618      	mov	r0, r3
 80132b2:	3720      	adds	r7, #32
 80132b4:	46bd      	mov	sp, r7
 80132b6:	bd80      	pop	{r7, pc}

080132b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80132b8:	b480      	push	{r7}
 80132ba:	b085      	sub	sp, #20
 80132bc:	af00      	add	r7, sp, #0
 80132be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80132c0:	4b11      	ldr	r3, [pc, #68]	; (8013308 <SDMMC_GetCmdError+0x50>)
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a11      	ldr	r2, [pc, #68]	; (801330c <SDMMC_GetCmdError+0x54>)
 80132c6:	fba2 2303 	umull	r2, r3, r2, r3
 80132ca:	0a5b      	lsrs	r3, r3, #9
 80132cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80132d0:	fb02 f303 	mul.w	r3, r2, r3
 80132d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	1e5a      	subs	r2, r3, #1
 80132da:	60fa      	str	r2, [r7, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d102      	bne.n	80132e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80132e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80132e4:	e009      	b.n	80132fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d0f1      	beq.n	80132d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	22c5      	movs	r2, #197	; 0xc5
 80132f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80132f8:	2300      	movs	r3, #0
}
 80132fa:	4618      	mov	r0, r3
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	20000000 	.word	0x20000000
 801330c:	10624dd3 	.word	0x10624dd3

08013310 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8013310:	b580      	push	{r7, lr}
 8013312:	b088      	sub	sp, #32
 8013314:	af00      	add	r7, sp, #0
 8013316:	60f8      	str	r0, [r7, #12]
 8013318:	460b      	mov	r3, r1
 801331a:	607a      	str	r2, [r7, #4]
 801331c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 801331e:	4b70      	ldr	r3, [pc, #448]	; (80134e0 <SDMMC_GetCmdResp1+0x1d0>)
 8013320:	681b      	ldr	r3, [r3, #0]
 8013322:	4a70      	ldr	r2, [pc, #448]	; (80134e4 <SDMMC_GetCmdResp1+0x1d4>)
 8013324:	fba2 2303 	umull	r2, r3, r2, r3
 8013328:	0a5a      	lsrs	r2, r3, #9
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	fb02 f303 	mul.w	r3, r2, r3
 8013330:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	1e5a      	subs	r2, r3, #1
 8013336:	61fa      	str	r2, [r7, #28]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d102      	bne.n	8013342 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801333c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013340:	e0c9      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013346:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801334e:	2b00      	cmp	r3, #0
 8013350:	d0ef      	beq.n	8013332 <SDMMC_GetCmdResp1+0x22>
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013358:	2b00      	cmp	r3, #0
 801335a:	d1ea      	bne.n	8013332 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013360:	f003 0304 	and.w	r3, r3, #4
 8013364:	2b00      	cmp	r3, #0
 8013366:	d004      	beq.n	8013372 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	2204      	movs	r2, #4
 801336c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801336e:	2304      	movs	r3, #4
 8013370:	e0b1      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013376:	f003 0301 	and.w	r3, r3, #1
 801337a:	2b00      	cmp	r3, #0
 801337c:	d004      	beq.n	8013388 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	2201      	movs	r2, #1
 8013382:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013384:	2301      	movs	r3, #1
 8013386:	e0a6      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	22c5      	movs	r2, #197	; 0xc5
 801338c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801338e:	68f8      	ldr	r0, [r7, #12]
 8013390:	f7ff fd12 	bl	8012db8 <SDIO_GetCommandResponse>
 8013394:	4603      	mov	r3, r0
 8013396:	461a      	mov	r2, r3
 8013398:	7afb      	ldrb	r3, [r7, #11]
 801339a:	4293      	cmp	r3, r2
 801339c:	d001      	beq.n	80133a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801339e:	2301      	movs	r3, #1
 80133a0:	e099      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80133a2:	2100      	movs	r1, #0
 80133a4:	68f8      	ldr	r0, [r7, #12]
 80133a6:	f7ff fd14 	bl	8012dd2 <SDIO_GetResponse>
 80133aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80133ac:	697a      	ldr	r2, [r7, #20]
 80133ae:	4b4e      	ldr	r3, [pc, #312]	; (80134e8 <SDMMC_GetCmdResp1+0x1d8>)
 80133b0:	4013      	ands	r3, r2
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d101      	bne.n	80133ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80133b6:	2300      	movs	r3, #0
 80133b8:	e08d      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80133ba:	697b      	ldr	r3, [r7, #20]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	da02      	bge.n	80133c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80133c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80133c4:	e087      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d001      	beq.n	80133d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80133d0:	2340      	movs	r3, #64	; 0x40
 80133d2:	e080      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d001      	beq.n	80133e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80133de:	2380      	movs	r3, #128	; 0x80
 80133e0:	e079      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80133e2:	697b      	ldr	r3, [r7, #20]
 80133e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d002      	beq.n	80133f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80133ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80133f0:	e071      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80133f2:	697b      	ldr	r3, [r7, #20]
 80133f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80133f8:	2b00      	cmp	r3, #0
 80133fa:	d002      	beq.n	8013402 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80133fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013400:	e069      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8013402:	697b      	ldr	r3, [r7, #20]
 8013404:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8013408:	2b00      	cmp	r3, #0
 801340a:	d002      	beq.n	8013412 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801340c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013410:	e061      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013418:	2b00      	cmp	r3, #0
 801341a:	d002      	beq.n	8013422 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801341c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013420:	e059      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8013422:	697b      	ldr	r3, [r7, #20]
 8013424:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013428:	2b00      	cmp	r3, #0
 801342a:	d002      	beq.n	8013432 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801342c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013430:	e051      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8013432:	697b      	ldr	r3, [r7, #20]
 8013434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013438:	2b00      	cmp	r3, #0
 801343a:	d002      	beq.n	8013442 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801343c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013440:	e049      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8013442:	697b      	ldr	r3, [r7, #20]
 8013444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013448:	2b00      	cmp	r3, #0
 801344a:	d002      	beq.n	8013452 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801344c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013450:	e041      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013458:	2b00      	cmp	r3, #0
 801345a:	d002      	beq.n	8013462 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801345c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013460:	e039      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8013462:	697b      	ldr	r3, [r7, #20]
 8013464:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013468:	2b00      	cmp	r3, #0
 801346a:	d002      	beq.n	8013472 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801346c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013470:	e031      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013478:	2b00      	cmp	r3, #0
 801347a:	d002      	beq.n	8013482 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801347c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013480:	e029      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8013482:	697b      	ldr	r3, [r7, #20]
 8013484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801348c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013490:	e021      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8013492:	697b      	ldr	r3, [r7, #20]
 8013494:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801349c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80134a0:	e019      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80134a2:	697b      	ldr	r3, [r7, #20]
 80134a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d002      	beq.n	80134b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80134ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80134b0:	e011      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80134b2:	697b      	ldr	r3, [r7, #20]
 80134b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d002      	beq.n	80134c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80134bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80134c0:	e009      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	f003 0308 	and.w	r3, r3, #8
 80134c8:	2b00      	cmp	r3, #0
 80134ca:	d002      	beq.n	80134d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80134cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80134d0:	e001      	b.n	80134d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80134d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3720      	adds	r7, #32
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}
 80134de:	bf00      	nop
 80134e0:	20000000 	.word	0x20000000
 80134e4:	10624dd3 	.word	0x10624dd3
 80134e8:	fdffe008 	.word	0xfdffe008

080134ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80134ec:	b480      	push	{r7}
 80134ee:	b085      	sub	sp, #20
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80134f4:	4b1f      	ldr	r3, [pc, #124]	; (8013574 <SDMMC_GetCmdResp2+0x88>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	4a1f      	ldr	r2, [pc, #124]	; (8013578 <SDMMC_GetCmdResp2+0x8c>)
 80134fa:	fba2 2303 	umull	r2, r3, r2, r3
 80134fe:	0a5b      	lsrs	r3, r3, #9
 8013500:	f241 3288 	movw	r2, #5000	; 0x1388
 8013504:	fb02 f303 	mul.w	r3, r2, r3
 8013508:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	1e5a      	subs	r2, r3, #1
 801350e:	60fa      	str	r2, [r7, #12]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d102      	bne.n	801351a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013514:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013518:	e026      	b.n	8013568 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801351e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013526:	2b00      	cmp	r3, #0
 8013528:	d0ef      	beq.n	801350a <SDMMC_GetCmdResp2+0x1e>
 801352a:	68bb      	ldr	r3, [r7, #8]
 801352c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013530:	2b00      	cmp	r3, #0
 8013532:	d1ea      	bne.n	801350a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013538:	f003 0304 	and.w	r3, r3, #4
 801353c:	2b00      	cmp	r3, #0
 801353e:	d004      	beq.n	801354a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013540:	687b      	ldr	r3, [r7, #4]
 8013542:	2204      	movs	r2, #4
 8013544:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013546:	2304      	movs	r3, #4
 8013548:	e00e      	b.n	8013568 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801354e:	f003 0301 	and.w	r3, r3, #1
 8013552:	2b00      	cmp	r3, #0
 8013554:	d004      	beq.n	8013560 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	2201      	movs	r2, #1
 801355a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801355c:	2301      	movs	r3, #1
 801355e:	e003      	b.n	8013568 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	22c5      	movs	r2, #197	; 0xc5
 8013564:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8013566:	2300      	movs	r3, #0
}
 8013568:	4618      	mov	r0, r3
 801356a:	3714      	adds	r7, #20
 801356c:	46bd      	mov	sp, r7
 801356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013572:	4770      	bx	lr
 8013574:	20000000 	.word	0x20000000
 8013578:	10624dd3 	.word	0x10624dd3

0801357c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 801357c:	b480      	push	{r7}
 801357e:	b085      	sub	sp, #20
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013584:	4b1a      	ldr	r3, [pc, #104]	; (80135f0 <SDMMC_GetCmdResp3+0x74>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	4a1a      	ldr	r2, [pc, #104]	; (80135f4 <SDMMC_GetCmdResp3+0x78>)
 801358a:	fba2 2303 	umull	r2, r3, r2, r3
 801358e:	0a5b      	lsrs	r3, r3, #9
 8013590:	f241 3288 	movw	r2, #5000	; 0x1388
 8013594:	fb02 f303 	mul.w	r3, r2, r3
 8013598:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 801359a:	68fb      	ldr	r3, [r7, #12]
 801359c:	1e5a      	subs	r2, r3, #1
 801359e:	60fa      	str	r2, [r7, #12]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d102      	bne.n	80135aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80135a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80135a8:	e01b      	b.n	80135e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80135aa:	687b      	ldr	r3, [r7, #4]
 80135ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80135b0:	68bb      	ldr	r3, [r7, #8]
 80135b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d0ef      	beq.n	801359a <SDMMC_GetCmdResp3+0x1e>
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80135c0:	2b00      	cmp	r3, #0
 80135c2:	d1ea      	bne.n	801359a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80135c8:	f003 0304 	and.w	r3, r3, #4
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d004      	beq.n	80135da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2204      	movs	r2, #4
 80135d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80135d6:	2304      	movs	r3, #4
 80135d8:	e003      	b.n	80135e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	22c5      	movs	r2, #197	; 0xc5
 80135de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80135e0:	2300      	movs	r3, #0
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3714      	adds	r7, #20
 80135e6:	46bd      	mov	sp, r7
 80135e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ec:	4770      	bx	lr
 80135ee:	bf00      	nop
 80135f0:	20000000 	.word	0x20000000
 80135f4:	10624dd3 	.word	0x10624dd3

080135f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b088      	sub	sp, #32
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	60f8      	str	r0, [r7, #12]
 8013600:	460b      	mov	r3, r1
 8013602:	607a      	str	r2, [r7, #4]
 8013604:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8013606:	4b35      	ldr	r3, [pc, #212]	; (80136dc <SDMMC_GetCmdResp6+0xe4>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	4a35      	ldr	r2, [pc, #212]	; (80136e0 <SDMMC_GetCmdResp6+0xe8>)
 801360c:	fba2 2303 	umull	r2, r3, r2, r3
 8013610:	0a5b      	lsrs	r3, r3, #9
 8013612:	f241 3288 	movw	r2, #5000	; 0x1388
 8013616:	fb02 f303 	mul.w	r3, r2, r3
 801361a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801361c:	69fb      	ldr	r3, [r7, #28]
 801361e:	1e5a      	subs	r2, r3, #1
 8013620:	61fa      	str	r2, [r7, #28]
 8013622:	2b00      	cmp	r3, #0
 8013624:	d102      	bne.n	801362c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013626:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801362a:	e052      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 801362c:	68fb      	ldr	r3, [r7, #12]
 801362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013630:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013632:	69bb      	ldr	r3, [r7, #24]
 8013634:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013638:	2b00      	cmp	r3, #0
 801363a:	d0ef      	beq.n	801361c <SDMMC_GetCmdResp6+0x24>
 801363c:	69bb      	ldr	r3, [r7, #24]
 801363e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013642:	2b00      	cmp	r3, #0
 8013644:	d1ea      	bne.n	801361c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801364a:	f003 0304 	and.w	r3, r3, #4
 801364e:	2b00      	cmp	r3, #0
 8013650:	d004      	beq.n	801365c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013652:	68fb      	ldr	r3, [r7, #12]
 8013654:	2204      	movs	r2, #4
 8013656:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013658:	2304      	movs	r3, #4
 801365a:	e03a      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013660:	f003 0301 	and.w	r3, r3, #1
 8013664:	2b00      	cmp	r3, #0
 8013666:	d004      	beq.n	8013672 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2201      	movs	r2, #1
 801366c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801366e:	2301      	movs	r3, #1
 8013670:	e02f      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8013672:	68f8      	ldr	r0, [r7, #12]
 8013674:	f7ff fba0 	bl	8012db8 <SDIO_GetCommandResponse>
 8013678:	4603      	mov	r3, r0
 801367a:	461a      	mov	r2, r3
 801367c:	7afb      	ldrb	r3, [r7, #11]
 801367e:	4293      	cmp	r3, r2
 8013680:	d001      	beq.n	8013686 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013682:	2301      	movs	r3, #1
 8013684:	e025      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	22c5      	movs	r2, #197	; 0xc5
 801368a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801368c:	2100      	movs	r1, #0
 801368e:	68f8      	ldr	r0, [r7, #12]
 8013690:	f7ff fb9f 	bl	8012dd2 <SDIO_GetResponse>
 8013694:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8013696:	697b      	ldr	r3, [r7, #20]
 8013698:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 801369c:	2b00      	cmp	r3, #0
 801369e:	d106      	bne.n	80136ae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	0c1b      	lsrs	r3, r3, #16
 80136a4:	b29a      	uxth	r2, r3
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80136aa:	2300      	movs	r3, #0
 80136ac:	e011      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d002      	beq.n	80136be <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80136b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80136bc:	e009      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80136be:	697b      	ldr	r3, [r7, #20]
 80136c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d002      	beq.n	80136ce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80136c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80136cc:	e001      	b.n	80136d2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80136ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3720      	adds	r7, #32
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
 80136da:	bf00      	nop
 80136dc:	20000000 	.word	0x20000000
 80136e0:	10624dd3 	.word	0x10624dd3

080136e4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80136e4:	b480      	push	{r7}
 80136e6:	b085      	sub	sp, #20
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80136ec:	4b22      	ldr	r3, [pc, #136]	; (8013778 <SDMMC_GetCmdResp7+0x94>)
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	4a22      	ldr	r2, [pc, #136]	; (801377c <SDMMC_GetCmdResp7+0x98>)
 80136f2:	fba2 2303 	umull	r2, r3, r2, r3
 80136f6:	0a5b      	lsrs	r3, r3, #9
 80136f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80136fc:	fb02 f303 	mul.w	r3, r2, r3
 8013700:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	1e5a      	subs	r2, r3, #1
 8013706:	60fa      	str	r2, [r7, #12]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d102      	bne.n	8013712 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801370c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013710:	e02c      	b.n	801376c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013716:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801371e:	2b00      	cmp	r3, #0
 8013720:	d0ef      	beq.n	8013702 <SDMMC_GetCmdResp7+0x1e>
 8013722:	68bb      	ldr	r3, [r7, #8]
 8013724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013728:	2b00      	cmp	r3, #0
 801372a:	d1ea      	bne.n	8013702 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013730:	f003 0304 	and.w	r3, r3, #4
 8013734:	2b00      	cmp	r3, #0
 8013736:	d004      	beq.n	8013742 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2204      	movs	r2, #4
 801373c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801373e:	2304      	movs	r3, #4
 8013740:	e014      	b.n	801376c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013746:	f003 0301 	and.w	r3, r3, #1
 801374a:	2b00      	cmp	r3, #0
 801374c:	d004      	beq.n	8013758 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	2201      	movs	r2, #1
 8013752:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013754:	2301      	movs	r3, #1
 8013756:	e009      	b.n	801376c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801375c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013760:	2b00      	cmp	r3, #0
 8013762:	d002      	beq.n	801376a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	2240      	movs	r2, #64	; 0x40
 8013768:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 801376a:	2300      	movs	r3, #0
  
}
 801376c:	4618      	mov	r0, r3
 801376e:	3714      	adds	r7, #20
 8013770:	46bd      	mov	sp, r7
 8013772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013776:	4770      	bx	lr
 8013778:	20000000 	.word	0x20000000
 801377c:	10624dd3 	.word	0x10624dd3

08013780 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013780:	b084      	sub	sp, #16
 8013782:	b580      	push	{r7, lr}
 8013784:	b084      	sub	sp, #16
 8013786:	af00      	add	r7, sp, #0
 8013788:	6078      	str	r0, [r7, #4]
 801378a:	f107 001c 	add.w	r0, r7, #28
 801378e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013794:	2b01      	cmp	r3, #1
 8013796:	d122      	bne.n	80137de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801379c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	68db      	ldr	r3, [r3, #12]
 80137a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80137ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80137b0:	687a      	ldr	r2, [r7, #4]
 80137b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	68db      	ldr	r3, [r3, #12]
 80137b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80137c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80137c2:	2b01      	cmp	r3, #1
 80137c4:	d105      	bne.n	80137d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	68db      	ldr	r3, [r3, #12]
 80137ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f001 fac6 	bl	8014d64 <USB_CoreReset>
 80137d8:	4603      	mov	r3, r0
 80137da:	73fb      	strb	r3, [r7, #15]
 80137dc:	e01a      	b.n	8013814 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	68db      	ldr	r3, [r3, #12]
 80137e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80137e6:	687b      	ldr	r3, [r7, #4]
 80137e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f001 faba 	bl	8014d64 <USB_CoreReset>
 80137f0:	4603      	mov	r3, r0
 80137f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80137f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d106      	bne.n	8013808 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80137fa:	687b      	ldr	r3, [r7, #4]
 80137fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8013802:	687b      	ldr	r3, [r7, #4]
 8013804:	639a      	str	r2, [r3, #56]	; 0x38
 8013806:	e005      	b.n	8013814 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801380c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8013814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013816:	2b01      	cmp	r3, #1
 8013818:	d10b      	bne.n	8013832 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	689b      	ldr	r3, [r3, #8]
 801381e:	f043 0206 	orr.w	r2, r3, #6
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	689b      	ldr	r3, [r3, #8]
 801382a:	f043 0220 	orr.w	r2, r3, #32
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013832:	7bfb      	ldrb	r3, [r7, #15]
}
 8013834:	4618      	mov	r0, r3
 8013836:	3710      	adds	r7, #16
 8013838:	46bd      	mov	sp, r7
 801383a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801383e:	b004      	add	sp, #16
 8013840:	4770      	bx	lr
	...

08013844 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013844:	b480      	push	{r7}
 8013846:	b087      	sub	sp, #28
 8013848:	af00      	add	r7, sp, #0
 801384a:	60f8      	str	r0, [r7, #12]
 801384c:	60b9      	str	r1, [r7, #8]
 801384e:	4613      	mov	r3, r2
 8013850:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013852:	79fb      	ldrb	r3, [r7, #7]
 8013854:	2b02      	cmp	r3, #2
 8013856:	d165      	bne.n	8013924 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013858:	68bb      	ldr	r3, [r7, #8]
 801385a:	4a41      	ldr	r2, [pc, #260]	; (8013960 <USB_SetTurnaroundTime+0x11c>)
 801385c:	4293      	cmp	r3, r2
 801385e:	d906      	bls.n	801386e <USB_SetTurnaroundTime+0x2a>
 8013860:	68bb      	ldr	r3, [r7, #8]
 8013862:	4a40      	ldr	r2, [pc, #256]	; (8013964 <USB_SetTurnaroundTime+0x120>)
 8013864:	4293      	cmp	r3, r2
 8013866:	d202      	bcs.n	801386e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013868:	230f      	movs	r3, #15
 801386a:	617b      	str	r3, [r7, #20]
 801386c:	e062      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801386e:	68bb      	ldr	r3, [r7, #8]
 8013870:	4a3c      	ldr	r2, [pc, #240]	; (8013964 <USB_SetTurnaroundTime+0x120>)
 8013872:	4293      	cmp	r3, r2
 8013874:	d306      	bcc.n	8013884 <USB_SetTurnaroundTime+0x40>
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	4a3b      	ldr	r2, [pc, #236]	; (8013968 <USB_SetTurnaroundTime+0x124>)
 801387a:	4293      	cmp	r3, r2
 801387c:	d202      	bcs.n	8013884 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801387e:	230e      	movs	r3, #14
 8013880:	617b      	str	r3, [r7, #20]
 8013882:	e057      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013884:	68bb      	ldr	r3, [r7, #8]
 8013886:	4a38      	ldr	r2, [pc, #224]	; (8013968 <USB_SetTurnaroundTime+0x124>)
 8013888:	4293      	cmp	r3, r2
 801388a:	d306      	bcc.n	801389a <USB_SetTurnaroundTime+0x56>
 801388c:	68bb      	ldr	r3, [r7, #8]
 801388e:	4a37      	ldr	r2, [pc, #220]	; (801396c <USB_SetTurnaroundTime+0x128>)
 8013890:	4293      	cmp	r3, r2
 8013892:	d202      	bcs.n	801389a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013894:	230d      	movs	r3, #13
 8013896:	617b      	str	r3, [r7, #20]
 8013898:	e04c      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	4a33      	ldr	r2, [pc, #204]	; (801396c <USB_SetTurnaroundTime+0x128>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d306      	bcc.n	80138b0 <USB_SetTurnaroundTime+0x6c>
 80138a2:	68bb      	ldr	r3, [r7, #8]
 80138a4:	4a32      	ldr	r2, [pc, #200]	; (8013970 <USB_SetTurnaroundTime+0x12c>)
 80138a6:	4293      	cmp	r3, r2
 80138a8:	d802      	bhi.n	80138b0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80138aa:	230c      	movs	r3, #12
 80138ac:	617b      	str	r3, [r7, #20]
 80138ae:	e041      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	4a2f      	ldr	r2, [pc, #188]	; (8013970 <USB_SetTurnaroundTime+0x12c>)
 80138b4:	4293      	cmp	r3, r2
 80138b6:	d906      	bls.n	80138c6 <USB_SetTurnaroundTime+0x82>
 80138b8:	68bb      	ldr	r3, [r7, #8]
 80138ba:	4a2e      	ldr	r2, [pc, #184]	; (8013974 <USB_SetTurnaroundTime+0x130>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d802      	bhi.n	80138c6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80138c0:	230b      	movs	r3, #11
 80138c2:	617b      	str	r3, [r7, #20]
 80138c4:	e036      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80138c6:	68bb      	ldr	r3, [r7, #8]
 80138c8:	4a2a      	ldr	r2, [pc, #168]	; (8013974 <USB_SetTurnaroundTime+0x130>)
 80138ca:	4293      	cmp	r3, r2
 80138cc:	d906      	bls.n	80138dc <USB_SetTurnaroundTime+0x98>
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	4a29      	ldr	r2, [pc, #164]	; (8013978 <USB_SetTurnaroundTime+0x134>)
 80138d2:	4293      	cmp	r3, r2
 80138d4:	d802      	bhi.n	80138dc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80138d6:	230a      	movs	r3, #10
 80138d8:	617b      	str	r3, [r7, #20]
 80138da:	e02b      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80138dc:	68bb      	ldr	r3, [r7, #8]
 80138de:	4a26      	ldr	r2, [pc, #152]	; (8013978 <USB_SetTurnaroundTime+0x134>)
 80138e0:	4293      	cmp	r3, r2
 80138e2:	d906      	bls.n	80138f2 <USB_SetTurnaroundTime+0xae>
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	4a25      	ldr	r2, [pc, #148]	; (801397c <USB_SetTurnaroundTime+0x138>)
 80138e8:	4293      	cmp	r3, r2
 80138ea:	d202      	bcs.n	80138f2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80138ec:	2309      	movs	r3, #9
 80138ee:	617b      	str	r3, [r7, #20]
 80138f0:	e020      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80138f2:	68bb      	ldr	r3, [r7, #8]
 80138f4:	4a21      	ldr	r2, [pc, #132]	; (801397c <USB_SetTurnaroundTime+0x138>)
 80138f6:	4293      	cmp	r3, r2
 80138f8:	d306      	bcc.n	8013908 <USB_SetTurnaroundTime+0xc4>
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	4a20      	ldr	r2, [pc, #128]	; (8013980 <USB_SetTurnaroundTime+0x13c>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d802      	bhi.n	8013908 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013902:	2308      	movs	r3, #8
 8013904:	617b      	str	r3, [r7, #20]
 8013906:	e015      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	4a1d      	ldr	r2, [pc, #116]	; (8013980 <USB_SetTurnaroundTime+0x13c>)
 801390c:	4293      	cmp	r3, r2
 801390e:	d906      	bls.n	801391e <USB_SetTurnaroundTime+0xda>
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	4a1c      	ldr	r2, [pc, #112]	; (8013984 <USB_SetTurnaroundTime+0x140>)
 8013914:	4293      	cmp	r3, r2
 8013916:	d202      	bcs.n	801391e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013918:	2307      	movs	r3, #7
 801391a:	617b      	str	r3, [r7, #20]
 801391c:	e00a      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 801391e:	2306      	movs	r3, #6
 8013920:	617b      	str	r3, [r7, #20]
 8013922:	e007      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013924:	79fb      	ldrb	r3, [r7, #7]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d102      	bne.n	8013930 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801392a:	2309      	movs	r3, #9
 801392c:	617b      	str	r3, [r7, #20]
 801392e:	e001      	b.n	8013934 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013930:	2309      	movs	r3, #9
 8013932:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	68db      	ldr	r3, [r3, #12]
 8013938:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	68da      	ldr	r2, [r3, #12]
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	029b      	lsls	r3, r3, #10
 8013948:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 801394c:	431a      	orrs	r2, r3
 801394e:	68fb      	ldr	r3, [r7, #12]
 8013950:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013952:	2300      	movs	r3, #0
}
 8013954:	4618      	mov	r0, r3
 8013956:	371c      	adds	r7, #28
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr
 8013960:	00d8acbf 	.word	0x00d8acbf
 8013964:	00e4e1c0 	.word	0x00e4e1c0
 8013968:	00f42400 	.word	0x00f42400
 801396c:	01067380 	.word	0x01067380
 8013970:	011a499f 	.word	0x011a499f
 8013974:	01312cff 	.word	0x01312cff
 8013978:	014ca43f 	.word	0x014ca43f
 801397c:	016e3600 	.word	0x016e3600
 8013980:	01a6ab1f 	.word	0x01a6ab1f
 8013984:	01e84800 	.word	0x01e84800

08013988 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013988:	b480      	push	{r7}
 801398a:	b083      	sub	sp, #12
 801398c:	af00      	add	r7, sp, #0
 801398e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013990:	687b      	ldr	r3, [r7, #4]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	f043 0201 	orr.w	r2, r3, #1
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	370c      	adds	r7, #12
 80139a2:	46bd      	mov	sp, r7
 80139a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139a8:	4770      	bx	lr

080139aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80139aa:	b480      	push	{r7}
 80139ac:	b083      	sub	sp, #12
 80139ae:	af00      	add	r7, sp, #0
 80139b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80139b2:	687b      	ldr	r3, [r7, #4]
 80139b4:	689b      	ldr	r3, [r3, #8]
 80139b6:	f023 0201 	bic.w	r2, r3, #1
 80139ba:	687b      	ldr	r3, [r7, #4]
 80139bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80139be:	2300      	movs	r3, #0
}
 80139c0:	4618      	mov	r0, r3
 80139c2:	370c      	adds	r7, #12
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr

080139cc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b082      	sub	sp, #8
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	460b      	mov	r3, r1
 80139d6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80139e4:	78fb      	ldrb	r3, [r7, #3]
 80139e6:	2b01      	cmp	r3, #1
 80139e8:	d106      	bne.n	80139f8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	68db      	ldr	r3, [r3, #12]
 80139ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	60da      	str	r2, [r3, #12]
 80139f6:	e00b      	b.n	8013a10 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80139f8:	78fb      	ldrb	r3, [r7, #3]
 80139fa:	2b00      	cmp	r3, #0
 80139fc:	d106      	bne.n	8013a0c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	68db      	ldr	r3, [r3, #12]
 8013a02:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	60da      	str	r2, [r3, #12]
 8013a0a:	e001      	b.n	8013a10 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8013a0c:	2301      	movs	r3, #1
 8013a0e:	e003      	b.n	8013a18 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013a10:	2032      	movs	r0, #50	; 0x32
 8013a12:	f7fa f957 	bl	800dcc4 <HAL_Delay>

  return HAL_OK;
 8013a16:	2300      	movs	r3, #0
}
 8013a18:	4618      	mov	r0, r3
 8013a1a:	3708      	adds	r7, #8
 8013a1c:	46bd      	mov	sp, r7
 8013a1e:	bd80      	pop	{r7, pc}

08013a20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013a20:	b084      	sub	sp, #16
 8013a22:	b580      	push	{r7, lr}
 8013a24:	b086      	sub	sp, #24
 8013a26:	af00      	add	r7, sp, #0
 8013a28:	6078      	str	r0, [r7, #4]
 8013a2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013a2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013a32:	2300      	movs	r3, #0
 8013a34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	613b      	str	r3, [r7, #16]
 8013a3e:	e009      	b.n	8013a54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013a40:	687a      	ldr	r2, [r7, #4]
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	3340      	adds	r3, #64	; 0x40
 8013a46:	009b      	lsls	r3, r3, #2
 8013a48:	4413      	add	r3, r2
 8013a4a:	2200      	movs	r2, #0
 8013a4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013a4e:	693b      	ldr	r3, [r7, #16]
 8013a50:	3301      	adds	r3, #1
 8013a52:	613b      	str	r3, [r7, #16]
 8013a54:	693b      	ldr	r3, [r7, #16]
 8013a56:	2b0e      	cmp	r3, #14
 8013a58:	d9f2      	bls.n	8013a40 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	d11c      	bne.n	8013a9a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013a66:	685b      	ldr	r3, [r3, #4]
 8013a68:	68fa      	ldr	r2, [r7, #12]
 8013a6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013a6e:	f043 0302 	orr.w	r3, r3, #2
 8013a72:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a78:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a84:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a90:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	639a      	str	r2, [r3, #56]	; 0x38
 8013a98:	e00b      	b.n	8013ab2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a9e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aaa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013ab2:	68fb      	ldr	r3, [r7, #12]
 8013ab4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ab8:	461a      	mov	r2, r3
 8013aba:	2300      	movs	r3, #0
 8013abc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ac4:	4619      	mov	r1, r3
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013acc:	461a      	mov	r2, r3
 8013ace:	680b      	ldr	r3, [r1, #0]
 8013ad0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad4:	2b01      	cmp	r3, #1
 8013ad6:	d10c      	bne.n	8013af2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d104      	bne.n	8013ae8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013ade:	2100      	movs	r1, #0
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f000 f949 	bl	8013d78 <USB_SetDevSpeed>
 8013ae6:	e008      	b.n	8013afa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013ae8:	2101      	movs	r1, #1
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f000 f944 	bl	8013d78 <USB_SetDevSpeed>
 8013af0:	e003      	b.n	8013afa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013af2:	2103      	movs	r1, #3
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f000 f93f 	bl	8013d78 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013afa:	2110      	movs	r1, #16
 8013afc:	6878      	ldr	r0, [r7, #4]
 8013afe:	f000 f8f3 	bl	8013ce8 <USB_FlushTxFifo>
 8013b02:	4603      	mov	r3, r0
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d001      	beq.n	8013b0c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013b08:	2301      	movs	r3, #1
 8013b0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013b0c:	6878      	ldr	r0, [r7, #4]
 8013b0e:	f000 f911 	bl	8013d34 <USB_FlushRxFifo>
 8013b12:	4603      	mov	r3, r0
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d001      	beq.n	8013b1c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013b18:	2301      	movs	r3, #1
 8013b1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b22:	461a      	mov	r2, r3
 8013b24:	2300      	movs	r3, #0
 8013b26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b2e:	461a      	mov	r2, r3
 8013b30:	2300      	movs	r3, #0
 8013b32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013b34:	68fb      	ldr	r3, [r7, #12]
 8013b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b3a:	461a      	mov	r2, r3
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013b40:	2300      	movs	r3, #0
 8013b42:	613b      	str	r3, [r7, #16]
 8013b44:	e043      	b.n	8013bce <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	015a      	lsls	r2, r3, #5
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	4413      	add	r3, r2
 8013b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013b5c:	d118      	bne.n	8013b90 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	2b00      	cmp	r3, #0
 8013b62:	d10a      	bne.n	8013b7a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013b64:	693b      	ldr	r3, [r7, #16]
 8013b66:	015a      	lsls	r2, r3, #5
 8013b68:	68fb      	ldr	r3, [r7, #12]
 8013b6a:	4413      	add	r3, r2
 8013b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b70:	461a      	mov	r2, r3
 8013b72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013b76:	6013      	str	r3, [r2, #0]
 8013b78:	e013      	b.n	8013ba2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013b7a:	693b      	ldr	r3, [r7, #16]
 8013b7c:	015a      	lsls	r2, r3, #5
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	4413      	add	r3, r2
 8013b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b86:	461a      	mov	r2, r3
 8013b88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013b8c:	6013      	str	r3, [r2, #0]
 8013b8e:	e008      	b.n	8013ba2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013b90:	693b      	ldr	r3, [r7, #16]
 8013b92:	015a      	lsls	r2, r3, #5
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	4413      	add	r3, r2
 8013b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	015a      	lsls	r2, r3, #5
 8013ba6:	68fb      	ldr	r3, [r7, #12]
 8013ba8:	4413      	add	r3, r2
 8013baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bae:	461a      	mov	r2, r3
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013bb4:	693b      	ldr	r3, [r7, #16]
 8013bb6:	015a      	lsls	r2, r3, #5
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	4413      	add	r3, r2
 8013bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013bc6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	3301      	adds	r3, #1
 8013bcc:	613b      	str	r3, [r7, #16]
 8013bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013bd0:	693a      	ldr	r2, [r7, #16]
 8013bd2:	429a      	cmp	r2, r3
 8013bd4:	d3b7      	bcc.n	8013b46 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	613b      	str	r3, [r7, #16]
 8013bda:	e043      	b.n	8013c64 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	015a      	lsls	r2, r3, #5
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	4413      	add	r3, r2
 8013be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013be8:	681b      	ldr	r3, [r3, #0]
 8013bea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013bf2:	d118      	bne.n	8013c26 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8013bf4:	693b      	ldr	r3, [r7, #16]
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d10a      	bne.n	8013c10 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	015a      	lsls	r2, r3, #5
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	4413      	add	r3, r2
 8013c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c06:	461a      	mov	r2, r3
 8013c08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013c0c:	6013      	str	r3, [r2, #0]
 8013c0e:	e013      	b.n	8013c38 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013c10:	693b      	ldr	r3, [r7, #16]
 8013c12:	015a      	lsls	r2, r3, #5
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	4413      	add	r3, r2
 8013c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c1c:	461a      	mov	r2, r3
 8013c1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013c22:	6013      	str	r3, [r2, #0]
 8013c24:	e008      	b.n	8013c38 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013c26:	693b      	ldr	r3, [r7, #16]
 8013c28:	015a      	lsls	r2, r3, #5
 8013c2a:	68fb      	ldr	r3, [r7, #12]
 8013c2c:	4413      	add	r3, r2
 8013c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c32:	461a      	mov	r2, r3
 8013c34:	2300      	movs	r3, #0
 8013c36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	015a      	lsls	r2, r3, #5
 8013c3c:	68fb      	ldr	r3, [r7, #12]
 8013c3e:	4413      	add	r3, r2
 8013c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c44:	461a      	mov	r2, r3
 8013c46:	2300      	movs	r3, #0
 8013c48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013c4a:	693b      	ldr	r3, [r7, #16]
 8013c4c:	015a      	lsls	r2, r3, #5
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	4413      	add	r3, r2
 8013c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c56:	461a      	mov	r2, r3
 8013c58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013c5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013c5e:	693b      	ldr	r3, [r7, #16]
 8013c60:	3301      	adds	r3, #1
 8013c62:	613b      	str	r3, [r7, #16]
 8013c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c66:	693a      	ldr	r2, [r7, #16]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d3b7      	bcc.n	8013bdc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c72:	691b      	ldr	r3, [r3, #16]
 8013c74:	68fa      	ldr	r2, [r7, #12]
 8013c76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013c7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	2200      	movs	r2, #0
 8013c84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013c8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d105      	bne.n	8013ca0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	699b      	ldr	r3, [r3, #24]
 8013c98:	f043 0210 	orr.w	r2, r3, #16
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	699a      	ldr	r2, [r3, #24]
 8013ca4:	4b0f      	ldr	r3, [pc, #60]	; (8013ce4 <USB_DevInit+0x2c4>)
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	687a      	ldr	r2, [r7, #4]
 8013caa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013cac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d005      	beq.n	8013cbe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	699b      	ldr	r3, [r3, #24]
 8013cb6:	f043 0208 	orr.w	r2, r3, #8
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013cc0:	2b01      	cmp	r3, #1
 8013cc2:	d107      	bne.n	8013cd4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013cc4:	687b      	ldr	r3, [r7, #4]
 8013cc6:	699b      	ldr	r3, [r3, #24]
 8013cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013ccc:	f043 0304 	orr.w	r3, r3, #4
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ce0:	b004      	add	sp, #16
 8013ce2:	4770      	bx	lr
 8013ce4:	803c3800 	.word	0x803c3800

08013ce8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ce8:	b480      	push	{r7}
 8013cea:	b085      	sub	sp, #20
 8013cec:	af00      	add	r7, sp, #0
 8013cee:	6078      	str	r0, [r7, #4]
 8013cf0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013cf6:	683b      	ldr	r3, [r7, #0]
 8013cf8:	019b      	lsls	r3, r3, #6
 8013cfa:	f043 0220 	orr.w	r2, r3, #32
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013d02:	68fb      	ldr	r3, [r7, #12]
 8013d04:	3301      	adds	r3, #1
 8013d06:	60fb      	str	r3, [r7, #12]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	4a09      	ldr	r2, [pc, #36]	; (8013d30 <USB_FlushTxFifo+0x48>)
 8013d0c:	4293      	cmp	r3, r2
 8013d0e:	d901      	bls.n	8013d14 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013d10:	2303      	movs	r3, #3
 8013d12:	e006      	b.n	8013d22 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013d14:	687b      	ldr	r3, [r7, #4]
 8013d16:	691b      	ldr	r3, [r3, #16]
 8013d18:	f003 0320 	and.w	r3, r3, #32
 8013d1c:	2b20      	cmp	r3, #32
 8013d1e:	d0f0      	beq.n	8013d02 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013d20:	2300      	movs	r3, #0
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3714      	adds	r7, #20
 8013d26:	46bd      	mov	sp, r7
 8013d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d2c:	4770      	bx	lr
 8013d2e:	bf00      	nop
 8013d30:	00030d40 	.word	0x00030d40

08013d34 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013d34:	b480      	push	{r7}
 8013d36:	b085      	sub	sp, #20
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	2210      	movs	r2, #16
 8013d44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	3301      	adds	r3, #1
 8013d4a:	60fb      	str	r3, [r7, #12]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	4a09      	ldr	r2, [pc, #36]	; (8013d74 <USB_FlushRxFifo+0x40>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d901      	bls.n	8013d58 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013d54:	2303      	movs	r3, #3
 8013d56:	e006      	b.n	8013d66 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	691b      	ldr	r3, [r3, #16]
 8013d5c:	f003 0310 	and.w	r3, r3, #16
 8013d60:	2b10      	cmp	r3, #16
 8013d62:	d0f0      	beq.n	8013d46 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013d64:	2300      	movs	r3, #0
}
 8013d66:	4618      	mov	r0, r3
 8013d68:	3714      	adds	r7, #20
 8013d6a:	46bd      	mov	sp, r7
 8013d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d70:	4770      	bx	lr
 8013d72:	bf00      	nop
 8013d74:	00030d40 	.word	0x00030d40

08013d78 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013d78:	b480      	push	{r7}
 8013d7a:	b085      	sub	sp, #20
 8013d7c:	af00      	add	r7, sp, #0
 8013d7e:	6078      	str	r0, [r7, #4]
 8013d80:	460b      	mov	r3, r1
 8013d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d8e:	681a      	ldr	r2, [r3, #0]
 8013d90:	78fb      	ldrb	r3, [r7, #3]
 8013d92:	68f9      	ldr	r1, [r7, #12]
 8013d94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d98:	4313      	orrs	r3, r2
 8013d9a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013d9c:	2300      	movs	r3, #0
}
 8013d9e:	4618      	mov	r0, r3
 8013da0:	3714      	adds	r7, #20
 8013da2:	46bd      	mov	sp, r7
 8013da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013da8:	4770      	bx	lr

08013daa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013daa:	b480      	push	{r7}
 8013dac:	b087      	sub	sp, #28
 8013dae:	af00      	add	r7, sp, #0
 8013db0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013db6:	693b      	ldr	r3, [r7, #16]
 8013db8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dbc:	689b      	ldr	r3, [r3, #8]
 8013dbe:	f003 0306 	and.w	r3, r3, #6
 8013dc2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013dc4:	68fb      	ldr	r3, [r7, #12]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d102      	bne.n	8013dd0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013dca:	2300      	movs	r3, #0
 8013dcc:	75fb      	strb	r3, [r7, #23]
 8013dce:	e00a      	b.n	8013de6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b02      	cmp	r3, #2
 8013dd4:	d002      	beq.n	8013ddc <USB_GetDevSpeed+0x32>
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	2b06      	cmp	r3, #6
 8013dda:	d102      	bne.n	8013de2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013ddc:	2302      	movs	r3, #2
 8013dde:	75fb      	strb	r3, [r7, #23]
 8013de0:	e001      	b.n	8013de6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013de2:	230f      	movs	r3, #15
 8013de4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013de8:	4618      	mov	r0, r3
 8013dea:	371c      	adds	r7, #28
 8013dec:	46bd      	mov	sp, r7
 8013dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013df2:	4770      	bx	lr

08013df4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	781b      	ldrb	r3, [r3, #0]
 8013e06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013e08:	683b      	ldr	r3, [r7, #0]
 8013e0a:	785b      	ldrb	r3, [r3, #1]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d13a      	bne.n	8013e86 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013e10:	68fb      	ldr	r3, [r7, #12]
 8013e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e16:	69da      	ldr	r2, [r3, #28]
 8013e18:	683b      	ldr	r3, [r7, #0]
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	f003 030f 	and.w	r3, r3, #15
 8013e20:	2101      	movs	r1, #1
 8013e22:	fa01 f303 	lsl.w	r3, r1, r3
 8013e26:	b29b      	uxth	r3, r3
 8013e28:	68f9      	ldr	r1, [r7, #12]
 8013e2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013e2e:	4313      	orrs	r3, r2
 8013e30:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013e32:	68bb      	ldr	r3, [r7, #8]
 8013e34:	015a      	lsls	r2, r3, #5
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d155      	bne.n	8013ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e48:	68bb      	ldr	r3, [r7, #8]
 8013e4a:	015a      	lsls	r2, r3, #5
 8013e4c:	68fb      	ldr	r3, [r7, #12]
 8013e4e:	4413      	add	r3, r2
 8013e50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e54:	681a      	ldr	r2, [r3, #0]
 8013e56:	683b      	ldr	r3, [r7, #0]
 8013e58:	689b      	ldr	r3, [r3, #8]
 8013e5a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013e5e:	683b      	ldr	r3, [r7, #0]
 8013e60:	78db      	ldrb	r3, [r3, #3]
 8013e62:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e64:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013e66:	68bb      	ldr	r3, [r7, #8]
 8013e68:	059b      	lsls	r3, r3, #22
 8013e6a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013e6c:	4313      	orrs	r3, r2
 8013e6e:	68ba      	ldr	r2, [r7, #8]
 8013e70:	0151      	lsls	r1, r2, #5
 8013e72:	68fa      	ldr	r2, [r7, #12]
 8013e74:	440a      	add	r2, r1
 8013e76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013e82:	6013      	str	r3, [r2, #0]
 8013e84:	e036      	b.n	8013ef4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013e86:	68fb      	ldr	r3, [r7, #12]
 8013e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e8c:	69da      	ldr	r2, [r3, #28]
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	781b      	ldrb	r3, [r3, #0]
 8013e92:	f003 030f 	and.w	r3, r3, #15
 8013e96:	2101      	movs	r1, #1
 8013e98:	fa01 f303 	lsl.w	r3, r1, r3
 8013e9c:	041b      	lsls	r3, r3, #16
 8013e9e:	68f9      	ldr	r1, [r7, #12]
 8013ea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013ea4:	4313      	orrs	r3, r2
 8013ea6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013ea8:	68bb      	ldr	r3, [r7, #8]
 8013eaa:	015a      	lsls	r2, r3, #5
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	4413      	add	r3, r2
 8013eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d11a      	bne.n	8013ef4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013ebe:	68bb      	ldr	r3, [r7, #8]
 8013ec0:	015a      	lsls	r2, r3, #5
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	4413      	add	r3, r2
 8013ec6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013eca:	681a      	ldr	r2, [r3, #0]
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	689b      	ldr	r3, [r3, #8]
 8013ed0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	78db      	ldrb	r3, [r3, #3]
 8013ed8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013eda:	430b      	orrs	r3, r1
 8013edc:	4313      	orrs	r3, r2
 8013ede:	68ba      	ldr	r2, [r7, #8]
 8013ee0:	0151      	lsls	r1, r2, #5
 8013ee2:	68fa      	ldr	r2, [r7, #12]
 8013ee4:	440a      	add	r2, r1
 8013ee6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013eea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013eee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013ef2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013ef4:	2300      	movs	r3, #0
}
 8013ef6:	4618      	mov	r0, r3
 8013ef8:	3714      	adds	r7, #20
 8013efa:	46bd      	mov	sp, r7
 8013efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f00:	4770      	bx	lr
	...

08013f04 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013f04:	b480      	push	{r7}
 8013f06:	b085      	sub	sp, #20
 8013f08:	af00      	add	r7, sp, #0
 8013f0a:	6078      	str	r0, [r7, #4]
 8013f0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f0e:	687b      	ldr	r3, [r7, #4]
 8013f10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	781b      	ldrb	r3, [r3, #0]
 8013f16:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013f18:	683b      	ldr	r3, [r7, #0]
 8013f1a:	785b      	ldrb	r3, [r3, #1]
 8013f1c:	2b01      	cmp	r3, #1
 8013f1e:	d161      	bne.n	8013fe4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013f20:	68bb      	ldr	r3, [r7, #8]
 8013f22:	015a      	lsls	r2, r3, #5
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	4413      	add	r3, r2
 8013f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013f32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013f36:	d11f      	bne.n	8013f78 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	015a      	lsls	r2, r3, #5
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	4413      	add	r3, r2
 8013f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68ba      	ldr	r2, [r7, #8]
 8013f48:	0151      	lsls	r1, r2, #5
 8013f4a:	68fa      	ldr	r2, [r7, #12]
 8013f4c:	440a      	add	r2, r1
 8013f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013f56:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013f58:	68bb      	ldr	r3, [r7, #8]
 8013f5a:	015a      	lsls	r2, r3, #5
 8013f5c:	68fb      	ldr	r3, [r7, #12]
 8013f5e:	4413      	add	r3, r2
 8013f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	68ba      	ldr	r2, [r7, #8]
 8013f68:	0151      	lsls	r1, r2, #5
 8013f6a:	68fa      	ldr	r2, [r7, #12]
 8013f6c:	440a      	add	r2, r1
 8013f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013f76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013f78:	68fb      	ldr	r3, [r7, #12]
 8013f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013f80:	683b      	ldr	r3, [r7, #0]
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	f003 030f 	and.w	r3, r3, #15
 8013f88:	2101      	movs	r1, #1
 8013f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8013f8e:	b29b      	uxth	r3, r3
 8013f90:	43db      	mvns	r3, r3
 8013f92:	68f9      	ldr	r1, [r7, #12]
 8013f94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f98:	4013      	ands	r3, r2
 8013f9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013f9c:	68fb      	ldr	r3, [r7, #12]
 8013f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa2:	69da      	ldr	r2, [r3, #28]
 8013fa4:	683b      	ldr	r3, [r7, #0]
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	f003 030f 	and.w	r3, r3, #15
 8013fac:	2101      	movs	r1, #1
 8013fae:	fa01 f303 	lsl.w	r3, r1, r3
 8013fb2:	b29b      	uxth	r3, r3
 8013fb4:	43db      	mvns	r3, r3
 8013fb6:	68f9      	ldr	r1, [r7, #12]
 8013fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013fbc:	4013      	ands	r3, r2
 8013fbe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013fc0:	68bb      	ldr	r3, [r7, #8]
 8013fc2:	015a      	lsls	r2, r3, #5
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	4413      	add	r3, r2
 8013fc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fcc:	681a      	ldr	r2, [r3, #0]
 8013fce:	68bb      	ldr	r3, [r7, #8]
 8013fd0:	0159      	lsls	r1, r3, #5
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	440b      	add	r3, r1
 8013fd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fda:	4619      	mov	r1, r3
 8013fdc:	4b35      	ldr	r3, [pc, #212]	; (80140b4 <USB_DeactivateEndpoint+0x1b0>)
 8013fde:	4013      	ands	r3, r2
 8013fe0:	600b      	str	r3, [r1, #0]
 8013fe2:	e060      	b.n	80140a6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	015a      	lsls	r2, r3, #5
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	4413      	add	r3, r2
 8013fec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013ff0:	681b      	ldr	r3, [r3, #0]
 8013ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013ffa:	d11f      	bne.n	801403c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013ffc:	68bb      	ldr	r3, [r7, #8]
 8013ffe:	015a      	lsls	r2, r3, #5
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	4413      	add	r3, r2
 8014004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	68ba      	ldr	r2, [r7, #8]
 801400c:	0151      	lsls	r1, r2, #5
 801400e:	68fa      	ldr	r2, [r7, #12]
 8014010:	440a      	add	r2, r1
 8014012:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801401a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801401c:	68bb      	ldr	r3, [r7, #8]
 801401e:	015a      	lsls	r2, r3, #5
 8014020:	68fb      	ldr	r3, [r7, #12]
 8014022:	4413      	add	r3, r2
 8014024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	68ba      	ldr	r2, [r7, #8]
 801402c:	0151      	lsls	r1, r2, #5
 801402e:	68fa      	ldr	r2, [r7, #12]
 8014030:	440a      	add	r2, r1
 8014032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801403a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	f003 030f 	and.w	r3, r3, #15
 801404c:	2101      	movs	r1, #1
 801404e:	fa01 f303 	lsl.w	r3, r1, r3
 8014052:	041b      	lsls	r3, r3, #16
 8014054:	43db      	mvns	r3, r3
 8014056:	68f9      	ldr	r1, [r7, #12]
 8014058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801405c:	4013      	ands	r3, r2
 801405e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014066:	69da      	ldr	r2, [r3, #28]
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	781b      	ldrb	r3, [r3, #0]
 801406c:	f003 030f 	and.w	r3, r3, #15
 8014070:	2101      	movs	r1, #1
 8014072:	fa01 f303 	lsl.w	r3, r1, r3
 8014076:	041b      	lsls	r3, r3, #16
 8014078:	43db      	mvns	r3, r3
 801407a:	68f9      	ldr	r1, [r7, #12]
 801407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014080:	4013      	ands	r3, r2
 8014082:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8014084:	68bb      	ldr	r3, [r7, #8]
 8014086:	015a      	lsls	r2, r3, #5
 8014088:	68fb      	ldr	r3, [r7, #12]
 801408a:	4413      	add	r3, r2
 801408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014090:	681a      	ldr	r2, [r3, #0]
 8014092:	68bb      	ldr	r3, [r7, #8]
 8014094:	0159      	lsls	r1, r3, #5
 8014096:	68fb      	ldr	r3, [r7, #12]
 8014098:	440b      	add	r3, r1
 801409a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409e:	4619      	mov	r1, r3
 80140a0:	4b05      	ldr	r3, [pc, #20]	; (80140b8 <USB_DeactivateEndpoint+0x1b4>)
 80140a2:	4013      	ands	r3, r2
 80140a4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80140a6:	2300      	movs	r3, #0
}
 80140a8:	4618      	mov	r0, r3
 80140aa:	3714      	adds	r7, #20
 80140ac:	46bd      	mov	sp, r7
 80140ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140b2:	4770      	bx	lr
 80140b4:	ec337800 	.word	0xec337800
 80140b8:	eff37800 	.word	0xeff37800

080140bc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08a      	sub	sp, #40	; 0x28
 80140c0:	af02      	add	r7, sp, #8
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	60b9      	str	r1, [r7, #8]
 80140c6:	4613      	mov	r3, r2
 80140c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140ca:	68fb      	ldr	r3, [r7, #12]
 80140cc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80140ce:	68bb      	ldr	r3, [r7, #8]
 80140d0:	781b      	ldrb	r3, [r3, #0]
 80140d2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	785b      	ldrb	r3, [r3, #1]
 80140d8:	2b01      	cmp	r3, #1
 80140da:	f040 815c 	bne.w	8014396 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	695b      	ldr	r3, [r3, #20]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d132      	bne.n	801414c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80140e6:	69bb      	ldr	r3, [r7, #24]
 80140e8:	015a      	lsls	r2, r3, #5
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	4413      	add	r3, r2
 80140ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140f2:	691b      	ldr	r3, [r3, #16]
 80140f4:	69ba      	ldr	r2, [r7, #24]
 80140f6:	0151      	lsls	r1, r2, #5
 80140f8:	69fa      	ldr	r2, [r7, #28]
 80140fa:	440a      	add	r2, r1
 80140fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801410a:	69bb      	ldr	r3, [r7, #24]
 801410c:	015a      	lsls	r2, r3, #5
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	4413      	add	r3, r2
 8014112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014116:	691b      	ldr	r3, [r3, #16]
 8014118:	69ba      	ldr	r2, [r7, #24]
 801411a:	0151      	lsls	r1, r2, #5
 801411c:	69fa      	ldr	r2, [r7, #28]
 801411e:	440a      	add	r2, r1
 8014120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	015a      	lsls	r2, r3, #5
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	4413      	add	r3, r2
 8014132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014136:	691b      	ldr	r3, [r3, #16]
 8014138:	69ba      	ldr	r2, [r7, #24]
 801413a:	0151      	lsls	r1, r2, #5
 801413c:	69fa      	ldr	r2, [r7, #28]
 801413e:	440a      	add	r2, r1
 8014140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014144:	0cdb      	lsrs	r3, r3, #19
 8014146:	04db      	lsls	r3, r3, #19
 8014148:	6113      	str	r3, [r2, #16]
 801414a:	e074      	b.n	8014236 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801414c:	69bb      	ldr	r3, [r7, #24]
 801414e:	015a      	lsls	r2, r3, #5
 8014150:	69fb      	ldr	r3, [r7, #28]
 8014152:	4413      	add	r3, r2
 8014154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014158:	691b      	ldr	r3, [r3, #16]
 801415a:	69ba      	ldr	r2, [r7, #24]
 801415c:	0151      	lsls	r1, r2, #5
 801415e:	69fa      	ldr	r2, [r7, #28]
 8014160:	440a      	add	r2, r1
 8014162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014166:	0cdb      	lsrs	r3, r3, #19
 8014168:	04db      	lsls	r3, r3, #19
 801416a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801416c:	69bb      	ldr	r3, [r7, #24]
 801416e:	015a      	lsls	r2, r3, #5
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	4413      	add	r3, r2
 8014174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014178:	691b      	ldr	r3, [r3, #16]
 801417a:	69ba      	ldr	r2, [r7, #24]
 801417c:	0151      	lsls	r1, r2, #5
 801417e:	69fa      	ldr	r2, [r7, #28]
 8014180:	440a      	add	r2, r1
 8014182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801418a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801418e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014190:	69bb      	ldr	r3, [r7, #24]
 8014192:	015a      	lsls	r2, r3, #5
 8014194:	69fb      	ldr	r3, [r7, #28]
 8014196:	4413      	add	r3, r2
 8014198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801419c:	691a      	ldr	r2, [r3, #16]
 801419e:	68bb      	ldr	r3, [r7, #8]
 80141a0:	6959      	ldr	r1, [r3, #20]
 80141a2:	68bb      	ldr	r3, [r7, #8]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	440b      	add	r3, r1
 80141a8:	1e59      	subs	r1, r3, #1
 80141aa:	68bb      	ldr	r3, [r7, #8]
 80141ac:	689b      	ldr	r3, [r3, #8]
 80141ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80141b2:	04d9      	lsls	r1, r3, #19
 80141b4:	4b9d      	ldr	r3, [pc, #628]	; (801442c <USB_EPStartXfer+0x370>)
 80141b6:	400b      	ands	r3, r1
 80141b8:	69b9      	ldr	r1, [r7, #24]
 80141ba:	0148      	lsls	r0, r1, #5
 80141bc:	69f9      	ldr	r1, [r7, #28]
 80141be:	4401      	add	r1, r0
 80141c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80141c4:	4313      	orrs	r3, r2
 80141c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80141c8:	69bb      	ldr	r3, [r7, #24]
 80141ca:	015a      	lsls	r2, r3, #5
 80141cc:	69fb      	ldr	r3, [r7, #28]
 80141ce:	4413      	add	r3, r2
 80141d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141d4:	691a      	ldr	r2, [r3, #16]
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	695b      	ldr	r3, [r3, #20]
 80141da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80141de:	69b9      	ldr	r1, [r7, #24]
 80141e0:	0148      	lsls	r0, r1, #5
 80141e2:	69f9      	ldr	r1, [r7, #28]
 80141e4:	4401      	add	r1, r0
 80141e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80141ea:	4313      	orrs	r3, r2
 80141ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80141ee:	68bb      	ldr	r3, [r7, #8]
 80141f0:	78db      	ldrb	r3, [r3, #3]
 80141f2:	2b01      	cmp	r3, #1
 80141f4:	d11f      	bne.n	8014236 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80141f6:	69bb      	ldr	r3, [r7, #24]
 80141f8:	015a      	lsls	r2, r3, #5
 80141fa:	69fb      	ldr	r3, [r7, #28]
 80141fc:	4413      	add	r3, r2
 80141fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014202:	691b      	ldr	r3, [r3, #16]
 8014204:	69ba      	ldr	r2, [r7, #24]
 8014206:	0151      	lsls	r1, r2, #5
 8014208:	69fa      	ldr	r2, [r7, #28]
 801420a:	440a      	add	r2, r1
 801420c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014210:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8014214:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8014216:	69bb      	ldr	r3, [r7, #24]
 8014218:	015a      	lsls	r2, r3, #5
 801421a:	69fb      	ldr	r3, [r7, #28]
 801421c:	4413      	add	r3, r2
 801421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014222:	691b      	ldr	r3, [r3, #16]
 8014224:	69ba      	ldr	r2, [r7, #24]
 8014226:	0151      	lsls	r1, r2, #5
 8014228:	69fa      	ldr	r2, [r7, #28]
 801422a:	440a      	add	r2, r1
 801422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014234:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8014236:	79fb      	ldrb	r3, [r7, #7]
 8014238:	2b01      	cmp	r3, #1
 801423a:	d14b      	bne.n	80142d4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801423c:	68bb      	ldr	r3, [r7, #8]
 801423e:	691b      	ldr	r3, [r3, #16]
 8014240:	2b00      	cmp	r3, #0
 8014242:	d009      	beq.n	8014258 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	015a      	lsls	r2, r3, #5
 8014248:	69fb      	ldr	r3, [r7, #28]
 801424a:	4413      	add	r3, r2
 801424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014250:	461a      	mov	r2, r3
 8014252:	68bb      	ldr	r3, [r7, #8]
 8014254:	691b      	ldr	r3, [r3, #16]
 8014256:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014258:	68bb      	ldr	r3, [r7, #8]
 801425a:	78db      	ldrb	r3, [r3, #3]
 801425c:	2b01      	cmp	r3, #1
 801425e:	d128      	bne.n	80142b2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014266:	689b      	ldr	r3, [r3, #8]
 8014268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801426c:	2b00      	cmp	r3, #0
 801426e:	d110      	bne.n	8014292 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014270:	69bb      	ldr	r3, [r7, #24]
 8014272:	015a      	lsls	r2, r3, #5
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	4413      	add	r3, r2
 8014278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	69ba      	ldr	r2, [r7, #24]
 8014280:	0151      	lsls	r1, r2, #5
 8014282:	69fa      	ldr	r2, [r7, #28]
 8014284:	440a      	add	r2, r1
 8014286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801428a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801428e:	6013      	str	r3, [r2, #0]
 8014290:	e00f      	b.n	80142b2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014292:	69bb      	ldr	r3, [r7, #24]
 8014294:	015a      	lsls	r2, r3, #5
 8014296:	69fb      	ldr	r3, [r7, #28]
 8014298:	4413      	add	r3, r2
 801429a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	69ba      	ldr	r2, [r7, #24]
 80142a2:	0151      	lsls	r1, r2, #5
 80142a4:	69fa      	ldr	r2, [r7, #28]
 80142a6:	440a      	add	r2, r1
 80142a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142b0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80142b2:	69bb      	ldr	r3, [r7, #24]
 80142b4:	015a      	lsls	r2, r3, #5
 80142b6:	69fb      	ldr	r3, [r7, #28]
 80142b8:	4413      	add	r3, r2
 80142ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	69ba      	ldr	r2, [r7, #24]
 80142c2:	0151      	lsls	r1, r2, #5
 80142c4:	69fa      	ldr	r2, [r7, #28]
 80142c6:	440a      	add	r2, r1
 80142c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80142d0:	6013      	str	r3, [r2, #0]
 80142d2:	e12f      	b.n	8014534 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80142d4:	69bb      	ldr	r3, [r7, #24]
 80142d6:	015a      	lsls	r2, r3, #5
 80142d8:	69fb      	ldr	r3, [r7, #28]
 80142da:	4413      	add	r3, r2
 80142dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e0:	681b      	ldr	r3, [r3, #0]
 80142e2:	69ba      	ldr	r2, [r7, #24]
 80142e4:	0151      	lsls	r1, r2, #5
 80142e6:	69fa      	ldr	r2, [r7, #28]
 80142e8:	440a      	add	r2, r1
 80142ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80142f2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80142f4:	68bb      	ldr	r3, [r7, #8]
 80142f6:	78db      	ldrb	r3, [r3, #3]
 80142f8:	2b01      	cmp	r3, #1
 80142fa:	d015      	beq.n	8014328 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80142fc:	68bb      	ldr	r3, [r7, #8]
 80142fe:	695b      	ldr	r3, [r3, #20]
 8014300:	2b00      	cmp	r3, #0
 8014302:	f000 8117 	beq.w	8014534 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014306:	69fb      	ldr	r3, [r7, #28]
 8014308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801430c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801430e:	68bb      	ldr	r3, [r7, #8]
 8014310:	781b      	ldrb	r3, [r3, #0]
 8014312:	f003 030f 	and.w	r3, r3, #15
 8014316:	2101      	movs	r1, #1
 8014318:	fa01 f303 	lsl.w	r3, r1, r3
 801431c:	69f9      	ldr	r1, [r7, #28]
 801431e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014322:	4313      	orrs	r3, r2
 8014324:	634b      	str	r3, [r1, #52]	; 0x34
 8014326:	e105      	b.n	8014534 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014328:	69fb      	ldr	r3, [r7, #28]
 801432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801432e:	689b      	ldr	r3, [r3, #8]
 8014330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014334:	2b00      	cmp	r3, #0
 8014336:	d110      	bne.n	801435a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014338:	69bb      	ldr	r3, [r7, #24]
 801433a:	015a      	lsls	r2, r3, #5
 801433c:	69fb      	ldr	r3, [r7, #28]
 801433e:	4413      	add	r3, r2
 8014340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	69ba      	ldr	r2, [r7, #24]
 8014348:	0151      	lsls	r1, r2, #5
 801434a:	69fa      	ldr	r2, [r7, #28]
 801434c:	440a      	add	r2, r1
 801434e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014352:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014356:	6013      	str	r3, [r2, #0]
 8014358:	e00f      	b.n	801437a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	015a      	lsls	r2, r3, #5
 801435e:	69fb      	ldr	r3, [r7, #28]
 8014360:	4413      	add	r3, r2
 8014362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	69ba      	ldr	r2, [r7, #24]
 801436a:	0151      	lsls	r1, r2, #5
 801436c:	69fa      	ldr	r2, [r7, #28]
 801436e:	440a      	add	r2, r1
 8014370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014378:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	68d9      	ldr	r1, [r3, #12]
 801437e:	68bb      	ldr	r3, [r7, #8]
 8014380:	781a      	ldrb	r2, [r3, #0]
 8014382:	68bb      	ldr	r3, [r7, #8]
 8014384:	695b      	ldr	r3, [r3, #20]
 8014386:	b298      	uxth	r0, r3
 8014388:	79fb      	ldrb	r3, [r7, #7]
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	4603      	mov	r3, r0
 801438e:	68f8      	ldr	r0, [r7, #12]
 8014390:	f000 fa2b 	bl	80147ea <USB_WritePacket>
 8014394:	e0ce      	b.n	8014534 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014396:	69bb      	ldr	r3, [r7, #24]
 8014398:	015a      	lsls	r2, r3, #5
 801439a:	69fb      	ldr	r3, [r7, #28]
 801439c:	4413      	add	r3, r2
 801439e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143a2:	691b      	ldr	r3, [r3, #16]
 80143a4:	69ba      	ldr	r2, [r7, #24]
 80143a6:	0151      	lsls	r1, r2, #5
 80143a8:	69fa      	ldr	r2, [r7, #28]
 80143aa:	440a      	add	r2, r1
 80143ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143b0:	0cdb      	lsrs	r3, r3, #19
 80143b2:	04db      	lsls	r3, r3, #19
 80143b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80143b6:	69bb      	ldr	r3, [r7, #24]
 80143b8:	015a      	lsls	r2, r3, #5
 80143ba:	69fb      	ldr	r3, [r7, #28]
 80143bc:	4413      	add	r3, r2
 80143be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143c2:	691b      	ldr	r3, [r3, #16]
 80143c4:	69ba      	ldr	r2, [r7, #24]
 80143c6:	0151      	lsls	r1, r2, #5
 80143c8:	69fa      	ldr	r2, [r7, #28]
 80143ca:	440a      	add	r2, r1
 80143cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80143d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80143d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80143d8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80143da:	68bb      	ldr	r3, [r7, #8]
 80143dc:	695b      	ldr	r3, [r3, #20]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d126      	bne.n	8014430 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80143e2:	69bb      	ldr	r3, [r7, #24]
 80143e4:	015a      	lsls	r2, r3, #5
 80143e6:	69fb      	ldr	r3, [r7, #28]
 80143e8:	4413      	add	r3, r2
 80143ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80143ee:	691a      	ldr	r2, [r3, #16]
 80143f0:	68bb      	ldr	r3, [r7, #8]
 80143f2:	689b      	ldr	r3, [r3, #8]
 80143f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143f8:	69b9      	ldr	r1, [r7, #24]
 80143fa:	0148      	lsls	r0, r1, #5
 80143fc:	69f9      	ldr	r1, [r7, #28]
 80143fe:	4401      	add	r1, r0
 8014400:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014404:	4313      	orrs	r3, r2
 8014406:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014408:	69bb      	ldr	r3, [r7, #24]
 801440a:	015a      	lsls	r2, r3, #5
 801440c:	69fb      	ldr	r3, [r7, #28]
 801440e:	4413      	add	r3, r2
 8014410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014414:	691b      	ldr	r3, [r3, #16]
 8014416:	69ba      	ldr	r2, [r7, #24]
 8014418:	0151      	lsls	r1, r2, #5
 801441a:	69fa      	ldr	r2, [r7, #28]
 801441c:	440a      	add	r2, r1
 801441e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014422:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014426:	6113      	str	r3, [r2, #16]
 8014428:	e036      	b.n	8014498 <USB_EPStartXfer+0x3dc>
 801442a:	bf00      	nop
 801442c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014430:	68bb      	ldr	r3, [r7, #8]
 8014432:	695a      	ldr	r2, [r3, #20]
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	689b      	ldr	r3, [r3, #8]
 8014438:	4413      	add	r3, r2
 801443a:	1e5a      	subs	r2, r3, #1
 801443c:	68bb      	ldr	r3, [r7, #8]
 801443e:	689b      	ldr	r3, [r3, #8]
 8014440:	fbb2 f3f3 	udiv	r3, r2, r3
 8014444:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8014446:	69bb      	ldr	r3, [r7, #24]
 8014448:	015a      	lsls	r2, r3, #5
 801444a:	69fb      	ldr	r3, [r7, #28]
 801444c:	4413      	add	r3, r2
 801444e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014452:	691a      	ldr	r2, [r3, #16]
 8014454:	8afb      	ldrh	r3, [r7, #22]
 8014456:	04d9      	lsls	r1, r3, #19
 8014458:	4b39      	ldr	r3, [pc, #228]	; (8014540 <USB_EPStartXfer+0x484>)
 801445a:	400b      	ands	r3, r1
 801445c:	69b9      	ldr	r1, [r7, #24]
 801445e:	0148      	lsls	r0, r1, #5
 8014460:	69f9      	ldr	r1, [r7, #28]
 8014462:	4401      	add	r1, r0
 8014464:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014468:	4313      	orrs	r3, r2
 801446a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801446c:	69bb      	ldr	r3, [r7, #24]
 801446e:	015a      	lsls	r2, r3, #5
 8014470:	69fb      	ldr	r3, [r7, #28]
 8014472:	4413      	add	r3, r2
 8014474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014478:	691a      	ldr	r2, [r3, #16]
 801447a:	68bb      	ldr	r3, [r7, #8]
 801447c:	689b      	ldr	r3, [r3, #8]
 801447e:	8af9      	ldrh	r1, [r7, #22]
 8014480:	fb01 f303 	mul.w	r3, r1, r3
 8014484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014488:	69b9      	ldr	r1, [r7, #24]
 801448a:	0148      	lsls	r0, r1, #5
 801448c:	69f9      	ldr	r1, [r7, #28]
 801448e:	4401      	add	r1, r0
 8014490:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014494:	4313      	orrs	r3, r2
 8014496:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014498:	79fb      	ldrb	r3, [r7, #7]
 801449a:	2b01      	cmp	r3, #1
 801449c:	d10d      	bne.n	80144ba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801449e:	68bb      	ldr	r3, [r7, #8]
 80144a0:	68db      	ldr	r3, [r3, #12]
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d009      	beq.n	80144ba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80144a6:	68bb      	ldr	r3, [r7, #8]
 80144a8:	68d9      	ldr	r1, [r3, #12]
 80144aa:	69bb      	ldr	r3, [r7, #24]
 80144ac:	015a      	lsls	r2, r3, #5
 80144ae:	69fb      	ldr	r3, [r7, #28]
 80144b0:	4413      	add	r3, r2
 80144b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144b6:	460a      	mov	r2, r1
 80144b8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	78db      	ldrb	r3, [r3, #3]
 80144be:	2b01      	cmp	r3, #1
 80144c0:	d128      	bne.n	8014514 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80144c2:	69fb      	ldr	r3, [r7, #28]
 80144c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144c8:	689b      	ldr	r3, [r3, #8]
 80144ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80144ce:	2b00      	cmp	r3, #0
 80144d0:	d110      	bne.n	80144f4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80144d2:	69bb      	ldr	r3, [r7, #24]
 80144d4:	015a      	lsls	r2, r3, #5
 80144d6:	69fb      	ldr	r3, [r7, #28]
 80144d8:	4413      	add	r3, r2
 80144da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	69ba      	ldr	r2, [r7, #24]
 80144e2:	0151      	lsls	r1, r2, #5
 80144e4:	69fa      	ldr	r2, [r7, #28]
 80144e6:	440a      	add	r2, r1
 80144e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144ec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80144f0:	6013      	str	r3, [r2, #0]
 80144f2:	e00f      	b.n	8014514 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80144f4:	69bb      	ldr	r3, [r7, #24]
 80144f6:	015a      	lsls	r2, r3, #5
 80144f8:	69fb      	ldr	r3, [r7, #28]
 80144fa:	4413      	add	r3, r2
 80144fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	69ba      	ldr	r2, [r7, #24]
 8014504:	0151      	lsls	r1, r2, #5
 8014506:	69fa      	ldr	r2, [r7, #28]
 8014508:	440a      	add	r2, r1
 801450a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014512:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8014514:	69bb      	ldr	r3, [r7, #24]
 8014516:	015a      	lsls	r2, r3, #5
 8014518:	69fb      	ldr	r3, [r7, #28]
 801451a:	4413      	add	r3, r2
 801451c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014520:	681b      	ldr	r3, [r3, #0]
 8014522:	69ba      	ldr	r2, [r7, #24]
 8014524:	0151      	lsls	r1, r2, #5
 8014526:	69fa      	ldr	r2, [r7, #28]
 8014528:	440a      	add	r2, r1
 801452a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801452e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014532:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014534:	2300      	movs	r3, #0
}
 8014536:	4618      	mov	r0, r3
 8014538:	3720      	adds	r7, #32
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	1ff80000 	.word	0x1ff80000

08014544 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8014544:	b480      	push	{r7}
 8014546:	b087      	sub	sp, #28
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	4613      	mov	r3, r2
 8014550:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	781b      	ldrb	r3, [r3, #0]
 801455a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	785b      	ldrb	r3, [r3, #1]
 8014560:	2b01      	cmp	r3, #1
 8014562:	f040 80cd 	bne.w	8014700 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	695b      	ldr	r3, [r3, #20]
 801456a:	2b00      	cmp	r3, #0
 801456c:	d132      	bne.n	80145d4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801456e:	693b      	ldr	r3, [r7, #16]
 8014570:	015a      	lsls	r2, r3, #5
 8014572:	697b      	ldr	r3, [r7, #20]
 8014574:	4413      	add	r3, r2
 8014576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801457a:	691b      	ldr	r3, [r3, #16]
 801457c:	693a      	ldr	r2, [r7, #16]
 801457e:	0151      	lsls	r1, r2, #5
 8014580:	697a      	ldr	r2, [r7, #20]
 8014582:	440a      	add	r2, r1
 8014584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014588:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801458c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014590:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014592:	693b      	ldr	r3, [r7, #16]
 8014594:	015a      	lsls	r2, r3, #5
 8014596:	697b      	ldr	r3, [r7, #20]
 8014598:	4413      	add	r3, r2
 801459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801459e:	691b      	ldr	r3, [r3, #16]
 80145a0:	693a      	ldr	r2, [r7, #16]
 80145a2:	0151      	lsls	r1, r2, #5
 80145a4:	697a      	ldr	r2, [r7, #20]
 80145a6:	440a      	add	r2, r1
 80145a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80145b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80145b2:	693b      	ldr	r3, [r7, #16]
 80145b4:	015a      	lsls	r2, r3, #5
 80145b6:	697b      	ldr	r3, [r7, #20]
 80145b8:	4413      	add	r3, r2
 80145ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145be:	691b      	ldr	r3, [r3, #16]
 80145c0:	693a      	ldr	r2, [r7, #16]
 80145c2:	0151      	lsls	r1, r2, #5
 80145c4:	697a      	ldr	r2, [r7, #20]
 80145c6:	440a      	add	r2, r1
 80145c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145cc:	0cdb      	lsrs	r3, r3, #19
 80145ce:	04db      	lsls	r3, r3, #19
 80145d0:	6113      	str	r3, [r2, #16]
 80145d2:	e04e      	b.n	8014672 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80145d4:	693b      	ldr	r3, [r7, #16]
 80145d6:	015a      	lsls	r2, r3, #5
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	4413      	add	r3, r2
 80145dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145e0:	691b      	ldr	r3, [r3, #16]
 80145e2:	693a      	ldr	r2, [r7, #16]
 80145e4:	0151      	lsls	r1, r2, #5
 80145e6:	697a      	ldr	r2, [r7, #20]
 80145e8:	440a      	add	r2, r1
 80145ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145ee:	0cdb      	lsrs	r3, r3, #19
 80145f0:	04db      	lsls	r3, r3, #19
 80145f2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	015a      	lsls	r2, r3, #5
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	4413      	add	r3, r2
 80145fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014600:	691b      	ldr	r3, [r3, #16]
 8014602:	693a      	ldr	r2, [r7, #16]
 8014604:	0151      	lsls	r1, r2, #5
 8014606:	697a      	ldr	r2, [r7, #20]
 8014608:	440a      	add	r2, r1
 801460a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801460e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014612:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014616:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	695a      	ldr	r2, [r3, #20]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	429a      	cmp	r2, r3
 8014622:	d903      	bls.n	801462c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	689a      	ldr	r2, [r3, #8]
 8014628:	68bb      	ldr	r3, [r7, #8]
 801462a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	015a      	lsls	r2, r3, #5
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	4413      	add	r3, r2
 8014634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014638:	691b      	ldr	r3, [r3, #16]
 801463a:	693a      	ldr	r2, [r7, #16]
 801463c:	0151      	lsls	r1, r2, #5
 801463e:	697a      	ldr	r2, [r7, #20]
 8014640:	440a      	add	r2, r1
 8014642:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014646:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801464a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	015a      	lsls	r2, r3, #5
 8014650:	697b      	ldr	r3, [r7, #20]
 8014652:	4413      	add	r3, r2
 8014654:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014658:	691a      	ldr	r2, [r3, #16]
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	695b      	ldr	r3, [r3, #20]
 801465e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014662:	6939      	ldr	r1, [r7, #16]
 8014664:	0148      	lsls	r0, r1, #5
 8014666:	6979      	ldr	r1, [r7, #20]
 8014668:	4401      	add	r1, r0
 801466a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801466e:	4313      	orrs	r3, r2
 8014670:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014672:	79fb      	ldrb	r3, [r7, #7]
 8014674:	2b01      	cmp	r3, #1
 8014676:	d11e      	bne.n	80146b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014678:	68bb      	ldr	r3, [r7, #8]
 801467a:	691b      	ldr	r3, [r3, #16]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d009      	beq.n	8014694 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014680:	693b      	ldr	r3, [r7, #16]
 8014682:	015a      	lsls	r2, r3, #5
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	4413      	add	r3, r2
 8014688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801468c:	461a      	mov	r2, r3
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	691b      	ldr	r3, [r3, #16]
 8014692:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014694:	693b      	ldr	r3, [r7, #16]
 8014696:	015a      	lsls	r2, r3, #5
 8014698:	697b      	ldr	r3, [r7, #20]
 801469a:	4413      	add	r3, r2
 801469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	693a      	ldr	r2, [r7, #16]
 80146a4:	0151      	lsls	r1, r2, #5
 80146a6:	697a      	ldr	r2, [r7, #20]
 80146a8:	440a      	add	r2, r1
 80146aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146b2:	6013      	str	r3, [r2, #0]
 80146b4:	e092      	b.n	80147dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80146b6:	693b      	ldr	r3, [r7, #16]
 80146b8:	015a      	lsls	r2, r3, #5
 80146ba:	697b      	ldr	r3, [r7, #20]
 80146bc:	4413      	add	r3, r2
 80146be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80146c2:	681b      	ldr	r3, [r3, #0]
 80146c4:	693a      	ldr	r2, [r7, #16]
 80146c6:	0151      	lsls	r1, r2, #5
 80146c8:	697a      	ldr	r2, [r7, #20]
 80146ca:	440a      	add	r2, r1
 80146cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80146d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80146d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80146d6:	68bb      	ldr	r3, [r7, #8]
 80146d8:	695b      	ldr	r3, [r3, #20]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d07e      	beq.n	80147dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80146de:	697b      	ldr	r3, [r7, #20]
 80146e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80146e6:	68bb      	ldr	r3, [r7, #8]
 80146e8:	781b      	ldrb	r3, [r3, #0]
 80146ea:	f003 030f 	and.w	r3, r3, #15
 80146ee:	2101      	movs	r1, #1
 80146f0:	fa01 f303 	lsl.w	r3, r1, r3
 80146f4:	6979      	ldr	r1, [r7, #20]
 80146f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80146fa:	4313      	orrs	r3, r2
 80146fc:	634b      	str	r3, [r1, #52]	; 0x34
 80146fe:	e06d      	b.n	80147dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8014700:	693b      	ldr	r3, [r7, #16]
 8014702:	015a      	lsls	r2, r3, #5
 8014704:	697b      	ldr	r3, [r7, #20]
 8014706:	4413      	add	r3, r2
 8014708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801470c:	691b      	ldr	r3, [r3, #16]
 801470e:	693a      	ldr	r2, [r7, #16]
 8014710:	0151      	lsls	r1, r2, #5
 8014712:	697a      	ldr	r2, [r7, #20]
 8014714:	440a      	add	r2, r1
 8014716:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801471a:	0cdb      	lsrs	r3, r3, #19
 801471c:	04db      	lsls	r3, r3, #19
 801471e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014720:	693b      	ldr	r3, [r7, #16]
 8014722:	015a      	lsls	r2, r3, #5
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	4413      	add	r3, r2
 8014728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801472c:	691b      	ldr	r3, [r3, #16]
 801472e:	693a      	ldr	r2, [r7, #16]
 8014730:	0151      	lsls	r1, r2, #5
 8014732:	697a      	ldr	r2, [r7, #20]
 8014734:	440a      	add	r2, r1
 8014736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801473a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801473e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014742:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	695b      	ldr	r3, [r3, #20]
 8014748:	2b00      	cmp	r3, #0
 801474a:	d003      	beq.n	8014754 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 801474c:	68bb      	ldr	r3, [r7, #8]
 801474e:	689a      	ldr	r2, [r3, #8]
 8014750:	68bb      	ldr	r3, [r7, #8]
 8014752:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014754:	693b      	ldr	r3, [r7, #16]
 8014756:	015a      	lsls	r2, r3, #5
 8014758:	697b      	ldr	r3, [r7, #20]
 801475a:	4413      	add	r3, r2
 801475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014760:	691b      	ldr	r3, [r3, #16]
 8014762:	693a      	ldr	r2, [r7, #16]
 8014764:	0151      	lsls	r1, r2, #5
 8014766:	697a      	ldr	r2, [r7, #20]
 8014768:	440a      	add	r2, r1
 801476a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801476e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014772:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	015a      	lsls	r2, r3, #5
 8014778:	697b      	ldr	r3, [r7, #20]
 801477a:	4413      	add	r3, r2
 801477c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014780:	691a      	ldr	r2, [r3, #16]
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	689b      	ldr	r3, [r3, #8]
 8014786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801478a:	6939      	ldr	r1, [r7, #16]
 801478c:	0148      	lsls	r0, r1, #5
 801478e:	6979      	ldr	r1, [r7, #20]
 8014790:	4401      	add	r1, r0
 8014792:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014796:	4313      	orrs	r3, r2
 8014798:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801479a:	79fb      	ldrb	r3, [r7, #7]
 801479c:	2b01      	cmp	r3, #1
 801479e:	d10d      	bne.n	80147bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	68db      	ldr	r3, [r3, #12]
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d009      	beq.n	80147bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	68d9      	ldr	r1, [r3, #12]
 80147ac:	693b      	ldr	r3, [r7, #16]
 80147ae:	015a      	lsls	r2, r3, #5
 80147b0:	697b      	ldr	r3, [r7, #20]
 80147b2:	4413      	add	r3, r2
 80147b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147b8:	460a      	mov	r2, r1
 80147ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	015a      	lsls	r2, r3, #5
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	4413      	add	r3, r2
 80147c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	0151      	lsls	r1, r2, #5
 80147ce:	697a      	ldr	r2, [r7, #20]
 80147d0:	440a      	add	r2, r1
 80147d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80147d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80147da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	371c      	adds	r7, #28
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80147ea:	b480      	push	{r7}
 80147ec:	b089      	sub	sp, #36	; 0x24
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	60f8      	str	r0, [r7, #12]
 80147f2:	60b9      	str	r1, [r7, #8]
 80147f4:	4611      	mov	r1, r2
 80147f6:	461a      	mov	r2, r3
 80147f8:	460b      	mov	r3, r1
 80147fa:	71fb      	strb	r3, [r7, #7]
 80147fc:	4613      	mov	r3, r2
 80147fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8014808:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801480c:	2b00      	cmp	r3, #0
 801480e:	d11a      	bne.n	8014846 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8014810:	88bb      	ldrh	r3, [r7, #4]
 8014812:	3303      	adds	r3, #3
 8014814:	089b      	lsrs	r3, r3, #2
 8014816:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014818:	2300      	movs	r3, #0
 801481a:	61bb      	str	r3, [r7, #24]
 801481c:	e00f      	b.n	801483e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801481e:	79fb      	ldrb	r3, [r7, #7]
 8014820:	031a      	lsls	r2, r3, #12
 8014822:	697b      	ldr	r3, [r7, #20]
 8014824:	4413      	add	r3, r2
 8014826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801482a:	461a      	mov	r2, r3
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014832:	69fb      	ldr	r3, [r7, #28]
 8014834:	3304      	adds	r3, #4
 8014836:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	3301      	adds	r3, #1
 801483c:	61bb      	str	r3, [r7, #24]
 801483e:	69ba      	ldr	r2, [r7, #24]
 8014840:	693b      	ldr	r3, [r7, #16]
 8014842:	429a      	cmp	r2, r3
 8014844:	d3eb      	bcc.n	801481e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014846:	2300      	movs	r3, #0
}
 8014848:	4618      	mov	r0, r3
 801484a:	3724      	adds	r7, #36	; 0x24
 801484c:	46bd      	mov	sp, r7
 801484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014852:	4770      	bx	lr

08014854 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014854:	b480      	push	{r7}
 8014856:	b089      	sub	sp, #36	; 0x24
 8014858:	af00      	add	r7, sp, #0
 801485a:	60f8      	str	r0, [r7, #12]
 801485c:	60b9      	str	r1, [r7, #8]
 801485e:	4613      	mov	r3, r2
 8014860:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8014866:	68bb      	ldr	r3, [r7, #8]
 8014868:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 801486a:	88fb      	ldrh	r3, [r7, #6]
 801486c:	3303      	adds	r3, #3
 801486e:	089b      	lsrs	r3, r3, #2
 8014870:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8014872:	2300      	movs	r3, #0
 8014874:	61bb      	str	r3, [r7, #24]
 8014876:	e00b      	b.n	8014890 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014878:	697b      	ldr	r3, [r7, #20]
 801487a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801487e:	681a      	ldr	r2, [r3, #0]
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	601a      	str	r2, [r3, #0]
    pDest++;
 8014884:	69fb      	ldr	r3, [r7, #28]
 8014886:	3304      	adds	r3, #4
 8014888:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 801488a:	69bb      	ldr	r3, [r7, #24]
 801488c:	3301      	adds	r3, #1
 801488e:	61bb      	str	r3, [r7, #24]
 8014890:	69ba      	ldr	r2, [r7, #24]
 8014892:	693b      	ldr	r3, [r7, #16]
 8014894:	429a      	cmp	r2, r3
 8014896:	d3ef      	bcc.n	8014878 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8014898:	69fb      	ldr	r3, [r7, #28]
}
 801489a:	4618      	mov	r0, r3
 801489c:	3724      	adds	r7, #36	; 0x24
 801489e:	46bd      	mov	sp, r7
 80148a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a4:	4770      	bx	lr

080148a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80148a6:	b480      	push	{r7}
 80148a8:	b085      	sub	sp, #20
 80148aa:	af00      	add	r7, sp, #0
 80148ac:	6078      	str	r0, [r7, #4]
 80148ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80148ba:	683b      	ldr	r3, [r7, #0]
 80148bc:	785b      	ldrb	r3, [r3, #1]
 80148be:	2b01      	cmp	r3, #1
 80148c0:	d12c      	bne.n	801491c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80148c2:	68bb      	ldr	r3, [r7, #8]
 80148c4:	015a      	lsls	r2, r3, #5
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	4413      	add	r3, r2
 80148ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	db12      	blt.n	80148fa <USB_EPSetStall+0x54>
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00f      	beq.n	80148fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80148da:	68bb      	ldr	r3, [r7, #8]
 80148dc:	015a      	lsls	r2, r3, #5
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	4413      	add	r3, r2
 80148e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	68ba      	ldr	r2, [r7, #8]
 80148ea:	0151      	lsls	r1, r2, #5
 80148ec:	68fa      	ldr	r2, [r7, #12]
 80148ee:	440a      	add	r2, r1
 80148f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80148f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	015a      	lsls	r2, r3, #5
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	4413      	add	r3, r2
 8014902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	68ba      	ldr	r2, [r7, #8]
 801490a:	0151      	lsls	r1, r2, #5
 801490c:	68fa      	ldr	r2, [r7, #12]
 801490e:	440a      	add	r2, r1
 8014910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014914:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014918:	6013      	str	r3, [r2, #0]
 801491a:	e02b      	b.n	8014974 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	015a      	lsls	r2, r3, #5
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	4413      	add	r3, r2
 8014924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	2b00      	cmp	r3, #0
 801492c:	db12      	blt.n	8014954 <USB_EPSetStall+0xae>
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d00f      	beq.n	8014954 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	015a      	lsls	r2, r3, #5
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	4413      	add	r3, r2
 801493c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014940:	681b      	ldr	r3, [r3, #0]
 8014942:	68ba      	ldr	r2, [r7, #8]
 8014944:	0151      	lsls	r1, r2, #5
 8014946:	68fa      	ldr	r2, [r7, #12]
 8014948:	440a      	add	r2, r1
 801494a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801494e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014952:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014954:	68bb      	ldr	r3, [r7, #8]
 8014956:	015a      	lsls	r2, r3, #5
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	4413      	add	r3, r2
 801495c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	68ba      	ldr	r2, [r7, #8]
 8014964:	0151      	lsls	r1, r2, #5
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	440a      	add	r2, r1
 801496a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801496e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014972:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014974:	2300      	movs	r3, #0
}
 8014976:	4618      	mov	r0, r3
 8014978:	3714      	adds	r7, #20
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr

08014982 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014982:	b480      	push	{r7}
 8014984:	b085      	sub	sp, #20
 8014986:	af00      	add	r7, sp, #0
 8014988:	6078      	str	r0, [r7, #4]
 801498a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014990:	683b      	ldr	r3, [r7, #0]
 8014992:	781b      	ldrb	r3, [r3, #0]
 8014994:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014996:	683b      	ldr	r3, [r7, #0]
 8014998:	785b      	ldrb	r3, [r3, #1]
 801499a:	2b01      	cmp	r3, #1
 801499c:	d128      	bne.n	80149f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 801499e:	68bb      	ldr	r3, [r7, #8]
 80149a0:	015a      	lsls	r2, r3, #5
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	4413      	add	r3, r2
 80149a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149aa:	681b      	ldr	r3, [r3, #0]
 80149ac:	68ba      	ldr	r2, [r7, #8]
 80149ae:	0151      	lsls	r1, r2, #5
 80149b0:	68fa      	ldr	r2, [r7, #12]
 80149b2:	440a      	add	r2, r1
 80149b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80149bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80149be:	683b      	ldr	r3, [r7, #0]
 80149c0:	78db      	ldrb	r3, [r3, #3]
 80149c2:	2b03      	cmp	r3, #3
 80149c4:	d003      	beq.n	80149ce <USB_EPClearStall+0x4c>
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	78db      	ldrb	r3, [r3, #3]
 80149ca:	2b02      	cmp	r3, #2
 80149cc:	d138      	bne.n	8014a40 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80149ce:	68bb      	ldr	r3, [r7, #8]
 80149d0:	015a      	lsls	r2, r3, #5
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	4413      	add	r3, r2
 80149d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	68ba      	ldr	r2, [r7, #8]
 80149de:	0151      	lsls	r1, r2, #5
 80149e0:	68fa      	ldr	r2, [r7, #12]
 80149e2:	440a      	add	r2, r1
 80149e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80149e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80149ec:	6013      	str	r3, [r2, #0]
 80149ee:	e027      	b.n	8014a40 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80149f0:	68bb      	ldr	r3, [r7, #8]
 80149f2:	015a      	lsls	r2, r3, #5
 80149f4:	68fb      	ldr	r3, [r7, #12]
 80149f6:	4413      	add	r3, r2
 80149f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	68ba      	ldr	r2, [r7, #8]
 8014a00:	0151      	lsls	r1, r2, #5
 8014a02:	68fa      	ldr	r2, [r7, #12]
 8014a04:	440a      	add	r2, r1
 8014a06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014a0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014a10:	683b      	ldr	r3, [r7, #0]
 8014a12:	78db      	ldrb	r3, [r3, #3]
 8014a14:	2b03      	cmp	r3, #3
 8014a16:	d003      	beq.n	8014a20 <USB_EPClearStall+0x9e>
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	78db      	ldrb	r3, [r3, #3]
 8014a1c:	2b02      	cmp	r3, #2
 8014a1e:	d10f      	bne.n	8014a40 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014a20:	68bb      	ldr	r3, [r7, #8]
 8014a22:	015a      	lsls	r2, r3, #5
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	4413      	add	r3, r2
 8014a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	68ba      	ldr	r2, [r7, #8]
 8014a30:	0151      	lsls	r1, r2, #5
 8014a32:	68fa      	ldr	r2, [r7, #12]
 8014a34:	440a      	add	r2, r1
 8014a36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014a3e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014a40:	2300      	movs	r3, #0
}
 8014a42:	4618      	mov	r0, r3
 8014a44:	3714      	adds	r7, #20
 8014a46:	46bd      	mov	sp, r7
 8014a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a4c:	4770      	bx	lr

08014a4e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014a4e:	b480      	push	{r7}
 8014a50:	b085      	sub	sp, #20
 8014a52:	af00      	add	r7, sp, #0
 8014a54:	6078      	str	r0, [r7, #4]
 8014a56:	460b      	mov	r3, r1
 8014a58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a64:	681b      	ldr	r3, [r3, #0]
 8014a66:	68fa      	ldr	r2, [r7, #12]
 8014a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014a6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014a70:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014a72:	68fb      	ldr	r3, [r7, #12]
 8014a74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a78:	681a      	ldr	r2, [r3, #0]
 8014a7a:	78fb      	ldrb	r3, [r7, #3]
 8014a7c:	011b      	lsls	r3, r3, #4
 8014a7e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014a82:	68f9      	ldr	r1, [r7, #12]
 8014a84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014a88:	4313      	orrs	r3, r2
 8014a8a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014a8c:	2300      	movs	r3, #0
}
 8014a8e:	4618      	mov	r0, r3
 8014a90:	3714      	adds	r7, #20
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr

08014a9a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014a9a:	b480      	push	{r7}
 8014a9c:	b085      	sub	sp, #20
 8014a9e:	af00      	add	r7, sp, #0
 8014aa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014aa6:	68fb      	ldr	r3, [r7, #12]
 8014aa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014aac:	681b      	ldr	r3, [r3, #0]
 8014aae:	68fa      	ldr	r2, [r7, #12]
 8014ab0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014ab4:	f023 0303 	bic.w	r3, r3, #3
 8014ab8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	68fa      	ldr	r2, [r7, #12]
 8014ac4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014ac8:	f023 0302 	bic.w	r3, r3, #2
 8014acc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014ace:	2300      	movs	r3, #0
}
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	3714      	adds	r7, #20
 8014ad4:	46bd      	mov	sp, r7
 8014ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ada:	4770      	bx	lr

08014adc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014adc:	b480      	push	{r7}
 8014ade:	b085      	sub	sp, #20
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014af6:	f023 0303 	bic.w	r3, r3, #3
 8014afa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	68fa      	ldr	r2, [r7, #12]
 8014b06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014b0a:	f043 0302 	orr.w	r3, r3, #2
 8014b0e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014b10:	2300      	movs	r3, #0
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3714      	adds	r7, #20
 8014b16:	46bd      	mov	sp, r7
 8014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1c:	4770      	bx	lr

08014b1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014b1e:	b480      	push	{r7}
 8014b20:	b085      	sub	sp, #20
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014b26:	687b      	ldr	r3, [r7, #4]
 8014b28:	695b      	ldr	r3, [r3, #20]
 8014b2a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	699b      	ldr	r3, [r3, #24]
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	4013      	ands	r3, r2
 8014b34:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014b36:	68fb      	ldr	r3, [r7, #12]
}
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3714      	adds	r7, #20
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b42:	4770      	bx	lr

08014b44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014b44:	b480      	push	{r7}
 8014b46:	b085      	sub	sp, #20
 8014b48:	af00      	add	r7, sp, #0
 8014b4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014b50:	68fb      	ldr	r3, [r7, #12]
 8014b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b56:	699b      	ldr	r3, [r3, #24]
 8014b58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014b5a:	68fb      	ldr	r3, [r7, #12]
 8014b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b60:	69db      	ldr	r3, [r3, #28]
 8014b62:	68ba      	ldr	r2, [r7, #8]
 8014b64:	4013      	ands	r3, r2
 8014b66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014b68:	68bb      	ldr	r3, [r7, #8]
 8014b6a:	0c1b      	lsrs	r3, r3, #16
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	3714      	adds	r7, #20
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr

08014b78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014b78:	b480      	push	{r7}
 8014b7a:	b085      	sub	sp, #20
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b80:	687b      	ldr	r3, [r7, #4]
 8014b82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014b84:	68fb      	ldr	r3, [r7, #12]
 8014b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b8a:	699b      	ldr	r3, [r3, #24]
 8014b8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014b8e:	68fb      	ldr	r3, [r7, #12]
 8014b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b94:	69db      	ldr	r3, [r3, #28]
 8014b96:	68ba      	ldr	r2, [r7, #8]
 8014b98:	4013      	ands	r3, r2
 8014b9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	b29b      	uxth	r3, r3
}
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	3714      	adds	r7, #20
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b085      	sub	sp, #20
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	6078      	str	r0, [r7, #4]
 8014bb4:	460b      	mov	r3, r1
 8014bb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014bbc:	78fb      	ldrb	r3, [r7, #3]
 8014bbe:	015a      	lsls	r2, r3, #5
 8014bc0:	68fb      	ldr	r3, [r7, #12]
 8014bc2:	4413      	add	r3, r2
 8014bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014bc8:	689b      	ldr	r3, [r3, #8]
 8014bca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014bcc:	68fb      	ldr	r3, [r7, #12]
 8014bce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bd2:	695b      	ldr	r3, [r3, #20]
 8014bd4:	68ba      	ldr	r2, [r7, #8]
 8014bd6:	4013      	ands	r3, r2
 8014bd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014bda:	68bb      	ldr	r3, [r7, #8]
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3714      	adds	r7, #20
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr

08014be8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014be8:	b480      	push	{r7}
 8014bea:	b087      	sub	sp, #28
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	460b      	mov	r3, r1
 8014bf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bf4:	687b      	ldr	r3, [r7, #4]
 8014bf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bfe:	691b      	ldr	r3, [r3, #16]
 8014c00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014c02:	697b      	ldr	r3, [r7, #20]
 8014c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014c0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014c0c:	78fb      	ldrb	r3, [r7, #3]
 8014c0e:	f003 030f 	and.w	r3, r3, #15
 8014c12:	68fa      	ldr	r2, [r7, #12]
 8014c14:	fa22 f303 	lsr.w	r3, r2, r3
 8014c18:	01db      	lsls	r3, r3, #7
 8014c1a:	b2db      	uxtb	r3, r3
 8014c1c:	693a      	ldr	r2, [r7, #16]
 8014c1e:	4313      	orrs	r3, r2
 8014c20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014c22:	78fb      	ldrb	r3, [r7, #3]
 8014c24:	015a      	lsls	r2, r3, #5
 8014c26:	697b      	ldr	r3, [r7, #20]
 8014c28:	4413      	add	r3, r2
 8014c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c2e:	689b      	ldr	r3, [r3, #8]
 8014c30:	693a      	ldr	r2, [r7, #16]
 8014c32:	4013      	ands	r3, r2
 8014c34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014c36:	68bb      	ldr	r3, [r7, #8]
}
 8014c38:	4618      	mov	r0, r3
 8014c3a:	371c      	adds	r7, #28
 8014c3c:	46bd      	mov	sp, r7
 8014c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c42:	4770      	bx	lr

08014c44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014c44:	b480      	push	{r7}
 8014c46:	b083      	sub	sp, #12
 8014c48:	af00      	add	r7, sp, #0
 8014c4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	695b      	ldr	r3, [r3, #20]
 8014c50:	f003 0301 	and.w	r3, r3, #1
}
 8014c54:	4618      	mov	r0, r3
 8014c56:	370c      	adds	r7, #12
 8014c58:	46bd      	mov	sp, r7
 8014c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c5e:	4770      	bx	lr

08014c60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	68fa      	ldr	r2, [r7, #12]
 8014c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014c7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014c7e:	f023 0307 	bic.w	r3, r3, #7
 8014c82:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014c84:	68fb      	ldr	r3, [r7, #12]
 8014c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	68fa      	ldr	r2, [r7, #12]
 8014c8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014c96:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014c98:	2300      	movs	r3, #0
}
 8014c9a:	4618      	mov	r0, r3
 8014c9c:	3714      	adds	r7, #20
 8014c9e:	46bd      	mov	sp, r7
 8014ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca4:	4770      	bx	lr
	...

08014ca8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014ca8:	b480      	push	{r7}
 8014caa:	b087      	sub	sp, #28
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	60f8      	str	r0, [r7, #12]
 8014cb0:	460b      	mov	r3, r1
 8014cb2:	607a      	str	r2, [r7, #4]
 8014cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014cba:	68fb      	ldr	r3, [r7, #12]
 8014cbc:	333c      	adds	r3, #60	; 0x3c
 8014cbe:	3304      	adds	r3, #4
 8014cc0:	681b      	ldr	r3, [r3, #0]
 8014cc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014cc4:	693b      	ldr	r3, [r7, #16]
 8014cc6:	4a26      	ldr	r2, [pc, #152]	; (8014d60 <USB_EP0_OutStart+0xb8>)
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	d90a      	bls.n	8014ce2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014ccc:	697b      	ldr	r3, [r7, #20]
 8014cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014cdc:	d101      	bne.n	8014ce2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014cde:	2300      	movs	r3, #0
 8014ce0:	e037      	b.n	8014d52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014ce2:	697b      	ldr	r3, [r7, #20]
 8014ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ce8:	461a      	mov	r2, r3
 8014cea:	2300      	movs	r3, #0
 8014cec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014cee:	697b      	ldr	r3, [r7, #20]
 8014cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014cf4:	691b      	ldr	r3, [r3, #16]
 8014cf6:	697a      	ldr	r2, [r7, #20]
 8014cf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014cfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014d00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014d02:	697b      	ldr	r3, [r7, #20]
 8014d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d08:	691b      	ldr	r3, [r3, #16]
 8014d0a:	697a      	ldr	r2, [r7, #20]
 8014d0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d10:	f043 0318 	orr.w	r3, r3, #24
 8014d14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014d16:	697b      	ldr	r3, [r7, #20]
 8014d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d1c:	691b      	ldr	r3, [r3, #16]
 8014d1e:	697a      	ldr	r2, [r7, #20]
 8014d20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014d28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014d2a:	7afb      	ldrb	r3, [r7, #11]
 8014d2c:	2b01      	cmp	r3, #1
 8014d2e:	d10f      	bne.n	8014d50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d36:	461a      	mov	r2, r3
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	697a      	ldr	r2, [r7, #20]
 8014d46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014d4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014d4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014d50:	2300      	movs	r3, #0
}
 8014d52:	4618      	mov	r0, r3
 8014d54:	371c      	adds	r7, #28
 8014d56:	46bd      	mov	sp, r7
 8014d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5c:	4770      	bx	lr
 8014d5e:	bf00      	nop
 8014d60:	4f54300a 	.word	0x4f54300a

08014d64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014d64:	b480      	push	{r7}
 8014d66:	b085      	sub	sp, #20
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	3301      	adds	r3, #1
 8014d74:	60fb      	str	r3, [r7, #12]
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	4a13      	ldr	r2, [pc, #76]	; (8014dc8 <USB_CoreReset+0x64>)
 8014d7a:	4293      	cmp	r3, r2
 8014d7c:	d901      	bls.n	8014d82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014d7e:	2303      	movs	r3, #3
 8014d80:	e01b      	b.n	8014dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	691b      	ldr	r3, [r3, #16]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	daf2      	bge.n	8014d70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014d8a:	2300      	movs	r3, #0
 8014d8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014d8e:	687b      	ldr	r3, [r7, #4]
 8014d90:	691b      	ldr	r3, [r3, #16]
 8014d92:	f043 0201 	orr.w	r2, r3, #1
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	3301      	adds	r3, #1
 8014d9e:	60fb      	str	r3, [r7, #12]
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	4a09      	ldr	r2, [pc, #36]	; (8014dc8 <USB_CoreReset+0x64>)
 8014da4:	4293      	cmp	r3, r2
 8014da6:	d901      	bls.n	8014dac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014da8:	2303      	movs	r3, #3
 8014daa:	e006      	b.n	8014dba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	691b      	ldr	r3, [r3, #16]
 8014db0:	f003 0301 	and.w	r3, r3, #1
 8014db4:	2b01      	cmp	r3, #1
 8014db6:	d0f0      	beq.n	8014d9a <USB_CoreReset+0x36>

  return HAL_OK;
 8014db8:	2300      	movs	r3, #0
}
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3714      	adds	r7, #20
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dc4:	4770      	bx	lr
 8014dc6:	bf00      	nop
 8014dc8:	00030d40 	.word	0x00030d40

08014dcc <main>:




int main(void)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	af00      	add	r7, sp, #0
  hwInit();
 8014dd0:	f7f4 fe50 	bl	8009a74 <hwInit>
  apInit();
 8014dd4:	f7ec f8fa 	bl	8000fcc <apInit>

  apMain();
 8014dd8:	f7ec f901 	bl	8000fde <apMain>

  return 0;
 8014ddc:	2300      	movs	r3, #0
}
 8014dde:	4618      	mov	r0, r3
 8014de0:	bd80      	pop	{r7, pc}
	...

08014de4 <__errno>:
 8014de4:	4b01      	ldr	r3, [pc, #4]	; (8014dec <__errno+0x8>)
 8014de6:	6818      	ldr	r0, [r3, #0]
 8014de8:	4770      	bx	lr
 8014dea:	bf00      	nop
 8014dec:	20000374 	.word	0x20000374

08014df0 <__libc_init_array>:
 8014df0:	b570      	push	{r4, r5, r6, lr}
 8014df2:	4d0d      	ldr	r5, [pc, #52]	; (8014e28 <__libc_init_array+0x38>)
 8014df4:	4c0d      	ldr	r4, [pc, #52]	; (8014e2c <__libc_init_array+0x3c>)
 8014df6:	1b64      	subs	r4, r4, r5
 8014df8:	10a4      	asrs	r4, r4, #2
 8014dfa:	2600      	movs	r6, #0
 8014dfc:	42a6      	cmp	r6, r4
 8014dfe:	d109      	bne.n	8014e14 <__libc_init_array+0x24>
 8014e00:	4d0b      	ldr	r5, [pc, #44]	; (8014e30 <__libc_init_array+0x40>)
 8014e02:	4c0c      	ldr	r4, [pc, #48]	; (8014e34 <__libc_init_array+0x44>)
 8014e04:	f003 f986 	bl	8018114 <_init>
 8014e08:	1b64      	subs	r4, r4, r5
 8014e0a:	10a4      	asrs	r4, r4, #2
 8014e0c:	2600      	movs	r6, #0
 8014e0e:	42a6      	cmp	r6, r4
 8014e10:	d105      	bne.n	8014e1e <__libc_init_array+0x2e>
 8014e12:	bd70      	pop	{r4, r5, r6, pc}
 8014e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e18:	4798      	blx	r3
 8014e1a:	3601      	adds	r6, #1
 8014e1c:	e7ee      	b.n	8014dfc <__libc_init_array+0xc>
 8014e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014e22:	4798      	blx	r3
 8014e24:	3601      	adds	r6, #1
 8014e26:	e7f2      	b.n	8014e0e <__libc_init_array+0x1e>
 8014e28:	080228ec 	.word	0x080228ec
 8014e2c:	080228ec 	.word	0x080228ec
 8014e30:	080228ec 	.word	0x080228ec
 8014e34:	080228f0 	.word	0x080228f0

08014e38 <memcpy>:
 8014e38:	440a      	add	r2, r1
 8014e3a:	4291      	cmp	r1, r2
 8014e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014e40:	d100      	bne.n	8014e44 <memcpy+0xc>
 8014e42:	4770      	bx	lr
 8014e44:	b510      	push	{r4, lr}
 8014e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014e4e:	4291      	cmp	r1, r2
 8014e50:	d1f9      	bne.n	8014e46 <memcpy+0xe>
 8014e52:	bd10      	pop	{r4, pc}

08014e54 <memset>:
 8014e54:	4402      	add	r2, r0
 8014e56:	4603      	mov	r3, r0
 8014e58:	4293      	cmp	r3, r2
 8014e5a:	d100      	bne.n	8014e5e <memset+0xa>
 8014e5c:	4770      	bx	lr
 8014e5e:	f803 1b01 	strb.w	r1, [r3], #1
 8014e62:	e7f9      	b.n	8014e58 <memset+0x4>

08014e64 <strcpy>:
 8014e64:	4603      	mov	r3, r0
 8014e66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014e6a:	f803 2b01 	strb.w	r2, [r3], #1
 8014e6e:	2a00      	cmp	r2, #0
 8014e70:	d1f9      	bne.n	8014e66 <strcpy+0x2>
 8014e72:	4770      	bx	lr

08014e74 <sulp>:
 8014e74:	b570      	push	{r4, r5, r6, lr}
 8014e76:	4604      	mov	r4, r0
 8014e78:	460d      	mov	r5, r1
 8014e7a:	ec45 4b10 	vmov	d0, r4, r5
 8014e7e:	4616      	mov	r6, r2
 8014e80:	f001 fe54 	bl	8016b2c <__ulp>
 8014e84:	ec51 0b10 	vmov	r0, r1, d0
 8014e88:	b17e      	cbz	r6, 8014eaa <sulp+0x36>
 8014e8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8014e8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	dd09      	ble.n	8014eaa <sulp+0x36>
 8014e96:	051b      	lsls	r3, r3, #20
 8014e98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8014e9c:	2400      	movs	r4, #0
 8014e9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8014ea2:	4622      	mov	r2, r4
 8014ea4:	462b      	mov	r3, r5
 8014ea6:	f7eb fbbf 	bl	8000628 <__aeabi_dmul>
 8014eaa:	bd70      	pop	{r4, r5, r6, pc}
 8014eac:	0000      	movs	r0, r0
	...

08014eb0 <_strtod_l>:
 8014eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014eb4:	b0a3      	sub	sp, #140	; 0x8c
 8014eb6:	461f      	mov	r7, r3
 8014eb8:	2300      	movs	r3, #0
 8014eba:	931e      	str	r3, [sp, #120]	; 0x78
 8014ebc:	4ba4      	ldr	r3, [pc, #656]	; (8015150 <_strtod_l+0x2a0>)
 8014ebe:	9219      	str	r2, [sp, #100]	; 0x64
 8014ec0:	681b      	ldr	r3, [r3, #0]
 8014ec2:	9307      	str	r3, [sp, #28]
 8014ec4:	4604      	mov	r4, r0
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	4688      	mov	r8, r1
 8014eca:	f7eb f993 	bl	80001f4 <strlen>
 8014ece:	f04f 0a00 	mov.w	sl, #0
 8014ed2:	4605      	mov	r5, r0
 8014ed4:	f04f 0b00 	mov.w	fp, #0
 8014ed8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014edc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ede:	781a      	ldrb	r2, [r3, #0]
 8014ee0:	2a2b      	cmp	r2, #43	; 0x2b
 8014ee2:	d04c      	beq.n	8014f7e <_strtod_l+0xce>
 8014ee4:	d839      	bhi.n	8014f5a <_strtod_l+0xaa>
 8014ee6:	2a0d      	cmp	r2, #13
 8014ee8:	d832      	bhi.n	8014f50 <_strtod_l+0xa0>
 8014eea:	2a08      	cmp	r2, #8
 8014eec:	d832      	bhi.n	8014f54 <_strtod_l+0xa4>
 8014eee:	2a00      	cmp	r2, #0
 8014ef0:	d03c      	beq.n	8014f6c <_strtod_l+0xbc>
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	930e      	str	r3, [sp, #56]	; 0x38
 8014ef6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8014ef8:	7833      	ldrb	r3, [r6, #0]
 8014efa:	2b30      	cmp	r3, #48	; 0x30
 8014efc:	f040 80b4 	bne.w	8015068 <_strtod_l+0x1b8>
 8014f00:	7873      	ldrb	r3, [r6, #1]
 8014f02:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8014f06:	2b58      	cmp	r3, #88	; 0x58
 8014f08:	d16c      	bne.n	8014fe4 <_strtod_l+0x134>
 8014f0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f0c:	9301      	str	r3, [sp, #4]
 8014f0e:	ab1e      	add	r3, sp, #120	; 0x78
 8014f10:	9702      	str	r7, [sp, #8]
 8014f12:	9300      	str	r3, [sp, #0]
 8014f14:	4a8f      	ldr	r2, [pc, #572]	; (8015154 <_strtod_l+0x2a4>)
 8014f16:	ab1f      	add	r3, sp, #124	; 0x7c
 8014f18:	a91d      	add	r1, sp, #116	; 0x74
 8014f1a:	4620      	mov	r0, r4
 8014f1c:	f000 ff80 	bl	8015e20 <__gethex>
 8014f20:	f010 0707 	ands.w	r7, r0, #7
 8014f24:	4605      	mov	r5, r0
 8014f26:	d005      	beq.n	8014f34 <_strtod_l+0x84>
 8014f28:	2f06      	cmp	r7, #6
 8014f2a:	d12a      	bne.n	8014f82 <_strtod_l+0xd2>
 8014f2c:	3601      	adds	r6, #1
 8014f2e:	2300      	movs	r3, #0
 8014f30:	961d      	str	r6, [sp, #116]	; 0x74
 8014f32:	930e      	str	r3, [sp, #56]	; 0x38
 8014f34:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f36:	2b00      	cmp	r3, #0
 8014f38:	f040 8596 	bne.w	8015a68 <_strtod_l+0xbb8>
 8014f3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8014f3e:	b1db      	cbz	r3, 8014f78 <_strtod_l+0xc8>
 8014f40:	4652      	mov	r2, sl
 8014f42:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8014f46:	ec43 2b10 	vmov	d0, r2, r3
 8014f4a:	b023      	add	sp, #140	; 0x8c
 8014f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014f50:	2a20      	cmp	r2, #32
 8014f52:	d1ce      	bne.n	8014ef2 <_strtod_l+0x42>
 8014f54:	3301      	adds	r3, #1
 8014f56:	931d      	str	r3, [sp, #116]	; 0x74
 8014f58:	e7c0      	b.n	8014edc <_strtod_l+0x2c>
 8014f5a:	2a2d      	cmp	r2, #45	; 0x2d
 8014f5c:	d1c9      	bne.n	8014ef2 <_strtod_l+0x42>
 8014f5e:	2201      	movs	r2, #1
 8014f60:	920e      	str	r2, [sp, #56]	; 0x38
 8014f62:	1c5a      	adds	r2, r3, #1
 8014f64:	921d      	str	r2, [sp, #116]	; 0x74
 8014f66:	785b      	ldrb	r3, [r3, #1]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d1c4      	bne.n	8014ef6 <_strtod_l+0x46>
 8014f6c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8014f6e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	f040 8576 	bne.w	8015a64 <_strtod_l+0xbb4>
 8014f78:	4652      	mov	r2, sl
 8014f7a:	465b      	mov	r3, fp
 8014f7c:	e7e3      	b.n	8014f46 <_strtod_l+0x96>
 8014f7e:	2200      	movs	r2, #0
 8014f80:	e7ee      	b.n	8014f60 <_strtod_l+0xb0>
 8014f82:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8014f84:	b13a      	cbz	r2, 8014f96 <_strtod_l+0xe6>
 8014f86:	2135      	movs	r1, #53	; 0x35
 8014f88:	a820      	add	r0, sp, #128	; 0x80
 8014f8a:	f001 feda 	bl	8016d42 <__copybits>
 8014f8e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8014f90:	4620      	mov	r0, r4
 8014f92:	f001 fa9f 	bl	80164d4 <_Bfree>
 8014f96:	3f01      	subs	r7, #1
 8014f98:	2f05      	cmp	r7, #5
 8014f9a:	d807      	bhi.n	8014fac <_strtod_l+0xfc>
 8014f9c:	e8df f007 	tbb	[pc, r7]
 8014fa0:	1d180b0e 	.word	0x1d180b0e
 8014fa4:	030e      	.short	0x030e
 8014fa6:	f04f 0b00 	mov.w	fp, #0
 8014faa:	46da      	mov	sl, fp
 8014fac:	0728      	lsls	r0, r5, #28
 8014fae:	d5c1      	bpl.n	8014f34 <_strtod_l+0x84>
 8014fb0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8014fb4:	e7be      	b.n	8014f34 <_strtod_l+0x84>
 8014fb6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8014fba:	e7f7      	b.n	8014fac <_strtod_l+0xfc>
 8014fbc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8014fc0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8014fc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8014fc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8014fca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8014fce:	e7ed      	b.n	8014fac <_strtod_l+0xfc>
 8014fd0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015158 <_strtod_l+0x2a8>
 8014fd4:	f04f 0a00 	mov.w	sl, #0
 8014fd8:	e7e8      	b.n	8014fac <_strtod_l+0xfc>
 8014fda:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8014fde:	f04f 3aff 	mov.w	sl, #4294967295
 8014fe2:	e7e3      	b.n	8014fac <_strtod_l+0xfc>
 8014fe4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014fe6:	1c5a      	adds	r2, r3, #1
 8014fe8:	921d      	str	r2, [sp, #116]	; 0x74
 8014fea:	785b      	ldrb	r3, [r3, #1]
 8014fec:	2b30      	cmp	r3, #48	; 0x30
 8014fee:	d0f9      	beq.n	8014fe4 <_strtod_l+0x134>
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d09f      	beq.n	8014f34 <_strtod_l+0x84>
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	f04f 0900 	mov.w	r9, #0
 8014ffa:	9304      	str	r3, [sp, #16]
 8014ffc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8014ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8015000:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015004:	464f      	mov	r7, r9
 8015006:	220a      	movs	r2, #10
 8015008:	981d      	ldr	r0, [sp, #116]	; 0x74
 801500a:	7806      	ldrb	r6, [r0, #0]
 801500c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015010:	b2d9      	uxtb	r1, r3
 8015012:	2909      	cmp	r1, #9
 8015014:	d92a      	bls.n	801506c <_strtod_l+0x1bc>
 8015016:	9907      	ldr	r1, [sp, #28]
 8015018:	462a      	mov	r2, r5
 801501a:	f002 fa4f 	bl	80174bc <strncmp>
 801501e:	b398      	cbz	r0, 8015088 <_strtod_l+0x1d8>
 8015020:	2000      	movs	r0, #0
 8015022:	4633      	mov	r3, r6
 8015024:	463d      	mov	r5, r7
 8015026:	9007      	str	r0, [sp, #28]
 8015028:	4602      	mov	r2, r0
 801502a:	2b65      	cmp	r3, #101	; 0x65
 801502c:	d001      	beq.n	8015032 <_strtod_l+0x182>
 801502e:	2b45      	cmp	r3, #69	; 0x45
 8015030:	d118      	bne.n	8015064 <_strtod_l+0x1b4>
 8015032:	b91d      	cbnz	r5, 801503c <_strtod_l+0x18c>
 8015034:	9b04      	ldr	r3, [sp, #16]
 8015036:	4303      	orrs	r3, r0
 8015038:	d098      	beq.n	8014f6c <_strtod_l+0xbc>
 801503a:	2500      	movs	r5, #0
 801503c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8015040:	f108 0301 	add.w	r3, r8, #1
 8015044:	931d      	str	r3, [sp, #116]	; 0x74
 8015046:	f898 3001 	ldrb.w	r3, [r8, #1]
 801504a:	2b2b      	cmp	r3, #43	; 0x2b
 801504c:	d075      	beq.n	801513a <_strtod_l+0x28a>
 801504e:	2b2d      	cmp	r3, #45	; 0x2d
 8015050:	d07b      	beq.n	801514a <_strtod_l+0x29a>
 8015052:	f04f 0c00 	mov.w	ip, #0
 8015056:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801505a:	2909      	cmp	r1, #9
 801505c:	f240 8082 	bls.w	8015164 <_strtod_l+0x2b4>
 8015060:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015064:	2600      	movs	r6, #0
 8015066:	e09d      	b.n	80151a4 <_strtod_l+0x2f4>
 8015068:	2300      	movs	r3, #0
 801506a:	e7c4      	b.n	8014ff6 <_strtod_l+0x146>
 801506c:	2f08      	cmp	r7, #8
 801506e:	bfd8      	it	le
 8015070:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015072:	f100 0001 	add.w	r0, r0, #1
 8015076:	bfda      	itte	le
 8015078:	fb02 3301 	mlale	r3, r2, r1, r3
 801507c:	9309      	strle	r3, [sp, #36]	; 0x24
 801507e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015082:	3701      	adds	r7, #1
 8015084:	901d      	str	r0, [sp, #116]	; 0x74
 8015086:	e7bf      	b.n	8015008 <_strtod_l+0x158>
 8015088:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801508a:	195a      	adds	r2, r3, r5
 801508c:	921d      	str	r2, [sp, #116]	; 0x74
 801508e:	5d5b      	ldrb	r3, [r3, r5]
 8015090:	2f00      	cmp	r7, #0
 8015092:	d037      	beq.n	8015104 <_strtod_l+0x254>
 8015094:	9007      	str	r0, [sp, #28]
 8015096:	463d      	mov	r5, r7
 8015098:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801509c:	2a09      	cmp	r2, #9
 801509e:	d912      	bls.n	80150c6 <_strtod_l+0x216>
 80150a0:	2201      	movs	r2, #1
 80150a2:	e7c2      	b.n	801502a <_strtod_l+0x17a>
 80150a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80150a6:	1c5a      	adds	r2, r3, #1
 80150a8:	921d      	str	r2, [sp, #116]	; 0x74
 80150aa:	785b      	ldrb	r3, [r3, #1]
 80150ac:	3001      	adds	r0, #1
 80150ae:	2b30      	cmp	r3, #48	; 0x30
 80150b0:	d0f8      	beq.n	80150a4 <_strtod_l+0x1f4>
 80150b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80150b6:	2a08      	cmp	r2, #8
 80150b8:	f200 84db 	bhi.w	8015a72 <_strtod_l+0xbc2>
 80150bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80150be:	9007      	str	r0, [sp, #28]
 80150c0:	2000      	movs	r0, #0
 80150c2:	920a      	str	r2, [sp, #40]	; 0x28
 80150c4:	4605      	mov	r5, r0
 80150c6:	3b30      	subs	r3, #48	; 0x30
 80150c8:	f100 0201 	add.w	r2, r0, #1
 80150cc:	d014      	beq.n	80150f8 <_strtod_l+0x248>
 80150ce:	9907      	ldr	r1, [sp, #28]
 80150d0:	4411      	add	r1, r2
 80150d2:	9107      	str	r1, [sp, #28]
 80150d4:	462a      	mov	r2, r5
 80150d6:	eb00 0e05 	add.w	lr, r0, r5
 80150da:	210a      	movs	r1, #10
 80150dc:	4572      	cmp	r2, lr
 80150de:	d113      	bne.n	8015108 <_strtod_l+0x258>
 80150e0:	182a      	adds	r2, r5, r0
 80150e2:	2a08      	cmp	r2, #8
 80150e4:	f105 0501 	add.w	r5, r5, #1
 80150e8:	4405      	add	r5, r0
 80150ea:	dc1c      	bgt.n	8015126 <_strtod_l+0x276>
 80150ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80150ee:	220a      	movs	r2, #10
 80150f0:	fb02 3301 	mla	r3, r2, r1, r3
 80150f4:	9309      	str	r3, [sp, #36]	; 0x24
 80150f6:	2200      	movs	r2, #0
 80150f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80150fa:	1c59      	adds	r1, r3, #1
 80150fc:	911d      	str	r1, [sp, #116]	; 0x74
 80150fe:	785b      	ldrb	r3, [r3, #1]
 8015100:	4610      	mov	r0, r2
 8015102:	e7c9      	b.n	8015098 <_strtod_l+0x1e8>
 8015104:	4638      	mov	r0, r7
 8015106:	e7d2      	b.n	80150ae <_strtod_l+0x1fe>
 8015108:	2a08      	cmp	r2, #8
 801510a:	dc04      	bgt.n	8015116 <_strtod_l+0x266>
 801510c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801510e:	434e      	muls	r6, r1
 8015110:	9609      	str	r6, [sp, #36]	; 0x24
 8015112:	3201      	adds	r2, #1
 8015114:	e7e2      	b.n	80150dc <_strtod_l+0x22c>
 8015116:	f102 0c01 	add.w	ip, r2, #1
 801511a:	f1bc 0f10 	cmp.w	ip, #16
 801511e:	bfd8      	it	le
 8015120:	fb01 f909 	mulle.w	r9, r1, r9
 8015124:	e7f5      	b.n	8015112 <_strtod_l+0x262>
 8015126:	2d10      	cmp	r5, #16
 8015128:	bfdc      	itt	le
 801512a:	220a      	movle	r2, #10
 801512c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015130:	e7e1      	b.n	80150f6 <_strtod_l+0x246>
 8015132:	2300      	movs	r3, #0
 8015134:	9307      	str	r3, [sp, #28]
 8015136:	2201      	movs	r2, #1
 8015138:	e77c      	b.n	8015034 <_strtod_l+0x184>
 801513a:	f04f 0c00 	mov.w	ip, #0
 801513e:	f108 0302 	add.w	r3, r8, #2
 8015142:	931d      	str	r3, [sp, #116]	; 0x74
 8015144:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015148:	e785      	b.n	8015056 <_strtod_l+0x1a6>
 801514a:	f04f 0c01 	mov.w	ip, #1
 801514e:	e7f6      	b.n	801513e <_strtod_l+0x28e>
 8015150:	0802268c 	.word	0x0802268c
 8015154:	080224bc 	.word	0x080224bc
 8015158:	7ff00000 	.word	0x7ff00000
 801515c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801515e:	1c59      	adds	r1, r3, #1
 8015160:	911d      	str	r1, [sp, #116]	; 0x74
 8015162:	785b      	ldrb	r3, [r3, #1]
 8015164:	2b30      	cmp	r3, #48	; 0x30
 8015166:	d0f9      	beq.n	801515c <_strtod_l+0x2ac>
 8015168:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801516c:	2908      	cmp	r1, #8
 801516e:	f63f af79 	bhi.w	8015064 <_strtod_l+0x1b4>
 8015172:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015176:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015178:	9308      	str	r3, [sp, #32]
 801517a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801517c:	1c59      	adds	r1, r3, #1
 801517e:	911d      	str	r1, [sp, #116]	; 0x74
 8015180:	785b      	ldrb	r3, [r3, #1]
 8015182:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8015186:	2e09      	cmp	r6, #9
 8015188:	d937      	bls.n	80151fa <_strtod_l+0x34a>
 801518a:	9e08      	ldr	r6, [sp, #32]
 801518c:	1b89      	subs	r1, r1, r6
 801518e:	2908      	cmp	r1, #8
 8015190:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015194:	dc02      	bgt.n	801519c <_strtod_l+0x2ec>
 8015196:	4576      	cmp	r6, lr
 8015198:	bfa8      	it	ge
 801519a:	4676      	movge	r6, lr
 801519c:	f1bc 0f00 	cmp.w	ip, #0
 80151a0:	d000      	beq.n	80151a4 <_strtod_l+0x2f4>
 80151a2:	4276      	negs	r6, r6
 80151a4:	2d00      	cmp	r5, #0
 80151a6:	d14f      	bne.n	8015248 <_strtod_l+0x398>
 80151a8:	9904      	ldr	r1, [sp, #16]
 80151aa:	4301      	orrs	r1, r0
 80151ac:	f47f aec2 	bne.w	8014f34 <_strtod_l+0x84>
 80151b0:	2a00      	cmp	r2, #0
 80151b2:	f47f aedb 	bne.w	8014f6c <_strtod_l+0xbc>
 80151b6:	2b69      	cmp	r3, #105	; 0x69
 80151b8:	d027      	beq.n	801520a <_strtod_l+0x35a>
 80151ba:	dc24      	bgt.n	8015206 <_strtod_l+0x356>
 80151bc:	2b49      	cmp	r3, #73	; 0x49
 80151be:	d024      	beq.n	801520a <_strtod_l+0x35a>
 80151c0:	2b4e      	cmp	r3, #78	; 0x4e
 80151c2:	f47f aed3 	bne.w	8014f6c <_strtod_l+0xbc>
 80151c6:	499e      	ldr	r1, [pc, #632]	; (8015440 <_strtod_l+0x590>)
 80151c8:	a81d      	add	r0, sp, #116	; 0x74
 80151ca:	f001 f881 	bl	80162d0 <__match>
 80151ce:	2800      	cmp	r0, #0
 80151d0:	f43f aecc 	beq.w	8014f6c <_strtod_l+0xbc>
 80151d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80151d6:	781b      	ldrb	r3, [r3, #0]
 80151d8:	2b28      	cmp	r3, #40	; 0x28
 80151da:	d12d      	bne.n	8015238 <_strtod_l+0x388>
 80151dc:	4999      	ldr	r1, [pc, #612]	; (8015444 <_strtod_l+0x594>)
 80151de:	aa20      	add	r2, sp, #128	; 0x80
 80151e0:	a81d      	add	r0, sp, #116	; 0x74
 80151e2:	f001 f889 	bl	80162f8 <__hexnan>
 80151e6:	2805      	cmp	r0, #5
 80151e8:	d126      	bne.n	8015238 <_strtod_l+0x388>
 80151ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80151ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80151f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80151f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80151f8:	e69c      	b.n	8014f34 <_strtod_l+0x84>
 80151fa:	210a      	movs	r1, #10
 80151fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015200:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015204:	e7b9      	b.n	801517a <_strtod_l+0x2ca>
 8015206:	2b6e      	cmp	r3, #110	; 0x6e
 8015208:	e7db      	b.n	80151c2 <_strtod_l+0x312>
 801520a:	498f      	ldr	r1, [pc, #572]	; (8015448 <_strtod_l+0x598>)
 801520c:	a81d      	add	r0, sp, #116	; 0x74
 801520e:	f001 f85f 	bl	80162d0 <__match>
 8015212:	2800      	cmp	r0, #0
 8015214:	f43f aeaa 	beq.w	8014f6c <_strtod_l+0xbc>
 8015218:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801521a:	498c      	ldr	r1, [pc, #560]	; (801544c <_strtod_l+0x59c>)
 801521c:	3b01      	subs	r3, #1
 801521e:	a81d      	add	r0, sp, #116	; 0x74
 8015220:	931d      	str	r3, [sp, #116]	; 0x74
 8015222:	f001 f855 	bl	80162d0 <__match>
 8015226:	b910      	cbnz	r0, 801522e <_strtod_l+0x37e>
 8015228:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801522a:	3301      	adds	r3, #1
 801522c:	931d      	str	r3, [sp, #116]	; 0x74
 801522e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801545c <_strtod_l+0x5ac>
 8015232:	f04f 0a00 	mov.w	sl, #0
 8015236:	e67d      	b.n	8014f34 <_strtod_l+0x84>
 8015238:	4885      	ldr	r0, [pc, #532]	; (8015450 <_strtod_l+0x5a0>)
 801523a:	f002 f921 	bl	8017480 <nan>
 801523e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015242:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015246:	e675      	b.n	8014f34 <_strtod_l+0x84>
 8015248:	9b07      	ldr	r3, [sp, #28]
 801524a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801524c:	1af3      	subs	r3, r6, r3
 801524e:	2f00      	cmp	r7, #0
 8015250:	bf08      	it	eq
 8015252:	462f      	moveq	r7, r5
 8015254:	2d10      	cmp	r5, #16
 8015256:	9308      	str	r3, [sp, #32]
 8015258:	46a8      	mov	r8, r5
 801525a:	bfa8      	it	ge
 801525c:	f04f 0810 	movge.w	r8, #16
 8015260:	f7eb f968 	bl	8000534 <__aeabi_ui2d>
 8015264:	2d09      	cmp	r5, #9
 8015266:	4682      	mov	sl, r0
 8015268:	468b      	mov	fp, r1
 801526a:	dd13      	ble.n	8015294 <_strtod_l+0x3e4>
 801526c:	4b79      	ldr	r3, [pc, #484]	; (8015454 <_strtod_l+0x5a4>)
 801526e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015272:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015276:	f7eb f9d7 	bl	8000628 <__aeabi_dmul>
 801527a:	4682      	mov	sl, r0
 801527c:	4648      	mov	r0, r9
 801527e:	468b      	mov	fp, r1
 8015280:	f7eb f958 	bl	8000534 <__aeabi_ui2d>
 8015284:	4602      	mov	r2, r0
 8015286:	460b      	mov	r3, r1
 8015288:	4650      	mov	r0, sl
 801528a:	4659      	mov	r1, fp
 801528c:	f7eb f816 	bl	80002bc <__adddf3>
 8015290:	4682      	mov	sl, r0
 8015292:	468b      	mov	fp, r1
 8015294:	2d0f      	cmp	r5, #15
 8015296:	dc38      	bgt.n	801530a <_strtod_l+0x45a>
 8015298:	9b08      	ldr	r3, [sp, #32]
 801529a:	2b00      	cmp	r3, #0
 801529c:	f43f ae4a 	beq.w	8014f34 <_strtod_l+0x84>
 80152a0:	dd24      	ble.n	80152ec <_strtod_l+0x43c>
 80152a2:	2b16      	cmp	r3, #22
 80152a4:	dc0b      	bgt.n	80152be <_strtod_l+0x40e>
 80152a6:	4d6b      	ldr	r5, [pc, #428]	; (8015454 <_strtod_l+0x5a4>)
 80152a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80152ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80152b0:	4652      	mov	r2, sl
 80152b2:	465b      	mov	r3, fp
 80152b4:	f7eb f9b8 	bl	8000628 <__aeabi_dmul>
 80152b8:	4682      	mov	sl, r0
 80152ba:	468b      	mov	fp, r1
 80152bc:	e63a      	b.n	8014f34 <_strtod_l+0x84>
 80152be:	9a08      	ldr	r2, [sp, #32]
 80152c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80152c4:	4293      	cmp	r3, r2
 80152c6:	db20      	blt.n	801530a <_strtod_l+0x45a>
 80152c8:	4c62      	ldr	r4, [pc, #392]	; (8015454 <_strtod_l+0x5a4>)
 80152ca:	f1c5 050f 	rsb	r5, r5, #15
 80152ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80152d2:	4652      	mov	r2, sl
 80152d4:	465b      	mov	r3, fp
 80152d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80152da:	f7eb f9a5 	bl	8000628 <__aeabi_dmul>
 80152de:	9b08      	ldr	r3, [sp, #32]
 80152e0:	1b5d      	subs	r5, r3, r5
 80152e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80152e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80152ea:	e7e3      	b.n	80152b4 <_strtod_l+0x404>
 80152ec:	9b08      	ldr	r3, [sp, #32]
 80152ee:	3316      	adds	r3, #22
 80152f0:	db0b      	blt.n	801530a <_strtod_l+0x45a>
 80152f2:	9b07      	ldr	r3, [sp, #28]
 80152f4:	4a57      	ldr	r2, [pc, #348]	; (8015454 <_strtod_l+0x5a4>)
 80152f6:	1b9e      	subs	r6, r3, r6
 80152f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80152fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015300:	4650      	mov	r0, sl
 8015302:	4659      	mov	r1, fp
 8015304:	f7eb faba 	bl	800087c <__aeabi_ddiv>
 8015308:	e7d6      	b.n	80152b8 <_strtod_l+0x408>
 801530a:	9b08      	ldr	r3, [sp, #32]
 801530c:	eba5 0808 	sub.w	r8, r5, r8
 8015310:	4498      	add	r8, r3
 8015312:	f1b8 0f00 	cmp.w	r8, #0
 8015316:	dd71      	ble.n	80153fc <_strtod_l+0x54c>
 8015318:	f018 030f 	ands.w	r3, r8, #15
 801531c:	d00a      	beq.n	8015334 <_strtod_l+0x484>
 801531e:	494d      	ldr	r1, [pc, #308]	; (8015454 <_strtod_l+0x5a4>)
 8015320:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015324:	4652      	mov	r2, sl
 8015326:	465b      	mov	r3, fp
 8015328:	e9d1 0100 	ldrd	r0, r1, [r1]
 801532c:	f7eb f97c 	bl	8000628 <__aeabi_dmul>
 8015330:	4682      	mov	sl, r0
 8015332:	468b      	mov	fp, r1
 8015334:	f038 080f 	bics.w	r8, r8, #15
 8015338:	d04d      	beq.n	80153d6 <_strtod_l+0x526>
 801533a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801533e:	dd22      	ble.n	8015386 <_strtod_l+0x4d6>
 8015340:	2500      	movs	r5, #0
 8015342:	462e      	mov	r6, r5
 8015344:	9509      	str	r5, [sp, #36]	; 0x24
 8015346:	9507      	str	r5, [sp, #28]
 8015348:	2322      	movs	r3, #34	; 0x22
 801534a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801545c <_strtod_l+0x5ac>
 801534e:	6023      	str	r3, [r4, #0]
 8015350:	f04f 0a00 	mov.w	sl, #0
 8015354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015356:	2b00      	cmp	r3, #0
 8015358:	f43f adec 	beq.w	8014f34 <_strtod_l+0x84>
 801535c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801535e:	4620      	mov	r0, r4
 8015360:	f001 f8b8 	bl	80164d4 <_Bfree>
 8015364:	9907      	ldr	r1, [sp, #28]
 8015366:	4620      	mov	r0, r4
 8015368:	f001 f8b4 	bl	80164d4 <_Bfree>
 801536c:	4631      	mov	r1, r6
 801536e:	4620      	mov	r0, r4
 8015370:	f001 f8b0 	bl	80164d4 <_Bfree>
 8015374:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015376:	4620      	mov	r0, r4
 8015378:	f001 f8ac 	bl	80164d4 <_Bfree>
 801537c:	4629      	mov	r1, r5
 801537e:	4620      	mov	r0, r4
 8015380:	f001 f8a8 	bl	80164d4 <_Bfree>
 8015384:	e5d6      	b.n	8014f34 <_strtod_l+0x84>
 8015386:	2300      	movs	r3, #0
 8015388:	ea4f 1828 	mov.w	r8, r8, asr #4
 801538c:	4650      	mov	r0, sl
 801538e:	4659      	mov	r1, fp
 8015390:	4699      	mov	r9, r3
 8015392:	f1b8 0f01 	cmp.w	r8, #1
 8015396:	dc21      	bgt.n	80153dc <_strtod_l+0x52c>
 8015398:	b10b      	cbz	r3, 801539e <_strtod_l+0x4ee>
 801539a:	4682      	mov	sl, r0
 801539c:	468b      	mov	fp, r1
 801539e:	4b2e      	ldr	r3, [pc, #184]	; (8015458 <_strtod_l+0x5a8>)
 80153a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80153a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80153a8:	4652      	mov	r2, sl
 80153aa:	465b      	mov	r3, fp
 80153ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80153b0:	f7eb f93a 	bl	8000628 <__aeabi_dmul>
 80153b4:	4b29      	ldr	r3, [pc, #164]	; (801545c <_strtod_l+0x5ac>)
 80153b6:	460a      	mov	r2, r1
 80153b8:	400b      	ands	r3, r1
 80153ba:	4929      	ldr	r1, [pc, #164]	; (8015460 <_strtod_l+0x5b0>)
 80153bc:	428b      	cmp	r3, r1
 80153be:	4682      	mov	sl, r0
 80153c0:	d8be      	bhi.n	8015340 <_strtod_l+0x490>
 80153c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80153c6:	428b      	cmp	r3, r1
 80153c8:	bf86      	itte	hi
 80153ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015464 <_strtod_l+0x5b4>
 80153ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80153d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80153d6:	2300      	movs	r3, #0
 80153d8:	9304      	str	r3, [sp, #16]
 80153da:	e081      	b.n	80154e0 <_strtod_l+0x630>
 80153dc:	f018 0f01 	tst.w	r8, #1
 80153e0:	d007      	beq.n	80153f2 <_strtod_l+0x542>
 80153e2:	4b1d      	ldr	r3, [pc, #116]	; (8015458 <_strtod_l+0x5a8>)
 80153e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80153e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ec:	f7eb f91c 	bl	8000628 <__aeabi_dmul>
 80153f0:	2301      	movs	r3, #1
 80153f2:	f109 0901 	add.w	r9, r9, #1
 80153f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80153fa:	e7ca      	b.n	8015392 <_strtod_l+0x4e2>
 80153fc:	d0eb      	beq.n	80153d6 <_strtod_l+0x526>
 80153fe:	f1c8 0800 	rsb	r8, r8, #0
 8015402:	f018 020f 	ands.w	r2, r8, #15
 8015406:	d00a      	beq.n	801541e <_strtod_l+0x56e>
 8015408:	4b12      	ldr	r3, [pc, #72]	; (8015454 <_strtod_l+0x5a4>)
 801540a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801540e:	4650      	mov	r0, sl
 8015410:	4659      	mov	r1, fp
 8015412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015416:	f7eb fa31 	bl	800087c <__aeabi_ddiv>
 801541a:	4682      	mov	sl, r0
 801541c:	468b      	mov	fp, r1
 801541e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015422:	d0d8      	beq.n	80153d6 <_strtod_l+0x526>
 8015424:	f1b8 0f1f 	cmp.w	r8, #31
 8015428:	dd1e      	ble.n	8015468 <_strtod_l+0x5b8>
 801542a:	2500      	movs	r5, #0
 801542c:	462e      	mov	r6, r5
 801542e:	9509      	str	r5, [sp, #36]	; 0x24
 8015430:	9507      	str	r5, [sp, #28]
 8015432:	2322      	movs	r3, #34	; 0x22
 8015434:	f04f 0a00 	mov.w	sl, #0
 8015438:	f04f 0b00 	mov.w	fp, #0
 801543c:	6023      	str	r3, [r4, #0]
 801543e:	e789      	b.n	8015354 <_strtod_l+0x4a4>
 8015440:	080224b9 	.word	0x080224b9
 8015444:	080224d0 	.word	0x080224d0
 8015448:	080224b0 	.word	0x080224b0
 801544c:	080224b3 	.word	0x080224b3
 8015450:	08022882 	.word	0x08022882
 8015454:	08022740 	.word	0x08022740
 8015458:	08022718 	.word	0x08022718
 801545c:	7ff00000 	.word	0x7ff00000
 8015460:	7ca00000 	.word	0x7ca00000
 8015464:	7fefffff 	.word	0x7fefffff
 8015468:	f018 0310 	ands.w	r3, r8, #16
 801546c:	bf18      	it	ne
 801546e:	236a      	movne	r3, #106	; 0x6a
 8015470:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8015828 <_strtod_l+0x978>
 8015474:	9304      	str	r3, [sp, #16]
 8015476:	4650      	mov	r0, sl
 8015478:	4659      	mov	r1, fp
 801547a:	2300      	movs	r3, #0
 801547c:	f018 0f01 	tst.w	r8, #1
 8015480:	d004      	beq.n	801548c <_strtod_l+0x5dc>
 8015482:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015486:	f7eb f8cf 	bl	8000628 <__aeabi_dmul>
 801548a:	2301      	movs	r3, #1
 801548c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015490:	f109 0908 	add.w	r9, r9, #8
 8015494:	d1f2      	bne.n	801547c <_strtod_l+0x5cc>
 8015496:	b10b      	cbz	r3, 801549c <_strtod_l+0x5ec>
 8015498:	4682      	mov	sl, r0
 801549a:	468b      	mov	fp, r1
 801549c:	9b04      	ldr	r3, [sp, #16]
 801549e:	b1bb      	cbz	r3, 80154d0 <_strtod_l+0x620>
 80154a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80154a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	4659      	mov	r1, fp
 80154ac:	dd10      	ble.n	80154d0 <_strtod_l+0x620>
 80154ae:	2b1f      	cmp	r3, #31
 80154b0:	f340 8128 	ble.w	8015704 <_strtod_l+0x854>
 80154b4:	2b34      	cmp	r3, #52	; 0x34
 80154b6:	bfde      	ittt	le
 80154b8:	3b20      	suble	r3, #32
 80154ba:	f04f 32ff 	movle.w	r2, #4294967295
 80154be:	fa02 f303 	lslle.w	r3, r2, r3
 80154c2:	f04f 0a00 	mov.w	sl, #0
 80154c6:	bfcc      	ite	gt
 80154c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80154cc:	ea03 0b01 	andle.w	fp, r3, r1
 80154d0:	2200      	movs	r2, #0
 80154d2:	2300      	movs	r3, #0
 80154d4:	4650      	mov	r0, sl
 80154d6:	4659      	mov	r1, fp
 80154d8:	f7eb fb0e 	bl	8000af8 <__aeabi_dcmpeq>
 80154dc:	2800      	cmp	r0, #0
 80154de:	d1a4      	bne.n	801542a <_strtod_l+0x57a>
 80154e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80154e2:	9300      	str	r3, [sp, #0]
 80154e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80154e6:	462b      	mov	r3, r5
 80154e8:	463a      	mov	r2, r7
 80154ea:	4620      	mov	r0, r4
 80154ec:	f001 f85e 	bl	80165ac <__s2b>
 80154f0:	9009      	str	r0, [sp, #36]	; 0x24
 80154f2:	2800      	cmp	r0, #0
 80154f4:	f43f af24 	beq.w	8015340 <_strtod_l+0x490>
 80154f8:	9b07      	ldr	r3, [sp, #28]
 80154fa:	1b9e      	subs	r6, r3, r6
 80154fc:	9b08      	ldr	r3, [sp, #32]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	bfb4      	ite	lt
 8015502:	4633      	movlt	r3, r6
 8015504:	2300      	movge	r3, #0
 8015506:	9310      	str	r3, [sp, #64]	; 0x40
 8015508:	9b08      	ldr	r3, [sp, #32]
 801550a:	2500      	movs	r5, #0
 801550c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015510:	9318      	str	r3, [sp, #96]	; 0x60
 8015512:	462e      	mov	r6, r5
 8015514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015516:	4620      	mov	r0, r4
 8015518:	6859      	ldr	r1, [r3, #4]
 801551a:	f000 ff9b 	bl	8016454 <_Balloc>
 801551e:	9007      	str	r0, [sp, #28]
 8015520:	2800      	cmp	r0, #0
 8015522:	f43f af11 	beq.w	8015348 <_strtod_l+0x498>
 8015526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015528:	691a      	ldr	r2, [r3, #16]
 801552a:	3202      	adds	r2, #2
 801552c:	f103 010c 	add.w	r1, r3, #12
 8015530:	0092      	lsls	r2, r2, #2
 8015532:	300c      	adds	r0, #12
 8015534:	f7ff fc80 	bl	8014e38 <memcpy>
 8015538:	ec4b ab10 	vmov	d0, sl, fp
 801553c:	aa20      	add	r2, sp, #128	; 0x80
 801553e:	a91f      	add	r1, sp, #124	; 0x7c
 8015540:	4620      	mov	r0, r4
 8015542:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015546:	f001 fb6d 	bl	8016c24 <__d2b>
 801554a:	901e      	str	r0, [sp, #120]	; 0x78
 801554c:	2800      	cmp	r0, #0
 801554e:	f43f aefb 	beq.w	8015348 <_strtod_l+0x498>
 8015552:	2101      	movs	r1, #1
 8015554:	4620      	mov	r0, r4
 8015556:	f001 f8c3 	bl	80166e0 <__i2b>
 801555a:	4606      	mov	r6, r0
 801555c:	2800      	cmp	r0, #0
 801555e:	f43f aef3 	beq.w	8015348 <_strtod_l+0x498>
 8015562:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015564:	9904      	ldr	r1, [sp, #16]
 8015566:	2b00      	cmp	r3, #0
 8015568:	bfab      	itete	ge
 801556a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801556c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801556e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015570:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015574:	bfac      	ite	ge
 8015576:	eb03 0902 	addge.w	r9, r3, r2
 801557a:	1ad7      	sublt	r7, r2, r3
 801557c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801557e:	eba3 0801 	sub.w	r8, r3, r1
 8015582:	4490      	add	r8, r2
 8015584:	4ba3      	ldr	r3, [pc, #652]	; (8015814 <_strtod_l+0x964>)
 8015586:	f108 38ff 	add.w	r8, r8, #4294967295
 801558a:	4598      	cmp	r8, r3
 801558c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015590:	f280 80cc 	bge.w	801572c <_strtod_l+0x87c>
 8015594:	eba3 0308 	sub.w	r3, r3, r8
 8015598:	2b1f      	cmp	r3, #31
 801559a:	eba2 0203 	sub.w	r2, r2, r3
 801559e:	f04f 0101 	mov.w	r1, #1
 80155a2:	f300 80b6 	bgt.w	8015712 <_strtod_l+0x862>
 80155a6:	fa01 f303 	lsl.w	r3, r1, r3
 80155aa:	9311      	str	r3, [sp, #68]	; 0x44
 80155ac:	2300      	movs	r3, #0
 80155ae:	930c      	str	r3, [sp, #48]	; 0x30
 80155b0:	eb09 0802 	add.w	r8, r9, r2
 80155b4:	9b04      	ldr	r3, [sp, #16]
 80155b6:	45c1      	cmp	r9, r8
 80155b8:	4417      	add	r7, r2
 80155ba:	441f      	add	r7, r3
 80155bc:	464b      	mov	r3, r9
 80155be:	bfa8      	it	ge
 80155c0:	4643      	movge	r3, r8
 80155c2:	42bb      	cmp	r3, r7
 80155c4:	bfa8      	it	ge
 80155c6:	463b      	movge	r3, r7
 80155c8:	2b00      	cmp	r3, #0
 80155ca:	bfc2      	ittt	gt
 80155cc:	eba8 0803 	subgt.w	r8, r8, r3
 80155d0:	1aff      	subgt	r7, r7, r3
 80155d2:	eba9 0903 	subgt.w	r9, r9, r3
 80155d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80155d8:	2b00      	cmp	r3, #0
 80155da:	dd17      	ble.n	801560c <_strtod_l+0x75c>
 80155dc:	4631      	mov	r1, r6
 80155de:	461a      	mov	r2, r3
 80155e0:	4620      	mov	r0, r4
 80155e2:	f001 f939 	bl	8016858 <__pow5mult>
 80155e6:	4606      	mov	r6, r0
 80155e8:	2800      	cmp	r0, #0
 80155ea:	f43f aead 	beq.w	8015348 <_strtod_l+0x498>
 80155ee:	4601      	mov	r1, r0
 80155f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80155f2:	4620      	mov	r0, r4
 80155f4:	f001 f88a 	bl	801670c <__multiply>
 80155f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80155fa:	2800      	cmp	r0, #0
 80155fc:	f43f aea4 	beq.w	8015348 <_strtod_l+0x498>
 8015600:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015602:	4620      	mov	r0, r4
 8015604:	f000 ff66 	bl	80164d4 <_Bfree>
 8015608:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801560a:	931e      	str	r3, [sp, #120]	; 0x78
 801560c:	f1b8 0f00 	cmp.w	r8, #0
 8015610:	f300 8091 	bgt.w	8015736 <_strtod_l+0x886>
 8015614:	9b08      	ldr	r3, [sp, #32]
 8015616:	2b00      	cmp	r3, #0
 8015618:	dd08      	ble.n	801562c <_strtod_l+0x77c>
 801561a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801561c:	9907      	ldr	r1, [sp, #28]
 801561e:	4620      	mov	r0, r4
 8015620:	f001 f91a 	bl	8016858 <__pow5mult>
 8015624:	9007      	str	r0, [sp, #28]
 8015626:	2800      	cmp	r0, #0
 8015628:	f43f ae8e 	beq.w	8015348 <_strtod_l+0x498>
 801562c:	2f00      	cmp	r7, #0
 801562e:	dd08      	ble.n	8015642 <_strtod_l+0x792>
 8015630:	9907      	ldr	r1, [sp, #28]
 8015632:	463a      	mov	r2, r7
 8015634:	4620      	mov	r0, r4
 8015636:	f001 f969 	bl	801690c <__lshift>
 801563a:	9007      	str	r0, [sp, #28]
 801563c:	2800      	cmp	r0, #0
 801563e:	f43f ae83 	beq.w	8015348 <_strtod_l+0x498>
 8015642:	f1b9 0f00 	cmp.w	r9, #0
 8015646:	dd08      	ble.n	801565a <_strtod_l+0x7aa>
 8015648:	4631      	mov	r1, r6
 801564a:	464a      	mov	r2, r9
 801564c:	4620      	mov	r0, r4
 801564e:	f001 f95d 	bl	801690c <__lshift>
 8015652:	4606      	mov	r6, r0
 8015654:	2800      	cmp	r0, #0
 8015656:	f43f ae77 	beq.w	8015348 <_strtod_l+0x498>
 801565a:	9a07      	ldr	r2, [sp, #28]
 801565c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801565e:	4620      	mov	r0, r4
 8015660:	f001 f9dc 	bl	8016a1c <__mdiff>
 8015664:	4605      	mov	r5, r0
 8015666:	2800      	cmp	r0, #0
 8015668:	f43f ae6e 	beq.w	8015348 <_strtod_l+0x498>
 801566c:	68c3      	ldr	r3, [r0, #12]
 801566e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015670:	2300      	movs	r3, #0
 8015672:	60c3      	str	r3, [r0, #12]
 8015674:	4631      	mov	r1, r6
 8015676:	f001 f9b5 	bl	80169e4 <__mcmp>
 801567a:	2800      	cmp	r0, #0
 801567c:	da65      	bge.n	801574a <_strtod_l+0x89a>
 801567e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015680:	ea53 030a 	orrs.w	r3, r3, sl
 8015684:	f040 8087 	bne.w	8015796 <_strtod_l+0x8e6>
 8015688:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801568c:	2b00      	cmp	r3, #0
 801568e:	f040 8082 	bne.w	8015796 <_strtod_l+0x8e6>
 8015692:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015696:	0d1b      	lsrs	r3, r3, #20
 8015698:	051b      	lsls	r3, r3, #20
 801569a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801569e:	d97a      	bls.n	8015796 <_strtod_l+0x8e6>
 80156a0:	696b      	ldr	r3, [r5, #20]
 80156a2:	b913      	cbnz	r3, 80156aa <_strtod_l+0x7fa>
 80156a4:	692b      	ldr	r3, [r5, #16]
 80156a6:	2b01      	cmp	r3, #1
 80156a8:	dd75      	ble.n	8015796 <_strtod_l+0x8e6>
 80156aa:	4629      	mov	r1, r5
 80156ac:	2201      	movs	r2, #1
 80156ae:	4620      	mov	r0, r4
 80156b0:	f001 f92c 	bl	801690c <__lshift>
 80156b4:	4631      	mov	r1, r6
 80156b6:	4605      	mov	r5, r0
 80156b8:	f001 f994 	bl	80169e4 <__mcmp>
 80156bc:	2800      	cmp	r0, #0
 80156be:	dd6a      	ble.n	8015796 <_strtod_l+0x8e6>
 80156c0:	9904      	ldr	r1, [sp, #16]
 80156c2:	4a55      	ldr	r2, [pc, #340]	; (8015818 <_strtod_l+0x968>)
 80156c4:	465b      	mov	r3, fp
 80156c6:	2900      	cmp	r1, #0
 80156c8:	f000 8085 	beq.w	80157d6 <_strtod_l+0x926>
 80156cc:	ea02 010b 	and.w	r1, r2, fp
 80156d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80156d4:	dc7f      	bgt.n	80157d6 <_strtod_l+0x926>
 80156d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80156da:	f77f aeaa 	ble.w	8015432 <_strtod_l+0x582>
 80156de:	4a4f      	ldr	r2, [pc, #316]	; (801581c <_strtod_l+0x96c>)
 80156e0:	2300      	movs	r3, #0
 80156e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80156e6:	4650      	mov	r0, sl
 80156e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80156ec:	4659      	mov	r1, fp
 80156ee:	f7ea ff9b 	bl	8000628 <__aeabi_dmul>
 80156f2:	460b      	mov	r3, r1
 80156f4:	4303      	orrs	r3, r0
 80156f6:	bf08      	it	eq
 80156f8:	2322      	moveq	r3, #34	; 0x22
 80156fa:	4682      	mov	sl, r0
 80156fc:	468b      	mov	fp, r1
 80156fe:	bf08      	it	eq
 8015700:	6023      	streq	r3, [r4, #0]
 8015702:	e62b      	b.n	801535c <_strtod_l+0x4ac>
 8015704:	f04f 32ff 	mov.w	r2, #4294967295
 8015708:	fa02 f303 	lsl.w	r3, r2, r3
 801570c:	ea03 0a0a 	and.w	sl, r3, sl
 8015710:	e6de      	b.n	80154d0 <_strtod_l+0x620>
 8015712:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015716:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801571a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801571e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015722:	fa01 f308 	lsl.w	r3, r1, r8
 8015726:	930c      	str	r3, [sp, #48]	; 0x30
 8015728:	9111      	str	r1, [sp, #68]	; 0x44
 801572a:	e741      	b.n	80155b0 <_strtod_l+0x700>
 801572c:	2300      	movs	r3, #0
 801572e:	930c      	str	r3, [sp, #48]	; 0x30
 8015730:	2301      	movs	r3, #1
 8015732:	9311      	str	r3, [sp, #68]	; 0x44
 8015734:	e73c      	b.n	80155b0 <_strtod_l+0x700>
 8015736:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015738:	4642      	mov	r2, r8
 801573a:	4620      	mov	r0, r4
 801573c:	f001 f8e6 	bl	801690c <__lshift>
 8015740:	901e      	str	r0, [sp, #120]	; 0x78
 8015742:	2800      	cmp	r0, #0
 8015744:	f47f af66 	bne.w	8015614 <_strtod_l+0x764>
 8015748:	e5fe      	b.n	8015348 <_strtod_l+0x498>
 801574a:	465f      	mov	r7, fp
 801574c:	d16e      	bne.n	801582c <_strtod_l+0x97c>
 801574e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015750:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015754:	b342      	cbz	r2, 80157a8 <_strtod_l+0x8f8>
 8015756:	4a32      	ldr	r2, [pc, #200]	; (8015820 <_strtod_l+0x970>)
 8015758:	4293      	cmp	r3, r2
 801575a:	d128      	bne.n	80157ae <_strtod_l+0x8fe>
 801575c:	9b04      	ldr	r3, [sp, #16]
 801575e:	4650      	mov	r0, sl
 8015760:	b1eb      	cbz	r3, 801579e <_strtod_l+0x8ee>
 8015762:	4a2d      	ldr	r2, [pc, #180]	; (8015818 <_strtod_l+0x968>)
 8015764:	403a      	ands	r2, r7
 8015766:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801576a:	f04f 31ff 	mov.w	r1, #4294967295
 801576e:	d819      	bhi.n	80157a4 <_strtod_l+0x8f4>
 8015770:	0d12      	lsrs	r2, r2, #20
 8015772:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015776:	fa01 f303 	lsl.w	r3, r1, r3
 801577a:	4298      	cmp	r0, r3
 801577c:	d117      	bne.n	80157ae <_strtod_l+0x8fe>
 801577e:	4b29      	ldr	r3, [pc, #164]	; (8015824 <_strtod_l+0x974>)
 8015780:	429f      	cmp	r7, r3
 8015782:	d102      	bne.n	801578a <_strtod_l+0x8da>
 8015784:	3001      	adds	r0, #1
 8015786:	f43f addf 	beq.w	8015348 <_strtod_l+0x498>
 801578a:	4b23      	ldr	r3, [pc, #140]	; (8015818 <_strtod_l+0x968>)
 801578c:	403b      	ands	r3, r7
 801578e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015792:	f04f 0a00 	mov.w	sl, #0
 8015796:	9b04      	ldr	r3, [sp, #16]
 8015798:	2b00      	cmp	r3, #0
 801579a:	d1a0      	bne.n	80156de <_strtod_l+0x82e>
 801579c:	e5de      	b.n	801535c <_strtod_l+0x4ac>
 801579e:	f04f 33ff 	mov.w	r3, #4294967295
 80157a2:	e7ea      	b.n	801577a <_strtod_l+0x8ca>
 80157a4:	460b      	mov	r3, r1
 80157a6:	e7e8      	b.n	801577a <_strtod_l+0x8ca>
 80157a8:	ea53 030a 	orrs.w	r3, r3, sl
 80157ac:	d088      	beq.n	80156c0 <_strtod_l+0x810>
 80157ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80157b0:	b1db      	cbz	r3, 80157ea <_strtod_l+0x93a>
 80157b2:	423b      	tst	r3, r7
 80157b4:	d0ef      	beq.n	8015796 <_strtod_l+0x8e6>
 80157b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80157b8:	9a04      	ldr	r2, [sp, #16]
 80157ba:	4650      	mov	r0, sl
 80157bc:	4659      	mov	r1, fp
 80157be:	b1c3      	cbz	r3, 80157f2 <_strtod_l+0x942>
 80157c0:	f7ff fb58 	bl	8014e74 <sulp>
 80157c4:	4602      	mov	r2, r0
 80157c6:	460b      	mov	r3, r1
 80157c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80157cc:	f7ea fd76 	bl	80002bc <__adddf3>
 80157d0:	4682      	mov	sl, r0
 80157d2:	468b      	mov	fp, r1
 80157d4:	e7df      	b.n	8015796 <_strtod_l+0x8e6>
 80157d6:	4013      	ands	r3, r2
 80157d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80157dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80157e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80157e4:	f04f 3aff 	mov.w	sl, #4294967295
 80157e8:	e7d5      	b.n	8015796 <_strtod_l+0x8e6>
 80157ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80157ec:	ea13 0f0a 	tst.w	r3, sl
 80157f0:	e7e0      	b.n	80157b4 <_strtod_l+0x904>
 80157f2:	f7ff fb3f 	bl	8014e74 <sulp>
 80157f6:	4602      	mov	r2, r0
 80157f8:	460b      	mov	r3, r1
 80157fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80157fe:	f7ea fd5b 	bl	80002b8 <__aeabi_dsub>
 8015802:	2200      	movs	r2, #0
 8015804:	2300      	movs	r3, #0
 8015806:	4682      	mov	sl, r0
 8015808:	468b      	mov	fp, r1
 801580a:	f7eb f975 	bl	8000af8 <__aeabi_dcmpeq>
 801580e:	2800      	cmp	r0, #0
 8015810:	d0c1      	beq.n	8015796 <_strtod_l+0x8e6>
 8015812:	e60e      	b.n	8015432 <_strtod_l+0x582>
 8015814:	fffffc02 	.word	0xfffffc02
 8015818:	7ff00000 	.word	0x7ff00000
 801581c:	39500000 	.word	0x39500000
 8015820:	000fffff 	.word	0x000fffff
 8015824:	7fefffff 	.word	0x7fefffff
 8015828:	080224e8 	.word	0x080224e8
 801582c:	4631      	mov	r1, r6
 801582e:	4628      	mov	r0, r5
 8015830:	f001 fa54 	bl	8016cdc <__ratio>
 8015834:	ec59 8b10 	vmov	r8, r9, d0
 8015838:	ee10 0a10 	vmov	r0, s0
 801583c:	2200      	movs	r2, #0
 801583e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015842:	4649      	mov	r1, r9
 8015844:	f7eb f96c 	bl	8000b20 <__aeabi_dcmple>
 8015848:	2800      	cmp	r0, #0
 801584a:	d07c      	beq.n	8015946 <_strtod_l+0xa96>
 801584c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801584e:	2b00      	cmp	r3, #0
 8015850:	d04c      	beq.n	80158ec <_strtod_l+0xa3c>
 8015852:	4b95      	ldr	r3, [pc, #596]	; (8015aa8 <_strtod_l+0xbf8>)
 8015854:	2200      	movs	r2, #0
 8015856:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801585a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015aa8 <_strtod_l+0xbf8>
 801585e:	f04f 0800 	mov.w	r8, #0
 8015862:	4b92      	ldr	r3, [pc, #584]	; (8015aac <_strtod_l+0xbfc>)
 8015864:	403b      	ands	r3, r7
 8015866:	9311      	str	r3, [sp, #68]	; 0x44
 8015868:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801586a:	4b91      	ldr	r3, [pc, #580]	; (8015ab0 <_strtod_l+0xc00>)
 801586c:	429a      	cmp	r2, r3
 801586e:	f040 80b2 	bne.w	80159d6 <_strtod_l+0xb26>
 8015872:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015876:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801587a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801587e:	ec4b ab10 	vmov	d0, sl, fp
 8015882:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8015886:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801588a:	f001 f94f 	bl	8016b2c <__ulp>
 801588e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015892:	ec53 2b10 	vmov	r2, r3, d0
 8015896:	f7ea fec7 	bl	8000628 <__aeabi_dmul>
 801589a:	4652      	mov	r2, sl
 801589c:	465b      	mov	r3, fp
 801589e:	f7ea fd0d 	bl	80002bc <__adddf3>
 80158a2:	460b      	mov	r3, r1
 80158a4:	4981      	ldr	r1, [pc, #516]	; (8015aac <_strtod_l+0xbfc>)
 80158a6:	4a83      	ldr	r2, [pc, #524]	; (8015ab4 <_strtod_l+0xc04>)
 80158a8:	4019      	ands	r1, r3
 80158aa:	4291      	cmp	r1, r2
 80158ac:	4682      	mov	sl, r0
 80158ae:	d95e      	bls.n	801596e <_strtod_l+0xabe>
 80158b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80158b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80158b6:	4293      	cmp	r3, r2
 80158b8:	d103      	bne.n	80158c2 <_strtod_l+0xa12>
 80158ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80158bc:	3301      	adds	r3, #1
 80158be:	f43f ad43 	beq.w	8015348 <_strtod_l+0x498>
 80158c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015ac0 <_strtod_l+0xc10>
 80158c6:	f04f 3aff 	mov.w	sl, #4294967295
 80158ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80158cc:	4620      	mov	r0, r4
 80158ce:	f000 fe01 	bl	80164d4 <_Bfree>
 80158d2:	9907      	ldr	r1, [sp, #28]
 80158d4:	4620      	mov	r0, r4
 80158d6:	f000 fdfd 	bl	80164d4 <_Bfree>
 80158da:	4631      	mov	r1, r6
 80158dc:	4620      	mov	r0, r4
 80158de:	f000 fdf9 	bl	80164d4 <_Bfree>
 80158e2:	4629      	mov	r1, r5
 80158e4:	4620      	mov	r0, r4
 80158e6:	f000 fdf5 	bl	80164d4 <_Bfree>
 80158ea:	e613      	b.n	8015514 <_strtod_l+0x664>
 80158ec:	f1ba 0f00 	cmp.w	sl, #0
 80158f0:	d11b      	bne.n	801592a <_strtod_l+0xa7a>
 80158f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80158f6:	b9f3      	cbnz	r3, 8015936 <_strtod_l+0xa86>
 80158f8:	4b6b      	ldr	r3, [pc, #428]	; (8015aa8 <_strtod_l+0xbf8>)
 80158fa:	2200      	movs	r2, #0
 80158fc:	4640      	mov	r0, r8
 80158fe:	4649      	mov	r1, r9
 8015900:	f7eb f904 	bl	8000b0c <__aeabi_dcmplt>
 8015904:	b9d0      	cbnz	r0, 801593c <_strtod_l+0xa8c>
 8015906:	4640      	mov	r0, r8
 8015908:	4649      	mov	r1, r9
 801590a:	4b6b      	ldr	r3, [pc, #428]	; (8015ab8 <_strtod_l+0xc08>)
 801590c:	2200      	movs	r2, #0
 801590e:	f7ea fe8b 	bl	8000628 <__aeabi_dmul>
 8015912:	4680      	mov	r8, r0
 8015914:	4689      	mov	r9, r1
 8015916:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801591a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801591e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015920:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8015924:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015928:	e79b      	b.n	8015862 <_strtod_l+0x9b2>
 801592a:	f1ba 0f01 	cmp.w	sl, #1
 801592e:	d102      	bne.n	8015936 <_strtod_l+0xa86>
 8015930:	2f00      	cmp	r7, #0
 8015932:	f43f ad7e 	beq.w	8015432 <_strtod_l+0x582>
 8015936:	4b61      	ldr	r3, [pc, #388]	; (8015abc <_strtod_l+0xc0c>)
 8015938:	2200      	movs	r2, #0
 801593a:	e78c      	b.n	8015856 <_strtod_l+0x9a6>
 801593c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015ab8 <_strtod_l+0xc08>
 8015940:	f04f 0800 	mov.w	r8, #0
 8015944:	e7e7      	b.n	8015916 <_strtod_l+0xa66>
 8015946:	4b5c      	ldr	r3, [pc, #368]	; (8015ab8 <_strtod_l+0xc08>)
 8015948:	4640      	mov	r0, r8
 801594a:	4649      	mov	r1, r9
 801594c:	2200      	movs	r2, #0
 801594e:	f7ea fe6b 	bl	8000628 <__aeabi_dmul>
 8015952:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015954:	4680      	mov	r8, r0
 8015956:	4689      	mov	r9, r1
 8015958:	b933      	cbnz	r3, 8015968 <_strtod_l+0xab8>
 801595a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801595e:	9012      	str	r0, [sp, #72]	; 0x48
 8015960:	9313      	str	r3, [sp, #76]	; 0x4c
 8015962:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015966:	e7dd      	b.n	8015924 <_strtod_l+0xa74>
 8015968:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801596c:	e7f9      	b.n	8015962 <_strtod_l+0xab2>
 801596e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015972:	9b04      	ldr	r3, [sp, #16]
 8015974:	2b00      	cmp	r3, #0
 8015976:	d1a8      	bne.n	80158ca <_strtod_l+0xa1a>
 8015978:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801597c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801597e:	0d1b      	lsrs	r3, r3, #20
 8015980:	051b      	lsls	r3, r3, #20
 8015982:	429a      	cmp	r2, r3
 8015984:	d1a1      	bne.n	80158ca <_strtod_l+0xa1a>
 8015986:	4640      	mov	r0, r8
 8015988:	4649      	mov	r1, r9
 801598a:	f7eb f985 	bl	8000c98 <__aeabi_d2lz>
 801598e:	f7ea fe1d 	bl	80005cc <__aeabi_l2d>
 8015992:	4602      	mov	r2, r0
 8015994:	460b      	mov	r3, r1
 8015996:	4640      	mov	r0, r8
 8015998:	4649      	mov	r1, r9
 801599a:	f7ea fc8d 	bl	80002b8 <__aeabi_dsub>
 801599e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80159a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80159a4:	ea43 030a 	orr.w	r3, r3, sl
 80159a8:	4313      	orrs	r3, r2
 80159aa:	4680      	mov	r8, r0
 80159ac:	4689      	mov	r9, r1
 80159ae:	d053      	beq.n	8015a58 <_strtod_l+0xba8>
 80159b0:	a335      	add	r3, pc, #212	; (adr r3, 8015a88 <_strtod_l+0xbd8>)
 80159b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159b6:	f7eb f8a9 	bl	8000b0c <__aeabi_dcmplt>
 80159ba:	2800      	cmp	r0, #0
 80159bc:	f47f acce 	bne.w	801535c <_strtod_l+0x4ac>
 80159c0:	a333      	add	r3, pc, #204	; (adr r3, 8015a90 <_strtod_l+0xbe0>)
 80159c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159c6:	4640      	mov	r0, r8
 80159c8:	4649      	mov	r1, r9
 80159ca:	f7eb f8bd 	bl	8000b48 <__aeabi_dcmpgt>
 80159ce:	2800      	cmp	r0, #0
 80159d0:	f43f af7b 	beq.w	80158ca <_strtod_l+0xa1a>
 80159d4:	e4c2      	b.n	801535c <_strtod_l+0x4ac>
 80159d6:	9b04      	ldr	r3, [sp, #16]
 80159d8:	b333      	cbz	r3, 8015a28 <_strtod_l+0xb78>
 80159da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80159dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80159e0:	d822      	bhi.n	8015a28 <_strtod_l+0xb78>
 80159e2:	a32d      	add	r3, pc, #180	; (adr r3, 8015a98 <_strtod_l+0xbe8>)
 80159e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80159e8:	4640      	mov	r0, r8
 80159ea:	4649      	mov	r1, r9
 80159ec:	f7eb f898 	bl	8000b20 <__aeabi_dcmple>
 80159f0:	b1a0      	cbz	r0, 8015a1c <_strtod_l+0xb6c>
 80159f2:	4649      	mov	r1, r9
 80159f4:	4640      	mov	r0, r8
 80159f6:	f7eb f8c7 	bl	8000b88 <__aeabi_d2uiz>
 80159fa:	2801      	cmp	r0, #1
 80159fc:	bf38      	it	cc
 80159fe:	2001      	movcc	r0, #1
 8015a00:	f7ea fd98 	bl	8000534 <__aeabi_ui2d>
 8015a04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015a06:	4680      	mov	r8, r0
 8015a08:	4689      	mov	r9, r1
 8015a0a:	bb13      	cbnz	r3, 8015a52 <_strtod_l+0xba2>
 8015a0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015a10:	9014      	str	r0, [sp, #80]	; 0x50
 8015a12:	9315      	str	r3, [sp, #84]	; 0x54
 8015a14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015a18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015a1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015a20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015a24:	1a9b      	subs	r3, r3, r2
 8015a26:	930d      	str	r3, [sp, #52]	; 0x34
 8015a28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015a2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015a30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015a34:	f001 f87a 	bl	8016b2c <__ulp>
 8015a38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015a3c:	ec53 2b10 	vmov	r2, r3, d0
 8015a40:	f7ea fdf2 	bl	8000628 <__aeabi_dmul>
 8015a44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015a48:	f7ea fc38 	bl	80002bc <__adddf3>
 8015a4c:	4682      	mov	sl, r0
 8015a4e:	468b      	mov	fp, r1
 8015a50:	e78f      	b.n	8015972 <_strtod_l+0xac2>
 8015a52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8015a56:	e7dd      	b.n	8015a14 <_strtod_l+0xb64>
 8015a58:	a311      	add	r3, pc, #68	; (adr r3, 8015aa0 <_strtod_l+0xbf0>)
 8015a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a5e:	f7eb f855 	bl	8000b0c <__aeabi_dcmplt>
 8015a62:	e7b4      	b.n	80159ce <_strtod_l+0xb1e>
 8015a64:	2300      	movs	r3, #0
 8015a66:	930e      	str	r3, [sp, #56]	; 0x38
 8015a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015a6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015a6c:	6013      	str	r3, [r2, #0]
 8015a6e:	f7ff ba65 	b.w	8014f3c <_strtod_l+0x8c>
 8015a72:	2b65      	cmp	r3, #101	; 0x65
 8015a74:	f43f ab5d 	beq.w	8015132 <_strtod_l+0x282>
 8015a78:	2b45      	cmp	r3, #69	; 0x45
 8015a7a:	f43f ab5a 	beq.w	8015132 <_strtod_l+0x282>
 8015a7e:	2201      	movs	r2, #1
 8015a80:	f7ff bb92 	b.w	80151a8 <_strtod_l+0x2f8>
 8015a84:	f3af 8000 	nop.w
 8015a88:	94a03595 	.word	0x94a03595
 8015a8c:	3fdfffff 	.word	0x3fdfffff
 8015a90:	35afe535 	.word	0x35afe535
 8015a94:	3fe00000 	.word	0x3fe00000
 8015a98:	ffc00000 	.word	0xffc00000
 8015a9c:	41dfffff 	.word	0x41dfffff
 8015aa0:	94a03595 	.word	0x94a03595
 8015aa4:	3fcfffff 	.word	0x3fcfffff
 8015aa8:	3ff00000 	.word	0x3ff00000
 8015aac:	7ff00000 	.word	0x7ff00000
 8015ab0:	7fe00000 	.word	0x7fe00000
 8015ab4:	7c9fffff 	.word	0x7c9fffff
 8015ab8:	3fe00000 	.word	0x3fe00000
 8015abc:	bff00000 	.word	0xbff00000
 8015ac0:	7fefffff 	.word	0x7fefffff

08015ac4 <strtof>:
 8015ac4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015ac8:	4e26      	ldr	r6, [pc, #152]	; (8015b64 <strtof+0xa0>)
 8015aca:	4b27      	ldr	r3, [pc, #156]	; (8015b68 <strtof+0xa4>)
 8015acc:	460a      	mov	r2, r1
 8015ace:	ed2d 8b02 	vpush	{d8}
 8015ad2:	4601      	mov	r1, r0
 8015ad4:	6830      	ldr	r0, [r6, #0]
 8015ad6:	f7ff f9eb 	bl	8014eb0 <_strtod_l>
 8015ada:	ec55 4b10 	vmov	r4, r5, d0
 8015ade:	ee10 2a10 	vmov	r2, s0
 8015ae2:	ee10 0a10 	vmov	r0, s0
 8015ae6:	462b      	mov	r3, r5
 8015ae8:	4629      	mov	r1, r5
 8015aea:	f7eb f837 	bl	8000b5c <__aeabi_dcmpun>
 8015aee:	b190      	cbz	r0, 8015b16 <strtof+0x52>
 8015af0:	2d00      	cmp	r5, #0
 8015af2:	481e      	ldr	r0, [pc, #120]	; (8015b6c <strtof+0xa8>)
 8015af4:	da09      	bge.n	8015b0a <strtof+0x46>
 8015af6:	f001 fcdb 	bl	80174b0 <nanf>
 8015afa:	eeb1 8a40 	vneg.f32	s16, s0
 8015afe:	eeb0 0a48 	vmov.f32	s0, s16
 8015b02:	ecbd 8b02 	vpop	{d8}
 8015b06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015b0a:	ecbd 8b02 	vpop	{d8}
 8015b0e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8015b12:	f001 bccd 	b.w	80174b0 <nanf>
 8015b16:	4620      	mov	r0, r4
 8015b18:	4629      	mov	r1, r5
 8015b1a:	f7eb f855 	bl	8000bc8 <__aeabi_d2f>
 8015b1e:	ee08 0a10 	vmov	s16, r0
 8015b22:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015b70 <strtof+0xac>
 8015b26:	eeb0 7ac8 	vabs.f32	s14, s16
 8015b2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015b32:	dde4      	ble.n	8015afe <strtof+0x3a>
 8015b34:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8015b38:	4b0e      	ldr	r3, [pc, #56]	; (8015b74 <strtof+0xb0>)
 8015b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b3e:	4620      	mov	r0, r4
 8015b40:	4649      	mov	r1, r9
 8015b42:	f7eb f80b 	bl	8000b5c <__aeabi_dcmpun>
 8015b46:	b940      	cbnz	r0, 8015b5a <strtof+0x96>
 8015b48:	4b0a      	ldr	r3, [pc, #40]	; (8015b74 <strtof+0xb0>)
 8015b4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015b4e:	4620      	mov	r0, r4
 8015b50:	4649      	mov	r1, r9
 8015b52:	f7ea ffe5 	bl	8000b20 <__aeabi_dcmple>
 8015b56:	2800      	cmp	r0, #0
 8015b58:	d0d1      	beq.n	8015afe <strtof+0x3a>
 8015b5a:	6833      	ldr	r3, [r6, #0]
 8015b5c:	2222      	movs	r2, #34	; 0x22
 8015b5e:	601a      	str	r2, [r3, #0]
 8015b60:	e7cd      	b.n	8015afe <strtof+0x3a>
 8015b62:	bf00      	nop
 8015b64:	20000374 	.word	0x20000374
 8015b68:	200003dc 	.word	0x200003dc
 8015b6c:	08022882 	.word	0x08022882
 8015b70:	7f7fffff 	.word	0x7f7fffff
 8015b74:	7fefffff 	.word	0x7fefffff

08015b78 <__strtok_r>:
 8015b78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015b7a:	b908      	cbnz	r0, 8015b80 <__strtok_r+0x8>
 8015b7c:	6810      	ldr	r0, [r2, #0]
 8015b7e:	b188      	cbz	r0, 8015ba4 <__strtok_r+0x2c>
 8015b80:	4604      	mov	r4, r0
 8015b82:	4620      	mov	r0, r4
 8015b84:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015b88:	460f      	mov	r7, r1
 8015b8a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8015b8e:	b91e      	cbnz	r6, 8015b98 <__strtok_r+0x20>
 8015b90:	b965      	cbnz	r5, 8015bac <__strtok_r+0x34>
 8015b92:	6015      	str	r5, [r2, #0]
 8015b94:	4628      	mov	r0, r5
 8015b96:	e005      	b.n	8015ba4 <__strtok_r+0x2c>
 8015b98:	42b5      	cmp	r5, r6
 8015b9a:	d1f6      	bne.n	8015b8a <__strtok_r+0x12>
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d1f0      	bne.n	8015b82 <__strtok_r+0xa>
 8015ba0:	6014      	str	r4, [r2, #0]
 8015ba2:	7003      	strb	r3, [r0, #0]
 8015ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ba6:	461c      	mov	r4, r3
 8015ba8:	e00c      	b.n	8015bc4 <__strtok_r+0x4c>
 8015baa:	b915      	cbnz	r5, 8015bb2 <__strtok_r+0x3a>
 8015bac:	f814 3b01 	ldrb.w	r3, [r4], #1
 8015bb0:	460e      	mov	r6, r1
 8015bb2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015bb6:	42ab      	cmp	r3, r5
 8015bb8:	d1f7      	bne.n	8015baa <__strtok_r+0x32>
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d0f3      	beq.n	8015ba6 <__strtok_r+0x2e>
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015bc4:	6014      	str	r4, [r2, #0]
 8015bc6:	e7ed      	b.n	8015ba4 <__strtok_r+0x2c>

08015bc8 <strtok_r>:
 8015bc8:	2301      	movs	r3, #1
 8015bca:	f7ff bfd5 	b.w	8015b78 <__strtok_r>
	...

08015bd0 <_strtoul_l.isra.0>:
 8015bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015bd4:	4e3b      	ldr	r6, [pc, #236]	; (8015cc4 <_strtoul_l.isra.0+0xf4>)
 8015bd6:	4686      	mov	lr, r0
 8015bd8:	468c      	mov	ip, r1
 8015bda:	4660      	mov	r0, ip
 8015bdc:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8015be0:	5da5      	ldrb	r5, [r4, r6]
 8015be2:	f015 0508 	ands.w	r5, r5, #8
 8015be6:	d1f8      	bne.n	8015bda <_strtoul_l.isra.0+0xa>
 8015be8:	2c2d      	cmp	r4, #45	; 0x2d
 8015bea:	d134      	bne.n	8015c56 <_strtoul_l.isra.0+0x86>
 8015bec:	f89c 4000 	ldrb.w	r4, [ip]
 8015bf0:	f04f 0801 	mov.w	r8, #1
 8015bf4:	f100 0c02 	add.w	ip, r0, #2
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d05e      	beq.n	8015cba <_strtoul_l.isra.0+0xea>
 8015bfc:	2b10      	cmp	r3, #16
 8015bfe:	d10c      	bne.n	8015c1a <_strtoul_l.isra.0+0x4a>
 8015c00:	2c30      	cmp	r4, #48	; 0x30
 8015c02:	d10a      	bne.n	8015c1a <_strtoul_l.isra.0+0x4a>
 8015c04:	f89c 0000 	ldrb.w	r0, [ip]
 8015c08:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015c0c:	2858      	cmp	r0, #88	; 0x58
 8015c0e:	d14f      	bne.n	8015cb0 <_strtoul_l.isra.0+0xe0>
 8015c10:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8015c14:	2310      	movs	r3, #16
 8015c16:	f10c 0c02 	add.w	ip, ip, #2
 8015c1a:	f04f 37ff 	mov.w	r7, #4294967295
 8015c1e:	2500      	movs	r5, #0
 8015c20:	fbb7 f7f3 	udiv	r7, r7, r3
 8015c24:	fb03 f907 	mul.w	r9, r3, r7
 8015c28:	ea6f 0909 	mvn.w	r9, r9
 8015c2c:	4628      	mov	r0, r5
 8015c2e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8015c32:	2e09      	cmp	r6, #9
 8015c34:	d818      	bhi.n	8015c68 <_strtoul_l.isra.0+0x98>
 8015c36:	4634      	mov	r4, r6
 8015c38:	42a3      	cmp	r3, r4
 8015c3a:	dd24      	ble.n	8015c86 <_strtoul_l.isra.0+0xb6>
 8015c3c:	2d00      	cmp	r5, #0
 8015c3e:	db1f      	blt.n	8015c80 <_strtoul_l.isra.0+0xb0>
 8015c40:	4287      	cmp	r7, r0
 8015c42:	d31d      	bcc.n	8015c80 <_strtoul_l.isra.0+0xb0>
 8015c44:	d101      	bne.n	8015c4a <_strtoul_l.isra.0+0x7a>
 8015c46:	45a1      	cmp	r9, r4
 8015c48:	db1a      	blt.n	8015c80 <_strtoul_l.isra.0+0xb0>
 8015c4a:	fb00 4003 	mla	r0, r0, r3, r4
 8015c4e:	2501      	movs	r5, #1
 8015c50:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8015c54:	e7eb      	b.n	8015c2e <_strtoul_l.isra.0+0x5e>
 8015c56:	2c2b      	cmp	r4, #43	; 0x2b
 8015c58:	bf08      	it	eq
 8015c5a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8015c5e:	46a8      	mov	r8, r5
 8015c60:	bf08      	it	eq
 8015c62:	f100 0c02 	addeq.w	ip, r0, #2
 8015c66:	e7c7      	b.n	8015bf8 <_strtoul_l.isra.0+0x28>
 8015c68:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8015c6c:	2e19      	cmp	r6, #25
 8015c6e:	d801      	bhi.n	8015c74 <_strtoul_l.isra.0+0xa4>
 8015c70:	3c37      	subs	r4, #55	; 0x37
 8015c72:	e7e1      	b.n	8015c38 <_strtoul_l.isra.0+0x68>
 8015c74:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8015c78:	2e19      	cmp	r6, #25
 8015c7a:	d804      	bhi.n	8015c86 <_strtoul_l.isra.0+0xb6>
 8015c7c:	3c57      	subs	r4, #87	; 0x57
 8015c7e:	e7db      	b.n	8015c38 <_strtoul_l.isra.0+0x68>
 8015c80:	f04f 35ff 	mov.w	r5, #4294967295
 8015c84:	e7e4      	b.n	8015c50 <_strtoul_l.isra.0+0x80>
 8015c86:	2d00      	cmp	r5, #0
 8015c88:	da07      	bge.n	8015c9a <_strtoul_l.isra.0+0xca>
 8015c8a:	2322      	movs	r3, #34	; 0x22
 8015c8c:	f8ce 3000 	str.w	r3, [lr]
 8015c90:	f04f 30ff 	mov.w	r0, #4294967295
 8015c94:	b942      	cbnz	r2, 8015ca8 <_strtoul_l.isra.0+0xd8>
 8015c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015c9a:	f1b8 0f00 	cmp.w	r8, #0
 8015c9e:	d000      	beq.n	8015ca2 <_strtoul_l.isra.0+0xd2>
 8015ca0:	4240      	negs	r0, r0
 8015ca2:	2a00      	cmp	r2, #0
 8015ca4:	d0f7      	beq.n	8015c96 <_strtoul_l.isra.0+0xc6>
 8015ca6:	b10d      	cbz	r5, 8015cac <_strtoul_l.isra.0+0xdc>
 8015ca8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8015cac:	6011      	str	r1, [r2, #0]
 8015cae:	e7f2      	b.n	8015c96 <_strtoul_l.isra.0+0xc6>
 8015cb0:	2430      	movs	r4, #48	; 0x30
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d1b1      	bne.n	8015c1a <_strtoul_l.isra.0+0x4a>
 8015cb6:	2308      	movs	r3, #8
 8015cb8:	e7af      	b.n	8015c1a <_strtoul_l.isra.0+0x4a>
 8015cba:	2c30      	cmp	r4, #48	; 0x30
 8015cbc:	d0a2      	beq.n	8015c04 <_strtoul_l.isra.0+0x34>
 8015cbe:	230a      	movs	r3, #10
 8015cc0:	e7ab      	b.n	8015c1a <_strtoul_l.isra.0+0x4a>
 8015cc2:	bf00      	nop
 8015cc4:	08022511 	.word	0x08022511

08015cc8 <strtoul>:
 8015cc8:	4613      	mov	r3, r2
 8015cca:	460a      	mov	r2, r1
 8015ccc:	4601      	mov	r1, r0
 8015cce:	4802      	ldr	r0, [pc, #8]	; (8015cd8 <strtoul+0x10>)
 8015cd0:	6800      	ldr	r0, [r0, #0]
 8015cd2:	f7ff bf7d 	b.w	8015bd0 <_strtoul_l.isra.0>
 8015cd6:	bf00      	nop
 8015cd8:	20000374 	.word	0x20000374

08015cdc <_vsniprintf_r>:
 8015cdc:	b530      	push	{r4, r5, lr}
 8015cde:	1e14      	subs	r4, r2, #0
 8015ce0:	4605      	mov	r5, r0
 8015ce2:	b09b      	sub	sp, #108	; 0x6c
 8015ce4:	4618      	mov	r0, r3
 8015ce6:	da05      	bge.n	8015cf4 <_vsniprintf_r+0x18>
 8015ce8:	238b      	movs	r3, #139	; 0x8b
 8015cea:	602b      	str	r3, [r5, #0]
 8015cec:	f04f 30ff 	mov.w	r0, #4294967295
 8015cf0:	b01b      	add	sp, #108	; 0x6c
 8015cf2:	bd30      	pop	{r4, r5, pc}
 8015cf4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015cf8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015cfc:	bf14      	ite	ne
 8015cfe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015d02:	4623      	moveq	r3, r4
 8015d04:	9302      	str	r3, [sp, #8]
 8015d06:	9305      	str	r3, [sp, #20]
 8015d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015d0c:	9100      	str	r1, [sp, #0]
 8015d0e:	9104      	str	r1, [sp, #16]
 8015d10:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015d14:	4602      	mov	r2, r0
 8015d16:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015d18:	4669      	mov	r1, sp
 8015d1a:	4628      	mov	r0, r5
 8015d1c:	f001 f91a 	bl	8016f54 <_svfiprintf_r>
 8015d20:	1c43      	adds	r3, r0, #1
 8015d22:	bfbc      	itt	lt
 8015d24:	238b      	movlt	r3, #139	; 0x8b
 8015d26:	602b      	strlt	r3, [r5, #0]
 8015d28:	2c00      	cmp	r4, #0
 8015d2a:	d0e1      	beq.n	8015cf0 <_vsniprintf_r+0x14>
 8015d2c:	9b00      	ldr	r3, [sp, #0]
 8015d2e:	2200      	movs	r2, #0
 8015d30:	701a      	strb	r2, [r3, #0]
 8015d32:	e7dd      	b.n	8015cf0 <_vsniprintf_r+0x14>

08015d34 <vsniprintf>:
 8015d34:	b507      	push	{r0, r1, r2, lr}
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	4613      	mov	r3, r2
 8015d3a:	460a      	mov	r2, r1
 8015d3c:	4601      	mov	r1, r0
 8015d3e:	4803      	ldr	r0, [pc, #12]	; (8015d4c <vsniprintf+0x18>)
 8015d40:	6800      	ldr	r0, [r0, #0]
 8015d42:	f7ff ffcb 	bl	8015cdc <_vsniprintf_r>
 8015d46:	b003      	add	sp, #12
 8015d48:	f85d fb04 	ldr.w	pc, [sp], #4
 8015d4c:	20000374 	.word	0x20000374

08015d50 <rshift>:
 8015d50:	6903      	ldr	r3, [r0, #16]
 8015d52:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8015d56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015d5a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8015d5e:	f100 0414 	add.w	r4, r0, #20
 8015d62:	dd45      	ble.n	8015df0 <rshift+0xa0>
 8015d64:	f011 011f 	ands.w	r1, r1, #31
 8015d68:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8015d6c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8015d70:	d10c      	bne.n	8015d8c <rshift+0x3c>
 8015d72:	f100 0710 	add.w	r7, r0, #16
 8015d76:	4629      	mov	r1, r5
 8015d78:	42b1      	cmp	r1, r6
 8015d7a:	d334      	bcc.n	8015de6 <rshift+0x96>
 8015d7c:	1a9b      	subs	r3, r3, r2
 8015d7e:	009b      	lsls	r3, r3, #2
 8015d80:	1eea      	subs	r2, r5, #3
 8015d82:	4296      	cmp	r6, r2
 8015d84:	bf38      	it	cc
 8015d86:	2300      	movcc	r3, #0
 8015d88:	4423      	add	r3, r4
 8015d8a:	e015      	b.n	8015db8 <rshift+0x68>
 8015d8c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8015d90:	f1c1 0820 	rsb	r8, r1, #32
 8015d94:	40cf      	lsrs	r7, r1
 8015d96:	f105 0e04 	add.w	lr, r5, #4
 8015d9a:	46a1      	mov	r9, r4
 8015d9c:	4576      	cmp	r6, lr
 8015d9e:	46f4      	mov	ip, lr
 8015da0:	d815      	bhi.n	8015dce <rshift+0x7e>
 8015da2:	1a9b      	subs	r3, r3, r2
 8015da4:	009a      	lsls	r2, r3, #2
 8015da6:	3a04      	subs	r2, #4
 8015da8:	3501      	adds	r5, #1
 8015daa:	42ae      	cmp	r6, r5
 8015dac:	bf38      	it	cc
 8015dae:	2200      	movcc	r2, #0
 8015db0:	18a3      	adds	r3, r4, r2
 8015db2:	50a7      	str	r7, [r4, r2]
 8015db4:	b107      	cbz	r7, 8015db8 <rshift+0x68>
 8015db6:	3304      	adds	r3, #4
 8015db8:	1b1a      	subs	r2, r3, r4
 8015dba:	42a3      	cmp	r3, r4
 8015dbc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8015dc0:	bf08      	it	eq
 8015dc2:	2300      	moveq	r3, #0
 8015dc4:	6102      	str	r2, [r0, #16]
 8015dc6:	bf08      	it	eq
 8015dc8:	6143      	streq	r3, [r0, #20]
 8015dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015dce:	f8dc c000 	ldr.w	ip, [ip]
 8015dd2:	fa0c fc08 	lsl.w	ip, ip, r8
 8015dd6:	ea4c 0707 	orr.w	r7, ip, r7
 8015dda:	f849 7b04 	str.w	r7, [r9], #4
 8015dde:	f85e 7b04 	ldr.w	r7, [lr], #4
 8015de2:	40cf      	lsrs	r7, r1
 8015de4:	e7da      	b.n	8015d9c <rshift+0x4c>
 8015de6:	f851 cb04 	ldr.w	ip, [r1], #4
 8015dea:	f847 cf04 	str.w	ip, [r7, #4]!
 8015dee:	e7c3      	b.n	8015d78 <rshift+0x28>
 8015df0:	4623      	mov	r3, r4
 8015df2:	e7e1      	b.n	8015db8 <rshift+0x68>

08015df4 <__hexdig_fun>:
 8015df4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8015df8:	2b09      	cmp	r3, #9
 8015dfa:	d802      	bhi.n	8015e02 <__hexdig_fun+0xe>
 8015dfc:	3820      	subs	r0, #32
 8015dfe:	b2c0      	uxtb	r0, r0
 8015e00:	4770      	bx	lr
 8015e02:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8015e06:	2b05      	cmp	r3, #5
 8015e08:	d801      	bhi.n	8015e0e <__hexdig_fun+0x1a>
 8015e0a:	3847      	subs	r0, #71	; 0x47
 8015e0c:	e7f7      	b.n	8015dfe <__hexdig_fun+0xa>
 8015e0e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8015e12:	2b05      	cmp	r3, #5
 8015e14:	d801      	bhi.n	8015e1a <__hexdig_fun+0x26>
 8015e16:	3827      	subs	r0, #39	; 0x27
 8015e18:	e7f1      	b.n	8015dfe <__hexdig_fun+0xa>
 8015e1a:	2000      	movs	r0, #0
 8015e1c:	4770      	bx	lr
	...

08015e20 <__gethex>:
 8015e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e24:	ed2d 8b02 	vpush	{d8}
 8015e28:	b089      	sub	sp, #36	; 0x24
 8015e2a:	ee08 0a10 	vmov	s16, r0
 8015e2e:	9304      	str	r3, [sp, #16]
 8015e30:	4bbc      	ldr	r3, [pc, #752]	; (8016124 <__gethex+0x304>)
 8015e32:	681b      	ldr	r3, [r3, #0]
 8015e34:	9301      	str	r3, [sp, #4]
 8015e36:	4618      	mov	r0, r3
 8015e38:	468b      	mov	fp, r1
 8015e3a:	4690      	mov	r8, r2
 8015e3c:	f7ea f9da 	bl	80001f4 <strlen>
 8015e40:	9b01      	ldr	r3, [sp, #4]
 8015e42:	f8db 2000 	ldr.w	r2, [fp]
 8015e46:	4403      	add	r3, r0
 8015e48:	4682      	mov	sl, r0
 8015e4a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8015e4e:	9305      	str	r3, [sp, #20]
 8015e50:	1c93      	adds	r3, r2, #2
 8015e52:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8015e56:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8015e5a:	32fe      	adds	r2, #254	; 0xfe
 8015e5c:	18d1      	adds	r1, r2, r3
 8015e5e:	461f      	mov	r7, r3
 8015e60:	f813 0b01 	ldrb.w	r0, [r3], #1
 8015e64:	9100      	str	r1, [sp, #0]
 8015e66:	2830      	cmp	r0, #48	; 0x30
 8015e68:	d0f8      	beq.n	8015e5c <__gethex+0x3c>
 8015e6a:	f7ff ffc3 	bl	8015df4 <__hexdig_fun>
 8015e6e:	4604      	mov	r4, r0
 8015e70:	2800      	cmp	r0, #0
 8015e72:	d13a      	bne.n	8015eea <__gethex+0xca>
 8015e74:	9901      	ldr	r1, [sp, #4]
 8015e76:	4652      	mov	r2, sl
 8015e78:	4638      	mov	r0, r7
 8015e7a:	f001 fb1f 	bl	80174bc <strncmp>
 8015e7e:	4605      	mov	r5, r0
 8015e80:	2800      	cmp	r0, #0
 8015e82:	d168      	bne.n	8015f56 <__gethex+0x136>
 8015e84:	f817 000a 	ldrb.w	r0, [r7, sl]
 8015e88:	eb07 060a 	add.w	r6, r7, sl
 8015e8c:	f7ff ffb2 	bl	8015df4 <__hexdig_fun>
 8015e90:	2800      	cmp	r0, #0
 8015e92:	d062      	beq.n	8015f5a <__gethex+0x13a>
 8015e94:	4633      	mov	r3, r6
 8015e96:	7818      	ldrb	r0, [r3, #0]
 8015e98:	2830      	cmp	r0, #48	; 0x30
 8015e9a:	461f      	mov	r7, r3
 8015e9c:	f103 0301 	add.w	r3, r3, #1
 8015ea0:	d0f9      	beq.n	8015e96 <__gethex+0x76>
 8015ea2:	f7ff ffa7 	bl	8015df4 <__hexdig_fun>
 8015ea6:	2301      	movs	r3, #1
 8015ea8:	fab0 f480 	clz	r4, r0
 8015eac:	0964      	lsrs	r4, r4, #5
 8015eae:	4635      	mov	r5, r6
 8015eb0:	9300      	str	r3, [sp, #0]
 8015eb2:	463a      	mov	r2, r7
 8015eb4:	4616      	mov	r6, r2
 8015eb6:	3201      	adds	r2, #1
 8015eb8:	7830      	ldrb	r0, [r6, #0]
 8015eba:	f7ff ff9b 	bl	8015df4 <__hexdig_fun>
 8015ebe:	2800      	cmp	r0, #0
 8015ec0:	d1f8      	bne.n	8015eb4 <__gethex+0x94>
 8015ec2:	9901      	ldr	r1, [sp, #4]
 8015ec4:	4652      	mov	r2, sl
 8015ec6:	4630      	mov	r0, r6
 8015ec8:	f001 faf8 	bl	80174bc <strncmp>
 8015ecc:	b980      	cbnz	r0, 8015ef0 <__gethex+0xd0>
 8015ece:	b94d      	cbnz	r5, 8015ee4 <__gethex+0xc4>
 8015ed0:	eb06 050a 	add.w	r5, r6, sl
 8015ed4:	462a      	mov	r2, r5
 8015ed6:	4616      	mov	r6, r2
 8015ed8:	3201      	adds	r2, #1
 8015eda:	7830      	ldrb	r0, [r6, #0]
 8015edc:	f7ff ff8a 	bl	8015df4 <__hexdig_fun>
 8015ee0:	2800      	cmp	r0, #0
 8015ee2:	d1f8      	bne.n	8015ed6 <__gethex+0xb6>
 8015ee4:	1bad      	subs	r5, r5, r6
 8015ee6:	00ad      	lsls	r5, r5, #2
 8015ee8:	e004      	b.n	8015ef4 <__gethex+0xd4>
 8015eea:	2400      	movs	r4, #0
 8015eec:	4625      	mov	r5, r4
 8015eee:	e7e0      	b.n	8015eb2 <__gethex+0x92>
 8015ef0:	2d00      	cmp	r5, #0
 8015ef2:	d1f7      	bne.n	8015ee4 <__gethex+0xc4>
 8015ef4:	7833      	ldrb	r3, [r6, #0]
 8015ef6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015efa:	2b50      	cmp	r3, #80	; 0x50
 8015efc:	d13b      	bne.n	8015f76 <__gethex+0x156>
 8015efe:	7873      	ldrb	r3, [r6, #1]
 8015f00:	2b2b      	cmp	r3, #43	; 0x2b
 8015f02:	d02c      	beq.n	8015f5e <__gethex+0x13e>
 8015f04:	2b2d      	cmp	r3, #45	; 0x2d
 8015f06:	d02e      	beq.n	8015f66 <__gethex+0x146>
 8015f08:	1c71      	adds	r1, r6, #1
 8015f0a:	f04f 0900 	mov.w	r9, #0
 8015f0e:	7808      	ldrb	r0, [r1, #0]
 8015f10:	f7ff ff70 	bl	8015df4 <__hexdig_fun>
 8015f14:	1e43      	subs	r3, r0, #1
 8015f16:	b2db      	uxtb	r3, r3
 8015f18:	2b18      	cmp	r3, #24
 8015f1a:	d82c      	bhi.n	8015f76 <__gethex+0x156>
 8015f1c:	f1a0 0210 	sub.w	r2, r0, #16
 8015f20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8015f24:	f7ff ff66 	bl	8015df4 <__hexdig_fun>
 8015f28:	1e43      	subs	r3, r0, #1
 8015f2a:	b2db      	uxtb	r3, r3
 8015f2c:	2b18      	cmp	r3, #24
 8015f2e:	d91d      	bls.n	8015f6c <__gethex+0x14c>
 8015f30:	f1b9 0f00 	cmp.w	r9, #0
 8015f34:	d000      	beq.n	8015f38 <__gethex+0x118>
 8015f36:	4252      	negs	r2, r2
 8015f38:	4415      	add	r5, r2
 8015f3a:	f8cb 1000 	str.w	r1, [fp]
 8015f3e:	b1e4      	cbz	r4, 8015f7a <__gethex+0x15a>
 8015f40:	9b00      	ldr	r3, [sp, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	bf14      	ite	ne
 8015f46:	2700      	movne	r7, #0
 8015f48:	2706      	moveq	r7, #6
 8015f4a:	4638      	mov	r0, r7
 8015f4c:	b009      	add	sp, #36	; 0x24
 8015f4e:	ecbd 8b02 	vpop	{d8}
 8015f52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f56:	463e      	mov	r6, r7
 8015f58:	4625      	mov	r5, r4
 8015f5a:	2401      	movs	r4, #1
 8015f5c:	e7ca      	b.n	8015ef4 <__gethex+0xd4>
 8015f5e:	f04f 0900 	mov.w	r9, #0
 8015f62:	1cb1      	adds	r1, r6, #2
 8015f64:	e7d3      	b.n	8015f0e <__gethex+0xee>
 8015f66:	f04f 0901 	mov.w	r9, #1
 8015f6a:	e7fa      	b.n	8015f62 <__gethex+0x142>
 8015f6c:	230a      	movs	r3, #10
 8015f6e:	fb03 0202 	mla	r2, r3, r2, r0
 8015f72:	3a10      	subs	r2, #16
 8015f74:	e7d4      	b.n	8015f20 <__gethex+0x100>
 8015f76:	4631      	mov	r1, r6
 8015f78:	e7df      	b.n	8015f3a <__gethex+0x11a>
 8015f7a:	1bf3      	subs	r3, r6, r7
 8015f7c:	3b01      	subs	r3, #1
 8015f7e:	4621      	mov	r1, r4
 8015f80:	2b07      	cmp	r3, #7
 8015f82:	dc0b      	bgt.n	8015f9c <__gethex+0x17c>
 8015f84:	ee18 0a10 	vmov	r0, s16
 8015f88:	f000 fa64 	bl	8016454 <_Balloc>
 8015f8c:	4604      	mov	r4, r0
 8015f8e:	b940      	cbnz	r0, 8015fa2 <__gethex+0x182>
 8015f90:	4b65      	ldr	r3, [pc, #404]	; (8016128 <__gethex+0x308>)
 8015f92:	4602      	mov	r2, r0
 8015f94:	21de      	movs	r1, #222	; 0xde
 8015f96:	4865      	ldr	r0, [pc, #404]	; (801612c <__gethex+0x30c>)
 8015f98:	f001 fab0 	bl	80174fc <__assert_func>
 8015f9c:	3101      	adds	r1, #1
 8015f9e:	105b      	asrs	r3, r3, #1
 8015fa0:	e7ee      	b.n	8015f80 <__gethex+0x160>
 8015fa2:	f100 0914 	add.w	r9, r0, #20
 8015fa6:	f04f 0b00 	mov.w	fp, #0
 8015faa:	f1ca 0301 	rsb	r3, sl, #1
 8015fae:	f8cd 9008 	str.w	r9, [sp, #8]
 8015fb2:	f8cd b000 	str.w	fp, [sp]
 8015fb6:	9306      	str	r3, [sp, #24]
 8015fb8:	42b7      	cmp	r7, r6
 8015fba:	d340      	bcc.n	801603e <__gethex+0x21e>
 8015fbc:	9802      	ldr	r0, [sp, #8]
 8015fbe:	9b00      	ldr	r3, [sp, #0]
 8015fc0:	f840 3b04 	str.w	r3, [r0], #4
 8015fc4:	eba0 0009 	sub.w	r0, r0, r9
 8015fc8:	1080      	asrs	r0, r0, #2
 8015fca:	0146      	lsls	r6, r0, #5
 8015fcc:	6120      	str	r0, [r4, #16]
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f000 fb36 	bl	8016640 <__hi0bits>
 8015fd4:	1a30      	subs	r0, r6, r0
 8015fd6:	f8d8 6000 	ldr.w	r6, [r8]
 8015fda:	42b0      	cmp	r0, r6
 8015fdc:	dd63      	ble.n	80160a6 <__gethex+0x286>
 8015fde:	1b87      	subs	r7, r0, r6
 8015fe0:	4639      	mov	r1, r7
 8015fe2:	4620      	mov	r0, r4
 8015fe4:	f000 fed0 	bl	8016d88 <__any_on>
 8015fe8:	4682      	mov	sl, r0
 8015fea:	b1a8      	cbz	r0, 8016018 <__gethex+0x1f8>
 8015fec:	1e7b      	subs	r3, r7, #1
 8015fee:	1159      	asrs	r1, r3, #5
 8015ff0:	f003 021f 	and.w	r2, r3, #31
 8015ff4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8015ff8:	f04f 0a01 	mov.w	sl, #1
 8015ffc:	fa0a f202 	lsl.w	r2, sl, r2
 8016000:	420a      	tst	r2, r1
 8016002:	d009      	beq.n	8016018 <__gethex+0x1f8>
 8016004:	4553      	cmp	r3, sl
 8016006:	dd05      	ble.n	8016014 <__gethex+0x1f4>
 8016008:	1eb9      	subs	r1, r7, #2
 801600a:	4620      	mov	r0, r4
 801600c:	f000 febc 	bl	8016d88 <__any_on>
 8016010:	2800      	cmp	r0, #0
 8016012:	d145      	bne.n	80160a0 <__gethex+0x280>
 8016014:	f04f 0a02 	mov.w	sl, #2
 8016018:	4639      	mov	r1, r7
 801601a:	4620      	mov	r0, r4
 801601c:	f7ff fe98 	bl	8015d50 <rshift>
 8016020:	443d      	add	r5, r7
 8016022:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016026:	42ab      	cmp	r3, r5
 8016028:	da4c      	bge.n	80160c4 <__gethex+0x2a4>
 801602a:	ee18 0a10 	vmov	r0, s16
 801602e:	4621      	mov	r1, r4
 8016030:	f000 fa50 	bl	80164d4 <_Bfree>
 8016034:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016036:	2300      	movs	r3, #0
 8016038:	6013      	str	r3, [r2, #0]
 801603a:	27a3      	movs	r7, #163	; 0xa3
 801603c:	e785      	b.n	8015f4a <__gethex+0x12a>
 801603e:	1e73      	subs	r3, r6, #1
 8016040:	9a05      	ldr	r2, [sp, #20]
 8016042:	9303      	str	r3, [sp, #12]
 8016044:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8016048:	4293      	cmp	r3, r2
 801604a:	d019      	beq.n	8016080 <__gethex+0x260>
 801604c:	f1bb 0f20 	cmp.w	fp, #32
 8016050:	d107      	bne.n	8016062 <__gethex+0x242>
 8016052:	9b02      	ldr	r3, [sp, #8]
 8016054:	9a00      	ldr	r2, [sp, #0]
 8016056:	f843 2b04 	str.w	r2, [r3], #4
 801605a:	9302      	str	r3, [sp, #8]
 801605c:	2300      	movs	r3, #0
 801605e:	9300      	str	r3, [sp, #0]
 8016060:	469b      	mov	fp, r3
 8016062:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8016066:	f7ff fec5 	bl	8015df4 <__hexdig_fun>
 801606a:	9b00      	ldr	r3, [sp, #0]
 801606c:	f000 000f 	and.w	r0, r0, #15
 8016070:	fa00 f00b 	lsl.w	r0, r0, fp
 8016074:	4303      	orrs	r3, r0
 8016076:	9300      	str	r3, [sp, #0]
 8016078:	f10b 0b04 	add.w	fp, fp, #4
 801607c:	9b03      	ldr	r3, [sp, #12]
 801607e:	e00d      	b.n	801609c <__gethex+0x27c>
 8016080:	9b03      	ldr	r3, [sp, #12]
 8016082:	9a06      	ldr	r2, [sp, #24]
 8016084:	4413      	add	r3, r2
 8016086:	42bb      	cmp	r3, r7
 8016088:	d3e0      	bcc.n	801604c <__gethex+0x22c>
 801608a:	4618      	mov	r0, r3
 801608c:	9901      	ldr	r1, [sp, #4]
 801608e:	9307      	str	r3, [sp, #28]
 8016090:	4652      	mov	r2, sl
 8016092:	f001 fa13 	bl	80174bc <strncmp>
 8016096:	9b07      	ldr	r3, [sp, #28]
 8016098:	2800      	cmp	r0, #0
 801609a:	d1d7      	bne.n	801604c <__gethex+0x22c>
 801609c:	461e      	mov	r6, r3
 801609e:	e78b      	b.n	8015fb8 <__gethex+0x198>
 80160a0:	f04f 0a03 	mov.w	sl, #3
 80160a4:	e7b8      	b.n	8016018 <__gethex+0x1f8>
 80160a6:	da0a      	bge.n	80160be <__gethex+0x29e>
 80160a8:	1a37      	subs	r7, r6, r0
 80160aa:	4621      	mov	r1, r4
 80160ac:	ee18 0a10 	vmov	r0, s16
 80160b0:	463a      	mov	r2, r7
 80160b2:	f000 fc2b 	bl	801690c <__lshift>
 80160b6:	1bed      	subs	r5, r5, r7
 80160b8:	4604      	mov	r4, r0
 80160ba:	f100 0914 	add.w	r9, r0, #20
 80160be:	f04f 0a00 	mov.w	sl, #0
 80160c2:	e7ae      	b.n	8016022 <__gethex+0x202>
 80160c4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80160c8:	42a8      	cmp	r0, r5
 80160ca:	dd72      	ble.n	80161b2 <__gethex+0x392>
 80160cc:	1b45      	subs	r5, r0, r5
 80160ce:	42ae      	cmp	r6, r5
 80160d0:	dc36      	bgt.n	8016140 <__gethex+0x320>
 80160d2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80160d6:	2b02      	cmp	r3, #2
 80160d8:	d02a      	beq.n	8016130 <__gethex+0x310>
 80160da:	2b03      	cmp	r3, #3
 80160dc:	d02c      	beq.n	8016138 <__gethex+0x318>
 80160de:	2b01      	cmp	r3, #1
 80160e0:	d115      	bne.n	801610e <__gethex+0x2ee>
 80160e2:	42ae      	cmp	r6, r5
 80160e4:	d113      	bne.n	801610e <__gethex+0x2ee>
 80160e6:	2e01      	cmp	r6, #1
 80160e8:	d10b      	bne.n	8016102 <__gethex+0x2e2>
 80160ea:	9a04      	ldr	r2, [sp, #16]
 80160ec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80160f0:	6013      	str	r3, [r2, #0]
 80160f2:	2301      	movs	r3, #1
 80160f4:	6123      	str	r3, [r4, #16]
 80160f6:	f8c9 3000 	str.w	r3, [r9]
 80160fa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80160fc:	2762      	movs	r7, #98	; 0x62
 80160fe:	601c      	str	r4, [r3, #0]
 8016100:	e723      	b.n	8015f4a <__gethex+0x12a>
 8016102:	1e71      	subs	r1, r6, #1
 8016104:	4620      	mov	r0, r4
 8016106:	f000 fe3f 	bl	8016d88 <__any_on>
 801610a:	2800      	cmp	r0, #0
 801610c:	d1ed      	bne.n	80160ea <__gethex+0x2ca>
 801610e:	ee18 0a10 	vmov	r0, s16
 8016112:	4621      	mov	r1, r4
 8016114:	f000 f9de 	bl	80164d4 <_Bfree>
 8016118:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801611a:	2300      	movs	r3, #0
 801611c:	6013      	str	r3, [r2, #0]
 801611e:	2750      	movs	r7, #80	; 0x50
 8016120:	e713      	b.n	8015f4a <__gethex+0x12a>
 8016122:	bf00      	nop
 8016124:	0802268c 	.word	0x0802268c
 8016128:	08022611 	.word	0x08022611
 801612c:	08022622 	.word	0x08022622
 8016130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016132:	2b00      	cmp	r3, #0
 8016134:	d1eb      	bne.n	801610e <__gethex+0x2ee>
 8016136:	e7d8      	b.n	80160ea <__gethex+0x2ca>
 8016138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801613a:	2b00      	cmp	r3, #0
 801613c:	d1d5      	bne.n	80160ea <__gethex+0x2ca>
 801613e:	e7e6      	b.n	801610e <__gethex+0x2ee>
 8016140:	1e6f      	subs	r7, r5, #1
 8016142:	f1ba 0f00 	cmp.w	sl, #0
 8016146:	d131      	bne.n	80161ac <__gethex+0x38c>
 8016148:	b127      	cbz	r7, 8016154 <__gethex+0x334>
 801614a:	4639      	mov	r1, r7
 801614c:	4620      	mov	r0, r4
 801614e:	f000 fe1b 	bl	8016d88 <__any_on>
 8016152:	4682      	mov	sl, r0
 8016154:	117b      	asrs	r3, r7, #5
 8016156:	2101      	movs	r1, #1
 8016158:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801615c:	f007 071f 	and.w	r7, r7, #31
 8016160:	fa01 f707 	lsl.w	r7, r1, r7
 8016164:	421f      	tst	r7, r3
 8016166:	4629      	mov	r1, r5
 8016168:	4620      	mov	r0, r4
 801616a:	bf18      	it	ne
 801616c:	f04a 0a02 	orrne.w	sl, sl, #2
 8016170:	1b76      	subs	r6, r6, r5
 8016172:	f7ff fded 	bl	8015d50 <rshift>
 8016176:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801617a:	2702      	movs	r7, #2
 801617c:	f1ba 0f00 	cmp.w	sl, #0
 8016180:	d048      	beq.n	8016214 <__gethex+0x3f4>
 8016182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8016186:	2b02      	cmp	r3, #2
 8016188:	d015      	beq.n	80161b6 <__gethex+0x396>
 801618a:	2b03      	cmp	r3, #3
 801618c:	d017      	beq.n	80161be <__gethex+0x39e>
 801618e:	2b01      	cmp	r3, #1
 8016190:	d109      	bne.n	80161a6 <__gethex+0x386>
 8016192:	f01a 0f02 	tst.w	sl, #2
 8016196:	d006      	beq.n	80161a6 <__gethex+0x386>
 8016198:	f8d9 0000 	ldr.w	r0, [r9]
 801619c:	ea4a 0a00 	orr.w	sl, sl, r0
 80161a0:	f01a 0f01 	tst.w	sl, #1
 80161a4:	d10e      	bne.n	80161c4 <__gethex+0x3a4>
 80161a6:	f047 0710 	orr.w	r7, r7, #16
 80161aa:	e033      	b.n	8016214 <__gethex+0x3f4>
 80161ac:	f04f 0a01 	mov.w	sl, #1
 80161b0:	e7d0      	b.n	8016154 <__gethex+0x334>
 80161b2:	2701      	movs	r7, #1
 80161b4:	e7e2      	b.n	801617c <__gethex+0x35c>
 80161b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161b8:	f1c3 0301 	rsb	r3, r3, #1
 80161bc:	9315      	str	r3, [sp, #84]	; 0x54
 80161be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d0f0      	beq.n	80161a6 <__gethex+0x386>
 80161c4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80161c8:	f104 0314 	add.w	r3, r4, #20
 80161cc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80161d0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80161d4:	f04f 0c00 	mov.w	ip, #0
 80161d8:	4618      	mov	r0, r3
 80161da:	f853 2b04 	ldr.w	r2, [r3], #4
 80161de:	f1b2 3fff 	cmp.w	r2, #4294967295
 80161e2:	d01c      	beq.n	801621e <__gethex+0x3fe>
 80161e4:	3201      	adds	r2, #1
 80161e6:	6002      	str	r2, [r0, #0]
 80161e8:	2f02      	cmp	r7, #2
 80161ea:	f104 0314 	add.w	r3, r4, #20
 80161ee:	d13f      	bne.n	8016270 <__gethex+0x450>
 80161f0:	f8d8 2000 	ldr.w	r2, [r8]
 80161f4:	3a01      	subs	r2, #1
 80161f6:	42b2      	cmp	r2, r6
 80161f8:	d10a      	bne.n	8016210 <__gethex+0x3f0>
 80161fa:	1171      	asrs	r1, r6, #5
 80161fc:	2201      	movs	r2, #1
 80161fe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016202:	f006 061f 	and.w	r6, r6, #31
 8016206:	fa02 f606 	lsl.w	r6, r2, r6
 801620a:	421e      	tst	r6, r3
 801620c:	bf18      	it	ne
 801620e:	4617      	movne	r7, r2
 8016210:	f047 0720 	orr.w	r7, r7, #32
 8016214:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016216:	601c      	str	r4, [r3, #0]
 8016218:	9b04      	ldr	r3, [sp, #16]
 801621a:	601d      	str	r5, [r3, #0]
 801621c:	e695      	b.n	8015f4a <__gethex+0x12a>
 801621e:	4299      	cmp	r1, r3
 8016220:	f843 cc04 	str.w	ip, [r3, #-4]
 8016224:	d8d8      	bhi.n	80161d8 <__gethex+0x3b8>
 8016226:	68a3      	ldr	r3, [r4, #8]
 8016228:	459b      	cmp	fp, r3
 801622a:	db19      	blt.n	8016260 <__gethex+0x440>
 801622c:	6861      	ldr	r1, [r4, #4]
 801622e:	ee18 0a10 	vmov	r0, s16
 8016232:	3101      	adds	r1, #1
 8016234:	f000 f90e 	bl	8016454 <_Balloc>
 8016238:	4681      	mov	r9, r0
 801623a:	b918      	cbnz	r0, 8016244 <__gethex+0x424>
 801623c:	4b1a      	ldr	r3, [pc, #104]	; (80162a8 <__gethex+0x488>)
 801623e:	4602      	mov	r2, r0
 8016240:	2184      	movs	r1, #132	; 0x84
 8016242:	e6a8      	b.n	8015f96 <__gethex+0x176>
 8016244:	6922      	ldr	r2, [r4, #16]
 8016246:	3202      	adds	r2, #2
 8016248:	f104 010c 	add.w	r1, r4, #12
 801624c:	0092      	lsls	r2, r2, #2
 801624e:	300c      	adds	r0, #12
 8016250:	f7fe fdf2 	bl	8014e38 <memcpy>
 8016254:	4621      	mov	r1, r4
 8016256:	ee18 0a10 	vmov	r0, s16
 801625a:	f000 f93b 	bl	80164d4 <_Bfree>
 801625e:	464c      	mov	r4, r9
 8016260:	6923      	ldr	r3, [r4, #16]
 8016262:	1c5a      	adds	r2, r3, #1
 8016264:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8016268:	6122      	str	r2, [r4, #16]
 801626a:	2201      	movs	r2, #1
 801626c:	615a      	str	r2, [r3, #20]
 801626e:	e7bb      	b.n	80161e8 <__gethex+0x3c8>
 8016270:	6922      	ldr	r2, [r4, #16]
 8016272:	455a      	cmp	r2, fp
 8016274:	dd0b      	ble.n	801628e <__gethex+0x46e>
 8016276:	2101      	movs	r1, #1
 8016278:	4620      	mov	r0, r4
 801627a:	f7ff fd69 	bl	8015d50 <rshift>
 801627e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016282:	3501      	adds	r5, #1
 8016284:	42ab      	cmp	r3, r5
 8016286:	f6ff aed0 	blt.w	801602a <__gethex+0x20a>
 801628a:	2701      	movs	r7, #1
 801628c:	e7c0      	b.n	8016210 <__gethex+0x3f0>
 801628e:	f016 061f 	ands.w	r6, r6, #31
 8016292:	d0fa      	beq.n	801628a <__gethex+0x46a>
 8016294:	449a      	add	sl, r3
 8016296:	f1c6 0620 	rsb	r6, r6, #32
 801629a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801629e:	f000 f9cf 	bl	8016640 <__hi0bits>
 80162a2:	42b0      	cmp	r0, r6
 80162a4:	dbe7      	blt.n	8016276 <__gethex+0x456>
 80162a6:	e7f0      	b.n	801628a <__gethex+0x46a>
 80162a8:	08022611 	.word	0x08022611

080162ac <L_shift>:
 80162ac:	f1c2 0208 	rsb	r2, r2, #8
 80162b0:	0092      	lsls	r2, r2, #2
 80162b2:	b570      	push	{r4, r5, r6, lr}
 80162b4:	f1c2 0620 	rsb	r6, r2, #32
 80162b8:	6843      	ldr	r3, [r0, #4]
 80162ba:	6804      	ldr	r4, [r0, #0]
 80162bc:	fa03 f506 	lsl.w	r5, r3, r6
 80162c0:	432c      	orrs	r4, r5
 80162c2:	40d3      	lsrs	r3, r2
 80162c4:	6004      	str	r4, [r0, #0]
 80162c6:	f840 3f04 	str.w	r3, [r0, #4]!
 80162ca:	4288      	cmp	r0, r1
 80162cc:	d3f4      	bcc.n	80162b8 <L_shift+0xc>
 80162ce:	bd70      	pop	{r4, r5, r6, pc}

080162d0 <__match>:
 80162d0:	b530      	push	{r4, r5, lr}
 80162d2:	6803      	ldr	r3, [r0, #0]
 80162d4:	3301      	adds	r3, #1
 80162d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80162da:	b914      	cbnz	r4, 80162e2 <__match+0x12>
 80162dc:	6003      	str	r3, [r0, #0]
 80162de:	2001      	movs	r0, #1
 80162e0:	bd30      	pop	{r4, r5, pc}
 80162e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80162e6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80162ea:	2d19      	cmp	r5, #25
 80162ec:	bf98      	it	ls
 80162ee:	3220      	addls	r2, #32
 80162f0:	42a2      	cmp	r2, r4
 80162f2:	d0f0      	beq.n	80162d6 <__match+0x6>
 80162f4:	2000      	movs	r0, #0
 80162f6:	e7f3      	b.n	80162e0 <__match+0x10>

080162f8 <__hexnan>:
 80162f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162fc:	680b      	ldr	r3, [r1, #0]
 80162fe:	6801      	ldr	r1, [r0, #0]
 8016300:	115e      	asrs	r6, r3, #5
 8016302:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016306:	f013 031f 	ands.w	r3, r3, #31
 801630a:	b087      	sub	sp, #28
 801630c:	bf18      	it	ne
 801630e:	3604      	addne	r6, #4
 8016310:	2500      	movs	r5, #0
 8016312:	1f37      	subs	r7, r6, #4
 8016314:	4682      	mov	sl, r0
 8016316:	4690      	mov	r8, r2
 8016318:	9301      	str	r3, [sp, #4]
 801631a:	f846 5c04 	str.w	r5, [r6, #-4]
 801631e:	46b9      	mov	r9, r7
 8016320:	463c      	mov	r4, r7
 8016322:	9502      	str	r5, [sp, #8]
 8016324:	46ab      	mov	fp, r5
 8016326:	784a      	ldrb	r2, [r1, #1]
 8016328:	1c4b      	adds	r3, r1, #1
 801632a:	9303      	str	r3, [sp, #12]
 801632c:	b342      	cbz	r2, 8016380 <__hexnan+0x88>
 801632e:	4610      	mov	r0, r2
 8016330:	9105      	str	r1, [sp, #20]
 8016332:	9204      	str	r2, [sp, #16]
 8016334:	f7ff fd5e 	bl	8015df4 <__hexdig_fun>
 8016338:	2800      	cmp	r0, #0
 801633a:	d14f      	bne.n	80163dc <__hexnan+0xe4>
 801633c:	9a04      	ldr	r2, [sp, #16]
 801633e:	9905      	ldr	r1, [sp, #20]
 8016340:	2a20      	cmp	r2, #32
 8016342:	d818      	bhi.n	8016376 <__hexnan+0x7e>
 8016344:	9b02      	ldr	r3, [sp, #8]
 8016346:	459b      	cmp	fp, r3
 8016348:	dd13      	ble.n	8016372 <__hexnan+0x7a>
 801634a:	454c      	cmp	r4, r9
 801634c:	d206      	bcs.n	801635c <__hexnan+0x64>
 801634e:	2d07      	cmp	r5, #7
 8016350:	dc04      	bgt.n	801635c <__hexnan+0x64>
 8016352:	462a      	mov	r2, r5
 8016354:	4649      	mov	r1, r9
 8016356:	4620      	mov	r0, r4
 8016358:	f7ff ffa8 	bl	80162ac <L_shift>
 801635c:	4544      	cmp	r4, r8
 801635e:	d950      	bls.n	8016402 <__hexnan+0x10a>
 8016360:	2300      	movs	r3, #0
 8016362:	f1a4 0904 	sub.w	r9, r4, #4
 8016366:	f844 3c04 	str.w	r3, [r4, #-4]
 801636a:	f8cd b008 	str.w	fp, [sp, #8]
 801636e:	464c      	mov	r4, r9
 8016370:	461d      	mov	r5, r3
 8016372:	9903      	ldr	r1, [sp, #12]
 8016374:	e7d7      	b.n	8016326 <__hexnan+0x2e>
 8016376:	2a29      	cmp	r2, #41	; 0x29
 8016378:	d156      	bne.n	8016428 <__hexnan+0x130>
 801637a:	3102      	adds	r1, #2
 801637c:	f8ca 1000 	str.w	r1, [sl]
 8016380:	f1bb 0f00 	cmp.w	fp, #0
 8016384:	d050      	beq.n	8016428 <__hexnan+0x130>
 8016386:	454c      	cmp	r4, r9
 8016388:	d206      	bcs.n	8016398 <__hexnan+0xa0>
 801638a:	2d07      	cmp	r5, #7
 801638c:	dc04      	bgt.n	8016398 <__hexnan+0xa0>
 801638e:	462a      	mov	r2, r5
 8016390:	4649      	mov	r1, r9
 8016392:	4620      	mov	r0, r4
 8016394:	f7ff ff8a 	bl	80162ac <L_shift>
 8016398:	4544      	cmp	r4, r8
 801639a:	d934      	bls.n	8016406 <__hexnan+0x10e>
 801639c:	f1a8 0204 	sub.w	r2, r8, #4
 80163a0:	4623      	mov	r3, r4
 80163a2:	f853 1b04 	ldr.w	r1, [r3], #4
 80163a6:	f842 1f04 	str.w	r1, [r2, #4]!
 80163aa:	429f      	cmp	r7, r3
 80163ac:	d2f9      	bcs.n	80163a2 <__hexnan+0xaa>
 80163ae:	1b3b      	subs	r3, r7, r4
 80163b0:	f023 0303 	bic.w	r3, r3, #3
 80163b4:	3304      	adds	r3, #4
 80163b6:	3401      	adds	r4, #1
 80163b8:	3e03      	subs	r6, #3
 80163ba:	42b4      	cmp	r4, r6
 80163bc:	bf88      	it	hi
 80163be:	2304      	movhi	r3, #4
 80163c0:	4443      	add	r3, r8
 80163c2:	2200      	movs	r2, #0
 80163c4:	f843 2b04 	str.w	r2, [r3], #4
 80163c8:	429f      	cmp	r7, r3
 80163ca:	d2fb      	bcs.n	80163c4 <__hexnan+0xcc>
 80163cc:	683b      	ldr	r3, [r7, #0]
 80163ce:	b91b      	cbnz	r3, 80163d8 <__hexnan+0xe0>
 80163d0:	4547      	cmp	r7, r8
 80163d2:	d127      	bne.n	8016424 <__hexnan+0x12c>
 80163d4:	2301      	movs	r3, #1
 80163d6:	603b      	str	r3, [r7, #0]
 80163d8:	2005      	movs	r0, #5
 80163da:	e026      	b.n	801642a <__hexnan+0x132>
 80163dc:	3501      	adds	r5, #1
 80163de:	2d08      	cmp	r5, #8
 80163e0:	f10b 0b01 	add.w	fp, fp, #1
 80163e4:	dd06      	ble.n	80163f4 <__hexnan+0xfc>
 80163e6:	4544      	cmp	r4, r8
 80163e8:	d9c3      	bls.n	8016372 <__hexnan+0x7a>
 80163ea:	2300      	movs	r3, #0
 80163ec:	f844 3c04 	str.w	r3, [r4, #-4]
 80163f0:	2501      	movs	r5, #1
 80163f2:	3c04      	subs	r4, #4
 80163f4:	6822      	ldr	r2, [r4, #0]
 80163f6:	f000 000f 	and.w	r0, r0, #15
 80163fa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80163fe:	6022      	str	r2, [r4, #0]
 8016400:	e7b7      	b.n	8016372 <__hexnan+0x7a>
 8016402:	2508      	movs	r5, #8
 8016404:	e7b5      	b.n	8016372 <__hexnan+0x7a>
 8016406:	9b01      	ldr	r3, [sp, #4]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d0df      	beq.n	80163cc <__hexnan+0xd4>
 801640c:	f04f 32ff 	mov.w	r2, #4294967295
 8016410:	f1c3 0320 	rsb	r3, r3, #32
 8016414:	fa22 f303 	lsr.w	r3, r2, r3
 8016418:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801641c:	401a      	ands	r2, r3
 801641e:	f846 2c04 	str.w	r2, [r6, #-4]
 8016422:	e7d3      	b.n	80163cc <__hexnan+0xd4>
 8016424:	3f04      	subs	r7, #4
 8016426:	e7d1      	b.n	80163cc <__hexnan+0xd4>
 8016428:	2004      	movs	r0, #4
 801642a:	b007      	add	sp, #28
 801642c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016430 <__ascii_mbtowc>:
 8016430:	b082      	sub	sp, #8
 8016432:	b901      	cbnz	r1, 8016436 <__ascii_mbtowc+0x6>
 8016434:	a901      	add	r1, sp, #4
 8016436:	b142      	cbz	r2, 801644a <__ascii_mbtowc+0x1a>
 8016438:	b14b      	cbz	r3, 801644e <__ascii_mbtowc+0x1e>
 801643a:	7813      	ldrb	r3, [r2, #0]
 801643c:	600b      	str	r3, [r1, #0]
 801643e:	7812      	ldrb	r2, [r2, #0]
 8016440:	1e10      	subs	r0, r2, #0
 8016442:	bf18      	it	ne
 8016444:	2001      	movne	r0, #1
 8016446:	b002      	add	sp, #8
 8016448:	4770      	bx	lr
 801644a:	4610      	mov	r0, r2
 801644c:	e7fb      	b.n	8016446 <__ascii_mbtowc+0x16>
 801644e:	f06f 0001 	mvn.w	r0, #1
 8016452:	e7f8      	b.n	8016446 <__ascii_mbtowc+0x16>

08016454 <_Balloc>:
 8016454:	b570      	push	{r4, r5, r6, lr}
 8016456:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016458:	4604      	mov	r4, r0
 801645a:	460d      	mov	r5, r1
 801645c:	b976      	cbnz	r6, 801647c <_Balloc+0x28>
 801645e:	2010      	movs	r0, #16
 8016460:	f001 f87c 	bl	801755c <malloc>
 8016464:	4602      	mov	r2, r0
 8016466:	6260      	str	r0, [r4, #36]	; 0x24
 8016468:	b920      	cbnz	r0, 8016474 <_Balloc+0x20>
 801646a:	4b18      	ldr	r3, [pc, #96]	; (80164cc <_Balloc+0x78>)
 801646c:	4818      	ldr	r0, [pc, #96]	; (80164d0 <_Balloc+0x7c>)
 801646e:	2166      	movs	r1, #102	; 0x66
 8016470:	f001 f844 	bl	80174fc <__assert_func>
 8016474:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016478:	6006      	str	r6, [r0, #0]
 801647a:	60c6      	str	r6, [r0, #12]
 801647c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801647e:	68f3      	ldr	r3, [r6, #12]
 8016480:	b183      	cbz	r3, 80164a4 <_Balloc+0x50>
 8016482:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016484:	68db      	ldr	r3, [r3, #12]
 8016486:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801648a:	b9b8      	cbnz	r0, 80164bc <_Balloc+0x68>
 801648c:	2101      	movs	r1, #1
 801648e:	fa01 f605 	lsl.w	r6, r1, r5
 8016492:	1d72      	adds	r2, r6, #5
 8016494:	0092      	lsls	r2, r2, #2
 8016496:	4620      	mov	r0, r4
 8016498:	f000 fc97 	bl	8016dca <_calloc_r>
 801649c:	b160      	cbz	r0, 80164b8 <_Balloc+0x64>
 801649e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80164a2:	e00e      	b.n	80164c2 <_Balloc+0x6e>
 80164a4:	2221      	movs	r2, #33	; 0x21
 80164a6:	2104      	movs	r1, #4
 80164a8:	4620      	mov	r0, r4
 80164aa:	f000 fc8e 	bl	8016dca <_calloc_r>
 80164ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80164b0:	60f0      	str	r0, [r6, #12]
 80164b2:	68db      	ldr	r3, [r3, #12]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d1e4      	bne.n	8016482 <_Balloc+0x2e>
 80164b8:	2000      	movs	r0, #0
 80164ba:	bd70      	pop	{r4, r5, r6, pc}
 80164bc:	6802      	ldr	r2, [r0, #0]
 80164be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80164c2:	2300      	movs	r3, #0
 80164c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80164c8:	e7f7      	b.n	80164ba <_Balloc+0x66>
 80164ca:	bf00      	nop
 80164cc:	080226a0 	.word	0x080226a0
 80164d0:	080226b7 	.word	0x080226b7

080164d4 <_Bfree>:
 80164d4:	b570      	push	{r4, r5, r6, lr}
 80164d6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80164d8:	4605      	mov	r5, r0
 80164da:	460c      	mov	r4, r1
 80164dc:	b976      	cbnz	r6, 80164fc <_Bfree+0x28>
 80164de:	2010      	movs	r0, #16
 80164e0:	f001 f83c 	bl	801755c <malloc>
 80164e4:	4602      	mov	r2, r0
 80164e6:	6268      	str	r0, [r5, #36]	; 0x24
 80164e8:	b920      	cbnz	r0, 80164f4 <_Bfree+0x20>
 80164ea:	4b09      	ldr	r3, [pc, #36]	; (8016510 <_Bfree+0x3c>)
 80164ec:	4809      	ldr	r0, [pc, #36]	; (8016514 <_Bfree+0x40>)
 80164ee:	218a      	movs	r1, #138	; 0x8a
 80164f0:	f001 f804 	bl	80174fc <__assert_func>
 80164f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80164f8:	6006      	str	r6, [r0, #0]
 80164fa:	60c6      	str	r6, [r0, #12]
 80164fc:	b13c      	cbz	r4, 801650e <_Bfree+0x3a>
 80164fe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016500:	6862      	ldr	r2, [r4, #4]
 8016502:	68db      	ldr	r3, [r3, #12]
 8016504:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016508:	6021      	str	r1, [r4, #0]
 801650a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801650e:	bd70      	pop	{r4, r5, r6, pc}
 8016510:	080226a0 	.word	0x080226a0
 8016514:	080226b7 	.word	0x080226b7

08016518 <__multadd>:
 8016518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801651c:	690e      	ldr	r6, [r1, #16]
 801651e:	4607      	mov	r7, r0
 8016520:	4698      	mov	r8, r3
 8016522:	460c      	mov	r4, r1
 8016524:	f101 0014 	add.w	r0, r1, #20
 8016528:	2300      	movs	r3, #0
 801652a:	6805      	ldr	r5, [r0, #0]
 801652c:	b2a9      	uxth	r1, r5
 801652e:	fb02 8101 	mla	r1, r2, r1, r8
 8016532:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016536:	0c2d      	lsrs	r5, r5, #16
 8016538:	fb02 c505 	mla	r5, r2, r5, ip
 801653c:	b289      	uxth	r1, r1
 801653e:	3301      	adds	r3, #1
 8016540:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016544:	429e      	cmp	r6, r3
 8016546:	f840 1b04 	str.w	r1, [r0], #4
 801654a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801654e:	dcec      	bgt.n	801652a <__multadd+0x12>
 8016550:	f1b8 0f00 	cmp.w	r8, #0
 8016554:	d022      	beq.n	801659c <__multadd+0x84>
 8016556:	68a3      	ldr	r3, [r4, #8]
 8016558:	42b3      	cmp	r3, r6
 801655a:	dc19      	bgt.n	8016590 <__multadd+0x78>
 801655c:	6861      	ldr	r1, [r4, #4]
 801655e:	4638      	mov	r0, r7
 8016560:	3101      	adds	r1, #1
 8016562:	f7ff ff77 	bl	8016454 <_Balloc>
 8016566:	4605      	mov	r5, r0
 8016568:	b928      	cbnz	r0, 8016576 <__multadd+0x5e>
 801656a:	4602      	mov	r2, r0
 801656c:	4b0d      	ldr	r3, [pc, #52]	; (80165a4 <__multadd+0x8c>)
 801656e:	480e      	ldr	r0, [pc, #56]	; (80165a8 <__multadd+0x90>)
 8016570:	21b5      	movs	r1, #181	; 0xb5
 8016572:	f000 ffc3 	bl	80174fc <__assert_func>
 8016576:	6922      	ldr	r2, [r4, #16]
 8016578:	3202      	adds	r2, #2
 801657a:	f104 010c 	add.w	r1, r4, #12
 801657e:	0092      	lsls	r2, r2, #2
 8016580:	300c      	adds	r0, #12
 8016582:	f7fe fc59 	bl	8014e38 <memcpy>
 8016586:	4621      	mov	r1, r4
 8016588:	4638      	mov	r0, r7
 801658a:	f7ff ffa3 	bl	80164d4 <_Bfree>
 801658e:	462c      	mov	r4, r5
 8016590:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016594:	3601      	adds	r6, #1
 8016596:	f8c3 8014 	str.w	r8, [r3, #20]
 801659a:	6126      	str	r6, [r4, #16]
 801659c:	4620      	mov	r0, r4
 801659e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165a2:	bf00      	nop
 80165a4:	08022611 	.word	0x08022611
 80165a8:	080226b7 	.word	0x080226b7

080165ac <__s2b>:
 80165ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80165b0:	460c      	mov	r4, r1
 80165b2:	4615      	mov	r5, r2
 80165b4:	461f      	mov	r7, r3
 80165b6:	2209      	movs	r2, #9
 80165b8:	3308      	adds	r3, #8
 80165ba:	4606      	mov	r6, r0
 80165bc:	fb93 f3f2 	sdiv	r3, r3, r2
 80165c0:	2100      	movs	r1, #0
 80165c2:	2201      	movs	r2, #1
 80165c4:	429a      	cmp	r2, r3
 80165c6:	db09      	blt.n	80165dc <__s2b+0x30>
 80165c8:	4630      	mov	r0, r6
 80165ca:	f7ff ff43 	bl	8016454 <_Balloc>
 80165ce:	b940      	cbnz	r0, 80165e2 <__s2b+0x36>
 80165d0:	4602      	mov	r2, r0
 80165d2:	4b19      	ldr	r3, [pc, #100]	; (8016638 <__s2b+0x8c>)
 80165d4:	4819      	ldr	r0, [pc, #100]	; (801663c <__s2b+0x90>)
 80165d6:	21ce      	movs	r1, #206	; 0xce
 80165d8:	f000 ff90 	bl	80174fc <__assert_func>
 80165dc:	0052      	lsls	r2, r2, #1
 80165de:	3101      	adds	r1, #1
 80165e0:	e7f0      	b.n	80165c4 <__s2b+0x18>
 80165e2:	9b08      	ldr	r3, [sp, #32]
 80165e4:	6143      	str	r3, [r0, #20]
 80165e6:	2d09      	cmp	r5, #9
 80165e8:	f04f 0301 	mov.w	r3, #1
 80165ec:	6103      	str	r3, [r0, #16]
 80165ee:	dd16      	ble.n	801661e <__s2b+0x72>
 80165f0:	f104 0909 	add.w	r9, r4, #9
 80165f4:	46c8      	mov	r8, r9
 80165f6:	442c      	add	r4, r5
 80165f8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80165fc:	4601      	mov	r1, r0
 80165fe:	3b30      	subs	r3, #48	; 0x30
 8016600:	220a      	movs	r2, #10
 8016602:	4630      	mov	r0, r6
 8016604:	f7ff ff88 	bl	8016518 <__multadd>
 8016608:	45a0      	cmp	r8, r4
 801660a:	d1f5      	bne.n	80165f8 <__s2b+0x4c>
 801660c:	f1a5 0408 	sub.w	r4, r5, #8
 8016610:	444c      	add	r4, r9
 8016612:	1b2d      	subs	r5, r5, r4
 8016614:	1963      	adds	r3, r4, r5
 8016616:	42bb      	cmp	r3, r7
 8016618:	db04      	blt.n	8016624 <__s2b+0x78>
 801661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801661e:	340a      	adds	r4, #10
 8016620:	2509      	movs	r5, #9
 8016622:	e7f6      	b.n	8016612 <__s2b+0x66>
 8016624:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016628:	4601      	mov	r1, r0
 801662a:	3b30      	subs	r3, #48	; 0x30
 801662c:	220a      	movs	r2, #10
 801662e:	4630      	mov	r0, r6
 8016630:	f7ff ff72 	bl	8016518 <__multadd>
 8016634:	e7ee      	b.n	8016614 <__s2b+0x68>
 8016636:	bf00      	nop
 8016638:	08022611 	.word	0x08022611
 801663c:	080226b7 	.word	0x080226b7

08016640 <__hi0bits>:
 8016640:	0c03      	lsrs	r3, r0, #16
 8016642:	041b      	lsls	r3, r3, #16
 8016644:	b9d3      	cbnz	r3, 801667c <__hi0bits+0x3c>
 8016646:	0400      	lsls	r0, r0, #16
 8016648:	2310      	movs	r3, #16
 801664a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801664e:	bf04      	itt	eq
 8016650:	0200      	lsleq	r0, r0, #8
 8016652:	3308      	addeq	r3, #8
 8016654:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016658:	bf04      	itt	eq
 801665a:	0100      	lsleq	r0, r0, #4
 801665c:	3304      	addeq	r3, #4
 801665e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016662:	bf04      	itt	eq
 8016664:	0080      	lsleq	r0, r0, #2
 8016666:	3302      	addeq	r3, #2
 8016668:	2800      	cmp	r0, #0
 801666a:	db05      	blt.n	8016678 <__hi0bits+0x38>
 801666c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016670:	f103 0301 	add.w	r3, r3, #1
 8016674:	bf08      	it	eq
 8016676:	2320      	moveq	r3, #32
 8016678:	4618      	mov	r0, r3
 801667a:	4770      	bx	lr
 801667c:	2300      	movs	r3, #0
 801667e:	e7e4      	b.n	801664a <__hi0bits+0xa>

08016680 <__lo0bits>:
 8016680:	6803      	ldr	r3, [r0, #0]
 8016682:	f013 0207 	ands.w	r2, r3, #7
 8016686:	4601      	mov	r1, r0
 8016688:	d00b      	beq.n	80166a2 <__lo0bits+0x22>
 801668a:	07da      	lsls	r2, r3, #31
 801668c:	d424      	bmi.n	80166d8 <__lo0bits+0x58>
 801668e:	0798      	lsls	r0, r3, #30
 8016690:	bf49      	itett	mi
 8016692:	085b      	lsrmi	r3, r3, #1
 8016694:	089b      	lsrpl	r3, r3, #2
 8016696:	2001      	movmi	r0, #1
 8016698:	600b      	strmi	r3, [r1, #0]
 801669a:	bf5c      	itt	pl
 801669c:	600b      	strpl	r3, [r1, #0]
 801669e:	2002      	movpl	r0, #2
 80166a0:	4770      	bx	lr
 80166a2:	b298      	uxth	r0, r3
 80166a4:	b9b0      	cbnz	r0, 80166d4 <__lo0bits+0x54>
 80166a6:	0c1b      	lsrs	r3, r3, #16
 80166a8:	2010      	movs	r0, #16
 80166aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80166ae:	bf04      	itt	eq
 80166b0:	0a1b      	lsreq	r3, r3, #8
 80166b2:	3008      	addeq	r0, #8
 80166b4:	071a      	lsls	r2, r3, #28
 80166b6:	bf04      	itt	eq
 80166b8:	091b      	lsreq	r3, r3, #4
 80166ba:	3004      	addeq	r0, #4
 80166bc:	079a      	lsls	r2, r3, #30
 80166be:	bf04      	itt	eq
 80166c0:	089b      	lsreq	r3, r3, #2
 80166c2:	3002      	addeq	r0, #2
 80166c4:	07da      	lsls	r2, r3, #31
 80166c6:	d403      	bmi.n	80166d0 <__lo0bits+0x50>
 80166c8:	085b      	lsrs	r3, r3, #1
 80166ca:	f100 0001 	add.w	r0, r0, #1
 80166ce:	d005      	beq.n	80166dc <__lo0bits+0x5c>
 80166d0:	600b      	str	r3, [r1, #0]
 80166d2:	4770      	bx	lr
 80166d4:	4610      	mov	r0, r2
 80166d6:	e7e8      	b.n	80166aa <__lo0bits+0x2a>
 80166d8:	2000      	movs	r0, #0
 80166da:	4770      	bx	lr
 80166dc:	2020      	movs	r0, #32
 80166de:	4770      	bx	lr

080166e0 <__i2b>:
 80166e0:	b510      	push	{r4, lr}
 80166e2:	460c      	mov	r4, r1
 80166e4:	2101      	movs	r1, #1
 80166e6:	f7ff feb5 	bl	8016454 <_Balloc>
 80166ea:	4602      	mov	r2, r0
 80166ec:	b928      	cbnz	r0, 80166fa <__i2b+0x1a>
 80166ee:	4b05      	ldr	r3, [pc, #20]	; (8016704 <__i2b+0x24>)
 80166f0:	4805      	ldr	r0, [pc, #20]	; (8016708 <__i2b+0x28>)
 80166f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80166f6:	f000 ff01 	bl	80174fc <__assert_func>
 80166fa:	2301      	movs	r3, #1
 80166fc:	6144      	str	r4, [r0, #20]
 80166fe:	6103      	str	r3, [r0, #16]
 8016700:	bd10      	pop	{r4, pc}
 8016702:	bf00      	nop
 8016704:	08022611 	.word	0x08022611
 8016708:	080226b7 	.word	0x080226b7

0801670c <__multiply>:
 801670c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016710:	4614      	mov	r4, r2
 8016712:	690a      	ldr	r2, [r1, #16]
 8016714:	6923      	ldr	r3, [r4, #16]
 8016716:	429a      	cmp	r2, r3
 8016718:	bfb8      	it	lt
 801671a:	460b      	movlt	r3, r1
 801671c:	460d      	mov	r5, r1
 801671e:	bfbc      	itt	lt
 8016720:	4625      	movlt	r5, r4
 8016722:	461c      	movlt	r4, r3
 8016724:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016728:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801672c:	68ab      	ldr	r3, [r5, #8]
 801672e:	6869      	ldr	r1, [r5, #4]
 8016730:	eb0a 0709 	add.w	r7, sl, r9
 8016734:	42bb      	cmp	r3, r7
 8016736:	b085      	sub	sp, #20
 8016738:	bfb8      	it	lt
 801673a:	3101      	addlt	r1, #1
 801673c:	f7ff fe8a 	bl	8016454 <_Balloc>
 8016740:	b930      	cbnz	r0, 8016750 <__multiply+0x44>
 8016742:	4602      	mov	r2, r0
 8016744:	4b42      	ldr	r3, [pc, #264]	; (8016850 <__multiply+0x144>)
 8016746:	4843      	ldr	r0, [pc, #268]	; (8016854 <__multiply+0x148>)
 8016748:	f240 115d 	movw	r1, #349	; 0x15d
 801674c:	f000 fed6 	bl	80174fc <__assert_func>
 8016750:	f100 0614 	add.w	r6, r0, #20
 8016754:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016758:	4633      	mov	r3, r6
 801675a:	2200      	movs	r2, #0
 801675c:	4543      	cmp	r3, r8
 801675e:	d31e      	bcc.n	801679e <__multiply+0x92>
 8016760:	f105 0c14 	add.w	ip, r5, #20
 8016764:	f104 0314 	add.w	r3, r4, #20
 8016768:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 801676c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016770:	9202      	str	r2, [sp, #8]
 8016772:	ebac 0205 	sub.w	r2, ip, r5
 8016776:	3a15      	subs	r2, #21
 8016778:	f022 0203 	bic.w	r2, r2, #3
 801677c:	3204      	adds	r2, #4
 801677e:	f105 0115 	add.w	r1, r5, #21
 8016782:	458c      	cmp	ip, r1
 8016784:	bf38      	it	cc
 8016786:	2204      	movcc	r2, #4
 8016788:	9201      	str	r2, [sp, #4]
 801678a:	9a02      	ldr	r2, [sp, #8]
 801678c:	9303      	str	r3, [sp, #12]
 801678e:	429a      	cmp	r2, r3
 8016790:	d808      	bhi.n	80167a4 <__multiply+0x98>
 8016792:	2f00      	cmp	r7, #0
 8016794:	dc55      	bgt.n	8016842 <__multiply+0x136>
 8016796:	6107      	str	r7, [r0, #16]
 8016798:	b005      	add	sp, #20
 801679a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801679e:	f843 2b04 	str.w	r2, [r3], #4
 80167a2:	e7db      	b.n	801675c <__multiply+0x50>
 80167a4:	f8b3 a000 	ldrh.w	sl, [r3]
 80167a8:	f1ba 0f00 	cmp.w	sl, #0
 80167ac:	d020      	beq.n	80167f0 <__multiply+0xe4>
 80167ae:	f105 0e14 	add.w	lr, r5, #20
 80167b2:	46b1      	mov	r9, r6
 80167b4:	2200      	movs	r2, #0
 80167b6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80167ba:	f8d9 b000 	ldr.w	fp, [r9]
 80167be:	b2a1      	uxth	r1, r4
 80167c0:	fa1f fb8b 	uxth.w	fp, fp
 80167c4:	fb0a b101 	mla	r1, sl, r1, fp
 80167c8:	4411      	add	r1, r2
 80167ca:	f8d9 2000 	ldr.w	r2, [r9]
 80167ce:	0c24      	lsrs	r4, r4, #16
 80167d0:	0c12      	lsrs	r2, r2, #16
 80167d2:	fb0a 2404 	mla	r4, sl, r4, r2
 80167d6:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80167da:	b289      	uxth	r1, r1
 80167dc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80167e0:	45f4      	cmp	ip, lr
 80167e2:	f849 1b04 	str.w	r1, [r9], #4
 80167e6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80167ea:	d8e4      	bhi.n	80167b6 <__multiply+0xaa>
 80167ec:	9901      	ldr	r1, [sp, #4]
 80167ee:	5072      	str	r2, [r6, r1]
 80167f0:	9a03      	ldr	r2, [sp, #12]
 80167f2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80167f6:	3304      	adds	r3, #4
 80167f8:	f1b9 0f00 	cmp.w	r9, #0
 80167fc:	d01f      	beq.n	801683e <__multiply+0x132>
 80167fe:	6834      	ldr	r4, [r6, #0]
 8016800:	f105 0114 	add.w	r1, r5, #20
 8016804:	46b6      	mov	lr, r6
 8016806:	f04f 0a00 	mov.w	sl, #0
 801680a:	880a      	ldrh	r2, [r1, #0]
 801680c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8016810:	fb09 b202 	mla	r2, r9, r2, fp
 8016814:	4492      	add	sl, r2
 8016816:	b2a4      	uxth	r4, r4
 8016818:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801681c:	f84e 4b04 	str.w	r4, [lr], #4
 8016820:	f851 4b04 	ldr.w	r4, [r1], #4
 8016824:	f8be 2000 	ldrh.w	r2, [lr]
 8016828:	0c24      	lsrs	r4, r4, #16
 801682a:	fb09 2404 	mla	r4, r9, r4, r2
 801682e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8016832:	458c      	cmp	ip, r1
 8016834:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8016838:	d8e7      	bhi.n	801680a <__multiply+0xfe>
 801683a:	9a01      	ldr	r2, [sp, #4]
 801683c:	50b4      	str	r4, [r6, r2]
 801683e:	3604      	adds	r6, #4
 8016840:	e7a3      	b.n	801678a <__multiply+0x7e>
 8016842:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8016846:	2b00      	cmp	r3, #0
 8016848:	d1a5      	bne.n	8016796 <__multiply+0x8a>
 801684a:	3f01      	subs	r7, #1
 801684c:	e7a1      	b.n	8016792 <__multiply+0x86>
 801684e:	bf00      	nop
 8016850:	08022611 	.word	0x08022611
 8016854:	080226b7 	.word	0x080226b7

08016858 <__pow5mult>:
 8016858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801685c:	4615      	mov	r5, r2
 801685e:	f012 0203 	ands.w	r2, r2, #3
 8016862:	4606      	mov	r6, r0
 8016864:	460f      	mov	r7, r1
 8016866:	d007      	beq.n	8016878 <__pow5mult+0x20>
 8016868:	4c25      	ldr	r4, [pc, #148]	; (8016900 <__pow5mult+0xa8>)
 801686a:	3a01      	subs	r2, #1
 801686c:	2300      	movs	r3, #0
 801686e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8016872:	f7ff fe51 	bl	8016518 <__multadd>
 8016876:	4607      	mov	r7, r0
 8016878:	10ad      	asrs	r5, r5, #2
 801687a:	d03d      	beq.n	80168f8 <__pow5mult+0xa0>
 801687c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801687e:	b97c      	cbnz	r4, 80168a0 <__pow5mult+0x48>
 8016880:	2010      	movs	r0, #16
 8016882:	f000 fe6b 	bl	801755c <malloc>
 8016886:	4602      	mov	r2, r0
 8016888:	6270      	str	r0, [r6, #36]	; 0x24
 801688a:	b928      	cbnz	r0, 8016898 <__pow5mult+0x40>
 801688c:	4b1d      	ldr	r3, [pc, #116]	; (8016904 <__pow5mult+0xac>)
 801688e:	481e      	ldr	r0, [pc, #120]	; (8016908 <__pow5mult+0xb0>)
 8016890:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8016894:	f000 fe32 	bl	80174fc <__assert_func>
 8016898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801689c:	6004      	str	r4, [r0, #0]
 801689e:	60c4      	str	r4, [r0, #12]
 80168a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80168a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80168a8:	b94c      	cbnz	r4, 80168be <__pow5mult+0x66>
 80168aa:	f240 2171 	movw	r1, #625	; 0x271
 80168ae:	4630      	mov	r0, r6
 80168b0:	f7ff ff16 	bl	80166e0 <__i2b>
 80168b4:	2300      	movs	r3, #0
 80168b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80168ba:	4604      	mov	r4, r0
 80168bc:	6003      	str	r3, [r0, #0]
 80168be:	f04f 0900 	mov.w	r9, #0
 80168c2:	07eb      	lsls	r3, r5, #31
 80168c4:	d50a      	bpl.n	80168dc <__pow5mult+0x84>
 80168c6:	4639      	mov	r1, r7
 80168c8:	4622      	mov	r2, r4
 80168ca:	4630      	mov	r0, r6
 80168cc:	f7ff ff1e 	bl	801670c <__multiply>
 80168d0:	4639      	mov	r1, r7
 80168d2:	4680      	mov	r8, r0
 80168d4:	4630      	mov	r0, r6
 80168d6:	f7ff fdfd 	bl	80164d4 <_Bfree>
 80168da:	4647      	mov	r7, r8
 80168dc:	106d      	asrs	r5, r5, #1
 80168de:	d00b      	beq.n	80168f8 <__pow5mult+0xa0>
 80168e0:	6820      	ldr	r0, [r4, #0]
 80168e2:	b938      	cbnz	r0, 80168f4 <__pow5mult+0x9c>
 80168e4:	4622      	mov	r2, r4
 80168e6:	4621      	mov	r1, r4
 80168e8:	4630      	mov	r0, r6
 80168ea:	f7ff ff0f 	bl	801670c <__multiply>
 80168ee:	6020      	str	r0, [r4, #0]
 80168f0:	f8c0 9000 	str.w	r9, [r0]
 80168f4:	4604      	mov	r4, r0
 80168f6:	e7e4      	b.n	80168c2 <__pow5mult+0x6a>
 80168f8:	4638      	mov	r0, r7
 80168fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80168fe:	bf00      	nop
 8016900:	08022808 	.word	0x08022808
 8016904:	080226a0 	.word	0x080226a0
 8016908:	080226b7 	.word	0x080226b7

0801690c <__lshift>:
 801690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016910:	460c      	mov	r4, r1
 8016912:	6849      	ldr	r1, [r1, #4]
 8016914:	6923      	ldr	r3, [r4, #16]
 8016916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801691a:	68a3      	ldr	r3, [r4, #8]
 801691c:	4607      	mov	r7, r0
 801691e:	4691      	mov	r9, r2
 8016920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8016924:	f108 0601 	add.w	r6, r8, #1
 8016928:	42b3      	cmp	r3, r6
 801692a:	db0b      	blt.n	8016944 <__lshift+0x38>
 801692c:	4638      	mov	r0, r7
 801692e:	f7ff fd91 	bl	8016454 <_Balloc>
 8016932:	4605      	mov	r5, r0
 8016934:	b948      	cbnz	r0, 801694a <__lshift+0x3e>
 8016936:	4602      	mov	r2, r0
 8016938:	4b28      	ldr	r3, [pc, #160]	; (80169dc <__lshift+0xd0>)
 801693a:	4829      	ldr	r0, [pc, #164]	; (80169e0 <__lshift+0xd4>)
 801693c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8016940:	f000 fddc 	bl	80174fc <__assert_func>
 8016944:	3101      	adds	r1, #1
 8016946:	005b      	lsls	r3, r3, #1
 8016948:	e7ee      	b.n	8016928 <__lshift+0x1c>
 801694a:	2300      	movs	r3, #0
 801694c:	f100 0114 	add.w	r1, r0, #20
 8016950:	f100 0210 	add.w	r2, r0, #16
 8016954:	4618      	mov	r0, r3
 8016956:	4553      	cmp	r3, sl
 8016958:	db33      	blt.n	80169c2 <__lshift+0xb6>
 801695a:	6920      	ldr	r0, [r4, #16]
 801695c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8016960:	f104 0314 	add.w	r3, r4, #20
 8016964:	f019 091f 	ands.w	r9, r9, #31
 8016968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801696c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8016970:	d02b      	beq.n	80169ca <__lshift+0xbe>
 8016972:	f1c9 0e20 	rsb	lr, r9, #32
 8016976:	468a      	mov	sl, r1
 8016978:	2200      	movs	r2, #0
 801697a:	6818      	ldr	r0, [r3, #0]
 801697c:	fa00 f009 	lsl.w	r0, r0, r9
 8016980:	4302      	orrs	r2, r0
 8016982:	f84a 2b04 	str.w	r2, [sl], #4
 8016986:	f853 2b04 	ldr.w	r2, [r3], #4
 801698a:	459c      	cmp	ip, r3
 801698c:	fa22 f20e 	lsr.w	r2, r2, lr
 8016990:	d8f3      	bhi.n	801697a <__lshift+0x6e>
 8016992:	ebac 0304 	sub.w	r3, ip, r4
 8016996:	3b15      	subs	r3, #21
 8016998:	f023 0303 	bic.w	r3, r3, #3
 801699c:	3304      	adds	r3, #4
 801699e:	f104 0015 	add.w	r0, r4, #21
 80169a2:	4584      	cmp	ip, r0
 80169a4:	bf38      	it	cc
 80169a6:	2304      	movcc	r3, #4
 80169a8:	50ca      	str	r2, [r1, r3]
 80169aa:	b10a      	cbz	r2, 80169b0 <__lshift+0xa4>
 80169ac:	f108 0602 	add.w	r6, r8, #2
 80169b0:	3e01      	subs	r6, #1
 80169b2:	4638      	mov	r0, r7
 80169b4:	612e      	str	r6, [r5, #16]
 80169b6:	4621      	mov	r1, r4
 80169b8:	f7ff fd8c 	bl	80164d4 <_Bfree>
 80169bc:	4628      	mov	r0, r5
 80169be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169c2:	f842 0f04 	str.w	r0, [r2, #4]!
 80169c6:	3301      	adds	r3, #1
 80169c8:	e7c5      	b.n	8016956 <__lshift+0x4a>
 80169ca:	3904      	subs	r1, #4
 80169cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80169d0:	f841 2f04 	str.w	r2, [r1, #4]!
 80169d4:	459c      	cmp	ip, r3
 80169d6:	d8f9      	bhi.n	80169cc <__lshift+0xc0>
 80169d8:	e7ea      	b.n	80169b0 <__lshift+0xa4>
 80169da:	bf00      	nop
 80169dc:	08022611 	.word	0x08022611
 80169e0:	080226b7 	.word	0x080226b7

080169e4 <__mcmp>:
 80169e4:	b530      	push	{r4, r5, lr}
 80169e6:	6902      	ldr	r2, [r0, #16]
 80169e8:	690c      	ldr	r4, [r1, #16]
 80169ea:	1b12      	subs	r2, r2, r4
 80169ec:	d10e      	bne.n	8016a0c <__mcmp+0x28>
 80169ee:	f100 0314 	add.w	r3, r0, #20
 80169f2:	3114      	adds	r1, #20
 80169f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80169f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80169fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8016a00:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8016a04:	42a5      	cmp	r5, r4
 8016a06:	d003      	beq.n	8016a10 <__mcmp+0x2c>
 8016a08:	d305      	bcc.n	8016a16 <__mcmp+0x32>
 8016a0a:	2201      	movs	r2, #1
 8016a0c:	4610      	mov	r0, r2
 8016a0e:	bd30      	pop	{r4, r5, pc}
 8016a10:	4283      	cmp	r3, r0
 8016a12:	d3f3      	bcc.n	80169fc <__mcmp+0x18>
 8016a14:	e7fa      	b.n	8016a0c <__mcmp+0x28>
 8016a16:	f04f 32ff 	mov.w	r2, #4294967295
 8016a1a:	e7f7      	b.n	8016a0c <__mcmp+0x28>

08016a1c <__mdiff>:
 8016a1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a20:	460c      	mov	r4, r1
 8016a22:	4606      	mov	r6, r0
 8016a24:	4611      	mov	r1, r2
 8016a26:	4620      	mov	r0, r4
 8016a28:	4617      	mov	r7, r2
 8016a2a:	f7ff ffdb 	bl	80169e4 <__mcmp>
 8016a2e:	1e05      	subs	r5, r0, #0
 8016a30:	d110      	bne.n	8016a54 <__mdiff+0x38>
 8016a32:	4629      	mov	r1, r5
 8016a34:	4630      	mov	r0, r6
 8016a36:	f7ff fd0d 	bl	8016454 <_Balloc>
 8016a3a:	b930      	cbnz	r0, 8016a4a <__mdiff+0x2e>
 8016a3c:	4b39      	ldr	r3, [pc, #228]	; (8016b24 <__mdiff+0x108>)
 8016a3e:	4602      	mov	r2, r0
 8016a40:	f240 2132 	movw	r1, #562	; 0x232
 8016a44:	4838      	ldr	r0, [pc, #224]	; (8016b28 <__mdiff+0x10c>)
 8016a46:	f000 fd59 	bl	80174fc <__assert_func>
 8016a4a:	2301      	movs	r3, #1
 8016a4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8016a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a54:	bfa4      	itt	ge
 8016a56:	463b      	movge	r3, r7
 8016a58:	4627      	movge	r7, r4
 8016a5a:	4630      	mov	r0, r6
 8016a5c:	6879      	ldr	r1, [r7, #4]
 8016a5e:	bfa6      	itte	ge
 8016a60:	461c      	movge	r4, r3
 8016a62:	2500      	movge	r5, #0
 8016a64:	2501      	movlt	r5, #1
 8016a66:	f7ff fcf5 	bl	8016454 <_Balloc>
 8016a6a:	b920      	cbnz	r0, 8016a76 <__mdiff+0x5a>
 8016a6c:	4b2d      	ldr	r3, [pc, #180]	; (8016b24 <__mdiff+0x108>)
 8016a6e:	4602      	mov	r2, r0
 8016a70:	f44f 7110 	mov.w	r1, #576	; 0x240
 8016a74:	e7e6      	b.n	8016a44 <__mdiff+0x28>
 8016a76:	693e      	ldr	r6, [r7, #16]
 8016a78:	60c5      	str	r5, [r0, #12]
 8016a7a:	6925      	ldr	r5, [r4, #16]
 8016a7c:	f107 0114 	add.w	r1, r7, #20
 8016a80:	f104 0914 	add.w	r9, r4, #20
 8016a84:	f100 0e14 	add.w	lr, r0, #20
 8016a88:	f107 0210 	add.w	r2, r7, #16
 8016a8c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8016a90:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8016a94:	46f2      	mov	sl, lr
 8016a96:	2700      	movs	r7, #0
 8016a98:	f859 3b04 	ldr.w	r3, [r9], #4
 8016a9c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8016aa0:	fa1f f883 	uxth.w	r8, r3
 8016aa4:	fa17 f78b 	uxtah	r7, r7, fp
 8016aa8:	0c1b      	lsrs	r3, r3, #16
 8016aaa:	eba7 0808 	sub.w	r8, r7, r8
 8016aae:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8016ab2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8016ab6:	fa1f f888 	uxth.w	r8, r8
 8016aba:	141f      	asrs	r7, r3, #16
 8016abc:	454d      	cmp	r5, r9
 8016abe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8016ac2:	f84a 3b04 	str.w	r3, [sl], #4
 8016ac6:	d8e7      	bhi.n	8016a98 <__mdiff+0x7c>
 8016ac8:	1b2b      	subs	r3, r5, r4
 8016aca:	3b15      	subs	r3, #21
 8016acc:	f023 0303 	bic.w	r3, r3, #3
 8016ad0:	3304      	adds	r3, #4
 8016ad2:	3415      	adds	r4, #21
 8016ad4:	42a5      	cmp	r5, r4
 8016ad6:	bf38      	it	cc
 8016ad8:	2304      	movcc	r3, #4
 8016ada:	4419      	add	r1, r3
 8016adc:	4473      	add	r3, lr
 8016ade:	469e      	mov	lr, r3
 8016ae0:	460d      	mov	r5, r1
 8016ae2:	4565      	cmp	r5, ip
 8016ae4:	d30e      	bcc.n	8016b04 <__mdiff+0xe8>
 8016ae6:	f10c 0203 	add.w	r2, ip, #3
 8016aea:	1a52      	subs	r2, r2, r1
 8016aec:	f022 0203 	bic.w	r2, r2, #3
 8016af0:	3903      	subs	r1, #3
 8016af2:	458c      	cmp	ip, r1
 8016af4:	bf38      	it	cc
 8016af6:	2200      	movcc	r2, #0
 8016af8:	441a      	add	r2, r3
 8016afa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8016afe:	b17b      	cbz	r3, 8016b20 <__mdiff+0x104>
 8016b00:	6106      	str	r6, [r0, #16]
 8016b02:	e7a5      	b.n	8016a50 <__mdiff+0x34>
 8016b04:	f855 8b04 	ldr.w	r8, [r5], #4
 8016b08:	fa17 f488 	uxtah	r4, r7, r8
 8016b0c:	1422      	asrs	r2, r4, #16
 8016b0e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8016b12:	b2a4      	uxth	r4, r4
 8016b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8016b18:	f84e 4b04 	str.w	r4, [lr], #4
 8016b1c:	1417      	asrs	r7, r2, #16
 8016b1e:	e7e0      	b.n	8016ae2 <__mdiff+0xc6>
 8016b20:	3e01      	subs	r6, #1
 8016b22:	e7ea      	b.n	8016afa <__mdiff+0xde>
 8016b24:	08022611 	.word	0x08022611
 8016b28:	080226b7 	.word	0x080226b7

08016b2c <__ulp>:
 8016b2c:	b082      	sub	sp, #8
 8016b2e:	ed8d 0b00 	vstr	d0, [sp]
 8016b32:	9b01      	ldr	r3, [sp, #4]
 8016b34:	4912      	ldr	r1, [pc, #72]	; (8016b80 <__ulp+0x54>)
 8016b36:	4019      	ands	r1, r3
 8016b38:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8016b3c:	2900      	cmp	r1, #0
 8016b3e:	dd05      	ble.n	8016b4c <__ulp+0x20>
 8016b40:	2200      	movs	r2, #0
 8016b42:	460b      	mov	r3, r1
 8016b44:	ec43 2b10 	vmov	d0, r2, r3
 8016b48:	b002      	add	sp, #8
 8016b4a:	4770      	bx	lr
 8016b4c:	4249      	negs	r1, r1
 8016b4e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8016b52:	ea4f 5021 	mov.w	r0, r1, asr #20
 8016b56:	f04f 0200 	mov.w	r2, #0
 8016b5a:	f04f 0300 	mov.w	r3, #0
 8016b5e:	da04      	bge.n	8016b6a <__ulp+0x3e>
 8016b60:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8016b64:	fa41 f300 	asr.w	r3, r1, r0
 8016b68:	e7ec      	b.n	8016b44 <__ulp+0x18>
 8016b6a:	f1a0 0114 	sub.w	r1, r0, #20
 8016b6e:	291e      	cmp	r1, #30
 8016b70:	bfda      	itte	le
 8016b72:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8016b76:	fa20 f101 	lsrle.w	r1, r0, r1
 8016b7a:	2101      	movgt	r1, #1
 8016b7c:	460a      	mov	r2, r1
 8016b7e:	e7e1      	b.n	8016b44 <__ulp+0x18>
 8016b80:	7ff00000 	.word	0x7ff00000

08016b84 <__b2d>:
 8016b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b86:	6905      	ldr	r5, [r0, #16]
 8016b88:	f100 0714 	add.w	r7, r0, #20
 8016b8c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8016b90:	1f2e      	subs	r6, r5, #4
 8016b92:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8016b96:	4620      	mov	r0, r4
 8016b98:	f7ff fd52 	bl	8016640 <__hi0bits>
 8016b9c:	f1c0 0320 	rsb	r3, r0, #32
 8016ba0:	280a      	cmp	r0, #10
 8016ba2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8016c20 <__b2d+0x9c>
 8016ba6:	600b      	str	r3, [r1, #0]
 8016ba8:	dc14      	bgt.n	8016bd4 <__b2d+0x50>
 8016baa:	f1c0 0e0b 	rsb	lr, r0, #11
 8016bae:	fa24 f10e 	lsr.w	r1, r4, lr
 8016bb2:	42b7      	cmp	r7, r6
 8016bb4:	ea41 030c 	orr.w	r3, r1, ip
 8016bb8:	bf34      	ite	cc
 8016bba:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016bbe:	2100      	movcs	r1, #0
 8016bc0:	3015      	adds	r0, #21
 8016bc2:	fa04 f000 	lsl.w	r0, r4, r0
 8016bc6:	fa21 f10e 	lsr.w	r1, r1, lr
 8016bca:	ea40 0201 	orr.w	r2, r0, r1
 8016bce:	ec43 2b10 	vmov	d0, r2, r3
 8016bd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bd4:	42b7      	cmp	r7, r6
 8016bd6:	bf3a      	itte	cc
 8016bd8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8016bdc:	f1a5 0608 	subcc.w	r6, r5, #8
 8016be0:	2100      	movcs	r1, #0
 8016be2:	380b      	subs	r0, #11
 8016be4:	d017      	beq.n	8016c16 <__b2d+0x92>
 8016be6:	f1c0 0c20 	rsb	ip, r0, #32
 8016bea:	fa04 f500 	lsl.w	r5, r4, r0
 8016bee:	42be      	cmp	r6, r7
 8016bf0:	fa21 f40c 	lsr.w	r4, r1, ip
 8016bf4:	ea45 0504 	orr.w	r5, r5, r4
 8016bf8:	bf8c      	ite	hi
 8016bfa:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8016bfe:	2400      	movls	r4, #0
 8016c00:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8016c04:	fa01 f000 	lsl.w	r0, r1, r0
 8016c08:	fa24 f40c 	lsr.w	r4, r4, ip
 8016c0c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8016c10:	ea40 0204 	orr.w	r2, r0, r4
 8016c14:	e7db      	b.n	8016bce <__b2d+0x4a>
 8016c16:	ea44 030c 	orr.w	r3, r4, ip
 8016c1a:	460a      	mov	r2, r1
 8016c1c:	e7d7      	b.n	8016bce <__b2d+0x4a>
 8016c1e:	bf00      	nop
 8016c20:	3ff00000 	.word	0x3ff00000

08016c24 <__d2b>:
 8016c24:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8016c28:	4689      	mov	r9, r1
 8016c2a:	2101      	movs	r1, #1
 8016c2c:	ec57 6b10 	vmov	r6, r7, d0
 8016c30:	4690      	mov	r8, r2
 8016c32:	f7ff fc0f 	bl	8016454 <_Balloc>
 8016c36:	4604      	mov	r4, r0
 8016c38:	b930      	cbnz	r0, 8016c48 <__d2b+0x24>
 8016c3a:	4602      	mov	r2, r0
 8016c3c:	4b25      	ldr	r3, [pc, #148]	; (8016cd4 <__d2b+0xb0>)
 8016c3e:	4826      	ldr	r0, [pc, #152]	; (8016cd8 <__d2b+0xb4>)
 8016c40:	f240 310a 	movw	r1, #778	; 0x30a
 8016c44:	f000 fc5a 	bl	80174fc <__assert_func>
 8016c48:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8016c4c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8016c50:	bb35      	cbnz	r5, 8016ca0 <__d2b+0x7c>
 8016c52:	2e00      	cmp	r6, #0
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	d028      	beq.n	8016caa <__d2b+0x86>
 8016c58:	4668      	mov	r0, sp
 8016c5a:	9600      	str	r6, [sp, #0]
 8016c5c:	f7ff fd10 	bl	8016680 <__lo0bits>
 8016c60:	9900      	ldr	r1, [sp, #0]
 8016c62:	b300      	cbz	r0, 8016ca6 <__d2b+0x82>
 8016c64:	9a01      	ldr	r2, [sp, #4]
 8016c66:	f1c0 0320 	rsb	r3, r0, #32
 8016c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8016c6e:	430b      	orrs	r3, r1
 8016c70:	40c2      	lsrs	r2, r0
 8016c72:	6163      	str	r3, [r4, #20]
 8016c74:	9201      	str	r2, [sp, #4]
 8016c76:	9b01      	ldr	r3, [sp, #4]
 8016c78:	61a3      	str	r3, [r4, #24]
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	bf14      	ite	ne
 8016c7e:	2202      	movne	r2, #2
 8016c80:	2201      	moveq	r2, #1
 8016c82:	6122      	str	r2, [r4, #16]
 8016c84:	b1d5      	cbz	r5, 8016cbc <__d2b+0x98>
 8016c86:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8016c8a:	4405      	add	r5, r0
 8016c8c:	f8c9 5000 	str.w	r5, [r9]
 8016c90:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8016c94:	f8c8 0000 	str.w	r0, [r8]
 8016c98:	4620      	mov	r0, r4
 8016c9a:	b003      	add	sp, #12
 8016c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8016ca4:	e7d5      	b.n	8016c52 <__d2b+0x2e>
 8016ca6:	6161      	str	r1, [r4, #20]
 8016ca8:	e7e5      	b.n	8016c76 <__d2b+0x52>
 8016caa:	a801      	add	r0, sp, #4
 8016cac:	f7ff fce8 	bl	8016680 <__lo0bits>
 8016cb0:	9b01      	ldr	r3, [sp, #4]
 8016cb2:	6163      	str	r3, [r4, #20]
 8016cb4:	2201      	movs	r2, #1
 8016cb6:	6122      	str	r2, [r4, #16]
 8016cb8:	3020      	adds	r0, #32
 8016cba:	e7e3      	b.n	8016c84 <__d2b+0x60>
 8016cbc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8016cc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8016cc4:	f8c9 0000 	str.w	r0, [r9]
 8016cc8:	6918      	ldr	r0, [r3, #16]
 8016cca:	f7ff fcb9 	bl	8016640 <__hi0bits>
 8016cce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8016cd2:	e7df      	b.n	8016c94 <__d2b+0x70>
 8016cd4:	08022611 	.word	0x08022611
 8016cd8:	080226b7 	.word	0x080226b7

08016cdc <__ratio>:
 8016cdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ce0:	4688      	mov	r8, r1
 8016ce2:	4669      	mov	r1, sp
 8016ce4:	4681      	mov	r9, r0
 8016ce6:	f7ff ff4d 	bl	8016b84 <__b2d>
 8016cea:	a901      	add	r1, sp, #4
 8016cec:	4640      	mov	r0, r8
 8016cee:	ec55 4b10 	vmov	r4, r5, d0
 8016cf2:	f7ff ff47 	bl	8016b84 <__b2d>
 8016cf6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8016cfa:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8016cfe:	eba3 0c02 	sub.w	ip, r3, r2
 8016d02:	e9dd 3200 	ldrd	r3, r2, [sp]
 8016d06:	1a9b      	subs	r3, r3, r2
 8016d08:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8016d0c:	ec51 0b10 	vmov	r0, r1, d0
 8016d10:	2b00      	cmp	r3, #0
 8016d12:	bfd6      	itet	le
 8016d14:	460a      	movle	r2, r1
 8016d16:	462a      	movgt	r2, r5
 8016d18:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8016d1c:	468b      	mov	fp, r1
 8016d1e:	462f      	mov	r7, r5
 8016d20:	bfd4      	ite	le
 8016d22:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8016d26:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8016d2a:	4620      	mov	r0, r4
 8016d2c:	ee10 2a10 	vmov	r2, s0
 8016d30:	465b      	mov	r3, fp
 8016d32:	4639      	mov	r1, r7
 8016d34:	f7e9 fda2 	bl	800087c <__aeabi_ddiv>
 8016d38:	ec41 0b10 	vmov	d0, r0, r1
 8016d3c:	b003      	add	sp, #12
 8016d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d42 <__copybits>:
 8016d42:	3901      	subs	r1, #1
 8016d44:	b570      	push	{r4, r5, r6, lr}
 8016d46:	1149      	asrs	r1, r1, #5
 8016d48:	6914      	ldr	r4, [r2, #16]
 8016d4a:	3101      	adds	r1, #1
 8016d4c:	f102 0314 	add.w	r3, r2, #20
 8016d50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8016d54:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8016d58:	1f05      	subs	r5, r0, #4
 8016d5a:	42a3      	cmp	r3, r4
 8016d5c:	d30c      	bcc.n	8016d78 <__copybits+0x36>
 8016d5e:	1aa3      	subs	r3, r4, r2
 8016d60:	3b11      	subs	r3, #17
 8016d62:	f023 0303 	bic.w	r3, r3, #3
 8016d66:	3211      	adds	r2, #17
 8016d68:	42a2      	cmp	r2, r4
 8016d6a:	bf88      	it	hi
 8016d6c:	2300      	movhi	r3, #0
 8016d6e:	4418      	add	r0, r3
 8016d70:	2300      	movs	r3, #0
 8016d72:	4288      	cmp	r0, r1
 8016d74:	d305      	bcc.n	8016d82 <__copybits+0x40>
 8016d76:	bd70      	pop	{r4, r5, r6, pc}
 8016d78:	f853 6b04 	ldr.w	r6, [r3], #4
 8016d7c:	f845 6f04 	str.w	r6, [r5, #4]!
 8016d80:	e7eb      	b.n	8016d5a <__copybits+0x18>
 8016d82:	f840 3b04 	str.w	r3, [r0], #4
 8016d86:	e7f4      	b.n	8016d72 <__copybits+0x30>

08016d88 <__any_on>:
 8016d88:	f100 0214 	add.w	r2, r0, #20
 8016d8c:	6900      	ldr	r0, [r0, #16]
 8016d8e:	114b      	asrs	r3, r1, #5
 8016d90:	4298      	cmp	r0, r3
 8016d92:	b510      	push	{r4, lr}
 8016d94:	db11      	blt.n	8016dba <__any_on+0x32>
 8016d96:	dd0a      	ble.n	8016dae <__any_on+0x26>
 8016d98:	f011 011f 	ands.w	r1, r1, #31
 8016d9c:	d007      	beq.n	8016dae <__any_on+0x26>
 8016d9e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8016da2:	fa24 f001 	lsr.w	r0, r4, r1
 8016da6:	fa00 f101 	lsl.w	r1, r0, r1
 8016daa:	428c      	cmp	r4, r1
 8016dac:	d10b      	bne.n	8016dc6 <__any_on+0x3e>
 8016dae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016db2:	4293      	cmp	r3, r2
 8016db4:	d803      	bhi.n	8016dbe <__any_on+0x36>
 8016db6:	2000      	movs	r0, #0
 8016db8:	bd10      	pop	{r4, pc}
 8016dba:	4603      	mov	r3, r0
 8016dbc:	e7f7      	b.n	8016dae <__any_on+0x26>
 8016dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8016dc2:	2900      	cmp	r1, #0
 8016dc4:	d0f5      	beq.n	8016db2 <__any_on+0x2a>
 8016dc6:	2001      	movs	r0, #1
 8016dc8:	e7f6      	b.n	8016db8 <__any_on+0x30>

08016dca <_calloc_r>:
 8016dca:	b513      	push	{r0, r1, r4, lr}
 8016dcc:	434a      	muls	r2, r1
 8016dce:	4611      	mov	r1, r2
 8016dd0:	9201      	str	r2, [sp, #4]
 8016dd2:	f000 f809 	bl	8016de8 <_malloc_r>
 8016dd6:	4604      	mov	r4, r0
 8016dd8:	b118      	cbz	r0, 8016de2 <_calloc_r+0x18>
 8016dda:	9a01      	ldr	r2, [sp, #4]
 8016ddc:	2100      	movs	r1, #0
 8016dde:	f7fe f839 	bl	8014e54 <memset>
 8016de2:	4620      	mov	r0, r4
 8016de4:	b002      	add	sp, #8
 8016de6:	bd10      	pop	{r4, pc}

08016de8 <_malloc_r>:
 8016de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dea:	1ccd      	adds	r5, r1, #3
 8016dec:	f025 0503 	bic.w	r5, r5, #3
 8016df0:	3508      	adds	r5, #8
 8016df2:	2d0c      	cmp	r5, #12
 8016df4:	bf38      	it	cc
 8016df6:	250c      	movcc	r5, #12
 8016df8:	2d00      	cmp	r5, #0
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	db01      	blt.n	8016e02 <_malloc_r+0x1a>
 8016dfe:	42a9      	cmp	r1, r5
 8016e00:	d903      	bls.n	8016e0a <_malloc_r+0x22>
 8016e02:	230c      	movs	r3, #12
 8016e04:	6033      	str	r3, [r6, #0]
 8016e06:	2000      	movs	r0, #0
 8016e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016e0a:	f000 fbc9 	bl	80175a0 <__malloc_lock>
 8016e0e:	4921      	ldr	r1, [pc, #132]	; (8016e94 <_malloc_r+0xac>)
 8016e10:	680a      	ldr	r2, [r1, #0]
 8016e12:	4614      	mov	r4, r2
 8016e14:	b99c      	cbnz	r4, 8016e3e <_malloc_r+0x56>
 8016e16:	4f20      	ldr	r7, [pc, #128]	; (8016e98 <_malloc_r+0xb0>)
 8016e18:	683b      	ldr	r3, [r7, #0]
 8016e1a:	b923      	cbnz	r3, 8016e26 <_malloc_r+0x3e>
 8016e1c:	4621      	mov	r1, r4
 8016e1e:	4630      	mov	r0, r6
 8016e20:	f000 fb36 	bl	8017490 <_sbrk_r>
 8016e24:	6038      	str	r0, [r7, #0]
 8016e26:	4629      	mov	r1, r5
 8016e28:	4630      	mov	r0, r6
 8016e2a:	f000 fb31 	bl	8017490 <_sbrk_r>
 8016e2e:	1c43      	adds	r3, r0, #1
 8016e30:	d123      	bne.n	8016e7a <_malloc_r+0x92>
 8016e32:	230c      	movs	r3, #12
 8016e34:	6033      	str	r3, [r6, #0]
 8016e36:	4630      	mov	r0, r6
 8016e38:	f000 fbb8 	bl	80175ac <__malloc_unlock>
 8016e3c:	e7e3      	b.n	8016e06 <_malloc_r+0x1e>
 8016e3e:	6823      	ldr	r3, [r4, #0]
 8016e40:	1b5b      	subs	r3, r3, r5
 8016e42:	d417      	bmi.n	8016e74 <_malloc_r+0x8c>
 8016e44:	2b0b      	cmp	r3, #11
 8016e46:	d903      	bls.n	8016e50 <_malloc_r+0x68>
 8016e48:	6023      	str	r3, [r4, #0]
 8016e4a:	441c      	add	r4, r3
 8016e4c:	6025      	str	r5, [r4, #0]
 8016e4e:	e004      	b.n	8016e5a <_malloc_r+0x72>
 8016e50:	6863      	ldr	r3, [r4, #4]
 8016e52:	42a2      	cmp	r2, r4
 8016e54:	bf0c      	ite	eq
 8016e56:	600b      	streq	r3, [r1, #0]
 8016e58:	6053      	strne	r3, [r2, #4]
 8016e5a:	4630      	mov	r0, r6
 8016e5c:	f000 fba6 	bl	80175ac <__malloc_unlock>
 8016e60:	f104 000b 	add.w	r0, r4, #11
 8016e64:	1d23      	adds	r3, r4, #4
 8016e66:	f020 0007 	bic.w	r0, r0, #7
 8016e6a:	1ac2      	subs	r2, r0, r3
 8016e6c:	d0cc      	beq.n	8016e08 <_malloc_r+0x20>
 8016e6e:	1a1b      	subs	r3, r3, r0
 8016e70:	50a3      	str	r3, [r4, r2]
 8016e72:	e7c9      	b.n	8016e08 <_malloc_r+0x20>
 8016e74:	4622      	mov	r2, r4
 8016e76:	6864      	ldr	r4, [r4, #4]
 8016e78:	e7cc      	b.n	8016e14 <_malloc_r+0x2c>
 8016e7a:	1cc4      	adds	r4, r0, #3
 8016e7c:	f024 0403 	bic.w	r4, r4, #3
 8016e80:	42a0      	cmp	r0, r4
 8016e82:	d0e3      	beq.n	8016e4c <_malloc_r+0x64>
 8016e84:	1a21      	subs	r1, r4, r0
 8016e86:	4630      	mov	r0, r6
 8016e88:	f000 fb02 	bl	8017490 <_sbrk_r>
 8016e8c:	3001      	adds	r0, #1
 8016e8e:	d1dd      	bne.n	8016e4c <_malloc_r+0x64>
 8016e90:	e7cf      	b.n	8016e32 <_malloc_r+0x4a>
 8016e92:	bf00      	nop
 8016e94:	20006c94 	.word	0x20006c94
 8016e98:	20006c98 	.word	0x20006c98

08016e9c <__ssputs_r>:
 8016e9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016ea0:	688e      	ldr	r6, [r1, #8]
 8016ea2:	429e      	cmp	r6, r3
 8016ea4:	4682      	mov	sl, r0
 8016ea6:	460c      	mov	r4, r1
 8016ea8:	4690      	mov	r8, r2
 8016eaa:	461f      	mov	r7, r3
 8016eac:	d838      	bhi.n	8016f20 <__ssputs_r+0x84>
 8016eae:	898a      	ldrh	r2, [r1, #12]
 8016eb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8016eb4:	d032      	beq.n	8016f1c <__ssputs_r+0x80>
 8016eb6:	6825      	ldr	r5, [r4, #0]
 8016eb8:	6909      	ldr	r1, [r1, #16]
 8016eba:	eba5 0901 	sub.w	r9, r5, r1
 8016ebe:	6965      	ldr	r5, [r4, #20]
 8016ec0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016ec4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8016ec8:	3301      	adds	r3, #1
 8016eca:	444b      	add	r3, r9
 8016ecc:	106d      	asrs	r5, r5, #1
 8016ece:	429d      	cmp	r5, r3
 8016ed0:	bf38      	it	cc
 8016ed2:	461d      	movcc	r5, r3
 8016ed4:	0553      	lsls	r3, r2, #21
 8016ed6:	d531      	bpl.n	8016f3c <__ssputs_r+0xa0>
 8016ed8:	4629      	mov	r1, r5
 8016eda:	f7ff ff85 	bl	8016de8 <_malloc_r>
 8016ede:	4606      	mov	r6, r0
 8016ee0:	b950      	cbnz	r0, 8016ef8 <__ssputs_r+0x5c>
 8016ee2:	230c      	movs	r3, #12
 8016ee4:	f8ca 3000 	str.w	r3, [sl]
 8016ee8:	89a3      	ldrh	r3, [r4, #12]
 8016eea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016eee:	81a3      	strh	r3, [r4, #12]
 8016ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8016ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016ef8:	6921      	ldr	r1, [r4, #16]
 8016efa:	464a      	mov	r2, r9
 8016efc:	f7fd ff9c 	bl	8014e38 <memcpy>
 8016f00:	89a3      	ldrh	r3, [r4, #12]
 8016f02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8016f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016f0a:	81a3      	strh	r3, [r4, #12]
 8016f0c:	6126      	str	r6, [r4, #16]
 8016f0e:	6165      	str	r5, [r4, #20]
 8016f10:	444e      	add	r6, r9
 8016f12:	eba5 0509 	sub.w	r5, r5, r9
 8016f16:	6026      	str	r6, [r4, #0]
 8016f18:	60a5      	str	r5, [r4, #8]
 8016f1a:	463e      	mov	r6, r7
 8016f1c:	42be      	cmp	r6, r7
 8016f1e:	d900      	bls.n	8016f22 <__ssputs_r+0x86>
 8016f20:	463e      	mov	r6, r7
 8016f22:	4632      	mov	r2, r6
 8016f24:	6820      	ldr	r0, [r4, #0]
 8016f26:	4641      	mov	r1, r8
 8016f28:	f000 fb20 	bl	801756c <memmove>
 8016f2c:	68a3      	ldr	r3, [r4, #8]
 8016f2e:	6822      	ldr	r2, [r4, #0]
 8016f30:	1b9b      	subs	r3, r3, r6
 8016f32:	4432      	add	r2, r6
 8016f34:	60a3      	str	r3, [r4, #8]
 8016f36:	6022      	str	r2, [r4, #0]
 8016f38:	2000      	movs	r0, #0
 8016f3a:	e7db      	b.n	8016ef4 <__ssputs_r+0x58>
 8016f3c:	462a      	mov	r2, r5
 8016f3e:	f000 fb8b 	bl	8017658 <_realloc_r>
 8016f42:	4606      	mov	r6, r0
 8016f44:	2800      	cmp	r0, #0
 8016f46:	d1e1      	bne.n	8016f0c <__ssputs_r+0x70>
 8016f48:	6921      	ldr	r1, [r4, #16]
 8016f4a:	4650      	mov	r0, sl
 8016f4c:	f000 fb34 	bl	80175b8 <_free_r>
 8016f50:	e7c7      	b.n	8016ee2 <__ssputs_r+0x46>
	...

08016f54 <_svfiprintf_r>:
 8016f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f58:	4698      	mov	r8, r3
 8016f5a:	898b      	ldrh	r3, [r1, #12]
 8016f5c:	061b      	lsls	r3, r3, #24
 8016f5e:	b09d      	sub	sp, #116	; 0x74
 8016f60:	4607      	mov	r7, r0
 8016f62:	460d      	mov	r5, r1
 8016f64:	4614      	mov	r4, r2
 8016f66:	d50e      	bpl.n	8016f86 <_svfiprintf_r+0x32>
 8016f68:	690b      	ldr	r3, [r1, #16]
 8016f6a:	b963      	cbnz	r3, 8016f86 <_svfiprintf_r+0x32>
 8016f6c:	2140      	movs	r1, #64	; 0x40
 8016f6e:	f7ff ff3b 	bl	8016de8 <_malloc_r>
 8016f72:	6028      	str	r0, [r5, #0]
 8016f74:	6128      	str	r0, [r5, #16]
 8016f76:	b920      	cbnz	r0, 8016f82 <_svfiprintf_r+0x2e>
 8016f78:	230c      	movs	r3, #12
 8016f7a:	603b      	str	r3, [r7, #0]
 8016f7c:	f04f 30ff 	mov.w	r0, #4294967295
 8016f80:	e0d1      	b.n	8017126 <_svfiprintf_r+0x1d2>
 8016f82:	2340      	movs	r3, #64	; 0x40
 8016f84:	616b      	str	r3, [r5, #20]
 8016f86:	2300      	movs	r3, #0
 8016f88:	9309      	str	r3, [sp, #36]	; 0x24
 8016f8a:	2320      	movs	r3, #32
 8016f8c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016f90:	f8cd 800c 	str.w	r8, [sp, #12]
 8016f94:	2330      	movs	r3, #48	; 0x30
 8016f96:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017140 <_svfiprintf_r+0x1ec>
 8016f9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016f9e:	f04f 0901 	mov.w	r9, #1
 8016fa2:	4623      	mov	r3, r4
 8016fa4:	469a      	mov	sl, r3
 8016fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016faa:	b10a      	cbz	r2, 8016fb0 <_svfiprintf_r+0x5c>
 8016fac:	2a25      	cmp	r2, #37	; 0x25
 8016fae:	d1f9      	bne.n	8016fa4 <_svfiprintf_r+0x50>
 8016fb0:	ebba 0b04 	subs.w	fp, sl, r4
 8016fb4:	d00b      	beq.n	8016fce <_svfiprintf_r+0x7a>
 8016fb6:	465b      	mov	r3, fp
 8016fb8:	4622      	mov	r2, r4
 8016fba:	4629      	mov	r1, r5
 8016fbc:	4638      	mov	r0, r7
 8016fbe:	f7ff ff6d 	bl	8016e9c <__ssputs_r>
 8016fc2:	3001      	adds	r0, #1
 8016fc4:	f000 80aa 	beq.w	801711c <_svfiprintf_r+0x1c8>
 8016fc8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016fca:	445a      	add	r2, fp
 8016fcc:	9209      	str	r2, [sp, #36]	; 0x24
 8016fce:	f89a 3000 	ldrb.w	r3, [sl]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	f000 80a2 	beq.w	801711c <_svfiprintf_r+0x1c8>
 8016fd8:	2300      	movs	r3, #0
 8016fda:	f04f 32ff 	mov.w	r2, #4294967295
 8016fde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016fe2:	f10a 0a01 	add.w	sl, sl, #1
 8016fe6:	9304      	str	r3, [sp, #16]
 8016fe8:	9307      	str	r3, [sp, #28]
 8016fea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016fee:	931a      	str	r3, [sp, #104]	; 0x68
 8016ff0:	4654      	mov	r4, sl
 8016ff2:	2205      	movs	r2, #5
 8016ff4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016ff8:	4851      	ldr	r0, [pc, #324]	; (8017140 <_svfiprintf_r+0x1ec>)
 8016ffa:	f7e9 f909 	bl	8000210 <memchr>
 8016ffe:	9a04      	ldr	r2, [sp, #16]
 8017000:	b9d8      	cbnz	r0, 801703a <_svfiprintf_r+0xe6>
 8017002:	06d0      	lsls	r0, r2, #27
 8017004:	bf44      	itt	mi
 8017006:	2320      	movmi	r3, #32
 8017008:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801700c:	0711      	lsls	r1, r2, #28
 801700e:	bf44      	itt	mi
 8017010:	232b      	movmi	r3, #43	; 0x2b
 8017012:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017016:	f89a 3000 	ldrb.w	r3, [sl]
 801701a:	2b2a      	cmp	r3, #42	; 0x2a
 801701c:	d015      	beq.n	801704a <_svfiprintf_r+0xf6>
 801701e:	9a07      	ldr	r2, [sp, #28]
 8017020:	4654      	mov	r4, sl
 8017022:	2000      	movs	r0, #0
 8017024:	f04f 0c0a 	mov.w	ip, #10
 8017028:	4621      	mov	r1, r4
 801702a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801702e:	3b30      	subs	r3, #48	; 0x30
 8017030:	2b09      	cmp	r3, #9
 8017032:	d94e      	bls.n	80170d2 <_svfiprintf_r+0x17e>
 8017034:	b1b0      	cbz	r0, 8017064 <_svfiprintf_r+0x110>
 8017036:	9207      	str	r2, [sp, #28]
 8017038:	e014      	b.n	8017064 <_svfiprintf_r+0x110>
 801703a:	eba0 0308 	sub.w	r3, r0, r8
 801703e:	fa09 f303 	lsl.w	r3, r9, r3
 8017042:	4313      	orrs	r3, r2
 8017044:	9304      	str	r3, [sp, #16]
 8017046:	46a2      	mov	sl, r4
 8017048:	e7d2      	b.n	8016ff0 <_svfiprintf_r+0x9c>
 801704a:	9b03      	ldr	r3, [sp, #12]
 801704c:	1d19      	adds	r1, r3, #4
 801704e:	681b      	ldr	r3, [r3, #0]
 8017050:	9103      	str	r1, [sp, #12]
 8017052:	2b00      	cmp	r3, #0
 8017054:	bfbb      	ittet	lt
 8017056:	425b      	neglt	r3, r3
 8017058:	f042 0202 	orrlt.w	r2, r2, #2
 801705c:	9307      	strge	r3, [sp, #28]
 801705e:	9307      	strlt	r3, [sp, #28]
 8017060:	bfb8      	it	lt
 8017062:	9204      	strlt	r2, [sp, #16]
 8017064:	7823      	ldrb	r3, [r4, #0]
 8017066:	2b2e      	cmp	r3, #46	; 0x2e
 8017068:	d10c      	bne.n	8017084 <_svfiprintf_r+0x130>
 801706a:	7863      	ldrb	r3, [r4, #1]
 801706c:	2b2a      	cmp	r3, #42	; 0x2a
 801706e:	d135      	bne.n	80170dc <_svfiprintf_r+0x188>
 8017070:	9b03      	ldr	r3, [sp, #12]
 8017072:	1d1a      	adds	r2, r3, #4
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	9203      	str	r2, [sp, #12]
 8017078:	2b00      	cmp	r3, #0
 801707a:	bfb8      	it	lt
 801707c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017080:	3402      	adds	r4, #2
 8017082:	9305      	str	r3, [sp, #20]
 8017084:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017150 <_svfiprintf_r+0x1fc>
 8017088:	7821      	ldrb	r1, [r4, #0]
 801708a:	2203      	movs	r2, #3
 801708c:	4650      	mov	r0, sl
 801708e:	f7e9 f8bf 	bl	8000210 <memchr>
 8017092:	b140      	cbz	r0, 80170a6 <_svfiprintf_r+0x152>
 8017094:	2340      	movs	r3, #64	; 0x40
 8017096:	eba0 000a 	sub.w	r0, r0, sl
 801709a:	fa03 f000 	lsl.w	r0, r3, r0
 801709e:	9b04      	ldr	r3, [sp, #16]
 80170a0:	4303      	orrs	r3, r0
 80170a2:	3401      	adds	r4, #1
 80170a4:	9304      	str	r3, [sp, #16]
 80170a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80170aa:	4826      	ldr	r0, [pc, #152]	; (8017144 <_svfiprintf_r+0x1f0>)
 80170ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80170b0:	2206      	movs	r2, #6
 80170b2:	f7e9 f8ad 	bl	8000210 <memchr>
 80170b6:	2800      	cmp	r0, #0
 80170b8:	d038      	beq.n	801712c <_svfiprintf_r+0x1d8>
 80170ba:	4b23      	ldr	r3, [pc, #140]	; (8017148 <_svfiprintf_r+0x1f4>)
 80170bc:	bb1b      	cbnz	r3, 8017106 <_svfiprintf_r+0x1b2>
 80170be:	9b03      	ldr	r3, [sp, #12]
 80170c0:	3307      	adds	r3, #7
 80170c2:	f023 0307 	bic.w	r3, r3, #7
 80170c6:	3308      	adds	r3, #8
 80170c8:	9303      	str	r3, [sp, #12]
 80170ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80170cc:	4433      	add	r3, r6
 80170ce:	9309      	str	r3, [sp, #36]	; 0x24
 80170d0:	e767      	b.n	8016fa2 <_svfiprintf_r+0x4e>
 80170d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80170d6:	460c      	mov	r4, r1
 80170d8:	2001      	movs	r0, #1
 80170da:	e7a5      	b.n	8017028 <_svfiprintf_r+0xd4>
 80170dc:	2300      	movs	r3, #0
 80170de:	3401      	adds	r4, #1
 80170e0:	9305      	str	r3, [sp, #20]
 80170e2:	4619      	mov	r1, r3
 80170e4:	f04f 0c0a 	mov.w	ip, #10
 80170e8:	4620      	mov	r0, r4
 80170ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80170ee:	3a30      	subs	r2, #48	; 0x30
 80170f0:	2a09      	cmp	r2, #9
 80170f2:	d903      	bls.n	80170fc <_svfiprintf_r+0x1a8>
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	d0c5      	beq.n	8017084 <_svfiprintf_r+0x130>
 80170f8:	9105      	str	r1, [sp, #20]
 80170fa:	e7c3      	b.n	8017084 <_svfiprintf_r+0x130>
 80170fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8017100:	4604      	mov	r4, r0
 8017102:	2301      	movs	r3, #1
 8017104:	e7f0      	b.n	80170e8 <_svfiprintf_r+0x194>
 8017106:	ab03      	add	r3, sp, #12
 8017108:	9300      	str	r3, [sp, #0]
 801710a:	462a      	mov	r2, r5
 801710c:	4b0f      	ldr	r3, [pc, #60]	; (801714c <_svfiprintf_r+0x1f8>)
 801710e:	a904      	add	r1, sp, #16
 8017110:	4638      	mov	r0, r7
 8017112:	f3af 8000 	nop.w
 8017116:	1c42      	adds	r2, r0, #1
 8017118:	4606      	mov	r6, r0
 801711a:	d1d6      	bne.n	80170ca <_svfiprintf_r+0x176>
 801711c:	89ab      	ldrh	r3, [r5, #12]
 801711e:	065b      	lsls	r3, r3, #25
 8017120:	f53f af2c 	bmi.w	8016f7c <_svfiprintf_r+0x28>
 8017124:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017126:	b01d      	add	sp, #116	; 0x74
 8017128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801712c:	ab03      	add	r3, sp, #12
 801712e:	9300      	str	r3, [sp, #0]
 8017130:	462a      	mov	r2, r5
 8017132:	4b06      	ldr	r3, [pc, #24]	; (801714c <_svfiprintf_r+0x1f8>)
 8017134:	a904      	add	r1, sp, #16
 8017136:	4638      	mov	r0, r7
 8017138:	f000 f87a 	bl	8017230 <_printf_i>
 801713c:	e7eb      	b.n	8017116 <_svfiprintf_r+0x1c2>
 801713e:	bf00      	nop
 8017140:	08022814 	.word	0x08022814
 8017144:	0802281e 	.word	0x0802281e
 8017148:	00000000 	.word	0x00000000
 801714c:	08016e9d 	.word	0x08016e9d
 8017150:	0802281a 	.word	0x0802281a

08017154 <_printf_common>:
 8017154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017158:	4616      	mov	r6, r2
 801715a:	4699      	mov	r9, r3
 801715c:	688a      	ldr	r2, [r1, #8]
 801715e:	690b      	ldr	r3, [r1, #16]
 8017160:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017164:	4293      	cmp	r3, r2
 8017166:	bfb8      	it	lt
 8017168:	4613      	movlt	r3, r2
 801716a:	6033      	str	r3, [r6, #0]
 801716c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017170:	4607      	mov	r7, r0
 8017172:	460c      	mov	r4, r1
 8017174:	b10a      	cbz	r2, 801717a <_printf_common+0x26>
 8017176:	3301      	adds	r3, #1
 8017178:	6033      	str	r3, [r6, #0]
 801717a:	6823      	ldr	r3, [r4, #0]
 801717c:	0699      	lsls	r1, r3, #26
 801717e:	bf42      	ittt	mi
 8017180:	6833      	ldrmi	r3, [r6, #0]
 8017182:	3302      	addmi	r3, #2
 8017184:	6033      	strmi	r3, [r6, #0]
 8017186:	6825      	ldr	r5, [r4, #0]
 8017188:	f015 0506 	ands.w	r5, r5, #6
 801718c:	d106      	bne.n	801719c <_printf_common+0x48>
 801718e:	f104 0a19 	add.w	sl, r4, #25
 8017192:	68e3      	ldr	r3, [r4, #12]
 8017194:	6832      	ldr	r2, [r6, #0]
 8017196:	1a9b      	subs	r3, r3, r2
 8017198:	42ab      	cmp	r3, r5
 801719a:	dc26      	bgt.n	80171ea <_printf_common+0x96>
 801719c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80171a0:	1e13      	subs	r3, r2, #0
 80171a2:	6822      	ldr	r2, [r4, #0]
 80171a4:	bf18      	it	ne
 80171a6:	2301      	movne	r3, #1
 80171a8:	0692      	lsls	r2, r2, #26
 80171aa:	d42b      	bmi.n	8017204 <_printf_common+0xb0>
 80171ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80171b0:	4649      	mov	r1, r9
 80171b2:	4638      	mov	r0, r7
 80171b4:	47c0      	blx	r8
 80171b6:	3001      	adds	r0, #1
 80171b8:	d01e      	beq.n	80171f8 <_printf_common+0xa4>
 80171ba:	6823      	ldr	r3, [r4, #0]
 80171bc:	68e5      	ldr	r5, [r4, #12]
 80171be:	6832      	ldr	r2, [r6, #0]
 80171c0:	f003 0306 	and.w	r3, r3, #6
 80171c4:	2b04      	cmp	r3, #4
 80171c6:	bf08      	it	eq
 80171c8:	1aad      	subeq	r5, r5, r2
 80171ca:	68a3      	ldr	r3, [r4, #8]
 80171cc:	6922      	ldr	r2, [r4, #16]
 80171ce:	bf0c      	ite	eq
 80171d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80171d4:	2500      	movne	r5, #0
 80171d6:	4293      	cmp	r3, r2
 80171d8:	bfc4      	itt	gt
 80171da:	1a9b      	subgt	r3, r3, r2
 80171dc:	18ed      	addgt	r5, r5, r3
 80171de:	2600      	movs	r6, #0
 80171e0:	341a      	adds	r4, #26
 80171e2:	42b5      	cmp	r5, r6
 80171e4:	d11a      	bne.n	801721c <_printf_common+0xc8>
 80171e6:	2000      	movs	r0, #0
 80171e8:	e008      	b.n	80171fc <_printf_common+0xa8>
 80171ea:	2301      	movs	r3, #1
 80171ec:	4652      	mov	r2, sl
 80171ee:	4649      	mov	r1, r9
 80171f0:	4638      	mov	r0, r7
 80171f2:	47c0      	blx	r8
 80171f4:	3001      	adds	r0, #1
 80171f6:	d103      	bne.n	8017200 <_printf_common+0xac>
 80171f8:	f04f 30ff 	mov.w	r0, #4294967295
 80171fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017200:	3501      	adds	r5, #1
 8017202:	e7c6      	b.n	8017192 <_printf_common+0x3e>
 8017204:	18e1      	adds	r1, r4, r3
 8017206:	1c5a      	adds	r2, r3, #1
 8017208:	2030      	movs	r0, #48	; 0x30
 801720a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801720e:	4422      	add	r2, r4
 8017210:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017214:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017218:	3302      	adds	r3, #2
 801721a:	e7c7      	b.n	80171ac <_printf_common+0x58>
 801721c:	2301      	movs	r3, #1
 801721e:	4622      	mov	r2, r4
 8017220:	4649      	mov	r1, r9
 8017222:	4638      	mov	r0, r7
 8017224:	47c0      	blx	r8
 8017226:	3001      	adds	r0, #1
 8017228:	d0e6      	beq.n	80171f8 <_printf_common+0xa4>
 801722a:	3601      	adds	r6, #1
 801722c:	e7d9      	b.n	80171e2 <_printf_common+0x8e>
	...

08017230 <_printf_i>:
 8017230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017234:	460c      	mov	r4, r1
 8017236:	4691      	mov	r9, r2
 8017238:	7e27      	ldrb	r7, [r4, #24]
 801723a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801723c:	2f78      	cmp	r7, #120	; 0x78
 801723e:	4680      	mov	r8, r0
 8017240:	469a      	mov	sl, r3
 8017242:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017246:	d807      	bhi.n	8017258 <_printf_i+0x28>
 8017248:	2f62      	cmp	r7, #98	; 0x62
 801724a:	d80a      	bhi.n	8017262 <_printf_i+0x32>
 801724c:	2f00      	cmp	r7, #0
 801724e:	f000 80d8 	beq.w	8017402 <_printf_i+0x1d2>
 8017252:	2f58      	cmp	r7, #88	; 0x58
 8017254:	f000 80a3 	beq.w	801739e <_printf_i+0x16e>
 8017258:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801725c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017260:	e03a      	b.n	80172d8 <_printf_i+0xa8>
 8017262:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017266:	2b15      	cmp	r3, #21
 8017268:	d8f6      	bhi.n	8017258 <_printf_i+0x28>
 801726a:	a001      	add	r0, pc, #4	; (adr r0, 8017270 <_printf_i+0x40>)
 801726c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017270:	080172c9 	.word	0x080172c9
 8017274:	080172dd 	.word	0x080172dd
 8017278:	08017259 	.word	0x08017259
 801727c:	08017259 	.word	0x08017259
 8017280:	08017259 	.word	0x08017259
 8017284:	08017259 	.word	0x08017259
 8017288:	080172dd 	.word	0x080172dd
 801728c:	08017259 	.word	0x08017259
 8017290:	08017259 	.word	0x08017259
 8017294:	08017259 	.word	0x08017259
 8017298:	08017259 	.word	0x08017259
 801729c:	080173e9 	.word	0x080173e9
 80172a0:	0801730d 	.word	0x0801730d
 80172a4:	080173cb 	.word	0x080173cb
 80172a8:	08017259 	.word	0x08017259
 80172ac:	08017259 	.word	0x08017259
 80172b0:	0801740b 	.word	0x0801740b
 80172b4:	08017259 	.word	0x08017259
 80172b8:	0801730d 	.word	0x0801730d
 80172bc:	08017259 	.word	0x08017259
 80172c0:	08017259 	.word	0x08017259
 80172c4:	080173d3 	.word	0x080173d3
 80172c8:	680b      	ldr	r3, [r1, #0]
 80172ca:	1d1a      	adds	r2, r3, #4
 80172cc:	681b      	ldr	r3, [r3, #0]
 80172ce:	600a      	str	r2, [r1, #0]
 80172d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80172d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80172d8:	2301      	movs	r3, #1
 80172da:	e0a3      	b.n	8017424 <_printf_i+0x1f4>
 80172dc:	6825      	ldr	r5, [r4, #0]
 80172de:	6808      	ldr	r0, [r1, #0]
 80172e0:	062e      	lsls	r6, r5, #24
 80172e2:	f100 0304 	add.w	r3, r0, #4
 80172e6:	d50a      	bpl.n	80172fe <_printf_i+0xce>
 80172e8:	6805      	ldr	r5, [r0, #0]
 80172ea:	600b      	str	r3, [r1, #0]
 80172ec:	2d00      	cmp	r5, #0
 80172ee:	da03      	bge.n	80172f8 <_printf_i+0xc8>
 80172f0:	232d      	movs	r3, #45	; 0x2d
 80172f2:	426d      	negs	r5, r5
 80172f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80172f8:	485e      	ldr	r0, [pc, #376]	; (8017474 <_printf_i+0x244>)
 80172fa:	230a      	movs	r3, #10
 80172fc:	e019      	b.n	8017332 <_printf_i+0x102>
 80172fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017302:	6805      	ldr	r5, [r0, #0]
 8017304:	600b      	str	r3, [r1, #0]
 8017306:	bf18      	it	ne
 8017308:	b22d      	sxthne	r5, r5
 801730a:	e7ef      	b.n	80172ec <_printf_i+0xbc>
 801730c:	680b      	ldr	r3, [r1, #0]
 801730e:	6825      	ldr	r5, [r4, #0]
 8017310:	1d18      	adds	r0, r3, #4
 8017312:	6008      	str	r0, [r1, #0]
 8017314:	0628      	lsls	r0, r5, #24
 8017316:	d501      	bpl.n	801731c <_printf_i+0xec>
 8017318:	681d      	ldr	r5, [r3, #0]
 801731a:	e002      	b.n	8017322 <_printf_i+0xf2>
 801731c:	0669      	lsls	r1, r5, #25
 801731e:	d5fb      	bpl.n	8017318 <_printf_i+0xe8>
 8017320:	881d      	ldrh	r5, [r3, #0]
 8017322:	4854      	ldr	r0, [pc, #336]	; (8017474 <_printf_i+0x244>)
 8017324:	2f6f      	cmp	r7, #111	; 0x6f
 8017326:	bf0c      	ite	eq
 8017328:	2308      	moveq	r3, #8
 801732a:	230a      	movne	r3, #10
 801732c:	2100      	movs	r1, #0
 801732e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017332:	6866      	ldr	r6, [r4, #4]
 8017334:	60a6      	str	r6, [r4, #8]
 8017336:	2e00      	cmp	r6, #0
 8017338:	bfa2      	ittt	ge
 801733a:	6821      	ldrge	r1, [r4, #0]
 801733c:	f021 0104 	bicge.w	r1, r1, #4
 8017340:	6021      	strge	r1, [r4, #0]
 8017342:	b90d      	cbnz	r5, 8017348 <_printf_i+0x118>
 8017344:	2e00      	cmp	r6, #0
 8017346:	d04d      	beq.n	80173e4 <_printf_i+0x1b4>
 8017348:	4616      	mov	r6, r2
 801734a:	fbb5 f1f3 	udiv	r1, r5, r3
 801734e:	fb03 5711 	mls	r7, r3, r1, r5
 8017352:	5dc7      	ldrb	r7, [r0, r7]
 8017354:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017358:	462f      	mov	r7, r5
 801735a:	42bb      	cmp	r3, r7
 801735c:	460d      	mov	r5, r1
 801735e:	d9f4      	bls.n	801734a <_printf_i+0x11a>
 8017360:	2b08      	cmp	r3, #8
 8017362:	d10b      	bne.n	801737c <_printf_i+0x14c>
 8017364:	6823      	ldr	r3, [r4, #0]
 8017366:	07df      	lsls	r7, r3, #31
 8017368:	d508      	bpl.n	801737c <_printf_i+0x14c>
 801736a:	6923      	ldr	r3, [r4, #16]
 801736c:	6861      	ldr	r1, [r4, #4]
 801736e:	4299      	cmp	r1, r3
 8017370:	bfde      	ittt	le
 8017372:	2330      	movle	r3, #48	; 0x30
 8017374:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017378:	f106 36ff 	addle.w	r6, r6, #4294967295
 801737c:	1b92      	subs	r2, r2, r6
 801737e:	6122      	str	r2, [r4, #16]
 8017380:	f8cd a000 	str.w	sl, [sp]
 8017384:	464b      	mov	r3, r9
 8017386:	aa03      	add	r2, sp, #12
 8017388:	4621      	mov	r1, r4
 801738a:	4640      	mov	r0, r8
 801738c:	f7ff fee2 	bl	8017154 <_printf_common>
 8017390:	3001      	adds	r0, #1
 8017392:	d14c      	bne.n	801742e <_printf_i+0x1fe>
 8017394:	f04f 30ff 	mov.w	r0, #4294967295
 8017398:	b004      	add	sp, #16
 801739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801739e:	4835      	ldr	r0, [pc, #212]	; (8017474 <_printf_i+0x244>)
 80173a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80173a4:	6823      	ldr	r3, [r4, #0]
 80173a6:	680e      	ldr	r6, [r1, #0]
 80173a8:	061f      	lsls	r7, r3, #24
 80173aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80173ae:	600e      	str	r6, [r1, #0]
 80173b0:	d514      	bpl.n	80173dc <_printf_i+0x1ac>
 80173b2:	07d9      	lsls	r1, r3, #31
 80173b4:	bf44      	itt	mi
 80173b6:	f043 0320 	orrmi.w	r3, r3, #32
 80173ba:	6023      	strmi	r3, [r4, #0]
 80173bc:	b91d      	cbnz	r5, 80173c6 <_printf_i+0x196>
 80173be:	6823      	ldr	r3, [r4, #0]
 80173c0:	f023 0320 	bic.w	r3, r3, #32
 80173c4:	6023      	str	r3, [r4, #0]
 80173c6:	2310      	movs	r3, #16
 80173c8:	e7b0      	b.n	801732c <_printf_i+0xfc>
 80173ca:	6823      	ldr	r3, [r4, #0]
 80173cc:	f043 0320 	orr.w	r3, r3, #32
 80173d0:	6023      	str	r3, [r4, #0]
 80173d2:	2378      	movs	r3, #120	; 0x78
 80173d4:	4828      	ldr	r0, [pc, #160]	; (8017478 <_printf_i+0x248>)
 80173d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80173da:	e7e3      	b.n	80173a4 <_printf_i+0x174>
 80173dc:	065e      	lsls	r6, r3, #25
 80173de:	bf48      	it	mi
 80173e0:	b2ad      	uxthmi	r5, r5
 80173e2:	e7e6      	b.n	80173b2 <_printf_i+0x182>
 80173e4:	4616      	mov	r6, r2
 80173e6:	e7bb      	b.n	8017360 <_printf_i+0x130>
 80173e8:	680b      	ldr	r3, [r1, #0]
 80173ea:	6826      	ldr	r6, [r4, #0]
 80173ec:	6960      	ldr	r0, [r4, #20]
 80173ee:	1d1d      	adds	r5, r3, #4
 80173f0:	600d      	str	r5, [r1, #0]
 80173f2:	0635      	lsls	r5, r6, #24
 80173f4:	681b      	ldr	r3, [r3, #0]
 80173f6:	d501      	bpl.n	80173fc <_printf_i+0x1cc>
 80173f8:	6018      	str	r0, [r3, #0]
 80173fa:	e002      	b.n	8017402 <_printf_i+0x1d2>
 80173fc:	0671      	lsls	r1, r6, #25
 80173fe:	d5fb      	bpl.n	80173f8 <_printf_i+0x1c8>
 8017400:	8018      	strh	r0, [r3, #0]
 8017402:	2300      	movs	r3, #0
 8017404:	6123      	str	r3, [r4, #16]
 8017406:	4616      	mov	r6, r2
 8017408:	e7ba      	b.n	8017380 <_printf_i+0x150>
 801740a:	680b      	ldr	r3, [r1, #0]
 801740c:	1d1a      	adds	r2, r3, #4
 801740e:	600a      	str	r2, [r1, #0]
 8017410:	681e      	ldr	r6, [r3, #0]
 8017412:	6862      	ldr	r2, [r4, #4]
 8017414:	2100      	movs	r1, #0
 8017416:	4630      	mov	r0, r6
 8017418:	f7e8 fefa 	bl	8000210 <memchr>
 801741c:	b108      	cbz	r0, 8017422 <_printf_i+0x1f2>
 801741e:	1b80      	subs	r0, r0, r6
 8017420:	6060      	str	r0, [r4, #4]
 8017422:	6863      	ldr	r3, [r4, #4]
 8017424:	6123      	str	r3, [r4, #16]
 8017426:	2300      	movs	r3, #0
 8017428:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801742c:	e7a8      	b.n	8017380 <_printf_i+0x150>
 801742e:	6923      	ldr	r3, [r4, #16]
 8017430:	4632      	mov	r2, r6
 8017432:	4649      	mov	r1, r9
 8017434:	4640      	mov	r0, r8
 8017436:	47d0      	blx	sl
 8017438:	3001      	adds	r0, #1
 801743a:	d0ab      	beq.n	8017394 <_printf_i+0x164>
 801743c:	6823      	ldr	r3, [r4, #0]
 801743e:	079b      	lsls	r3, r3, #30
 8017440:	d413      	bmi.n	801746a <_printf_i+0x23a>
 8017442:	68e0      	ldr	r0, [r4, #12]
 8017444:	9b03      	ldr	r3, [sp, #12]
 8017446:	4298      	cmp	r0, r3
 8017448:	bfb8      	it	lt
 801744a:	4618      	movlt	r0, r3
 801744c:	e7a4      	b.n	8017398 <_printf_i+0x168>
 801744e:	2301      	movs	r3, #1
 8017450:	4632      	mov	r2, r6
 8017452:	4649      	mov	r1, r9
 8017454:	4640      	mov	r0, r8
 8017456:	47d0      	blx	sl
 8017458:	3001      	adds	r0, #1
 801745a:	d09b      	beq.n	8017394 <_printf_i+0x164>
 801745c:	3501      	adds	r5, #1
 801745e:	68e3      	ldr	r3, [r4, #12]
 8017460:	9903      	ldr	r1, [sp, #12]
 8017462:	1a5b      	subs	r3, r3, r1
 8017464:	42ab      	cmp	r3, r5
 8017466:	dcf2      	bgt.n	801744e <_printf_i+0x21e>
 8017468:	e7eb      	b.n	8017442 <_printf_i+0x212>
 801746a:	2500      	movs	r5, #0
 801746c:	f104 0619 	add.w	r6, r4, #25
 8017470:	e7f5      	b.n	801745e <_printf_i+0x22e>
 8017472:	bf00      	nop
 8017474:	08022825 	.word	0x08022825
 8017478:	08022836 	.word	0x08022836
 801747c:	00000000 	.word	0x00000000

08017480 <nan>:
 8017480:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017488 <nan+0x8>
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	00000000 	.word	0x00000000
 801748c:	7ff80000 	.word	0x7ff80000

08017490 <_sbrk_r>:
 8017490:	b538      	push	{r3, r4, r5, lr}
 8017492:	4d06      	ldr	r5, [pc, #24]	; (80174ac <_sbrk_r+0x1c>)
 8017494:	2300      	movs	r3, #0
 8017496:	4604      	mov	r4, r0
 8017498:	4608      	mov	r0, r1
 801749a:	602b      	str	r3, [r5, #0]
 801749c:	f7e9 ff7c 	bl	8001398 <_sbrk>
 80174a0:	1c43      	adds	r3, r0, #1
 80174a2:	d102      	bne.n	80174aa <_sbrk_r+0x1a>
 80174a4:	682b      	ldr	r3, [r5, #0]
 80174a6:	b103      	cbz	r3, 80174aa <_sbrk_r+0x1a>
 80174a8:	6023      	str	r3, [r4, #0]
 80174aa:	bd38      	pop	{r3, r4, r5, pc}
 80174ac:	20008820 	.word	0x20008820

080174b0 <nanf>:
 80174b0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80174b8 <nanf+0x8>
 80174b4:	4770      	bx	lr
 80174b6:	bf00      	nop
 80174b8:	7fc00000 	.word	0x7fc00000

080174bc <strncmp>:
 80174bc:	b510      	push	{r4, lr}
 80174be:	b16a      	cbz	r2, 80174dc <strncmp+0x20>
 80174c0:	3901      	subs	r1, #1
 80174c2:	1884      	adds	r4, r0, r2
 80174c4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80174c8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80174cc:	4293      	cmp	r3, r2
 80174ce:	d103      	bne.n	80174d8 <strncmp+0x1c>
 80174d0:	42a0      	cmp	r0, r4
 80174d2:	d001      	beq.n	80174d8 <strncmp+0x1c>
 80174d4:	2b00      	cmp	r3, #0
 80174d6:	d1f5      	bne.n	80174c4 <strncmp+0x8>
 80174d8:	1a98      	subs	r0, r3, r2
 80174da:	bd10      	pop	{r4, pc}
 80174dc:	4610      	mov	r0, r2
 80174de:	e7fc      	b.n	80174da <strncmp+0x1e>

080174e0 <__ascii_wctomb>:
 80174e0:	b149      	cbz	r1, 80174f6 <__ascii_wctomb+0x16>
 80174e2:	2aff      	cmp	r2, #255	; 0xff
 80174e4:	bf85      	ittet	hi
 80174e6:	238a      	movhi	r3, #138	; 0x8a
 80174e8:	6003      	strhi	r3, [r0, #0]
 80174ea:	700a      	strbls	r2, [r1, #0]
 80174ec:	f04f 30ff 	movhi.w	r0, #4294967295
 80174f0:	bf98      	it	ls
 80174f2:	2001      	movls	r0, #1
 80174f4:	4770      	bx	lr
 80174f6:	4608      	mov	r0, r1
 80174f8:	4770      	bx	lr
	...

080174fc <__assert_func>:
 80174fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80174fe:	4614      	mov	r4, r2
 8017500:	461a      	mov	r2, r3
 8017502:	4b09      	ldr	r3, [pc, #36]	; (8017528 <__assert_func+0x2c>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	4605      	mov	r5, r0
 8017508:	68d8      	ldr	r0, [r3, #12]
 801750a:	b14c      	cbz	r4, 8017520 <__assert_func+0x24>
 801750c:	4b07      	ldr	r3, [pc, #28]	; (801752c <__assert_func+0x30>)
 801750e:	9100      	str	r1, [sp, #0]
 8017510:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017514:	4906      	ldr	r1, [pc, #24]	; (8017530 <__assert_func+0x34>)
 8017516:	462b      	mov	r3, r5
 8017518:	f000 f80e 	bl	8017538 <fiprintf>
 801751c:	f000 fadc 	bl	8017ad8 <abort>
 8017520:	4b04      	ldr	r3, [pc, #16]	; (8017534 <__assert_func+0x38>)
 8017522:	461c      	mov	r4, r3
 8017524:	e7f3      	b.n	801750e <__assert_func+0x12>
 8017526:	bf00      	nop
 8017528:	20000374 	.word	0x20000374
 801752c:	08022847 	.word	0x08022847
 8017530:	08022854 	.word	0x08022854
 8017534:	08022882 	.word	0x08022882

08017538 <fiprintf>:
 8017538:	b40e      	push	{r1, r2, r3}
 801753a:	b503      	push	{r0, r1, lr}
 801753c:	4601      	mov	r1, r0
 801753e:	ab03      	add	r3, sp, #12
 8017540:	4805      	ldr	r0, [pc, #20]	; (8017558 <fiprintf+0x20>)
 8017542:	f853 2b04 	ldr.w	r2, [r3], #4
 8017546:	6800      	ldr	r0, [r0, #0]
 8017548:	9301      	str	r3, [sp, #4]
 801754a:	f000 f8d5 	bl	80176f8 <_vfiprintf_r>
 801754e:	b002      	add	sp, #8
 8017550:	f85d eb04 	ldr.w	lr, [sp], #4
 8017554:	b003      	add	sp, #12
 8017556:	4770      	bx	lr
 8017558:	20000374 	.word	0x20000374

0801755c <malloc>:
 801755c:	4b02      	ldr	r3, [pc, #8]	; (8017568 <malloc+0xc>)
 801755e:	4601      	mov	r1, r0
 8017560:	6818      	ldr	r0, [r3, #0]
 8017562:	f7ff bc41 	b.w	8016de8 <_malloc_r>
 8017566:	bf00      	nop
 8017568:	20000374 	.word	0x20000374

0801756c <memmove>:
 801756c:	4288      	cmp	r0, r1
 801756e:	b510      	push	{r4, lr}
 8017570:	eb01 0402 	add.w	r4, r1, r2
 8017574:	d902      	bls.n	801757c <memmove+0x10>
 8017576:	4284      	cmp	r4, r0
 8017578:	4623      	mov	r3, r4
 801757a:	d807      	bhi.n	801758c <memmove+0x20>
 801757c:	1e43      	subs	r3, r0, #1
 801757e:	42a1      	cmp	r1, r4
 8017580:	d008      	beq.n	8017594 <memmove+0x28>
 8017582:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017586:	f803 2f01 	strb.w	r2, [r3, #1]!
 801758a:	e7f8      	b.n	801757e <memmove+0x12>
 801758c:	4402      	add	r2, r0
 801758e:	4601      	mov	r1, r0
 8017590:	428a      	cmp	r2, r1
 8017592:	d100      	bne.n	8017596 <memmove+0x2a>
 8017594:	bd10      	pop	{r4, pc}
 8017596:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801759a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801759e:	e7f7      	b.n	8017590 <memmove+0x24>

080175a0 <__malloc_lock>:
 80175a0:	4801      	ldr	r0, [pc, #4]	; (80175a8 <__malloc_lock+0x8>)
 80175a2:	f000 bc59 	b.w	8017e58 <__retarget_lock_acquire_recursive>
 80175a6:	bf00      	nop
 80175a8:	20008828 	.word	0x20008828

080175ac <__malloc_unlock>:
 80175ac:	4801      	ldr	r0, [pc, #4]	; (80175b4 <__malloc_unlock+0x8>)
 80175ae:	f000 bc54 	b.w	8017e5a <__retarget_lock_release_recursive>
 80175b2:	bf00      	nop
 80175b4:	20008828 	.word	0x20008828

080175b8 <_free_r>:
 80175b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80175ba:	2900      	cmp	r1, #0
 80175bc:	d048      	beq.n	8017650 <_free_r+0x98>
 80175be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80175c2:	9001      	str	r0, [sp, #4]
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	f1a1 0404 	sub.w	r4, r1, #4
 80175ca:	bfb8      	it	lt
 80175cc:	18e4      	addlt	r4, r4, r3
 80175ce:	f7ff ffe7 	bl	80175a0 <__malloc_lock>
 80175d2:	4a20      	ldr	r2, [pc, #128]	; (8017654 <_free_r+0x9c>)
 80175d4:	9801      	ldr	r0, [sp, #4]
 80175d6:	6813      	ldr	r3, [r2, #0]
 80175d8:	4615      	mov	r5, r2
 80175da:	b933      	cbnz	r3, 80175ea <_free_r+0x32>
 80175dc:	6063      	str	r3, [r4, #4]
 80175de:	6014      	str	r4, [r2, #0]
 80175e0:	b003      	add	sp, #12
 80175e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175e6:	f7ff bfe1 	b.w	80175ac <__malloc_unlock>
 80175ea:	42a3      	cmp	r3, r4
 80175ec:	d90b      	bls.n	8017606 <_free_r+0x4e>
 80175ee:	6821      	ldr	r1, [r4, #0]
 80175f0:	1862      	adds	r2, r4, r1
 80175f2:	4293      	cmp	r3, r2
 80175f4:	bf04      	itt	eq
 80175f6:	681a      	ldreq	r2, [r3, #0]
 80175f8:	685b      	ldreq	r3, [r3, #4]
 80175fa:	6063      	str	r3, [r4, #4]
 80175fc:	bf04      	itt	eq
 80175fe:	1852      	addeq	r2, r2, r1
 8017600:	6022      	streq	r2, [r4, #0]
 8017602:	602c      	str	r4, [r5, #0]
 8017604:	e7ec      	b.n	80175e0 <_free_r+0x28>
 8017606:	461a      	mov	r2, r3
 8017608:	685b      	ldr	r3, [r3, #4]
 801760a:	b10b      	cbz	r3, 8017610 <_free_r+0x58>
 801760c:	42a3      	cmp	r3, r4
 801760e:	d9fa      	bls.n	8017606 <_free_r+0x4e>
 8017610:	6811      	ldr	r1, [r2, #0]
 8017612:	1855      	adds	r5, r2, r1
 8017614:	42a5      	cmp	r5, r4
 8017616:	d10b      	bne.n	8017630 <_free_r+0x78>
 8017618:	6824      	ldr	r4, [r4, #0]
 801761a:	4421      	add	r1, r4
 801761c:	1854      	adds	r4, r2, r1
 801761e:	42a3      	cmp	r3, r4
 8017620:	6011      	str	r1, [r2, #0]
 8017622:	d1dd      	bne.n	80175e0 <_free_r+0x28>
 8017624:	681c      	ldr	r4, [r3, #0]
 8017626:	685b      	ldr	r3, [r3, #4]
 8017628:	6053      	str	r3, [r2, #4]
 801762a:	4421      	add	r1, r4
 801762c:	6011      	str	r1, [r2, #0]
 801762e:	e7d7      	b.n	80175e0 <_free_r+0x28>
 8017630:	d902      	bls.n	8017638 <_free_r+0x80>
 8017632:	230c      	movs	r3, #12
 8017634:	6003      	str	r3, [r0, #0]
 8017636:	e7d3      	b.n	80175e0 <_free_r+0x28>
 8017638:	6825      	ldr	r5, [r4, #0]
 801763a:	1961      	adds	r1, r4, r5
 801763c:	428b      	cmp	r3, r1
 801763e:	bf04      	itt	eq
 8017640:	6819      	ldreq	r1, [r3, #0]
 8017642:	685b      	ldreq	r3, [r3, #4]
 8017644:	6063      	str	r3, [r4, #4]
 8017646:	bf04      	itt	eq
 8017648:	1949      	addeq	r1, r1, r5
 801764a:	6021      	streq	r1, [r4, #0]
 801764c:	6054      	str	r4, [r2, #4]
 801764e:	e7c7      	b.n	80175e0 <_free_r+0x28>
 8017650:	b003      	add	sp, #12
 8017652:	bd30      	pop	{r4, r5, pc}
 8017654:	20006c94 	.word	0x20006c94

08017658 <_realloc_r>:
 8017658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801765a:	4607      	mov	r7, r0
 801765c:	4614      	mov	r4, r2
 801765e:	460e      	mov	r6, r1
 8017660:	b921      	cbnz	r1, 801766c <_realloc_r+0x14>
 8017662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017666:	4611      	mov	r1, r2
 8017668:	f7ff bbbe 	b.w	8016de8 <_malloc_r>
 801766c:	b922      	cbnz	r2, 8017678 <_realloc_r+0x20>
 801766e:	f7ff ffa3 	bl	80175b8 <_free_r>
 8017672:	4625      	mov	r5, r4
 8017674:	4628      	mov	r0, r5
 8017676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017678:	f000 fc54 	bl	8017f24 <_malloc_usable_size_r>
 801767c:	42a0      	cmp	r0, r4
 801767e:	d20f      	bcs.n	80176a0 <_realloc_r+0x48>
 8017680:	4621      	mov	r1, r4
 8017682:	4638      	mov	r0, r7
 8017684:	f7ff fbb0 	bl	8016de8 <_malloc_r>
 8017688:	4605      	mov	r5, r0
 801768a:	2800      	cmp	r0, #0
 801768c:	d0f2      	beq.n	8017674 <_realloc_r+0x1c>
 801768e:	4631      	mov	r1, r6
 8017690:	4622      	mov	r2, r4
 8017692:	f7fd fbd1 	bl	8014e38 <memcpy>
 8017696:	4631      	mov	r1, r6
 8017698:	4638      	mov	r0, r7
 801769a:	f7ff ff8d 	bl	80175b8 <_free_r>
 801769e:	e7e9      	b.n	8017674 <_realloc_r+0x1c>
 80176a0:	4635      	mov	r5, r6
 80176a2:	e7e7      	b.n	8017674 <_realloc_r+0x1c>

080176a4 <__sfputc_r>:
 80176a4:	6893      	ldr	r3, [r2, #8]
 80176a6:	3b01      	subs	r3, #1
 80176a8:	2b00      	cmp	r3, #0
 80176aa:	b410      	push	{r4}
 80176ac:	6093      	str	r3, [r2, #8]
 80176ae:	da08      	bge.n	80176c2 <__sfputc_r+0x1e>
 80176b0:	6994      	ldr	r4, [r2, #24]
 80176b2:	42a3      	cmp	r3, r4
 80176b4:	db01      	blt.n	80176ba <__sfputc_r+0x16>
 80176b6:	290a      	cmp	r1, #10
 80176b8:	d103      	bne.n	80176c2 <__sfputc_r+0x1e>
 80176ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176be:	f000 b94b 	b.w	8017958 <__swbuf_r>
 80176c2:	6813      	ldr	r3, [r2, #0]
 80176c4:	1c58      	adds	r0, r3, #1
 80176c6:	6010      	str	r0, [r2, #0]
 80176c8:	7019      	strb	r1, [r3, #0]
 80176ca:	4608      	mov	r0, r1
 80176cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80176d0:	4770      	bx	lr

080176d2 <__sfputs_r>:
 80176d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176d4:	4606      	mov	r6, r0
 80176d6:	460f      	mov	r7, r1
 80176d8:	4614      	mov	r4, r2
 80176da:	18d5      	adds	r5, r2, r3
 80176dc:	42ac      	cmp	r4, r5
 80176de:	d101      	bne.n	80176e4 <__sfputs_r+0x12>
 80176e0:	2000      	movs	r0, #0
 80176e2:	e007      	b.n	80176f4 <__sfputs_r+0x22>
 80176e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176e8:	463a      	mov	r2, r7
 80176ea:	4630      	mov	r0, r6
 80176ec:	f7ff ffda 	bl	80176a4 <__sfputc_r>
 80176f0:	1c43      	adds	r3, r0, #1
 80176f2:	d1f3      	bne.n	80176dc <__sfputs_r+0xa>
 80176f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080176f8 <_vfiprintf_r>:
 80176f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176fc:	460d      	mov	r5, r1
 80176fe:	b09d      	sub	sp, #116	; 0x74
 8017700:	4614      	mov	r4, r2
 8017702:	4698      	mov	r8, r3
 8017704:	4606      	mov	r6, r0
 8017706:	b118      	cbz	r0, 8017710 <_vfiprintf_r+0x18>
 8017708:	6983      	ldr	r3, [r0, #24]
 801770a:	b90b      	cbnz	r3, 8017710 <_vfiprintf_r+0x18>
 801770c:	f000 fb06 	bl	8017d1c <__sinit>
 8017710:	4b89      	ldr	r3, [pc, #548]	; (8017938 <_vfiprintf_r+0x240>)
 8017712:	429d      	cmp	r5, r3
 8017714:	d11b      	bne.n	801774e <_vfiprintf_r+0x56>
 8017716:	6875      	ldr	r5, [r6, #4]
 8017718:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801771a:	07d9      	lsls	r1, r3, #31
 801771c:	d405      	bmi.n	801772a <_vfiprintf_r+0x32>
 801771e:	89ab      	ldrh	r3, [r5, #12]
 8017720:	059a      	lsls	r2, r3, #22
 8017722:	d402      	bmi.n	801772a <_vfiprintf_r+0x32>
 8017724:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017726:	f000 fb97 	bl	8017e58 <__retarget_lock_acquire_recursive>
 801772a:	89ab      	ldrh	r3, [r5, #12]
 801772c:	071b      	lsls	r3, r3, #28
 801772e:	d501      	bpl.n	8017734 <_vfiprintf_r+0x3c>
 8017730:	692b      	ldr	r3, [r5, #16]
 8017732:	b9eb      	cbnz	r3, 8017770 <_vfiprintf_r+0x78>
 8017734:	4629      	mov	r1, r5
 8017736:	4630      	mov	r0, r6
 8017738:	f000 f960 	bl	80179fc <__swsetup_r>
 801773c:	b1c0      	cbz	r0, 8017770 <_vfiprintf_r+0x78>
 801773e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017740:	07dc      	lsls	r4, r3, #31
 8017742:	d50e      	bpl.n	8017762 <_vfiprintf_r+0x6a>
 8017744:	f04f 30ff 	mov.w	r0, #4294967295
 8017748:	b01d      	add	sp, #116	; 0x74
 801774a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801774e:	4b7b      	ldr	r3, [pc, #492]	; (801793c <_vfiprintf_r+0x244>)
 8017750:	429d      	cmp	r5, r3
 8017752:	d101      	bne.n	8017758 <_vfiprintf_r+0x60>
 8017754:	68b5      	ldr	r5, [r6, #8]
 8017756:	e7df      	b.n	8017718 <_vfiprintf_r+0x20>
 8017758:	4b79      	ldr	r3, [pc, #484]	; (8017940 <_vfiprintf_r+0x248>)
 801775a:	429d      	cmp	r5, r3
 801775c:	bf08      	it	eq
 801775e:	68f5      	ldreq	r5, [r6, #12]
 8017760:	e7da      	b.n	8017718 <_vfiprintf_r+0x20>
 8017762:	89ab      	ldrh	r3, [r5, #12]
 8017764:	0598      	lsls	r0, r3, #22
 8017766:	d4ed      	bmi.n	8017744 <_vfiprintf_r+0x4c>
 8017768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801776a:	f000 fb76 	bl	8017e5a <__retarget_lock_release_recursive>
 801776e:	e7e9      	b.n	8017744 <_vfiprintf_r+0x4c>
 8017770:	2300      	movs	r3, #0
 8017772:	9309      	str	r3, [sp, #36]	; 0x24
 8017774:	2320      	movs	r3, #32
 8017776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801777a:	f8cd 800c 	str.w	r8, [sp, #12]
 801777e:	2330      	movs	r3, #48	; 0x30
 8017780:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017944 <_vfiprintf_r+0x24c>
 8017784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017788:	f04f 0901 	mov.w	r9, #1
 801778c:	4623      	mov	r3, r4
 801778e:	469a      	mov	sl, r3
 8017790:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017794:	b10a      	cbz	r2, 801779a <_vfiprintf_r+0xa2>
 8017796:	2a25      	cmp	r2, #37	; 0x25
 8017798:	d1f9      	bne.n	801778e <_vfiprintf_r+0x96>
 801779a:	ebba 0b04 	subs.w	fp, sl, r4
 801779e:	d00b      	beq.n	80177b8 <_vfiprintf_r+0xc0>
 80177a0:	465b      	mov	r3, fp
 80177a2:	4622      	mov	r2, r4
 80177a4:	4629      	mov	r1, r5
 80177a6:	4630      	mov	r0, r6
 80177a8:	f7ff ff93 	bl	80176d2 <__sfputs_r>
 80177ac:	3001      	adds	r0, #1
 80177ae:	f000 80aa 	beq.w	8017906 <_vfiprintf_r+0x20e>
 80177b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80177b4:	445a      	add	r2, fp
 80177b6:	9209      	str	r2, [sp, #36]	; 0x24
 80177b8:	f89a 3000 	ldrb.w	r3, [sl]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	f000 80a2 	beq.w	8017906 <_vfiprintf_r+0x20e>
 80177c2:	2300      	movs	r3, #0
 80177c4:	f04f 32ff 	mov.w	r2, #4294967295
 80177c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80177cc:	f10a 0a01 	add.w	sl, sl, #1
 80177d0:	9304      	str	r3, [sp, #16]
 80177d2:	9307      	str	r3, [sp, #28]
 80177d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80177d8:	931a      	str	r3, [sp, #104]	; 0x68
 80177da:	4654      	mov	r4, sl
 80177dc:	2205      	movs	r2, #5
 80177de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177e2:	4858      	ldr	r0, [pc, #352]	; (8017944 <_vfiprintf_r+0x24c>)
 80177e4:	f7e8 fd14 	bl	8000210 <memchr>
 80177e8:	9a04      	ldr	r2, [sp, #16]
 80177ea:	b9d8      	cbnz	r0, 8017824 <_vfiprintf_r+0x12c>
 80177ec:	06d1      	lsls	r1, r2, #27
 80177ee:	bf44      	itt	mi
 80177f0:	2320      	movmi	r3, #32
 80177f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177f6:	0713      	lsls	r3, r2, #28
 80177f8:	bf44      	itt	mi
 80177fa:	232b      	movmi	r3, #43	; 0x2b
 80177fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017800:	f89a 3000 	ldrb.w	r3, [sl]
 8017804:	2b2a      	cmp	r3, #42	; 0x2a
 8017806:	d015      	beq.n	8017834 <_vfiprintf_r+0x13c>
 8017808:	9a07      	ldr	r2, [sp, #28]
 801780a:	4654      	mov	r4, sl
 801780c:	2000      	movs	r0, #0
 801780e:	f04f 0c0a 	mov.w	ip, #10
 8017812:	4621      	mov	r1, r4
 8017814:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017818:	3b30      	subs	r3, #48	; 0x30
 801781a:	2b09      	cmp	r3, #9
 801781c:	d94e      	bls.n	80178bc <_vfiprintf_r+0x1c4>
 801781e:	b1b0      	cbz	r0, 801784e <_vfiprintf_r+0x156>
 8017820:	9207      	str	r2, [sp, #28]
 8017822:	e014      	b.n	801784e <_vfiprintf_r+0x156>
 8017824:	eba0 0308 	sub.w	r3, r0, r8
 8017828:	fa09 f303 	lsl.w	r3, r9, r3
 801782c:	4313      	orrs	r3, r2
 801782e:	9304      	str	r3, [sp, #16]
 8017830:	46a2      	mov	sl, r4
 8017832:	e7d2      	b.n	80177da <_vfiprintf_r+0xe2>
 8017834:	9b03      	ldr	r3, [sp, #12]
 8017836:	1d19      	adds	r1, r3, #4
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	9103      	str	r1, [sp, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	bfbb      	ittet	lt
 8017840:	425b      	neglt	r3, r3
 8017842:	f042 0202 	orrlt.w	r2, r2, #2
 8017846:	9307      	strge	r3, [sp, #28]
 8017848:	9307      	strlt	r3, [sp, #28]
 801784a:	bfb8      	it	lt
 801784c:	9204      	strlt	r2, [sp, #16]
 801784e:	7823      	ldrb	r3, [r4, #0]
 8017850:	2b2e      	cmp	r3, #46	; 0x2e
 8017852:	d10c      	bne.n	801786e <_vfiprintf_r+0x176>
 8017854:	7863      	ldrb	r3, [r4, #1]
 8017856:	2b2a      	cmp	r3, #42	; 0x2a
 8017858:	d135      	bne.n	80178c6 <_vfiprintf_r+0x1ce>
 801785a:	9b03      	ldr	r3, [sp, #12]
 801785c:	1d1a      	adds	r2, r3, #4
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	9203      	str	r2, [sp, #12]
 8017862:	2b00      	cmp	r3, #0
 8017864:	bfb8      	it	lt
 8017866:	f04f 33ff 	movlt.w	r3, #4294967295
 801786a:	3402      	adds	r4, #2
 801786c:	9305      	str	r3, [sp, #20]
 801786e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017954 <_vfiprintf_r+0x25c>
 8017872:	7821      	ldrb	r1, [r4, #0]
 8017874:	2203      	movs	r2, #3
 8017876:	4650      	mov	r0, sl
 8017878:	f7e8 fcca 	bl	8000210 <memchr>
 801787c:	b140      	cbz	r0, 8017890 <_vfiprintf_r+0x198>
 801787e:	2340      	movs	r3, #64	; 0x40
 8017880:	eba0 000a 	sub.w	r0, r0, sl
 8017884:	fa03 f000 	lsl.w	r0, r3, r0
 8017888:	9b04      	ldr	r3, [sp, #16]
 801788a:	4303      	orrs	r3, r0
 801788c:	3401      	adds	r4, #1
 801788e:	9304      	str	r3, [sp, #16]
 8017890:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017894:	482c      	ldr	r0, [pc, #176]	; (8017948 <_vfiprintf_r+0x250>)
 8017896:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801789a:	2206      	movs	r2, #6
 801789c:	f7e8 fcb8 	bl	8000210 <memchr>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	d03f      	beq.n	8017924 <_vfiprintf_r+0x22c>
 80178a4:	4b29      	ldr	r3, [pc, #164]	; (801794c <_vfiprintf_r+0x254>)
 80178a6:	bb1b      	cbnz	r3, 80178f0 <_vfiprintf_r+0x1f8>
 80178a8:	9b03      	ldr	r3, [sp, #12]
 80178aa:	3307      	adds	r3, #7
 80178ac:	f023 0307 	bic.w	r3, r3, #7
 80178b0:	3308      	adds	r3, #8
 80178b2:	9303      	str	r3, [sp, #12]
 80178b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80178b6:	443b      	add	r3, r7
 80178b8:	9309      	str	r3, [sp, #36]	; 0x24
 80178ba:	e767      	b.n	801778c <_vfiprintf_r+0x94>
 80178bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80178c0:	460c      	mov	r4, r1
 80178c2:	2001      	movs	r0, #1
 80178c4:	e7a5      	b.n	8017812 <_vfiprintf_r+0x11a>
 80178c6:	2300      	movs	r3, #0
 80178c8:	3401      	adds	r4, #1
 80178ca:	9305      	str	r3, [sp, #20]
 80178cc:	4619      	mov	r1, r3
 80178ce:	f04f 0c0a 	mov.w	ip, #10
 80178d2:	4620      	mov	r0, r4
 80178d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80178d8:	3a30      	subs	r2, #48	; 0x30
 80178da:	2a09      	cmp	r2, #9
 80178dc:	d903      	bls.n	80178e6 <_vfiprintf_r+0x1ee>
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d0c5      	beq.n	801786e <_vfiprintf_r+0x176>
 80178e2:	9105      	str	r1, [sp, #20]
 80178e4:	e7c3      	b.n	801786e <_vfiprintf_r+0x176>
 80178e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80178ea:	4604      	mov	r4, r0
 80178ec:	2301      	movs	r3, #1
 80178ee:	e7f0      	b.n	80178d2 <_vfiprintf_r+0x1da>
 80178f0:	ab03      	add	r3, sp, #12
 80178f2:	9300      	str	r3, [sp, #0]
 80178f4:	462a      	mov	r2, r5
 80178f6:	4b16      	ldr	r3, [pc, #88]	; (8017950 <_vfiprintf_r+0x258>)
 80178f8:	a904      	add	r1, sp, #16
 80178fa:	4630      	mov	r0, r6
 80178fc:	f3af 8000 	nop.w
 8017900:	4607      	mov	r7, r0
 8017902:	1c78      	adds	r0, r7, #1
 8017904:	d1d6      	bne.n	80178b4 <_vfiprintf_r+0x1bc>
 8017906:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017908:	07d9      	lsls	r1, r3, #31
 801790a:	d405      	bmi.n	8017918 <_vfiprintf_r+0x220>
 801790c:	89ab      	ldrh	r3, [r5, #12]
 801790e:	059a      	lsls	r2, r3, #22
 8017910:	d402      	bmi.n	8017918 <_vfiprintf_r+0x220>
 8017912:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017914:	f000 faa1 	bl	8017e5a <__retarget_lock_release_recursive>
 8017918:	89ab      	ldrh	r3, [r5, #12]
 801791a:	065b      	lsls	r3, r3, #25
 801791c:	f53f af12 	bmi.w	8017744 <_vfiprintf_r+0x4c>
 8017920:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017922:	e711      	b.n	8017748 <_vfiprintf_r+0x50>
 8017924:	ab03      	add	r3, sp, #12
 8017926:	9300      	str	r3, [sp, #0]
 8017928:	462a      	mov	r2, r5
 801792a:	4b09      	ldr	r3, [pc, #36]	; (8017950 <_vfiprintf_r+0x258>)
 801792c:	a904      	add	r1, sp, #16
 801792e:	4630      	mov	r0, r6
 8017930:	f7ff fc7e 	bl	8017230 <_printf_i>
 8017934:	e7e4      	b.n	8017900 <_vfiprintf_r+0x208>
 8017936:	bf00      	nop
 8017938:	080228a4 	.word	0x080228a4
 801793c:	080228c4 	.word	0x080228c4
 8017940:	08022884 	.word	0x08022884
 8017944:	08022814 	.word	0x08022814
 8017948:	0802281e 	.word	0x0802281e
 801794c:	00000000 	.word	0x00000000
 8017950:	080176d3 	.word	0x080176d3
 8017954:	0802281a 	.word	0x0802281a

08017958 <__swbuf_r>:
 8017958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801795a:	460e      	mov	r6, r1
 801795c:	4614      	mov	r4, r2
 801795e:	4605      	mov	r5, r0
 8017960:	b118      	cbz	r0, 801796a <__swbuf_r+0x12>
 8017962:	6983      	ldr	r3, [r0, #24]
 8017964:	b90b      	cbnz	r3, 801796a <__swbuf_r+0x12>
 8017966:	f000 f9d9 	bl	8017d1c <__sinit>
 801796a:	4b21      	ldr	r3, [pc, #132]	; (80179f0 <__swbuf_r+0x98>)
 801796c:	429c      	cmp	r4, r3
 801796e:	d12b      	bne.n	80179c8 <__swbuf_r+0x70>
 8017970:	686c      	ldr	r4, [r5, #4]
 8017972:	69a3      	ldr	r3, [r4, #24]
 8017974:	60a3      	str	r3, [r4, #8]
 8017976:	89a3      	ldrh	r3, [r4, #12]
 8017978:	071a      	lsls	r2, r3, #28
 801797a:	d52f      	bpl.n	80179dc <__swbuf_r+0x84>
 801797c:	6923      	ldr	r3, [r4, #16]
 801797e:	b36b      	cbz	r3, 80179dc <__swbuf_r+0x84>
 8017980:	6923      	ldr	r3, [r4, #16]
 8017982:	6820      	ldr	r0, [r4, #0]
 8017984:	1ac0      	subs	r0, r0, r3
 8017986:	6963      	ldr	r3, [r4, #20]
 8017988:	b2f6      	uxtb	r6, r6
 801798a:	4283      	cmp	r3, r0
 801798c:	4637      	mov	r7, r6
 801798e:	dc04      	bgt.n	801799a <__swbuf_r+0x42>
 8017990:	4621      	mov	r1, r4
 8017992:	4628      	mov	r0, r5
 8017994:	f000 f92e 	bl	8017bf4 <_fflush_r>
 8017998:	bb30      	cbnz	r0, 80179e8 <__swbuf_r+0x90>
 801799a:	68a3      	ldr	r3, [r4, #8]
 801799c:	3b01      	subs	r3, #1
 801799e:	60a3      	str	r3, [r4, #8]
 80179a0:	6823      	ldr	r3, [r4, #0]
 80179a2:	1c5a      	adds	r2, r3, #1
 80179a4:	6022      	str	r2, [r4, #0]
 80179a6:	701e      	strb	r6, [r3, #0]
 80179a8:	6963      	ldr	r3, [r4, #20]
 80179aa:	3001      	adds	r0, #1
 80179ac:	4283      	cmp	r3, r0
 80179ae:	d004      	beq.n	80179ba <__swbuf_r+0x62>
 80179b0:	89a3      	ldrh	r3, [r4, #12]
 80179b2:	07db      	lsls	r3, r3, #31
 80179b4:	d506      	bpl.n	80179c4 <__swbuf_r+0x6c>
 80179b6:	2e0a      	cmp	r6, #10
 80179b8:	d104      	bne.n	80179c4 <__swbuf_r+0x6c>
 80179ba:	4621      	mov	r1, r4
 80179bc:	4628      	mov	r0, r5
 80179be:	f000 f919 	bl	8017bf4 <_fflush_r>
 80179c2:	b988      	cbnz	r0, 80179e8 <__swbuf_r+0x90>
 80179c4:	4638      	mov	r0, r7
 80179c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80179c8:	4b0a      	ldr	r3, [pc, #40]	; (80179f4 <__swbuf_r+0x9c>)
 80179ca:	429c      	cmp	r4, r3
 80179cc:	d101      	bne.n	80179d2 <__swbuf_r+0x7a>
 80179ce:	68ac      	ldr	r4, [r5, #8]
 80179d0:	e7cf      	b.n	8017972 <__swbuf_r+0x1a>
 80179d2:	4b09      	ldr	r3, [pc, #36]	; (80179f8 <__swbuf_r+0xa0>)
 80179d4:	429c      	cmp	r4, r3
 80179d6:	bf08      	it	eq
 80179d8:	68ec      	ldreq	r4, [r5, #12]
 80179da:	e7ca      	b.n	8017972 <__swbuf_r+0x1a>
 80179dc:	4621      	mov	r1, r4
 80179de:	4628      	mov	r0, r5
 80179e0:	f000 f80c 	bl	80179fc <__swsetup_r>
 80179e4:	2800      	cmp	r0, #0
 80179e6:	d0cb      	beq.n	8017980 <__swbuf_r+0x28>
 80179e8:	f04f 37ff 	mov.w	r7, #4294967295
 80179ec:	e7ea      	b.n	80179c4 <__swbuf_r+0x6c>
 80179ee:	bf00      	nop
 80179f0:	080228a4 	.word	0x080228a4
 80179f4:	080228c4 	.word	0x080228c4
 80179f8:	08022884 	.word	0x08022884

080179fc <__swsetup_r>:
 80179fc:	4b32      	ldr	r3, [pc, #200]	; (8017ac8 <__swsetup_r+0xcc>)
 80179fe:	b570      	push	{r4, r5, r6, lr}
 8017a00:	681d      	ldr	r5, [r3, #0]
 8017a02:	4606      	mov	r6, r0
 8017a04:	460c      	mov	r4, r1
 8017a06:	b125      	cbz	r5, 8017a12 <__swsetup_r+0x16>
 8017a08:	69ab      	ldr	r3, [r5, #24]
 8017a0a:	b913      	cbnz	r3, 8017a12 <__swsetup_r+0x16>
 8017a0c:	4628      	mov	r0, r5
 8017a0e:	f000 f985 	bl	8017d1c <__sinit>
 8017a12:	4b2e      	ldr	r3, [pc, #184]	; (8017acc <__swsetup_r+0xd0>)
 8017a14:	429c      	cmp	r4, r3
 8017a16:	d10f      	bne.n	8017a38 <__swsetup_r+0x3c>
 8017a18:	686c      	ldr	r4, [r5, #4]
 8017a1a:	89a3      	ldrh	r3, [r4, #12]
 8017a1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a20:	0719      	lsls	r1, r3, #28
 8017a22:	d42c      	bmi.n	8017a7e <__swsetup_r+0x82>
 8017a24:	06dd      	lsls	r5, r3, #27
 8017a26:	d411      	bmi.n	8017a4c <__swsetup_r+0x50>
 8017a28:	2309      	movs	r3, #9
 8017a2a:	6033      	str	r3, [r6, #0]
 8017a2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017a30:	81a3      	strh	r3, [r4, #12]
 8017a32:	f04f 30ff 	mov.w	r0, #4294967295
 8017a36:	e03e      	b.n	8017ab6 <__swsetup_r+0xba>
 8017a38:	4b25      	ldr	r3, [pc, #148]	; (8017ad0 <__swsetup_r+0xd4>)
 8017a3a:	429c      	cmp	r4, r3
 8017a3c:	d101      	bne.n	8017a42 <__swsetup_r+0x46>
 8017a3e:	68ac      	ldr	r4, [r5, #8]
 8017a40:	e7eb      	b.n	8017a1a <__swsetup_r+0x1e>
 8017a42:	4b24      	ldr	r3, [pc, #144]	; (8017ad4 <__swsetup_r+0xd8>)
 8017a44:	429c      	cmp	r4, r3
 8017a46:	bf08      	it	eq
 8017a48:	68ec      	ldreq	r4, [r5, #12]
 8017a4a:	e7e6      	b.n	8017a1a <__swsetup_r+0x1e>
 8017a4c:	0758      	lsls	r0, r3, #29
 8017a4e:	d512      	bpl.n	8017a76 <__swsetup_r+0x7a>
 8017a50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017a52:	b141      	cbz	r1, 8017a66 <__swsetup_r+0x6a>
 8017a54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017a58:	4299      	cmp	r1, r3
 8017a5a:	d002      	beq.n	8017a62 <__swsetup_r+0x66>
 8017a5c:	4630      	mov	r0, r6
 8017a5e:	f7ff fdab 	bl	80175b8 <_free_r>
 8017a62:	2300      	movs	r3, #0
 8017a64:	6363      	str	r3, [r4, #52]	; 0x34
 8017a66:	89a3      	ldrh	r3, [r4, #12]
 8017a68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017a6c:	81a3      	strh	r3, [r4, #12]
 8017a6e:	2300      	movs	r3, #0
 8017a70:	6063      	str	r3, [r4, #4]
 8017a72:	6923      	ldr	r3, [r4, #16]
 8017a74:	6023      	str	r3, [r4, #0]
 8017a76:	89a3      	ldrh	r3, [r4, #12]
 8017a78:	f043 0308 	orr.w	r3, r3, #8
 8017a7c:	81a3      	strh	r3, [r4, #12]
 8017a7e:	6923      	ldr	r3, [r4, #16]
 8017a80:	b94b      	cbnz	r3, 8017a96 <__swsetup_r+0x9a>
 8017a82:	89a3      	ldrh	r3, [r4, #12]
 8017a84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017a88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017a8c:	d003      	beq.n	8017a96 <__swsetup_r+0x9a>
 8017a8e:	4621      	mov	r1, r4
 8017a90:	4630      	mov	r0, r6
 8017a92:	f000 fa07 	bl	8017ea4 <__smakebuf_r>
 8017a96:	89a0      	ldrh	r0, [r4, #12]
 8017a98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017a9c:	f010 0301 	ands.w	r3, r0, #1
 8017aa0:	d00a      	beq.n	8017ab8 <__swsetup_r+0xbc>
 8017aa2:	2300      	movs	r3, #0
 8017aa4:	60a3      	str	r3, [r4, #8]
 8017aa6:	6963      	ldr	r3, [r4, #20]
 8017aa8:	425b      	negs	r3, r3
 8017aaa:	61a3      	str	r3, [r4, #24]
 8017aac:	6923      	ldr	r3, [r4, #16]
 8017aae:	b943      	cbnz	r3, 8017ac2 <__swsetup_r+0xc6>
 8017ab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017ab4:	d1ba      	bne.n	8017a2c <__swsetup_r+0x30>
 8017ab6:	bd70      	pop	{r4, r5, r6, pc}
 8017ab8:	0781      	lsls	r1, r0, #30
 8017aba:	bf58      	it	pl
 8017abc:	6963      	ldrpl	r3, [r4, #20]
 8017abe:	60a3      	str	r3, [r4, #8]
 8017ac0:	e7f4      	b.n	8017aac <__swsetup_r+0xb0>
 8017ac2:	2000      	movs	r0, #0
 8017ac4:	e7f7      	b.n	8017ab6 <__swsetup_r+0xba>
 8017ac6:	bf00      	nop
 8017ac8:	20000374 	.word	0x20000374
 8017acc:	080228a4 	.word	0x080228a4
 8017ad0:	080228c4 	.word	0x080228c4
 8017ad4:	08022884 	.word	0x08022884

08017ad8 <abort>:
 8017ad8:	b508      	push	{r3, lr}
 8017ada:	2006      	movs	r0, #6
 8017adc:	f000 fa52 	bl	8017f84 <raise>
 8017ae0:	2001      	movs	r0, #1
 8017ae2:	f7e9 fbe1 	bl	80012a8 <_exit>
	...

08017ae8 <__sflush_r>:
 8017ae8:	898a      	ldrh	r2, [r1, #12]
 8017aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017aee:	4605      	mov	r5, r0
 8017af0:	0710      	lsls	r0, r2, #28
 8017af2:	460c      	mov	r4, r1
 8017af4:	d458      	bmi.n	8017ba8 <__sflush_r+0xc0>
 8017af6:	684b      	ldr	r3, [r1, #4]
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	dc05      	bgt.n	8017b08 <__sflush_r+0x20>
 8017afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	dc02      	bgt.n	8017b08 <__sflush_r+0x20>
 8017b02:	2000      	movs	r0, #0
 8017b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b0a:	2e00      	cmp	r6, #0
 8017b0c:	d0f9      	beq.n	8017b02 <__sflush_r+0x1a>
 8017b0e:	2300      	movs	r3, #0
 8017b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017b14:	682f      	ldr	r7, [r5, #0]
 8017b16:	602b      	str	r3, [r5, #0]
 8017b18:	d032      	beq.n	8017b80 <__sflush_r+0x98>
 8017b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017b1c:	89a3      	ldrh	r3, [r4, #12]
 8017b1e:	075a      	lsls	r2, r3, #29
 8017b20:	d505      	bpl.n	8017b2e <__sflush_r+0x46>
 8017b22:	6863      	ldr	r3, [r4, #4]
 8017b24:	1ac0      	subs	r0, r0, r3
 8017b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017b28:	b10b      	cbz	r3, 8017b2e <__sflush_r+0x46>
 8017b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017b2c:	1ac0      	subs	r0, r0, r3
 8017b2e:	2300      	movs	r3, #0
 8017b30:	4602      	mov	r2, r0
 8017b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b34:	6a21      	ldr	r1, [r4, #32]
 8017b36:	4628      	mov	r0, r5
 8017b38:	47b0      	blx	r6
 8017b3a:	1c43      	adds	r3, r0, #1
 8017b3c:	89a3      	ldrh	r3, [r4, #12]
 8017b3e:	d106      	bne.n	8017b4e <__sflush_r+0x66>
 8017b40:	6829      	ldr	r1, [r5, #0]
 8017b42:	291d      	cmp	r1, #29
 8017b44:	d82c      	bhi.n	8017ba0 <__sflush_r+0xb8>
 8017b46:	4a2a      	ldr	r2, [pc, #168]	; (8017bf0 <__sflush_r+0x108>)
 8017b48:	40ca      	lsrs	r2, r1
 8017b4a:	07d6      	lsls	r6, r2, #31
 8017b4c:	d528      	bpl.n	8017ba0 <__sflush_r+0xb8>
 8017b4e:	2200      	movs	r2, #0
 8017b50:	6062      	str	r2, [r4, #4]
 8017b52:	04d9      	lsls	r1, r3, #19
 8017b54:	6922      	ldr	r2, [r4, #16]
 8017b56:	6022      	str	r2, [r4, #0]
 8017b58:	d504      	bpl.n	8017b64 <__sflush_r+0x7c>
 8017b5a:	1c42      	adds	r2, r0, #1
 8017b5c:	d101      	bne.n	8017b62 <__sflush_r+0x7a>
 8017b5e:	682b      	ldr	r3, [r5, #0]
 8017b60:	b903      	cbnz	r3, 8017b64 <__sflush_r+0x7c>
 8017b62:	6560      	str	r0, [r4, #84]	; 0x54
 8017b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b66:	602f      	str	r7, [r5, #0]
 8017b68:	2900      	cmp	r1, #0
 8017b6a:	d0ca      	beq.n	8017b02 <__sflush_r+0x1a>
 8017b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017b70:	4299      	cmp	r1, r3
 8017b72:	d002      	beq.n	8017b7a <__sflush_r+0x92>
 8017b74:	4628      	mov	r0, r5
 8017b76:	f7ff fd1f 	bl	80175b8 <_free_r>
 8017b7a:	2000      	movs	r0, #0
 8017b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8017b7e:	e7c1      	b.n	8017b04 <__sflush_r+0x1c>
 8017b80:	6a21      	ldr	r1, [r4, #32]
 8017b82:	2301      	movs	r3, #1
 8017b84:	4628      	mov	r0, r5
 8017b86:	47b0      	blx	r6
 8017b88:	1c41      	adds	r1, r0, #1
 8017b8a:	d1c7      	bne.n	8017b1c <__sflush_r+0x34>
 8017b8c:	682b      	ldr	r3, [r5, #0]
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	d0c4      	beq.n	8017b1c <__sflush_r+0x34>
 8017b92:	2b1d      	cmp	r3, #29
 8017b94:	d001      	beq.n	8017b9a <__sflush_r+0xb2>
 8017b96:	2b16      	cmp	r3, #22
 8017b98:	d101      	bne.n	8017b9e <__sflush_r+0xb6>
 8017b9a:	602f      	str	r7, [r5, #0]
 8017b9c:	e7b1      	b.n	8017b02 <__sflush_r+0x1a>
 8017b9e:	89a3      	ldrh	r3, [r4, #12]
 8017ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017ba4:	81a3      	strh	r3, [r4, #12]
 8017ba6:	e7ad      	b.n	8017b04 <__sflush_r+0x1c>
 8017ba8:	690f      	ldr	r7, [r1, #16]
 8017baa:	2f00      	cmp	r7, #0
 8017bac:	d0a9      	beq.n	8017b02 <__sflush_r+0x1a>
 8017bae:	0793      	lsls	r3, r2, #30
 8017bb0:	680e      	ldr	r6, [r1, #0]
 8017bb2:	bf08      	it	eq
 8017bb4:	694b      	ldreq	r3, [r1, #20]
 8017bb6:	600f      	str	r7, [r1, #0]
 8017bb8:	bf18      	it	ne
 8017bba:	2300      	movne	r3, #0
 8017bbc:	eba6 0807 	sub.w	r8, r6, r7
 8017bc0:	608b      	str	r3, [r1, #8]
 8017bc2:	f1b8 0f00 	cmp.w	r8, #0
 8017bc6:	dd9c      	ble.n	8017b02 <__sflush_r+0x1a>
 8017bc8:	6a21      	ldr	r1, [r4, #32]
 8017bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017bcc:	4643      	mov	r3, r8
 8017bce:	463a      	mov	r2, r7
 8017bd0:	4628      	mov	r0, r5
 8017bd2:	47b0      	blx	r6
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	dc06      	bgt.n	8017be6 <__sflush_r+0xfe>
 8017bd8:	89a3      	ldrh	r3, [r4, #12]
 8017bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017bde:	81a3      	strh	r3, [r4, #12]
 8017be0:	f04f 30ff 	mov.w	r0, #4294967295
 8017be4:	e78e      	b.n	8017b04 <__sflush_r+0x1c>
 8017be6:	4407      	add	r7, r0
 8017be8:	eba8 0800 	sub.w	r8, r8, r0
 8017bec:	e7e9      	b.n	8017bc2 <__sflush_r+0xda>
 8017bee:	bf00      	nop
 8017bf0:	20400001 	.word	0x20400001

08017bf4 <_fflush_r>:
 8017bf4:	b538      	push	{r3, r4, r5, lr}
 8017bf6:	690b      	ldr	r3, [r1, #16]
 8017bf8:	4605      	mov	r5, r0
 8017bfa:	460c      	mov	r4, r1
 8017bfc:	b913      	cbnz	r3, 8017c04 <_fflush_r+0x10>
 8017bfe:	2500      	movs	r5, #0
 8017c00:	4628      	mov	r0, r5
 8017c02:	bd38      	pop	{r3, r4, r5, pc}
 8017c04:	b118      	cbz	r0, 8017c0e <_fflush_r+0x1a>
 8017c06:	6983      	ldr	r3, [r0, #24]
 8017c08:	b90b      	cbnz	r3, 8017c0e <_fflush_r+0x1a>
 8017c0a:	f000 f887 	bl	8017d1c <__sinit>
 8017c0e:	4b14      	ldr	r3, [pc, #80]	; (8017c60 <_fflush_r+0x6c>)
 8017c10:	429c      	cmp	r4, r3
 8017c12:	d11b      	bne.n	8017c4c <_fflush_r+0x58>
 8017c14:	686c      	ldr	r4, [r5, #4]
 8017c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d0ef      	beq.n	8017bfe <_fflush_r+0xa>
 8017c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017c20:	07d0      	lsls	r0, r2, #31
 8017c22:	d404      	bmi.n	8017c2e <_fflush_r+0x3a>
 8017c24:	0599      	lsls	r1, r3, #22
 8017c26:	d402      	bmi.n	8017c2e <_fflush_r+0x3a>
 8017c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c2a:	f000 f915 	bl	8017e58 <__retarget_lock_acquire_recursive>
 8017c2e:	4628      	mov	r0, r5
 8017c30:	4621      	mov	r1, r4
 8017c32:	f7ff ff59 	bl	8017ae8 <__sflush_r>
 8017c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017c38:	07da      	lsls	r2, r3, #31
 8017c3a:	4605      	mov	r5, r0
 8017c3c:	d4e0      	bmi.n	8017c00 <_fflush_r+0xc>
 8017c3e:	89a3      	ldrh	r3, [r4, #12]
 8017c40:	059b      	lsls	r3, r3, #22
 8017c42:	d4dd      	bmi.n	8017c00 <_fflush_r+0xc>
 8017c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017c46:	f000 f908 	bl	8017e5a <__retarget_lock_release_recursive>
 8017c4a:	e7d9      	b.n	8017c00 <_fflush_r+0xc>
 8017c4c:	4b05      	ldr	r3, [pc, #20]	; (8017c64 <_fflush_r+0x70>)
 8017c4e:	429c      	cmp	r4, r3
 8017c50:	d101      	bne.n	8017c56 <_fflush_r+0x62>
 8017c52:	68ac      	ldr	r4, [r5, #8]
 8017c54:	e7df      	b.n	8017c16 <_fflush_r+0x22>
 8017c56:	4b04      	ldr	r3, [pc, #16]	; (8017c68 <_fflush_r+0x74>)
 8017c58:	429c      	cmp	r4, r3
 8017c5a:	bf08      	it	eq
 8017c5c:	68ec      	ldreq	r4, [r5, #12]
 8017c5e:	e7da      	b.n	8017c16 <_fflush_r+0x22>
 8017c60:	080228a4 	.word	0x080228a4
 8017c64:	080228c4 	.word	0x080228c4
 8017c68:	08022884 	.word	0x08022884

08017c6c <std>:
 8017c6c:	2300      	movs	r3, #0
 8017c6e:	b510      	push	{r4, lr}
 8017c70:	4604      	mov	r4, r0
 8017c72:	e9c0 3300 	strd	r3, r3, [r0]
 8017c76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017c7a:	6083      	str	r3, [r0, #8]
 8017c7c:	8181      	strh	r1, [r0, #12]
 8017c7e:	6643      	str	r3, [r0, #100]	; 0x64
 8017c80:	81c2      	strh	r2, [r0, #14]
 8017c82:	6183      	str	r3, [r0, #24]
 8017c84:	4619      	mov	r1, r3
 8017c86:	2208      	movs	r2, #8
 8017c88:	305c      	adds	r0, #92	; 0x5c
 8017c8a:	f7fd f8e3 	bl	8014e54 <memset>
 8017c8e:	4b05      	ldr	r3, [pc, #20]	; (8017ca4 <std+0x38>)
 8017c90:	6263      	str	r3, [r4, #36]	; 0x24
 8017c92:	4b05      	ldr	r3, [pc, #20]	; (8017ca8 <std+0x3c>)
 8017c94:	62a3      	str	r3, [r4, #40]	; 0x28
 8017c96:	4b05      	ldr	r3, [pc, #20]	; (8017cac <std+0x40>)
 8017c98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017c9a:	4b05      	ldr	r3, [pc, #20]	; (8017cb0 <std+0x44>)
 8017c9c:	6224      	str	r4, [r4, #32]
 8017c9e:	6323      	str	r3, [r4, #48]	; 0x30
 8017ca0:	bd10      	pop	{r4, pc}
 8017ca2:	bf00      	nop
 8017ca4:	08017fbd 	.word	0x08017fbd
 8017ca8:	08017fdf 	.word	0x08017fdf
 8017cac:	08018017 	.word	0x08018017
 8017cb0:	0801803b 	.word	0x0801803b

08017cb4 <_cleanup_r>:
 8017cb4:	4901      	ldr	r1, [pc, #4]	; (8017cbc <_cleanup_r+0x8>)
 8017cb6:	f000 b8af 	b.w	8017e18 <_fwalk_reent>
 8017cba:	bf00      	nop
 8017cbc:	08017bf5 	.word	0x08017bf5

08017cc0 <__sfmoreglue>:
 8017cc0:	b570      	push	{r4, r5, r6, lr}
 8017cc2:	1e4a      	subs	r2, r1, #1
 8017cc4:	2568      	movs	r5, #104	; 0x68
 8017cc6:	4355      	muls	r5, r2
 8017cc8:	460e      	mov	r6, r1
 8017cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017cce:	f7ff f88b 	bl	8016de8 <_malloc_r>
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	b140      	cbz	r0, 8017ce8 <__sfmoreglue+0x28>
 8017cd6:	2100      	movs	r1, #0
 8017cd8:	e9c0 1600 	strd	r1, r6, [r0]
 8017cdc:	300c      	adds	r0, #12
 8017cde:	60a0      	str	r0, [r4, #8]
 8017ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017ce4:	f7fd f8b6 	bl	8014e54 <memset>
 8017ce8:	4620      	mov	r0, r4
 8017cea:	bd70      	pop	{r4, r5, r6, pc}

08017cec <__sfp_lock_acquire>:
 8017cec:	4801      	ldr	r0, [pc, #4]	; (8017cf4 <__sfp_lock_acquire+0x8>)
 8017cee:	f000 b8b3 	b.w	8017e58 <__retarget_lock_acquire_recursive>
 8017cf2:	bf00      	nop
 8017cf4:	2000882c 	.word	0x2000882c

08017cf8 <__sfp_lock_release>:
 8017cf8:	4801      	ldr	r0, [pc, #4]	; (8017d00 <__sfp_lock_release+0x8>)
 8017cfa:	f000 b8ae 	b.w	8017e5a <__retarget_lock_release_recursive>
 8017cfe:	bf00      	nop
 8017d00:	2000882c 	.word	0x2000882c

08017d04 <__sinit_lock_acquire>:
 8017d04:	4801      	ldr	r0, [pc, #4]	; (8017d0c <__sinit_lock_acquire+0x8>)
 8017d06:	f000 b8a7 	b.w	8017e58 <__retarget_lock_acquire_recursive>
 8017d0a:	bf00      	nop
 8017d0c:	20008827 	.word	0x20008827

08017d10 <__sinit_lock_release>:
 8017d10:	4801      	ldr	r0, [pc, #4]	; (8017d18 <__sinit_lock_release+0x8>)
 8017d12:	f000 b8a2 	b.w	8017e5a <__retarget_lock_release_recursive>
 8017d16:	bf00      	nop
 8017d18:	20008827 	.word	0x20008827

08017d1c <__sinit>:
 8017d1c:	b510      	push	{r4, lr}
 8017d1e:	4604      	mov	r4, r0
 8017d20:	f7ff fff0 	bl	8017d04 <__sinit_lock_acquire>
 8017d24:	69a3      	ldr	r3, [r4, #24]
 8017d26:	b11b      	cbz	r3, 8017d30 <__sinit+0x14>
 8017d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d2c:	f7ff bff0 	b.w	8017d10 <__sinit_lock_release>
 8017d30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017d34:	6523      	str	r3, [r4, #80]	; 0x50
 8017d36:	4b13      	ldr	r3, [pc, #76]	; (8017d84 <__sinit+0x68>)
 8017d38:	4a13      	ldr	r2, [pc, #76]	; (8017d88 <__sinit+0x6c>)
 8017d3a:	681b      	ldr	r3, [r3, #0]
 8017d3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8017d3e:	42a3      	cmp	r3, r4
 8017d40:	bf04      	itt	eq
 8017d42:	2301      	moveq	r3, #1
 8017d44:	61a3      	streq	r3, [r4, #24]
 8017d46:	4620      	mov	r0, r4
 8017d48:	f000 f820 	bl	8017d8c <__sfp>
 8017d4c:	6060      	str	r0, [r4, #4]
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f000 f81c 	bl	8017d8c <__sfp>
 8017d54:	60a0      	str	r0, [r4, #8]
 8017d56:	4620      	mov	r0, r4
 8017d58:	f000 f818 	bl	8017d8c <__sfp>
 8017d5c:	2200      	movs	r2, #0
 8017d5e:	60e0      	str	r0, [r4, #12]
 8017d60:	2104      	movs	r1, #4
 8017d62:	6860      	ldr	r0, [r4, #4]
 8017d64:	f7ff ff82 	bl	8017c6c <std>
 8017d68:	68a0      	ldr	r0, [r4, #8]
 8017d6a:	2201      	movs	r2, #1
 8017d6c:	2109      	movs	r1, #9
 8017d6e:	f7ff ff7d 	bl	8017c6c <std>
 8017d72:	68e0      	ldr	r0, [r4, #12]
 8017d74:	2202      	movs	r2, #2
 8017d76:	2112      	movs	r1, #18
 8017d78:	f7ff ff78 	bl	8017c6c <std>
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	61a3      	str	r3, [r4, #24]
 8017d80:	e7d2      	b.n	8017d28 <__sinit+0xc>
 8017d82:	bf00      	nop
 8017d84:	080224ac 	.word	0x080224ac
 8017d88:	08017cb5 	.word	0x08017cb5

08017d8c <__sfp>:
 8017d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d8e:	4607      	mov	r7, r0
 8017d90:	f7ff ffac 	bl	8017cec <__sfp_lock_acquire>
 8017d94:	4b1e      	ldr	r3, [pc, #120]	; (8017e10 <__sfp+0x84>)
 8017d96:	681e      	ldr	r6, [r3, #0]
 8017d98:	69b3      	ldr	r3, [r6, #24]
 8017d9a:	b913      	cbnz	r3, 8017da2 <__sfp+0x16>
 8017d9c:	4630      	mov	r0, r6
 8017d9e:	f7ff ffbd 	bl	8017d1c <__sinit>
 8017da2:	3648      	adds	r6, #72	; 0x48
 8017da4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017da8:	3b01      	subs	r3, #1
 8017daa:	d503      	bpl.n	8017db4 <__sfp+0x28>
 8017dac:	6833      	ldr	r3, [r6, #0]
 8017dae:	b30b      	cbz	r3, 8017df4 <__sfp+0x68>
 8017db0:	6836      	ldr	r6, [r6, #0]
 8017db2:	e7f7      	b.n	8017da4 <__sfp+0x18>
 8017db4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017db8:	b9d5      	cbnz	r5, 8017df0 <__sfp+0x64>
 8017dba:	4b16      	ldr	r3, [pc, #88]	; (8017e14 <__sfp+0x88>)
 8017dbc:	60e3      	str	r3, [r4, #12]
 8017dbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017dc2:	6665      	str	r5, [r4, #100]	; 0x64
 8017dc4:	f000 f847 	bl	8017e56 <__retarget_lock_init_recursive>
 8017dc8:	f7ff ff96 	bl	8017cf8 <__sfp_lock_release>
 8017dcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017dd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017dd4:	6025      	str	r5, [r4, #0]
 8017dd6:	61a5      	str	r5, [r4, #24]
 8017dd8:	2208      	movs	r2, #8
 8017dda:	4629      	mov	r1, r5
 8017ddc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017de0:	f7fd f838 	bl	8014e54 <memset>
 8017de4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017de8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017dec:	4620      	mov	r0, r4
 8017dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017df0:	3468      	adds	r4, #104	; 0x68
 8017df2:	e7d9      	b.n	8017da8 <__sfp+0x1c>
 8017df4:	2104      	movs	r1, #4
 8017df6:	4638      	mov	r0, r7
 8017df8:	f7ff ff62 	bl	8017cc0 <__sfmoreglue>
 8017dfc:	4604      	mov	r4, r0
 8017dfe:	6030      	str	r0, [r6, #0]
 8017e00:	2800      	cmp	r0, #0
 8017e02:	d1d5      	bne.n	8017db0 <__sfp+0x24>
 8017e04:	f7ff ff78 	bl	8017cf8 <__sfp_lock_release>
 8017e08:	230c      	movs	r3, #12
 8017e0a:	603b      	str	r3, [r7, #0]
 8017e0c:	e7ee      	b.n	8017dec <__sfp+0x60>
 8017e0e:	bf00      	nop
 8017e10:	080224ac 	.word	0x080224ac
 8017e14:	ffff0001 	.word	0xffff0001

08017e18 <_fwalk_reent>:
 8017e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017e1c:	4606      	mov	r6, r0
 8017e1e:	4688      	mov	r8, r1
 8017e20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017e24:	2700      	movs	r7, #0
 8017e26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017e2a:	f1b9 0901 	subs.w	r9, r9, #1
 8017e2e:	d505      	bpl.n	8017e3c <_fwalk_reent+0x24>
 8017e30:	6824      	ldr	r4, [r4, #0]
 8017e32:	2c00      	cmp	r4, #0
 8017e34:	d1f7      	bne.n	8017e26 <_fwalk_reent+0xe>
 8017e36:	4638      	mov	r0, r7
 8017e38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017e3c:	89ab      	ldrh	r3, [r5, #12]
 8017e3e:	2b01      	cmp	r3, #1
 8017e40:	d907      	bls.n	8017e52 <_fwalk_reent+0x3a>
 8017e42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017e46:	3301      	adds	r3, #1
 8017e48:	d003      	beq.n	8017e52 <_fwalk_reent+0x3a>
 8017e4a:	4629      	mov	r1, r5
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	47c0      	blx	r8
 8017e50:	4307      	orrs	r7, r0
 8017e52:	3568      	adds	r5, #104	; 0x68
 8017e54:	e7e9      	b.n	8017e2a <_fwalk_reent+0x12>

08017e56 <__retarget_lock_init_recursive>:
 8017e56:	4770      	bx	lr

08017e58 <__retarget_lock_acquire_recursive>:
 8017e58:	4770      	bx	lr

08017e5a <__retarget_lock_release_recursive>:
 8017e5a:	4770      	bx	lr

08017e5c <__swhatbuf_r>:
 8017e5c:	b570      	push	{r4, r5, r6, lr}
 8017e5e:	460e      	mov	r6, r1
 8017e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017e64:	2900      	cmp	r1, #0
 8017e66:	b096      	sub	sp, #88	; 0x58
 8017e68:	4614      	mov	r4, r2
 8017e6a:	461d      	mov	r5, r3
 8017e6c:	da07      	bge.n	8017e7e <__swhatbuf_r+0x22>
 8017e6e:	2300      	movs	r3, #0
 8017e70:	602b      	str	r3, [r5, #0]
 8017e72:	89b3      	ldrh	r3, [r6, #12]
 8017e74:	061a      	lsls	r2, r3, #24
 8017e76:	d410      	bmi.n	8017e9a <__swhatbuf_r+0x3e>
 8017e78:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017e7c:	e00e      	b.n	8017e9c <__swhatbuf_r+0x40>
 8017e7e:	466a      	mov	r2, sp
 8017e80:	f000 f902 	bl	8018088 <_fstat_r>
 8017e84:	2800      	cmp	r0, #0
 8017e86:	dbf2      	blt.n	8017e6e <__swhatbuf_r+0x12>
 8017e88:	9a01      	ldr	r2, [sp, #4]
 8017e8a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017e8e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017e92:	425a      	negs	r2, r3
 8017e94:	415a      	adcs	r2, r3
 8017e96:	602a      	str	r2, [r5, #0]
 8017e98:	e7ee      	b.n	8017e78 <__swhatbuf_r+0x1c>
 8017e9a:	2340      	movs	r3, #64	; 0x40
 8017e9c:	2000      	movs	r0, #0
 8017e9e:	6023      	str	r3, [r4, #0]
 8017ea0:	b016      	add	sp, #88	; 0x58
 8017ea2:	bd70      	pop	{r4, r5, r6, pc}

08017ea4 <__smakebuf_r>:
 8017ea4:	898b      	ldrh	r3, [r1, #12]
 8017ea6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017ea8:	079d      	lsls	r5, r3, #30
 8017eaa:	4606      	mov	r6, r0
 8017eac:	460c      	mov	r4, r1
 8017eae:	d507      	bpl.n	8017ec0 <__smakebuf_r+0x1c>
 8017eb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017eb4:	6023      	str	r3, [r4, #0]
 8017eb6:	6123      	str	r3, [r4, #16]
 8017eb8:	2301      	movs	r3, #1
 8017eba:	6163      	str	r3, [r4, #20]
 8017ebc:	b002      	add	sp, #8
 8017ebe:	bd70      	pop	{r4, r5, r6, pc}
 8017ec0:	ab01      	add	r3, sp, #4
 8017ec2:	466a      	mov	r2, sp
 8017ec4:	f7ff ffca 	bl	8017e5c <__swhatbuf_r>
 8017ec8:	9900      	ldr	r1, [sp, #0]
 8017eca:	4605      	mov	r5, r0
 8017ecc:	4630      	mov	r0, r6
 8017ece:	f7fe ff8b 	bl	8016de8 <_malloc_r>
 8017ed2:	b948      	cbnz	r0, 8017ee8 <__smakebuf_r+0x44>
 8017ed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017ed8:	059a      	lsls	r2, r3, #22
 8017eda:	d4ef      	bmi.n	8017ebc <__smakebuf_r+0x18>
 8017edc:	f023 0303 	bic.w	r3, r3, #3
 8017ee0:	f043 0302 	orr.w	r3, r3, #2
 8017ee4:	81a3      	strh	r3, [r4, #12]
 8017ee6:	e7e3      	b.n	8017eb0 <__smakebuf_r+0xc>
 8017ee8:	4b0d      	ldr	r3, [pc, #52]	; (8017f20 <__smakebuf_r+0x7c>)
 8017eea:	62b3      	str	r3, [r6, #40]	; 0x28
 8017eec:	89a3      	ldrh	r3, [r4, #12]
 8017eee:	6020      	str	r0, [r4, #0]
 8017ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ef4:	81a3      	strh	r3, [r4, #12]
 8017ef6:	9b00      	ldr	r3, [sp, #0]
 8017ef8:	6163      	str	r3, [r4, #20]
 8017efa:	9b01      	ldr	r3, [sp, #4]
 8017efc:	6120      	str	r0, [r4, #16]
 8017efe:	b15b      	cbz	r3, 8017f18 <__smakebuf_r+0x74>
 8017f00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f04:	4630      	mov	r0, r6
 8017f06:	f000 f8d1 	bl	80180ac <_isatty_r>
 8017f0a:	b128      	cbz	r0, 8017f18 <__smakebuf_r+0x74>
 8017f0c:	89a3      	ldrh	r3, [r4, #12]
 8017f0e:	f023 0303 	bic.w	r3, r3, #3
 8017f12:	f043 0301 	orr.w	r3, r3, #1
 8017f16:	81a3      	strh	r3, [r4, #12]
 8017f18:	89a0      	ldrh	r0, [r4, #12]
 8017f1a:	4305      	orrs	r5, r0
 8017f1c:	81a5      	strh	r5, [r4, #12]
 8017f1e:	e7cd      	b.n	8017ebc <__smakebuf_r+0x18>
 8017f20:	08017cb5 	.word	0x08017cb5

08017f24 <_malloc_usable_size_r>:
 8017f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017f28:	1f18      	subs	r0, r3, #4
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	bfbc      	itt	lt
 8017f2e:	580b      	ldrlt	r3, [r1, r0]
 8017f30:	18c0      	addlt	r0, r0, r3
 8017f32:	4770      	bx	lr

08017f34 <_raise_r>:
 8017f34:	291f      	cmp	r1, #31
 8017f36:	b538      	push	{r3, r4, r5, lr}
 8017f38:	4604      	mov	r4, r0
 8017f3a:	460d      	mov	r5, r1
 8017f3c:	d904      	bls.n	8017f48 <_raise_r+0x14>
 8017f3e:	2316      	movs	r3, #22
 8017f40:	6003      	str	r3, [r0, #0]
 8017f42:	f04f 30ff 	mov.w	r0, #4294967295
 8017f46:	bd38      	pop	{r3, r4, r5, pc}
 8017f48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017f4a:	b112      	cbz	r2, 8017f52 <_raise_r+0x1e>
 8017f4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017f50:	b94b      	cbnz	r3, 8017f66 <_raise_r+0x32>
 8017f52:	4620      	mov	r0, r4
 8017f54:	f000 f830 	bl	8017fb8 <_getpid_r>
 8017f58:	462a      	mov	r2, r5
 8017f5a:	4601      	mov	r1, r0
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017f62:	f000 b817 	b.w	8017f94 <_kill_r>
 8017f66:	2b01      	cmp	r3, #1
 8017f68:	d00a      	beq.n	8017f80 <_raise_r+0x4c>
 8017f6a:	1c59      	adds	r1, r3, #1
 8017f6c:	d103      	bne.n	8017f76 <_raise_r+0x42>
 8017f6e:	2316      	movs	r3, #22
 8017f70:	6003      	str	r3, [r0, #0]
 8017f72:	2001      	movs	r0, #1
 8017f74:	e7e7      	b.n	8017f46 <_raise_r+0x12>
 8017f76:	2400      	movs	r4, #0
 8017f78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017f7c:	4628      	mov	r0, r5
 8017f7e:	4798      	blx	r3
 8017f80:	2000      	movs	r0, #0
 8017f82:	e7e0      	b.n	8017f46 <_raise_r+0x12>

08017f84 <raise>:
 8017f84:	4b02      	ldr	r3, [pc, #8]	; (8017f90 <raise+0xc>)
 8017f86:	4601      	mov	r1, r0
 8017f88:	6818      	ldr	r0, [r3, #0]
 8017f8a:	f7ff bfd3 	b.w	8017f34 <_raise_r>
 8017f8e:	bf00      	nop
 8017f90:	20000374 	.word	0x20000374

08017f94 <_kill_r>:
 8017f94:	b538      	push	{r3, r4, r5, lr}
 8017f96:	4d07      	ldr	r5, [pc, #28]	; (8017fb4 <_kill_r+0x20>)
 8017f98:	2300      	movs	r3, #0
 8017f9a:	4604      	mov	r4, r0
 8017f9c:	4608      	mov	r0, r1
 8017f9e:	4611      	mov	r1, r2
 8017fa0:	602b      	str	r3, [r5, #0]
 8017fa2:	f7e9 f971 	bl	8001288 <_kill>
 8017fa6:	1c43      	adds	r3, r0, #1
 8017fa8:	d102      	bne.n	8017fb0 <_kill_r+0x1c>
 8017faa:	682b      	ldr	r3, [r5, #0]
 8017fac:	b103      	cbz	r3, 8017fb0 <_kill_r+0x1c>
 8017fae:	6023      	str	r3, [r4, #0]
 8017fb0:	bd38      	pop	{r3, r4, r5, pc}
 8017fb2:	bf00      	nop
 8017fb4:	20008820 	.word	0x20008820

08017fb8 <_getpid_r>:
 8017fb8:	f7e9 b95e 	b.w	8001278 <_getpid>

08017fbc <__sread>:
 8017fbc:	b510      	push	{r4, lr}
 8017fbe:	460c      	mov	r4, r1
 8017fc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017fc4:	f000 f894 	bl	80180f0 <_read_r>
 8017fc8:	2800      	cmp	r0, #0
 8017fca:	bfab      	itete	ge
 8017fcc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017fce:	89a3      	ldrhlt	r3, [r4, #12]
 8017fd0:	181b      	addge	r3, r3, r0
 8017fd2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017fd6:	bfac      	ite	ge
 8017fd8:	6563      	strge	r3, [r4, #84]	; 0x54
 8017fda:	81a3      	strhlt	r3, [r4, #12]
 8017fdc:	bd10      	pop	{r4, pc}

08017fde <__swrite>:
 8017fde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017fe2:	461f      	mov	r7, r3
 8017fe4:	898b      	ldrh	r3, [r1, #12]
 8017fe6:	05db      	lsls	r3, r3, #23
 8017fe8:	4605      	mov	r5, r0
 8017fea:	460c      	mov	r4, r1
 8017fec:	4616      	mov	r6, r2
 8017fee:	d505      	bpl.n	8017ffc <__swrite+0x1e>
 8017ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ff4:	2302      	movs	r3, #2
 8017ff6:	2200      	movs	r2, #0
 8017ff8:	f000 f868 	bl	80180cc <_lseek_r>
 8017ffc:	89a3      	ldrh	r3, [r4, #12]
 8017ffe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018002:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018006:	81a3      	strh	r3, [r4, #12]
 8018008:	4632      	mov	r2, r6
 801800a:	463b      	mov	r3, r7
 801800c:	4628      	mov	r0, r5
 801800e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018012:	f000 b817 	b.w	8018044 <_write_r>

08018016 <__sseek>:
 8018016:	b510      	push	{r4, lr}
 8018018:	460c      	mov	r4, r1
 801801a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801801e:	f000 f855 	bl	80180cc <_lseek_r>
 8018022:	1c43      	adds	r3, r0, #1
 8018024:	89a3      	ldrh	r3, [r4, #12]
 8018026:	bf15      	itete	ne
 8018028:	6560      	strne	r0, [r4, #84]	; 0x54
 801802a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801802e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018032:	81a3      	strheq	r3, [r4, #12]
 8018034:	bf18      	it	ne
 8018036:	81a3      	strhne	r3, [r4, #12]
 8018038:	bd10      	pop	{r4, pc}

0801803a <__sclose>:
 801803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801803e:	f000 b813 	b.w	8018068 <_close_r>
	...

08018044 <_write_r>:
 8018044:	b538      	push	{r3, r4, r5, lr}
 8018046:	4d07      	ldr	r5, [pc, #28]	; (8018064 <_write_r+0x20>)
 8018048:	4604      	mov	r4, r0
 801804a:	4608      	mov	r0, r1
 801804c:	4611      	mov	r1, r2
 801804e:	2200      	movs	r2, #0
 8018050:	602a      	str	r2, [r5, #0]
 8018052:	461a      	mov	r2, r3
 8018054:	f7e9 f94f 	bl	80012f6 <_write>
 8018058:	1c43      	adds	r3, r0, #1
 801805a:	d102      	bne.n	8018062 <_write_r+0x1e>
 801805c:	682b      	ldr	r3, [r5, #0]
 801805e:	b103      	cbz	r3, 8018062 <_write_r+0x1e>
 8018060:	6023      	str	r3, [r4, #0]
 8018062:	bd38      	pop	{r3, r4, r5, pc}
 8018064:	20008820 	.word	0x20008820

08018068 <_close_r>:
 8018068:	b538      	push	{r3, r4, r5, lr}
 801806a:	4d06      	ldr	r5, [pc, #24]	; (8018084 <_close_r+0x1c>)
 801806c:	2300      	movs	r3, #0
 801806e:	4604      	mov	r4, r0
 8018070:	4608      	mov	r0, r1
 8018072:	602b      	str	r3, [r5, #0]
 8018074:	f7e9 f95b 	bl	800132e <_close>
 8018078:	1c43      	adds	r3, r0, #1
 801807a:	d102      	bne.n	8018082 <_close_r+0x1a>
 801807c:	682b      	ldr	r3, [r5, #0]
 801807e:	b103      	cbz	r3, 8018082 <_close_r+0x1a>
 8018080:	6023      	str	r3, [r4, #0]
 8018082:	bd38      	pop	{r3, r4, r5, pc}
 8018084:	20008820 	.word	0x20008820

08018088 <_fstat_r>:
 8018088:	b538      	push	{r3, r4, r5, lr}
 801808a:	4d07      	ldr	r5, [pc, #28]	; (80180a8 <_fstat_r+0x20>)
 801808c:	2300      	movs	r3, #0
 801808e:	4604      	mov	r4, r0
 8018090:	4608      	mov	r0, r1
 8018092:	4611      	mov	r1, r2
 8018094:	602b      	str	r3, [r5, #0]
 8018096:	f7e9 f956 	bl	8001346 <_fstat>
 801809a:	1c43      	adds	r3, r0, #1
 801809c:	d102      	bne.n	80180a4 <_fstat_r+0x1c>
 801809e:	682b      	ldr	r3, [r5, #0]
 80180a0:	b103      	cbz	r3, 80180a4 <_fstat_r+0x1c>
 80180a2:	6023      	str	r3, [r4, #0]
 80180a4:	bd38      	pop	{r3, r4, r5, pc}
 80180a6:	bf00      	nop
 80180a8:	20008820 	.word	0x20008820

080180ac <_isatty_r>:
 80180ac:	b538      	push	{r3, r4, r5, lr}
 80180ae:	4d06      	ldr	r5, [pc, #24]	; (80180c8 <_isatty_r+0x1c>)
 80180b0:	2300      	movs	r3, #0
 80180b2:	4604      	mov	r4, r0
 80180b4:	4608      	mov	r0, r1
 80180b6:	602b      	str	r3, [r5, #0]
 80180b8:	f7e9 f955 	bl	8001366 <_isatty>
 80180bc:	1c43      	adds	r3, r0, #1
 80180be:	d102      	bne.n	80180c6 <_isatty_r+0x1a>
 80180c0:	682b      	ldr	r3, [r5, #0]
 80180c2:	b103      	cbz	r3, 80180c6 <_isatty_r+0x1a>
 80180c4:	6023      	str	r3, [r4, #0]
 80180c6:	bd38      	pop	{r3, r4, r5, pc}
 80180c8:	20008820 	.word	0x20008820

080180cc <_lseek_r>:
 80180cc:	b538      	push	{r3, r4, r5, lr}
 80180ce:	4d07      	ldr	r5, [pc, #28]	; (80180ec <_lseek_r+0x20>)
 80180d0:	4604      	mov	r4, r0
 80180d2:	4608      	mov	r0, r1
 80180d4:	4611      	mov	r1, r2
 80180d6:	2200      	movs	r2, #0
 80180d8:	602a      	str	r2, [r5, #0]
 80180da:	461a      	mov	r2, r3
 80180dc:	f7e9 f94e 	bl	800137c <_lseek>
 80180e0:	1c43      	adds	r3, r0, #1
 80180e2:	d102      	bne.n	80180ea <_lseek_r+0x1e>
 80180e4:	682b      	ldr	r3, [r5, #0]
 80180e6:	b103      	cbz	r3, 80180ea <_lseek_r+0x1e>
 80180e8:	6023      	str	r3, [r4, #0]
 80180ea:	bd38      	pop	{r3, r4, r5, pc}
 80180ec:	20008820 	.word	0x20008820

080180f0 <_read_r>:
 80180f0:	b538      	push	{r3, r4, r5, lr}
 80180f2:	4d07      	ldr	r5, [pc, #28]	; (8018110 <_read_r+0x20>)
 80180f4:	4604      	mov	r4, r0
 80180f6:	4608      	mov	r0, r1
 80180f8:	4611      	mov	r1, r2
 80180fa:	2200      	movs	r2, #0
 80180fc:	602a      	str	r2, [r5, #0]
 80180fe:	461a      	mov	r2, r3
 8018100:	f7e9 f8dc 	bl	80012bc <_read>
 8018104:	1c43      	adds	r3, r0, #1
 8018106:	d102      	bne.n	801810e <_read_r+0x1e>
 8018108:	682b      	ldr	r3, [r5, #0]
 801810a:	b103      	cbz	r3, 801810e <_read_r+0x1e>
 801810c:	6023      	str	r3, [r4, #0]
 801810e:	bd38      	pop	{r3, r4, r5, pc}
 8018110:	20008820 	.word	0x20008820

08018114 <_init>:
 8018114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018116:	bf00      	nop
 8018118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801811a:	bc08      	pop	{r3}
 801811c:	469e      	mov	lr, r3
 801811e:	4770      	bx	lr

08018120 <_fini>:
 8018120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018122:	bf00      	nop
 8018124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018126:	bc08      	pop	{r3}
 8018128:	469e      	mov	lr, r3
 801812a:	4770      	bx	lr

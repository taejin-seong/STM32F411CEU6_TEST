
stm32f411_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018230  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a8ac  08018400  08018400  00028400  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08022cac  08022cac  00040544  2**0
                  CONTENTS
  4 .ARM          00000008  08022cac  08022cac  00032cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022cb4  08022cb4  00040544  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022cb4  08022cb4  00032cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022cb8  08022cb8  00032cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000544  20000000  08022cbc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000083bc  20000580  08023200  00040580  2**6
                  ALLOC
 10 ._user_heap_stack 00000604  2000893c  08023200  0004893c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00040544  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004465f  00000000  00000000  00040574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008d07  00000000  00000000  00084bd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002180  00000000  00000000  0008d8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e10  00000000  00000000  0008fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023917  00000000  00000000  00091870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00036b37  00000000  00000000  000b5187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009778d  00000000  00000000  000ebcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018344b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009a7c  00000000  00000000  001834a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000580 	.word	0x20000580
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080183b8 	.word	0x080183b8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000584 	.word	0x20000584
 80001dc:	080183b8 	.word	0x080183b8

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2uiz>:
 8000b88:	004a      	lsls	r2, r1, #1
 8000b8a:	d211      	bcs.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d211      	bcs.n	8000bb6 <__aeabi_d2uiz+0x2e>
 8000b92:	d50d      	bpl.n	8000bb0 <__aeabi_d2uiz+0x28>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d40e      	bmi.n	8000bbc <__aeabi_d2uiz+0x34>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_d2uiz+0x3a>
 8000bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0000 	mov.w	r0, #0
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9a4 	b.w	8000fc8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f83c 	bl	8000d04 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff33 	bl	8000b0c <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__aeabi_d2ulz+0x34>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca9 	bl	8000628 <__aeabi_dmul>
 8000cd6:	f7ff ff57 	bl	8000b88 <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc2a 	bl	8000534 <__aeabi_ui2d>
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <__aeabi_d2ulz+0x38>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f7ff fca0 	bl	8000628 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fae2 	bl	80002b8 <__aeabi_dsub>
 8000cf4:	f7ff ff48 	bl	8000b88 <__aeabi_d2uiz>
 8000cf8:	4621      	mov	r1, r4
 8000cfa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cfc:	3df00000 	.word	0x3df00000
 8000d00:	41f00000 	.word	0x41f00000

08000d04 <__udivmoddi4>:
 8000d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d08:	9d08      	ldr	r5, [sp, #32]
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	468c      	mov	ip, r1
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 8083 	bne.w	8000e1a <__udivmoddi4+0x116>
 8000d14:	428a      	cmp	r2, r1
 8000d16:	4617      	mov	r7, r2
 8000d18:	d947      	bls.n	8000daa <__udivmoddi4+0xa6>
 8000d1a:	fab2 f282 	clz	r2, r2
 8000d1e:	b142      	cbz	r2, 8000d32 <__udivmoddi4+0x2e>
 8000d20:	f1c2 0020 	rsb	r0, r2, #32
 8000d24:	fa24 f000 	lsr.w	r0, r4, r0
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	4097      	lsls	r7, r2
 8000d2c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d30:	4094      	lsls	r4, r2
 8000d32:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d36:	0c23      	lsrs	r3, r4, #16
 8000d38:	fbbc f6f8 	udiv	r6, ip, r8
 8000d3c:	fa1f fe87 	uxth.w	lr, r7
 8000d40:	fb08 c116 	mls	r1, r8, r6, ip
 8000d44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d48:	fb06 f10e 	mul.w	r1, r6, lr
 8000d4c:	4299      	cmp	r1, r3
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x60>
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d56:	f080 8119 	bcs.w	8000f8c <__udivmoddi4+0x288>
 8000d5a:	4299      	cmp	r1, r3
 8000d5c:	f240 8116 	bls.w	8000f8c <__udivmoddi4+0x288>
 8000d60:	3e02      	subs	r6, #2
 8000d62:	443b      	add	r3, r7
 8000d64:	1a5b      	subs	r3, r3, r1
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d6c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	45a6      	cmp	lr, r4
 8000d7a:	d909      	bls.n	8000d90 <__udivmoddi4+0x8c>
 8000d7c:	193c      	adds	r4, r7, r4
 8000d7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d82:	f080 8105 	bcs.w	8000f90 <__udivmoddi4+0x28c>
 8000d86:	45a6      	cmp	lr, r4
 8000d88:	f240 8102 	bls.w	8000f90 <__udivmoddi4+0x28c>
 8000d8c:	3802      	subs	r0, #2
 8000d8e:	443c      	add	r4, r7
 8000d90:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d94:	eba4 040e 	sub.w	r4, r4, lr
 8000d98:	2600      	movs	r6, #0
 8000d9a:	b11d      	cbz	r5, 8000da4 <__udivmoddi4+0xa0>
 8000d9c:	40d4      	lsrs	r4, r2
 8000d9e:	2300      	movs	r3, #0
 8000da0:	e9c5 4300 	strd	r4, r3, [r5]
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	b902      	cbnz	r2, 8000dae <__udivmoddi4+0xaa>
 8000dac:	deff      	udf	#255	; 0xff
 8000dae:	fab2 f282 	clz	r2, r2
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d150      	bne.n	8000e58 <__udivmoddi4+0x154>
 8000db6:	1bcb      	subs	r3, r1, r7
 8000db8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbc:	fa1f f887 	uxth.w	r8, r7
 8000dc0:	2601      	movs	r6, #1
 8000dc2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000dc6:	0c21      	lsrs	r1, r4, #16
 8000dc8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dcc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dd0:	fb08 f30c 	mul.w	r3, r8, ip
 8000dd4:	428b      	cmp	r3, r1
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0xe4>
 8000dd8:	1879      	adds	r1, r7, r1
 8000dda:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0xe2>
 8000de0:	428b      	cmp	r3, r1
 8000de2:	f200 80e9 	bhi.w	8000fb8 <__udivmoddi4+0x2b4>
 8000de6:	4684      	mov	ip, r0
 8000de8:	1ac9      	subs	r1, r1, r3
 8000dea:	b2a3      	uxth	r3, r4
 8000dec:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000df4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000df8:	fb08 f800 	mul.w	r8, r8, r0
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	d907      	bls.n	8000e10 <__udivmoddi4+0x10c>
 8000e00:	193c      	adds	r4, r7, r4
 8000e02:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x10a>
 8000e08:	45a0      	cmp	r8, r4
 8000e0a:	f200 80d9 	bhi.w	8000fc0 <__udivmoddi4+0x2bc>
 8000e0e:	4618      	mov	r0, r3
 8000e10:	eba4 0408 	sub.w	r4, r4, r8
 8000e14:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e18:	e7bf      	b.n	8000d9a <__udivmoddi4+0x96>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d909      	bls.n	8000e32 <__udivmoddi4+0x12e>
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	f000 80b1 	beq.w	8000f86 <__udivmoddi4+0x282>
 8000e24:	2600      	movs	r6, #0
 8000e26:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	fab3 f683 	clz	r6, r3
 8000e36:	2e00      	cmp	r6, #0
 8000e38:	d14a      	bne.n	8000ed0 <__udivmoddi4+0x1cc>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d302      	bcc.n	8000e44 <__udivmoddi4+0x140>
 8000e3e:	4282      	cmp	r2, r0
 8000e40:	f200 80b8 	bhi.w	8000fb4 <__udivmoddi4+0x2b0>
 8000e44:	1a84      	subs	r4, r0, r2
 8000e46:	eb61 0103 	sbc.w	r1, r1, r3
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	468c      	mov	ip, r1
 8000e4e:	2d00      	cmp	r5, #0
 8000e50:	d0a8      	beq.n	8000da4 <__udivmoddi4+0xa0>
 8000e52:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e56:	e7a5      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000e58:	f1c2 0320 	rsb	r3, r2, #32
 8000e5c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e60:	4097      	lsls	r7, r2
 8000e62:	fa01 f002 	lsl.w	r0, r1, r2
 8000e66:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e6a:	40d9      	lsrs	r1, r3
 8000e6c:	4330      	orrs	r0, r6
 8000e6e:	0c03      	lsrs	r3, r0, #16
 8000e70:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e74:	fa1f f887 	uxth.w	r8, r7
 8000e78:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e7c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e80:	fb06 f108 	mul.w	r1, r6, r8
 8000e84:	4299      	cmp	r1, r3
 8000e86:	fa04 f402 	lsl.w	r4, r4, r2
 8000e8a:	d909      	bls.n	8000ea0 <__udivmoddi4+0x19c>
 8000e8c:	18fb      	adds	r3, r7, r3
 8000e8e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e92:	f080 808d 	bcs.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e96:	4299      	cmp	r1, r3
 8000e98:	f240 808a 	bls.w	8000fb0 <__udivmoddi4+0x2ac>
 8000e9c:	3e02      	subs	r6, #2
 8000e9e:	443b      	add	r3, r7
 8000ea0:	1a5b      	subs	r3, r3, r1
 8000ea2:	b281      	uxth	r1, r0
 8000ea4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ea8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb0:	fb00 f308 	mul.w	r3, r0, r8
 8000eb4:	428b      	cmp	r3, r1
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x1c4>
 8000eb8:	1879      	adds	r1, r7, r1
 8000eba:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ebe:	d273      	bcs.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d971      	bls.n	8000fa8 <__udivmoddi4+0x2a4>
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	4439      	add	r1, r7
 8000ec8:	1acb      	subs	r3, r1, r3
 8000eca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ece:	e778      	b.n	8000dc2 <__udivmoddi4+0xbe>
 8000ed0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ed4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ed8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000edc:	431c      	orrs	r4, r3
 8000ede:	fa20 f70c 	lsr.w	r7, r0, ip
 8000ee2:	fa01 f306 	lsl.w	r3, r1, r6
 8000ee6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eea:	fa21 f10c 	lsr.w	r1, r1, ip
 8000eee:	431f      	orrs	r7, r3
 8000ef0:	0c3b      	lsrs	r3, r7, #16
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fa1f f884 	uxth.w	r8, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f02:	fb09 fa08 	mul.w	sl, r9, r8
 8000f06:	458a      	cmp	sl, r1
 8000f08:	fa02 f206 	lsl.w	r2, r2, r6
 8000f0c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f10:	d908      	bls.n	8000f24 <__udivmoddi4+0x220>
 8000f12:	1861      	adds	r1, r4, r1
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	d248      	bcs.n	8000fac <__udivmoddi4+0x2a8>
 8000f1a:	458a      	cmp	sl, r1
 8000f1c:	d946      	bls.n	8000fac <__udivmoddi4+0x2a8>
 8000f1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f22:	4421      	add	r1, r4
 8000f24:	eba1 010a 	sub.w	r1, r1, sl
 8000f28:	b2bf      	uxth	r7, r7
 8000f2a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f2e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f32:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f36:	fb00 f808 	mul.w	r8, r0, r8
 8000f3a:	45b8      	cmp	r8, r7
 8000f3c:	d907      	bls.n	8000f4e <__udivmoddi4+0x24a>
 8000f3e:	19e7      	adds	r7, r4, r7
 8000f40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f44:	d22e      	bcs.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f46:	45b8      	cmp	r8, r7
 8000f48:	d92c      	bls.n	8000fa4 <__udivmoddi4+0x2a0>
 8000f4a:	3802      	subs	r0, #2
 8000f4c:	4427      	add	r7, r4
 8000f4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f52:	eba7 0708 	sub.w	r7, r7, r8
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	454f      	cmp	r7, r9
 8000f5c:	46c6      	mov	lr, r8
 8000f5e:	4649      	mov	r1, r9
 8000f60:	d31a      	bcc.n	8000f98 <__udivmoddi4+0x294>
 8000f62:	d017      	beq.n	8000f94 <__udivmoddi4+0x290>
 8000f64:	b15d      	cbz	r5, 8000f7e <__udivmoddi4+0x27a>
 8000f66:	ebb3 020e 	subs.w	r2, r3, lr
 8000f6a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f6e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f72:	40f2      	lsrs	r2, r6
 8000f74:	ea4c 0202 	orr.w	r2, ip, r2
 8000f78:	40f7      	lsrs	r7, r6
 8000f7a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f7e:	2600      	movs	r6, #0
 8000f80:	4631      	mov	r1, r6
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	462e      	mov	r6, r5
 8000f88:	4628      	mov	r0, r5
 8000f8a:	e70b      	b.n	8000da4 <__udivmoddi4+0xa0>
 8000f8c:	4606      	mov	r6, r0
 8000f8e:	e6e9      	b.n	8000d64 <__udivmoddi4+0x60>
 8000f90:	4618      	mov	r0, r3
 8000f92:	e6fd      	b.n	8000d90 <__udivmoddi4+0x8c>
 8000f94:	4543      	cmp	r3, r8
 8000f96:	d2e5      	bcs.n	8000f64 <__udivmoddi4+0x260>
 8000f98:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f9c:	eb69 0104 	sbc.w	r1, r9, r4
 8000fa0:	3801      	subs	r0, #1
 8000fa2:	e7df      	b.n	8000f64 <__udivmoddi4+0x260>
 8000fa4:	4608      	mov	r0, r1
 8000fa6:	e7d2      	b.n	8000f4e <__udivmoddi4+0x24a>
 8000fa8:	4660      	mov	r0, ip
 8000faa:	e78d      	b.n	8000ec8 <__udivmoddi4+0x1c4>
 8000fac:	4681      	mov	r9, r0
 8000fae:	e7b9      	b.n	8000f24 <__udivmoddi4+0x220>
 8000fb0:	4666      	mov	r6, ip
 8000fb2:	e775      	b.n	8000ea0 <__udivmoddi4+0x19c>
 8000fb4:	4630      	mov	r0, r6
 8000fb6:	e74a      	b.n	8000e4e <__udivmoddi4+0x14a>
 8000fb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fbc:	4439      	add	r1, r7
 8000fbe:	e713      	b.n	8000de8 <__udivmoddi4+0xe4>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	443c      	add	r4, r7
 8000fc4:	e724      	b.n	8000e10 <__udivmoddi4+0x10c>
 8000fc6:	bf00      	nop

08000fc8 <__aeabi_idiv0>:
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop

08000fcc <apInit>:




void apInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
//  cliOpen(_DEF_UART1, 115200);

	   // nRF24L01 수신 코드

	   while(NRF24L01_Check())
 8000fd0:	e005      	b.n	8000fde <apInit+0x12>
	  	{
	  		printf("NRF24L01 wireless module cannot be found by hardware\n");
 8000fd2:	480a      	ldr	r0, [pc, #40]	; (8000ffc <apInit+0x30>)
 8000fd4:	f014 f8c0 	bl	8015158 <puts>
	   		HAL_Delay(100);
 8000fd8:	2064      	movs	r0, #100	; 0x64
 8000fda:	f00c fc4d 	bl	800d878 <HAL_Delay>
	   while(NRF24L01_Check())
 8000fde:	f002 f893 	bl	8003108 <NRF24L01_Check>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d1f4      	bne.n	8000fd2 <apInit+0x6>
	  	}

	  	printf("NRF24L01 wireless module hardware connection is normal\n");
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <apInit+0x34>)
 8000fea:	f014 f8b5 	bl	8015158 <puts>

	  	NRF24L01_RX_Mode();
 8000fee:	f002 f99f 	bl	8003330 <NRF24L01_RX_Mode>
	    printf("Enter data receiving mode\n")
 8000ff2:	4804      	ldr	r0, [pc, #16]	; (8001004 <apInit+0x38>)
 8000ff4:	f014 f8b0 	bl	8015158 <puts>
;


}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	08018400 	.word	0x08018400
 8001000:	08018438 	.word	0x08018438
 8001004:	08018470 	.word	0x08018470

08001008 <apMain>:




void apMain(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b0c0      	sub	sp, #256	; 0x100
 800100c:	af00      	add	r7, sp, #0
  {
		//nRF24L01 수신 코드



		if(NRF24L01_RxPacket(tmp_buf)==0)
 800100e:	463b      	mov	r3, r7
 8001010:	4618      	mov	r0, r3
 8001012:	f002 f967 	bl	80032e4 <NRF24L01_RxPacket>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d105      	bne.n	8001028 <apMain+0x20>
		{
		 // tmp_buf[32]=0;//Add string terminator
		  printf("NRF24L01 wireless module data received successfully: %s\n",tmp_buf);
 800101c:	463b      	mov	r3, r7
 800101e:	4619      	mov	r1, r3
 8001020:	4806      	ldr	r0, [pc, #24]	; (800103c <apMain+0x34>)
 8001022:	f014 f813 	bl	801504c <iprintf>
 8001026:	e005      	b.n	8001034 <apMain+0x2c>

		}
		else
		{
			printf("NRF24L01 wireless module data reception failed \n");
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <apMain+0x38>)
 800102a:	f014 f895 	bl	8015158 <puts>
			HAL_Delay(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f00c fc22 	bl	800d878 <HAL_Delay>
		}

		HAL_Delay(10);
 8001034:	200a      	movs	r0, #10
 8001036:	f00c fc1f 	bl	800d878 <HAL_Delay>
		if(NRF24L01_RxPacket(tmp_buf)==0)
 800103a:	e7e8      	b.n	800100e <apMain+0x6>
 800103c:	0801848c 	.word	0x0801848c
 8001040:	080184c8 	.word	0x080184c8

08001044 <bspInit>:
void SystemClock_Config(void);



void bspInit(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
	  HAL_Init();
 800104a:	f00c fba3 	bl	800d794 <HAL_Init>
	  SystemClock_Config();
 800104e:	f000 f839 	bl	80010c4 <SystemClock_Config>

	  //__HAL_RCC_GPIOC_CLK_ENABLE();
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <bspInit+0x34>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	4a07      	ldr	r2, [pc, #28]	; (8001078 <bspInit+0x34>)
 800105c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001060:	6313      	str	r3, [r2, #48]	; 0x30
 8001062:	4b05      	ldr	r3, [pc, #20]	; (8001078 <bspInit+0x34>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]


}
 800106e:	bf00      	nop
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	40023800 	.word	0x40023800

0800107c <delay>:


void delay(uint32_t ms)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  else
  {
    HAL_Delay(ms);
  }
#else
  HAL_Delay(ms);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00c fbf7 	bl	800d878 <HAL_Delay>
#endif
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <millis>:




uint32_t millis(void)
{
 8001092:	b580      	push	{r7, lr}
 8001094:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001096:	f00c fbe3 	bl	800d860 <HAL_GetTick>
 800109a:	4603      	mov	r3, r0
}
 800109c:	4618      	mov	r0, r3
 800109e:	bd80      	pop	{r7, pc}

080010a0 <__io_putchar>:
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80010a8:	1d39      	adds	r1, r7, #4
 80010aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ae:	2201      	movs	r2, #1
 80010b0:	4803      	ldr	r0, [pc, #12]	; (80010c0 <__io_putchar+0x20>)
 80010b2:	f011 fc40 	bl	8012936 <HAL_UART_Transmit>

  return ch;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	200075ec 	.word	0x200075ec

080010c4 <SystemClock_Config>:


void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b094      	sub	sp, #80	; 0x50
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0320 	add.w	r3, r7, #32
 80010ce:	2230      	movs	r2, #48	; 0x30
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f013 ffb2 	bl	801503c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e8:	2300      	movs	r3, #0
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <SystemClock_Config+0xc8>)
 80010ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f0:	4a26      	ldr	r2, [pc, #152]	; (800118c <SystemClock_Config+0xc8>)
 80010f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010f6:	6413      	str	r3, [r2, #64]	; 0x40
 80010f8:	4b24      	ldr	r3, [pc, #144]	; (800118c <SystemClock_Config+0xc8>)
 80010fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001104:	2300      	movs	r3, #0
 8001106:	607b      	str	r3, [r7, #4]
 8001108:	4b21      	ldr	r3, [pc, #132]	; (8001190 <SystemClock_Config+0xcc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a20      	ldr	r2, [pc, #128]	; (8001190 <SystemClock_Config+0xcc>)
 800110e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <SystemClock_Config+0xcc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001120:	2301      	movs	r3, #1
 8001122:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001124:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800112a:	2302      	movs	r3, #2
 800112c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001132:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001134:	2319      	movs	r3, #25
 8001136:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001138:	23c0      	movs	r3, #192	; 0xc0
 800113a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800113c:	2302      	movs	r3, #2
 800113e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001140:	2304      	movs	r3, #4
 8001142:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4618      	mov	r0, r3
 800114a:	f00e fed1 	bl	800fef0 <HAL_RCC_OscConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001154:	f000 f81e 	bl	8001194 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001158:	230f      	movs	r3, #15
 800115a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800115c:	2302      	movs	r3, #2
 800115e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001168:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	2103      	movs	r1, #3
 8001174:	4618      	mov	r0, r3
 8001176:	f00f f933 	bl	80103e0 <HAL_RCC_ClockConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001180:	f000 f808 	bl	8001194 <Error_Handler>
  }
}
 8001184:	bf00      	nop
 8001186:	3750      	adds	r7, #80	; 0x50
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40007000 	.word	0x40007000

08001194 <Error_Handler>:


void Error_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001198:	b672      	cpsid	i
}
 800119a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800119c:	e7fe      	b.n	800119c <Error_Handler+0x8>
	...

080011a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	607b      	str	r3, [r7, #4]
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <HAL_MspInit+0x4c>)
 80011ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ae:	4a0f      	ldr	r2, [pc, #60]	; (80011ec <HAL_MspInit+0x4c>)
 80011b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b4:	6453      	str	r3, [r2, #68]	; 0x44
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_MspInit+0x4c>)
 80011c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ca:	4a08      	ldr	r2, [pc, #32]	; (80011ec <HAL_MspInit+0x4c>)
 80011cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d0:	6413      	str	r3, [r2, #64]	; 0x40
 80011d2:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_MspInit+0x4c>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	603b      	str	r3, [r7, #0]
 80011dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011de:	bf00      	nop
 80011e0:	370c      	adds	r7, #12
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40023800 	.word	0x40023800

080011f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <NMI_Handler+0x4>

080011f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fa:	e7fe      	b.n	80011fa <HardFault_Handler+0x4>

080011fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <MemManage_Handler+0x4>

08001202 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <UsageFault_Handler+0x4>

0800120e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001212:	bf00      	nop
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123c:	f00c fafc 	bl	800d838 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}

08001244 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <SDIO_IRQHandler+0x10>)
 800124a:	f00f fd0f 	bl	8010c6c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	200073e8 	.word	0x200073e8

08001258 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 800125c:	4802      	ldr	r0, [pc, #8]	; (8001268 <DMA2_Stream1_IRQHandler+0x10>)
 800125e:	f00c fd69 	bl	800dd34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000746c 	.word	0x2000746c

0800126c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DMA2_Stream3_IRQHandler+0x10>)
 8001272:	f00c fd5f 	bl	800dd34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20007328 	.word	0x20007328

08001280 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001284:	4802      	ldr	r0, [pc, #8]	; (8001290 <OTG_FS_IRQHandler+0x10>)
 8001286:	f00d fdd2 	bl	800ee2e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20008500 	.word	0x20008500

08001294 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001298:	4802      	ldr	r0, [pc, #8]	; (80012a4 <DMA2_Stream6_IRQHandler+0x10>)
 800129a:	f00c fd4b 	bl	800dd34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20007388 	.word	0x20007388

080012a8 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80012ac:	4802      	ldr	r0, [pc, #8]	; (80012b8 <SPI4_IRQHandler+0x10>)
 80012ae:	f011 f881 	bl	80123b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200074cc 	.word	0x200074cc

080012bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	return 1;
 80012c0:	2301      	movs	r3, #1
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_kill>:

int _kill(int pid, int sig)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80012d6:	f013 fe79 	bl	8014fcc <__errno>
 80012da:	4603      	mov	r3, r0
 80012dc:	2216      	movs	r2, #22
 80012de:	601a      	str	r2, [r3, #0]
	return -1;
 80012e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_exit>:

void _exit (int status)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80012f4:	f04f 31ff 	mov.w	r1, #4294967295
 80012f8:	6878      	ldr	r0, [r7, #4]
 80012fa:	f7ff ffe7 	bl	80012cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80012fe:	e7fe      	b.n	80012fe <_exit+0x12>

08001300 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001312:	f3af 8000 	nop.w
 8001316:	4601      	mov	r1, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf0      	blt.n	8001312 <_read+0x12>
	}

return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e009      	b.n	8001360 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff fea3 	bl	80010a0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf1      	blt.n	800134c <_write+0x12>
	}
	return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
	return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
	return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
	return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
	return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f013 fdde 	bl	8014fcc <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	2000059c 	.word	0x2000059c
 8001444:	20008940 	.word	0x20008940

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800146c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001470:	480d      	ldr	r0, [pc, #52]	; (80014a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001472:	490e      	ldr	r1, [pc, #56]	; (80014ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001474:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0b      	ldr	r2, [pc, #44]	; (80014b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001488:	4c0b      	ldr	r4, [pc, #44]	; (80014b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001496:	f7ff ffd7 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800149a:	f013 fd9d 	bl	8014fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800149e:	f013 fd89 	bl	8014fb4 <main>
  bx  lr    
 80014a2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80014a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ac:	20000544 	.word	0x20000544
  ldr r2, =_sidata
 80014b0:	08022cbc 	.word	0x08022cbc
  ldr r2, =_sbss
 80014b4:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 80014b8:	2000893c 	.word	0x2000893c

080014bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014bc:	e7fe      	b.n	80014bc <ADC_IRQHandler>

080014be <qbufferAvailable>:

  return ret;
}

uint32_t qbufferAvailable(qbuffer_t *p_node)
{
 80014be:	b480      	push	{r7}
 80014c0:	b085      	sub	sp, #20
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
  uint32_t ret;


  ret = (p_node->in - p_node->out) % p_node->len;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6892      	ldr	r2, [r2, #8]
 80014d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80014d8:	fb02 f201 	mul.w	r2, r2, r1
 80014dc:	1a9b      	subs	r3, r3, r2
 80014de:	60fb      	str	r3, [r7, #12]

  return ret;
 80014e0:	68fb      	ldr	r3, [r7, #12]
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <buttonInit>:




bool buttonInit(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0

	bool ret = true;
 80014f6:	2301      	movs	r3, #1
 80014f8:	76fb      	strb	r3, [r7, #27]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	1d3b      	adds	r3, r7, #4
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001508:	2300      	movs	r3, #0
 800150a:	603b      	str	r3, [r7, #0]
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <buttonInit+0x90>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <buttonInit+0x90>)
 8001512:	f043 0301 	orr.w	r3, r3, #1
 8001516:	6313      	str	r3, [r2, #48]	; 0x30
 8001518:	4b19      	ldr	r3, [pc, #100]	; (8001580 <buttonInit+0x90>)
 800151a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	603b      	str	r3, [r7, #0]
 8001522:	683b      	ldr	r3, [r7, #0]


	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001528:	2301      	movs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<BUTTON_MAX_CH; i++)
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	e019      	b.n	8001566 <buttonInit+0x76>
	{
		GPIO_InitStruct.Pin = button_tbi[i].pin;
 8001532:	4914      	ldr	r1, [pc, #80]	; (8001584 <buttonInit+0x94>)
 8001534:	69fa      	ldr	r2, [r7, #28]
 8001536:	4613      	mov	r3, r2
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	4413      	add	r3, r2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	440b      	add	r3, r1
 8001540:	3304      	adds	r3, #4
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	607b      	str	r3, [r7, #4]
		HAL_GPIO_Init(button_tbi[i].port, &GPIO_InitStruct);
 8001546:	490f      	ldr	r1, [pc, #60]	; (8001584 <buttonInit+0x94>)
 8001548:	69fa      	ldr	r2, [r7, #28]
 800154a:	4613      	mov	r3, r2
 800154c:	005b      	lsls	r3, r3, #1
 800154e:	4413      	add	r3, r2
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	440b      	add	r3, r1
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	1d3a      	adds	r2, r7, #4
 8001558:	4611      	mov	r1, r2
 800155a:	4618      	mov	r0, r3
 800155c:	f00d f948 	bl	800e7f0 <HAL_GPIO_Init>
	for (int i=0; i<BUTTON_MAX_CH; i++)
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	3301      	adds	r3, #1
 8001564:	61fb      	str	r3, [r7, #28]
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	2b00      	cmp	r3, #0
 800156a:	dde2      	ble.n	8001532 <buttonInit+0x42>
	}

#ifdef _USE_HW_CLI
	cliAdd("button", cliButton);
 800156c:	4906      	ldr	r1, [pc, #24]	; (8001588 <buttonInit+0x98>)
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <buttonInit+0x9c>)
 8001570:	f000 fa16 	bl	80019a0 <cliAdd>
#endif /* _USE_HW_CLI */
	return ret;
 8001574:	7efb      	ldrb	r3, [r7, #27]

}
 8001576:	4618      	mov	r0, r3
 8001578:	3720      	adds	r7, #32
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40023800 	.word	0x40023800
 8001584:	20000004 	.word	0x20000004
 8001588:	08001601 	.word	0x08001601
 800158c:	080184f8 	.word	0x080184f8

08001590 <buttonGetPressed>:


bool buttonGetPressed(uint8_t ch)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	71fb      	strb	r3, [r7, #7]
	bool ret = false;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]


	if(ch >= BUTTON_MAX_CH)
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <buttonGetPressed+0x18>
	{
		return false;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e024      	b.n	80015f2 <buttonGetPressed+0x62>
	}


	if(HAL_GPIO_ReadPin(button_tbi[ch].port, button_tbi[ch].pin) == button_tbi[ch].on_state)
 80015a8:	79fa      	ldrb	r2, [r7, #7]
 80015aa:	4914      	ldr	r1, [pc, #80]	; (80015fc <buttonGetPressed+0x6c>)
 80015ac:	4613      	mov	r3, r2
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	4413      	add	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	6818      	ldr	r0, [r3, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	4910      	ldr	r1, [pc, #64]	; (80015fc <buttonGetPressed+0x6c>)
 80015bc:	4613      	mov	r3, r2
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	4413      	add	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	440b      	add	r3, r1
 80015c6:	3304      	adds	r3, #4
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	4619      	mov	r1, r3
 80015ce:	f00d fa93 	bl	800eaf8 <HAL_GPIO_ReadPin>
 80015d2:	4603      	mov	r3, r0
 80015d4:	4618      	mov	r0, r3
 80015d6:	79fa      	ldrb	r2, [r7, #7]
 80015d8:	4908      	ldr	r1, [pc, #32]	; (80015fc <buttonGetPressed+0x6c>)
 80015da:	4613      	mov	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	440b      	add	r3, r1
 80015e4:	3308      	adds	r3, #8
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4298      	cmp	r0, r3
 80015ea:	d101      	bne.n	80015f0 <buttonGetPressed+0x60>
	{
		ret = true;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
	}


	return ret;
 80015f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004

08001600 <cliButton>:


#ifdef _USE_HW_CLI

void cliButton(cli_args_t *args)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8001608:	2300      	movs	r3, #0
 800160a:	73fb      	strb	r3, [r7, #15]

	if(args->argc == 1 && args -> isStr(0, "show") == true)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	881b      	ldrh	r3, [r3, #0]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d128      	bne.n	8001666 <cliButton+0x66>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	695b      	ldr	r3, [r3, #20]
 8001618:	4919      	ldr	r1, [pc, #100]	; (8001680 <cliButton+0x80>)
 800161a:	2000      	movs	r0, #0
 800161c:	4798      	blx	r3
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d020      	beq.n	8001666 <cliButton+0x66>
	{
		while(cliKeepLoop())
 8001624:	e018      	b.n	8001658 <cliButton+0x58>
		{
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 8001626:	2300      	movs	r3, #0
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	e00c      	b.n	8001646 <cliButton+0x46>
			{
				cliPrintf("%d", buttonGetPressed(i));
 800162c:	68bb      	ldr	r3, [r7, #8]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff ffad 	bl	8001590 <buttonGetPressed>
 8001636:	4603      	mov	r3, r0
 8001638:	4619      	mov	r1, r3
 800163a:	4812      	ldr	r0, [pc, #72]	; (8001684 <cliButton+0x84>)
 800163c:	f000 f8a0 	bl	8001780 <cliPrintf>
			for (int i = 0; i < BUTTON_MAX_CH; i++)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	3301      	adds	r3, #1
 8001644:	60bb      	str	r3, [r7, #8]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	ddef      	ble.n	800162c <cliButton+0x2c>
			}
			cliPrintf("\n");
 800164c:	480e      	ldr	r0, [pc, #56]	; (8001688 <cliButton+0x88>)
 800164e:	f000 f897 	bl	8001780 <cliPrintf>
			delay(100);
 8001652:	2064      	movs	r0, #100	; 0x64
 8001654:	f7ff fd12 	bl	800107c <delay>
		while(cliKeepLoop())
 8001658:	f000 f98c 	bl	8001974 <cliKeepLoop>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1e1      	bne.n	8001626 <cliButton+0x26>
		}

		ret =true;
 8001662:	2301      	movs	r3, #1
 8001664:	73fb      	strb	r3, [r7, #15]
	}

	if(ret != true)
 8001666:	7bfb      	ldrb	r3, [r7, #15]
 8001668:	f083 0301 	eor.w	r3, r3, #1
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d002      	beq.n	8001678 <cliButton+0x78>
	{
		cliPrintf("button show\n");
 8001672:	4806      	ldr	r0, [pc, #24]	; (800168c <cliButton+0x8c>)
 8001674:	f000 f884 	bl	8001780 <cliPrintf>
	}
}
 8001678:	bf00      	nop
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	08018500 	.word	0x08018500
 8001684:	08018508 	.word	0x08018508
 8001688:	0801850c 	.word	0x0801850c
 800168c:	08018510 	.word	0x08018510

08001690 <cdcInit>:

static bool is_init = false;


bool cdcInit(void)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
  bool ret = true;
 8001696:	2301      	movs	r3, #1
 8001698:	71fb      	strb	r3, [r7, #7]

  is_init = true;
 800169a:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <cdcInit+0x20>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]

  return ret;
 80016a0:	79fb      	ldrb	r3, [r7, #7]
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	370c      	adds	r7, #12
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	200005a0 	.word	0x200005a0

080016b4 <cliInit>:
void cliShowList(cli_args_t *args);
void cliMemoryDump(cli_args_t *args);


bool cliInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  cli_node.is_open = false;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <cliInit+0x74>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	721a      	strb	r2, [r3, #8]
  cli_node.is_log  = false;
 80016be:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <cliInit+0x74>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	725a      	strb	r2, [r3, #9]
  cli_node.state   = CLI_RX_IDLE;
 80016c4:	4b18      	ldr	r3, [pc, #96]	; (8001728 <cliInit+0x74>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	741a      	strb	r2, [r3, #16]

  cli_node.hist_line_i     = 0;
 80016ca:	4b17      	ldr	r3, [pc, #92]	; (8001728 <cliInit+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
  cli_node.hist_line_last  = 0;
 80016d2:	4b15      	ldr	r3, [pc, #84]	; (8001728 <cliInit+0x74>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2196 	strb.w	r2, [r3, #406]	; 0x196
  cli_node.hist_line_count = 0;
 80016da:	4b13      	ldr	r3, [pc, #76]	; (8001728 <cliInit+0x74>)
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2197 	strb.w	r2, [r3, #407]	; 0x197
  cli_node.hist_line_new   = false;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <cliInit+0x74>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194

  cli_node.cmd_args.getData  = cliArgsGetData;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <cliInit+0x74>)
 80016ec:	4a0f      	ldr	r2, [pc, #60]	; (800172c <cliInit+0x78>)
 80016ee:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  cli_node.cmd_args.getFloat = cliArgsGetFloat;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <cliInit+0x74>)
 80016f4:	4a0e      	ldr	r2, [pc, #56]	; (8001730 <cliInit+0x7c>)
 80016f6:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
  cli_node.cmd_args.getStr   = cliArgsGetStr;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <cliInit+0x74>)
 80016fc:	4a0d      	ldr	r2, [pc, #52]	; (8001734 <cliInit+0x80>)
 80016fe:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
  cli_node.cmd_args.isStr    = cliArgsIsStr;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <cliInit+0x74>)
 8001704:	4a0c      	ldr	r2, [pc, #48]	; (8001738 <cliInit+0x84>)
 8001706:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440

  cliLineClean(&cli_node);
 800170a:	4807      	ldr	r0, [pc, #28]	; (8001728 <cliInit+0x74>)
 800170c:	f000 f81e 	bl	800174c <cliLineClean>


  cliAdd("help", cliShowList);
 8001710:	490a      	ldr	r1, [pc, #40]	; (800173c <cliInit+0x88>)
 8001712:	480b      	ldr	r0, [pc, #44]	; (8001740 <cliInit+0x8c>)
 8001714:	f000 f944 	bl	80019a0 <cliAdd>
  cliAdd("md"  , cliMemoryDump);
 8001718:	490a      	ldr	r1, [pc, #40]	; (8001744 <cliInit+0x90>)
 800171a:	480b      	ldr	r0, [pc, #44]	; (8001748 <cliInit+0x94>)
 800171c:	f000 f940 	bl	80019a0 <cliAdd>

  return true;
 8001720:	2301      	movs	r3, #1
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20006cac 	.word	0x20006cac
 800172c:	08001831 	.word	0x08001831
 8001730:	08001881 	.word	0x08001881
 8001734:	080018d9 	.word	0x080018d9
 8001738:	08001921 	.word	0x08001921
 800173c:	08001a35 	.word	0x08001a35
 8001740:	08018520 	.word	0x08018520
 8001744:	08001aa5 	.word	0x08001aa5
 8001748:	08018528 	.word	0x08018528

0800174c <cliLineClean>:

  return ret;
}

void cliLineClean(cli_t *p_cli)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  p_cli->line.count   = 0;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2200      	movs	r2, #0
 8001758:	f883 22e6 	strb.w	r2, [r3, #742]	; 0x2e6
  p_cli->line.cursor  = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 22e5 	strb.w	r2, [r3, #741]	; 0x2e5
  p_cli->line.buf_len = CLI_LINE_BUF_MAX - 1;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	223f      	movs	r2, #63	; 0x3f
 8001768:	f883 22e4 	strb.w	r2, [r3, #740]	; 0x2e4
  p_cli->line.buf[0]  = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	f883 22a4 	strb.w	r2, [r3, #676]	; 0x2a4
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <cliPrintf>:

  return ret;
}

void cliPrintf(const char *fmt, ...)
{
 8001780:	b40f      	push	{r0, r1, r2, r3}
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
  va_list arg;
  va_start (arg, fmt);
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	607b      	str	r3, [r7, #4]
  int32_t len;
  cli_t *p_cli = &cli_node;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <cliPrintf+0x44>)
 8001790:	60fb      	str	r3, [r7, #12]


  len = vsnprintf(p_cli->print_buffer, 256, fmt, arg);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	f103 0011 	add.w	r0, r3, #17
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017a0:	f014 fc1c 	bl	8015fdc <vsniprintf>
 80017a4:	60b8      	str	r0, [r7, #8]
  va_end (arg);

  uartWrite(p_cli->ch, (uint8_t *)p_cli->print_buffer, len);
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	7818      	ldrb	r0, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3311      	adds	r3, #17
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	4619      	mov	r1, r3
 80017b2:	f002 fd2b 	bl	800420c <uartWrite>
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017c0:	b004      	add	sp, #16
 80017c2:	4770      	bx	lr
 80017c4:	20006cac 	.word	0x20006cac

080017c8 <cliToUpper>:

void cliToUpper(char *str)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint16_t i;
  uint8_t  str_ch;

  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 80017d0:	2300      	movs	r3, #0
 80017d2:	81fb      	strh	r3, [r7, #14]
 80017d4:	e018      	b.n	8001808 <cliToUpper+0x40>
  {
    str_ch = str[i];
 80017d6:	89fb      	ldrh	r3, [r7, #14]
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4413      	add	r3, r2
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	737b      	strb	r3, [r7, #13]

    if (str_ch == 0)
 80017e0:	7b7b      	ldrb	r3, [r7, #13]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d014      	beq.n	8001810 <cliToUpper+0x48>
    {
      break;
    }

    if ((str_ch >= 'a') && (str_ch <= 'z'))
 80017e6:	7b7b      	ldrb	r3, [r7, #13]
 80017e8:	2b60      	cmp	r3, #96	; 0x60
 80017ea:	d905      	bls.n	80017f8 <cliToUpper+0x30>
 80017ec:	7b7b      	ldrb	r3, [r7, #13]
 80017ee:	2b7a      	cmp	r3, #122	; 0x7a
 80017f0:	d802      	bhi.n	80017f8 <cliToUpper+0x30>
    {
      str_ch = str_ch - 'a' + 'A';
 80017f2:	7b7b      	ldrb	r3, [r7, #13]
 80017f4:	3b20      	subs	r3, #32
 80017f6:	737b      	strb	r3, [r7, #13]
    }
    str[i] = str_ch;
 80017f8:	89fb      	ldrh	r3, [r7, #14]
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	7b7a      	ldrb	r2, [r7, #13]
 8001800:	701a      	strb	r2, [r3, #0]
  for (i=0; i<CLI_CMD_NAME_MAX; i++)
 8001802:	89fb      	ldrh	r3, [r7, #14]
 8001804:	3301      	adds	r3, #1
 8001806:	81fb      	strh	r3, [r7, #14]
 8001808:	89fb      	ldrh	r3, [r7, #14]
 800180a:	2b0f      	cmp	r3, #15
 800180c:	d9e3      	bls.n	80017d6 <cliToUpper+0xe>
 800180e:	e000      	b.n	8001812 <cliToUpper+0x4a>
      break;
 8001810:	bf00      	nop
  }

  if (i == CLI_CMD_NAME_MAX)
 8001812:	89fb      	ldrh	r3, [r7, #14]
 8001814:	2b10      	cmp	r3, #16
 8001816:	d105      	bne.n	8001824 <cliToUpper+0x5c>
  {
    str[i-1] = 0;
 8001818:	89fb      	ldrh	r3, [r7, #14]
 800181a:	3b01      	subs	r3, #1
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	2200      	movs	r2, #0
 8001822:	701a      	strb	r2, [r3, #0]
  }
}
 8001824:	bf00      	nop
 8001826:	3714      	adds	r7, #20
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <cliArgsGetData>:

int32_t cliArgsGetData(uint8_t index)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  int32_t ret = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 800183e:	4b0f      	ldr	r3, [pc, #60]	; (800187c <cliArgsGetData+0x4c>)
 8001840:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	b29a      	uxth	r2, r3
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800184c:	429a      	cmp	r2, r3
 800184e:	d301      	bcc.n	8001854 <cliArgsGetData+0x24>
  {
    return 0;
 8001850:	2300      	movs	r3, #0
 8001852:	e00e      	b.n	8001872 <cliArgsGetData+0x42>
  }

  ret = (int32_t)strtoul((const char * ) p_cli->cmd_args.argv[index], (char **)NULL, (int) 0);
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	009b      	lsls	r3, r3, #2
 800185e:	4413      	add	r3, r2
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2200      	movs	r2, #0
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f014 fb82 	bl	8015f70 <strtoul>
 800186c:	4603      	mov	r3, r0
 800186e:	60fb      	str	r3, [r7, #12]

  return ret;
 8001870:	68fb      	ldr	r3, [r7, #12]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20006cac 	.word	0x20006cac

08001880 <cliArgsGetFloat>:

float cliArgsGetFloat(uint8_t index)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b084      	sub	sp, #16
 8001884:	af00      	add	r7, sp, #0
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
  float ret = 0.0;
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <cliArgsGetFloat+0x54>)
 8001892:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001894:	79fb      	ldrb	r3, [r7, #7]
 8001896:	b29a      	uxth	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800189e:	429a      	cmp	r2, r3
 80018a0:	d302      	bcc.n	80018a8 <cliArgsGetFloat+0x28>
  {
    return 0;
 80018a2:	f04f 0300 	mov.w	r3, #0
 80018a6:	e00d      	b.n	80018c4 <cliArgsGetFloat+0x44>
  }

  ret = (float)strtof((const char * ) p_cli->cmd_args.argv[index], (char **)NULL);
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 80018ae:	79fb      	ldrb	r3, [r7, #7]
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	4413      	add	r3, r2
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2100      	movs	r1, #0
 80018b8:	4618      	mov	r0, r3
 80018ba:	f014 fa83 	bl	8015dc4 <strtof>
 80018be:	ed87 0a03 	vstr	s0, [r7, #12]

  return ret;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	ee07 3a90 	vmov	s15, r3
}
 80018c8:	eeb0 0a67 	vmov.f32	s0, s15
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20006cac 	.word	0x20006cac

080018d8 <cliArgsGetStr>:

char *cliArgsGetStr(uint8_t index)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	4603      	mov	r3, r0
 80018e0:	71fb      	strb	r3, [r7, #7]
  char *ret = NULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  cli_t *p_cli = &cli_node;
 80018e6:	4b0d      	ldr	r3, [pc, #52]	; (800191c <cliArgsGetStr+0x44>)
 80018e8:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d301      	bcc.n	80018fc <cliArgsGetStr+0x24>
  {
    return 0;
 80018f8:	2300      	movs	r3, #0
 80018fa:	e008      	b.n	800190e <cliArgsGetStr+0x36>
  }

  ret = p_cli->cmd_args.argv[index];
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

  return ret;
 800190c:	68fb      	ldr	r3, [r7, #12]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	20006cac 	.word	0x20006cac

08001920 <cliArgsIsStr>:

bool cliArgsIsStr(uint8_t index, char *p_str)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800192c:	2300      	movs	r3, #0
 800192e:	73fb      	strb	r3, [r7, #15]
  cli_t *p_cli = &cli_node;
 8001930:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <cliArgsIsStr+0x50>)
 8001932:	60bb      	str	r3, [r7, #8]


  if (index >= p_cli->cmd_args.argc)
 8001934:	79fb      	ldrb	r3, [r7, #7]
 8001936:	b29a      	uxth	r2, r3
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	f8b3 342c 	ldrh.w	r3, [r3, #1068]	; 0x42c
 800193e:	429a      	cmp	r2, r3
 8001940:	d301      	bcc.n	8001946 <cliArgsIsStr+0x26>
  {
    return 0;
 8001942:	2300      	movs	r3, #0
 8001944:	e010      	b.n	8001968 <cliArgsIsStr+0x48>
  }

  if(strcmp(p_str, p_cli->cmd_args.argv[index]) == 0)
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	f8d3 2430 	ldr.w	r2, [r3, #1072]	; 0x430
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4619      	mov	r1, r3
 8001956:	6838      	ldr	r0, [r7, #0]
 8001958:	f7fe fc42 	bl	80001e0 <strcmp>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d101      	bne.n	8001966 <cliArgsIsStr+0x46>
  {
    ret = true;
 8001962:	2301      	movs	r3, #1
 8001964:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001966:	7bfb      	ldrb	r3, [r7, #15]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20006cac 	.word	0x20006cac

08001974 <cliKeepLoop>:

bool cliKeepLoop(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
  cli_t *p_cli = &cli_node;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <cliKeepLoop+0x28>)
 800197c:	607b      	str	r3, [r7, #4]


  if (uartAvailable(p_cli->ch) == 0)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f002 fc10 	bl	80041a8 <uartAvailable>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <cliKeepLoop+0x1e>
  {
    return true;
 800198e:	2301      	movs	r3, #1
 8001990:	e000      	b.n	8001994 <cliKeepLoop+0x20>
  }
  else
  {
    return false;
 8001992:	2300      	movs	r3, #0
  }
}
 8001994:	4618      	mov	r0, r3
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20006cac 	.word	0x20006cac

080019a0 <cliAdd>:

bool cliAdd(const char *cmd_str, void (*p_func)(cli_args_t *))
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	6039      	str	r1, [r7, #0]
  bool ret = true;
 80019aa:	2301      	movs	r3, #1
 80019ac:	75fb      	strb	r3, [r7, #23]
  cli_t *p_cli = &cli_node;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <cliAdd+0x90>)
 80019b0:	613b      	str	r3, [r7, #16]
  uint16_t index;

  if (p_cli->cmd_count >= CLI_CMD_LIST_MAX)
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80019b8:	2b0f      	cmp	r3, #15
 80019ba:	d901      	bls.n	80019c0 <cliAdd+0x20>
  {
    return false;
 80019bc:	2300      	movs	r3, #0
 80019be:	e032      	b.n	8001a26 <cliAdd+0x86>
  }

  index = p_cli->cmd_count;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 80019c6:	81fb      	strh	r3, [r7, #14]

  strcpy(p_cli->cmd_list[index].cmd_str, cmd_str);
 80019c8:	89fa      	ldrh	r2, [r7, #14]
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4413      	add	r3, r2
 80019da:	3304      	adds	r3, #4
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	4618      	mov	r0, r3
 80019e0:	f013 fbc2 	bl	8015168 <strcpy>
  p_cli->cmd_list[index].cmd_func = p_func;
 80019e4:	89fa      	ldrh	r2, [r7, #14]
 80019e6:	6939      	ldr	r1, [r7, #16]
 80019e8:	4613      	mov	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	4413      	add	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	440b      	add	r3, r1
 80019f2:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	601a      	str	r2, [r3, #0]

  cliToUpper(p_cli->cmd_list[index].cmd_str);
 80019fa:	89fa      	ldrh	r2, [r7, #14]
 80019fc:	4613      	mov	r3, r2
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	4413      	add	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff feda 	bl	80017c8 <cliToUpper>

  p_cli->cmd_count++;
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	f8a3 22e8 	strh.w	r2, [r3, #744]	; 0x2e8

  return ret;
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	20006cac 	.word	0x20006cac

08001a34 <cliShowList>:

void cliShowList(cli_args_t *args)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  cli_t *p_cli = &cli_node;
 8001a3c:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <cliShowList+0x60>)
 8001a3e:	60bb      	str	r3, [r7, #8]


  cliPrintf("\r\n");
 8001a40:	4815      	ldr	r0, [pc, #84]	; (8001a98 <cliShowList+0x64>)
 8001a42:	f7ff fe9d 	bl	8001780 <cliPrintf>
  cliPrintf("---------- cmd list ---------\r\n");
 8001a46:	4815      	ldr	r0, [pc, #84]	; (8001a9c <cliShowList+0x68>)
 8001a48:	f7ff fe9a 	bl	8001780 <cliPrintf>

  for (int i=0; i<p_cli->cmd_count; i++)
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	e012      	b.n	8001a78 <cliShowList+0x44>
  {
    cliPrintf(p_cli->cmd_list[i].cmd_str);
 8001a52:	68fa      	ldr	r2, [r7, #12]
 8001a54:	4613      	mov	r3, r2
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	4413      	add	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f503 733a 	add.w	r3, r3, #744	; 0x2e8
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	4413      	add	r3, r2
 8001a64:	3304      	adds	r3, #4
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe8a 	bl	8001780 <cliPrintf>
    cliPrintf("\r\n");
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <cliShowList+0x64>)
 8001a6e:	f7ff fe87 	bl	8001780 <cliPrintf>
  for (int i=0; i<p_cli->cmd_count; i++)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	3301      	adds	r3, #1
 8001a76:	60fb      	str	r3, [r7, #12]
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	f8b3 32e8 	ldrh.w	r3, [r3, #744]	; 0x2e8
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4293      	cmp	r3, r2
 8001a84:	dbe5      	blt.n	8001a52 <cliShowList+0x1e>
  }

  cliPrintf("-----------------------------\r\n");
 8001a86:	4806      	ldr	r0, [pc, #24]	; (8001aa0 <cliShowList+0x6c>)
 8001a88:	f7ff fe7a 	bl	8001780 <cliPrintf>
}
 8001a8c:	bf00      	nop
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20006cac 	.word	0x20006cac
 8001a98:	080185f0 	.word	0x080185f0
 8001a9c:	080185f4 	.word	0x080185f4
 8001aa0:	08018614 	.word	0x08018614

08001aa4 <cliMemoryDump>:

void cliMemoryDump(cli_args_t *args)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08c      	sub	sp, #48	; 0x30
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  int idx, size = 16;
 8001aac:	2310      	movs	r3, #16
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
  unsigned int *addr;
  int idx1, i;
  unsigned int *ascptr;
  unsigned char asc[4];

  int    argc = args->argc;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	617b      	str	r3, [r7, #20]
  char **argv = args->argv;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	613b      	str	r3, [r7, #16]


  if(args->argc < 1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	881b      	ldrh	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d103      	bne.n	8001acc <cliMemoryDump+0x28>
  {
    cliPrintf(">> md addr [size] \n");
 8001ac4:	4840      	ldr	r0, [pc, #256]	; (8001bc8 <cliMemoryDump+0x124>)
 8001ac6:	f7ff fe5b 	bl	8001780 <cliPrintf>
 8001aca:	e07a      	b.n	8001bc2 <cliMemoryDump+0x11e>
    return;
  }

  if(argc > 1)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	dd09      	ble.n	8001ae6 <cliMemoryDump+0x42>
  {
    size = (int)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	3304      	adds	r3, #4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2100      	movs	r1, #0
 8001adc:	4618      	mov	r0, r3
 8001ade:	f014 fa47 	bl	8015f70 <strtoul>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  addr   = (unsigned int *)strtoul((const char * ) argv[0], (char **)NULL, (int) 0);
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2200      	movs	r2, #0
 8001aec:	2100      	movs	r1, #0
 8001aee:	4618      	mov	r0, r3
 8001af0:	f014 fa3e 	bl	8015f70 <strtoul>
 8001af4:	4603      	mov	r3, r0
 8001af6:	627b      	str	r3, [r7, #36]	; 0x24
  ascptr = (unsigned int *)addr;
 8001af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afa:	61bb      	str	r3, [r7, #24]

  cliPrintf("\n   ");
 8001afc:	4833      	ldr	r0, [pc, #204]	; (8001bcc <cliMemoryDump+0x128>)
 8001afe:	f7ff fe3f 	bl	8001780 <cliPrintf>
  for (idx = 0; idx<size; idx++)
 8001b02:	2300      	movs	r3, #0
 8001b04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b06:	e058      	b.n	8001bba <cliMemoryDump+0x116>
  {
    if((idx%4) == 0)
 8001b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0a:	f003 0303 	and.w	r3, r3, #3
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d104      	bne.n	8001b1c <cliMemoryDump+0x78>
    {
      cliPrintf(" 0x%08X: ", (unsigned int)addr);
 8001b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b14:	4619      	mov	r1, r3
 8001b16:	482e      	ldr	r0, [pc, #184]	; (8001bd0 <cliMemoryDump+0x12c>)
 8001b18:	f7ff fe32 	bl	8001780 <cliPrintf>
    }
    cliPrintf(" 0x%08X", *(addr));
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <cliMemoryDump+0x130>)
 8001b24:	f7ff fe2c 	bl	8001780 <cliPrintf>

    if ((idx%4) == 3)
 8001b28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b2a:	425a      	negs	r2, r3
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	f002 0203 	and.w	r2, r2, #3
 8001b34:	bf58      	it	pl
 8001b36:	4253      	negpl	r3, r2
 8001b38:	2b03      	cmp	r3, #3
 8001b3a:	d138      	bne.n	8001bae <cliMemoryDump+0x10a>
    {
      cliPrintf ("  |");
 8001b3c:	4826      	ldr	r0, [pc, #152]	; (8001bd8 <cliMemoryDump+0x134>)
 8001b3e:	f7ff fe1f 	bl	8001780 <cliPrintf>
      for (idx1= 0; idx1< 4; idx1++)
 8001b42:	2300      	movs	r3, #0
 8001b44:	623b      	str	r3, [r7, #32]
 8001b46:	e02c      	b.n	8001ba2 <cliMemoryDump+0xfe>
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	681b      	ldr	r3, [r3, #0]
      {
        memcpy((char *)asc, (char *)ascptr, 4);
 8001b4c:	60fb      	str	r3, [r7, #12]
        for (i=0;i<4;i++)
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61fb      	str	r3, [r7, #28]
 8001b52:	e01d      	b.n	8001b90 <cliMemoryDump+0xec>
        {
          if (asc[i] > 0x1f && asc[i] < 0x7f)
 8001b54:	f107 020c 	add.w	r2, r7, #12
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b1f      	cmp	r3, #31
 8001b60:	d910      	bls.n	8001b84 <cliMemoryDump+0xe0>
 8001b62:	f107 020c 	add.w	r2, r7, #12
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b7e      	cmp	r3, #126	; 0x7e
 8001b6e:	d809      	bhi.n	8001b84 <cliMemoryDump+0xe0>
          {
            cliPrintf("%c", asc[i]);
 8001b70:	f107 020c 	add.w	r2, r7, #12
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4817      	ldr	r0, [pc, #92]	; (8001bdc <cliMemoryDump+0x138>)
 8001b7e:	f7ff fdff 	bl	8001780 <cliPrintf>
 8001b82:	e002      	b.n	8001b8a <cliMemoryDump+0xe6>
          }
          else
          {
            cliPrintf(".");
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <cliMemoryDump+0x13c>)
 8001b86:	f7ff fdfb 	bl	8001780 <cliPrintf>
        for (i=0;i<4;i++)
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b03      	cmp	r3, #3
 8001b94:	ddde      	ble.n	8001b54 <cliMemoryDump+0xb0>
          }
        }
        ascptr+=1;
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	3304      	adds	r3, #4
 8001b9a:	61bb      	str	r3, [r7, #24]
      for (idx1= 0; idx1< 4; idx1++)
 8001b9c:	6a3b      	ldr	r3, [r7, #32]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	623b      	str	r3, [r7, #32]
 8001ba2:	6a3b      	ldr	r3, [r7, #32]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	ddcf      	ble.n	8001b48 <cliMemoryDump+0xa4>
      }
      cliPrintf("|\n   ");
 8001ba8:	480e      	ldr	r0, [pc, #56]	; (8001be4 <cliMemoryDump+0x140>)
 8001baa:	f7ff fde9 	bl	8001780 <cliPrintf>
    }
    addr++;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  for (idx = 0; idx<size; idx++)
 8001bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	dba2      	blt.n	8001b08 <cliMemoryDump+0x64>
  }
}
 8001bc2:	3730      	adds	r7, #48	; 0x30
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	08018634 	.word	0x08018634
 8001bcc:	08018648 	.word	0x08018648
 8001bd0:	08018650 	.word	0x08018650
 8001bd4:	0801865c 	.word	0x0801865c
 8001bd8:	08018664 	.word	0x08018664
 8001bdc:	08018668 	.word	0x08018668
 8001be0:	0801866c 	.word	0x0801866c
 8001be4:	08018670 	.word	0x08018670

08001be8 <fatfsInit>:
#endif /* _USE_HW_CLI */



bool fatfsInit(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
  bool ret = true;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	71fb      	strb	r3, [r7, #7]


  if(FATFS_LinkDriver(&SD_Driver, SDPath) == 0)
 8001bf2:	490d      	ldr	r1, [pc, #52]	; (8001c28 <fatfsInit+0x40>)
 8001bf4:	480d      	ldr	r0, [pc, #52]	; (8001c2c <fatfsInit+0x44>)
 8001bf6:	f00b fcf7 	bl	800d5e8 <FATFS_LinkDriver>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d10a      	bne.n	8001c16 <fatfsInit+0x2e>
  {
    if(f_mount(&SDFatFs, (TCHAR const*)SDPath, 0) == FR_OK)
 8001c00:	2200      	movs	r2, #0
 8001c02:	4909      	ldr	r1, [pc, #36]	; (8001c28 <fatfsInit+0x40>)
 8001c04:	480a      	ldr	r0, [pc, #40]	; (8001c30 <fatfsInit+0x48>)
 8001c06:	f00a f84d 	bl	800bca4 <f_mount>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d102      	bne.n	8001c16 <fatfsInit+0x2e>
    {
      is_init = true;
 8001c10:	4b08      	ldr	r3, [pc, #32]	; (8001c34 <fatfsInit+0x4c>)
 8001c12:	2201      	movs	r2, #1
 8001c14:	701a      	strb	r2, [r3, #0]
    }
  }

#ifdef _USE_HW_CLI
  cliAdd("fatfs", cliFatfs);
 8001c16:	4908      	ldr	r1, [pc, #32]	; (8001c38 <fatfsInit+0x50>)
 8001c18:	4808      	ldr	r0, [pc, #32]	; (8001c3c <fatfsInit+0x54>)
 8001c1a:	f7ff fec1 	bl	80019a0 <cliAdd>
#endif /* _USE_HW_CLI */

  return ret;
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	200070f0 	.word	0x200070f0
 8001c2c:	08018bf8 	.word	0x08018bf8
 8001c30:	200070f4 	.word	0x200070f4
 8001c34:	200005a1 	.word	0x200005a1
 8001c38:	08001cf1 	.word	0x08001cf1
 8001c3c:	08018680 	.word	0x08018680

08001c40 <fatfsDir>:


#ifdef _USE_HW_CLI

FRESULT fatfsDir(char* path)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b0d6      	sub	sp, #344	; 0x158
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	1d3b      	adds	r3, r7, #4
 8001c48:	6018      	str	r0, [r3, #0]
  FRESULT res;
  DIR dir;
  FILINFO fno;


  res = f_opendir(&dir, path);                       /* Open the directory */
 8001c4a:	1d3b      	adds	r3, r7, #4
 8001c4c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8001c50:	6819      	ldr	r1, [r3, #0]
 8001c52:	4610      	mov	r0, r2
 8001c54:	f00b f81b 	bl	800cc8e <f_opendir>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
  if (res == FR_OK)
 8001c5e:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d138      	bne.n	8001cd8 <fatfsDir+0x98>
  {
    for (;;)
    {
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001c66:	f107 0208 	add.w	r2, r7, #8
 8001c6a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f00b f8d0 	bl	800ce16 <f_readdir>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f887 3157 	strb.w	r3, [r7, #343]	; 0x157
      if (res != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001c7c:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d124      	bne.n	8001cce <fatfsDir+0x8e>
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	7d9b      	ldrb	r3, [r3, #22]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01f      	beq.n	8001cce <fatfsDir+0x8e>
      if (fno.fattrib & AM_DIR)
 8001c8e:	f107 0308 	add.w	r3, r7, #8
 8001c92:	7a1b      	ldrb	r3, [r3, #8]
 8001c94:	f003 0310 	and.w	r3, r3, #16
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d009      	beq.n	8001cb0 <fatfsDir+0x70>
      {                    /* It is a directory */
        cliPrintf(" %s/%s \n", path, fno.fname);
 8001c9c:	f107 0308 	add.w	r3, r7, #8
 8001ca0:	f103 0216 	add.w	r2, r3, #22
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	480f      	ldr	r0, [pc, #60]	; (8001ce8 <fatfsDir+0xa8>)
 8001caa:	f7ff fd69 	bl	8001780 <cliPrintf>
 8001cae:	e7da      	b.n	8001c66 <fatfsDir+0x26>
      }
      else
      {                                       /* It is a file. */
        cliPrintf(" %s/%32s \t%d bytes\n", path, fno.fname, (int)fno.fsize);
 8001cb0:	f107 0308 	add.w	r3, r7, #8
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	f103 0216 	add.w	r2, r3, #22
 8001cc0:	1d39      	adds	r1, r7, #4
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	6809      	ldr	r1, [r1, #0]
 8001cc6:	4809      	ldr	r0, [pc, #36]	; (8001cec <fatfsDir+0xac>)
 8001cc8:	f7ff fd5a 	bl	8001780 <cliPrintf>
      res = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001ccc:	e7cb      	b.n	8001c66 <fatfsDir+0x26>
      }
    }
    f_closedir(&dir);
 8001cce:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00b f879 	bl	800cdca <f_closedir>
  }

  return res;
 8001cd8:	f897 3157 	ldrb.w	r3, [r7, #343]	; 0x157
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	08018688 	.word	0x08018688
 8001cec:	08018694 	.word	0x08018694

08001cf0 <cliFatfs>:

void cliFatfs(cli_args_t *args)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267


  if (args->argc == 1 && args->isStr(0, "info") == true)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d14a      	bne.n	8001da2 <cliFatfs+0xb2>
 8001d0c:	1d3b      	adds	r3, r7, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	498b      	ldr	r1, [pc, #556]	; (8001f40 <cliFatfs+0x250>)
 8001d14:	2000      	movs	r0, #0
 8001d16:	4798      	blx	r3
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d041      	beq.n	8001da2 <cliFatfs+0xb2>
  {
    cliPrintf("fatfs init \t: %d\n", is_init);
 8001d1e:	4b89      	ldr	r3, [pc, #548]	; (8001f44 <cliFatfs+0x254>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	4619      	mov	r1, r3
 8001d24:	4888      	ldr	r0, [pc, #544]	; (8001f48 <cliFatfs+0x258>)
 8001d26:	f7ff fd2b 	bl	8001780 <cliPrintf>

    if (is_init == true)
 8001d2a:	4b86      	ldr	r3, [pc, #536]	; (8001f44 <cliFatfs+0x254>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d034      	beq.n	8001d9c <cliFatfs+0xac>
      FATFS *fs;
      DWORD fre_clust, fre_sect, tot_sect;
      FRESULT res;

       /* Get volume information and free clusters of drive 1 */
       res = f_getfree("", &fre_clust, &fs);
 8001d32:	f507 7211 	add.w	r2, r7, #580	; 0x244
 8001d36:	f507 7310 	add.w	r3, r7, #576	; 0x240
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4883      	ldr	r0, [pc, #524]	; (8001f4c <cliFatfs+0x25c>)
 8001d3e:	f00b f8c2 	bl	800cec6 <f_getfree>
 8001d42:	4603      	mov	r3, r0
 8001d44:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
       if (res == FR_OK)
 8001d48:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d11f      	bne.n	8001d90 <cliFatfs+0xa0>
       {
         /* Get total sectors and free sectors */
         tot_sect = (fs->n_fatent - 2) * fs->csize;
 8001d50:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	3b02      	subs	r3, #2
 8001d58:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8001d5c:	8952      	ldrh	r2, [r2, #10]
 8001d5e:	fb02 f303 	mul.w	r3, r2, r3
 8001d62:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
         fre_sect = fre_clust * fs->csize;
 8001d66:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8001d6a:	895b      	ldrh	r3, [r3, #10]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8001d72:	fb03 f302 	mul.w	r3, r3, r2
 8001d76:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254

         /* Print the free space (assuming 512 bytes/sector) */
         cliPrintf("%10lu KiB total drive space.\n%10lu KiB available.\n", tot_sect / 2, fre_sect / 2);
 8001d7a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8001d7e:	0859      	lsrs	r1, r3, #1
 8001d80:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8001d84:	085b      	lsrs	r3, r3, #1
 8001d86:	461a      	mov	r2, r3
 8001d88:	4871      	ldr	r0, [pc, #452]	; (8001f50 <cliFatfs+0x260>)
 8001d8a:	f7ff fcf9 	bl	8001780 <cliPrintf>
 8001d8e:	e005      	b.n	8001d9c <cliFatfs+0xac>
       }
       else
       {
         cliPrintf(" err : %d\n", res);
 8001d90:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8001d94:	4619      	mov	r1, r3
 8001d96:	486f      	ldr	r0, [pc, #444]	; (8001f54 <cliFatfs+0x264>)
 8001d98:	f7ff fcf2 	bl	8001780 <cliPrintf>
       }
    }

    ret = true;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "dir") == true)
 8001da2:	1d3b      	adds	r3, r7, #4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d11b      	bne.n	8001de4 <cliFatfs+0xf4>
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	4969      	ldr	r1, [pc, #420]	; (8001f58 <cliFatfs+0x268>)
 8001db4:	2000      	movs	r0, #0
 8001db6:	4798      	blx	r3
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d012      	beq.n	8001de4 <cliFatfs+0xf4>
  {
    FRESULT res;

    res = fatfsDir("/");
 8001dbe:	4867      	ldr	r0, [pc, #412]	; (8001f5c <cliFatfs+0x26c>)
 8001dc0:	f7ff ff3e 	bl	8001c40 <fatfsDir>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
    if (res != FR_OK)
 8001dca:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d005      	beq.n	8001dde <cliFatfs+0xee>
    {
      cliPrintf(" err : %d\n", res);
 8001dd2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	485e      	ldr	r0, [pc, #376]	; (8001f54 <cliFatfs+0x264>)
 8001dda:	f7ff fcd1 	bl	8001780 <cliPrintf>
    }

    ret = true;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (args->argc == 1 && args->isStr(0, "test") == true)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	881b      	ldrh	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	f040 8092 	bne.w	8001f14 <cliFatfs+0x224>
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	495a      	ldr	r1, [pc, #360]	; (8001f60 <cliFatfs+0x270>)
 8001df8:	2000      	movs	r0, #0
 8001dfa:	4798      	blx	r3
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 8088 	beq.w	8001f14 <cliFatfs+0x224>
  {
    FRESULT fp_ret;
    FIL log_file;
    uint32_t pre_time;

    pre_time = millis();
 8001e04:	f7ff f945 	bl	8001092 <millis>
 8001e08:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
    fp_ret = f_open(&log_file, "1.csv", FA_CREATE_ALWAYS | FA_WRITE | FA_READ);
 8001e0c:	f107 0308 	add.w	r3, r7, #8
 8001e10:	220b      	movs	r2, #11
 8001e12:	4954      	ldr	r1, [pc, #336]	; (8001f64 <cliFatfs+0x274>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f009 ff8b 	bl	800bd30 <f_open>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b
    if (fp_ret == FR_OK)
 8001e20:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d165      	bne.n	8001ef4 <cliFatfs+0x204>
    {
      f_printf(&log_file, "test1, ");
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	494e      	ldr	r1, [pc, #312]	; (8001f68 <cliFatfs+0x278>)
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f00b f96e 	bl	800d110 <f_printf>
      f_printf(&log_file, "test2, ");
 8001e34:	f107 0308 	add.w	r3, r7, #8
 8001e38:	494c      	ldr	r1, [pc, #304]	; (8001f6c <cliFatfs+0x27c>)
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f00b f968 	bl	800d110 <f_printf>
      f_printf(&log_file, "test3, ");
 8001e40:	f107 0308 	add.w	r3, r7, #8
 8001e44:	494a      	ldr	r1, [pc, #296]	; (8001f70 <cliFatfs+0x280>)
 8001e46:	4618      	mov	r0, r3
 8001e48:	f00b f962 	bl	800d110 <f_printf>
      f_printf(&log_file, ", ");
 8001e4c:	f107 0308 	add.w	r3, r7, #8
 8001e50:	4948      	ldr	r1, [pc, #288]	; (8001f74 <cliFatfs+0x284>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f00b f95c 	bl	800d110 <f_printf>
      f_printf(&log_file, "\n");
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	4946      	ldr	r1, [pc, #280]	; (8001f78 <cliFatfs+0x288>)
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f00b f956 	bl	800d110 <f_printf>

      for (int i=0; i<8; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8001e6a:	e00c      	b.n	8001e86 <cliFatfs+0x196>
      {
        f_printf(&log_file, "%d \n", i);
 8001e6c:	f107 0308 	add.w	r3, r7, #8
 8001e70:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8001e74:	4941      	ldr	r1, [pc, #260]	; (8001f7c <cliFatfs+0x28c>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00b f94a 	bl	800d110 <f_printf>
      for (int i=0; i<8; i++)
 8001e7c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001e80:	3301      	adds	r3, #1
 8001e82:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
 8001e86:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8001e8a:	2b07      	cmp	r3, #7
 8001e8c:	ddee      	ble.n	8001e6c <cliFatfs+0x17c>
      }

      f_rewind(&log_file);
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	2100      	movs	r1, #0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f00a fcf1 	bl	800c87c <f_lseek>


      UINT len;
      uint8_t data;

      while(cliKeepLoop())
 8001e9a:	e01c      	b.n	8001ed6 <cliFatfs+0x1e6>
      {
        len = 0;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
        fp_ret = f_read(&log_file, &data, 1, &len);
 8001ea2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 8001ea6:	f207 213b 	addw	r1, r7, #571	; 0x23b
 8001eaa:	f107 0008 	add.w	r0, r7, #8
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f00a f988 	bl	800c1c4 <f_read>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

        if (fp_ret != FR_OK)
 8001eba:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10f      	bne.n	8001ee2 <cliFatfs+0x1f2>
        {
          break;
        }
        if (len == 0)
 8001ec2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d00d      	beq.n	8001ee6 <cliFatfs+0x1f6>
        {
          break;
        }

        cliPrintf("%c", data);
 8001eca:	f897 323b 	ldrb.w	r3, [r7, #571]	; 0x23b
 8001ece:	4619      	mov	r1, r3
 8001ed0:	482b      	ldr	r0, [pc, #172]	; (8001f80 <cliFatfs+0x290>)
 8001ed2:	f7ff fc55 	bl	8001780 <cliPrintf>
      while(cliKeepLoop())
 8001ed6:	f7ff fd4d 	bl	8001974 <cliKeepLoop>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1dd      	bne.n	8001e9c <cliFatfs+0x1ac>
 8001ee0:	e002      	b.n	8001ee8 <cliFatfs+0x1f8>
          break;
 8001ee2:	bf00      	nop
 8001ee4:	e000      	b.n	8001ee8 <cliFatfs+0x1f8>
          break;
 8001ee6:	bf00      	nop
      }

      f_close(&log_file);
 8001ee8:	f107 0308 	add.w	r3, r7, #8
 8001eec:	4618      	mov	r0, r3
 8001eee:	f00a fc9b 	bl	800c828 <f_close>
 8001ef2:	e002      	b.n	8001efa <cliFatfs+0x20a>
    }
    else
    {
      cliPrintf("f_open fail\r\n");
 8001ef4:	4823      	ldr	r0, [pc, #140]	; (8001f84 <cliFatfs+0x294>)
 8001ef6:	f7ff fc43 	bl	8001780 <cliPrintf>
    }
    cliPrintf("%d ms\r\n", millis()-pre_time);
 8001efa:	f7ff f8ca 	bl	8001092 <millis>
 8001efe:	4602      	mov	r2, r0
 8001f00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	4619      	mov	r1, r3
 8001f08:	481f      	ldr	r0, [pc, #124]	; (8001f88 <cliFatfs+0x298>)
 8001f0a:	f7ff fc39 	bl	8001780 <cliPrintf>

    ret = true;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
  }

  if (ret != true)
 8001f14:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8001f18:	f083 0301 	eor.w	r3, r3, #1
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d008      	beq.n	8001f34 <cliFatfs+0x244>
  {
    cliPrintf("fatfs info\n");
 8001f22:	481a      	ldr	r0, [pc, #104]	; (8001f8c <cliFatfs+0x29c>)
 8001f24:	f7ff fc2c 	bl	8001780 <cliPrintf>
    cliPrintf("fatfs dir\n");
 8001f28:	4819      	ldr	r0, [pc, #100]	; (8001f90 <cliFatfs+0x2a0>)
 8001f2a:	f7ff fc29 	bl	8001780 <cliPrintf>
    cliPrintf("fatfs test\n");
 8001f2e:	4819      	ldr	r0, [pc, #100]	; (8001f94 <cliFatfs+0x2a4>)
 8001f30:	f7ff fc26 	bl	8001780 <cliPrintf>
  }
}
 8001f34:	bf00      	nop
 8001f36:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	080186a8 	.word	0x080186a8
 8001f44:	200005a1 	.word	0x200005a1
 8001f48:	080186b0 	.word	0x080186b0
 8001f4c:	080186c4 	.word	0x080186c4
 8001f50:	080186c8 	.word	0x080186c8
 8001f54:	080186fc 	.word	0x080186fc
 8001f58:	08018708 	.word	0x08018708
 8001f5c:	0801870c 	.word	0x0801870c
 8001f60:	08018710 	.word	0x08018710
 8001f64:	08018718 	.word	0x08018718
 8001f68:	08018720 	.word	0x08018720
 8001f6c:	08018728 	.word	0x08018728
 8001f70:	08018730 	.word	0x08018730
 8001f74:	08018738 	.word	0x08018738
 8001f78:	0801873c 	.word	0x0801873c
 8001f7c:	08018740 	.word	0x08018740
 8001f80:	08018748 	.word	0x08018748
 8001f84:	0801874c 	.word	0x0801874c
 8001f88:	0801875c 	.word	0x0801875c
 8001f8c:	08018764 	.word	0x08018764
 8001f90:	08018770 	.word	0x08018770
 8001f94:	0801877c 	.word	0x0801877c

08001f98 <flashInit>:
#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args);
#endif

bool flashInit(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
#ifdef _USE_HW_CLI
	cliAdd("flash", cliFlash);
 8001f9c:	4903      	ldr	r1, [pc, #12]	; (8001fac <flashInit+0x14>)
 8001f9e:	4804      	ldr	r0, [pc, #16]	; (8001fb0 <flashInit+0x18>)
 8001fa0:	f7ff fcfe 	bl	80019a0 <cliAdd>
#endif
  return true;
 8001fa4:	2301      	movs	r3, #1
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	0800216d 	.word	0x0800216d
 8001fb0:	08018788 	.word	0x08018788

08001fb4 <flashErase>:

bool flashErase(uint32_t addr, uint32_t length)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	; 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  bool ret = false;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_StatusTypeDef status;
  FLASH_EraseInitTypeDef init;
  uint32_t page_error;

  int16_t  start_sector_num = -1;
 8001fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc8:	85bb      	strh	r3, [r7, #44]	; 0x2c
  uint32_t sector_count = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62bb      	str	r3, [r7, #40]	; 0x28



  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001fd2:	e015      	b.n	8002000 <flashErase+0x4c>
  {
    if (flashInSector(i, addr, length) == true)
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f000 f86d 	bl	80020bc <flashInSector>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <flashErase+0x46>
    {
      if (start_sector_num < 0)
 8001fe8:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	da01      	bge.n	8001ff4 <flashErase+0x40>
      {
        start_sector_num = i;
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }
      sector_count++;
 8001ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (int i=0; i<FLASH_SECTOR_MAX; i++)
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	2b07      	cmp	r3, #7
 8002004:	dde6      	ble.n	8001fd4 <flashErase+0x20>
    }
  }


  if (sector_count > 0)
 8002006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <flashErase+0x9a>
  {
    HAL_FLASH_Unlock();
 800200c:	f00c f95c 	bl	800e2c8 <HAL_FLASH_Unlock>

    init.TypeErase     = FLASH_TYPEERASE_SECTORS;
 8002010:	2300      	movs	r3, #0
 8002012:	60fb      	str	r3, [r7, #12]
    init.Banks         = FLASH_BANK_1;
 8002014:	2301      	movs	r3, #1
 8002016:	613b      	str	r3, [r7, #16]
    init.Sector        = start_sector_num;
 8002018:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800201c:	617b      	str	r3, [r7, #20]
    init.NbSectors     = sector_count;
 800201e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002020:	61bb      	str	r3, [r7, #24]
    init.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8002022:	2302      	movs	r3, #2
 8002024:	61fb      	str	r3, [r7, #28]

    status = HAL_FLASHEx_Erase(&init, &page_error);
 8002026:	f107 0208 	add.w	r2, r7, #8
 800202a:	f107 030c 	add.w	r3, r7, #12
 800202e:	4611      	mov	r1, r2
 8002030:	4618      	mov	r0, r3
 8002032:	f00c fabb 	bl	800e5ac <HAL_FLASHEx_Erase>
 8002036:	4603      	mov	r3, r0
 8002038:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status == HAL_OK)
 800203c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002040:	2b00      	cmp	r3, #0
 8002042:	d102      	bne.n	800204a <flashErase+0x96>
    {
      ret = true;
 8002044:	2301      	movs	r3, #1
 8002046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    }

    HAL_FLASH_Lock();
 800204a:	f00c f95f 	bl	800e30c <HAL_FLASH_Lock>
  }

  return ret;
 800204e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002052:	4618      	mov	r0, r3
 8002054:	3730      	adds	r7, #48	; 0x30
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}

0800205a <flashWrite>:

bool flashWrite(uint32_t addr, uint8_t *p_data, uint32_t length)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b088      	sub	sp, #32
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
  bool ret = true;
 8002066:	2301      	movs	r3, #1
 8002068:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status;

  HAL_FLASH_Unlock();
 800206a:	f00c f92d 	bl	800e2c8 <HAL_FLASH_Unlock>

  for (int i=0; i<length; i+=1)
 800206e:	2300      	movs	r3, #0
 8002070:	61bb      	str	r3, [r7, #24]
 8002072:	e018      	b.n	80020a6 <flashWrite+0x4c>
  {
    uint16_t data;

    data  = p_data[i+0] << 0;
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	68ba      	ldr	r2, [r7, #8]
 8002078:	4413      	add	r3, r2
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	82fb      	strh	r3, [r7, #22]

    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, addr + i, (uint64_t)data);
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	18d1      	adds	r1, r2, r3
 8002084:	8afa      	ldrh	r2, [r7, #22]
 8002086:	f04f 0300 	mov.w	r3, #0
 800208a:	2000      	movs	r0, #0
 800208c:	f00c f8c8 	bl	800e220 <HAL_FLASH_Program>
 8002090:	4603      	mov	r3, r0
 8002092:	757b      	strb	r3, [r7, #21]
    if (status != HAL_OK)
 8002094:	7d7b      	ldrb	r3, [r7, #21]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d002      	beq.n	80020a0 <flashWrite+0x46>
    {
      ret = false;
 800209a:	2300      	movs	r3, #0
 800209c:	77fb      	strb	r3, [r7, #31]
      break;
 800209e:	e006      	b.n	80020ae <flashWrite+0x54>
  for (int i=0; i<length; i+=1)
 80020a0:	69bb      	ldr	r3, [r7, #24]
 80020a2:	3301      	adds	r3, #1
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d8e2      	bhi.n	8002074 <flashWrite+0x1a>
    }
  }

  HAL_FLASH_Lock();
 80020ae:	f00c f92d 	bl	800e30c <HAL_FLASH_Lock>

  return ret;
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3720      	adds	r7, #32
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <flashInSector>:

  return ret;
}

bool flashInSector(uint16_t sector_num, uint32_t addr, uint32_t length)
{
 80020bc:	b480      	push	{r7}
 80020be:	b08b      	sub	sp, #44	; 0x2c
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	81fb      	strh	r3, [r7, #14]
  bool ret = false;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t sector_end;
  uint32_t flash_start;
  uint32_t flash_end;


  sector_start = flash_tbl[sector_num].addr;
 80020d0:	89fb      	ldrh	r3, [r7, #14]
 80020d2:	4a25      	ldr	r2, [pc, #148]	; (8002168 <flashInSector+0xac>)
 80020d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80020d8:	623b      	str	r3, [r7, #32]
  sector_end   = flash_tbl[sector_num].addr + flash_tbl[sector_num].length - 1;
 80020da:	89fb      	ldrh	r3, [r7, #14]
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <flashInSector+0xac>)
 80020de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 80020e2:	89fb      	ldrh	r3, [r7, #14]
 80020e4:	4920      	ldr	r1, [pc, #128]	; (8002168 <flashInSector+0xac>)
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	440b      	add	r3, r1
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	3b01      	subs	r3, #1
 80020f0:	61fb      	str	r3, [r7, #28]
  flash_start  = addr;
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	61bb      	str	r3, [r7, #24]
  flash_end    = addr + length - 1;
 80020f6:	68ba      	ldr	r2, [r7, #8]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4413      	add	r3, r2
 80020fc:	3b01      	subs	r3, #1
 80020fe:	617b      	str	r3, [r7, #20]


  if (sector_start >= flash_start && sector_start <= flash_end)
 8002100:	6a3a      	ldr	r2, [r7, #32]
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	429a      	cmp	r2, r3
 8002106:	d306      	bcc.n	8002116 <flashInSector+0x5a>
 8002108:	6a3a      	ldr	r2, [r7, #32]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	429a      	cmp	r2, r3
 800210e:	d802      	bhi.n	8002116 <flashInSector+0x5a>
  {
    ret = true;
 8002110:	2301      	movs	r3, #1
 8002112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (sector_end >= flash_start && sector_end <= flash_end)
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	429a      	cmp	r2, r3
 800211c:	d306      	bcc.n	800212c <flashInSector+0x70>
 800211e:	69fa      	ldr	r2, [r7, #28]
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	429a      	cmp	r2, r3
 8002124:	d802      	bhi.n	800212c <flashInSector+0x70>
  {
    ret = true;
 8002126:	2301      	movs	r3, #1
 8002128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_start >= sector_start && flash_start <= sector_end)
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	429a      	cmp	r2, r3
 8002132:	d306      	bcc.n	8002142 <flashInSector+0x86>
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	429a      	cmp	r2, r3
 800213a:	d802      	bhi.n	8002142 <flashInSector+0x86>
  {
    ret = true;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (flash_end >= sector_start && flash_end <= sector_end)
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	429a      	cmp	r2, r3
 8002148:	d306      	bcc.n	8002158 <flashInSector+0x9c>
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	429a      	cmp	r2, r3
 8002150:	d802      	bhi.n	8002158 <flashInSector+0x9c>
  {
    ret = true;
 8002152:	2301      	movs	r3, #1
 8002154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return ret;
 8002158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800215c:	4618      	mov	r0, r3
 800215e:	372c      	adds	r7, #44	; 0x2c
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr
 8002168:	20000010 	.word	0x20000010

0800216c <cliFlash>:



#ifdef _USE_HW_CLI
static void cliFlash(cli_args_t *args)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b08c      	sub	sp, #48	; 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
	bool ret = false;
 8002174:	2300      	movs	r3, #0
 8002176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (args -> argc == 1 && args -> isStr(0, "info") == true)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	881b      	ldrh	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d121      	bne.n	80021c6 <cliFlash+0x5a>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	695b      	ldr	r3, [r3, #20]
 8002186:	495e      	ldr	r1, [pc, #376]	; (8002300 <cliFlash+0x194>)
 8002188:	2000      	movs	r0, #0
 800218a:	4798      	blx	r3
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d019      	beq.n	80021c6 <cliFlash+0x5a>
	{
		for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
 8002196:	e010      	b.n	80021ba <cliFlash+0x4e>
		{
			cliPrintf("0x%X : %dKB\n", flash_tbl[i].addr, flash_tbl[i].length/1024);
 8002198:	4a5a      	ldr	r2, [pc, #360]	; (8002304 <cliFlash+0x198>)
 800219a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800219c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <cliFlash+0x198>)
 80021a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a4:	00db      	lsls	r3, r3, #3
 80021a6:	4413      	add	r3, r2
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a9b      	lsrs	r3, r3, #10
 80021ac:	461a      	mov	r2, r3
 80021ae:	4856      	ldr	r0, [pc, #344]	; (8002308 <cliFlash+0x19c>)
 80021b0:	f7ff fae6 	bl	8001780 <cliPrintf>
		for (int i = 0; i < FLASH_SECTOR_MAX; i++)
 80021b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b6:	3301      	adds	r3, #1
 80021b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80021ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021bc:	2b07      	cmp	r3, #7
 80021be:	ddeb      	ble.n	8002198 <cliFlash+0x2c>
		}

		ret = true;
 80021c0:	2301      	movs	r3, #1
 80021c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (args -> argc == 3 && args -> isStr(0, "read") == true)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	881b      	ldrh	r3, [r3, #0]
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d12b      	bne.n	8002226 <cliFlash+0xba>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	494e      	ldr	r1, [pc, #312]	; (800230c <cliFlash+0x1a0>)
 80021d4:	2000      	movs	r0, #0
 80021d6:	4798      	blx	r3
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d023      	beq.n	8002226 <cliFlash+0xba>
	{
		uint32_t addr;
		uint32_t length;

		addr   = (uint32_t)args -> getData(1);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2001      	movs	r0, #1
 80021e4:	4798      	blx	r3
 80021e6:	4603      	mov	r3, r0
 80021e8:	623b      	str	r3, [r7, #32]
		length = (uint32_t)args -> getData(2);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2002      	movs	r0, #2
 80021f0:	4798      	blx	r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	61fb      	str	r3, [r7, #28]

		for (int i = 0; i < length; i++)
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
 80021fa:	e00d      	b.n	8002218 <cliFlash+0xac>
		{
			cliPrintf("0x%X : 0x%X\n", addr+i, *((uint8_t *)(addr+i)));
 80021fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021fe:	6a3b      	ldr	r3, [r7, #32]
 8002200:	18d1      	adds	r1, r2, r3
 8002202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002204:	6a3b      	ldr	r3, [r7, #32]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	461a      	mov	r2, r3
 800220c:	4840      	ldr	r0, [pc, #256]	; (8002310 <cliFlash+0x1a4>)
 800220e:	f7ff fab7 	bl	8001780 <cliPrintf>
		for (int i = 0; i < length; i++)
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	3301      	adds	r3, #1
 8002216:	627b      	str	r3, [r7, #36]	; 0x24
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	429a      	cmp	r2, r3
 800221e:	d8ed      	bhi.n	80021fc <cliFlash+0x90>
		}

		ret = true;
 8002220:	2301      	movs	r3, #1
 8002222:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	 }

	if (args -> argc == 3 && args -> isStr(0, "erase") == true)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	881b      	ldrh	r3, [r3, #0]
 800222a:	2b03      	cmp	r3, #3
 800222c:	d124      	bne.n	8002278 <cliFlash+0x10c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4938      	ldr	r1, [pc, #224]	; (8002314 <cliFlash+0x1a8>)
 8002234:	2000      	movs	r0, #0
 8002236:	4798      	blx	r3
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01c      	beq.n	8002278 <cliFlash+0x10c>
	{
		uint32_t addr;
		uint32_t length;

		addr   = (uint32_t)args -> getData(1);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	2001      	movs	r0, #1
 8002244:	4798      	blx	r3
 8002246:	4603      	mov	r3, r0
 8002248:	61bb      	str	r3, [r7, #24]
		length = (uint32_t)args -> getData(2);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	2002      	movs	r0, #2
 8002250:	4798      	blx	r3
 8002252:	4603      	mov	r3, r0
 8002254:	617b      	str	r3, [r7, #20]

		if(flashErase(addr, length) == true)
 8002256:	6979      	ldr	r1, [r7, #20]
 8002258:	69b8      	ldr	r0, [r7, #24]
 800225a:	f7ff feab 	bl	8001fb4 <flashErase>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d003      	beq.n	800226c <cliFlash+0x100>
		{
			cliPrintf("Erase OK\n");
 8002264:	482c      	ldr	r0, [pc, #176]	; (8002318 <cliFlash+0x1ac>)
 8002266:	f7ff fa8b 	bl	8001780 <cliPrintf>
 800226a:	e002      	b.n	8002272 <cliFlash+0x106>
		}
		else
		{
			cliPrintf("Erase Fail\n");
 800226c:	482b      	ldr	r0, [pc, #172]	; (800231c <cliFlash+0x1b0>)
 800226e:	f7ff fa87 	bl	8001780 <cliPrintf>
		}

		ret = true;
 8002272:	2301      	movs	r3, #1
 8002274:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (args -> argc == 3 && args -> isStr(0, "write") == true)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d127      	bne.n	80022d0 <cliFlash+0x164>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	4926      	ldr	r1, [pc, #152]	; (8002320 <cliFlash+0x1b4>)
 8002286:	2000      	movs	r0, #0
 8002288:	4798      	blx	r3
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d01f      	beq.n	80022d0 <cliFlash+0x164>
	{
		uint32_t addr;
		uint32_t data;

		addr   = (uint32_t)args -> getData(1);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	2001      	movs	r0, #1
 8002296:	4798      	blx	r3
 8002298:	4603      	mov	r3, r0
 800229a:	613b      	str	r3, [r7, #16]
		data   = (uint32_t)args -> getData(2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	2002      	movs	r0, #2
 80022a2:	4798      	blx	r3
 80022a4:	4603      	mov	r3, r0
 80022a6:	60fb      	str	r3, [r7, #12]

		if (flashWrite(addr, (uint8_t *)&data, 4) == true)
 80022a8:	f107 030c 	add.w	r3, r7, #12
 80022ac:	2204      	movs	r2, #4
 80022ae:	4619      	mov	r1, r3
 80022b0:	6938      	ldr	r0, [r7, #16]
 80022b2:	f7ff fed2 	bl	800205a <flashWrite>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <cliFlash+0x158>
		{
			cliPrintf("Write OK\n");
 80022bc:	4819      	ldr	r0, [pc, #100]	; (8002324 <cliFlash+0x1b8>)
 80022be:	f7ff fa5f 	bl	8001780 <cliPrintf>
 80022c2:	e002      	b.n	80022ca <cliFlash+0x15e>
		}
		else
		{
			cliPrintf("Write Fail\n");
 80022c4:	4818      	ldr	r0, [pc, #96]	; (8002328 <cliFlash+0x1bc>)
 80022c6:	f7ff fa5b 	bl	8001780 <cliPrintf>
		}

		ret = true;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	if (ret != true)
 80022d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80022d4:	f083 0301 	eor.w	r3, r3, #1
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <cliFlash+0x18a>
	{
		cliPrintf("flash info\n");
 80022de:	4813      	ldr	r0, [pc, #76]	; (800232c <cliFlash+0x1c0>)
 80022e0:	f7ff fa4e 	bl	8001780 <cliPrintf>
		cliPrintf("flash read  addr length\n");
 80022e4:	4812      	ldr	r0, [pc, #72]	; (8002330 <cliFlash+0x1c4>)
 80022e6:	f7ff fa4b 	bl	8001780 <cliPrintf>
		cliPrintf("flash erase addr length\n");
 80022ea:	4812      	ldr	r0, [pc, #72]	; (8002334 <cliFlash+0x1c8>)
 80022ec:	f7ff fa48 	bl	8001780 <cliPrintf>
		cliPrintf("flash write addr data\n");
 80022f0:	4811      	ldr	r0, [pc, #68]	; (8002338 <cliFlash+0x1cc>)
 80022f2:	f7ff fa45 	bl	8001780 <cliPrintf>
	}

}
 80022f6:	bf00      	nop
 80022f8:	3730      	adds	r7, #48	; 0x30
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	08018790 	.word	0x08018790
 8002304:	20000010 	.word	0x20000010
 8002308:	08018798 	.word	0x08018798
 800230c:	080187a8 	.word	0x080187a8
 8002310:	080187b0 	.word	0x080187b0
 8002314:	080187c0 	.word	0x080187c0
 8002318:	080187c8 	.word	0x080187c8
 800231c:	080187d4 	.word	0x080187d4
 8002320:	080187e0 	.word	0x080187e0
 8002324:	080187e8 	.word	0x080187e8
 8002328:	080187f4 	.word	0x080187f4
 800232c:	08018800 	.word	0x08018800
 8002330:	0801880c 	.word	0x0801880c
 8002334:	08018828 	.word	0x08018828
 8002338:	08018844 	.word	0x08018844

0800233c <gpioInit>:
#endif /* _USE_HW_CLI */



bool gpioInit(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
	bool ret = true;
 8002342:	2301      	movs	r3, #1
 8002344:	72fb      	strb	r3, [r7, #11]

	__HAL_RCC_GPIOB_CLK_ENABLE(); /* 클럭 설정  */
 8002346:	2300      	movs	r3, #0
 8002348:	607b      	str	r3, [r7, #4]
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <gpioInit+0x84>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a1c      	ldr	r2, [pc, #112]	; (80023c0 <gpioInit+0x84>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <gpioInit+0x84>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]

	for(int i = 0; i < GPIO_MAX_CH; i++)
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	e01e      	b.n	80023a6 <gpioInit+0x6a>
	{
		gpioPinMode(i, gpio_tbl[i].mode);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	b2d8      	uxtb	r0, r3
 800236c:	4915      	ldr	r1, [pc, #84]	; (80023c4 <gpioInit+0x88>)
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3308      	adds	r3, #8
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	4619      	mov	r1, r3
 8002380:	f000 f826 	bl	80023d0 <gpioPinMode>
		gpioPinWrite(i, gpio_tbl[i].init_value);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	b2d8      	uxtb	r0, r3
 8002388:	490e      	ldr	r1, [pc, #56]	; (80023c4 <gpioInit+0x88>)
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	4613      	mov	r3, r2
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	330b      	adds	r3, #11
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4619      	mov	r1, r3
 800239c:	f000 f87a 	bl	8002494 <gpioPinWrite>
	for(int i = 0; i < GPIO_MAX_CH; i++)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	dddd      	ble.n	8002368 <gpioInit+0x2c>
	}

#ifdef _USE_HW_CLI
	cliAdd("gpio", cliGpio);
 80023ac:	4906      	ldr	r1, [pc, #24]	; (80023c8 <gpioInit+0x8c>)
 80023ae:	4807      	ldr	r0, [pc, #28]	; (80023cc <gpioInit+0x90>)
 80023b0:	f7ff faf6 	bl	80019a0 <cliAdd>
#endif /* _USE_HW_CLI */

	return ret;
 80023b4:	7afb      	ldrb	r3, [r7, #11]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3710      	adds	r7, #16
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	40023800 	.word	0x40023800
 80023c4:	20000050 	.word	0x20000050
 80023c8:	080025a9 	.word	0x080025a9
 80023cc:	0801885c 	.word	0x0801885c

080023d0 <gpioPinMode>:


bool gpioPinMode(uint8_t ch, uint8_t mode)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b088      	sub	sp, #32
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	460a      	mov	r2, r1
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	4613      	mov	r3, r2
 80023de:	71bb      	strb	r3, [r7, #6]
	bool ret = true;
 80023e0:	2301      	movs	r3, #1
 80023e2:	77fb      	strb	r3, [r7, #31]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	2200      	movs	r2, #0
 80023ea:	601a      	str	r2, [r3, #0]
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	609a      	str	r2, [r3, #8]
 80023f0:	60da      	str	r2, [r3, #12]
 80023f2:	611a      	str	r2, [r3, #16]

	switch(mode)
 80023f4:	79bb      	ldrb	r3, [r7, #6]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d82c      	bhi.n	8002454 <gpioPinMode+0x84>
 80023fa:	a201      	add	r2, pc, #4	; (adr r2, 8002400 <gpioPinMode+0x30>)
 80023fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002400:	08002419 	.word	0x08002419
 8002404:	08002423 	.word	0x08002423
 8002408:	0800242d 	.word	0x0800242d
 800240c:	08002437 	.word	0x08002437
 8002410:	08002441 	.word	0x08002441
 8002414:	0800244b 	.word	0x0800244b
	{
		case _DEF_INPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002418:	2300      	movs	r3, #0
 800241a:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	613b      	str	r3, [r7, #16]
			break;
 8002420:	e018      	b.n	8002454 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002426:	2301      	movs	r3, #1
 8002428:	613b      	str	r3, [r7, #16]
			break;
 800242a:	e013      	b.n	8002454 <gpioPinMode+0x84>

		case _DEF_INPUT_PULLDOWN:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800242c:	2300      	movs	r3, #0
 800242e:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002430:	2302      	movs	r3, #2
 8002432:	613b      	str	r3, [r7, #16]
			break;
 8002434:	e00e      	b.n	8002454 <gpioPinMode+0x84>

		case _DEF_OUTPUT:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8002436:	2301      	movs	r3, #1
 8002438:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	613b      	str	r3, [r7, #16]
			break;
 800243e:	e009      	b.n	8002454 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLUP:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 8002440:	2301      	movs	r3, #1
 8002442:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002444:	2301      	movs	r3, #1
 8002446:	613b      	str	r3, [r7, #16]
			break;
 8002448:	e004      	b.n	8002454 <gpioPinMode+0x84>

		case _DEF_OUTPUT_PULLDWON:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; /* PUSH-PULL 출력 구조 */
 800244a:	2301      	movs	r3, #1
 800244c:	60fb      	str	r3, [r7, #12]
			GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800244e:	2302      	movs	r3, #2
 8002450:	613b      	str	r3, [r7, #16]
			break;
 8002452:	bf00      	nop
	  }


	GPIO_InitStruct.Pin = gpio_tbl[ch].pin;
 8002454:	79fa      	ldrb	r2, [r7, #7]
 8002456:	490e      	ldr	r1, [pc, #56]	; (8002490 <gpioPinMode+0xc0>)
 8002458:	4613      	mov	r3, r2
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3304      	adds	r3, #4
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gpio_tbl[ch].port, &GPIO_InitStruct);
 8002468:	79fa      	ldrb	r2, [r7, #7]
 800246a:	4909      	ldr	r1, [pc, #36]	; (8002490 <gpioPinMode+0xc0>)
 800246c:	4613      	mov	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f107 0208 	add.w	r2, r7, #8
 800247c:	4611      	mov	r1, r2
 800247e:	4618      	mov	r0, r3
 8002480:	f00c f9b6 	bl	800e7f0 <HAL_GPIO_Init>


	return ret;
 8002484:	7ffb      	ldrb	r3, [r7, #31]
}
 8002486:	4618      	mov	r0, r3
 8002488:	3720      	adds	r7, #32
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000050 	.word	0x20000050

08002494 <gpioPinWrite>:


void gpioPinWrite(uint8_t ch, bool value)
{
 8002494:	b590      	push	{r4, r7, lr}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	460a      	mov	r2, r1
 800249e:	71fb      	strb	r3, [r7, #7]
 80024a0:	4613      	mov	r3, r2
 80024a2:	71bb      	strb	r3, [r7, #6]
	if( ch >= GPIO_MAX_CH)
 80024a4:	79fb      	ldrb	r3, [r7, #7]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d840      	bhi.n	800252c <gpioPinWrite+0x98>
	{
		return ;
	}

	if (value == true)
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d01e      	beq.n	80024ee <gpioPinWrite+0x5a>
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].on_state);
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	4920      	ldr	r1, [pc, #128]	; (8002534 <gpioPinWrite+0xa0>)
 80024b4:	4613      	mov	r3, r2
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	4413      	add	r3, r2
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	6818      	ldr	r0, [r3, #0]
 80024c0:	79fa      	ldrb	r2, [r7, #7]
 80024c2:	491c      	ldr	r1, [pc, #112]	; (8002534 <gpioPinWrite+0xa0>)
 80024c4:	4613      	mov	r3, r2
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	4413      	add	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	440b      	add	r3, r1
 80024ce:	3304      	adds	r3, #4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	b299      	uxth	r1, r3
 80024d4:	79fa      	ldrb	r2, [r7, #7]
 80024d6:	4c17      	ldr	r4, [pc, #92]	; (8002534 <gpioPinWrite+0xa0>)
 80024d8:	4613      	mov	r3, r2
 80024da:	005b      	lsls	r3, r3, #1
 80024dc:	4413      	add	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4423      	add	r3, r4
 80024e2:	3309      	adds	r3, #9
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	461a      	mov	r2, r3
 80024e8:	f00c fb1e 	bl	800eb28 <HAL_GPIO_WritePin>
 80024ec:	e01f      	b.n	800252e <gpioPinWrite+0x9a>
	}
	else
	{
		  HAL_GPIO_WritePin(gpio_tbl[ch].port, gpio_tbl[ch].pin, gpio_tbl[ch].off_state);
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	4910      	ldr	r1, [pc, #64]	; (8002534 <gpioPinWrite+0xa0>)
 80024f2:	4613      	mov	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	4413      	add	r3, r2
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	440b      	add	r3, r1
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	79fa      	ldrb	r2, [r7, #7]
 8002500:	490c      	ldr	r1, [pc, #48]	; (8002534 <gpioPinWrite+0xa0>)
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	440b      	add	r3, r1
 800250c:	3304      	adds	r3, #4
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	b299      	uxth	r1, r3
 8002512:	79fa      	ldrb	r2, [r7, #7]
 8002514:	4c07      	ldr	r4, [pc, #28]	; (8002534 <gpioPinWrite+0xa0>)
 8002516:	4613      	mov	r3, r2
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	4413      	add	r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4423      	add	r3, r4
 8002520:	330a      	adds	r3, #10
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	f00c faff 	bl	800eb28 <HAL_GPIO_WritePin>
 800252a:	e000      	b.n	800252e <gpioPinWrite+0x9a>
		return ;
 800252c:	bf00      	nop
	}

}
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	bd90      	pop	{r4, r7, pc}
 8002534:	20000050 	.word	0x20000050

08002538 <gpioPinRead>:


bool gpioPinRead(uint8_t ch)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	4603      	mov	r3, r0
 8002540:	71fb      	strb	r3, [r7, #7]

	bool ret = false;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]

	if( ch >= GPIO_MAX_CH)
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d901      	bls.n	8002550 <gpioPinRead+0x18>
	{
		return false;
 800254c:	2300      	movs	r3, #0
 800254e:	e024      	b.n	800259a <gpioPinRead+0x62>
	}

	if (HAL_GPIO_ReadPin(gpio_tbl[ch].port, gpio_tbl[ch].pin) == gpio_tbl[ch].on_state)
 8002550:	79fa      	ldrb	r2, [r7, #7]
 8002552:	4914      	ldr	r1, [pc, #80]	; (80025a4 <gpioPinRead+0x6c>)
 8002554:	4613      	mov	r3, r2
 8002556:	005b      	lsls	r3, r3, #1
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	6818      	ldr	r0, [r3, #0]
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	4910      	ldr	r1, [pc, #64]	; (80025a4 <gpioPinRead+0x6c>)
 8002564:	4613      	mov	r3, r2
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4413      	add	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	440b      	add	r3, r1
 800256e:	3304      	adds	r3, #4
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	b29b      	uxth	r3, r3
 8002574:	4619      	mov	r1, r3
 8002576:	f00c fabf 	bl	800eaf8 <HAL_GPIO_ReadPin>
 800257a:	4603      	mov	r3, r0
 800257c:	4618      	mov	r0, r3
 800257e:	79fa      	ldrb	r2, [r7, #7]
 8002580:	4908      	ldr	r1, [pc, #32]	; (80025a4 <gpioPinRead+0x6c>)
 8002582:	4613      	mov	r3, r2
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	3309      	adds	r3, #9
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	4298      	cmp	r0, r3
 8002592:	d101      	bne.n	8002598 <gpioPinRead+0x60>
	{
		ret = true;
 8002594:	2301      	movs	r3, #1
 8002596:	73fb      	strb	r3, [r7, #15]
	}

	return ret;
 8002598:	7bfb      	ldrb	r3, [r7, #15]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	20000050 	.word	0x20000050

080025a8 <cliGpio>:

#ifdef _USE_HW_CLI


static void cliGpio(cli_args_t *args)
{
 80025a8:	b590      	push	{r4, r7, lr}
 80025aa:	b087      	sub	sp, #28
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	bool ret = false;
 80025b0:	2300      	movs	r3, #0
 80025b2:	75fb      	strb	r3, [r7, #23]

	if (args -> argc == 1 && args -> isStr(0, "show") == true)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	881b      	ldrh	r3, [r3, #0]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d128      	bne.n	800260e <cliGpio+0x66>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	695b      	ldr	r3, [r3, #20]
 80025c0:	4947      	ldr	r1, [pc, #284]	; (80026e0 <cliGpio+0x138>)
 80025c2:	2000      	movs	r0, #0
 80025c4:	4798      	blx	r3
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <cliGpio+0x66>
	{
		while (cliKeepLoop())
 80025cc:	e018      	b.n	8002600 <cliGpio+0x58>
		{
			for (int i=0; i < GPIO_MAX_CH; i++)
 80025ce:	2300      	movs	r3, #0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e00c      	b.n	80025ee <cliGpio+0x46>
			{
				cliPrintf("%d", gpioPinRead(i));
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ffad 	bl	8002538 <gpioPinRead>
 80025de:	4603      	mov	r3, r0
 80025e0:	4619      	mov	r1, r3
 80025e2:	4840      	ldr	r0, [pc, #256]	; (80026e4 <cliGpio+0x13c>)
 80025e4:	f7ff f8cc 	bl	8001780 <cliPrintf>
			for (int i=0; i < GPIO_MAX_CH; i++)
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	3301      	adds	r3, #1
 80025ec:	613b      	str	r3, [r7, #16]
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	ddef      	ble.n	80025d4 <cliGpio+0x2c>
			}
			cliPrintf("\n");
 80025f4:	483c      	ldr	r0, [pc, #240]	; (80026e8 <cliGpio+0x140>)
 80025f6:	f7ff f8c3 	bl	8001780 <cliPrintf>
			delay(100);
 80025fa:	2064      	movs	r0, #100	; 0x64
 80025fc:	f7fe fd3e 	bl	800107c <delay>
		while (cliKeepLoop())
 8002600:	f7ff f9b8 	bl	8001974 <cliKeepLoop>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d1e1      	bne.n	80025ce <cliGpio+0x26>
		}
		ret = true;
 800260a:	2301      	movs	r3, #1
 800260c:	75fb      	strb	r3, [r7, #23]
	}

	if (args -> argc == 2 && args -> isStr(0, "read") == true)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	2b02      	cmp	r3, #2
 8002614:	d123      	bne.n	800265e <cliGpio+0xb6>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	4934      	ldr	r1, [pc, #208]	; (80026ec <cliGpio+0x144>)
 800261c:	2000      	movs	r0, #0
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01b      	beq.n	800265e <cliGpio+0xb6>
	{
		uint8_t ch;

		ch = (uint8_t)args -> getData(1);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2001      	movs	r0, #1
 800262c:	4798      	blx	r3
 800262e:	4603      	mov	r3, r0
 8002630:	73fb      	strb	r3, [r7, #15]

		while(cliKeepLoop())
 8002632:	e00d      	b.n	8002650 <cliGpio+0xa8>
		{
			cliPrintf("gpio read %d : %d\n", ch, gpioPinRead(ch));
 8002634:	7bfc      	ldrb	r4, [r7, #15]
 8002636:	7bfb      	ldrb	r3, [r7, #15]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff7d 	bl	8002538 <gpioPinRead>
 800263e:	4603      	mov	r3, r0
 8002640:	461a      	mov	r2, r3
 8002642:	4621      	mov	r1, r4
 8002644:	482a      	ldr	r0, [pc, #168]	; (80026f0 <cliGpio+0x148>)
 8002646:	f7ff f89b 	bl	8001780 <cliPrintf>
			delay(100);
 800264a:	2064      	movs	r0, #100	; 0x64
 800264c:	f7fe fd16 	bl	800107c <delay>
		while(cliKeepLoop())
 8002650:	f7ff f990 	bl	8001974 <cliKeepLoop>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ec      	bne.n	8002634 <cliGpio+0x8c>
		}
		ret = true;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
	}

	if(args -> argc == 3 && args -> isStr(0, "write") == true)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2b03      	cmp	r3, #3
 8002664:	d126      	bne.n	80026b4 <cliGpio+0x10c>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	4922      	ldr	r1, [pc, #136]	; (80026f4 <cliGpio+0x14c>)
 800266c:	2000      	movs	r0, #0
 800266e:	4798      	blx	r3
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d01e      	beq.n	80026b4 <cliGpio+0x10c>
	{
		uint8_t ch;
		uint8_t value;

		ch 	  = (uint8_t)args -> getData(1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2001      	movs	r0, #1
 800267c:	4798      	blx	r3
 800267e:	4603      	mov	r3, r0
 8002680:	73bb      	strb	r3, [r7, #14]
		value = (uint8_t)args -> getData(2);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2002      	movs	r0, #2
 8002688:	4798      	blx	r3
 800268a:	4603      	mov	r3, r0
 800268c:	737b      	strb	r3, [r7, #13]

		gpioPinWrite(ch, value);
 800268e:	7b7b      	ldrb	r3, [r7, #13]
 8002690:	2b00      	cmp	r3, #0
 8002692:	bf14      	ite	ne
 8002694:	2301      	movne	r3, #1
 8002696:	2300      	moveq	r3, #0
 8002698:	b2da      	uxtb	r2, r3
 800269a:	7bbb      	ldrb	r3, [r7, #14]
 800269c:	4611      	mov	r1, r2
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff fef8 	bl	8002494 <gpioPinWrite>
		cliPrintf("gpio write %d : %d\n", ch ,value);
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	7b7a      	ldrb	r2, [r7, #13]
 80026a8:	4619      	mov	r1, r3
 80026aa:	4813      	ldr	r0, [pc, #76]	; (80026f8 <cliGpio+0x150>)
 80026ac:	f7ff f868 	bl	8001780 <cliPrintf>

		ret = true;
 80026b0:	2301      	movs	r3, #1
 80026b2:	75fb      	strb	r3, [r7, #23]
	}

	if (ret != true)
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	f083 0301 	eor.w	r3, r3, #1
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d00a      	beq.n	80026d6 <cliGpio+0x12e>
	{
		cliPrintf("gpio show\n");
 80026c0:	480e      	ldr	r0, [pc, #56]	; (80026fc <cliGpio+0x154>)
 80026c2:	f7ff f85d 	bl	8001780 <cliPrintf>
		cliPrintf("gpio read ch[0~%d]\n", GPIO_MAX_CH-1);
 80026c6:	2103      	movs	r1, #3
 80026c8:	480d      	ldr	r0, [pc, #52]	; (8002700 <cliGpio+0x158>)
 80026ca:	f7ff f859 	bl	8001780 <cliPrintf>
		cliPrintf("gpio write ch[0~%d] 0:1\n", GPIO_MAX_CH-1);
 80026ce:	2103      	movs	r1, #3
 80026d0:	480c      	ldr	r0, [pc, #48]	; (8002704 <cliGpio+0x15c>)
 80026d2:	f7ff f855 	bl	8001780 <cliPrintf>
	}

}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd90      	pop	{r4, r7, pc}
 80026de:	bf00      	nop
 80026e0:	08018864 	.word	0x08018864
 80026e4:	0801886c 	.word	0x0801886c
 80026e8:	08018870 	.word	0x08018870
 80026ec:	08018874 	.word	0x08018874
 80026f0:	0801887c 	.word	0x0801887c
 80026f4:	08018890 	.word	0x08018890
 80026f8:	08018898 	.word	0x08018898
 80026fc:	080188ac 	.word	0x080188ac
 8002700:	080188b8 	.word	0x080188b8
 8002704:	080188cc 	.word	0x080188cc

08002708 <TransferDoneISR>:
#ifdef _USE_HW_CLI
static void cliLcd(cli_args_t *args);
#endif

void TransferDoneISR(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  fps_time = millis() - fps_pre_time;
 800270c:	f7fe fcc1 	bl	8001092 <millis>
 8002710:	4602      	mov	r2, r0
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <TransferDoneISR+0x40>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	4a0c      	ldr	r2, [pc, #48]	; (800274c <TransferDoneISR+0x44>)
 800271a:	6013      	str	r3, [r2, #0]
  fps_pre_time = millis();
 800271c:	f7fe fcb9 	bl	8001092 <millis>
 8002720:	4603      	mov	r3, r0
 8002722:	4a09      	ldr	r2, [pc, #36]	; (8002748 <TransferDoneISR+0x40>)
 8002724:	6013      	str	r3, [r2, #0]

  if (fps_time > 0)
 8002726:	4b09      	ldr	r3, [pc, #36]	; (800274c <TransferDoneISR+0x44>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d007      	beq.n	800273e <TransferDoneISR+0x36>
  {
    fps_count = 1000 / fps_time;
 800272e:	4b07      	ldr	r3, [pc, #28]	; (800274c <TransferDoneISR+0x44>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002736:	fbb2 f3f3 	udiv	r3, r2, r3
 800273a:	4a05      	ldr	r2, [pc, #20]	; (8002750 <TransferDoneISR+0x48>)
 800273c:	6013      	str	r3, [r2, #0]
  }

  lcd_request_draw = false;
 800273e:	4b05      	ldr	r3, [pc, #20]	; (8002754 <TransferDoneISR+0x4c>)
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	bd80      	pop	{r7, pc}
 8002748:	200005c4 	.word	0x200005c4
 800274c:	200005c8 	.word	0x200005c8
 8002750:	200005cc 	.word	0x200005cc
 8002754:	200005c2 	.word	0x200005c2

08002758 <lcdInit>:


bool lcdInit(void)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af02      	add	r7, sp, #8
  backlight_value = 100;
 800275e:	4b22      	ldr	r3, [pc, #136]	; (80027e8 <lcdInit+0x90>)
 8002760:	2264      	movs	r2, #100	; 0x64
 8002762:	701a      	strb	r2, [r3, #0]


#ifdef _USE_HW_ST7735
  st7735Init();
 8002764:	f002 fa6a 	bl	8004c3c <st7735Init>
  st7735InitDriver(&lcd);
 8002768:	4820      	ldr	r0, [pc, #128]	; (80027ec <lcdInit+0x94>)
 800276a:	f002 fa73 	bl	8004c54 <st7735InitDriver>
#endif

  lcd.setCallBack(TransferDoneISR);
 800276e:	4b1f      	ldr	r3, [pc, #124]	; (80027ec <lcdInit+0x94>)
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	481f      	ldr	r0, [pc, #124]	; (80027f0 <lcdInit+0x98>)
 8002774:	4798      	blx	r3


  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002776:	2300      	movs	r3, #0
 8002778:	607b      	str	r3, [r7, #4]
 800277a:	e007      	b.n	800278c <lcdInit+0x34>
  {
    frame_buffer[0][i] = black;
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <lcdInit+0x9c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2100      	movs	r1, #0
 8002782:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  for (int i=0; i<LCD_WIDTH*LCD_HEIGHT; i++)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f5b3 5f48 	cmp.w	r3, #12800	; 0x3200
 8002792:	dbf3      	blt.n	800277c <lcdInit+0x24>
  }
  memset(frame_buffer, 0x00, sizeof(frame_buffer));
 8002794:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 8002798:	2100      	movs	r1, #0
 800279a:	4816      	ldr	r0, [pc, #88]	; (80027f4 <lcdInit+0x9c>)
 800279c:	f012 fc4e 	bl	801503c <memset>

  p_draw_frame_buf = frame_buffer[frame_index];
 80027a0:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <lcdInit+0xa0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	461a      	mov	r2, r3
 80027a6:	f44f 43c8 	mov.w	r3, #25600	; 0x6400
 80027aa:	fb03 f302 	mul.w	r3, r3, r2
 80027ae:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <lcdInit+0x9c>)
 80027b0:	4413      	add	r3, r2
 80027b2:	4a12      	ldr	r2, [pc, #72]	; (80027fc <lcdInit+0xa4>)
 80027b4:	6013      	str	r3, [r2, #0]

  lcdDrawFillRect(0, 0, LCD_WIDTH, LCD_HEIGHT, black);
 80027b6:	2300      	movs	r3, #0
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2350      	movs	r3, #80	; 0x50
 80027bc:	22a0      	movs	r2, #160	; 0xa0
 80027be:	2100      	movs	r1, #0
 80027c0:	2000      	movs	r0, #0
 80027c2:	f000 f9b9 	bl	8002b38 <lcdDrawFillRect>
  lcdUpdateDraw();
 80027c6:	f000 f8bb 	bl	8002940 <lcdUpdateDraw>

  lcdSetBackLight(100);
 80027ca:	2064      	movs	r0, #100	; 0x64
 80027cc:	f000 f81e 	bl	800280c <lcdSetBackLight>


  is_init = true;
 80027d0:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <lcdInit+0xa8>)
 80027d2:	2201      	movs	r2, #1
 80027d4:	701a      	strb	r2, [r3, #0]

#ifdef _USE_HW_CLI
  cliAdd("lcd", cliLcd);
 80027d6:	490b      	ldr	r1, [pc, #44]	; (8002804 <lcdInit+0xac>)
 80027d8:	480b      	ldr	r0, [pc, #44]	; (8002808 <lcdInit+0xb0>)
 80027da:	f7ff f8e1 	bl	80019a0 <cliAdd>
#endif

  return true;
 80027de:	2301      	movs	r3, #1
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000080 	.word	0x20000080
 80027ec:	200005a4 	.word	0x200005a4
 80027f0:	08002709 	.word	0x08002709
 80027f4:	20000600 	.word	0x20000600
 80027f8:	200005c1 	.word	0x200005c1
 80027fc:	200005d0 	.word	0x200005d0
 8002800:	200005c0 	.word	0x200005c0
 8002804:	08002d59 	.word	0x08002d59
 8002808:	08018bb8 	.word	0x08018bb8

0800280c <lcdSetBackLight>:
{
  return backlight_value;
}

void lcdSetBackLight(uint8_t value)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	71fb      	strb	r3, [r7, #7]
  value = constrain(value, 0, 100);
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	2b64      	cmp	r3, #100	; 0x64
 800281a:	bf28      	it	cs
 800281c:	2364      	movcs	r3, #100	; 0x64
 800281e:	71fb      	strb	r3, [r7, #7]

  if (value != backlight_value)
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <lcdSetBackLight+0x48>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	79fa      	ldrb	r2, [r7, #7]
 8002826:	429a      	cmp	r2, r3
 8002828:	d002      	beq.n	8002830 <lcdSetBackLight+0x24>
  {
    backlight_value = value;
 800282a:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <lcdSetBackLight+0x48>)
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	7013      	strb	r3, [r2, #0]
  }

  if (backlight_value > 0)
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <lcdSetBackLight+0x48>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d004      	beq.n	8002842 <lcdSetBackLight+0x36>
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_HIGH);
 8002838:	2101      	movs	r1, #1
 800283a:	2001      	movs	r0, #1
 800283c:	f7ff fe2a 	bl	8002494 <gpioPinWrite>
  }
  else
  {
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
  }
}
 8002840:	e003      	b.n	800284a <lcdSetBackLight+0x3e>
    gpioPinWrite(_PIN_DEF_BL_CTL, _DEF_LOW);
 8002842:	2100      	movs	r1, #0
 8002844:	2001      	movs	r0, #1
 8002846:	f7ff fe25 	bl	8002494 <gpioPinWrite>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000080 	.word	0x20000080

08002858 <lcdDrawPixel>:
  return p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos];
}

LCD_OPT_DEF void lcdDrawPixel(uint16_t x_pos, uint16_t y_pos, uint32_t rgb_code)
{
  p_draw_frame_buf[y_pos * LCD_WIDTH + x_pos] = rgb_code;
 8002858:	4b04      	ldr	r3, [pc, #16]	; (800286c <lcdDrawPixel+0x14>)
 800285a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002864:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200005d0 	.word	0x200005d0

08002870 <lcdClearBuffer>:

  lcdUpdateDraw();
}

LCD_OPT_DEF void lcdClearBuffer(uint32_t rgb_code)
{
 8002870:	b510      	push	{r4, lr}
 8002872:	4604      	mov	r4, r0
  uint16_t *p_buf = lcdGetFrameBuffer();
 8002874:	f000 f878 	bl	8002968 <lcdGetFrameBuffer>
 8002878:	f500 41c7 	add.w	r1, r0, #25472	; 0x6380
 800287c:	b2a2      	uxth	r2, r4
 800287e:	317e      	adds	r1, #126	; 0x7e
 8002880:	1e83      	subs	r3, r0, #2

  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
  {
    p_buf[i] = rgb_code;
 8002882:	f823 2f02 	strh.w	r2, [r3, #2]!
  for (int i=0; i<LCD_WIDTH * LCD_HEIGHT; i++)
 8002886:	428b      	cmp	r3, r1
 8002888:	d1fb      	bne.n	8002882 <lcdClearBuffer+0x12>
  }
}
 800288a:	bd10      	pop	{r4, pc}

0800288c <lcdGetFps>:
    lcdDrawLine(x1, y1, line[i].x, line[i].y, color);
  }
}

uint32_t lcdGetFps(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  return fps_count;
 8002890:	4b03      	ldr	r3, [pc, #12]	; (80028a0 <lcdGetFps+0x14>)
 8002892:	681b      	ldr	r3, [r3, #0]
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	200005cc 	.word	0x200005cc

080028a4 <lcdGetFpsTime>:

uint32_t lcdGetFpsTime(void)
{
 80028a4:	b480      	push	{r7}
 80028a6:	af00      	add	r7, sp, #0
  return fps_time;
 80028a8:	4b03      	ldr	r3, [pc, #12]	; (80028b8 <lcdGetFpsTime+0x14>)
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	200005c8 	.word	0x200005c8

080028bc <lcdDrawAvailable>:

bool lcdDrawAvailable(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return !lcd_request_draw;
 80028c0:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <lcdDrawAvailable+0x28>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bf14      	ite	ne
 80028c8:	2301      	movne	r3, #1
 80028ca:	2300      	moveq	r3, #0
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f083 0301 	eor.w	r3, r3, #1
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	b2db      	uxtb	r3, r3
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr
 80028e4:	200005c2 	.word	0x200005c2

080028e8 <lcdRequestDraw>:

bool lcdRequestDraw(void)
{
 80028e8:	b598      	push	{r3, r4, r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  if (lcd_request_draw == true)
 80028ec:	4b10      	ldr	r3, [pc, #64]	; (8002930 <lcdRequestDraw+0x48>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <lcdRequestDraw+0x10>
  {
    return false;
 80028f4:	2300      	movs	r3, #0
 80028f6:	e019      	b.n	800292c <lcdRequestDraw+0x44>
  }

  lcd.setWindow(0, 0, LCD_WIDTH-1, LCD_HEIGHT-1);
 80028f8:	4b0e      	ldr	r3, [pc, #56]	; (8002934 <lcdRequestDraw+0x4c>)
 80028fa:	689c      	ldr	r4, [r3, #8]
 80028fc:	234f      	movs	r3, #79	; 0x4f
 80028fe:	229f      	movs	r2, #159	; 0x9f
 8002900:	2100      	movs	r1, #0
 8002902:	2000      	movs	r0, #0
 8002904:	47a0      	blx	r4

  lcd_request_draw = true;
 8002906:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <lcdRequestDraw+0x48>)
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
  lcd.sendBuffer((uint8_t *)frame_buffer[frame_index], LCD_WIDTH * LCD_HEIGHT, 0);
 800290c:	4b09      	ldr	r3, [pc, #36]	; (8002934 <lcdRequestDraw+0x4c>)
 800290e:	699b      	ldr	r3, [r3, #24]
 8002910:	4a09      	ldr	r2, [pc, #36]	; (8002938 <lcdRequestDraw+0x50>)
 8002912:	7812      	ldrb	r2, [r2, #0]
 8002914:	4611      	mov	r1, r2
 8002916:	f44f 42c8 	mov.w	r2, #25600	; 0x6400
 800291a:	fb02 f201 	mul.w	r2, r2, r1
 800291e:	4907      	ldr	r1, [pc, #28]	; (800293c <lcdRequestDraw+0x54>)
 8002920:	1850      	adds	r0, r2, r1
 8002922:	2200      	movs	r2, #0
 8002924:	f44f 5148 	mov.w	r1, #12800	; 0x3200
 8002928:	4798      	blx	r3

  return true;
 800292a:	2301      	movs	r3, #1
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd98      	pop	{r3, r4, r7, pc}
 8002930:	200005c2 	.word	0x200005c2
 8002934:	200005a4 	.word	0x200005a4
 8002938:	200005c1 	.word	0x200005c1
 800293c:	20000600 	.word	0x20000600

08002940 <lcdUpdateDraw>:

void lcdUpdateDraw(void)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
  lcdRequestDraw();
 8002944:	f7ff ffd0 	bl	80028e8 <lcdRequestDraw>
  while(lcdDrawAvailable() != true)
 8002948:	e002      	b.n	8002950 <lcdUpdateDraw+0x10>
  {
    delay(1);
 800294a:	2001      	movs	r0, #1
 800294c:	f7fe fb96 	bl	800107c <delay>
  while(lcdDrawAvailable() != true)
 8002950:	f7ff ffb4 	bl	80028bc <lcdDrawAvailable>
 8002954:	4603      	mov	r3, r0
 8002956:	f083 0301 	eor.w	r3, r3, #1
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f4      	bne.n	800294a <lcdUpdateDraw+0xa>
  }
}
 8002960:	bf00      	nop
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop

08002968 <lcdGetFrameBuffer>:
{
  lcd.setWindow(x, y, w, h);
}

uint16_t *lcdGetFrameBuffer(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return (uint16_t *)p_draw_frame_buf;
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <lcdGetFrameBuffer+0x14>)
 800296e:	681b      	ldr	r3, [r3, #0]
}
 8002970:	4618      	mov	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	200005d0 	.word	0x200005d0

08002980 <lcdDrawLine>:
  return LCD_HEIGHT;
}


void lcdDrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8002980:	b590      	push	{r4, r7, lr}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	4604      	mov	r4, r0
 8002988:	4608      	mov	r0, r1
 800298a:	4611      	mov	r1, r2
 800298c:	461a      	mov	r2, r3
 800298e:	4623      	mov	r3, r4
 8002990:	80fb      	strh	r3, [r7, #6]
 8002992:	4603      	mov	r3, r0
 8002994:	80bb      	strh	r3, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	807b      	strh	r3, [r7, #2]
 800299a:	4613      	mov	r3, r2
 800299c:	803b      	strh	r3, [r7, #0]
  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 800299e:	f9b7 2000 	ldrsh.w	r2, [r7]
 80029a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80029ac:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80029b0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80029b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029b8:	1acb      	subs	r3, r1, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	bfb8      	it	lt
 80029be:	425b      	neglt	r3, r3
 80029c0:	429a      	cmp	r2, r3
 80029c2:	bfcc      	ite	gt
 80029c4:	2301      	movgt	r3, #1
 80029c6:	2300      	movle	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	837b      	strh	r3, [r7, #26]

  if (x0 < 0) x0 = 0;
 80029cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	da01      	bge.n	80029d8 <lcdDrawLine+0x58>
 80029d4:	2300      	movs	r3, #0
 80029d6:	80fb      	strh	r3, [r7, #6]
  if (y0 < 0) y0 = 0;
 80029d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	da01      	bge.n	80029e4 <lcdDrawLine+0x64>
 80029e0:	2300      	movs	r3, #0
 80029e2:	80bb      	strh	r3, [r7, #4]
  if (x1 < 0) x1 = 0;
 80029e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	da01      	bge.n	80029f0 <lcdDrawLine+0x70>
 80029ec:	2300      	movs	r3, #0
 80029ee:	807b      	strh	r3, [r7, #2]
  if (y1 < 0) y1 = 0;
 80029f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	da01      	bge.n	80029fc <lcdDrawLine+0x7c>
 80029f8:	2300      	movs	r3, #0
 80029fa:	803b      	strh	r3, [r7, #0]


  if (steep)
 80029fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00b      	beq.n	8002a1c <lcdDrawLine+0x9c>
  {
    _swap_int16_t(x0, y0);
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	833b      	strh	r3, [r7, #24]
 8002a08:	88bb      	ldrh	r3, [r7, #4]
 8002a0a:	80fb      	strh	r3, [r7, #6]
 8002a0c:	8b3b      	ldrh	r3, [r7, #24]
 8002a0e:	80bb      	strh	r3, [r7, #4]
    _swap_int16_t(x1, y1);
 8002a10:	887b      	ldrh	r3, [r7, #2]
 8002a12:	82fb      	strh	r3, [r7, #22]
 8002a14:	883b      	ldrh	r3, [r7, #0]
 8002a16:	807b      	strh	r3, [r7, #2]
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1)
 8002a1c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002a20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	dd0b      	ble.n	8002a40 <lcdDrawLine+0xc0>
  {
    _swap_int16_t(x0, x1);
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	82bb      	strh	r3, [r7, #20]
 8002a2c:	887b      	ldrh	r3, [r7, #2]
 8002a2e:	80fb      	strh	r3, [r7, #6]
 8002a30:	8abb      	ldrh	r3, [r7, #20]
 8002a32:	807b      	strh	r3, [r7, #2]
    _swap_int16_t(y0, y1);
 8002a34:	88bb      	ldrh	r3, [r7, #4]
 8002a36:	827b      	strh	r3, [r7, #18]
 8002a38:	883b      	ldrh	r3, [r7, #0]
 8002a3a:	80bb      	strh	r3, [r7, #4]
 8002a3c:	8a7b      	ldrh	r3, [r7, #18]
 8002a3e:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 8002a40:	887a      	ldrh	r2, [r7, #2]
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8002a4a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002a4e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bfb8      	it	lt
 8002a58:	425b      	neglt	r3, r3
 8002a5a:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8002a5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002a60:	0fda      	lsrs	r2, r3, #31
 8002a62:	4413      	add	r3, r2
 8002a64:	105b      	asrs	r3, r3, #1
 8002a66:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1)
 8002a68:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002a6c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	da02      	bge.n	8002a7a <lcdDrawLine+0xfa>
  {
    ystep = 1;
 8002a74:	2301      	movs	r3, #1
 8002a76:	83bb      	strh	r3, [r7, #28]
 8002a78:	e02d      	b.n	8002ad6 <lcdDrawLine+0x156>
  } else {
    ystep = -1;
 8002a7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7e:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0<=x1; x0++)
 8002a80:	e029      	b.n	8002ad6 <lcdDrawLine+0x156>
  {
    if (steep)
 8002a82:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d006      	beq.n	8002a98 <lcdDrawLine+0x118>
    {
      lcdDrawPixel(y0, x0, color);
 8002a8a:	88bb      	ldrh	r3, [r7, #4]
 8002a8c:	88f9      	ldrh	r1, [r7, #6]
 8002a8e:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fee1 	bl	8002858 <lcdDrawPixel>
 8002a96:	e005      	b.n	8002aa4 <lcdDrawLine+0x124>
    } else
    {
      lcdDrawPixel(x0, y0, color);
 8002a98:	88fb      	ldrh	r3, [r7, #6]
 8002a9a:	88b9      	ldrh	r1, [r7, #4]
 8002a9c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f7ff feda 	bl	8002858 <lcdDrawPixel>
    }
    err -= dy;
 8002aa4:	8bfa      	ldrh	r2, [r7, #30]
 8002aa6:	89fb      	ldrh	r3, [r7, #14]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	83fb      	strh	r3, [r7, #30]
    if (err < 0)
 8002aae:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da09      	bge.n	8002aca <lcdDrawLine+0x14a>
    {
      y0 += ystep;
 8002ab6:	88ba      	ldrh	r2, [r7, #4]
 8002ab8:	8bbb      	ldrh	r3, [r7, #28]
 8002aba:	4413      	add	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	80bb      	strh	r3, [r7, #4]
      err += dx;
 8002ac0:	8bfa      	ldrh	r2, [r7, #30]
 8002ac2:	8a3b      	ldrh	r3, [r7, #16]
 8002ac4:	4413      	add	r3, r2
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	83fb      	strh	r3, [r7, #30]
  for (; x0<=x1; x0++)
 8002aca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	80fb      	strh	r3, [r7, #6]
 8002ad6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002ada:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	ddcf      	ble.n	8002a82 <lcdDrawLine+0x102>
    }
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3724      	adds	r7, #36	; 0x24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}

08002aec <lcdDrawVLine>:
    }
  }
}

void lcdDrawVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af02      	add	r7, sp, #8
 8002af2:	4604      	mov	r4, r0
 8002af4:	4608      	mov	r0, r1
 8002af6:	4611      	mov	r1, r2
 8002af8:	461a      	mov	r2, r3
 8002afa:	4623      	mov	r3, r4
 8002afc:	80fb      	strh	r3, [r7, #6]
 8002afe:	4603      	mov	r3, r0
 8002b00:	80bb      	strh	r3, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]
 8002b06:	4613      	mov	r3, r2
 8002b08:	803b      	strh	r3, [r7, #0]
  lcdDrawLine(x, y, x, y+h-1, color);
 8002b0a:	88ba      	ldrh	r2, [r7, #4]
 8002b0c:	887b      	ldrh	r3, [r7, #2]
 8002b0e:	4413      	add	r3, r2
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	3b01      	subs	r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	b21c      	sxth	r4, r3
 8002b18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002b1c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b20:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002b24:	883b      	ldrh	r3, [r7, #0]
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	4623      	mov	r3, r4
 8002b2a:	f7ff ff29 	bl	8002980 <lcdDrawLine>
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd90      	pop	{r4, r7, pc}
 8002b36:	bf00      	nop

08002b38 <lcdDrawFillRect>:
{
  lcdDrawLine(x, y, x+w-1, y, color);
}

void lcdDrawFillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8002b38:	b590      	push	{r4, r7, lr}
 8002b3a:	b085      	sub	sp, #20
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4604      	mov	r4, r0
 8002b40:	4608      	mov	r0, r1
 8002b42:	4611      	mov	r1, r2
 8002b44:	461a      	mov	r2, r3
 8002b46:	4623      	mov	r3, r4
 8002b48:	80fb      	strh	r3, [r7, #6]
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	80bb      	strh	r3, [r7, #4]
 8002b4e:	460b      	mov	r3, r1
 8002b50:	807b      	strh	r3, [r7, #2]
 8002b52:	4613      	mov	r3, r2
 8002b54:	803b      	strh	r3, [r7, #0]
  for (int16_t i=x; i<x+w; i++)
 8002b56:	88fb      	ldrh	r3, [r7, #6]
 8002b58:	81fb      	strh	r3, [r7, #14]
 8002b5a:	e00e      	b.n	8002b7a <lcdDrawFillRect+0x42>
  {
    lcdDrawVLine(i, y, h, color);
 8002b5c:	8c3b      	ldrh	r3, [r7, #32]
 8002b5e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002b62:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002b66:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002b6a:	f7ff ffbf 	bl	8002aec <lcdDrawVLine>
  for (int16_t i=x; i<x+w; i++)
 8002b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	3301      	adds	r3, #1
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	81fb      	strh	r3, [r7, #14]
 8002b7a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002b7e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002b86:	440b      	add	r3, r1
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	dbe7      	blt.n	8002b5c <lcdDrawFillRect+0x24>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd90      	pop	{r4, r7, pc}
 8002b96:	bf00      	nop

08002b98 <lcdPrintf>:
{
  lcdDrawFillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, color);
}

void lcdPrintf(int x, int y, uint16_t color,  const char *fmt, ...)
{
 8002b98:	b408      	push	{r3}
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b0d5      	sub	sp, #340	; 0x154
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	f107 030c 	add.w	r3, r7, #12
 8002ba4:	6018      	str	r0, [r3, #0]
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	6019      	str	r1, [r3, #0]
 8002bac:	1dbb      	adds	r3, r7, #6
 8002bae:	801a      	strh	r2, [r3, #0]
  va_list arg;
  va_start (arg, fmt);
 8002bb0:	f507 73b0 	add.w	r3, r7, #352	; 0x160
 8002bb4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  int32_t len;
  char print_buffer[256];
  int Size_Char;
  int i, x_Pre = x;
 8002bb8:	f107 030c 	add.w	r3, r7, #12
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  han_font_t FontBuf;
  uint8_t font_width;


  len = vsnprintf(print_buffer, 255, fmt, arg);
 8002bc2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8002bc6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002bca:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8002bce:	21ff      	movs	r1, #255	; 0xff
 8002bd0:	f013 fa04 	bl	8015fdc <vsniprintf>
 8002bd4:	f8c7 0140 	str.w	r0, [r7, #320]	; 0x140
  va_end (arg);

  for( i=0; i<len; i+=Size_Char )
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002bde:	e054      	b.n	8002c8a <lcdPrintf+0xf2>
  {
    hanFontLoad( &print_buffer[i], &FontBuf );
 8002be0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002be4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8002be8:	4413      	add	r3, r2
 8002bea:	f107 0210 	add.w	r2, r7, #16
 8002bee:	4611      	mov	r1, r2
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	f001 fd31 	bl	8004658 <hanFontLoad>

    disHanFont( x, y, &FontBuf, color);
 8002bf6:	1dbb      	adds	r3, r7, #6
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	f107 0210 	add.w	r2, r7, #16
 8002bfe:	f107 0108 	add.w	r1, r7, #8
 8002c02:	f107 000c 	add.w	r0, r7, #12
 8002c06:	6809      	ldr	r1, [r1, #0]
 8002c08:	6800      	ldr	r0, [r0, #0]
 8002c0a:	f000 f84f 	bl	8002cac <disHanFont>

    Size_Char = FontBuf.Size_Char;
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	885b      	ldrh	r3, [r3, #2]
 8002c14:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    if (Size_Char >= 2)
 8002c18:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	dd0a      	ble.n	8002c36 <lcdPrintf+0x9e>
    {
      font_width = 16;
 8002c20:	2310      	movs	r3, #16
 8002c22:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
      x += 2*8;
 8002c26:	f107 030c 	add.w	r3, r7, #12
 8002c2a:	f107 020c 	add.w	r2, r7, #12
 8002c2e:	6812      	ldr	r2, [r2, #0]
 8002c30:	3210      	adds	r2, #16
 8002c32:	601a      	str	r2, [r3, #0]
 8002c34:	e009      	b.n	8002c4a <lcdPrintf+0xb2>
    }
    else
    {
      font_width = 8;
 8002c36:	2308      	movs	r3, #8
 8002c38:	f887 314b 	strb.w	r3, [r7, #331]	; 0x14b
      x += 1*8;
 8002c3c:	f107 030c 	add.w	r3, r7, #12
 8002c40:	f107 020c 	add.w	r2, r7, #12
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	3208      	adds	r2, #8
 8002c48:	601a      	str	r2, [r3, #0]
    }

    if ((x+font_width) > HW_LCD_WIDTH)
 8002c4a:	f897 214b 	ldrb.w	r2, [r7, #331]	; 0x14b
 8002c4e:	f107 030c 	add.w	r3, r7, #12
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4413      	add	r3, r2
 8002c56:	2ba0      	cmp	r3, #160	; 0xa0
 8002c58:	dd0b      	ble.n	8002c72 <lcdPrintf+0xda>
    {
      x  = x_Pre;
 8002c5a:	f107 030c 	add.w	r3, r7, #12
 8002c5e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002c62:	601a      	str	r2, [r3, #0]
      y += 16;
 8002c64:	f107 0308 	add.w	r3, r7, #8
 8002c68:	f107 0208 	add.w	r2, r7, #8
 8002c6c:	6812      	ldr	r2, [r2, #0]
 8002c6e:	3210      	adds	r2, #16
 8002c70:	601a      	str	r2, [r3, #0]
    }

    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8002c72:	f107 0310 	add.w	r3, r7, #16
 8002c76:	889b      	ldrh	r3, [r3, #4]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d00d      	beq.n	8002c98 <lcdPrintf+0x100>
  for( i=0; i<len; i+=Size_Char )
 8002c7c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c80:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002c84:	4413      	add	r3, r2
 8002c86:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002c8a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8002c8e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002c92:	429a      	cmp	r2, r3
 8002c94:	dba4      	blt.n	8002be0 <lcdPrintf+0x48>
  }
}
 8002c96:	e000      	b.n	8002c9a <lcdPrintf+0x102>
    if( FontBuf.Code_Type == PHAN_END_CODE ) break;
 8002c98:	bf00      	nop
}
 8002c9a:	bf00      	nop
 8002c9c:	f507 77aa 	add.w	r7, r7, #340	; 0x154
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002ca6:	b001      	add	sp, #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop

08002cac <disHanFont>:

  return str_len;
}

void disHanFont(int x, int y, han_font_t *FontPtr, uint16_t textcolor)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	60f8      	str	r0, [r7, #12]
 8002cb4:	60b9      	str	r1, [r7, #8]
 8002cb6:	607a      	str	r2, [r7, #4]
 8002cb8:	807b      	strh	r3, [r7, #2]
  uint16_t    i, j, Loop;
  uint16_t  FontSize = FontPtr->Size_Char;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	885b      	ldrh	r3, [r3, #2]
 8002cbe:	833b      	strh	r3, [r7, #24]
  uint16_t index_x;

  if (FontSize > 2)
 8002cc0:	8b3b      	ldrh	r3, [r7, #24]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <disHanFont+0x1e>
  {
    FontSize = 2;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	833b      	strh	r3, [r7, #24]
  }

  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002cca:	2300      	movs	r3, #0
 8002ccc:	83fb      	strh	r3, [r7, #30]
 8002cce:	e03a      	b.n	8002d46 <disHanFont+0x9a>
  {
    index_x = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	82fb      	strh	r3, [r7, #22]
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	83bb      	strh	r3, [r7, #28]
 8002cd8:	e02e      	b.n	8002d38 <disHanFont+0x8c>
    {
      uint8_t font_data;

      font_data = FontPtr->FontBuffer[i*FontSize +j];
 8002cda:	8bfb      	ldrh	r3, [r7, #30]
 8002cdc:	8b3a      	ldrh	r2, [r7, #24]
 8002cde:	fb02 f203 	mul.w	r2, r2, r3
 8002ce2:	8bbb      	ldrh	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	4413      	add	r3, r2
 8002cea:	799b      	ldrb	r3, [r3, #6]
 8002cec:	757b      	strb	r3, [r7, #21]

      for( Loop=0; Loop<8; Loop++ )
 8002cee:	2300      	movs	r3, #0
 8002cf0:	837b      	strh	r3, [r7, #26]
 8002cf2:	e01b      	b.n	8002d2c <disHanFont+0x80>
      {
        if( (font_data<<Loop) & (0x80))
 8002cf4:	7d7a      	ldrb	r2, [r7, #21]
 8002cf6:	8b7b      	ldrh	r3, [r7, #26]
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00d      	beq.n	8002d20 <disHanFont+0x74>
        {
          lcdDrawPixel(x + index_x, y + i, textcolor);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	8afb      	ldrh	r3, [r7, #22]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	b298      	uxth	r0, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	b29a      	uxth	r2, r3
 8002d12:	8bfb      	ldrh	r3, [r7, #30]
 8002d14:	4413      	add	r3, r2
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	887a      	ldrh	r2, [r7, #2]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7ff fd9c 	bl	8002858 <lcdDrawPixel>
        }
        index_x++;
 8002d20:	8afb      	ldrh	r3, [r7, #22]
 8002d22:	3301      	adds	r3, #1
 8002d24:	82fb      	strh	r3, [r7, #22]
      for( Loop=0; Loop<8; Loop++ )
 8002d26:	8b7b      	ldrh	r3, [r7, #26]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	837b      	strh	r3, [r7, #26]
 8002d2c:	8b7b      	ldrh	r3, [r7, #26]
 8002d2e:	2b07      	cmp	r3, #7
 8002d30:	d9e0      	bls.n	8002cf4 <disHanFont+0x48>
    for ( j = 0 ; j < FontSize ; j++ )      // 16 x 16 (2 Bytes)
 8002d32:	8bbb      	ldrh	r3, [r7, #28]
 8002d34:	3301      	adds	r3, #1
 8002d36:	83bb      	strh	r3, [r7, #28]
 8002d38:	8bba      	ldrh	r2, [r7, #28]
 8002d3a:	8b3b      	ldrh	r3, [r7, #24]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d3cc      	bcc.n	8002cda <disHanFont+0x2e>
  for ( i = 0 ; i < 16 ; i++ )        // 16 Lines per Font/Char
 8002d40:	8bfb      	ldrh	r3, [r7, #30]
 8002d42:	3301      	adds	r3, #1
 8002d44:	83fb      	strh	r3, [r7, #30]
 8002d46:	8bfb      	ldrh	r3, [r7, #30]
 8002d48:	2b0f      	cmp	r3, #15
 8002d4a:	d9c1      	bls.n	8002cd0 <disHanFont+0x24>
      }
    }
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3720      	adds	r7, #32
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop

08002d58 <cliLcd>:



#ifdef _USE_HW_CLI
void cliLcd(cli_args_t *args)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af02      	add	r7, sp, #8
 8002d5e:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]


  if (args->argc == 1 && args->isStr(0, "test") == true)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	881b      	ldrh	r3, [r3, #0]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d160      	bne.n	8002e2e <cliLcd+0xd6>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	695b      	ldr	r3, [r3, #20]
 8002d70:	4935      	ldr	r1, [pc, #212]	; (8002e48 <cliLcd+0xf0>)
 8002d72:	2000      	movs	r0, #0
 8002d74:	4798      	blx	r3
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d058      	beq.n	8002e2e <cliLcd+0xd6>
  {
    while(cliKeepLoop())
 8002d7c:	e04b      	b.n	8002e16 <cliLcd+0xbe>
    {
      if (lcdDrawAvailable() == true)
 8002d7e:	f7ff fd9d 	bl	80028bc <lcdDrawAvailable>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d046      	beq.n	8002e16 <cliLcd+0xbe>
      {
        lcdClearBuffer(black);
 8002d88:	2000      	movs	r0, #0
 8002d8a:	f7ff fd71 	bl	8002870 <lcdClearBuffer>

        lcdPrintf(25,16*0, green, "[LCD 테스트]");
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <cliLcd+0xf4>)
 8002d90:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d94:	2100      	movs	r1, #0
 8002d96:	2019      	movs	r0, #25
 8002d98:	f7ff fefe 	bl	8002b98 <lcdPrintf>

        lcdPrintf(0,16*1, white, "%d fps", lcdGetFps());
 8002d9c:	f7ff fd76 	bl	800288c <lcdGetFps>
 8002da0:	4603      	mov	r3, r0
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4b2a      	ldr	r3, [pc, #168]	; (8002e50 <cliLcd+0xf8>)
 8002da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002daa:	2110      	movs	r1, #16
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7ff fef3 	bl	8002b98 <lcdPrintf>
        lcdPrintf(0,16*2, white, "%d ms" , lcdGetFpsTime());
 8002db2:	f7ff fd77 	bl	80028a4 <lcdGetFpsTime>
 8002db6:	4603      	mov	r3, r0
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <cliLcd+0xfc>)
 8002dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dc0:	2120      	movs	r1, #32
 8002dc2:	2000      	movs	r0, #0
 8002dc4:	f7ff fee8 	bl	8002b98 <lcdPrintf>
        lcdPrintf(0,16*3, white, "%d ms" , millis());
 8002dc8:	f7fe f963 	bl	8001092 <millis>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	4b20      	ldr	r3, [pc, #128]	; (8002e54 <cliLcd+0xfc>)
 8002dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd6:	2130      	movs	r1, #48	; 0x30
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff fedd 	bl	8002b98 <lcdPrintf>

        lcdDrawFillRect( 0, 70, 10, 10, red);
 8002dde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002de2:	9300      	str	r3, [sp, #0]
 8002de4:	230a      	movs	r3, #10
 8002de6:	220a      	movs	r2, #10
 8002de8:	2146      	movs	r1, #70	; 0x46
 8002dea:	2000      	movs	r0, #0
 8002dec:	f7ff fea4 	bl	8002b38 <lcdDrawFillRect>
        lcdDrawFillRect(10, 70, 10, 10, green);
 8002df0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	230a      	movs	r3, #10
 8002df8:	220a      	movs	r2, #10
 8002dfa:	2146      	movs	r1, #70	; 0x46
 8002dfc:	200a      	movs	r0, #10
 8002dfe:	f7ff fe9b 	bl	8002b38 <lcdDrawFillRect>
        lcdDrawFillRect(20, 70, 10, 10, blue);
 8002e02:	231f      	movs	r3, #31
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	230a      	movs	r3, #10
 8002e08:	220a      	movs	r2, #10
 8002e0a:	2146      	movs	r1, #70	; 0x46
 8002e0c:	2014      	movs	r0, #20
 8002e0e:	f7ff fe93 	bl	8002b38 <lcdDrawFillRect>

        lcdRequestDraw();
 8002e12:	f7ff fd69 	bl	80028e8 <lcdRequestDraw>
    while(cliKeepLoop())
 8002e16:	f7fe fdad 	bl	8001974 <cliKeepLoop>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ae      	bne.n	8002d7e <cliLcd+0x26>
      }
    }

    lcdClearBuffer(black);
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7ff fd25 	bl	8002870 <lcdClearBuffer>
    lcdUpdateDraw();
 8002e26:	f7ff fd8b 	bl	8002940 <lcdUpdateDraw>

    ret = true;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	73fb      	strb	r3, [r7, #15]
  }

  if (ret != true)
 8002e2e:	7bfb      	ldrb	r3, [r7, #15]
 8002e30:	f083 0301 	eor.w	r3, r3, #1
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <cliLcd+0xe8>
  {
    cliPrintf("lcd test\n");
 8002e3a:	4807      	ldr	r0, [pc, #28]	; (8002e58 <cliLcd+0x100>)
 8002e3c:	f7fe fca0 	bl	8001780 <cliPrintf>
  }
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	08018bbc 	.word	0x08018bbc
 8002e4c:	08018bc4 	.word	0x08018bc4
 8002e50:	08018bd4 	.word	0x08018bd4
 8002e54:	08018bdc 	.word	0x08018bdc
 8002e58:	08018be4 	.word	0x08018be4

08002e5c <ledInit>:
static void cliLed(cli_args_t *args);
#endif


bool ledInit(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b088      	sub	sp, #32
 8002e60:	af00      	add	r7, sp, #0
  bool ret = true;
 8002e62:	2301      	movs	r3, #1
 8002e64:	76fb      	strb	r3, [r7, #27]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e66:	1d3b      	adds	r3, r7, #4
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e74:	2300      	movs	r3, #0
 8002e76:	603b      	str	r3, [r7, #0]
 8002e78:	4b1b      	ldr	r3, [pc, #108]	; (8002ee8 <ledInit+0x8c>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <ledInit+0x8c>)
 8002e7e:	f043 0304 	orr.w	r3, r3, #4
 8002e82:	6313      	str	r3, [r2, #48]	; 0x30
 8002e84:	4b18      	ldr	r3, [pc, #96]	; (8002ee8 <ledInit+0x8c>)
 8002e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	603b      	str	r3, [r7, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]


  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e90:	2301      	movs	r3, #1
 8002e92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	613b      	str	r3, [r7, #16]

  for (int i=0; i<LED_MAX_CH; i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	61fb      	str	r3, [r7, #28]
 8002ea0:	e016      	b.n	8002ed0 <ledInit+0x74>
  {
    GPIO_InitStruct.Pin = led_tbl[i].pin;
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <ledInit+0x90>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	889b      	ldrh	r3, [r3, #4]
 8002eac:	607b      	str	r3, [r7, #4]
    HAL_GPIO_Init(led_tbl[i].port, &GPIO_InitStruct);
 8002eae:	4a0f      	ldr	r2, [pc, #60]	; (8002eec <ledInit+0x90>)
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002eb6:	1d3a      	adds	r2, r7, #4
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f00b fc98 	bl	800e7f0 <HAL_GPIO_Init>

    ledOff(i);
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f000 f817 	bl	8002ef8 <ledOff>
  for (int i=0; i<LED_MAX_CH; i++)
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	61fb      	str	r3, [r7, #28]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	dde5      	ble.n	8002ea2 <ledInit+0x46>
  }

#ifdef _USE_HW_CLI
  cliAdd("led", cliLed);
 8002ed6:	4906      	ldr	r1, [pc, #24]	; (8002ef0 <ledInit+0x94>)
 8002ed8:	4806      	ldr	r0, [pc, #24]	; (8002ef4 <ledInit+0x98>)
 8002eda:	f7fe fd61 	bl	80019a0 <cliAdd>
#endif

  return ret;
 8002ede:	7efb      	ldrb	r3, [r7, #27]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3720      	adds	r7, #32
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	40023800 	.word	0x40023800
 8002eec:	20000084 	.word	0x20000084
 8002ef0:	08002f71 	.word	0x08002f71
 8002ef4:	080188e8 	.word	0x080188e8

08002ef8 <ledOff>:

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].on_state);
}

void ledOff(uint8_t ch)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	4603      	mov	r3, r0
 8002f00:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d111      	bne.n	8002f2c <ledOff+0x34>

  HAL_GPIO_WritePin(led_tbl[ch].port, led_tbl[ch].pin, led_tbl[ch].off_state);
 8002f08:	79fb      	ldrb	r3, [r7, #7]
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	; (8002f34 <ledOff+0x3c>)
 8002f0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002f10:	79fb      	ldrb	r3, [r7, #7]
 8002f12:	4a08      	ldr	r2, [pc, #32]	; (8002f34 <ledOff+0x3c>)
 8002f14:	00db      	lsls	r3, r3, #3
 8002f16:	4413      	add	r3, r2
 8002f18:	8899      	ldrh	r1, [r3, #4]
 8002f1a:	79fb      	ldrb	r3, [r7, #7]
 8002f1c:	4a05      	ldr	r2, [pc, #20]	; (8002f34 <ledOff+0x3c>)
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	79db      	ldrb	r3, [r3, #7]
 8002f24:	461a      	mov	r2, r3
 8002f26:	f00b fdff 	bl	800eb28 <HAL_GPIO_WritePin>
 8002f2a:	e000      	b.n	8002f2e <ledOff+0x36>
  if (ch >= LED_MAX_CH) return;
 8002f2c:	bf00      	nop
}
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	20000084 	.word	0x20000084

08002f38 <ledToggle>:

void ledToggle(uint8_t ch)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	71fb      	strb	r3, [r7, #7]
  if (ch >= LED_MAX_CH) return;
 8002f42:	79fb      	ldrb	r3, [r7, #7]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10d      	bne.n	8002f64 <ledToggle+0x2c>

  HAL_GPIO_TogglePin(led_tbl[ch].port, led_tbl[ch].pin);
 8002f48:	79fb      	ldrb	r3, [r7, #7]
 8002f4a:	4a08      	ldr	r2, [pc, #32]	; (8002f6c <ledToggle+0x34>)
 8002f4c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8002f50:	79fb      	ldrb	r3, [r7, #7]
 8002f52:	4906      	ldr	r1, [pc, #24]	; (8002f6c <ledToggle+0x34>)
 8002f54:	00db      	lsls	r3, r3, #3
 8002f56:	440b      	add	r3, r1
 8002f58:	889b      	ldrh	r3, [r3, #4]
 8002f5a:	4619      	mov	r1, r3
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	f00b fdfc 	bl	800eb5a <HAL_GPIO_TogglePin>
 8002f62:	e000      	b.n	8002f66 <ledToggle+0x2e>
  if (ch >= LED_MAX_CH) return;
 8002f64:	bf00      	nop
}
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000084 	.word	0x20000084

08002f70 <cliLed>:


#ifdef _USE_HW_CLI

void cliLed(cli_args_t *args)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b086      	sub	sp, #24
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	75fb      	strb	r3, [r7, #23]


  if (args->argc == 3 && args->isStr(0, "toggle") == true)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	2b03      	cmp	r3, #3
 8002f82:	d133      	bne.n	8002fec <cliLed+0x7c>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	491f      	ldr	r1, [pc, #124]	; (8003008 <cliLed+0x98>)
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	4798      	blx	r3
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d02b      	beq.n	8002fec <cliLed+0x7c>
  {
    uint8_t  led_ch;
    uint32_t toggle_time;
    uint32_t pre_time;

    led_ch      = (uint8_t)args->getData(1);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2001      	movs	r0, #1
 8002f9a:	4798      	blx	r3
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	75bb      	strb	r3, [r7, #22]
    toggle_time = (uint32_t)args->getData(2);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	4798      	blx	r3
 8002fa8:	4603      	mov	r3, r0
 8002faa:	60fb      	str	r3, [r7, #12]

    if (led_ch > 0)
 8002fac:	7dbb      	ldrb	r3, [r7, #22]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <cliLed+0x48>
    {
      led_ch--;
 8002fb2:	7dbb      	ldrb	r3, [r7, #22]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	75bb      	strb	r3, [r7, #22]
    }

    pre_time = millis();
 8002fb8:	f7fe f86b 	bl	8001092 <millis>
 8002fbc:	6138      	str	r0, [r7, #16]
    while(cliKeepLoop())
 8002fbe:	e00e      	b.n	8002fde <cliLed+0x6e>
    {
      if (millis()-pre_time >= toggle_time)
 8002fc0:	f7fe f867 	bl	8001092 <millis>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d806      	bhi.n	8002fde <cliLed+0x6e>
      {
        pre_time = millis();
 8002fd0:	f7fe f85f 	bl	8001092 <millis>
 8002fd4:	6138      	str	r0, [r7, #16]
        ledToggle(led_ch);
 8002fd6:	7dbb      	ldrb	r3, [r7, #22]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f7ff ffad 	bl	8002f38 <ledToggle>
    while(cliKeepLoop())
 8002fde:	f7fe fcc9 	bl	8001974 <cliKeepLoop>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1eb      	bne.n	8002fc0 <cliLed+0x50>
      }
    }

    ret = true;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	75fb      	strb	r3, [r7, #23]
  }


  if (ret != true)
 8002fec:	7dfb      	ldrb	r3, [r7, #23]
 8002fee:	f083 0301 	eor.w	r3, r3, #1
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <cliLed+0x90>
  {
    cliPrintf("led toggle ch[1~%d] time_ms\n", LED_MAX_CH);
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	4804      	ldr	r0, [pc, #16]	; (800300c <cliLed+0x9c>)
 8002ffc:	f7fe fbc0 	bl	8001780 <cliPrintf>
  }
}
 8003000:	bf00      	nop
 8003002:	3718      	adds	r7, #24
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	080188ec 	.word	0x080188ec
 800300c:	080188f4 	.word	0x080188f4

08003010 <NRF24L01_Init>:



/* TODO: nRF24L01 Pin 변경 시 헤더파일만 변경하면 됨 (2)*/
void NRF24L01_Init(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
     /* 클럭 활성화는  bsp.c 에서 처리 함*/

     GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003016:	1d3b      	adds	r3, r7, #4
 8003018:	2200      	movs	r2, #0
 800301a:	601a      	str	r2, [r3, #0]
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	609a      	str	r2, [r3, #8]
 8003020:	60da      	str	r2, [r3, #12]
 8003022:	611a      	str	r2, [r3, #16]

     /*Configure GPIO pin Output Level */
     HAL_GPIO_WritePin(NRF24L01_CE_PORT , NRF24L01_CE_PIN , GPIO_PIN_RESET);
 8003024:	2200      	movs	r2, #0
 8003026:	2101      	movs	r1, #1
 8003028:	4811      	ldr	r0, [pc, #68]	; (8003070 <NRF24L01_Init+0x60>)
 800302a:	f00b fd7d 	bl	800eb28 <HAL_GPIO_WritePin>
     HAL_GPIO_WritePin(NRF24L01_SPI_CS_PORT, NRF24L01_SPI_CS_PIN, GPIO_PIN_SET);
 800302e:	2201      	movs	r2, #1
 8003030:	2102      	movs	r1, #2
 8003032:	480f      	ldr	r0, [pc, #60]	; (8003070 <NRF24L01_Init+0x60>)
 8003034:	f00b fd78 	bl	800eb28 <HAL_GPIO_WritePin>

     /*Configure GPIO pins : PBPin PBPin */
     GPIO_InitStruct.Pin = NRF24L01_CE_PIN|NRF24L01_SPI_CS_PIN;
 8003038:	2303      	movs	r3, #3
 800303a:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800303c:	2301      	movs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003040:	2300      	movs	r3, #0
 8003042:	60fb      	str	r3, [r7, #12]
     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4619      	mov	r1, r3
 800304c:	4808      	ldr	r0, [pc, #32]	; (8003070 <NRF24L01_Init+0x60>)
 800304e:	f00b fbcf 	bl	800e7f0 <HAL_GPIO_Init>

     /*Configure GPIO pin : PtPin */
     GPIO_InitStruct.Pin =  NRF24L01_IRQ_PIN;
 8003052:	2304      	movs	r3, #4
 8003054:	607b      	str	r3, [r7, #4]
     GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003056:	2300      	movs	r3, #0
 8003058:	60bb      	str	r3, [r7, #8]
     GPIO_InitStruct.Pull = GPIO_PULLUP;
 800305a:	2301      	movs	r3, #1
 800305c:	60fb      	str	r3, [r7, #12]
     HAL_GPIO_Init(NRF24L01_IRQ_PORT , &GPIO_InitStruct);
 800305e:	1d3b      	adds	r3, r7, #4
 8003060:	4619      	mov	r1, r3
 8003062:	4803      	ldr	r0, [pc, #12]	; (8003070 <NRF24L01_Init+0x60>)
 8003064:	f00b fbc4 	bl	800e7f0 <HAL_GPIO_Init>
}
 8003068:	bf00      	nop
 800306a:	3718      	adds	r7, #24
 800306c:	46bd      	mov	sp, r7
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40020400 	.word	0x40020400

08003074 <SPI1_SetSpeed>:
     * @Description:      SPI speed = fAPB2/frequency division factor
     *                    SPI_BaudRate_Prescaler: SPI_BAUDRATEPRESCALER_2 ~ SPI_BAUDRATEPRESCALER_256
     *                 The fAPB2 clock is 72Mhz:(STM32103C8T6: [ APB2 -> SPI1 ])
  */
void SPI1_SetSpeed(uint8_t SPI_BaudRatePrescaler)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	4603      	mov	r3, r0
 800307c:	71fb      	strb	r3, [r7, #7]
         assert_param(IS_SPI_BAUDRATE_PRESCALER(SPI_BaudRatePrescaler)); //Judging validity
         __HAL_SPI_DISABLE(&NRF24L01_SPI_PORT); //Close SPI
 800307e:	4b13      	ldr	r3, [pc, #76]	; (80030cc <SPI1_SetSpeed+0x58>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4b11      	ldr	r3, [pc, #68]	; (80030cc <SPI1_SetSpeed+0x58>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800308c:	601a      	str	r2, [r3, #0]
         NRF24L01_SPI_PORT.Instance->CR1&=0XFFC7; //bits 3-5 are cleared, used to set the baud rate
 800308e:	4b0f      	ldr	r3, [pc, #60]	; (80030cc <SPI1_SetSpeed+0x58>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6819      	ldr	r1, [r3, #0]
 8003094:	4b0d      	ldr	r3, [pc, #52]	; (80030cc <SPI1_SetSpeed+0x58>)
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	f64f 73c7 	movw	r3, #65479	; 0xffc7
 800309c:	400b      	ands	r3, r1
 800309e:	6013      	str	r3, [r2, #0]
         NRF24L01_SPI_PORT.Instance->CR1|=SPI_BaudRatePrescaler;//Set SPI speed
 80030a0:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <SPI1_SetSpeed+0x58>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6819      	ldr	r1, [r3, #0]
 80030a6:	79fa      	ldrb	r2, [r7, #7]
 80030a8:	4b08      	ldr	r3, [pc, #32]	; (80030cc <SPI1_SetSpeed+0x58>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	430a      	orrs	r2, r1
 80030ae:	601a      	str	r2, [r3, #0]
         __HAL_SPI_ENABLE(&NRF24L01_SPI_PORT); //Enable SPI
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <SPI1_SetSpeed+0x58>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	4b05      	ldr	r3, [pc, #20]	; (80030cc <SPI1_SetSpeed+0x58>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030be:	601a      	str	r2, [r3, #0]

}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	20007534 	.word	0x20007534

080030d0 <SPIx_ReadWriteByte>:
     * @Return value:      uint8_t: 수신한 데이터
     * @Description:       None
  */

uint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b086      	sub	sp, #24
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	460b      	mov	r3, r1
 80030da:	70fb      	strb	r3, [r7, #3]
  uint8_t d_read,d_send=byte;
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	73bb      	strb	r3, [r7, #14]
                            /* 사용하는 SPIx, 송신할 데이터 값, 수신받을 데이터, 데이터의 길이, 타임오버 값*/
  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)
 80030e0:	f107 020f 	add.w	r2, r7, #15
 80030e4:	f107 010e 	add.w	r1, r7, #14
 80030e8:	23ff      	movs	r3, #255	; 0xff
 80030ea:	9300      	str	r3, [sp, #0]
 80030ec:	2301      	movs	r3, #1
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f00e ff08 	bl	8011f04 <HAL_SPI_TransmitReceive>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <SPIx_ReadWriteByte+0x2e>
  {
    d_read=0xFF;
 80030fa:	23ff      	movs	r3, #255	; 0xff
 80030fc:	73fb      	strb	r3, [r7, #15]
  }
  return d_read;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3710      	adds	r7, #16
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}

08003108 <NRF24L01_Check>:
     * Return value:     0, success; 1, failure
     * Description:     None
  */

uint8_t NRF24L01_Check(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
   uint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};
 800310e:	4a19      	ldr	r2, [pc, #100]	; (8003174 <NRF24L01_Check+0x6c>)
 8003110:	463b      	mov	r3, r7
 8003112:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003116:	6018      	str	r0, [r3, #0]
 8003118:	3304      	adds	r3, #4
 800311a:	7019      	strb	r1, [r3, #0]
   uint8_t i;

    SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_16); //spi speed is 6.0Mhz ((The maximum SPI clock of 24L01 is 10Mhz, it doesn’t matter if it is bigger here)
 800311c:	2018      	movs	r0, #24
 800311e:	f7ff ffa9 	bl	8003074 <SPI1_SetSpeed>
    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//Write a 5-byte address.
 8003122:	463b      	mov	r3, r7
 8003124:	2205      	movs	r2, #5
 8003126:	4619      	mov	r1, r3
 8003128:	2030      	movs	r0, #48	; 0x30
 800312a:	f000 f8a7 	bl	800327c <NRF24L01_Write_Buf>
    NRF24L01_Read_Buf(TX_ADDR,buf,5); //Read the written address
 800312e:	463b      	mov	r3, r7
 8003130:	2205      	movs	r2, #5
 8003132:	4619      	mov	r1, r3
 8003134:	2010      	movs	r0, #16
 8003136:	f000 f86b 	bl	8003210 <NRF24L01_Read_Buf>
   for(i=0;i<5;i++)
 800313a:	2300      	movs	r3, #0
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	e00a      	b.n	8003156 <NRF24L01_Check+0x4e>
   {
      if(buf[i]!=0XA5)
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	f107 0208 	add.w	r2, r7, #8
 8003146:	4413      	add	r3, r2
 8003148:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 800314c:	2ba5      	cmp	r3, #165	; 0xa5
 800314e:	d106      	bne.n	800315e <NRF24L01_Check+0x56>
   for(i=0;i<5;i++)
 8003150:	79fb      	ldrb	r3, [r7, #7]
 8003152:	3301      	adds	r3, #1
 8003154:	71fb      	strb	r3, [r7, #7]
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	2b04      	cmp	r3, #4
 800315a:	d9f1      	bls.n	8003140 <NRF24L01_Check+0x38>
 800315c:	e000      	b.n	8003160 <NRF24L01_Check+0x58>
         break;
 800315e:	bf00      	nop
   }
    if(i!=5)return 1;//Detect 24L01 error
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	2b05      	cmp	r3, #5
 8003164:	d001      	beq.n	800316a <NRF24L01_Check+0x62>
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <NRF24L01_Check+0x64>
    return 0; //24L01 detected
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	08018914 	.word	0x08018914

08003178 <NRF24L01_Write_Reg>:
     * Return value:     status: 레지스터 상태
     * Description:     none
  *
  */
uint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	460a      	mov	r2, r1
 8003182:	71fb      	strb	r3, [r7, #7]
 8003184:	4613      	mov	r3, r2
 8003186:	71bb      	strb	r3, [r7, #6]
   uint8_t status;
     NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 8003188:	2200      	movs	r2, #0
 800318a:	2102      	movs	r1, #2
 800318c:	480c      	ldr	r0, [pc, #48]	; (80031c0 <NRF24L01_Write_Reg+0x48>)
 800318e:	f00b fccb 	bl	800eb28 <HAL_GPIO_WritePin>
     status =SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send register number
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	4619      	mov	r1, r3
 8003196:	480b      	ldr	r0, [pc, #44]	; (80031c4 <NRF24L01_Write_Reg+0x4c>)
 8003198:	f7ff ff9a 	bl	80030d0 <SPIx_ReadWriteByte>
 800319c:	4603      	mov	r3, r0
 800319e:	73fb      	strb	r3, [r7, #15]
     SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,value); //Write the value of the register
 80031a0:	79bb      	ldrb	r3, [r7, #6]
 80031a2:	4619      	mov	r1, r3
 80031a4:	4807      	ldr	r0, [pc, #28]	; (80031c4 <NRF24L01_Write_Reg+0x4c>)
 80031a6:	f7ff ff93 	bl	80030d0 <SPIx_ReadWriteByte>
     NRF24L01_SPI_CS_DISABLE(); //Disable SPI transmission
 80031aa:	2201      	movs	r2, #1
 80031ac:	2102      	movs	r1, #2
 80031ae:	4804      	ldr	r0, [pc, #16]	; (80031c0 <NRF24L01_Write_Reg+0x48>)
 80031b0:	f00b fcba 	bl	800eb28 <HAL_GPIO_WritePin>
     return(status); //return status value
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40020400 	.word	0x40020400
 80031c4:	20007534 	.word	0x20007534

080031c8 <NRF24L01_Read_Reg>:
     * Return value:     reg_val:레지스터 값
     * Explanation:     none
  *
  */
uint8_t NRF24L01_Read_Reg(uint8_t reg)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	4603      	mov	r3, r0
 80031d0:	71fb      	strb	r3, [r7, #7]
   uint8_t reg_val;
      NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 80031d2:	2200      	movs	r2, #0
 80031d4:	2102      	movs	r1, #2
 80031d6:	480c      	ldr	r0, [pc, #48]	; (8003208 <NRF24L01_Read_Reg+0x40>)
 80031d8:	f00b fca6 	bl	800eb28 <HAL_GPIO_WritePin>
     SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg); //Send register number
 80031dc:	79fb      	ldrb	r3, [r7, #7]
 80031de:	4619      	mov	r1, r3
 80031e0:	480a      	ldr	r0, [pc, #40]	; (800320c <NRF24L01_Read_Reg+0x44>)
 80031e2:	f7ff ff75 	bl	80030d0 <SPIx_ReadWriteByte>
     reg_val=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//Read register content
 80031e6:	21ff      	movs	r1, #255	; 0xff
 80031e8:	4808      	ldr	r0, [pc, #32]	; (800320c <NRF24L01_Read_Reg+0x44>)
 80031ea:	f7ff ff71 	bl	80030d0 <SPIx_ReadWriteByte>
 80031ee:	4603      	mov	r3, r0
 80031f0:	73fb      	strb	r3, [r7, #15]
     NRF24L01_SPI_CS_DISABLE(); //Disable SPI transmission
 80031f2:	2201      	movs	r2, #1
 80031f4:	2102      	movs	r1, #2
 80031f6:	4804      	ldr	r0, [pc, #16]	; (8003208 <NRF24L01_Read_Reg+0x40>)
 80031f8:	f00b fc96 	bl	800eb28 <HAL_GPIO_WritePin>
     return(reg_val); //return status value
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40020400 	.word	0x40020400
 800320c:	20007534 	.word	0x20007534

08003210 <NRF24L01_Read_Buf>:
     * Return value:     status: 이번에 읽은 레지스터 상태 값
     * Description:        none
  *
  */
uint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)
{
 8003210:	b590      	push	{r4, r7, lr}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	4603      	mov	r3, r0
 8003218:	6039      	str	r1, [r7, #0]
 800321a:	71fb      	strb	r3, [r7, #7]
 800321c:	4613      	mov	r3, r2
 800321e:	71bb      	strb	r3, [r7, #6]
   uint8_t status, uint8_t_ctr;

     NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 8003220:	2200      	movs	r2, #0
 8003222:	2102      	movs	r1, #2
 8003224:	4813      	ldr	r0, [pc, #76]	; (8003274 <NRF24L01_Read_Buf+0x64>)
 8003226:	f00b fc7f 	bl	800eb28 <HAL_GPIO_WritePin>
//   HAL_Delay(20);
     status=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send register value (position) and read status value
 800322a:	79fb      	ldrb	r3, [r7, #7]
 800322c:	4619      	mov	r1, r3
 800322e:	4812      	ldr	r0, [pc, #72]	; (8003278 <NRF24L01_Read_Buf+0x68>)
 8003230:	f7ff ff4e 	bl	80030d0 <SPIx_ReadWriteByte>
 8003234:	4603      	mov	r3, r0
 8003236:	73bb      	strb	r3, [r7, #14]
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003238:	2300      	movs	r3, #0
 800323a:	73fb      	strb	r3, [r7, #15]
 800323c:	e00b      	b.n	8003256 <NRF24L01_Read_Buf+0x46>
  {
         pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,0XFF);//Read data
 800323e:	7bfb      	ldrb	r3, [r7, #15]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	18d4      	adds	r4, r2, r3
 8003244:	21ff      	movs	r1, #255	; 0xff
 8003246:	480c      	ldr	r0, [pc, #48]	; (8003278 <NRF24L01_Read_Buf+0x68>)
 8003248:	f7ff ff42 	bl	80030d0 <SPIx_ReadWriteByte>
 800324c:	4603      	mov	r3, r0
 800324e:	7023      	strb	r3, [r4, #0]
    for(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)
 8003250:	7bfb      	ldrb	r3, [r7, #15]
 8003252:	3301      	adds	r3, #1
 8003254:	73fb      	strb	r3, [r7, #15]
 8003256:	7bfa      	ldrb	r2, [r7, #15]
 8003258:	79bb      	ldrb	r3, [r7, #6]
 800325a:	429a      	cmp	r2, r3
 800325c:	d3ef      	bcc.n	800323e <NRF24L01_Read_Buf+0x2e>
  }
     NRF24L01_SPI_CS_DISABLE(); //Close SPI transmission
 800325e:	2201      	movs	r2, #1
 8003260:	2102      	movs	r1, #2
 8003262:	4804      	ldr	r0, [pc, #16]	; (8003274 <NRF24L01_Read_Buf+0x64>)
 8003264:	f00b fc60 	bl	800eb28 <HAL_GPIO_WritePin>
     return status; //Return the status value read
 8003268:	7bbb      	ldrb	r3, [r7, #14]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bd90      	pop	{r4, r7, pc}
 8003272:	bf00      	nop
 8003274:	40020400 	.word	0x40020400
 8003278:	20007534 	.word	0x20007534

0800327c <NRF24L01_Write_Buf>:
     * Return value:     status: 이번에 쓴 레지스터 상태 값
     * Description:        none
  *
  */
uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
 8003288:	4613      	mov	r3, r2
 800328a:	71bb      	strb	r3, [r7, #6]
   uint8_t status,uint8_t_ctr;
      NRF24L01_SPI_CS_ENABLE(); //Enable SPI transmission
 800328c:	2200      	movs	r2, #0
 800328e:	2102      	movs	r1, #2
 8003290:	4812      	ldr	r0, [pc, #72]	; (80032dc <NRF24L01_Write_Buf+0x60>)
 8003292:	f00b fc49 	bl	800eb28 <HAL_GPIO_WritePin>
//   HAL_Delay(20);
     status = SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,reg);//Send the register value (position) and read the status value
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	4619      	mov	r1, r3
 800329a:	4811      	ldr	r0, [pc, #68]	; (80032e0 <NRF24L01_Write_Buf+0x64>)
 800329c:	f7ff ff18 	bl	80030d0 <SPIx_ReadWriteByte>
 80032a0:	4603      	mov	r3, r0
 80032a2:	73bb      	strb	r3, [r7, #14]
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 80032a4:	2300      	movs	r3, #0
 80032a6:	73fb      	strb	r3, [r7, #15]
 80032a8:	e00a      	b.n	80032c0 <NRF24L01_Write_Buf+0x44>
  {
         SPIx_ReadWriteByte(&NRF24L01_SPI_PORT,*pBuf++); //Write data
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	603a      	str	r2, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	4619      	mov	r1, r3
 80032b4:	480a      	ldr	r0, [pc, #40]	; (80032e0 <NRF24L01_Write_Buf+0x64>)
 80032b6:	f7ff ff0b 	bl	80030d0 <SPIx_ReadWriteByte>
  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)
 80032ba:	7bfb      	ldrb	r3, [r7, #15]
 80032bc:	3301      	adds	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
 80032c0:	7bfa      	ldrb	r2, [r7, #15]
 80032c2:	79bb      	ldrb	r3, [r7, #6]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d3f0      	bcc.n	80032aa <NRF24L01_Write_Buf+0x2e>
  }
     NRF24L01_SPI_CS_DISABLE(); //Close SPI transmission
 80032c8:	2201      	movs	r2, #1
 80032ca:	2102      	movs	r1, #2
 80032cc:	4803      	ldr	r0, [pc, #12]	; (80032dc <NRF24L01_Write_Buf+0x60>)
 80032ce:	f00b fc2b 	bl	800eb28 <HAL_GPIO_WritePin>
     return status; //Return the status value read
 80032d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40020400 	.word	0x40020400
 80032e0:	20007534 	.word	0x20007534

080032e4 <NRF24L01_RxPacket>:
     * Return value:      0: 수신 성공  / 0: 수신 실패
     * Description:       none
  *
  */
uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
    uint8_t sta;

    SPI1_SetSpeed(SPI_BAUDRATEPRESCALER_16); //The spi speed is 9Mhz (the maximum SPI clock of 24L01 is 10Mhz)
 80032ec:	2018      	movs	r0, #24
 80032ee:	f7ff fec1 	bl	8003074 <SPI1_SetSpeed>
    sta=NRF24L01_Read_Reg(STATUS); //Read the value of the status register
 80032f2:	2007      	movs	r0, #7
 80032f4:	f7ff ff68 	bl	80031c8 <NRF24L01_Read_Reg>
 80032f8:	4603      	mov	r3, r0
 80032fa:	73fb      	strb	r3, [r7, #15]
    NRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //Clear TX_DS or MAX_RT interrupt flag
 80032fc:	7bfb      	ldrb	r3, [r7, #15]
 80032fe:	4619      	mov	r1, r3
 8003300:	2027      	movs	r0, #39	; 0x27
 8003302:	f7ff ff39 	bl	8003178 <NRF24L01_Write_Reg>
    if(sta&RX_OK)//Data received
 8003306:	7bfb      	ldrb	r3, [r7, #15]
 8003308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <NRF24L01_RxPacket+0x42>
   {
       NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//Read data
 8003310:	2220      	movs	r2, #32
 8003312:	6879      	ldr	r1, [r7, #4]
 8003314:	2061      	movs	r0, #97	; 0x61
 8003316:	f7ff ff7b 	bl	8003210 <NRF24L01_Read_Buf>
       NRF24L01_Write_Reg(FLUSH_RX,0xff);//Clear RX FIFO register
 800331a:	21ff      	movs	r1, #255	; 0xff
 800331c:	20e2      	movs	r0, #226	; 0xe2
 800331e:	f7ff ff2b 	bl	8003178 <NRF24L01_Write_Reg>
      return 0;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <NRF24L01_RxPacket+0x44>
   }
    return 1;//No data received
 8003326:	2301      	movs	r3, #1
}
 8003328:	4618      	mov	r0, r3
 800332a:	3710      	adds	r7, #16
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <NRF24L01_RX_Mode>:
     * Return value:       none
     * Description:       nRF24L01 DataSheet 레지스터 맵 참고
  *
  */
void NRF24L01_RX_Mode(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
    NRF24L01_CE_LOW();
 8003334:	2200      	movs	r2, #0
 8003336:	2101      	movs	r1, #1
 8003338:	4814      	ldr	r0, [pc, #80]	; (800338c <NRF24L01_RX_Mode+0x5c>)
 800333a:	f00b fbf5 	bl	800eb28 <HAL_GPIO_WritePin>
     NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//Configure the parameters of the basic working mode; PWR_UP, EN_CRC, 16BIT_CRC
 800333e:	210f      	movs	r1, #15
 8003340:	2020      	movs	r0, #32
 8003342:	f7ff ff19 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01); //Enable automatic response of channel 0
 8003346:	2101      	movs	r1, #1
 8003348:	2021      	movs	r0, #33	; 0x21
 800334a:	f7ff ff15 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//Enable the receive address of channel 0
 800334e:	2101      	movs	r1, #1
 8003350:	2022      	movs	r0, #34	; 0x22
 8003352:	f7ff ff11 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40); //Set RF communication frequency
 8003356:	2128      	movs	r1, #40	; 0x28
 8003358:	2025      	movs	r0, #37	; 0x25
 800335a:	f7ff ff0d 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//Set TX transmission parameters, 0db gain, 2Mbps, low noise gain on
 800335e:	210f      	movs	r1, #15
 8003360:	2026      	movs	r0, #38	; 0x26
 8003362:	f7ff ff09 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//Select the effective data width of channel 0
 8003366:	2120      	movs	r1, #32
 8003368:	2031      	movs	r0, #49	; 0x31
 800336a:	f7ff ff05 	bl	8003178 <NRF24L01_Write_Reg>
     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//write RX node address
 800336e:	2205      	movs	r2, #5
 8003370:	4907      	ldr	r1, [pc, #28]	; (8003390 <NRF24L01_RX_Mode+0x60>)
 8003372:	202a      	movs	r0, #42	; 0x2a
 8003374:	f7ff ff82 	bl	800327c <NRF24L01_Write_Buf>
     NRF24L01_CE_HIGH(); //CE is high, enter the receiving mode
 8003378:	2201      	movs	r2, #1
 800337a:	2101      	movs	r1, #1
 800337c:	4803      	ldr	r0, [pc, #12]	; (800338c <NRF24L01_RX_Mode+0x5c>)
 800337e:	f00b fbd3 	bl	800eb28 <HAL_GPIO_WritePin>
     HAL_Delay(1); //안정화 시간
 8003382:	2001      	movs	r0, #1
 8003384:	f00a fa78 	bl	800d878 <HAL_Delay>
}
 8003388:	bf00      	nop
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40020400 	.word	0x40020400
 8003390:	08018bf0 	.word	0x08018bf0

08003394 <sdInit>:
static void cliSd(cli_args_t *args);
#endif /* _USE_HW_CLI */


bool sdInit(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
	bool ret 			 		 = false;
 800339a:	2300      	movs	r3, #0
 800339c:	71fb      	strb	r3, [r7, #7]
	hsd.Instance 		 		 = SDIO;
 800339e:	4b20      	ldr	r3, [pc, #128]	; (8003420 <sdInit+0x8c>)
 80033a0:	4a20      	ldr	r2, [pc, #128]	; (8003424 <sdInit+0x90>)
 80033a2:	601a      	str	r2, [r3, #0]
	hsd.Init.ClockEdge   		 = SDIO_CLOCK_EDGE_RISING;
 80033a4:	4b1e      	ldr	r3, [pc, #120]	; (8003420 <sdInit+0x8c>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	605a      	str	r2, [r3, #4]
	hsd.Init.ClockBypass 		 = SDIO_CLOCK_BYPASS_DISABLE;
 80033aa:	4b1d      	ldr	r3, [pc, #116]	; (8003420 <sdInit+0x8c>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	609a      	str	r2, [r3, #8]
	hsd.Init.ClockPowerSave 	 = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80033b0:	4b1b      	ldr	r3, [pc, #108]	; (8003420 <sdInit+0x8c>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	60da      	str	r2, [r3, #12]
	hsd.Init.BusWide	     	 = SDIO_BUS_WIDE_1B;
 80033b6:	4b1a      	ldr	r3, [pc, #104]	; (8003420 <sdInit+0x8c>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	611a      	str	r2, [r3, #16]
	hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80033bc:	4b18      	ldr	r3, [pc, #96]	; (8003420 <sdInit+0x8c>)
 80033be:	2200      	movs	r2, #0
 80033c0:	615a      	str	r2, [r3, #20]
	hsd.Init.ClockDiv 			 = SDIO_TRANSFER_CLK_DIV;
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <sdInit+0x8c>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	619a      	str	r2, [r3, #24]

	is_detected = false;
 80033c8:	4b17      	ldr	r3, [pc, #92]	; (8003428 <sdInit+0x94>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	701a      	strb	r2, [r3, #0]
	if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7ff f8b2 	bl	8002538 <gpioPinRead>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <sdInit+0x4c>
	{
	   is_detected = true;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <sdInit+0x94>)
 80033dc:	2201      	movs	r2, #1
 80033de:	701a      	strb	r2, [r3, #0]
	}

	if(is_detected == true)
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <sdInit+0x94>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00f      	beq.n	8003408 <sdInit+0x74>
	{
		if (HAL_SD_Init(&hsd) == HAL_OK)
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <sdInit+0x8c>)
 80033ea:	f00d f9c9 	bl	8010780 <HAL_SD_Init>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d109      	bne.n	8003408 <sdInit+0x74>
		{
			if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) == HAL_OK)
 80033f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033f8:	4809      	ldr	r0, [pc, #36]	; (8003420 <sdInit+0x8c>)
 80033fa:	f00d ffa1 	bl	8011340 <HAL_SD_ConfigWideBusOperation>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <sdInit+0x74>
			{
			   ret = true;
 8003404:	2301      	movs	r3, #1
 8003406:	71fb      	strb	r3, [r7, #7]
			}
		}
	}

	is_init = ret;
 8003408:	4a08      	ldr	r2, [pc, #32]	; (800342c <sdInit+0x98>)
 800340a:	79fb      	ldrb	r3, [r7, #7]
 800340c:	7013      	strb	r3, [r2, #0]

#ifdef _USE_HW_CLI
  cliAdd("sd", cliSd);
 800340e:	4908      	ldr	r1, [pc, #32]	; (8003430 <sdInit+0x9c>)
 8003410:	4808      	ldr	r0, [pc, #32]	; (8003434 <sdInit+0xa0>)
 8003412:	f7fe fac5 	bl	80019a0 <cliAdd>
#endif /* _USE_HW_CLI */

	return ret;
 8003416:	79fb      	ldrb	r3, [r7, #7]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	200073e8 	.word	0x200073e8
 8003424:	40012c00 	.word	0x40012c00
 8003428:	20006a01 	.word	0x20006a01
 800342c:	20006a00 	.word	0x20006a00
 8003430:	08003919 	.word	0x08003919
 8003434:	0801891c 	.word	0x0801891c

08003438 <sdIsInit>:
}



bool sdIsInit(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  return is_init;
 800343c:	4b03      	ldr	r3, [pc, #12]	; (800344c <sdIsInit+0x14>)
 800343e:	781b      	ldrb	r3, [r3, #0]
}
 8003440:	4618      	mov	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	20006a00 	.word	0x20006a00

08003450 <sdIsDetected>:



bool sdIsDetected(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
  if (gpioPinRead(_PIN_GPIO_SDCARD_DETECT) == true)
 8003454:	2000      	movs	r0, #0
 8003456:	f7ff f86f 	bl	8002538 <gpioPinRead>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d003      	beq.n	8003468 <sdIsDetected+0x18>
  {
    is_detected = true;
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <sdIsDetected+0x28>)
 8003462:	2201      	movs	r2, #1
 8003464:	701a      	strb	r2, [r3, #0]
 8003466:	e002      	b.n	800346e <sdIsDetected+0x1e>
  }
  else
  {
    is_detected = false;
 8003468:	4b03      	ldr	r3, [pc, #12]	; (8003478 <sdIsDetected+0x28>)
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
  }

  return is_detected;
 800346e:	4b02      	ldr	r3, [pc, #8]	; (8003478 <sdIsDetected+0x28>)
 8003470:	781b      	ldrb	r3, [r3, #0]
}
 8003472:	4618      	mov	r0, r3
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	20006a01 	.word	0x20006a01

0800347c <sdGetInfo>:




bool sdGetInfo(sd_info_t *p_info)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b08c      	sub	sp, #48	; 0x30
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  bool ret = false;
 8003484:	2300      	movs	r3, #0
 8003486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t *p_sd_info = (sd_info_t *)p_info;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	62bb      	str	r3, [r7, #40]	; 0x28

  HAL_SD_CardInfoTypeDef card_info;


  if (is_init == true)
 800348e:	4b24      	ldr	r3, [pc, #144]	; (8003520 <sdGetInfo+0xa4>)
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d03e      	beq.n	8003514 <sdGetInfo+0x98>
  {
    HAL_SD_GetCardInfo(&hsd, &card_info);
 8003496:	f107 0308 	add.w	r3, r7, #8
 800349a:	4619      	mov	r1, r3
 800349c:	4821      	ldr	r0, [pc, #132]	; (8003524 <sdGetInfo+0xa8>)
 800349e:	f00d ff23 	bl	80112e8 <HAL_SD_GetCardInfo>

    p_sd_info->card_type          = card_info.CardType;
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a6:	601a      	str	r2, [r3, #0]
    p_sd_info->card_version       = card_info.CardVersion;
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	605a      	str	r2, [r3, #4]
    p_sd_info->card_class         = card_info.Class;
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b2:	609a      	str	r2, [r3, #8]
    p_sd_info->rel_card_Add       = card_info.RelCardAdd;
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b8:	60da      	str	r2, [r3, #12]
    p_sd_info->block_numbers      = card_info.BlockNbr;
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034be:	611a      	str	r2, [r3, #16]
    p_sd_info->block_size         = card_info.BlockSize;
 80034c0:	69fa      	ldr	r2, [r7, #28]
 80034c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c4:	615a      	str	r2, [r3, #20]
    p_sd_info->log_block_numbers  = card_info.LogBlockNbr;
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ca:	619a      	str	r2, [r3, #24]
    p_sd_info->log_block_size     = card_info.LogBlockSize;
 80034cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d0:	61da      	str	r2, [r3, #28]
    p_sd_info->card_size          =  (uint32_t)((uint64_t)p_sd_info->block_numbers * (uint64_t)p_sd_info->block_size / (uint64_t)1024 / (uint64_t)1024);
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f04f 0100 	mov.w	r1, #0
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	461a      	mov	r2, r3
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	fb02 f501 	mul.w	r5, r2, r1
 80034ea:	fb00 f403 	mul.w	r4, r0, r3
 80034ee:	442c      	add	r4, r5
 80034f0:	fba0 2302 	umull	r2, r3, r0, r2
 80034f4:	18e1      	adds	r1, r4, r3
 80034f6:	460b      	mov	r3, r1
 80034f8:	f04f 0000 	mov.w	r0, #0
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	0d10      	lsrs	r0, r2, #20
 8003502:	ea40 3003 	orr.w	r0, r0, r3, lsl #12
 8003506:	0d19      	lsrs	r1, r3, #20
 8003508:	4602      	mov	r2, r0
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	621a      	str	r2, [r3, #32]
    ret = true;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return ret;
 8003514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003518:	4618      	mov	r0, r3
 800351a:	3730      	adds	r7, #48	; 0x30
 800351c:	46bd      	mov	sp, r7
 800351e:	bdb0      	pop	{r4, r5, r7, pc}
 8003520:	20006a00 	.word	0x20006a00
 8003524:	200073e8 	.word	0x200073e8

08003528 <sdIsBusy>:


bool sdIsBusy(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  bool is_busy;


  if (HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER )
 800352e:	4808      	ldr	r0, [pc, #32]	; (8003550 <sdIsBusy+0x28>)
 8003530:	f00d ffa0 	bl	8011474 <HAL_SD_GetCardState>
 8003534:	4603      	mov	r3, r0
 8003536:	2b04      	cmp	r3, #4
 8003538:	d102      	bne.n	8003540 <sdIsBusy+0x18>
  {
    is_busy = false;
 800353a:	2300      	movs	r3, #0
 800353c:	71fb      	strb	r3, [r7, #7]
 800353e:	e001      	b.n	8003544 <sdIsBusy+0x1c>
  }
  else
  {
    is_busy = true;
 8003540:	2301      	movs	r3, #1
 8003542:	71fb      	strb	r3, [r7, #7]
  }

  return is_busy;
 8003544:	79fb      	ldrb	r3, [r7, #7]
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200073e8 	.word	0x200073e8

08003554 <sdIsReady>:



bool sdIsReady(uint32_t timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t pre_time;

  pre_time = millis();
 800355c:	f7fd fd99 	bl	8001092 <millis>
 8003560:	60f8      	str	r0, [r7, #12]

  while(millis() - pre_time < timeout)
 8003562:	e009      	b.n	8003578 <sdIsReady+0x24>
  {
    if (sdIsBusy() == false)
 8003564:	f7ff ffe0 	bl	8003528 <sdIsBusy>
 8003568:	4603      	mov	r3, r0
 800356a:	f083 0301 	eor.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <sdIsReady+0x24>
    {
      return true;
 8003574:	2301      	movs	r3, #1
 8003576:	e008      	b.n	800358a <sdIsReady+0x36>
  while(millis() - pre_time < timeout)
 8003578:	f7fd fd8b 	bl	8001092 <millis>
 800357c:	4602      	mov	r2, r0
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	429a      	cmp	r2, r3
 8003586:	d8ed      	bhi.n	8003564 <sdIsReady+0x10>
    }
  }

  return false;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <sdReadBlocks>:



bool sdReadBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	60f8      	str	r0, [r7, #12]
 800359c:	60b9      	str	r1, [r7, #8]
 800359e:	607a      	str	r2, [r7, #4]
 80035a0:	603b      	str	r3, [r7, #0]
  bool ret = false;
 80035a2:	2300      	movs	r3, #0
 80035a4:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_rx_done = false;
 80035a6:	4b1e      	ldr	r3, [pc, #120]	; (8003620 <sdReadBlocks+0x8c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	68b9      	ldr	r1, [r7, #8]
 80035b2:	481c      	ldr	r0, [pc, #112]	; (8003624 <sdReadBlocks+0x90>)
 80035b4:	f00d f992 	bl	80108dc <HAL_SD_ReadBlocks_DMA>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d12a      	bne.n	8003614 <sdReadBlocks+0x80>
  {

    pre_time = millis();
 80035be:	f7fd fd68 	bl	8001092 <millis>
 80035c2:	6138      	str	r0, [r7, #16]
    while(is_rx_done == false)
 80035c4:	e007      	b.n	80035d6 <sdReadBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 80035c6:	f7fd fd64 	bl	8001092 <millis>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	683a      	ldr	r2, [r7, #0]
 80035d2:	429a      	cmp	r2, r3
 80035d4:	d908      	bls.n	80035e8 <sdReadBlocks+0x54>
    while(is_rx_done == false)
 80035d6:	4b12      	ldr	r3, [pc, #72]	; (8003620 <sdReadBlocks+0x8c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f083 0301 	eor.w	r3, r3, #1
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1ef      	bne.n	80035c6 <sdReadBlocks+0x32>
 80035e6:	e00d      	b.n	8003604 <sdReadBlocks+0x70>
      {
        break;
 80035e8:	bf00      	nop
      }
    }
    while(sdIsBusy() == true)
 80035ea:	e00b      	b.n	8003604 <sdReadBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80035ec:	f7fd fd51 	bl	8001092 <millis>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	683a      	ldr	r2, [r7, #0]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d803      	bhi.n	8003604 <sdReadBlocks+0x70>
      {
        is_rx_done = false;
 80035fc:	4b08      	ldr	r3, [pc, #32]	; (8003620 <sdReadBlocks+0x8c>)
 80035fe:	2200      	movs	r2, #0
 8003600:	701a      	strb	r2, [r3, #0]
        break;
 8003602:	e004      	b.n	800360e <sdReadBlocks+0x7a>
    while(sdIsBusy() == true)
 8003604:	f7ff ff90 	bl	8003528 <sdIsBusy>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1ee      	bne.n	80035ec <sdReadBlocks+0x58>
      }
    }
    ret = is_rx_done;
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <sdReadBlocks+0x8c>)
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8003614:	7dfb      	ldrb	r3, [r7, #23]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20006a02 	.word	0x20006a02
 8003624:	200073e8 	.word	0x200073e8

08003628 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  is_rx_done = true;
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <HAL_SD_RxCpltCallback+0x1c>)
 8003632:	2201      	movs	r2, #1
 8003634:	701a      	strb	r2, [r3, #0]
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20006a02 	.word	0x20006a02

08003648 <HAL_SD_TxCpltCallback>:


void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  is_tx_done = true;
 8003650:	4b04      	ldr	r3, [pc, #16]	; (8003664 <HAL_SD_TxCpltCallback+0x1c>)
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20006a03 	.word	0x20006a03

08003668 <sdWriteBlocks>:


bool sdWriteBlocks(uint32_t block_addr, uint8_t *p_data, uint32_t num_of_blocks, uint32_t timeout_ms)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
  bool ret = false;
 8003676:	2300      	movs	r3, #0
 8003678:	75fb      	strb	r3, [r7, #23]
  uint32_t pre_time;


  is_tx_done = false;
 800367a:	4b1e      	ldr	r3, [pc, #120]	; (80036f4 <sdWriteBlocks+0x8c>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)p_data, block_addr, num_of_blocks) == HAL_OK)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	68fa      	ldr	r2, [r7, #12]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	481c      	ldr	r0, [pc, #112]	; (80036f8 <sdWriteBlocks+0x90>)
 8003688:	f00d fa0a 	bl	8010aa0 <HAL_SD_WriteBlocks_DMA>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d12a      	bne.n	80036e8 <sdWriteBlocks+0x80>
  {
    pre_time = millis();
 8003692:	f7fd fcfe 	bl	8001092 <millis>
 8003696:	6138      	str	r0, [r7, #16]
    while(is_tx_done == false)
 8003698:	e007      	b.n	80036aa <sdWriteBlocks+0x42>
    {
      if (millis()-pre_time >= timeout_ms)
 800369a:	f7fd fcfa 	bl	8001092 <millis>
 800369e:	4602      	mov	r2, r0
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d908      	bls.n	80036bc <sdWriteBlocks+0x54>
    while(is_tx_done == false)
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <sdWriteBlocks+0x8c>)
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	f083 0301 	eor.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1ef      	bne.n	800369a <sdWriteBlocks+0x32>
 80036ba:	e00d      	b.n	80036d8 <sdWriteBlocks+0x70>
      {
        break;
 80036bc:	bf00      	nop
      }
    }

    while(sdIsBusy() == true)
 80036be:	e00b      	b.n	80036d8 <sdWriteBlocks+0x70>
    {
      if (millis()-pre_time >= timeout_ms)
 80036c0:	f7fd fce7 	bl	8001092 <millis>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d803      	bhi.n	80036d8 <sdWriteBlocks+0x70>
      {
        is_tx_done = false;
 80036d0:	4b08      	ldr	r3, [pc, #32]	; (80036f4 <sdWriteBlocks+0x8c>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]
        break;
 80036d6:	e004      	b.n	80036e2 <sdWriteBlocks+0x7a>
    while(sdIsBusy() == true)
 80036d8:	f7ff ff26 	bl	8003528 <sdIsBusy>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1ee      	bne.n	80036c0 <sdWriteBlocks+0x58>
      }
    }
    ret = is_tx_done;
 80036e2:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <sdWriteBlocks+0x8c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80036e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20006a03 	.word	0x20006a03
 80036f8:	200073e8 	.word	0x200073e8

080036fc <HAL_SD_MspInit>:
  return ret;
}


void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a77      	ldr	r2, [pc, #476]	; (80038f8 <HAL_SD_MspInit+0x1fc>)
 800371a:	4293      	cmp	r3, r2
 800371c:	f040 80e8 	bne.w	80038f0 <HAL_SD_MspInit+0x1f4>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003720:	2300      	movs	r3, #0
 8003722:	61bb      	str	r3, [r7, #24]
 8003724:	4b75      	ldr	r3, [pc, #468]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003728:	4a74      	ldr	r2, [pc, #464]	; (80038fc <HAL_SD_MspInit+0x200>)
 800372a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800372e:	6313      	str	r3, [r2, #48]	; 0x30
 8003730:	4b72      	ldr	r3, [pc, #456]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	69bb      	ldr	r3, [r7, #24]

 /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	4b6e      	ldr	r3, [pc, #440]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	4a6d      	ldr	r2, [pc, #436]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003746:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800374a:	6453      	str	r3, [r2, #68]	; 0x44
 800374c:	4b6b      	ldr	r3, [pc, #428]	; (80038fc <HAL_SD_MspInit+0x200>)
 800374e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003750:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003754:	617b      	str	r3, [r7, #20]
 8003756:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003758:	2300      	movs	r3, #0
 800375a:	613b      	str	r3, [r7, #16]
 800375c:	4b67      	ldr	r3, [pc, #412]	; (80038fc <HAL_SD_MspInit+0x200>)
 800375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003760:	4a66      	ldr	r2, [pc, #408]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003762:	f043 0301 	orr.w	r3, r3, #1
 8003766:	6313      	str	r3, [r2, #48]	; 0x30
 8003768:	4b64      	ldr	r3, [pc, #400]	; (80038fc <HAL_SD_MspInit+0x200>)
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003774:	2300      	movs	r3, #0
 8003776:	60fb      	str	r3, [r7, #12]
 8003778:	4b60      	ldr	r3, [pc, #384]	; (80038fc <HAL_SD_MspInit+0x200>)
 800377a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377c:	4a5f      	ldr	r2, [pc, #380]	; (80038fc <HAL_SD_MspInit+0x200>)
 800377e:	f043 0302 	orr.w	r3, r3, #2
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
 8003784:	4b5d      	ldr	r3, [pc, #372]	; (80038fc <HAL_SD_MspInit+0x200>)
 8003786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	60fb      	str	r3, [r7, #12]
 800378e:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> SDIO_D1
    PA9     ------> SDIO_D2
    PB5     ------> SDIO_D3
    PB7     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8|GPIO_PIN_9;
 8003790:	f44f 7350 	mov.w	r3, #832	; 0x340
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800379a:	2301      	movs	r3, #1
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800379e:	2303      	movs	r3, #3
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037a2:	230c      	movs	r3, #12
 80037a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	4854      	ldr	r0, [pc, #336]	; (8003900 <HAL_SD_MspInit+0x204>)
 80037ae:	f00b f81f 	bl	800e7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_7;
 80037b2:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80037b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037bc:	2301      	movs	r3, #1
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037c0:	2303      	movs	r3, #3
 80037c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80037c4:	230c      	movs	r3, #12
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	f107 031c 	add.w	r3, r7, #28
 80037cc:	4619      	mov	r1, r3
 80037ce:	484d      	ldr	r0, [pc, #308]	; (8003904 <HAL_SD_MspInit+0x208>)
 80037d0:	f00b f80e 	bl	800e7f0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80037d4:	4b4c      	ldr	r3, [pc, #304]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037d6:	4a4d      	ldr	r2, [pc, #308]	; (800390c <HAL_SD_MspInit+0x210>)
 80037d8:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80037da:	4b4b      	ldr	r3, [pc, #300]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037e0:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037e2:	4b49      	ldr	r3, [pc, #292]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037e8:	4b47      	ldr	r3, [pc, #284]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80037ee:	4b46      	ldr	r3, [pc, #280]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80037f4:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80037f6:	4b44      	ldr	r3, [pc, #272]	; (8003908 <HAL_SD_MspInit+0x20c>)
 80037f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80037fc:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80037fe:	4b42      	ldr	r3, [pc, #264]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003800:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003804:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8003806:	4b40      	ldr	r3, [pc, #256]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003808:	2220      	movs	r2, #32
 800380a:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 800380c:	4b3e      	ldr	r3, [pc, #248]	; (8003908 <HAL_SD_MspInit+0x20c>)
 800380e:	2200      	movs	r2, #0
 8003810:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003812:	4b3d      	ldr	r3, [pc, #244]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003814:	2204      	movs	r2, #4
 8003816:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003818:	4b3b      	ldr	r3, [pc, #236]	; (8003908 <HAL_SD_MspInit+0x20c>)
 800381a:	2203      	movs	r2, #3
 800381c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 800381e:	4b3a      	ldr	r3, [pc, #232]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003820:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003824:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003828:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800382c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 800382e:	4836      	ldr	r0, [pc, #216]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003830:	f00a f958 	bl	800dae4 <HAL_DMA_Init>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_SD_MspInit+0x142>
    {
      Error_Handler();
 800383a:	f7fd fcab 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a31      	ldr	r2, [pc, #196]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003842:	641a      	str	r2, [r3, #64]	; 0x40
 8003844:	4a30      	ldr	r2, [pc, #192]	; (8003908 <HAL_SD_MspInit+0x20c>)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800384a:	4b31      	ldr	r3, [pc, #196]	; (8003910 <HAL_SD_MspInit+0x214>)
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_SD_MspInit+0x218>)
 800384e:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8003850:	4b2f      	ldr	r3, [pc, #188]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003852:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003856:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003858:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <HAL_SD_MspInit+0x214>)
 800385a:	2240      	movs	r2, #64	; 0x40
 800385c:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800385e:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003860:	2200      	movs	r2, #0
 8003862:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003864:	4b2a      	ldr	r3, [pc, #168]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003866:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800386a:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800386c:	4b28      	ldr	r3, [pc, #160]	; (8003910 <HAL_SD_MspInit+0x214>)
 800386e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003872:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003876:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800387a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 800387c:	4b24      	ldr	r3, [pc, #144]	; (8003910 <HAL_SD_MspInit+0x214>)
 800387e:	2220      	movs	r2, #32
 8003880:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003884:	2200      	movs	r2, #0
 8003886:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003888:	4b21      	ldr	r3, [pc, #132]	; (8003910 <HAL_SD_MspInit+0x214>)
 800388a:	2204      	movs	r2, #4
 800388c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800388e:	4b20      	ldr	r3, [pc, #128]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003890:	2203      	movs	r2, #3
 8003892:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003894:	4b1e      	ldr	r3, [pc, #120]	; (8003910 <HAL_SD_MspInit+0x214>)
 8003896:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800389c:	4b1c      	ldr	r3, [pc, #112]	; (8003910 <HAL_SD_MspInit+0x214>)
 800389e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80038a2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 80038a4:	481a      	ldr	r0, [pc, #104]	; (8003910 <HAL_SD_MspInit+0x214>)
 80038a6:	f00a f91d 	bl	800dae4 <HAL_DMA_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_SD_MspInit+0x1b8>
    {
      Error_Handler();
 80038b0:	f7fd fc70 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a16      	ldr	r2, [pc, #88]	; (8003910 <HAL_SD_MspInit+0x214>)
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c
 80038ba:	4a15      	ldr	r2, [pc, #84]	; (8003910 <HAL_SD_MspInit+0x214>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 80038c0:	2200      	movs	r2, #0
 80038c2:	2105      	movs	r1, #5
 80038c4:	2031      	movs	r0, #49	; 0x31
 80038c6:	f00a f8d6 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80038ca:	2031      	movs	r0, #49	; 0x31
 80038cc:	f00a f8ef 	bl	800daae <HAL_NVIC_EnableIRQ>
   /* USER CODE BEGIN SDIO_MspInit 1 */

    /* DMA interrupt init */
    /* DMA2_Stream3_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80038d0:	2200      	movs	r2, #0
 80038d2:	2105      	movs	r1, #5
 80038d4:	203b      	movs	r0, #59	; 0x3b
 80038d6:	f00a f8ce 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80038da:	203b      	movs	r0, #59	; 0x3b
 80038dc:	f00a f8e7 	bl	800daae <HAL_NVIC_EnableIRQ>
    /* DMA2_Stream6_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	2105      	movs	r1, #5
 80038e4:	2045      	movs	r0, #69	; 0x45
 80038e6:	f00a f8c6 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80038ea:	2045      	movs	r0, #69	; 0x45
 80038ec:	f00a f8df 	bl	800daae <HAL_NVIC_EnableIRQ>
  /* USER CODE END SDIO_MspInit 1 */
  }
}
 80038f0:	bf00      	nop
 80038f2:	3730      	adds	r7, #48	; 0x30
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40012c00 	.word	0x40012c00
 80038fc:	40023800 	.word	0x40023800
 8003900:	40020000 	.word	0x40020000
 8003904:	40020400 	.word	0x40020400
 8003908:	20007328 	.word	0x20007328
 800390c:	40026458 	.word	0x40026458
 8003910:	20007388 	.word	0x20007388
 8003914:	400264a0 	.word	0x400264a0

08003918 <cliSd>:


#ifdef _USE_HW_CLI

void cliSd(cli_args_t *args)
{
 8003918:	b590      	push	{r4, r7, lr}
 800391a:	f5ad 7d07 	sub.w	sp, sp, #540	; 0x21c
 800391e:	af00      	add	r7, sp, #0
 8003920:	1d3b      	adds	r3, r7, #4
 8003922:	6018      	str	r0, [r3, #0]
  bool ret = false;
 8003924:	2300      	movs	r3, #0
 8003926:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217


  if (args->argc == 1 && args->isStr(0, "info") == true)
 800392a:	1d3b      	adds	r3, r7, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	881b      	ldrh	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d179      	bne.n	8003a28 <cliSd+0x110>
 8003934:	1d3b      	adds	r3, r7, #4
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	4968      	ldr	r1, [pc, #416]	; (8003adc <cliSd+0x1c4>)
 800393c:	2000      	movs	r0, #0
 800393e:	4798      	blx	r3
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d070      	beq.n	8003a28 <cliSd+0x110>
  {
    sd_info_t sd_info;

    cliPrintf("sd init      : %d\n", is_init);
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <cliSd+0x1c8>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	4619      	mov	r1, r3
 800394c:	4865      	ldr	r0, [pc, #404]	; (8003ae4 <cliSd+0x1cc>)
 800394e:	f7fd ff17 	bl	8001780 <cliPrintf>
    cliPrintf("sd connected : %d\n", is_detected);
 8003952:	4b65      	ldr	r3, [pc, #404]	; (8003ae8 <cliSd+0x1d0>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	4864      	ldr	r0, [pc, #400]	; (8003aec <cliSd+0x1d4>)
 800395a:	f7fd ff11 	bl	8001780 <cliPrintf>

    if (is_init == true)
 800395e:	4b60      	ldr	r3, [pc, #384]	; (8003ae0 <cliSd+0x1c8>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d05d      	beq.n	8003a22 <cliSd+0x10a>
    {
      if (sdGetInfo(&sd_info) == true)
 8003966:	f107 030c 	add.w	r3, r7, #12
 800396a:	4618      	mov	r0, r3
 800396c:	f7ff fd86 	bl	800347c <sdGetInfo>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d055      	beq.n	8003a22 <cliSd+0x10a>
      {
        cliPrintf("   card_type            : %d\n", sd_info.card_type);
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4619      	mov	r1, r3
 800397e:	485c      	ldr	r0, [pc, #368]	; (8003af0 <cliSd+0x1d8>)
 8003980:	f7fd fefe 	bl	8001780 <cliPrintf>
        cliPrintf("   card_version         : %d\n", sd_info.card_version);
 8003984:	f107 030c 	add.w	r3, r7, #12
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	4619      	mov	r1, r3
 800398c:	4859      	ldr	r0, [pc, #356]	; (8003af4 <cliSd+0x1dc>)
 800398e:	f7fd fef7 	bl	8001780 <cliPrintf>
        cliPrintf("   card_class           : %d\n", sd_info.card_class);
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	4619      	mov	r1, r3
 800399a:	4857      	ldr	r0, [pc, #348]	; (8003af8 <cliSd+0x1e0>)
 800399c:	f7fd fef0 	bl	8001780 <cliPrintf>
        cliPrintf("   rel_card_Add         : %d\n", sd_info.rel_card_Add);
 80039a0:	f107 030c 	add.w	r3, r7, #12
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4619      	mov	r1, r3
 80039a8:	4854      	ldr	r0, [pc, #336]	; (8003afc <cliSd+0x1e4>)
 80039aa:	f7fd fee9 	bl	8001780 <cliPrintf>
        cliPrintf("   block_numbers        : %d\n", sd_info.block_numbers);
 80039ae:	f107 030c 	add.w	r3, r7, #12
 80039b2:	691b      	ldr	r3, [r3, #16]
 80039b4:	4619      	mov	r1, r3
 80039b6:	4852      	ldr	r0, [pc, #328]	; (8003b00 <cliSd+0x1e8>)
 80039b8:	f7fd fee2 	bl	8001780 <cliPrintf>
        cliPrintf("   block_size           : %d\n", sd_info.block_size);
 80039bc:	f107 030c 	add.w	r3, r7, #12
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	4619      	mov	r1, r3
 80039c4:	484f      	ldr	r0, [pc, #316]	; (8003b04 <cliSd+0x1ec>)
 80039c6:	f7fd fedb 	bl	8001780 <cliPrintf>
        cliPrintf("   log_block_numbers    : %d\n", sd_info.log_block_numbers);
 80039ca:	f107 030c 	add.w	r3, r7, #12
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	4619      	mov	r1, r3
 80039d2:	484d      	ldr	r0, [pc, #308]	; (8003b08 <cliSd+0x1f0>)
 80039d4:	f7fd fed4 	bl	8001780 <cliPrintf>
        cliPrintf("   log_block_size       : %d\n", sd_info.log_block_size);
 80039d8:	f107 030c 	add.w	r3, r7, #12
 80039dc:	69db      	ldr	r3, [r3, #28]
 80039de:	4619      	mov	r1, r3
 80039e0:	484a      	ldr	r0, [pc, #296]	; (8003b0c <cliSd+0x1f4>)
 80039e2:	f7fd fecd 	bl	8001780 <cliPrintf>
        cliPrintf("   card_size            : %d MB, %d.%d GB\n", sd_info.card_size, sd_info.card_size/1024, ((sd_info.card_size * 10)/1024) % 10);
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	6a18      	ldr	r0, [r3, #32]
 80039ec:	f107 030c 	add.w	r3, r7, #12
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	0a9c      	lsrs	r4, r3, #10
 80039f4:	f107 030c 	add.w	r3, r7, #12
 80039f8:	6a1a      	ldr	r2, [r3, #32]
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	005b      	lsls	r3, r3, #1
 8003a02:	0a99      	lsrs	r1, r3, #10
 8003a04:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <cliSd+0x1f8>)
 8003a06:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0a:	08da      	lsrs	r2, r3, #3
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	4413      	add	r3, r2
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	1aca      	subs	r2, r1, r3
 8003a16:	4613      	mov	r3, r2
 8003a18:	4622      	mov	r2, r4
 8003a1a:	4601      	mov	r1, r0
 8003a1c:	483d      	ldr	r0, [pc, #244]	; (8003b14 <cliSd+0x1fc>)
 8003a1e:	f7fd feaf 	bl	8001780 <cliPrintf>
      }
    }
    ret = true;
 8003a22:	2301      	movs	r3, #1
 8003a24:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (args->argc == 2 && args->isStr(0, "read") == true)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d13e      	bne.n	8003ab0 <cliSd+0x198>
 8003a32:	1d3b      	adds	r3, r7, #4
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	4937      	ldr	r1, [pc, #220]	; (8003b18 <cliSd+0x200>)
 8003a3a:	2000      	movs	r0, #0
 8003a3c:	4798      	blx	r3
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d035      	beq.n	8003ab0 <cliSd+0x198>
  {
    uint32_t number;
    uint32_t buf[512/4];

    number = args->getData(1);
 8003a44:	1d3b      	adds	r3, r7, #4
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	689b      	ldr	r3, [r3, #8]
 8003a4a:	2001      	movs	r0, #1
 8003a4c:	4798      	blx	r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    if (sdReadBlocks(number, (uint8_t *)buf, 1, 100) == true)
 8003a54:	f107 010c 	add.w	r1, r7, #12
 8003a58:	2364      	movs	r3, #100	; 0x64
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8003a60:	f7ff fd98 	bl	8003594 <sdReadBlocks>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d01c      	beq.n	8003aa4 <cliSd+0x18c>
    {
      for (int i=0; i<512/4; i++)
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003a70:	e013      	b.n	8003a9a <cliSd+0x182>
      {
        cliPrintf("%d:%04d : 0x%08X\n", number, i*4, buf[i]);
 8003a72:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a76:	0099      	lsls	r1, r3, #2
 8003a78:	f107 030c 	add.w	r3, r7, #12
 8003a7c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8003a80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a84:	460a      	mov	r2, r1
 8003a86:	f8d7 120c 	ldr.w	r1, [r7, #524]	; 0x20c
 8003a8a:	4824      	ldr	r0, [pc, #144]	; (8003b1c <cliSd+0x204>)
 8003a8c:	f7fd fe78 	bl	8001780 <cliPrintf>
      for (int i=0; i<512/4; i++)
 8003a90:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a94:	3301      	adds	r3, #1
 8003a96:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8003a9a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8003a9e:	2b7f      	cmp	r3, #127	; 0x7f
 8003aa0:	dde7      	ble.n	8003a72 <cliSd+0x15a>
 8003aa2:	e002      	b.n	8003aaa <cliSd+0x192>
      }
    }
    else
    {
      cliPrintf("sdRead Fail\n");
 8003aa4:	481e      	ldr	r0, [pc, #120]	; (8003b20 <cliSd+0x208>)
 8003aa6:	f7fd fe6b 	bl	8001780 <cliPrintf>
    }

    ret = true;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
  }

  if (ret != true)
 8003ab0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8003ab4:	f083 0301 	eor.w	r3, r3, #1
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <cliSd+0x1ba>
  {
    cliPrintf("sd info\n");
 8003abe:	4819      	ldr	r0, [pc, #100]	; (8003b24 <cliSd+0x20c>)
 8003ac0:	f7fd fe5e 	bl	8001780 <cliPrintf>

    if (is_init == true)
 8003ac4:	4b06      	ldr	r3, [pc, #24]	; (8003ae0 <cliSd+0x1c8>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d002      	beq.n	8003ad2 <cliSd+0x1ba>
    {
      cliPrintf("sd read block_number\n");
 8003acc:	4816      	ldr	r0, [pc, #88]	; (8003b28 <cliSd+0x210>)
 8003ace:	f7fd fe57 	bl	8001780 <cliPrintf>
    }
  }
}
 8003ad2:	bf00      	nop
 8003ad4:	f507 7707 	add.w	r7, r7, #540	; 0x21c
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd90      	pop	{r4, r7, pc}
 8003adc:	08018920 	.word	0x08018920
 8003ae0:	20006a00 	.word	0x20006a00
 8003ae4:	08018928 	.word	0x08018928
 8003ae8:	20006a01 	.word	0x20006a01
 8003aec:	0801893c 	.word	0x0801893c
 8003af0:	08018950 	.word	0x08018950
 8003af4:	08018970 	.word	0x08018970
 8003af8:	08018990 	.word	0x08018990
 8003afc:	080189b0 	.word	0x080189b0
 8003b00:	080189d0 	.word	0x080189d0
 8003b04:	080189f0 	.word	0x080189f0
 8003b08:	08018a10 	.word	0x08018a10
 8003b0c:	08018a30 	.word	0x08018a30
 8003b10:	cccccccd 	.word	0xcccccccd
 8003b14:	08018a50 	.word	0x08018a50
 8003b18:	08018a7c 	.word	0x08018a7c
 8003b1c:	08018a84 	.word	0x08018a84
 8003b20:	08018a98 	.word	0x08018a98
 8003b24:	08018aa8 	.word	0x08018aa8
 8003b28:	08018ab4 	.word	0x08018ab4

08003b2c <spiInit>:
SPI_HandleTypeDef hspi1;
DMA_HandleTypeDef hdma_spi4_tx;


bool spiInit(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
  bool ret = true;
 8003b32:	2301      	movs	r3, #1
 8003b34:	70fb      	strb	r3, [r7, #3]


  for (int i=0; i<SPI_MAX_CH; i++)
 8003b36:	2300      	movs	r3, #0
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	e016      	b.n	8003b6a <spiInit+0x3e>
  {
    spi_tbl[i].is_open = false;
 8003b3c:	4a10      	ldr	r2, [pc, #64]	; (8003b80 <spiInit+0x54>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	011b      	lsls	r3, r3, #4
 8003b42:	4413      	add	r3, r2
 8003b44:	2200      	movs	r2, #0
 8003b46:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].is_tx_done = true;
 8003b48:	4a0d      	ldr	r2, [pc, #52]	; (8003b80 <spiInit+0x54>)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	4413      	add	r3, r2
 8003b50:	3301      	adds	r3, #1
 8003b52:	2201      	movs	r2, #1
 8003b54:	701a      	strb	r2, [r3, #0]
    spi_tbl[i].func_tx = NULL;
 8003b56:	4a0a      	ldr	r2, [pc, #40]	; (8003b80 <spiInit+0x54>)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3304      	adds	r3, #4
 8003b60:	2200      	movs	r2, #0
 8003b62:	601a      	str	r2, [r3, #0]
  for (int i=0; i<SPI_MAX_CH; i++)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3301      	adds	r3, #1
 8003b68:	607b      	str	r3, [r7, #4]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	dde5      	ble.n	8003b3c <spiInit+0x10>
  }

  return ret;
 8003b70:	78fb      	ldrb	r3, [r7, #3]
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	20007524 	.word	0x20007524

08003b84 <spiBegin>:

bool spiBegin(uint8_t ch)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
  spi_t *p_spi = &spi_tbl[ch];
 8003b92:	79fb      	ldrb	r3, [r7, #7]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	4a21      	ldr	r2, [pc, #132]	; (8003c1c <spiBegin+0x98>)
 8003b98:	4413      	add	r3, r2
 8003b9a:	60bb      	str	r3, [r7, #8]

  switch(ch)
 8003b9c:	79fb      	ldrb	r3, [r7, #7]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d137      	bne.n	8003c12 <spiBegin+0x8e>
  {
    case _DEF_SPI1:
      p_spi->h_spi = &hspi4;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a1e      	ldr	r2, [pc, #120]	; (8003c20 <spiBegin+0x9c>)
 8003ba6:	609a      	str	r2, [r3, #8]
      p_spi->h_dma = &hdma_spi4_tx;
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a1e      	ldr	r2, [pc, #120]	; (8003c24 <spiBegin+0xa0>)
 8003bac:	60da      	str	r2, [r3, #12]

      hspi4.Instance              = SPI4;
 8003bae:	4b1c      	ldr	r3, [pc, #112]	; (8003c20 <spiBegin+0x9c>)
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <spiBegin+0xa4>)
 8003bb2:	601a      	str	r2, [r3, #0]
      hspi4.Init.Mode             = SPI_MODE_MASTER;
 8003bb4:	4b1a      	ldr	r3, [pc, #104]	; (8003c20 <spiBegin+0x9c>)
 8003bb6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003bba:	605a      	str	r2, [r3, #4]
      hspi4.Init.Direction        = SPI_DIRECTION_2LINES;
 8003bbc:	4b18      	ldr	r3, [pc, #96]	; (8003c20 <spiBegin+0x9c>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	609a      	str	r2, [r3, #8]
      hspi4.Init.DataSize         = SPI_DATASIZE_8BIT;
 8003bc2:	4b17      	ldr	r3, [pc, #92]	; (8003c20 <spiBegin+0x9c>)
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	60da      	str	r2, [r3, #12]
      hspi4.Init.CLKPolarity      = SPI_POLARITY_LOW;
 8003bc8:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <spiBegin+0x9c>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	611a      	str	r2, [r3, #16]
      hspi4.Init.CLKPhase         = SPI_PHASE_1EDGE;
 8003bce:	4b14      	ldr	r3, [pc, #80]	; (8003c20 <spiBegin+0x9c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	615a      	str	r2, [r3, #20]
      hspi4.Init.NSS              = SPI_NSS_SOFT;
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <spiBegin+0x9c>)
 8003bd6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bda:	619a      	str	r2, [r3, #24]
      hspi4.Init.BaudRatePrescaler= SPI_BAUDRATEPRESCALER_2;
 8003bdc:	4b10      	ldr	r3, [pc, #64]	; (8003c20 <spiBegin+0x9c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	61da      	str	r2, [r3, #28]
      hspi4.Init.FirstBit         = SPI_FIRSTBIT_MSB;
 8003be2:	4b0f      	ldr	r3, [pc, #60]	; (8003c20 <spiBegin+0x9c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	621a      	str	r2, [r3, #32]
      hspi4.Init.TIMode           = SPI_TIMODE_DISABLE;
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <spiBegin+0x9c>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
      hspi4.Init.CRCCalculation   = SPI_CRCCALCULATION_DISABLE;
 8003bee:	4b0c      	ldr	r3, [pc, #48]	; (8003c20 <spiBegin+0x9c>)
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
      hspi4.Init.CRCPolynomial    = 10;
 8003bf4:	4b0a      	ldr	r3, [pc, #40]	; (8003c20 <spiBegin+0x9c>)
 8003bf6:	220a      	movs	r2, #10
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c

      if (HAL_SPI_Init(&hspi4) == HAL_OK)
 8003bfa:	4809      	ldr	r0, [pc, #36]	; (8003c20 <spiBegin+0x9c>)
 8003bfc:	f00e f8f9 	bl	8011df2 <HAL_SPI_Init>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <spiBegin+0x8c>
      {
        p_spi->is_open = true;
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
        ret = true;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	bf00      	nop
  }

  return ret;
 8003c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	20007524 	.word	0x20007524
 8003c20:	200074cc 	.word	0x200074cc
 8003c24:	2000746c 	.word	0x2000746c
 8003c28:	40013400 	.word	0x40013400

08003c2c <spiSetDataMode>:

void spiSetDataMode(uint8_t ch, uint8_t dataMode)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	460a      	mov	r2, r1
 8003c36:	71fb      	strb	r3, [r7, #7]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8003c3c:	79fb      	ldrb	r3, [r7, #7]
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	4a29      	ldr	r2, [pc, #164]	; (8003ce8 <spiSetDataMode+0xbc>)
 8003c42:	4413      	add	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	f083 0301 	eor.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d145      	bne.n	8003ce0 <spiSetDataMode+0xb4>


  switch( dataMode )
 8003c54:	79bb      	ldrb	r3, [r7, #6]
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d843      	bhi.n	8003ce2 <spiSetDataMode+0xb6>
 8003c5a:	a201      	add	r2, pc, #4	; (adr r2, 8003c60 <spiSetDataMode+0x34>)
 8003c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c60:	08003c71 	.word	0x08003c71
 8003c64:	08003c8d 	.word	0x08003c8d
 8003c68:	08003ca9 	.word	0x08003ca9
 8003c6c:	08003cc5 	.word	0x08003cc5
  {
    // CPOL=0, CPHA=0
    case SPI_MODE0:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f00e f8b4 	bl	8011df2 <HAL_SPI_Init>
      break;
 8003c8a:	e02a      	b.n	8003ce2 <spiSetDataMode+0xb6>

    // CPOL=0, CPHA=1
    case SPI_MODE1:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2200      	movs	r2, #0
 8003c92:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f00e f8a6 	bl	8011df2 <HAL_SPI_Init>
      break;
 8003ca6:	e01c      	b.n	8003ce2 <spiSetDataMode+0xb6>

    // CPOL=1, CPHA=0
    case SPI_MODE2:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2202      	movs	r2, #2
 8003cae:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f00e f898 	bl	8011df2 <HAL_SPI_Init>
      break;
 8003cc2:	e00e      	b.n	8003ce2 <spiSetDataMode+0xb6>

    // CPOL=1, CPHA=1
    case SPI_MODE3:
      p_spi->h_spi->Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	611a      	str	r2, [r3, #16]
      p_spi->h_spi->Init.CLKPhase    = SPI_PHASE_2EDGE;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	689b      	ldr	r3, [r3, #8]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	615a      	str	r2, [r3, #20]
      HAL_SPI_Init(p_spi->h_spi);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f00e f88a 	bl	8011df2 <HAL_SPI_Init>
      break;
 8003cde:	e000      	b.n	8003ce2 <spiSetDataMode+0xb6>
  if (p_spi->is_open == false) return;
 8003ce0:	bf00      	nop
  }
}
 8003ce2:	3710      	adds	r7, #16
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	20007524 	.word	0x20007524

08003cec <spiSetBitWidth>:

void spiSetBitWidth(uint8_t ch, uint8_t bit_width)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	460a      	mov	r2, r1
 8003cf6:	71fb      	strb	r3, [r7, #7]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	71bb      	strb	r3, [r7, #6]
  spi_t  *p_spi = &spi_tbl[ch];
 8003cfc:	79fb      	ldrb	r3, [r7, #7]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	4a0f      	ldr	r2, [pc, #60]	; (8003d40 <spiSetBitWidth+0x54>)
 8003d02:	4413      	add	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false) return;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	f083 0301 	eor.w	r3, r3, #1
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d111      	bne.n	8003d38 <spiSetBitWidth+0x4c>

  p_spi->h_spi->Init.DataSize = SPI_DATASIZE_8BIT;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	60da      	str	r2, [r3, #12]

  if (bit_width == 16)
 8003d1c:	79bb      	ldrb	r3, [r7, #6]
 8003d1e:	2b10      	cmp	r3, #16
 8003d20:	d104      	bne.n	8003d2c <spiSetBitWidth+0x40>
  {
    p_spi->h_spi->Init.DataSize = SPI_DATASIZE_16BIT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d2a:	60da      	str	r2, [r3, #12]
  }
  HAL_SPI_Init(p_spi->h_spi);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00e f85e 	bl	8011df2 <HAL_SPI_Init>
 8003d36:	e000      	b.n	8003d3a <spiSetBitWidth+0x4e>
  if (p_spi->is_open == false) return;
 8003d38:	bf00      	nop
}
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	20007524 	.word	0x20007524

08003d44 <spiTransfer8>:

uint8_t spiTransfer8(uint8_t ch, uint8_t data)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af02      	add	r7, sp, #8
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	460a      	mov	r2, r1
 8003d4e:	71fb      	strb	r3, [r7, #7]
 8003d50:	4613      	mov	r3, r2
 8003d52:	71bb      	strb	r3, [r7, #6]
  uint8_t ret;
  spi_t  *p_spi = &spi_tbl[ch];
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	4a0d      	ldr	r2, [pc, #52]	; (8003d90 <spiTransfer8+0x4c>)
 8003d5a:	4413      	add	r3, r2
 8003d5c:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false) return 0;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	f083 0301 	eor.w	r3, r3, #1
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <spiTransfer8+0x2c>
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	e00b      	b.n	8003d88 <spiTransfer8+0x44>

  HAL_SPI_TransmitReceive(p_spi->h_spi, &data, &ret, 1, 0xffff);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	6898      	ldr	r0, [r3, #8]
 8003d74:	f107 020b 	add.w	r2, r7, #11
 8003d78:	1db9      	adds	r1, r7, #6
 8003d7a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2301      	movs	r3, #1
 8003d82:	f00e f8bf 	bl	8011f04 <HAL_SPI_TransmitReceive>

  return ret;
 8003d86:	7afb      	ldrb	r3, [r7, #11]
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	20007524 	.word	0x20007524

08003d94 <spiDmaTxStart>:

  return ret;
}

void spiDmaTxStart(uint8_t spi_ch, uint8_t *p_buf, uint32_t length)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b086      	sub	sp, #24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	73fb      	strb	r3, [r7, #15]
  spi_t  *p_spi = &spi_tbl[spi_ch];
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <spiDmaTxStart+0x48>)
 8003da8:	4413      	add	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]

  if (p_spi->is_open == false) return;
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	781b      	ldrb	r3, [r3, #0]
 8003db0:	f083 0301 	eor.w	r3, r3, #1
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d10b      	bne.n	8003dd2 <spiDmaTxStart+0x3e>

  p_spi->is_tx_done = false;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	705a      	strb	r2, [r3, #1]
  HAL_SPI_Transmit_DMA(p_spi->h_spi, p_buf, length);
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	b292      	uxth	r2, r2
 8003dc8:	68b9      	ldr	r1, [r7, #8]
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f00e fa3c 	bl	8012248 <HAL_SPI_Transmit_DMA>
 8003dd0:	e000      	b.n	8003dd4 <spiDmaTxStart+0x40>
  if (p_spi->is_open == false) return;
 8003dd2:	bf00      	nop
}
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20007524 	.word	0x20007524

08003de0 <spiDmaTxTransfer>:

void spiDmaTxTransfer(uint8_t ch, void *buf, uint32_t length, uint32_t timeout)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
 8003dec:	4603      	mov	r3, r0
 8003dee:	73fb      	strb	r3, [r7, #15]
  uint32_t t_time;


  spiDmaTxStart(ch, (uint8_t *)buf, length);
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff ffcc 	bl	8003d94 <spiDmaTxStart>

  t_time = millis();
 8003dfc:	f7fd f949 	bl	8001092 <millis>
 8003e00:	6178      	str	r0, [r7, #20]

  if (timeout == 0) return;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00f      	beq.n	8003e28 <spiDmaTxTransfer+0x48>

  while(1)
  {
    if(spiDmaTxIsDone(ch))
 8003e08:	7bfb      	ldrb	r3, [r7, #15]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 f814 	bl	8003e38 <spiDmaTxIsDone>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10a      	bne.n	8003e2c <spiDmaTxTransfer+0x4c>
    {
      break;
    }
    if((millis()-t_time) > timeout)
 8003e16:	f7fd f93c 	bl	8001092 <millis>
 8003e1a:	4602      	mov	r2, r0
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	1ad3      	subs	r3, r2, r3
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d304      	bcc.n	8003e30 <spiDmaTxTransfer+0x50>
    if(spiDmaTxIsDone(ch))
 8003e26:	e7ef      	b.n	8003e08 <spiDmaTxTransfer+0x28>
  if (timeout == 0) return;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <spiDmaTxTransfer+0x52>
      break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <spiDmaTxTransfer+0x52>
    {
      break;
 8003e30:	bf00      	nop
    }
  }
}
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <spiDmaTxIsDone>:

bool spiDmaTxIsDone(uint8_t ch)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8003e42:	79fb      	ldrb	r3, [r7, #7]
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <spiDmaTxIsDone+0x38>)
 8003e48:	4413      	add	r3, r2
 8003e4a:	60fb      	str	r3, [r7, #12]

  if (p_spi->is_open == false)     return true;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f083 0301 	eor.w	r3, r3, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <spiDmaTxIsDone+0x26>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e001      	b.n	8003e62 <spiDmaTxIsDone+0x2a>

  return p_spi->is_tx_done;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	785b      	ldrb	r3, [r3, #1]
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	20007524 	.word	0x20007524

08003e74 <spiAttachTxInterrupt>:

void spiAttachTxInterrupt(uint8_t ch, void (*func)())
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	6039      	str	r1, [r7, #0]
 8003e7e:	71fb      	strb	r3, [r7, #7]
  spi_t  *p_spi = &spi_tbl[ch];
 8003e80:	79fb      	ldrb	r3, [r7, #7]
 8003e82:	011b      	lsls	r3, r3, #4
 8003e84:	4a09      	ldr	r2, [pc, #36]	; (8003eac <spiAttachTxInterrupt+0x38>)
 8003e86:	4413      	add	r3, r2
 8003e88:	60fb      	str	r3, [r7, #12]


  if (p_spi->is_open == false)     return;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	f083 0301 	eor.w	r3, r3, #1
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <spiAttachTxInterrupt+0x2c>

  p_spi->func_tx = func;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	e000      	b.n	8003ea2 <spiAttachTxInterrupt+0x2e>
  if (p_spi->is_open == false)     return;
 8003ea0:	bf00      	nop
}
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	20007524 	.word	0x20007524

08003eb0 <HAL_SPI_TxCpltCallback>:




void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  spi_t  *p_spi;

  if (hspi->Instance == spi_tbl[_DEF_SPI1].h_spi->Instance)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	4b0a      	ldr	r3, [pc, #40]	; (8003ee8 <HAL_SPI_TxCpltCallback+0x38>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d10b      	bne.n	8003ede <HAL_SPI_TxCpltCallback+0x2e>
  {
    p_spi = &spi_tbl[_DEF_SPI1];
 8003ec6:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <HAL_SPI_TxCpltCallback+0x38>)
 8003ec8:	60fb      	str	r3, [r7, #12]

    p_spi->is_tx_done = true;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	705a      	strb	r2, [r3, #1]

    if (p_spi->func_tx != NULL)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d002      	beq.n	8003ede <HAL_SPI_TxCpltCallback+0x2e>
    {
      (*p_spi->func_tx)();
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4798      	blx	r3
    }
  }
}
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20007524 	.word	0x20007524

08003eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08e      	sub	sp, #56	; 0x38
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	605a      	str	r2, [r3, #4]
 8003efe:	609a      	str	r2, [r3, #8]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a78      	ldr	r2, [pc, #480]	; (80040ec <HAL_SPI_MspInit+0x200>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	f040 809a 	bne.w	8004044 <HAL_SPI_MspInit+0x158>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */
    __HAL_RCC_DMA2_CLK_ENABLE();
 8003f10:	2300      	movs	r3, #0
 8003f12:	623b      	str	r3, [r7, #32]
 8003f14:	4b76      	ldr	r3, [pc, #472]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	4a75      	ldr	r2, [pc, #468]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f20:	4b73      	ldr	r3, [pc, #460]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61fb      	str	r3, [r7, #28]
 8003f30:	4b6f      	ldr	r3, [pc, #444]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f34:	4a6e      	ldr	r2, [pc, #440]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f36:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003f3c:	4b6c      	ldr	r3, [pc, #432]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61bb      	str	r3, [r7, #24]
 8003f4c:	4b68      	ldr	r3, [pc, #416]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4a67      	ldr	r2, [pc, #412]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f52:	f043 0301 	orr.w	r3, r3, #1
 8003f56:	6313      	str	r3, [r2, #48]	; 0x30
 8003f58:	4b65      	ldr	r3, [pc, #404]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f003 0301 	and.w	r3, r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
 8003f68:	4b61      	ldr	r3, [pc, #388]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	4a60      	ldr	r2, [pc, #384]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f6e:	f043 0302 	orr.w	r3, r3, #2
 8003f72:	6313      	str	r3, [r2, #48]	; 0x30
 8003f74:	4b5e      	ldr	r3, [pc, #376]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	617b      	str	r3, [r7, #20]
 8003f7e:	697b      	ldr	r3, [r7, #20]
    /**SPI4 GPIO Configuration
    PA1     ------> SPI4_MOSI
    PB13     ------> SPI4_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003f80:	2302      	movs	r3, #2
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003f90:	2305      	movs	r3, #5
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4856      	ldr	r0, [pc, #344]	; (80040f4 <HAL_SPI_MspInit+0x208>)
 8003f9c:	f00a fc28 	bl	800e7f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI4;
 8003fb2:	2306      	movs	r3, #6
 8003fb4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fba:	4619      	mov	r1, r3
 8003fbc:	484e      	ldr	r0, [pc, #312]	; (80040f8 <HAL_SPI_MspInit+0x20c>)
 8003fbe:	f00a fc17 	bl	800e7f0 <HAL_GPIO_Init>

    /* SPI4 DMA Init */
    /* SPI4_TX Init */
    hdma_spi4_tx.Instance = DMA2_Stream1;
 8003fc2:	4b4e      	ldr	r3, [pc, #312]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fc4:	4a4e      	ldr	r2, [pc, #312]	; (8004100 <HAL_SPI_MspInit+0x214>)
 8003fc6:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_4;
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fce:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003fd0:	4b4a      	ldr	r3, [pc, #296]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fd2:	2240      	movs	r2, #64	; 0x40
 8003fd4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003fd6:	4b49      	ldr	r3, [pc, #292]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003fdc:	4b47      	ldr	r3, [pc, #284]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003fe2:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003fe4:	4b45      	ldr	r3, [pc, #276]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fe6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fea:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003fec:	4b43      	ldr	r3, [pc, #268]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003fee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ff2:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8003ff4:	4b41      	ldr	r3, [pc, #260]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003ffa:	4b40      	ldr	r3, [pc, #256]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004000:	4b3e      	ldr	r3, [pc, #248]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8004002:	2200      	movs	r2, #0
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8004006:	483d      	ldr	r0, [pc, #244]	; (80040fc <HAL_SPI_MspInit+0x210>)
 8004008:	f009 fd6c 	bl	800dae4 <HAL_DMA_Init>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	d001      	beq.n	8004016 <HAL_SPI_MspInit+0x12a>
    {
      Error_Handler();
 8004012:	f7fd f8bf 	bl	8001194 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_SPI_MspInit+0x210>)
 800401a:	649a      	str	r2, [r3, #72]	; 0x48
 800401c:	4a37      	ldr	r2, [pc, #220]	; (80040fc <HAL_SPI_MspInit+0x210>)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI4 interrupt Init */
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8004022:	2200      	movs	r2, #0
 8004024:	2105      	movs	r1, #5
 8004026:	2054      	movs	r0, #84	; 0x54
 8004028:	f009 fd25 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 800402c:	2054      	movs	r0, #84	; 0x54
 800402e:	f009 fd3e 	bl	800daae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI4_MspInit 1 */
    HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8004032:	2200      	movs	r2, #0
 8004034:	2105      	movs	r1, #5
 8004036:	2039      	movs	r0, #57	; 0x39
 8004038:	f009 fd1d 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800403c:	2039      	movs	r0, #57	; 0x39
 800403e:	f009 fd36 	bl	800daae <HAL_NVIC_EnableIRQ>
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
       HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    }
}
 8004042:	e04e      	b.n	80040e2 <HAL_SPI_MspInit+0x1f6>
   else if (spiHandle->Instance==SPI1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a2e      	ldr	r2, [pc, #184]	; (8004104 <HAL_SPI_MspInit+0x218>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d149      	bne.n	80040e2 <HAL_SPI_MspInit+0x1f6>
       __HAL_RCC_SPI1_CLK_ENABLE();
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	4b27      	ldr	r3, [pc, #156]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004058:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800405c:	6453      	str	r3, [r2, #68]	; 0x44
 800405e:	4b24      	ldr	r3, [pc, #144]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
       __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b20      	ldr	r3, [pc, #128]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004072:	4a1f      	ldr	r2, [pc, #124]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004074:	f043 0301 	orr.w	r3, r3, #1
 8004078:	6313      	str	r3, [r2, #48]	; 0x30
 800407a:	4b1d      	ldr	r3, [pc, #116]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 800407c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
       __HAL_RCC_GPIOB_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60bb      	str	r3, [r7, #8]
 800408a:	4b19      	ldr	r3, [pc, #100]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 800408c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408e:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004090:	f043 0302 	orr.w	r3, r3, #2
 8004094:	6313      	str	r3, [r2, #48]	; 0x30
 8004096:	4b16      	ldr	r3, [pc, #88]	; (80040f0 <HAL_SPI_MspInit+0x204>)
 8004098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	60bb      	str	r3, [r7, #8]
 80040a0:	68bb      	ldr	r3, [r7, #8]
       GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80040a2:	23a0      	movs	r3, #160	; 0xa0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a6:	2302      	movs	r3, #2
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040aa:	2300      	movs	r3, #0
 80040ac:	62fb      	str	r3, [r7, #44]	; 0x2c
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ae:	2303      	movs	r3, #3
 80040b0:	633b      	str	r3, [r7, #48]	; 0x30
       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040b2:	2305      	movs	r3, #5
 80040b4:	637b      	str	r3, [r7, #52]	; 0x34
       HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040ba:	4619      	mov	r1, r3
 80040bc:	480d      	ldr	r0, [pc, #52]	; (80040f4 <HAL_SPI_MspInit+0x208>)
 80040be:	f00a fb97 	bl	800e7f0 <HAL_GPIO_Init>
       GPIO_InitStruct.Pin = GPIO_PIN_4;
 80040c2:	2310      	movs	r3, #16
 80040c4:	627b      	str	r3, [r7, #36]	; 0x24
       GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040c6:	2302      	movs	r3, #2
 80040c8:	62bb      	str	r3, [r7, #40]	; 0x28
       GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ca:	2300      	movs	r3, #0
 80040cc:	62fb      	str	r3, [r7, #44]	; 0x2c
       GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040ce:	2303      	movs	r3, #3
 80040d0:	633b      	str	r3, [r7, #48]	; 0x30
       GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80040d2:	2305      	movs	r3, #5
 80040d4:	637b      	str	r3, [r7, #52]	; 0x34
       HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80040da:	4619      	mov	r1, r3
 80040dc:	4806      	ldr	r0, [pc, #24]	; (80040f8 <HAL_SPI_MspInit+0x20c>)
 80040de:	f00a fb87 	bl	800e7f0 <HAL_GPIO_Init>
}
 80040e2:	bf00      	nop
 80040e4:	3738      	adds	r7, #56	; 0x38
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	40013400 	.word	0x40013400
 80040f0:	40023800 	.word	0x40023800
 80040f4:	40020000 	.word	0x40020000
 80040f8:	40020400 	.word	0x40020400
 80040fc:	2000746c 	.word	0x2000746c
 8004100:	40026428 	.word	0x40026428
 8004104:	40013000 	.word	0x40013000

08004108 <MX_SPI1_Init>:

/* SPI1 init function */


void MX_SPI1_Init(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800410c:	4b17      	ldr	r3, [pc, #92]	; (800416c <MX_SPI1_Init+0x64>)
 800410e:	4a18      	ldr	r2, [pc, #96]	; (8004170 <MX_SPI1_Init+0x68>)
 8004110:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004112:	4b16      	ldr	r3, [pc, #88]	; (800416c <MX_SPI1_Init+0x64>)
 8004114:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004118:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800411a:	4b14      	ldr	r3, [pc, #80]	; (800416c <MX_SPI1_Init+0x64>)
 800411c:	2200      	movs	r2, #0
 800411e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004120:	4b12      	ldr	r3, [pc, #72]	; (800416c <MX_SPI1_Init+0x64>)
 8004122:	2200      	movs	r2, #0
 8004124:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004126:	4b11      	ldr	r3, [pc, #68]	; (800416c <MX_SPI1_Init+0x64>)
 8004128:	2200      	movs	r2, #0
 800412a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800412c:	4b0f      	ldr	r3, [pc, #60]	; (800416c <MX_SPI1_Init+0x64>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <MX_SPI1_Init+0x64>)
 8004134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004138:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <MX_SPI1_Init+0x64>)
 800413c:	2218      	movs	r2, #24
 800413e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004140:	4b0a      	ldr	r3, [pc, #40]	; (800416c <MX_SPI1_Init+0x64>)
 8004142:	2200      	movs	r2, #0
 8004144:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004146:	4b09      	ldr	r3, [pc, #36]	; (800416c <MX_SPI1_Init+0x64>)
 8004148:	2200      	movs	r2, #0
 800414a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800414c:	4b07      	ldr	r3, [pc, #28]	; (800416c <MX_SPI1_Init+0x64>)
 800414e:	2200      	movs	r2, #0
 8004150:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8004152:	4b06      	ldr	r3, [pc, #24]	; (800416c <MX_SPI1_Init+0x64>)
 8004154:	220a      	movs	r2, #10
 8004156:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004158:	4804      	ldr	r0, [pc, #16]	; (800416c <MX_SPI1_Init+0x64>)
 800415a:	f00d fe4a 	bl	8011df2 <HAL_SPI_Init>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8004164:	f7fd f816 	bl	8001194 <Error_Handler>

  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20007534 	.word	0x20007534
 8004170:	40013000 	.word	0x40013000

08004174 <uartInit>:
DMA_HandleTypeDef  hdma_usart1_rx;
#endif


bool uartInit(void)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
  for (int i=0; i<UART_MAX_CH; i++)
 800417a:	2300      	movs	r3, #0
 800417c:	607b      	str	r3, [r7, #4]
 800417e:	e007      	b.n	8004190 <uartInit+0x1c>
  {
    is_open[i] = false;
 8004180:	4a08      	ldr	r2, [pc, #32]	; (80041a4 <uartInit+0x30>)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	2200      	movs	r2, #0
 8004188:	701a      	strb	r2, [r3, #0]
  for (int i=0; i<UART_MAX_CH; i++)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3301      	adds	r3, #1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	ddf4      	ble.n	8004180 <uartInit+0xc>
  }


  return true;
 8004196:	2301      	movs	r3, #1
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr
 80041a4:	20006a04 	.word	0x20006a04

080041a8 <uartAvailable>:

  return ret;
}

uint32_t uartAvailable(uint8_t ch)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
  uint32_t ret = 0;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]

  switch(ch)
 80041b6:	79fb      	ldrb	r3, [r7, #7]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <uartAvailable+0x1a>
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d004      	beq.n	80041ca <uartAvailable+0x22>
 80041c0:	e01b      	b.n	80041fa <uartAvailable+0x52>
  {
    case _DEF_UART1:
      ret = cdcAvailable();
 80041c2:	f002 fc95 	bl	8006af0 <cdcAvailable>
 80041c6:	60f8      	str	r0, [r7, #12]
      break;
 80041c8:	e017      	b.n	80041fa <uartAvailable+0x52>

    case _DEF_UART2:
	  #ifdef _USE_UART2
      qbuffer[ch].in = (qbuffer[ch].len - hdma_usart1_rx.Instance->NDTR);
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	4a0d      	ldr	r2, [pc, #52]	; (8004204 <uartAvailable+0x5c>)
 80041ce:	011b      	lsls	r3, r3, #4
 80041d0:	4413      	add	r3, r2
 80041d2:	3308      	adds	r3, #8
 80041d4:	6819      	ldr	r1, [r3, #0]
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <uartAvailable+0x60>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	79fb      	ldrb	r3, [r7, #7]
 80041de:	1a8a      	subs	r2, r1, r2
 80041e0:	4908      	ldr	r1, [pc, #32]	; (8004204 <uartAvailable+0x5c>)
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	440b      	add	r3, r1
 80041e6:	601a      	str	r2, [r3, #0]
      ret = qbufferAvailable(&qbuffer[ch]);
 80041e8:	79fb      	ldrb	r3, [r7, #7]
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	4a05      	ldr	r2, [pc, #20]	; (8004204 <uartAvailable+0x5c>)
 80041ee:	4413      	add	r3, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f7fd f964 	bl	80014be <qbufferAvailable>
 80041f6:	60f8      	str	r0, [r7, #12]
	  #endif
      break;
 80041f8:	bf00      	nop
  }

  return ret;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20006a08 	.word	0x20006a08
 8004208:	2000758c 	.word	0x2000758c

0800420c <uartWrite>:

  return ret;
}

uint32_t uartWrite(uint8_t ch, uint8_t *p_data, uint32_t length)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	4603      	mov	r3, r0
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	73fb      	strb	r3, [r7, #15]
  uint32_t ret = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef status;


  switch(ch)
 800421e:	7bfb      	ldrb	r3, [r7, #15]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <uartWrite+0x1e>
 8004224:	2b01      	cmp	r3, #1
 8004226:	d006      	beq.n	8004236 <uartWrite+0x2a>
 8004228:	e014      	b.n	8004254 <uartWrite+0x48>
  {
    case _DEF_UART1:
      ret = cdcWrite(p_data, length);
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	68b8      	ldr	r0, [r7, #8]
 800422e:	f002 fca9 	bl	8006b84 <cdcWrite>
 8004232:	6178      	str	r0, [r7, #20]
      break;
 8004234:	e00e      	b.n	8004254 <uartWrite+0x48>

    case _DEF_UART2:
	  #ifdef _USE_UART2
      status = HAL_UART_Transmit(&huart1, p_data, length, 100);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	b29a      	uxth	r2, r3
 800423a:	2364      	movs	r3, #100	; 0x64
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	4808      	ldr	r0, [pc, #32]	; (8004260 <uartWrite+0x54>)
 8004240:	f00e fb79 	bl	8012936 <HAL_UART_Transmit>
 8004244:	4603      	mov	r3, r0
 8004246:	74fb      	strb	r3, [r7, #19]
      if (status == HAL_OK)
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d101      	bne.n	8004252 <uartWrite+0x46>
      {
        ret = length;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	617b      	str	r3, [r7, #20]
      }
	  #endif
      break;
 8004252:	bf00      	nop
  }

  return ret;
 8004254:	697b      	ldr	r3, [r7, #20]
}
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	200075ec 	.word	0x200075ec

08004264 <HAL_UART_MspInit>:




void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b08a      	sub	sp, #40	; 0x28
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800426c:	f107 0314 	add.w	r3, r7, #20
 8004270:	2200      	movs	r2, #0
 8004272:	601a      	str	r2, [r3, #0]
 8004274:	605a      	str	r2, [r3, #4]
 8004276:	609a      	str	r2, [r3, #8]
 8004278:	60da      	str	r2, [r3, #12]
 800427a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a19      	ldr	r2, [pc, #100]	; (80042e8 <HAL_UART_MspInit+0x84>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d12c      	bne.n	80042e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004286:	2300      	movs	r3, #0
 8004288:	613b      	str	r3, [r7, #16]
 800428a:	4b18      	ldr	r3, [pc, #96]	; (80042ec <HAL_UART_MspInit+0x88>)
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	4a17      	ldr	r2, [pc, #92]	; (80042ec <HAL_UART_MspInit+0x88>)
 8004290:	f043 0310 	orr.w	r3, r3, #16
 8004294:	6453      	str	r3, [r2, #68]	; 0x44
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_UART_MspInit+0x88>)
 8004298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800429a:	f003 0310 	and.w	r3, r3, #16
 800429e:	613b      	str	r3, [r7, #16]
 80042a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	2300      	movs	r3, #0
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	4b11      	ldr	r3, [pc, #68]	; (80042ec <HAL_UART_MspInit+0x88>)
 80042a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042aa:	4a10      	ldr	r2, [pc, #64]	; (80042ec <HAL_UART_MspInit+0x88>)
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	6313      	str	r3, [r2, #48]	; 0x30
 80042b2:	4b0e      	ldr	r3, [pc, #56]	; (80042ec <HAL_UART_MspInit+0x88>)
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	f003 0301 	and.w	r3, r3, #1
 80042ba:	60fb      	str	r3, [r7, #12]
 80042bc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA15     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 80042be:	f44f 4304 	mov.w	r3, #33792	; 0x8400
 80042c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c4:	2302      	movs	r3, #2
 80042c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c8:	2300      	movs	r3, #0
 80042ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042cc:	2303      	movs	r3, #3
 80042ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80042d0:	2307      	movs	r3, #7
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	4619      	mov	r1, r3
 80042da:	4805      	ldr	r0, [pc, #20]	; (80042f0 <HAL_UART_MspInit+0x8c>)
 80042dc:	f00a fa88 	bl	800e7f0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80042e0:	bf00      	nop
 80042e2:	3728      	adds	r7, #40	; 0x28
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40023800 	.word	0x40023800
 80042f0:	40020000 	.word	0x40020000

080042f4 <MX_USART1_UART_Init>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

void MX_USART1_UART_Init(void)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <MX_USART1_UART_Init+0x50>)
 80042fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 8004300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004304:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004306:	4b0e      	ldr	r3, [pc, #56]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 8004308:	2200      	movs	r2, #0
 800430a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800430c:	4b0c      	ldr	r3, [pc, #48]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 800430e:	2200      	movs	r2, #0
 8004310:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004318:	4b09      	ldr	r3, [pc, #36]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 800431a:	220c      	movs	r2, #12
 800431c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800431e:	4b08      	ldr	r3, [pc, #32]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 8004320:	2200      	movs	r2, #0
 8004322:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004324:	4b06      	ldr	r3, [pc, #24]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800432a:	4805      	ldr	r0, [pc, #20]	; (8004340 <MX_USART1_UART_Init+0x4c>)
 800432c:	f00e fab6 	bl	801289c <HAL_UART_Init>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004336:	f7fc ff2d 	bl	8001194 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200075ec 	.word	0x200075ec
 8004344:	40011000 	.word	0x40011000

08004348 <usbInit>:

extern USBD_DescriptorsTypeDef CDC_Desc;
extern USBD_DescriptorsTypeDef MSC_Desc;

bool usbInit(void)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
  bool ret = true;
 800434e:	2301      	movs	r3, #1
 8004350:	71fb      	strb	r3, [r7, #7]

  return ret;
 8004352:	79fb      	ldrb	r3, [r7, #7]
}
 8004354:	4618      	mov	r0, r3
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <usbBegin>:
{
	return is_usb_mode;
}

bool usbBegin(UsbMode usb_mode)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	71fb      	strb	r3, [r7, #7]
  bool ret = false;
 800436a:	2300      	movs	r3, #0
 800436c:	73fb      	strb	r3, [r7, #15]

#if HW_USE_CDC == 1
  if (usb_mode == USB_CDC_MODE)
 800436e:	79fb      	ldrb	r3, [r7, #7]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d12a      	bne.n	80043ca <usbBegin+0x6a>
  {
	 if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK)
 8004374:	2200      	movs	r2, #0
 8004376:	492f      	ldr	r1, [pc, #188]	; (8004434 <usbBegin+0xd4>)
 8004378:	482f      	ldr	r0, [pc, #188]	; (8004438 <usbBegin+0xd8>)
 800437a:	f000 ff2b 	bl	80051d4 <USBD_Init>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <usbBegin+0x28>
	 {
	    return false;
 8004384:	2300      	movs	r3, #0
 8004386:	e050      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8004388:	492c      	ldr	r1, [pc, #176]	; (800443c <usbBegin+0xdc>)
 800438a:	482b      	ldr	r0, [pc, #172]	; (8004438 <usbBegin+0xd8>)
 800438c:	f000 ff52 	bl	8005234 <USBD_RegisterClass>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <usbBegin+0x3a>
	 {
		 return false;
 8004396:	2300      	movs	r3, #0
 8004398:	e047      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800439a:	4929      	ldr	r1, [pc, #164]	; (8004440 <usbBegin+0xe0>)
 800439c:	4826      	ldr	r0, [pc, #152]	; (8004438 <usbBegin+0xd8>)
 800439e:	f002 fb01 	bl	80069a4 <USBD_CDC_RegisterInterface>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <usbBegin+0x4c>
	 {
		 return false;
 80043a8:	2300      	movs	r3, #0
 80043aa:	e03e      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80043ac:	4822      	ldr	r0, [pc, #136]	; (8004438 <usbBegin+0xd8>)
 80043ae:	f000 ff68 	bl	8005282 <USBD_Start>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <usbBegin+0x5c>
	 {
		 return false;
 80043b8:	2300      	movs	r3, #0
 80043ba:	e036      	b.n	800442a <usbBegin+0xca>
	 }

	 cdcInit();
 80043bc:	f7fd f968 	bl	8001690 <cdcInit>

	 is_usb_mode = USB_CDC_MODE;
 80043c0:	4b20      	ldr	r3, [pc, #128]	; (8004444 <usbBegin+0xe4>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	701a      	strb	r2, [r3, #0]
	 ret = true;
 80043c6:	2301      	movs	r3, #1
 80043c8:	73fb      	strb	r3, [r7, #15]

   }
#endif

#if HW_USE_MSC == 1
  if (usb_mode == USB_MSC_MODE)
 80043ca:	79fb      	ldrb	r3, [r7, #7]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d128      	bne.n	8004422 <usbBegin+0xc2>
  {
	 if (USBD_Init(&hUsbDeviceFS, &MSC_Desc, DEVICE_FS) != USBD_OK)
 80043d0:	2200      	movs	r2, #0
 80043d2:	491d      	ldr	r1, [pc, #116]	; (8004448 <usbBegin+0xe8>)
 80043d4:	4818      	ldr	r0, [pc, #96]	; (8004438 <usbBegin+0xd8>)
 80043d6:	f000 fefd 	bl	80051d4 <USBD_Init>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <usbBegin+0x84>
	 {
		 return false;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e022      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80043e4:	4919      	ldr	r1, [pc, #100]	; (800444c <usbBegin+0xec>)
 80043e6:	4814      	ldr	r0, [pc, #80]	; (8004438 <usbBegin+0xd8>)
 80043e8:	f000 ff24 	bl	8005234 <USBD_RegisterClass>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <usbBegin+0x96>
	 {
		 return false;
 80043f2:	2300      	movs	r3, #0
 80043f4:	e019      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80043f6:	4916      	ldr	r1, [pc, #88]	; (8004450 <usbBegin+0xf0>)
 80043f8:	480f      	ldr	r0, [pc, #60]	; (8004438 <usbBegin+0xd8>)
 80043fa:	f003 f91b 	bl	8007634 <USBD_MSC_RegisterStorage>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d001      	beq.n	8004408 <usbBegin+0xa8>
	 {
		 return false;
 8004404:	2300      	movs	r3, #0
 8004406:	e010      	b.n	800442a <usbBegin+0xca>
	 }
	 if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8004408:	480b      	ldr	r0, [pc, #44]	; (8004438 <usbBegin+0xd8>)
 800440a:	f000 ff3a 	bl	8005282 <USBD_Start>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <usbBegin+0xb8>
	 {
		 return false;
 8004414:	2300      	movs	r3, #0
 8004416:	e008      	b.n	800442a <usbBegin+0xca>
	 }

	 is_usb_mode = USB_MSC_MODE;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <usbBegin+0xe4>)
 800441a:	2202      	movs	r2, #2
 800441c:	701a      	strb	r2, [r3, #0]
	 ret = true;
 800441e:	2301      	movs	r3, #1
 8004420:	73fb      	strb	r3, [r7, #15]

  }
#endif

   is_init = ret;
 8004422:	4a0c      	ldr	r2, [pc, #48]	; (8004454 <usbBegin+0xf4>)
 8004424:	7bfb      	ldrb	r3, [r7, #15]
 8004426:	7013      	strb	r3, [r2, #0]
   return ret;
 8004428:	7bfb      	ldrb	r3, [r7, #15]

}
 800442a:	4618      	mov	r0, r3
 800442c:	3710      	adds	r7, #16
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	200001c0 	.word	0x200001c0
 8004438:	20007630 	.word	0x20007630
 800443c:	2000009c 	.word	0x2000009c
 8004440:	200001ac 	.word	0x200001ac
 8004444:	20006a19 	.word	0x20006a19
 8004448:	20000210 	.word	0x20000210
 800444c:	20000260 	.word	0x20000260
 8004450:	20000348 	.word	0x20000348
 8004454:	20006a18 	.word	0x20006a18

08004458 <SD_CheckStatus>:
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/
static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	4603      	mov	r3, r0
 8004460:	71fb      	strb	r3, [r7, #7]
  Stat = 0;
 8004462:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <SD_CheckStatus+0x80>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]


  if (sdIsInit() != true)
 8004468:	f7fe ffe6 	bl	8003438 <sdIsInit>
 800446c:	4603      	mov	r3, r0
 800446e:	f083 0301 	eor.w	r3, r3, #1
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <SD_CheckStatus+0x30>
  {
    Stat |= STA_NOINIT;
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <SD_CheckStatus+0x80>)
 800447a:	781b      	ldrb	r3, [r3, #0]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f043 0301 	orr.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <SD_CheckStatus+0x80>)
 8004486:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsDetected() != true)
 8004488:	f7fe ffe2 	bl	8003450 <sdIsDetected>
 800448c:	4603      	mov	r3, r0
 800448e:	f083 0301 	eor.w	r3, r3, #1
 8004492:	b2db      	uxtb	r3, r3
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <SD_CheckStatus+0x50>
  {
    Stat |= STA_NODISK;
 8004498:	4b0f      	ldr	r3, [pc, #60]	; (80044d8 <SD_CheckStatus+0x80>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f043 0302 	orr.w	r3, r3, #2
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <SD_CheckStatus+0x80>)
 80044a6:	701a      	strb	r2, [r3, #0]
  }
  if (sdIsReady(10) != true)
 80044a8:	200a      	movs	r0, #10
 80044aa:	f7ff f853 	bl	8003554 <sdIsReady>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d007      	beq.n	80044ca <SD_CheckStatus+0x72>
  {
    Stat |= STA_NOINIT;
 80044ba:	4b07      	ldr	r3, [pc, #28]	; (80044d8 <SD_CheckStatus+0x80>)
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	4b04      	ldr	r3, [pc, #16]	; (80044d8 <SD_CheckStatus+0x80>)
 80044c8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80044ca:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <SD_CheckStatus+0x80>)
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	b2db      	uxtb	r3, r3
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	2000008c 	.word	0x2000008c

080044dc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	  Stat = 0;
 80044e6:	4b0d      	ldr	r3, [pc, #52]	; (800451c <SD_initialize+0x40>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	701a      	strb	r2, [r3, #0]

	  if (sdIsInit() != true)
 80044ec:	f7fe ffa4 	bl	8003438 <sdIsInit>
 80044f0:	4603      	mov	r3, r0
 80044f2:	f083 0301 	eor.w	r3, r3, #1
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <SD_initialize+0x30>
	  {
	    Stat |= STA_NOINIT;
 80044fc:	4b07      	ldr	r3, [pc, #28]	; (800451c <SD_initialize+0x40>)
 80044fe:	781b      	ldrb	r3, [r3, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f043 0301 	orr.w	r3, r3, #1
 8004506:	b2da      	uxtb	r2, r3
 8004508:	4b04      	ldr	r3, [pc, #16]	; (800451c <SD_initialize+0x40>)
 800450a:	701a      	strb	r2, [r3, #0]
	  }

  return Stat;
 800450c:	4b03      	ldr	r3, [pc, #12]	; (800451c <SD_initialize+0x40>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
}
 8004512:	4618      	mov	r0, r3
 8004514:	3708      	adds	r7, #8
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	2000008c 	.word	0x2000008c

08004520 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b082      	sub	sp, #8
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	4618      	mov	r0, r3
 800452e:	f7ff ff93 	bl	8004458 <SD_CheckStatus>
 8004532:	4603      	mov	r3, r0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	60b9      	str	r1, [r7, #8]
 8004544:	607a      	str	r2, [r7, #4]
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	75fb      	strb	r3, [r7, #23]

  if (sdReadBlocks(sector, buff, count, SD_TIMEOUT) == true)
 8004550:	f242 7310 	movw	r3, #10000	; 0x2710
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f7ff f81b 	bl	8003594 <sdReadBlocks>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d001      	beq.n	8004568 <SD_read+0x2c>
  {
    res = RES_OK;
 8004564:	2300      	movs	r3, #0
 8004566:	75fb      	strb	r3, [r7, #23]
  }
  return res;
 8004568:	7dfb      	ldrb	r3, [r7, #23]
}
 800456a:	4618      	mov	r0, r3
 800456c:	3718      	adds	r7, #24
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	b086      	sub	sp, #24
 8004576:	af00      	add	r7, sp, #0
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
 800457c:	603b      	str	r3, [r7, #0]
 800457e:	4603      	mov	r3, r0
 8004580:	73fb      	strb	r3, [r7, #15]
   DRESULT res = RES_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	75fb      	strb	r3, [r7, #23]

   if (sdWriteBlocks(sector, (uint8_t *)buff, count, SD_TIMEOUT) == true)
 8004586:	f242 7310 	movw	r3, #10000	; 0x2710
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	68b9      	ldr	r1, [r7, #8]
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f7ff f86a 	bl	8003668 <sdWriteBlocks>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <SD_write+0x2c>
   {
	  res = RES_OK;
 800459a:	2300      	movs	r3, #0
 800459c:	75fb      	strb	r3, [r7, #23]
   }
   return res;
 800459e:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3718      	adds	r7, #24
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b08c      	sub	sp, #48	; 0x30
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	4603      	mov	r3, r0
 80045b0:	603a      	str	r2, [r7, #0]
 80045b2:	71fb      	strb	r3, [r7, #7]
 80045b4:	460b      	mov	r3, r1
 80045b6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  sd_info_t sd_info;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80045be:	4b25      	ldr	r3, [pc, #148]	; (8004654 <SD_ioctl+0xac>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <SD_ioctl+0x28>
 80045cc:	2303      	movs	r3, #3
 80045ce:	e03c      	b.n	800464a <SD_ioctl+0xa2>

  switch (cmd)
 80045d0:	79bb      	ldrb	r3, [r7, #6]
 80045d2:	2b03      	cmp	r3, #3
 80045d4:	d834      	bhi.n	8004640 <SD_ioctl+0x98>
 80045d6:	a201      	add	r2, pc, #4	; (adr r2, 80045dc <SD_ioctl+0x34>)
 80045d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045dc:	080045ed 	.word	0x080045ed
 80045e0:	080045f5 	.word	0x080045f5
 80045e4:	0800460d 	.word	0x0800460d
 80045e8:	08004627 	.word	0x08004627
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80045f2:	e028      	b.n	8004646 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
	sdGetInfo(&sd_info);
 80045f4:	f107 0308 	add.w	r3, r7, #8
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe ff3f 	bl	800347c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_numbers;
 80045fe:	6a3a      	ldr	r2, [r7, #32]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800460a:	e01c      	b.n	8004646 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	sdGetInfo(&sd_info);
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	4618      	mov	r0, r3
 8004612:	f7fe ff33 	bl	800347c <sdGetInfo>
    *(WORD*)buff = sd_info.log_block_size;
 8004616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004618:	b29a      	uxth	r2, r3
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8004624:	e00f      	b.n	8004646 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	  sdGetInfo(&sd_info);
 8004626:	f107 0308 	add.w	r3, r7, #8
 800462a:	4618      	mov	r0, r3
 800462c:	f7fe ff26 	bl	800347c <sdGetInfo>
    *(DWORD*)buff = sd_info.log_block_size / SD_DEFAULT_BLOCK_SIZE;
 8004630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004632:	0a5a      	lsrs	r2, r3, #9
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800463e:	e002      	b.n	8004646 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8004640:	2304      	movs	r3, #4
 8004642:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8004646:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800464a:	4618      	mov	r0, r3
 800464c:	3730      	adds	r7, #48	; 0x30
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	2000008c 	.word	0x2000008c

08004658 <hanFontLoad>:




uint16_t hanFontLoad(char *HanCode, han_font_t *FontPtr )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  // 버퍼 초기화
  memset(FontPtr->FontBuffer, 0x00, 32);
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	3306      	adds	r3, #6
 8004666:	2220      	movs	r2, #32
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f010 fce6 	bl	801503c <memset>


  FontPtr->Code_Type = PHAN_NULL_CODE;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2200      	movs	r2, #0
 8004674:	809a      	strh	r2, [r3, #4]
  // 한글코드인지 감별
  //
  if( !HanCode[0] || HanCode[0] == 0x0A )   // 문자열 마지막
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d003      	beq.n	8004686 <hanFontLoad+0x2e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b0a      	cmp	r3, #10
 8004684:	d107      	bne.n	8004696 <hanFontLoad+0x3e>
  {
    FontPtr->Code_Type = PHAN_END_CODE;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2204      	movs	r2, #4
 800468a:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	805a      	strh	r2, [r3, #2]
    return PHAN_END_CODE;
 8004692:	2304      	movs	r3, #4
 8004694:	e03b      	b.n	800470e <hanFontLoad+0xb6>
  }
  else if( HanCode[0] & 0x80 )              // 한글 코드인경우
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b25b      	sxtb	r3, r3
 800469c:	2b00      	cmp	r3, #0
 800469e:	da2b      	bge.n	80046f8 <hanFontLoad+0xa0>
  {
    uint32_t utf8_code;

    utf8_code = ((uint8_t)HanCode[0]<<16) | ((uint8_t)HanCode[1]<<8) | ((uint8_t)HanCode[2]<<0);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	041a      	lsls	r2, r3, #16
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	3301      	adds	r3, #1
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	021b      	lsls	r3, r3, #8
 80046ae:	4313      	orrs	r3, r2
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	3202      	adds	r2, #2
 80046b4:	7812      	ldrb	r2, [r2, #0]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	60fb      	str	r3, [r7, #12]

    if (utf8_code >= 0xEAB080 && utf8_code <= 0xED9FB0)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	4a16      	ldr	r2, [pc, #88]	; (8004718 <hanFontLoad+0xc0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d30e      	bcc.n	80046e0 <hanFontLoad+0x88>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4a15      	ldr	r2, [pc, #84]	; (800471c <hanFontLoad+0xc4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d80a      	bhi.n	80046e0 <hanFontLoad+0x88>
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2201      	movs	r2, #1
 80046ce:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 3;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2203      	movs	r2, #3
 80046d4:	805a      	strh	r2, [r3, #2]
      hanUniFontLoad(HanCode, FontPtr);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f91f 	bl	800491c <hanUniFontLoad>
 80046de:	e009      	b.n	80046f4 <hanFontLoad+0x9c>
    }
    else
    {
      FontPtr->Code_Type = PHAN_HANGUL_CODE;
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	809a      	strh	r2, [r3, #4]
      FontPtr->Size_Char = 2;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	2202      	movs	r2, #2
 80046ea:	805a      	strh	r2, [r3, #2]
      hanWanFontLoad(HanCode, FontPtr );
 80046ec:	6839      	ldr	r1, [r7, #0]
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f816 	bl	8004720 <hanWanFontLoad>
    }
    return PHAN_HANGUL_CODE;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e00a      	b.n	800470e <hanFontLoad+0xb6>
  }
  else                                      // 영문 코드
  {
    FontPtr->Code_Type = PHAN_ENG_CODE;
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	2202      	movs	r2, #2
 80046fc:	809a      	strh	r2, [r3, #4]
    FontPtr->Size_Char = 1;
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	805a      	strh	r2, [r3, #2]
    hanEngFontLoad(HanCode, FontPtr);
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fa30 	bl	8004b6c <hanEngFontLoad>
    return PHAN_ENG_CODE;
 800470c:	2302      	movs	r3, #2
  }


  return FontPtr->Code_Type;

}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	00eab080 	.word	0x00eab080
 800471c:	00ed9fb0 	.word	0x00ed9fb0

08004720 <hanWanFontLoad>:

void hanWanFontLoad(char *HanCode, han_font_t *FontPtr )   /* 한글 일반 폰트 생성 */
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint16_t i;
  uint16_t wHanCode;
  //static declaration 은 속도를 높이기 위한것임.
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;

  wHanCode = (uint16_t)HanCode[0]<<8  | ((uint16_t)HanCode[1] & 0x00FF);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	021b      	lsls	r3, r3, #8
 8004730:	b21a      	sxth	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	3301      	adds	r3, #1
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b21b      	sxth	r3, r3
 800473a:	4313      	orrs	r3, r2
 800473c:	b21b      	sxth	r3, r3
 800473e:	81bb      	strh	r3, [r7, #12]


  wHanCode = hanCnvCodeWan2Johab(wHanCode);
 8004740:	89bb      	ldrh	r3, [r7, #12]
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fa3c 	bl	8004bc0 <hanCnvCodeWan2Johab>
 8004748:	4603      	mov	r3, r0
 800474a:	81bb      	strh	r3, [r7, #12]

  //seperate phoneme code
  uChosung   = (wHanCode>>10)&0x001F;//Chosung code
 800474c:	89bb      	ldrh	r3, [r7, #12]
 800474e:	0a9b      	lsrs	r3, r3, #10
 8004750:	b29b      	uxth	r3, r3
 8004752:	f003 031f 	and.w	r3, r3, #31
 8004756:	b29a      	uxth	r2, r3
 8004758:	4b63      	ldr	r3, [pc, #396]	; (80048e8 <hanWanFontLoad+0x1c8>)
 800475a:	801a      	strh	r2, [r3, #0]
  uJoongsung = (wHanCode>>5) &0x001F;//Joongsung code
 800475c:	89bb      	ldrh	r3, [r7, #12]
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	b29b      	uxth	r3, r3
 8004762:	f003 031f 	and.w	r3, r3, #31
 8004766:	b29a      	uxth	r2, r3
 8004768:	4b60      	ldr	r3, [pc, #384]	; (80048ec <hanWanFontLoad+0x1cc>)
 800476a:	801a      	strh	r2, [r3, #0]
  uJongsung  = wHanCode & 0x001F;    //Jongsung code
 800476c:	89bb      	ldrh	r3, [r7, #12]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	b29a      	uxth	r2, r3
 8004774:	4b5e      	ldr	r3, [pc, #376]	; (80048f0 <hanWanFontLoad+0x1d0>)
 8004776:	801a      	strh	r2, [r3, #0]

  //make font index
  uChosung   = ChoIdxTbl[uChosung];    //Chosung index
 8004778:	4b5b      	ldr	r3, [pc, #364]	; (80048e8 <hanWanFontLoad+0x1c8>)
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	4b5d      	ldr	r3, [pc, #372]	; (80048f4 <hanWanFontLoad+0x1d4>)
 8004780:	5c9b      	ldrb	r3, [r3, r2]
 8004782:	b29a      	uxth	r2, r3
 8004784:	4b58      	ldr	r3, [pc, #352]	; (80048e8 <hanWanFontLoad+0x1c8>)
 8004786:	801a      	strh	r2, [r3, #0]
  uJoongsung = JooIdxTbl[uJoongsung];  //Joongsung index
 8004788:	4b58      	ldr	r3, [pc, #352]	; (80048ec <hanWanFontLoad+0x1cc>)
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	461a      	mov	r2, r3
 800478e:	4b5a      	ldr	r3, [pc, #360]	; (80048f8 <hanWanFontLoad+0x1d8>)
 8004790:	5c9b      	ldrb	r3, [r3, r2]
 8004792:	b29a      	uxth	r2, r3
 8004794:	4b55      	ldr	r3, [pc, #340]	; (80048ec <hanWanFontLoad+0x1cc>)
 8004796:	801a      	strh	r2, [r3, #0]
  uJongsung  = JonIdxTbl[uJongsung];   //Jongsung index
 8004798:	4b55      	ldr	r3, [pc, #340]	; (80048f0 <hanWanFontLoad+0x1d0>)
 800479a:	881b      	ldrh	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	4b57      	ldr	r3, [pc, #348]	; (80048fc <hanWanFontLoad+0x1dc>)
 80047a0:	5c9b      	ldrb	r3, [r3, r2]
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	4b52      	ldr	r3, [pc, #328]	; (80048f0 <hanWanFontLoad+0x1d0>)
 80047a6:	801a      	strh	r2, [r3, #0]

  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80047a8:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <hanWanFontLoad+0x1d0>)
 80047aa:	881b      	ldrh	r3, [r3, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <hanWanFontLoad+0x9e>
 80047b0:	4b4e      	ldr	r3, [pc, #312]	; (80048ec <hanWanFontLoad+0x1cc>)
 80047b2:	881b      	ldrh	r3, [r3, #0]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b52      	ldr	r3, [pc, #328]	; (8004900 <hanWanFontLoad+0x1e0>)
 80047b8:	5c9b      	ldrb	r3, [r3, r2]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	e005      	b.n	80047ca <hanWanFontLoad+0xaa>
 80047be:	4b4b      	ldr	r3, [pc, #300]	; (80048ec <hanWanFontLoad+0x1cc>)
 80047c0:	881b      	ldrh	r3, [r3, #0]
 80047c2:	461a      	mov	r2, r3
 80047c4:	4b4f      	ldr	r3, [pc, #316]	; (8004904 <hanWanFontLoad+0x1e4>)
 80047c6:	5c9b      	ldrb	r3, [r3, r2]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	4a4f      	ldr	r2, [pc, #316]	; (8004908 <hanWanFontLoad+0x1e8>)
 80047cc:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 80047ce:	4b46      	ldr	r3, [pc, #280]	; (80048e8 <hanWanFontLoad+0x1c8>)
 80047d0:	881b      	ldrh	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d009      	beq.n	80047ea <hanWanFontLoad+0xca>
 80047d6:	4b44      	ldr	r3, [pc, #272]	; (80048e8 <hanWanFontLoad+0x1c8>)
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d005      	beq.n	80047ea <hanWanFontLoad+0xca>
 80047de:	4b42      	ldr	r3, [pc, #264]	; (80048e8 <hanWanFontLoad+0x1c8>)
 80047e0:	881b      	ldrh	r3, [r3, #0]
 80047e2:	2b10      	cmp	r3, #16
 80047e4:	d001      	beq.n	80047ea <hanWanFontLoad+0xca>
 80047e6:	2301      	movs	r3, #1
 80047e8:	e000      	b.n	80047ec <hanWanFontLoad+0xcc>
 80047ea:	2300      	movs	r3, #0
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <hanWanFontLoad+0x1d0>)
 80047f0:	8812      	ldrh	r2, [r2, #0]
 80047f2:	2a00      	cmp	r2, #0
 80047f4:	d001      	beq.n	80047fa <hanWanFontLoad+0xda>
 80047f6:	2202      	movs	r2, #2
 80047f8:	e000      	b.n	80047fc <hanWanFontLoad+0xdc>
 80047fa:	2200      	movs	r2, #0
 80047fc:	4413      	add	r3, r2
 80047fe:	b29a      	uxth	r2, r3
 8004800:	4b42      	ldr	r3, [pc, #264]	; (800490c <hanWanFontLoad+0x1ec>)
 8004802:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8004804:	4b39      	ldr	r3, [pc, #228]	; (80048ec <hanWanFontLoad+0x1cc>)
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	461a      	mov	r2, r3
 800480a:	4b41      	ldr	r3, [pc, #260]	; (8004910 <hanWanFontLoad+0x1f0>)
 800480c:	5c9b      	ldrb	r3, [r3, r2]
 800480e:	b29a      	uxth	r2, r3
 8004810:	4b40      	ldr	r3, [pc, #256]	; (8004914 <hanWanFontLoad+0x1f4>)
 8004812:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8004814:	2300      	movs	r3, #0
 8004816:	81fb      	strh	r3, [r7, #14]
 8004818:	e035      	b.n	8004886 <hanWanFontLoad+0x166>
  {
    FontPtr->FontBuffer[i]  = K_font[uChoType*20+uChosung][i];
 800481a:	4b3b      	ldr	r3, [pc, #236]	; (8004908 <hanWanFontLoad+0x1e8>)
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	4613      	mov	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4413      	add	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	461a      	mov	r2, r3
 800482a:	4b2f      	ldr	r3, [pc, #188]	; (80048e8 <hanWanFontLoad+0x1c8>)
 800482c:	881b      	ldrh	r3, [r3, #0]
 800482e:	441a      	add	r2, r3
 8004830:	89fb      	ldrh	r3, [r7, #14]
 8004832:	4939      	ldr	r1, [pc, #228]	; (8004918 <hanWanFontLoad+0x1f8>)
 8004834:	0152      	lsls	r2, r2, #5
 8004836:	4413      	add	r3, r2
 8004838:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800483c:	89fb      	ldrh	r3, [r7, #14]
 800483e:	b2d1      	uxtb	r1, r2
 8004840:	683a      	ldr	r2, [r7, #0]
 8004842:	4413      	add	r3, r2
 8004844:	460a      	mov	r2, r1
 8004846:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= K_font[160 + uJooType*22+uJoongsung][i];
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	4413      	add	r3, r2
 800484e:	7999      	ldrb	r1, [r3, #6]
 8004850:	4b2e      	ldr	r3, [pc, #184]	; (800490c <hanWanFontLoad+0x1ec>)
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	461a      	mov	r2, r3
 8004856:	2316      	movs	r3, #22
 8004858:	fb03 f302 	mul.w	r3, r3, r2
 800485c:	33a0      	adds	r3, #160	; 0xa0
 800485e:	4a23      	ldr	r2, [pc, #140]	; (80048ec <hanWanFontLoad+0x1cc>)
 8004860:	8812      	ldrh	r2, [r2, #0]
 8004862:	441a      	add	r2, r3
 8004864:	89fb      	ldrh	r3, [r7, #14]
 8004866:	482c      	ldr	r0, [pc, #176]	; (8004918 <hanWanFontLoad+0x1f8>)
 8004868:	0152      	lsls	r2, r2, #5
 800486a:	4413      	add	r3, r2
 800486c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	89fb      	ldrh	r3, [r7, #14]
 8004874:	430a      	orrs	r2, r1
 8004876:	b2d1      	uxtb	r1, r2
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4413      	add	r3, r2
 800487c:	460a      	mov	r2, r1
 800487e:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8004880:	89fb      	ldrh	r3, [r7, #14]
 8004882:	3301      	adds	r3, #1
 8004884:	81fb      	strh	r3, [r7, #14]
 8004886:	89fb      	ldrh	r3, [r7, #14]
 8004888:	2b1f      	cmp	r3, #31
 800488a:	d9c6      	bls.n	800481a <hanWanFontLoad+0xfa>
  }

  //combine Jongsung
  if(uJongsung)
 800488c:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <hanWanFontLoad+0x1d0>)
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d025      	beq.n	80048e0 <hanWanFontLoad+0x1c0>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8004894:	2300      	movs	r3, #0
 8004896:	81fb      	strh	r3, [r7, #14]
 8004898:	e01f      	b.n	80048da <hanWanFontLoad+0x1ba>
 800489a:	89fb      	ldrh	r3, [r7, #14]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	4413      	add	r3, r2
 80048a0:	7999      	ldrb	r1, [r3, #6]
 80048a2:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <hanWanFontLoad+0x1f4>)
 80048a4:	881b      	ldrh	r3, [r3, #0]
 80048a6:	461a      	mov	r2, r3
 80048a8:	4613      	mov	r3, r2
 80048aa:	00db      	lsls	r3, r3, #3
 80048ac:	1a9b      	subs	r3, r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	33f8      	adds	r3, #248	; 0xf8
 80048b2:	4a0f      	ldr	r2, [pc, #60]	; (80048f0 <hanWanFontLoad+0x1d0>)
 80048b4:	8812      	ldrh	r2, [r2, #0]
 80048b6:	441a      	add	r2, r3
 80048b8:	89fb      	ldrh	r3, [r7, #14]
 80048ba:	4817      	ldr	r0, [pc, #92]	; (8004918 <hanWanFontLoad+0x1f8>)
 80048bc:	0152      	lsls	r2, r2, #5
 80048be:	4413      	add	r3, r2
 80048c0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80048c4:	b2da      	uxtb	r2, r3
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	430a      	orrs	r2, r1
 80048ca:	b2d1      	uxtb	r1, r2
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	4413      	add	r3, r2
 80048d0:	460a      	mov	r2, r1
 80048d2:	719a      	strb	r2, [r3, #6]
 80048d4:	89fb      	ldrh	r3, [r7, #14]
 80048d6:	3301      	adds	r3, #1
 80048d8:	81fb      	strh	r3, [r7, #14]
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	2b1f      	cmp	r3, #31
 80048de:	d9dc      	bls.n	800489a <hanWanFontLoad+0x17a>
  }
}
 80048e0:	bf00      	nop
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	20006a1a 	.word	0x20006a1a
 80048ec:	20006a1c 	.word	0x20006a1c
 80048f0:	20006a1e 	.word	0x20006a1e
 80048f4:	0801a40c 	.word	0x0801a40c
 80048f8:	0801a42c 	.word	0x0801a42c
 80048fc:	0801a44c 	.word	0x0801a44c
 8004900:	0801a4e4 	.word	0x0801a4e4
 8004904:	0801a4cc 	.word	0x0801a4cc
 8004908:	20006a20 	.word	0x20006a20
 800490c:	20006a22 	.word	0x20006a22
 8004910:	0801a4fc 	.word	0x0801a4fc
 8004914:	20006a24 	.word	0x20006a24
 8004918:	0801ca00 	.word	0x0801ca00

0800491c <hanUniFontLoad>:

void hanUniFontLoad(char *HanCode, han_font_t *FontPtr)
{
 800491c:	b480      	push	{r7}
 800491e:	b085      	sub	sp, #20
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  static uint16_t uChosung, uJoongsung, uJongsung, uChoType, uJooType,uJonType;




  utf16 = (uint8_t)(HanCode[0] & 0x0f) << 12 | (uint8_t)(HanCode[1] & 0x3f) << 6 | (uint8_t)(HanCode[2] & 0x3f);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	031b      	lsls	r3, r3, #12
 800492c:	b21a      	sxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	3301      	adds	r3, #1
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	b21b      	sxth	r3, r3
 8004938:	f403 637c 	and.w	r3, r3, #4032	; 0xfc0
 800493c:	b21b      	sxth	r3, r3
 800493e:	4313      	orrs	r3, r2
 8004940:	b21a      	sxth	r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	3302      	adds	r3, #2
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	b21b      	sxth	r3, r3
 800494a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800494e:	b21b      	sxth	r3, r3
 8004950:	4313      	orrs	r3, r2
 8004952:	b21b      	sxth	r3, r3
 8004954:	81bb      	strh	r3, [r7, #12]


  //seperate phoneme code
  utf16 -= 0xac00;
 8004956:	89bb      	ldrh	r3, [r7, #12]
 8004958:	f503 43a8 	add.w	r3, r3, #21504	; 0x5400
 800495c:	81bb      	strh	r3, [r7, #12]
  uJongsung  = utf16 % 28;
 800495e:	89ba      	ldrh	r2, [r7, #12]
 8004960:	0893      	lsrs	r3, r2, #2
 8004962:	4973      	ldr	r1, [pc, #460]	; (8004b30 <hanUniFontLoad+0x214>)
 8004964:	fba1 3103 	umull	r3, r1, r1, r3
 8004968:	460b      	mov	r3, r1
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	1a5b      	subs	r3, r3, r1
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	b29a      	uxth	r2, r3
 8004974:	4b6f      	ldr	r3, [pc, #444]	; (8004b34 <hanUniFontLoad+0x218>)
 8004976:	801a      	strh	r2, [r3, #0]
  utf16 /= 28;
 8004978:	89bb      	ldrh	r3, [r7, #12]
 800497a:	089b      	lsrs	r3, r3, #2
 800497c:	4a6c      	ldr	r2, [pc, #432]	; (8004b30 <hanUniFontLoad+0x214>)
 800497e:	fba2 2303 	umull	r2, r3, r2, r3
 8004982:	81bb      	strh	r3, [r7, #12]
  uJoongsung = utf16 % 21;
 8004984:	89b9      	ldrh	r1, [r7, #12]
 8004986:	4b6c      	ldr	r3, [pc, #432]	; (8004b38 <hanUniFontLoad+0x21c>)
 8004988:	fba3 2301 	umull	r2, r3, r3, r1
 800498c:	1aca      	subs	r2, r1, r3
 800498e:	0852      	lsrs	r2, r2, #1
 8004990:	4413      	add	r3, r2
 8004992:	091a      	lsrs	r2, r3, #4
 8004994:	4613      	mov	r3, r2
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	4413      	add	r3, r2
 800499a:	00da      	lsls	r2, r3, #3
 800499c:	1ad2      	subs	r2, r2, r3
 800499e:	1a8b      	subs	r3, r1, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	4b66      	ldr	r3, [pc, #408]	; (8004b3c <hanUniFontLoad+0x220>)
 80049a4:	801a      	strh	r2, [r3, #0]
  uChosung   = utf16 / 21;
 80049a6:	89ba      	ldrh	r2, [r7, #12]
 80049a8:	4b63      	ldr	r3, [pc, #396]	; (8004b38 <hanUniFontLoad+0x21c>)
 80049aa:	fba3 1302 	umull	r1, r3, r3, r2
 80049ae:	1ad2      	subs	r2, r2, r3
 80049b0:	0852      	lsrs	r2, r2, #1
 80049b2:	4413      	add	r3, r2
 80049b4:	091b      	lsrs	r3, r3, #4
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <hanUniFontLoad+0x224>)
 80049ba:	801a      	strh	r2, [r3, #0]


  //make font index
  uChosung   = UniChoIdxTbl[uChosung];    //Chosung index
 80049bc:	4b60      	ldr	r3, [pc, #384]	; (8004b40 <hanUniFontLoad+0x224>)
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	461a      	mov	r2, r3
 80049c2:	4b60      	ldr	r3, [pc, #384]	; (8004b44 <hanUniFontLoad+0x228>)
 80049c4:	5c9b      	ldrb	r3, [r3, r2]
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <hanUniFontLoad+0x224>)
 80049ca:	801a      	strh	r2, [r3, #0]
  uJoongsung = UniJooIdxTbl[uJoongsung];  //Joongsung index
 80049cc:	4b5b      	ldr	r3, [pc, #364]	; (8004b3c <hanUniFontLoad+0x220>)
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	4b5d      	ldr	r3, [pc, #372]	; (8004b48 <hanUniFontLoad+0x22c>)
 80049d4:	5c9b      	ldrb	r3, [r3, r2]
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	4b58      	ldr	r3, [pc, #352]	; (8004b3c <hanUniFontLoad+0x220>)
 80049da:	801a      	strh	r2, [r3, #0]
  uJongsung  = UniJonIdxTbl[uJongsung];   //Jongsung index
 80049dc:	4b55      	ldr	r3, [pc, #340]	; (8004b34 <hanUniFontLoad+0x218>)
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	4b5a      	ldr	r3, [pc, #360]	; (8004b4c <hanUniFontLoad+0x230>)
 80049e4:	5c9b      	ldrb	r3, [r3, r2]
 80049e6:	b29a      	uxth	r2, r3
 80049e8:	4b52      	ldr	r3, [pc, #328]	; (8004b34 <hanUniFontLoad+0x218>)
 80049ea:	801a      	strh	r2, [r3, #0]


  //decide a character type (몇번째 벌을 사용할지 결정)
  uChoType = uJongsung ? ChoTypeCaseJongYes[uJoongsung]:ChoTypeCaseJongNo [uJoongsung];
 80049ec:	4b51      	ldr	r3, [pc, #324]	; (8004b34 <hanUniFontLoad+0x218>)
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d006      	beq.n	8004a02 <hanUniFontLoad+0xe6>
 80049f4:	4b51      	ldr	r3, [pc, #324]	; (8004b3c <hanUniFontLoad+0x220>)
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	4b55      	ldr	r3, [pc, #340]	; (8004b50 <hanUniFontLoad+0x234>)
 80049fc:	5c9b      	ldrb	r3, [r3, r2]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	e005      	b.n	8004a0e <hanUniFontLoad+0xf2>
 8004a02:	4b4e      	ldr	r3, [pc, #312]	; (8004b3c <hanUniFontLoad+0x220>)
 8004a04:	881b      	ldrh	r3, [r3, #0]
 8004a06:	461a      	mov	r2, r3
 8004a08:	4b52      	ldr	r3, [pc, #328]	; (8004b54 <hanUniFontLoad+0x238>)
 8004a0a:	5c9b      	ldrb	r3, [r3, r2]
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	4a52      	ldr	r2, [pc, #328]	; (8004b58 <hanUniFontLoad+0x23c>)
 8004a10:	8013      	strh	r3, [r2, #0]
    //'ㄱ'(1) 이나 'ㅋ'(16) 인경우는
  uJooType = ((uChosung == 0 || uChosung == 1 ||uChosung == 16 ) ? 0: 1) + (uJongsung ? 2: 0);
 8004a12:	4b4b      	ldr	r3, [pc, #300]	; (8004b40 <hanUniFontLoad+0x224>)
 8004a14:	881b      	ldrh	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d009      	beq.n	8004a2e <hanUniFontLoad+0x112>
 8004a1a:	4b49      	ldr	r3, [pc, #292]	; (8004b40 <hanUniFontLoad+0x224>)
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d005      	beq.n	8004a2e <hanUniFontLoad+0x112>
 8004a22:	4b47      	ldr	r3, [pc, #284]	; (8004b40 <hanUniFontLoad+0x224>)
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d001      	beq.n	8004a2e <hanUniFontLoad+0x112>
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e000      	b.n	8004a30 <hanUniFontLoad+0x114>
 8004a2e:	2300      	movs	r3, #0
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	4a40      	ldr	r2, [pc, #256]	; (8004b34 <hanUniFontLoad+0x218>)
 8004a34:	8812      	ldrh	r2, [r2, #0]
 8004a36:	2a00      	cmp	r2, #0
 8004a38:	d001      	beq.n	8004a3e <hanUniFontLoad+0x122>
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	e000      	b.n	8004a40 <hanUniFontLoad+0x124>
 8004a3e:	2200      	movs	r2, #0
 8004a40:	4413      	add	r3, r2
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	4b45      	ldr	r3, [pc, #276]	; (8004b5c <hanUniFontLoad+0x240>)
 8004a46:	801a      	strh	r2, [r3, #0]
  uJonType = JonType[uJoongsung];
 8004a48:	4b3c      	ldr	r3, [pc, #240]	; (8004b3c <hanUniFontLoad+0x220>)
 8004a4a:	881b      	ldrh	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	4b44      	ldr	r3, [pc, #272]	; (8004b60 <hanUniFontLoad+0x244>)
 8004a50:	5c9b      	ldrb	r3, [r3, r2]
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	4b43      	ldr	r3, [pc, #268]	; (8004b64 <hanUniFontLoad+0x248>)
 8004a56:	801a      	strh	r2, [r3, #0]

  for(i = 0; i<32; i++)
 8004a58:	2300      	movs	r3, #0
 8004a5a:	81fb      	strh	r3, [r7, #14]
 8004a5c:	e035      	b.n	8004aca <hanUniFontLoad+0x1ae>
  {
    FontPtr->FontBuffer[i]  = (uint8_t)K_font[uChoType*20+uChosung][i];
 8004a5e:	4b3e      	ldr	r3, [pc, #248]	; (8004b58 <hanUniFontLoad+0x23c>)
 8004a60:	881b      	ldrh	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <hanUniFontLoad+0x224>)
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	441a      	add	r2, r3
 8004a74:	89fb      	ldrh	r3, [r7, #14]
 8004a76:	493c      	ldr	r1, [pc, #240]	; (8004b68 <hanUniFontLoad+0x24c>)
 8004a78:	0152      	lsls	r2, r2, #5
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8004a80:	89fb      	ldrh	r3, [r7, #14]
 8004a82:	b2d1      	uxtb	r1, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	4413      	add	r3, r2
 8004a88:	460a      	mov	r2, r1
 8004a8a:	719a      	strb	r2, [r3, #6]
    FontPtr->FontBuffer[i] |= (uint8_t)K_font[160 + uJooType*22+uJoongsung][i];
 8004a8c:	89fb      	ldrh	r3, [r7, #14]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	4413      	add	r3, r2
 8004a92:	7999      	ldrb	r1, [r3, #6]
 8004a94:	4b31      	ldr	r3, [pc, #196]	; (8004b5c <hanUniFontLoad+0x240>)
 8004a96:	881b      	ldrh	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2316      	movs	r3, #22
 8004a9c:	fb03 f302 	mul.w	r3, r3, r2
 8004aa0:	33a0      	adds	r3, #160	; 0xa0
 8004aa2:	4a26      	ldr	r2, [pc, #152]	; (8004b3c <hanUniFontLoad+0x220>)
 8004aa4:	8812      	ldrh	r2, [r2, #0]
 8004aa6:	441a      	add	r2, r3
 8004aa8:	89fb      	ldrh	r3, [r7, #14]
 8004aaa:	482f      	ldr	r0, [pc, #188]	; (8004b68 <hanUniFontLoad+0x24c>)
 8004aac:	0152      	lsls	r2, r2, #5
 8004aae:	4413      	add	r3, r2
 8004ab0:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004ab4:	b2da      	uxtb	r2, r3
 8004ab6:	89fb      	ldrh	r3, [r7, #14]
 8004ab8:	430a      	orrs	r2, r1
 8004aba:	b2d1      	uxtb	r1, r2
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	4413      	add	r3, r2
 8004ac0:	460a      	mov	r2, r1
 8004ac2:	719a      	strb	r2, [r3, #6]
  for(i = 0; i<32; i++)
 8004ac4:	89fb      	ldrh	r3, [r7, #14]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	81fb      	strh	r3, [r7, #14]
 8004aca:	89fb      	ldrh	r3, [r7, #14]
 8004acc:	2b1f      	cmp	r3, #31
 8004ace:	d9c6      	bls.n	8004a5e <hanUniFontLoad+0x142>
  }

  //combine Jongsung
  if(uJongsung)
 8004ad0:	4b18      	ldr	r3, [pc, #96]	; (8004b34 <hanUniFontLoad+0x218>)
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d025      	beq.n	8004b24 <hanUniFontLoad+0x208>
  {
    for(i = 0; i < 32; i++)   FontPtr->FontBuffer[i] |= K_font[248 + uJonType*28+uJongsung][i];
 8004ad8:	2300      	movs	r3, #0
 8004ada:	81fb      	strh	r3, [r7, #14]
 8004adc:	e01f      	b.n	8004b1e <hanUniFontLoad+0x202>
 8004ade:	89fb      	ldrh	r3, [r7, #14]
 8004ae0:	683a      	ldr	r2, [r7, #0]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	7999      	ldrb	r1, [r3, #6]
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <hanUniFontLoad+0x248>)
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	461a      	mov	r2, r3
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	1a9b      	subs	r3, r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	33f8      	adds	r3, #248	; 0xf8
 8004af6:	4a0f      	ldr	r2, [pc, #60]	; (8004b34 <hanUniFontLoad+0x218>)
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	441a      	add	r2, r3
 8004afc:	89fb      	ldrh	r3, [r7, #14]
 8004afe:	481a      	ldr	r0, [pc, #104]	; (8004b68 <hanUniFontLoad+0x24c>)
 8004b00:	0152      	lsls	r2, r2, #5
 8004b02:	4413      	add	r3, r2
 8004b04:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8004b08:	b2da      	uxtb	r2, r3
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	b2d1      	uxtb	r1, r2
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	4413      	add	r3, r2
 8004b14:	460a      	mov	r2, r1
 8004b16:	719a      	strb	r2, [r3, #6]
 8004b18:	89fb      	ldrh	r3, [r7, #14]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	81fb      	strh	r3, [r7, #14]
 8004b1e:	89fb      	ldrh	r3, [r7, #14]
 8004b20:	2b1f      	cmp	r3, #31
 8004b22:	d9dc      	bls.n	8004ade <hanUniFontLoad+0x1c2>
  }
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	24924925 	.word	0x24924925
 8004b34:	20006a26 	.word	0x20006a26
 8004b38:	86186187 	.word	0x86186187
 8004b3c:	20006a28 	.word	0x20006a28
 8004b40:	20006a2a 	.word	0x20006a2a
 8004b44:	0801a46c 	.word	0x0801a46c
 8004b48:	0801a48c 	.word	0x0801a48c
 8004b4c:	0801a4ac 	.word	0x0801a4ac
 8004b50:	0801a4e4 	.word	0x0801a4e4
 8004b54:	0801a4cc 	.word	0x0801a4cc
 8004b58:	20006a2c 	.word	0x20006a2c
 8004b5c:	20006a2e 	.word	0x20006a2e
 8004b60:	0801a4fc 	.word	0x0801a4fc
 8004b64:	20006a30 	.word	0x20006a30
 8004b68:	0801ca00 	.word	0x0801ca00

08004b6c <hanEngFontLoad>:

void hanEngFontLoad(char *HanCode, han_font_t *FontPtr)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
 8004b74:	6039      	str	r1, [r7, #0]
  uint16_t i;
  char EngCode;

  EngCode = *HanCode;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	737b      	strb	r3, [r7, #13]

  EngCode -= 0x20;  // FONT는 스페이스 부터 시작한다.
 8004b7c:	7b7b      	ldrb	r3, [r7, #13]
 8004b7e:	3b20      	subs	r3, #32
 8004b80:	737b      	strb	r3, [r7, #13]

  for ( i = 0 ; i < 16 ; i++ )
 8004b82:	2300      	movs	r3, #0
 8004b84:	81fb      	strh	r3, [r7, #14]
 8004b86:	e00f      	b.n	8004ba8 <hanEngFontLoad+0x3c>
  {
     FontPtr->FontBuffer[ i ] = (char)wEngFon[(int)EngCode][i];
 8004b88:	7b7a      	ldrb	r2, [r7, #13]
 8004b8a:	89fb      	ldrh	r3, [r7, #14]
 8004b8c:	490b      	ldr	r1, [pc, #44]	; (8004bbc <hanEngFontLoad+0x50>)
 8004b8e:	0112      	lsls	r2, r2, #4
 8004b90:	4413      	add	r3, r2
 8004b92:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8004b96:	89fb      	ldrh	r3, [r7, #14]
 8004b98:	b2d1      	uxtb	r1, r2
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	719a      	strb	r2, [r3, #6]
  for ( i = 0 ; i < 16 ; i++ )
 8004ba2:	89fb      	ldrh	r3, [r7, #14]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	81fb      	strh	r3, [r7, #14]
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	2b0f      	cmp	r3, #15
 8004bac:	d9ec      	bls.n	8004b88 <hanEngFontLoad+0x1c>
  }
}
 8004bae:	bf00      	nop
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr
 8004bbc:	08018c0c 	.word	0x08018c0c

08004bc0 <hanCnvCodeWan2Johab>:

uint16_t hanCnvCodeWan2Johab(uint16_t WanCode)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b085      	sub	sp, #20
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	80fb      	strh	r3, [r7, #6]
  int index;
  uint16_t hcode, lcode;

  hcode = (WanCode >> 8) & 0xFF;
 8004bca:	88fb      	ldrh	r3, [r7, #6]
 8004bcc:	0a1b      	lsrs	r3, r3, #8
 8004bce:	81fb      	strh	r3, [r7, #14]
  lcode = WanCode & 0x0ff;
 8004bd0:	88fb      	ldrh	r3, [r7, #6]
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	81bb      	strh	r3, [r7, #12]

  index = (hcode - 0x0B0) * 94 + (lcode - 0x0A1);
 8004bd6:	89fb      	ldrh	r3, [r7, #14]
 8004bd8:	3bb0      	subs	r3, #176	; 0xb0
 8004bda:	225e      	movs	r2, #94	; 0x5e
 8004bdc:	fb02 f203 	mul.w	r2, r2, r3
 8004be0:	89bb      	ldrh	r3, [r7, #12]
 8004be2:	3ba1      	subs	r3, #161	; 0xa1
 8004be4:	4413      	add	r3, r2
 8004be6:	60bb      	str	r3, [r7, #8]

  return wWanToJohabTable[index];
 8004be8:	4a05      	ldr	r2, [pc, #20]	; (8004c00 <hanCnvCodeWan2Johab+0x40>)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bf0:	b29b      	uxth	r3, r3
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3714      	adds	r7, #20
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr
 8004bfe:	bf00      	nop
 8004c00:	0801a540 	.word	0x0801a540

08004c04 <TransferDoneISR>:
static void st7735SetRotation(uint8_t m);
static bool st7735Reset(void);


static void TransferDoneISR(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  if (is_write_frame == true)
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <TransferDoneISR+0x30>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00d      	beq.n	8004c2e <TransferDoneISR+0x2a>
  {
    is_write_frame = false;
 8004c12:	4b08      	ldr	r3, [pc, #32]	; (8004c34 <TransferDoneISR+0x30>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
    gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8004c18:	2101      	movs	r1, #1
 8004c1a:	2002      	movs	r0, #2
 8004c1c:	f7fd fc3a 	bl	8002494 <gpioPinWrite>

    if (frameCallBack != NULL)
 8004c20:	4b05      	ldr	r3, [pc, #20]	; (8004c38 <TransferDoneISR+0x34>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <TransferDoneISR+0x2a>
    {
      frameCallBack();
 8004c28:	4b03      	ldr	r3, [pc, #12]	; (8004c38 <TransferDoneISR+0x34>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4798      	blx	r3
    }
  }
}
 8004c2e:	bf00      	nop
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20006a38 	.word	0x20006a38
 8004c38:	20006a34 	.word	0x20006a34

08004c3c <st7735Init>:


bool st7735Init(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
  bool ret;

  ret = st7735Reset();
 8004c42:	f000 f835 	bl	8004cb0 <st7735Reset>
 8004c46:	4603      	mov	r3, r0
 8004c48:	71fb      	strb	r3, [r7, #7]

  return ret;
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3708      	adds	r7, #8
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <st7735InitDriver>:

bool st7735InitDriver(lcd_driver_t *p_driver)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  p_driver->init = st7735Init;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0d      	ldr	r2, [pc, #52]	; (8004c94 <st7735InitDriver+0x40>)
 8004c60:	601a      	str	r2, [r3, #0]
  p_driver->reset = st7735Reset;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <st7735InitDriver+0x44>)
 8004c66:	605a      	str	r2, [r3, #4]
  p_driver->setWindow = st7735SetWindow;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a0c      	ldr	r2, [pc, #48]	; (8004c9c <st7735InitDriver+0x48>)
 8004c6c:	609a      	str	r2, [r3, #8]
  p_driver->getWidth = st7735GetWidth;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a0b      	ldr	r2, [pc, #44]	; (8004ca0 <st7735InitDriver+0x4c>)
 8004c72:	60da      	str	r2, [r3, #12]
  p_driver->getHeight = st7735GetHeight;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <st7735InitDriver+0x50>)
 8004c78:	611a      	str	r2, [r3, #16]
  p_driver->setCallBack = st7735SetCallBack;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <st7735InitDriver+0x54>)
 8004c7e:	615a      	str	r2, [r3, #20]
  p_driver->sendBuffer = st7735SendBuffer;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <st7735InitDriver+0x58>)
 8004c84:	619a      	str	r2, [r3, #24]
  return true;
 8004c86:	2301      	movs	r3, #1
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	370c      	adds	r7, #12
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c92:	4770      	bx	lr
 8004c94:	08004c3d 	.word	0x08004c3d
 8004c98:	08004cb1 	.word	0x08004cb1
 8004c9c:	08004f75 	.word	0x08004f75
 8004ca0:	08004d29 	.word	0x08004d29
 8004ca4:	08004d39 	.word	0x08004d39
 8004ca8:	080051b5 	.word	0x080051b5
 8004cac:	08005169 	.word	0x08005169

08004cb0 <st7735Reset>:

bool st7735Reset(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b082      	sub	sp, #8
 8004cb4:	af02      	add	r7, sp, #8
  spiBegin(spi_ch);
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <st7735Reset+0x70>)
 8004cb8:	781b      	ldrb	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe ff62 	bl	8003b84 <spiBegin>
  spiSetDataMode(spi_ch, SPI_MODE0);
 8004cc0:	4b17      	ldr	r3, [pc, #92]	; (8004d20 <st7735Reset+0x70>)
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	2100      	movs	r1, #0
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fe ffb0 	bl	8003c2c <spiSetDataMode>

  spiAttachTxInterrupt(spi_ch, TransferDoneISR);
 8004ccc:	4b14      	ldr	r3, [pc, #80]	; (8004d20 <st7735Reset+0x70>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	4914      	ldr	r1, [pc, #80]	; (8004d24 <st7735Reset+0x74>)
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f7ff f8ce 	bl	8003e74 <spiAttachTxInterrupt>

  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8004cd8:	2100      	movs	r1, #0
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f7fd fbda 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_DC,  _DEF_HIGH);
 8004ce0:	2101      	movs	r1, #1
 8004ce2:	2003      	movs	r0, #3
 8004ce4:	f7fd fbd6 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS,  _DEF_HIGH);
 8004ce8:	2101      	movs	r1, #1
 8004cea:	2002      	movs	r0, #2
 8004cec:	f7fd fbd2 	bl	8002494 <gpioPinWrite>
  delay(10);
 8004cf0:	200a      	movs	r0, #10
 8004cf2:	f7fc f9c3 	bl	800107c <delay>

  st7735InitRegs();
 8004cf6:	f000 f863 	bl	8004dc0 <st7735InitRegs>


  st7735SetRotation(3);
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f000 f910 	bl	8004f20 <st7735SetRotation>
  st7735FillRect(0, 0, HW_LCD_WIDTH, HW_LCD_HEIGHT, black);
 8004d00:	2300      	movs	r3, #0
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	2350      	movs	r3, #80	; 0x50
 8004d06:	22a0      	movs	r2, #160	; 0xa0
 8004d08:	2100      	movs	r1, #0
 8004d0a:	2000      	movs	r0, #0
 8004d0c:	f000 f97e 	bl	800500c <st7735FillRect>
  gpioPinWrite(_PIN_DEF_BKT, _DEF_LOW);
 8004d10:	2100      	movs	r1, #0
 8004d12:	2001      	movs	r0, #1
 8004d14:	f7fd fbbe 	bl	8002494 <gpioPinWrite>
  return true;
 8004d18:	2301      	movs	r3, #1
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	20006a32 	.word	0x20006a32
 8004d24:	08004c05 	.word	0x08004c05

08004d28 <st7735GetWidth>:

uint16_t st7735GetWidth(void)
{
 8004d28:	b480      	push	{r7}
 8004d2a:	af00      	add	r7, sp, #0
  return HW_LCD_WIDTH;
 8004d2c:	23a0      	movs	r3, #160	; 0xa0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <st7735GetHeight>:

uint16_t st7735GetHeight(void)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	af00      	add	r7, sp, #0
  return HW_LCD_HEIGHT;
 8004d3c:	2350      	movs	r3, #80	; 0x50
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr

08004d48 <writecommand>:

void writecommand(uint8_t c)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b082      	sub	sp, #8
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_LOW);
 8004d52:	2100      	movs	r1, #0
 8004d54:	2003      	movs	r0, #3
 8004d56:	f7fd fb9d 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8004d5a:	2100      	movs	r1, #0
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	f7fd fb99 	bl	8002494 <gpioPinWrite>

  spiTransfer8(spi_ch, c);
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <writecommand+0x38>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	79fa      	ldrb	r2, [r7, #7]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f7fe ffea 	bl	8003d44 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8004d70:	2101      	movs	r1, #1
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7fd fb8e 	bl	8002494 <gpioPinWrite>
}
 8004d78:	bf00      	nop
 8004d7a:	3708      	adds	r7, #8
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	20006a32 	.word	0x20006a32

08004d84 <writedata>:

void writedata(uint8_t d)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	71fb      	strb	r3, [r7, #7]
  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8004d8e:	2101      	movs	r1, #1
 8004d90:	2003      	movs	r0, #3
 8004d92:	f7fd fb7f 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8004d96:	2100      	movs	r1, #0
 8004d98:	2002      	movs	r0, #2
 8004d9a:	f7fd fb7b 	bl	8002494 <gpioPinWrite>

  spiTransfer8(spi_ch, d);
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <writedata+0x38>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	79fa      	ldrb	r2, [r7, #7]
 8004da4:	4611      	mov	r1, r2
 8004da6:	4618      	mov	r0, r3
 8004da8:	f7fe ffcc 	bl	8003d44 <spiTransfer8>

  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 8004dac:	2101      	movs	r1, #1
 8004dae:	2002      	movs	r0, #2
 8004db0:	f7fd fb70 	bl	8002494 <gpioPinWrite>
}
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20006a32 	.word	0x20006a32

08004dc0 <st7735InitRegs>:

void st7735InitRegs(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  writecommand(ST7735_SWRESET); //  1: Software reset, 0 args, w/delay
 8004dc4:	2001      	movs	r0, #1
 8004dc6:	f7ff ffbf 	bl	8004d48 <writecommand>
  delay(10);
 8004dca:	200a      	movs	r0, #10
 8004dcc:	f7fc f956 	bl	800107c <delay>

  writecommand(ST7735_SLPOUT);  //  2: Out of sleep mode, 0 args, w/delay
 8004dd0:	2011      	movs	r0, #17
 8004dd2:	f7ff ffb9 	bl	8004d48 <writecommand>
  delay(10);
 8004dd6:	200a      	movs	r0, #10
 8004dd8:	f7fc f950 	bl	800107c <delay>

  writecommand(ST7735_FRMCTR1); //  3: Frame rate ctrl - normal mode, 3 args:
 8004ddc:	20b1      	movs	r0, #177	; 0xb1
 8004dde:	f7ff ffb3 	bl	8004d48 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8004de2:	2001      	movs	r0, #1
 8004de4:	f7ff ffce 	bl	8004d84 <writedata>
  writedata(0x2C);
 8004de8:	202c      	movs	r0, #44	; 0x2c
 8004dea:	f7ff ffcb 	bl	8004d84 <writedata>
  writedata(0x2D);
 8004dee:	202d      	movs	r0, #45	; 0x2d
 8004df0:	f7ff ffc8 	bl	8004d84 <writedata>

  writecommand(ST7735_FRMCTR2); //  4: Frame rate control - idle mode, 3 args:
 8004df4:	20b2      	movs	r0, #178	; 0xb2
 8004df6:	f7ff ffa7 	bl	8004d48 <writecommand>
  writedata(0x01);              //     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	f7ff ffc2 	bl	8004d84 <writedata>
  writedata(0x2C);
 8004e00:	202c      	movs	r0, #44	; 0x2c
 8004e02:	f7ff ffbf 	bl	8004d84 <writedata>
  writedata(0x2D);
 8004e06:	202d      	movs	r0, #45	; 0x2d
 8004e08:	f7ff ffbc 	bl	8004d84 <writedata>

  writecommand(ST7735_FRMCTR3); //  5: Frame rate ctrl - partial mode, 6 args:
 8004e0c:	20b3      	movs	r0, #179	; 0xb3
 8004e0e:	f7ff ff9b 	bl	8004d48 <writecommand>
  writedata(0x01);              //     Dot inversion mode
 8004e12:	2001      	movs	r0, #1
 8004e14:	f7ff ffb6 	bl	8004d84 <writedata>
  writedata(0x2C);
 8004e18:	202c      	movs	r0, #44	; 0x2c
 8004e1a:	f7ff ffb3 	bl	8004d84 <writedata>
  writedata(0x2D);
 8004e1e:	202d      	movs	r0, #45	; 0x2d
 8004e20:	f7ff ffb0 	bl	8004d84 <writedata>
  writedata(0x01);              //     Line inversion mode
 8004e24:	2001      	movs	r0, #1
 8004e26:	f7ff ffad 	bl	8004d84 <writedata>
  writedata(0x2C);
 8004e2a:	202c      	movs	r0, #44	; 0x2c
 8004e2c:	f7ff ffaa 	bl	8004d84 <writedata>
  writedata(0x2D);
 8004e30:	202d      	movs	r0, #45	; 0x2d
 8004e32:	f7ff ffa7 	bl	8004d84 <writedata>

  writecommand(ST7735_INVCTR);  //  6: Display inversion ctrl, 1 arg, no delay:
 8004e36:	20b4      	movs	r0, #180	; 0xb4
 8004e38:	f7ff ff86 	bl	8004d48 <writecommand>
  writedata(0x07);              //     No inversion
 8004e3c:	2007      	movs	r0, #7
 8004e3e:	f7ff ffa1 	bl	8004d84 <writedata>

  writecommand(ST7735_PWCTR1);  //  7: Power control, 3 args, no delay:
 8004e42:	20c0      	movs	r0, #192	; 0xc0
 8004e44:	f7ff ff80 	bl	8004d48 <writecommand>
  writedata(0xA2);
 8004e48:	20a2      	movs	r0, #162	; 0xa2
 8004e4a:	f7ff ff9b 	bl	8004d84 <writedata>
  writedata(0x02);              //     -4.6V
 8004e4e:	2002      	movs	r0, #2
 8004e50:	f7ff ff98 	bl	8004d84 <writedata>
  writedata(0x84);              //     AUTO mode
 8004e54:	2084      	movs	r0, #132	; 0x84
 8004e56:	f7ff ff95 	bl	8004d84 <writedata>

  writecommand(ST7735_PWCTR2);  //  8: Power control, 1 arg, no delay:
 8004e5a:	20c1      	movs	r0, #193	; 0xc1
 8004e5c:	f7ff ff74 	bl	8004d48 <writecommand>
  writedata(0xC5);              //     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 8004e60:	20c5      	movs	r0, #197	; 0xc5
 8004e62:	f7ff ff8f 	bl	8004d84 <writedata>

  writecommand(ST7735_PWCTR3);  //  9: Power control, 2 args, no delay:
 8004e66:	20c2      	movs	r0, #194	; 0xc2
 8004e68:	f7ff ff6e 	bl	8004d48 <writecommand>
  writedata(0x0A);              //     Opamp current small
 8004e6c:	200a      	movs	r0, #10
 8004e6e:	f7ff ff89 	bl	8004d84 <writedata>
  writedata(0x00);              //     Boost frequency
 8004e72:	2000      	movs	r0, #0
 8004e74:	f7ff ff86 	bl	8004d84 <writedata>

  writecommand(ST7735_PWCTR4);  // 10: Power control, 2 args, no delay:
 8004e78:	20c3      	movs	r0, #195	; 0xc3
 8004e7a:	f7ff ff65 	bl	8004d48 <writecommand>
  writedata(0x8A);              //     BCLK/2, Opamp current small & Medium low
 8004e7e:	208a      	movs	r0, #138	; 0x8a
 8004e80:	f7ff ff80 	bl	8004d84 <writedata>
  writedata(0x2A);
 8004e84:	202a      	movs	r0, #42	; 0x2a
 8004e86:	f7ff ff7d 	bl	8004d84 <writedata>

  writecommand(ST7735_PWCTR5);  // 11: Power control, 2 args, no delay:
 8004e8a:	20c4      	movs	r0, #196	; 0xc4
 8004e8c:	f7ff ff5c 	bl	8004d48 <writecommand>
  writedata(0x8A);
 8004e90:	208a      	movs	r0, #138	; 0x8a
 8004e92:	f7ff ff77 	bl	8004d84 <writedata>
  writedata(0xEE);
 8004e96:	20ee      	movs	r0, #238	; 0xee
 8004e98:	f7ff ff74 	bl	8004d84 <writedata>

  writecommand(ST7735_VMCTR1);  // 12: Power control, 1 arg, no delay:
 8004e9c:	20c5      	movs	r0, #197	; 0xc5
 8004e9e:	f7ff ff53 	bl	8004d48 <writecommand>
  writedata(0x0E);
 8004ea2:	200e      	movs	r0, #14
 8004ea4:	f7ff ff6e 	bl	8004d84 <writedata>

  writecommand(ST7735_INVON);   // 13: Don't invert display, no args, no delay
 8004ea8:	2021      	movs	r0, #33	; 0x21
 8004eaa:	f7ff ff4d 	bl	8004d48 <writecommand>

  writecommand(ST7735_MADCTL);  // 14: Memory access control (directions), 1 arg:
 8004eae:	2036      	movs	r0, #54	; 0x36
 8004eb0:	f7ff ff4a 	bl	8004d48 <writecommand>
  writedata(0xC8);              //     row addr/col addr, bottom to top refresh
 8004eb4:	20c8      	movs	r0, #200	; 0xc8
 8004eb6:	f7ff ff65 	bl	8004d84 <writedata>

  writecommand(ST7735_COLMOD);  // 15: set color mode, 1 arg, no delay:
 8004eba:	203a      	movs	r0, #58	; 0x3a
 8004ebc:	f7ff ff44 	bl	8004d48 <writecommand>
  writedata(0x05);              //     16-bit color
 8004ec0:	2005      	movs	r0, #5
 8004ec2:	f7ff ff5f 	bl	8004d84 <writedata>


  writecommand(ST7735_CASET);   //  1: Column addr set, 4 args, no delay:
 8004ec6:	202a      	movs	r0, #42	; 0x2a
 8004ec8:	f7ff ff3e 	bl	8004d48 <writecommand>
  writedata(0x00);
 8004ecc:	2000      	movs	r0, #0
 8004ece:	f7ff ff59 	bl	8004d84 <writedata>
  writedata(0x00);              //     XSTART = 0
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	f7ff ff56 	bl	8004d84 <writedata>
  writedata(0x00);
 8004ed8:	2000      	movs	r0, #0
 8004eda:	f7ff ff53 	bl	8004d84 <writedata>
  writedata(160-1);             //     XEND = 159
 8004ede:	209f      	movs	r0, #159	; 0x9f
 8004ee0:	f7ff ff50 	bl	8004d84 <writedata>

  writecommand(ST7735_RASET);   //  2: Row addr set, 4 args, no delay:
 8004ee4:	202b      	movs	r0, #43	; 0x2b
 8004ee6:	f7ff ff2f 	bl	8004d48 <writecommand>
  writedata(0x00);
 8004eea:	2000      	movs	r0, #0
 8004eec:	f7ff ff4a 	bl	8004d84 <writedata>
  writedata(0x00);              //     XSTART = 0
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	f7ff ff47 	bl	8004d84 <writedata>
  writedata(0x00);
 8004ef6:	2000      	movs	r0, #0
 8004ef8:	f7ff ff44 	bl	8004d84 <writedata>
  writedata(80-1);              //     XEND = 79
 8004efc:	204f      	movs	r0, #79	; 0x4f
 8004efe:	f7ff ff41 	bl	8004d84 <writedata>


  writecommand(ST7735_NORON);   //  3: Normal display on, no args, w/delay
 8004f02:	2013      	movs	r0, #19
 8004f04:	f7ff ff20 	bl	8004d48 <writecommand>
  delay(10);
 8004f08:	200a      	movs	r0, #10
 8004f0a:	f7fc f8b7 	bl	800107c <delay>
  writecommand(ST7735_DISPON);  //  4: Main screen turn on, no args w/delay
 8004f0e:	2029      	movs	r0, #41	; 0x29
 8004f10:	f7ff ff1a 	bl	8004d48 <writecommand>
  delay(10);
 8004f14:	200a      	movs	r0, #10
 8004f16:	f7fc f8b1 	bl	800107c <delay>
}
 8004f1a:	bf00      	nop
 8004f1c:	bd80      	pop	{r7, pc}
	...

08004f20 <st7735SetRotation>:

void st7735SetRotation(uint8_t mode)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	4603      	mov	r3, r0
 8004f28:	71fb      	strb	r3, [r7, #7]
  writecommand(ST7735_MADCTL);
 8004f2a:	2036      	movs	r0, #54	; 0x36
 8004f2c:	f7ff ff0c 	bl	8004d48 <writecommand>

  switch (mode)
 8004f30:	79fb      	ldrb	r3, [r7, #7]
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d81a      	bhi.n	8004f6c <st7735SetRotation+0x4c>
 8004f36:	a201      	add	r2, pc, #4	; (adr r2, 8004f3c <st7735SetRotation+0x1c>)
 8004f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3c:	08004f4d 	.word	0x08004f4d
 8004f40:	08004f55 	.word	0x08004f55
 8004f44:	08004f5d 	.word	0x08004f5d
 8004f48:	08004f65 	.word	0x08004f65
  {
   case 0:
     writedata(MADCTL_MX | MADCTL_MY | MADCTL_BGR);
 8004f4c:	20c8      	movs	r0, #200	; 0xc8
 8004f4e:	f7ff ff19 	bl	8004d84 <writedata>
     break;
 8004f52:	e00b      	b.n	8004f6c <st7735SetRotation+0x4c>

   case 1:
     writedata(MADCTL_MY | MADCTL_MV | MADCTL_BGR);
 8004f54:	20a8      	movs	r0, #168	; 0xa8
 8004f56:	f7ff ff15 	bl	8004d84 <writedata>
     break;
 8004f5a:	e007      	b.n	8004f6c <st7735SetRotation+0x4c>

  case 2:
    writedata(MADCTL_BGR);
 8004f5c:	2008      	movs	r0, #8
 8004f5e:	f7ff ff11 	bl	8004d84 <writedata>
    break;
 8004f62:	e003      	b.n	8004f6c <st7735SetRotation+0x4c>

   case 3:
     writedata(MADCTL_MX | MADCTL_MV | MADCTL_BGR);
 8004f64:	2068      	movs	r0, #104	; 0x68
 8004f66:	f7ff ff0d 	bl	8004d84 <writedata>
     break;
 8004f6a:	bf00      	nop
  }
}
 8004f6c:	bf00      	nop
 8004f6e:	3708      	adds	r7, #8
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <st7735SetWindow>:

void st7735SetWindow(int32_t x0, int32_t y0, int32_t x1, int32_t y1)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
 8004f80:	603b      	str	r3, [r7, #0]
  spiSetBitWidth(spi_ch, 8);
 8004f82:	4b21      	ldr	r3, [pc, #132]	; (8005008 <st7735SetWindow+0x94>)
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	2108      	movs	r1, #8
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f7fe feaf 	bl	8003cec <spiSetBitWidth>

  writecommand(ST7735_CASET); // Column addr set
 8004f8e:	202a      	movs	r0, #42	; 0x2a
 8004f90:	f7ff feda 	bl	8004d48 <writecommand>
  writedata(0x00);
 8004f94:	2000      	movs	r0, #0
 8004f96:	f7ff fef5 	bl	8004d84 <writedata>
  writedata(x0+colstart);     // XSTART
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f7ff feec 	bl	8004d84 <writedata>
  writedata(0x00);
 8004fac:	2000      	movs	r0, #0
 8004fae:	f7ff fee9 	bl	8004d84 <writedata>
  writedata(x1+colstart);     // XEND
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	b2da      	uxtb	r2, r3
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f7ff fee0 	bl	8004d84 <writedata>

  writecommand(ST7735_RASET); // Row addr set
 8004fc4:	202b      	movs	r0, #43	; 0x2b
 8004fc6:	f7ff febf 	bl	8004d48 <writecommand>
  writedata(0x00);
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f7ff feda 	bl	8004d84 <writedata>
  writedata(y0+rowstart);     // YSTART
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	231a      	movs	r3, #26
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4413      	add	r3, r2
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f7ff fed1 	bl	8004d84 <writedata>
  writedata(0x00);
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	f7ff fece 	bl	8004d84 <writedata>
  writedata(y1+rowstart);     // YEND
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	231a      	movs	r3, #26
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fec5 	bl	8004d84 <writedata>

  writecommand(ST7735_RAMWR); // write to RAM
 8004ffa:	202c      	movs	r0, #44	; 0x2c
 8004ffc:	f7ff fea4 	bl	8004d48 <writecommand>
}
 8005000:	bf00      	nop
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20006a32 	.word	0x20006a32

0800500c <st7735FillRect>:

void st7735FillRect(int32_t x, int32_t y, int32_t w, int32_t h, uint32_t color)
{
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b088      	sub	sp, #32
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
 8005018:	603b      	str	r3, [r7, #0]
 800501a:	466b      	mov	r3, sp
 800501c:	461d      	mov	r5, r3
  uint16_t line_buf[w];
 800501e:	687c      	ldr	r4, [r7, #4]
 8005020:	1e63      	subs	r3, r4, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	4623      	mov	r3, r4
 8005026:	4618      	mov	r0, r3
 8005028:	f04f 0100 	mov.w	r1, #0
 800502c:	f04f 0200 	mov.w	r2, #0
 8005030:	f04f 0300 	mov.w	r3, #0
 8005034:	010b      	lsls	r3, r1, #4
 8005036:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800503a:	0102      	lsls	r2, r0, #4
 800503c:	4623      	mov	r3, r4
 800503e:	4618      	mov	r0, r3
 8005040:	f04f 0100 	mov.w	r1, #0
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	010b      	lsls	r3, r1, #4
 800504e:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005052:	0102      	lsls	r2, r0, #4
 8005054:	4623      	mov	r3, r4
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	3307      	adds	r3, #7
 800505a:	08db      	lsrs	r3, r3, #3
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	ebad 0d03 	sub.w	sp, sp, r3
 8005062:	466b      	mov	r3, sp
 8005064:	3301      	adds	r3, #1
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	613b      	str	r3, [r7, #16]

  // Clipping
  if ((x >= _width) || (y >= _height)) return;
 800506c:	22a0      	movs	r2, #160	; 0xa0
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	4293      	cmp	r3, r2
 8005072:	da70      	bge.n	8005156 <st7735FillRect+0x14a>
 8005074:	2250      	movs	r2, #80	; 0x50
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	4293      	cmp	r3, r2
 800507a:	da6c      	bge.n	8005156 <st7735FillRect+0x14a>

  if (x < 0) { w += x; x = 0; }
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	da05      	bge.n	800508e <st7735FillRect+0x82>
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	4413      	add	r3, r2
 8005088:	607b      	str	r3, [r7, #4]
 800508a:	2300      	movs	r3, #0
 800508c:	60fb      	str	r3, [r7, #12]
  if (y < 0) { h += y; y = 0; }
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	2b00      	cmp	r3, #0
 8005092:	da05      	bge.n	80050a0 <st7735FillRect+0x94>
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	4413      	add	r3, r2
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]

  if ((x + w) > _width)  w = _width  - x;
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4413      	add	r3, r2
 80050a6:	22a0      	movs	r2, #160	; 0xa0
 80050a8:	4293      	cmp	r3, r2
 80050aa:	dd03      	ble.n	80050b4 <st7735FillRect+0xa8>
 80050ac:	22a0      	movs	r2, #160	; 0xa0
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	607b      	str	r3, [r7, #4]
  if ((y + h) > _height) h = _height - y;
 80050b4:	68ba      	ldr	r2, [r7, #8]
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	4413      	add	r3, r2
 80050ba:	2250      	movs	r2, #80	; 0x50
 80050bc:	4293      	cmp	r3, r2
 80050be:	dd03      	ble.n	80050c8 <st7735FillRect+0xbc>
 80050c0:	2250      	movs	r2, #80	; 0x50
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	603b      	str	r3, [r7, #0]

  if ((w < 1) || (h < 1)) return;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	dd45      	ble.n	800515a <st7735FillRect+0x14e>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	dd42      	ble.n	800515a <st7735FillRect+0x14e>


  st7735SetWindow(x, y, x + w - 1, y + h - 1);
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4413      	add	r3, r2
 80050da:	1e59      	subs	r1, r3, #1
 80050dc:	68ba      	ldr	r2, [r7, #8]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	4413      	add	r3, r2
 80050e2:	3b01      	subs	r3, #1
 80050e4:	460a      	mov	r2, r1
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f7ff ff43 	bl	8004f74 <st7735SetWindow>
  spiSetBitWidth(spi_ch, 16);
 80050ee:	4b1d      	ldr	r3, [pc, #116]	; (8005164 <st7735FillRect+0x158>)
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2110      	movs	r1, #16
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7fe fdf9 	bl	8003cec <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 80050fa:	2101      	movs	r1, #1
 80050fc:	2003      	movs	r0, #3
 80050fe:	f7fd f9c9 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 8005102:	2100      	movs	r1, #0
 8005104:	2002      	movs	r0, #2
 8005106:	f7fd f9c5 	bl	8002494 <gpioPinWrite>

  for (int i=0; i<w; i++)
 800510a:	2300      	movs	r3, #0
 800510c:	61fb      	str	r3, [r7, #28]
 800510e:	e008      	b.n	8005122 <st7735FillRect+0x116>
  {
    line_buf[i] = color;
 8005110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005112:	b299      	uxth	r1, r3
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	69fa      	ldr	r2, [r7, #28]
 8005118:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (int i=0; i<w; i++)
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	3301      	adds	r3, #1
 8005120:	61fb      	str	r3, [r7, #28]
 8005122:	69fa      	ldr	r2, [r7, #28]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	429a      	cmp	r2, r3
 8005128:	dbf2      	blt.n	8005110 <st7735FillRect+0x104>
  }
  for (int i=0; i<h; i++)
 800512a:	2300      	movs	r3, #0
 800512c:	61bb      	str	r3, [r7, #24]
 800512e:	e008      	b.n	8005142 <st7735FillRect+0x136>
  {
    spiDmaTxTransfer(_DEF_SPI1, (void *)line_buf, w, 10);
 8005130:	6939      	ldr	r1, [r7, #16]
 8005132:	687a      	ldr	r2, [r7, #4]
 8005134:	230a      	movs	r3, #10
 8005136:	2000      	movs	r0, #0
 8005138:	f7fe fe52 	bl	8003de0 <spiDmaTxTransfer>
  for (int i=0; i<h; i++)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	3301      	adds	r3, #1
 8005140:	61bb      	str	r3, [r7, #24]
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	dbf2      	blt.n	8005130 <st7735FillRect+0x124>
  }
  gpioPinWrite(_PIN_DEF_CS, _DEF_HIGH);
 800514a:	2101      	movs	r1, #1
 800514c:	2002      	movs	r0, #2
 800514e:	f7fd f9a1 	bl	8002494 <gpioPinWrite>
 8005152:	46ad      	mov	sp, r5
 8005154:	e003      	b.n	800515e <st7735FillRect+0x152>
  if ((x >= _width) || (y >= _height)) return;
 8005156:	bf00      	nop
 8005158:	e000      	b.n	800515c <st7735FillRect+0x150>
  if ((w < 1) || (h < 1)) return;
 800515a:	bf00      	nop
 800515c:	46ad      	mov	sp, r5
}
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bdb0      	pop	{r4, r5, r7, pc}
 8005164:	20006a32 	.word	0x20006a32

08005168 <st7735SendBuffer>:

bool st7735SendBuffer(uint8_t *p_data, uint32_t length, uint32_t timeout_ms)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
  is_write_frame = true;
 8005174:	4b0d      	ldr	r3, [pc, #52]	; (80051ac <st7735SendBuffer+0x44>)
 8005176:	2201      	movs	r2, #1
 8005178:	701a      	strb	r2, [r3, #0]

  spiSetBitWidth(spi_ch, 16);
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <st7735SendBuffer+0x48>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	2110      	movs	r1, #16
 8005180:	4618      	mov	r0, r3
 8005182:	f7fe fdb3 	bl	8003cec <spiSetBitWidth>

  gpioPinWrite(_PIN_DEF_DC, _DEF_HIGH);
 8005186:	2101      	movs	r1, #1
 8005188:	2003      	movs	r0, #3
 800518a:	f7fd f983 	bl	8002494 <gpioPinWrite>
  gpioPinWrite(_PIN_DEF_CS, _DEF_LOW);
 800518e:	2100      	movs	r1, #0
 8005190:	2002      	movs	r0, #2
 8005192:	f7fd f97f 	bl	8002494 <gpioPinWrite>

  spiDmaTxTransfer(_DEF_SPI1, (void *)p_data, length, 0);
 8005196:	2300      	movs	r3, #0
 8005198:	68ba      	ldr	r2, [r7, #8]
 800519a:	68f9      	ldr	r1, [r7, #12]
 800519c:	2000      	movs	r0, #0
 800519e:	f7fe fe1f 	bl	8003de0 <spiDmaTxTransfer>
  return true;
 80051a2:	2301      	movs	r3, #1
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	bd80      	pop	{r7, pc}
 80051ac:	20006a38 	.word	0x20006a38
 80051b0:	20006a32 	.word	0x20006a32

080051b4 <st7735SetCallBack>:

bool st7735SetCallBack(void (*p_func)(void))
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  frameCallBack = p_func;
 80051bc:	4a04      	ldr	r2, [pc, #16]	; (80051d0 <st7735SetCallBack+0x1c>)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6013      	str	r3, [r2, #0]

  return true;
 80051c2:	2301      	movs	r3, #1
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	20006a34 	.word	0x20006a34

080051d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e01f      	b.n	800522c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d003      	beq.n	8005212 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	68ba      	ldr	r2, [r7, #8]
 800520e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2201      	movs	r2, #1
 8005216:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	79fa      	ldrb	r2, [r7, #7]
 800521e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f004 f80d 	bl	8009240 <USBD_LL_Init>
 8005226:	4603      	mov	r3, r0
 8005228:	75fb      	strb	r3, [r7, #23]

  return ret;
 800522a:	7dfb      	ldrb	r3, [r7, #23]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3718      	adds	r7, #24
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d101      	bne.n	800524c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005248:	2303      	movs	r3, #3
 800524a:	e016      	b.n	800527a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005268:	f107 020e 	add.w	r2, r7, #14
 800526c:	4610      	mov	r0, r2
 800526e:	4798      	blx	r3
 8005270:	4602      	mov	r2, r0
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005278:	2300      	movs	r3, #0
}
 800527a:	4618      	mov	r0, r3
 800527c:	3710      	adds	r7, #16
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f004 f824 	bl	80092d8 <USBD_LL_Start>
 8005290:	4603      	mov	r3, r0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	460b      	mov	r3, r1
 80052ba:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d009      	beq.n	80052de <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	4611      	mov	r1, r2
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	4798      	blx	r3
 80052da:	4603      	mov	r3, r0
 80052dc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052de:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}

080052e8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	460b      	mov	r3, r1
 80052f2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d007      	beq.n	800530e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	78fa      	ldrb	r2, [r7, #3]
 8005308:	4611      	mov	r1, r2
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	4798      	blx	r3
  }

  return USBD_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005328:	6839      	ldr	r1, [r7, #0]
 800532a:	4618      	mov	r0, r3
 800532c:	f000 ff90 	bl	8006250 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800533e:	461a      	mov	r2, r3
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800534c:	f003 031f 	and.w	r3, r3, #31
 8005350:	2b02      	cmp	r3, #2
 8005352:	d01a      	beq.n	800538a <USBD_LL_SetupStage+0x72>
 8005354:	2b02      	cmp	r3, #2
 8005356:	d822      	bhi.n	800539e <USBD_LL_SetupStage+0x86>
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <USBD_LL_SetupStage+0x4a>
 800535c:	2b01      	cmp	r3, #1
 800535e:	d00a      	beq.n	8005376 <USBD_LL_SetupStage+0x5e>
 8005360:	e01d      	b.n	800539e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa62 	bl	8005834 <USBD_StdDevReq>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e020      	b.n	80053b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fac6 	bl	8005910 <USBD_StdItfReq>
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
      break;
 8005388:	e016      	b.n	80053b8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fb05 	bl	80059a2 <USBD_StdEPReq>
 8005398:	4603      	mov	r3, r0
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e00c      	b.n	80053b8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f004 f812 	bl	80093d6 <USBD_LL_StallEP>
 80053b2:	4603      	mov	r3, r0
 80053b4:	73fb      	strb	r3, [r7, #15]
      break;
 80053b6:	bf00      	nop
  }

  return ret;
 80053b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}

080053c2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053c2:	b580      	push	{r7, lr}
 80053c4:	b086      	sub	sp, #24
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	60f8      	str	r0, [r7, #12]
 80053ca:	460b      	mov	r3, r1
 80053cc:	607a      	str	r2, [r7, #4]
 80053ce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053d0:	7afb      	ldrb	r3, [r7, #11]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d138      	bne.n	8005448 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053dc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053e4:	2b03      	cmp	r3, #3
 80053e6:	d14a      	bne.n	800547e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d913      	bls.n	800541c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	1ad2      	subs	r2, r2, r3
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	68da      	ldr	r2, [r3, #12]
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4293      	cmp	r3, r2
 800540c:	bf28      	it	cs
 800540e:	4613      	movcs	r3, r2
 8005410:	461a      	mov	r2, r3
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f001 f80f 	bl	8006438 <USBD_CtlContinueRx>
 800541a:	e030      	b.n	800547e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b03      	cmp	r3, #3
 8005426:	d10b      	bne.n	8005440 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f001 f80a 	bl	800645a <USBD_CtlSendStatus>
 8005446:	e01a      	b.n	800547e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544e:	b2db      	uxtb	r3, r3
 8005450:	2b03      	cmp	r3, #3
 8005452:	d114      	bne.n	800547e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d00e      	beq.n	800547e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	7afa      	ldrb	r2, [r7, #11]
 800546a:	4611      	mov	r1, r2
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	4798      	blx	r3
 8005470:	4603      	mov	r3, r0
 8005472:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005474:	7dfb      	ldrb	r3, [r7, #23]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800547a:	7dfb      	ldrb	r3, [r7, #23]
 800547c:	e000      	b.n	8005480 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800547e:	2300      	movs	r3, #0
}
 8005480:	4618      	mov	r0, r3
 8005482:	3718      	adds	r7, #24
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	460b      	mov	r3, r1
 8005492:	607a      	str	r2, [r7, #4]
 8005494:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005496:	7afb      	ldrb	r3, [r7, #11]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d16b      	bne.n	8005574 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3314      	adds	r3, #20
 80054a0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d156      	bne.n	800555a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d914      	bls.n	80054e2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	1ad2      	subs	r2, r2, r3
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	689b      	ldr	r3, [r3, #8]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f000 ff84 	bl	80063dc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054d4:	2300      	movs	r3, #0
 80054d6:	2200      	movs	r2, #0
 80054d8:	2100      	movs	r1, #0
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f004 f825 	bl	800952a <USBD_LL_PrepareReceive>
 80054e0:	e03b      	b.n	800555a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	68da      	ldr	r2, [r3, #12]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d11c      	bne.n	8005528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	685a      	ldr	r2, [r3, #4]
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d316      	bcc.n	8005528 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005504:	429a      	cmp	r2, r3
 8005506:	d20f      	bcs.n	8005528 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005508:	2200      	movs	r2, #0
 800550a:	2100      	movs	r1, #0
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f000 ff65 	bl	80063dc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800551a:	2300      	movs	r3, #0
 800551c:	2200      	movs	r2, #0
 800551e:	2100      	movs	r1, #0
 8005520:	68f8      	ldr	r0, [r7, #12]
 8005522:	f004 f802 	bl	800952a <USBD_LL_PrepareReceive>
 8005526:	e018      	b.n	800555a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b03      	cmp	r3, #3
 8005532:	d10b      	bne.n	800554c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800554c:	2180      	movs	r1, #128	; 0x80
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f003 ff41 	bl	80093d6 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 ff93 	bl	8006480 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005560:	2b01      	cmp	r3, #1
 8005562:	d122      	bne.n	80055aa <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f7ff fe98 	bl	800529a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005572:	e01a      	b.n	80055aa <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800557a:	b2db      	uxtb	r3, r3
 800557c:	2b03      	cmp	r3, #3
 800557e:	d114      	bne.n	80055aa <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	7afa      	ldrb	r2, [r7, #11]
 8005596:	4611      	mov	r1, r2
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80055a6:	7dfb      	ldrb	r3, [r7, #23]
 80055a8:	e000      	b.n	80055ac <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80055aa:	2300      	movs	r3, #0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d101      	bne.n	80055e8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e02f      	b.n	8005648 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00f      	beq.n	8005612 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d009      	beq.n	8005612 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	6852      	ldr	r2, [r2, #4]
 800560a:	b2d2      	uxtb	r2, r2
 800560c:	4611      	mov	r1, r2
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005612:	2340      	movs	r3, #64	; 0x40
 8005614:	2200      	movs	r2, #0
 8005616:	2100      	movs	r1, #0
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f003 fe78 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2240      	movs	r2, #64	; 0x40
 800562a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	2200      	movs	r2, #0
 8005632:	2180      	movs	r1, #128	; 0x80
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f003 fe6a 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2240      	movs	r2, #64	; 0x40
 8005644:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005646:	2300      	movs	r3, #0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3708      	adds	r7, #8
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	460b      	mov	r3, r1
 800565a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	78fa      	ldrb	r2, [r7, #3]
 8005660:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567e:	b2da      	uxtb	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2204      	movs	r2, #4
 800568a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d106      	bne.n	80056be <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80056de:	2303      	movs	r3, #3
 80056e0:	e012      	b.n	8005708 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	d10b      	bne.n	8005706 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d005      	beq.n	8005706 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005700:	69db      	ldr	r3, [r3, #28]
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	460b      	mov	r3, r1
 800571a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d101      	bne.n	800572a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005726:	2303      	movs	r3, #3
 8005728:	e014      	b.n	8005754 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b03      	cmp	r3, #3
 8005734:	d10d      	bne.n	8005752 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573c:	6a1b      	ldr	r3, [r3, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	6a1b      	ldr	r3, [r3, #32]
 800574a:	78fa      	ldrb	r2, [r7, #3]
 800574c:	4611      	mov	r1, r2
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	460b      	mov	r3, r1
 8005766:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005772:	2303      	movs	r3, #3
 8005774:	e014      	b.n	80057a0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b03      	cmp	r3, #3
 8005780:	d10d      	bne.n	800579e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578a:	2b00      	cmp	r3, #0
 800578c:	d007      	beq.n	800579e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005796:	78fa      	ldrb	r2, [r7, #3]
 8005798:	4611      	mov	r1, r2
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	370c      	adds	r7, #12
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057be:	b580      	push	{r7, lr}
 80057c0:	b082      	sub	sp, #8
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2201      	movs	r2, #1
 80057ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d009      	beq.n	80057ec <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6852      	ldr	r2, [r2, #4]
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	4611      	mov	r1, r2
 80057e8:	6878      	ldr	r0, [r7, #4]
 80057ea:	4798      	blx	r3
  }

  return USBD_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80057f6:	b480      	push	{r7}
 80057f8:	b087      	sub	sp, #28
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	3301      	adds	r3, #1
 800580c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005814:	8a3b      	ldrh	r3, [r7, #16]
 8005816:	021b      	lsls	r3, r3, #8
 8005818:	b21a      	sxth	r2, r3
 800581a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800581e:	4313      	orrs	r3, r2
 8005820:	b21b      	sxth	r3, r3
 8005822:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005824:	89fb      	ldrh	r3, [r7, #14]
}
 8005826:	4618      	mov	r0, r3
 8005828:	371c      	adds	r7, #28
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b084      	sub	sp, #16
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800584a:	2b40      	cmp	r3, #64	; 0x40
 800584c:	d005      	beq.n	800585a <USBD_StdDevReq+0x26>
 800584e:	2b40      	cmp	r3, #64	; 0x40
 8005850:	d853      	bhi.n	80058fa <USBD_StdDevReq+0xc6>
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00b      	beq.n	800586e <USBD_StdDevReq+0x3a>
 8005856:	2b20      	cmp	r3, #32
 8005858:	d14f      	bne.n	80058fa <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	6839      	ldr	r1, [r7, #0]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
 8005868:	4603      	mov	r3, r0
 800586a:	73fb      	strb	r3, [r7, #15]
      break;
 800586c:	e04a      	b.n	8005904 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	785b      	ldrb	r3, [r3, #1]
 8005872:	2b09      	cmp	r3, #9
 8005874:	d83b      	bhi.n	80058ee <USBD_StdDevReq+0xba>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <USBD_StdDevReq+0x48>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	080058d1 	.word	0x080058d1
 8005880:	080058e5 	.word	0x080058e5
 8005884:	080058ef 	.word	0x080058ef
 8005888:	080058db 	.word	0x080058db
 800588c:	080058ef 	.word	0x080058ef
 8005890:	080058af 	.word	0x080058af
 8005894:	080058a5 	.word	0x080058a5
 8005898:	080058ef 	.word	0x080058ef
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	080058b9 	.word	0x080058b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f9de 	bl	8005c68 <USBD_GetDescriptor>
          break;
 80058ac:	e024      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fb43 	bl	8005f3c <USBD_SetAddress>
          break;
 80058b6:	e01f      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058b8:	6839      	ldr	r1, [r7, #0]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fb82 	bl	8005fc4 <USBD_SetConfig>
 80058c0:	4603      	mov	r3, r0
 80058c2:	73fb      	strb	r3, [r7, #15]
          break;
 80058c4:	e018      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058c6:	6839      	ldr	r1, [r7, #0]
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f000 fc21 	bl	8006110 <USBD_GetConfig>
          break;
 80058ce:	e013      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058d0:	6839      	ldr	r1, [r7, #0]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc52 	bl	800617c <USBD_GetStatus>
          break;
 80058d8:	e00e      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058da:	6839      	ldr	r1, [r7, #0]
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 fc81 	bl	80061e4 <USBD_SetFeature>
          break;
 80058e2:	e009      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80058e4:	6839      	ldr	r1, [r7, #0]
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fc90 	bl	800620c <USBD_ClrFeature>
          break;
 80058ec:	e004      	b.n	80058f8 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 fce7 	bl	80062c4 <USBD_CtlError>
          break;
 80058f6:	bf00      	nop
      }
      break;
 80058f8:	e004      	b.n	8005904 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fce1 	bl	80062c4 <USBD_CtlError>
      break;
 8005902:	bf00      	nop
  }

  return ret;
 8005904:	7bfb      	ldrb	r3, [r7, #15]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop

08005910 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
 8005918:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800591a:	2300      	movs	r3, #0
 800591c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	781b      	ldrb	r3, [r3, #0]
 8005922:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005926:	2b40      	cmp	r3, #64	; 0x40
 8005928:	d005      	beq.n	8005936 <USBD_StdItfReq+0x26>
 800592a:	2b40      	cmp	r3, #64	; 0x40
 800592c:	d82f      	bhi.n	800598e <USBD_StdItfReq+0x7e>
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <USBD_StdItfReq+0x26>
 8005932:	2b20      	cmp	r3, #32
 8005934:	d12b      	bne.n	800598e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800593c:	b2db      	uxtb	r3, r3
 800593e:	3b01      	subs	r3, #1
 8005940:	2b02      	cmp	r3, #2
 8005942:	d81d      	bhi.n	8005980 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	889b      	ldrh	r3, [r3, #4]
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b01      	cmp	r3, #1
 800594c:	d813      	bhi.n	8005976 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	6839      	ldr	r1, [r7, #0]
 8005958:	6878      	ldr	r0, [r7, #4]
 800595a:	4798      	blx	r3
 800595c:	4603      	mov	r3, r0
 800595e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	88db      	ldrh	r3, [r3, #6]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d110      	bne.n	800598a <USBD_StdItfReq+0x7a>
 8005968:	7bfb      	ldrb	r3, [r7, #15]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d10d      	bne.n	800598a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 fd73 	bl	800645a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005974:	e009      	b.n	800598a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fca3 	bl	80062c4 <USBD_CtlError>
          break;
 800597e:	e004      	b.n	800598a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 fc9e 	bl	80062c4 <USBD_CtlError>
          break;
 8005988:	e000      	b.n	800598c <USBD_StdItfReq+0x7c>
          break;
 800598a:	bf00      	nop
      }
      break;
 800598c:	e004      	b.n	8005998 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800598e:	6839      	ldr	r1, [r7, #0]
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fc97 	bl	80062c4 <USBD_CtlError>
      break;
 8005996:	bf00      	nop
  }

  return ret;
 8005998:	7bfb      	ldrb	r3, [r7, #15]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b084      	sub	sp, #16
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059ac:	2300      	movs	r3, #0
 80059ae:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	889b      	ldrh	r3, [r3, #4]
 80059b4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	781b      	ldrb	r3, [r3, #0]
 80059ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059be:	2b40      	cmp	r3, #64	; 0x40
 80059c0:	d007      	beq.n	80059d2 <USBD_StdEPReq+0x30>
 80059c2:	2b40      	cmp	r3, #64	; 0x40
 80059c4:	f200 8145 	bhi.w	8005c52 <USBD_StdEPReq+0x2b0>
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d00c      	beq.n	80059e6 <USBD_StdEPReq+0x44>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	f040 8140 	bne.w	8005c52 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	6839      	ldr	r1, [r7, #0]
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	4798      	blx	r3
 80059e0:	4603      	mov	r3, r0
 80059e2:	73fb      	strb	r3, [r7, #15]
      break;
 80059e4:	e13a      	b.n	8005c5c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	785b      	ldrb	r3, [r3, #1]
 80059ea:	2b03      	cmp	r3, #3
 80059ec:	d007      	beq.n	80059fe <USBD_StdEPReq+0x5c>
 80059ee:	2b03      	cmp	r3, #3
 80059f0:	f300 8129 	bgt.w	8005c46 <USBD_StdEPReq+0x2a4>
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d07f      	beq.n	8005af8 <USBD_StdEPReq+0x156>
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d03c      	beq.n	8005a76 <USBD_StdEPReq+0xd4>
 80059fc:	e123      	b.n	8005c46 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b02      	cmp	r3, #2
 8005a08:	d002      	beq.n	8005a10 <USBD_StdEPReq+0x6e>
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d016      	beq.n	8005a3c <USBD_StdEPReq+0x9a>
 8005a0e:	e02c      	b.n	8005a6a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a10:	7bbb      	ldrb	r3, [r7, #14]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00d      	beq.n	8005a32 <USBD_StdEPReq+0x90>
 8005a16:	7bbb      	ldrb	r3, [r7, #14]
 8005a18:	2b80      	cmp	r3, #128	; 0x80
 8005a1a:	d00a      	beq.n	8005a32 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a1c:	7bbb      	ldrb	r3, [r7, #14]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f003 fcd8 	bl	80093d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a26:	2180      	movs	r1, #128	; 0x80
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	f003 fcd4 	bl	80093d6 <USBD_LL_StallEP>
 8005a2e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a30:	e020      	b.n	8005a74 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fc45 	bl	80062c4 <USBD_CtlError>
              break;
 8005a3a:	e01b      	b.n	8005a74 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	885b      	ldrh	r3, [r3, #2]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d10e      	bne.n	8005a62 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a44:	7bbb      	ldrb	r3, [r7, #14]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00b      	beq.n	8005a62 <USBD_StdEPReq+0xc0>
 8005a4a:	7bbb      	ldrb	r3, [r7, #14]
 8005a4c:	2b80      	cmp	r3, #128	; 0x80
 8005a4e:	d008      	beq.n	8005a62 <USBD_StdEPReq+0xc0>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	88db      	ldrh	r3, [r3, #6]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d104      	bne.n	8005a62 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a58:	7bbb      	ldrb	r3, [r7, #14]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f003 fcba 	bl	80093d6 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fcf9 	bl	800645a <USBD_CtlSendStatus>

              break;
 8005a68:	e004      	b.n	8005a74 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005a6a:	6839      	ldr	r1, [r7, #0]
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fc29 	bl	80062c4 <USBD_CtlError>
              break;
 8005a72:	bf00      	nop
          }
          break;
 8005a74:	e0ec      	b.n	8005c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a7c:	b2db      	uxtb	r3, r3
 8005a7e:	2b02      	cmp	r3, #2
 8005a80:	d002      	beq.n	8005a88 <USBD_StdEPReq+0xe6>
 8005a82:	2b03      	cmp	r3, #3
 8005a84:	d016      	beq.n	8005ab4 <USBD_StdEPReq+0x112>
 8005a86:	e030      	b.n	8005aea <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a88:	7bbb      	ldrb	r3, [r7, #14]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d00d      	beq.n	8005aaa <USBD_StdEPReq+0x108>
 8005a8e:	7bbb      	ldrb	r3, [r7, #14]
 8005a90:	2b80      	cmp	r3, #128	; 0x80
 8005a92:	d00a      	beq.n	8005aaa <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a94:	7bbb      	ldrb	r3, [r7, #14]
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f003 fc9c 	bl	80093d6 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a9e:	2180      	movs	r1, #128	; 0x80
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f003 fc98 	bl	80093d6 <USBD_LL_StallEP>
 8005aa6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005aa8:	e025      	b.n	8005af6 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005aaa:	6839      	ldr	r1, [r7, #0]
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f000 fc09 	bl	80062c4 <USBD_CtlError>
              break;
 8005ab2:	e020      	b.n	8005af6 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	885b      	ldrh	r3, [r3, #2]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d11b      	bne.n	8005af4 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005abc:	7bbb      	ldrb	r3, [r7, #14]
 8005abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d004      	beq.n	8005ad0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ac6:	7bbb      	ldrb	r3, [r7, #14]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f003 fca2 	bl	8009414 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f000 fcc2 	bl	800645a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005adc:	689b      	ldr	r3, [r3, #8]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	4798      	blx	r3
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005ae8:	e004      	b.n	8005af4 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f000 fbe9 	bl	80062c4 <USBD_CtlError>
              break;
 8005af2:	e000      	b.n	8005af6 <USBD_StdEPReq+0x154>
              break;
 8005af4:	bf00      	nop
          }
          break;
 8005af6:	e0ab      	b.n	8005c50 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b02      	cmp	r3, #2
 8005b02:	d002      	beq.n	8005b0a <USBD_StdEPReq+0x168>
 8005b04:	2b03      	cmp	r3, #3
 8005b06:	d032      	beq.n	8005b6e <USBD_StdEPReq+0x1cc>
 8005b08:	e097      	b.n	8005c3a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b0a:	7bbb      	ldrb	r3, [r7, #14]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d007      	beq.n	8005b20 <USBD_StdEPReq+0x17e>
 8005b10:	7bbb      	ldrb	r3, [r7, #14]
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d004      	beq.n	8005b20 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005b16:	6839      	ldr	r1, [r7, #0]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fbd3 	bl	80062c4 <USBD_CtlError>
                break;
 8005b1e:	e091      	b.n	8005c44 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	da0b      	bge.n	8005b40 <USBD_StdEPReq+0x19e>
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	3310      	adds	r3, #16
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	e00b      	b.n	8005b58 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b40:	7bbb      	ldrb	r3, [r7, #14]
 8005b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b46:	4613      	mov	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	3304      	adds	r3, #4
 8005b58:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2202      	movs	r2, #2
 8005b64:	4619      	mov	r1, r3
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fc1d 	bl	80063a6 <USBD_CtlSendData>
              break;
 8005b6c:	e06a      	b.n	8005c44 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	da11      	bge.n	8005b9a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b76:	7bbb      	ldrb	r3, [r7, #14]
 8005b78:	f003 020f 	and.w	r2, r3, #15
 8005b7c:	6879      	ldr	r1, [r7, #4]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	3324      	adds	r3, #36	; 0x24
 8005b8a:	881b      	ldrh	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d117      	bne.n	8005bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005b90:	6839      	ldr	r1, [r7, #0]
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fb96 	bl	80062c4 <USBD_CtlError>
                  break;
 8005b98:	e054      	b.n	8005c44 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b9a:	7bbb      	ldrb	r3, [r7, #14]
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bb0:	881b      	ldrh	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d104      	bne.n	8005bc0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bb6:	6839      	ldr	r1, [r7, #0]
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f000 fb83 	bl	80062c4 <USBD_CtlError>
                  break;
 8005bbe:	e041      	b.n	8005c44 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005bc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	da0b      	bge.n	8005be0 <USBD_StdEPReq+0x23e>
 8005bc8:	7bbb      	ldrb	r3, [r7, #14]
 8005bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bce:	4613      	mov	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	3310      	adds	r3, #16
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	4413      	add	r3, r2
 8005bdc:	3304      	adds	r3, #4
 8005bde:	e00b      	b.n	8005bf8 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005be0:	7bbb      	ldrb	r3, [r7, #14]
 8005be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005bfa:	7bbb      	ldrb	r3, [r7, #14]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d002      	beq.n	8005c06 <USBD_StdEPReq+0x264>
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	2b80      	cmp	r3, #128	; 0x80
 8005c04:	d103      	bne.n	8005c0e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	e00e      	b.n	8005c2c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f003 fc1d 	bl	8009452 <USBD_LL_IsStallEP>
 8005c18:	4603      	mov	r3, r0
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	2201      	movs	r2, #1
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e002      	b.n	8005c2c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fbb7 	bl	80063a6 <USBD_CtlSendData>
              break;
 8005c38:	e004      	b.n	8005c44 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005c3a:	6839      	ldr	r1, [r7, #0]
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fb41 	bl	80062c4 <USBD_CtlError>
              break;
 8005c42:	bf00      	nop
          }
          break;
 8005c44:	e004      	b.n	8005c50 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005c46:	6839      	ldr	r1, [r7, #0]
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fb3b 	bl	80062c4 <USBD_CtlError>
          break;
 8005c4e:	bf00      	nop
      }
      break;
 8005c50:	e004      	b.n	8005c5c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fb35 	bl	80062c4 <USBD_CtlError>
      break;
 8005c5a:	bf00      	nop
  }

  return ret;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
	...

08005c68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c72:	2300      	movs	r3, #0
 8005c74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c76:	2300      	movs	r3, #0
 8005c78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	885b      	ldrh	r3, [r3, #2]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	2b06      	cmp	r3, #6
 8005c8a:	f200 8128 	bhi.w	8005ede <USBD_GetDescriptor+0x276>
 8005c8e:	a201      	add	r2, pc, #4	; (adr r2, 8005c94 <USBD_GetDescriptor+0x2c>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cb1 	.word	0x08005cb1
 8005c98:	08005cc9 	.word	0x08005cc9
 8005c9c:	08005d09 	.word	0x08005d09
 8005ca0:	08005edf 	.word	0x08005edf
 8005ca4:	08005edf 	.word	0x08005edf
 8005ca8:	08005e7f 	.word	0x08005e7f
 8005cac:	08005eab 	.word	0x08005eab
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	7c12      	ldrb	r2, [r2, #16]
 8005cbc:	f107 0108 	add.w	r1, r7, #8
 8005cc0:	4610      	mov	r0, r2
 8005cc2:	4798      	blx	r3
 8005cc4:	60f8      	str	r0, [r7, #12]
      break;
 8005cc6:	e112      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	7c1b      	ldrb	r3, [r3, #16]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10d      	bne.n	8005cec <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cd8:	f107 0208 	add.w	r2, r7, #8
 8005cdc:	4610      	mov	r0, r2
 8005cde:	4798      	blx	r3
 8005ce0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005cea:	e100      	b.n	8005eee <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f107 0208 	add.w	r2, r7, #8
 8005cf8:	4610      	mov	r0, r2
 8005cfa:	4798      	blx	r3
 8005cfc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	3301      	adds	r3, #1
 8005d02:	2202      	movs	r2, #2
 8005d04:	701a      	strb	r2, [r3, #0]
      break;
 8005d06:	e0f2      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	885b      	ldrh	r3, [r3, #2]
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	f200 80ac 	bhi.w	8005e6c <USBD_GetDescriptor+0x204>
 8005d14:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <USBD_GetDescriptor+0xb4>)
 8005d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1a:	bf00      	nop
 8005d1c:	08005d35 	.word	0x08005d35
 8005d20:	08005d69 	.word	0x08005d69
 8005d24:	08005d9d 	.word	0x08005d9d
 8005d28:	08005dd1 	.word	0x08005dd1
 8005d2c:	08005e05 	.word	0x08005e05
 8005d30:	08005e39 	.word	0x08005e39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d00b      	beq.n	8005d58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	687a      	ldr	r2, [r7, #4]
 8005d4a:	7c12      	ldrb	r2, [r2, #16]
 8005d4c:	f107 0108 	add.w	r1, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d56:	e091      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d58:	6839      	ldr	r1, [r7, #0]
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fab2 	bl	80062c4 <USBD_CtlError>
            err++;
 8005d60:	7afb      	ldrb	r3, [r7, #11]
 8005d62:	3301      	adds	r3, #1
 8005d64:	72fb      	strb	r3, [r7, #11]
          break;
 8005d66:	e089      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d00b      	beq.n	8005d8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	7c12      	ldrb	r2, [r2, #16]
 8005d80:	f107 0108 	add.w	r1, r7, #8
 8005d84:	4610      	mov	r0, r2
 8005d86:	4798      	blx	r3
 8005d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005d8a:	e077      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005d8c:	6839      	ldr	r1, [r7, #0]
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 fa98 	bl	80062c4 <USBD_CtlError>
            err++;
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	3301      	adds	r3, #1
 8005d98:	72fb      	strb	r3, [r7, #11]
          break;
 8005d9a:	e06f      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	7c12      	ldrb	r2, [r2, #16]
 8005db4:	f107 0108 	add.w	r1, r7, #8
 8005db8:	4610      	mov	r0, r2
 8005dba:	4798      	blx	r3
 8005dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dbe:	e05d      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f000 fa7e 	bl	80062c4 <USBD_CtlError>
            err++;
 8005dc8:	7afb      	ldrb	r3, [r7, #11]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005dce:	e055      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d00b      	beq.n	8005df4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	691b      	ldr	r3, [r3, #16]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	7c12      	ldrb	r2, [r2, #16]
 8005de8:	f107 0108 	add.w	r1, r7, #8
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005df2:	e043      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005df4:	6839      	ldr	r1, [r7, #0]
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fa64 	bl	80062c4 <USBD_CtlError>
            err++;
 8005dfc:	7afb      	ldrb	r3, [r7, #11]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	72fb      	strb	r3, [r7, #11]
          break;
 8005e02:	e03b      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e0a:	695b      	ldr	r3, [r3, #20]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	695b      	ldr	r3, [r3, #20]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7c12      	ldrb	r2, [r2, #16]
 8005e1c:	f107 0108 	add.w	r1, r7, #8
 8005e20:	4610      	mov	r0, r2
 8005e22:	4798      	blx	r3
 8005e24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e26:	e029      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e28:	6839      	ldr	r1, [r7, #0]
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fa4a 	bl	80062c4 <USBD_CtlError>
            err++;
 8005e30:	7afb      	ldrb	r3, [r7, #11]
 8005e32:	3301      	adds	r3, #1
 8005e34:	72fb      	strb	r3, [r7, #11]
          break;
 8005e36:	e021      	b.n	8005e7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e3e:	699b      	ldr	r3, [r3, #24]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4a:	699b      	ldr	r3, [r3, #24]
 8005e4c:	687a      	ldr	r2, [r7, #4]
 8005e4e:	7c12      	ldrb	r2, [r2, #16]
 8005e50:	f107 0108 	add.w	r1, r7, #8
 8005e54:	4610      	mov	r0, r2
 8005e56:	4798      	blx	r3
 8005e58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e5a:	e00f      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005e5c:	6839      	ldr	r1, [r7, #0]
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa30 	bl	80062c4 <USBD_CtlError>
            err++;
 8005e64:	7afb      	ldrb	r3, [r7, #11]
 8005e66:	3301      	adds	r3, #1
 8005e68:	72fb      	strb	r3, [r7, #11]
          break;
 8005e6a:	e007      	b.n	8005e7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005e6c:	6839      	ldr	r1, [r7, #0]
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fa28 	bl	80062c4 <USBD_CtlError>
          err++;
 8005e74:	7afb      	ldrb	r3, [r7, #11]
 8005e76:	3301      	adds	r3, #1
 8005e78:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005e7a:	bf00      	nop
      }
      break;
 8005e7c:	e037      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	7c1b      	ldrb	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e8e:	f107 0208 	add.w	r2, r7, #8
 8005e92:	4610      	mov	r0, r2
 8005e94:	4798      	blx	r3
 8005e96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e98:	e029      	b.n	8005eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005e9a:	6839      	ldr	r1, [r7, #0]
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fa11 	bl	80062c4 <USBD_CtlError>
        err++;
 8005ea2:	7afb      	ldrb	r3, [r7, #11]
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	72fb      	strb	r3, [r7, #11]
      break;
 8005ea8:	e021      	b.n	8005eee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	7c1b      	ldrb	r3, [r3, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d10d      	bne.n	8005ece <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eba:	f107 0208 	add.w	r2, r7, #8
 8005ebe:	4610      	mov	r0, r2
 8005ec0:	4798      	blx	r3
 8005ec2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	2207      	movs	r2, #7
 8005eca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005ecc:	e00f      	b.n	8005eee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 f9f7 	bl	80062c4 <USBD_CtlError>
        err++;
 8005ed6:	7afb      	ldrb	r3, [r7, #11]
 8005ed8:	3301      	adds	r3, #1
 8005eda:	72fb      	strb	r3, [r7, #11]
      break;
 8005edc:	e007      	b.n	8005eee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8005ede:	6839      	ldr	r1, [r7, #0]
 8005ee0:	6878      	ldr	r0, [r7, #4]
 8005ee2:	f000 f9ef 	bl	80062c4 <USBD_CtlError>
      err++;
 8005ee6:	7afb      	ldrb	r3, [r7, #11]
 8005ee8:	3301      	adds	r3, #1
 8005eea:	72fb      	strb	r3, [r7, #11]
      break;
 8005eec:	bf00      	nop
  }

  if (err != 0U)
 8005eee:	7afb      	ldrb	r3, [r7, #11]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d11e      	bne.n	8005f32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	88db      	ldrh	r3, [r3, #6]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d016      	beq.n	8005f2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8005efc:	893b      	ldrh	r3, [r7, #8]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00e      	beq.n	8005f20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88da      	ldrh	r2, [r3, #6]
 8005f06:	893b      	ldrh	r3, [r7, #8]
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	bf28      	it	cs
 8005f0c:	4613      	movcs	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f12:	893b      	ldrh	r3, [r7, #8]
 8005f14:	461a      	mov	r2, r3
 8005f16:	68f9      	ldr	r1, [r7, #12]
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	f000 fa44 	bl	80063a6 <USBD_CtlSendData>
 8005f1e:	e009      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f20:	6839      	ldr	r1, [r7, #0]
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 f9ce 	bl	80062c4 <USBD_CtlError>
 8005f28:	e004      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 fa95 	bl	800645a <USBD_CtlSendStatus>
 8005f30:	e000      	b.n	8005f34 <USBD_GetDescriptor+0x2cc>
    return;
 8005f32:	bf00      	nop
  }
}
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b084      	sub	sp, #16
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	889b      	ldrh	r3, [r3, #4]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d131      	bne.n	8005fb2 <USBD_SetAddress+0x76>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	88db      	ldrh	r3, [r3, #6]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d12d      	bne.n	8005fb2 <USBD_SetAddress+0x76>
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	885b      	ldrh	r3, [r3, #2]
 8005f5a:	2b7f      	cmp	r3, #127	; 0x7f
 8005f5c:	d829      	bhi.n	8005fb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	885b      	ldrh	r3, [r3, #2]
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b03      	cmp	r3, #3
 8005f74:	d104      	bne.n	8005f80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005f76:	6839      	ldr	r1, [r7, #0]
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f9a3 	bl	80062c4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f7e:	e01d      	b.n	8005fbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7bfa      	ldrb	r2, [r7, #15]
 8005f84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005f88:	7bfb      	ldrb	r3, [r7, #15]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f003 fa8c 	bl	80094aa <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 fa61 	bl	800645a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005f98:	7bfb      	ldrb	r3, [r7, #15]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2202      	movs	r2, #2
 8005fa2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fa6:	e009      	b.n	8005fbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb0:	e004      	b.n	8005fbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 f985 	bl	80062c4 <USBD_CtlError>
  }
}
 8005fba:	bf00      	nop
 8005fbc:	bf00      	nop
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}

08005fc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	4b4c      	ldr	r3, [pc, #304]	; (800610c <USBD_SetConfig+0x148>)
 8005fda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005fdc:	4b4b      	ldr	r3, [pc, #300]	; (800610c <USBD_SetConfig+0x148>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d905      	bls.n	8005ff0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005fe4:	6839      	ldr	r1, [r7, #0]
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f96c 	bl	80062c4 <USBD_CtlError>
    return USBD_FAIL;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e088      	b.n	8006102 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	2b02      	cmp	r3, #2
 8005ffa:	d002      	beq.n	8006002 <USBD_SetConfig+0x3e>
 8005ffc:	2b03      	cmp	r3, #3
 8005ffe:	d025      	beq.n	800604c <USBD_SetConfig+0x88>
 8006000:	e071      	b.n	80060e6 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006002:	4b42      	ldr	r3, [pc, #264]	; (800610c <USBD_SetConfig+0x148>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d01c      	beq.n	8006044 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800600a:	4b40      	ldr	r3, [pc, #256]	; (800610c <USBD_SetConfig+0x148>)
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006014:	4b3d      	ldr	r3, [pc, #244]	; (800610c <USBD_SetConfig+0x148>)
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	4619      	mov	r1, r3
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7ff f948 	bl	80052b0 <USBD_SetClassConfig>
 8006020:	4603      	mov	r3, r0
 8006022:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006024:	7bfb      	ldrb	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d004      	beq.n	8006034 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 f949 	bl	80062c4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006032:	e065      	b.n	8006100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa10 	bl	800645a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2203      	movs	r2, #3
 800603e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006042:	e05d      	b.n	8006100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa08 	bl	800645a <USBD_CtlSendStatus>
      break;
 800604a:	e059      	b.n	8006100 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800604c:	4b2f      	ldr	r3, [pc, #188]	; (800610c <USBD_SetConfig+0x148>)
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d112      	bne.n	800607a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2202      	movs	r2, #2
 8006058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800605c:	4b2b      	ldr	r3, [pc, #172]	; (800610c <USBD_SetConfig+0x148>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006066:	4b29      	ldr	r3, [pc, #164]	; (800610c <USBD_SetConfig+0x148>)
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	4619      	mov	r1, r3
 800606c:	6878      	ldr	r0, [r7, #4]
 800606e:	f7ff f93b 	bl	80052e8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f000 f9f1 	bl	800645a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006078:	e042      	b.n	8006100 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800607a:	4b24      	ldr	r3, [pc, #144]	; (800610c <USBD_SetConfig+0x148>)
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	461a      	mov	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	429a      	cmp	r2, r3
 8006086:	d02a      	beq.n	80060de <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f7ff f929 	bl	80052e8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006096:	4b1d      	ldr	r3, [pc, #116]	; (800610c <USBD_SetConfig+0x148>)
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80060a0:	4b1a      	ldr	r3, [pc, #104]	; (800610c <USBD_SetConfig+0x148>)
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	4619      	mov	r1, r3
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff f902 	bl	80052b0 <USBD_SetClassConfig>
 80060ac:	4603      	mov	r3, r0
 80060ae:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00f      	beq.n	80060d6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f903 	bl	80062c4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	4619      	mov	r1, r3
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f7ff f90e 	bl	80052e8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2202      	movs	r2, #2
 80060d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060d4:	e014      	b.n	8006100 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9bf 	bl	800645a <USBD_CtlSendStatus>
      break;
 80060dc:	e010      	b.n	8006100 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9bb 	bl	800645a <USBD_CtlSendStatus>
      break;
 80060e4:	e00c      	b.n	8006100 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80060e6:	6839      	ldr	r1, [r7, #0]
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 f8eb 	bl	80062c4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060ee:	4b07      	ldr	r3, [pc, #28]	; (800610c <USBD_SetConfig+0x148>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f7ff f8f7 	bl	80052e8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80060fa:	2303      	movs	r3, #3
 80060fc:	73fb      	strb	r3, [r7, #15]
      break;
 80060fe:	bf00      	nop
  }

  return ret;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20006a39 	.word	0x20006a39

08006110 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	88db      	ldrh	r3, [r3, #6]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d004      	beq.n	800612c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006122:	6839      	ldr	r1, [r7, #0]
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f8cd 	bl	80062c4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800612a:	e023      	b.n	8006174 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b02      	cmp	r3, #2
 8006136:	dc02      	bgt.n	800613e <USBD_GetConfig+0x2e>
 8006138:	2b00      	cmp	r3, #0
 800613a:	dc03      	bgt.n	8006144 <USBD_GetConfig+0x34>
 800613c:	e015      	b.n	800616a <USBD_GetConfig+0x5a>
 800613e:	2b03      	cmp	r3, #3
 8006140:	d00b      	beq.n	800615a <USBD_GetConfig+0x4a>
 8006142:	e012      	b.n	800616a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	3308      	adds	r3, #8
 800614e:	2201      	movs	r2, #1
 8006150:	4619      	mov	r1, r3
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f927 	bl	80063a6 <USBD_CtlSendData>
        break;
 8006158:	e00c      	b.n	8006174 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	3304      	adds	r3, #4
 800615e:	2201      	movs	r2, #1
 8006160:	4619      	mov	r1, r3
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f91f 	bl	80063a6 <USBD_CtlSendData>
        break;
 8006168:	e004      	b.n	8006174 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800616a:	6839      	ldr	r1, [r7, #0]
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f8a9 	bl	80062c4 <USBD_CtlError>
        break;
 8006172:	bf00      	nop
}
 8006174:	bf00      	nop
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b082      	sub	sp, #8
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618c:	b2db      	uxtb	r3, r3
 800618e:	3b01      	subs	r3, #1
 8006190:	2b02      	cmp	r3, #2
 8006192:	d81e      	bhi.n	80061d2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	88db      	ldrh	r3, [r3, #6]
 8006198:	2b02      	cmp	r3, #2
 800619a:	d004      	beq.n	80061a6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800619c:	6839      	ldr	r1, [r7, #0]
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 f890 	bl	80062c4 <USBD_CtlError>
        break;
 80061a4:	e01a      	b.n	80061dc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f043 0202 	orr.w	r2, r3, #2
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	330c      	adds	r3, #12
 80061c6:	2202      	movs	r2, #2
 80061c8:	4619      	mov	r1, r3
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f8eb 	bl	80063a6 <USBD_CtlSendData>
      break;
 80061d0:	e004      	b.n	80061dc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 f875 	bl	80062c4 <USBD_CtlError>
      break;
 80061da:	bf00      	nop
  }
}
 80061dc:	bf00      	nop
 80061de:	3708      	adds	r7, #8
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bd80      	pop	{r7, pc}

080061e4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	885b      	ldrh	r3, [r3, #2]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d106      	bne.n	8006204 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f92b 	bl	800645a <USBD_CtlSendStatus>
  }
}
 8006204:	bf00      	nop
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}

0800620c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
 8006214:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800621c:	b2db      	uxtb	r3, r3
 800621e:	3b01      	subs	r3, #1
 8006220:	2b02      	cmp	r3, #2
 8006222:	d80b      	bhi.n	800623c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	885b      	ldrh	r3, [r3, #2]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10c      	bne.n	8006246 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006234:	6878      	ldr	r0, [r7, #4]
 8006236:	f000 f910 	bl	800645a <USBD_CtlSendStatus>
      }
      break;
 800623a:	e004      	b.n	8006246 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800623c:	6839      	ldr	r1, [r7, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f840 	bl	80062c4 <USBD_CtlError>
      break;
 8006244:	e000      	b.n	8006248 <USBD_ClrFeature+0x3c>
      break;
 8006246:	bf00      	nop
  }
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	3301      	adds	r3, #1
 800626a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	781a      	ldrb	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	3301      	adds	r3, #1
 8006278:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f7ff fabb 	bl	80057f6 <SWAPBYTE>
 8006280:	4603      	mov	r3, r0
 8006282:	461a      	mov	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	3301      	adds	r3, #1
 800628c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	3301      	adds	r3, #1
 8006292:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7ff faae 	bl	80057f6 <SWAPBYTE>
 800629a:	4603      	mov	r3, r0
 800629c:	461a      	mov	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	3301      	adds	r3, #1
 80062a6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	3301      	adds	r3, #1
 80062ac:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80062ae:	68f8      	ldr	r0, [r7, #12]
 80062b0:	f7ff faa1 	bl	80057f6 <SWAPBYTE>
 80062b4:	4603      	mov	r3, r0
 80062b6:	461a      	mov	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	80da      	strh	r2, [r3, #6]
}
 80062bc:	bf00      	nop
 80062be:	3710      	adds	r7, #16
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80062ce:	2180      	movs	r1, #128	; 0x80
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f003 f880 	bl	80093d6 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80062d6:	2100      	movs	r1, #0
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f003 f87c 	bl	80093d6 <USBD_LL_StallEP>
}
 80062de:	bf00      	nop
 80062e0:	3708      	adds	r7, #8
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}

080062e6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80062e6:	b580      	push	{r7, lr}
 80062e8:	b086      	sub	sp, #24
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	60f8      	str	r0, [r7, #12]
 80062ee:	60b9      	str	r1, [r7, #8]
 80062f0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80062f2:	2300      	movs	r3, #0
 80062f4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d036      	beq.n	800636a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006300:	6938      	ldr	r0, [r7, #16]
 8006302:	f000 f836 	bl	8006372 <USBD_GetLen>
 8006306:	4603      	mov	r3, r0
 8006308:	3301      	adds	r3, #1
 800630a:	b29b      	uxth	r3, r3
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
 8006316:	68ba      	ldr	r2, [r7, #8]
 8006318:	4413      	add	r3, r2
 800631a:	687a      	ldr	r2, [r7, #4]
 800631c:	7812      	ldrb	r2, [r2, #0]
 800631e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006320:	7dfb      	ldrb	r3, [r7, #23]
 8006322:	3301      	adds	r3, #1
 8006324:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006326:	7dfb      	ldrb	r3, [r7, #23]
 8006328:	68ba      	ldr	r2, [r7, #8]
 800632a:	4413      	add	r3, r2
 800632c:	2203      	movs	r2, #3
 800632e:	701a      	strb	r2, [r3, #0]
  idx++;
 8006330:	7dfb      	ldrb	r3, [r7, #23]
 8006332:	3301      	adds	r3, #1
 8006334:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006336:	e013      	b.n	8006360 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006338:	7dfb      	ldrb	r3, [r7, #23]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	4413      	add	r3, r2
 800633e:	693a      	ldr	r2, [r7, #16]
 8006340:	7812      	ldrb	r2, [r2, #0]
 8006342:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	3301      	adds	r3, #1
 8006348:	613b      	str	r3, [r7, #16]
    idx++;
 800634a:	7dfb      	ldrb	r3, [r7, #23]
 800634c:	3301      	adds	r3, #1
 800634e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006350:	7dfb      	ldrb	r3, [r7, #23]
 8006352:	68ba      	ldr	r2, [r7, #8]
 8006354:	4413      	add	r3, r2
 8006356:	2200      	movs	r2, #0
 8006358:	701a      	strb	r2, [r3, #0]
    idx++;
 800635a:	7dfb      	ldrb	r3, [r7, #23]
 800635c:	3301      	adds	r3, #1
 800635e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1e7      	bne.n	8006338 <USBD_GetString+0x52>
 8006368:	e000      	b.n	800636c <USBD_GetString+0x86>
    return;
 800636a:	bf00      	nop
  }
}
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006372:	b480      	push	{r7}
 8006374:	b085      	sub	sp, #20
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006382:	e005      	b.n	8006390 <USBD_GetLen+0x1e>
  {
    len++;
 8006384:	7bfb      	ldrb	r3, [r7, #15]
 8006386:	3301      	adds	r3, #1
 8006388:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800638a:	68bb      	ldr	r3, [r7, #8]
 800638c:	3301      	adds	r3, #1
 800638e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1f5      	bne.n	8006384 <USBD_GetLen+0x12>
  }

  return len;
 8006398:	7bfb      	ldrb	r3, [r7, #15]
}
 800639a:	4618      	mov	r0, r3
 800639c:	3714      	adds	r7, #20
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr

080063a6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68ba      	ldr	r2, [r7, #8]
 80063ca:	2100      	movs	r1, #0
 80063cc:	68f8      	ldr	r0, [r7, #12]
 80063ce:	f003 f88b 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 80063d2:	2300      	movs	r3, #0
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3710      	adds	r7, #16
 80063d8:	46bd      	mov	sp, r7
 80063da:	bd80      	pop	{r7, pc}

080063dc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b084      	sub	sp, #16
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68ba      	ldr	r2, [r7, #8]
 80063ec:	2100      	movs	r1, #0
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	f003 f87a 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	60f8      	str	r0, [r7, #12]
 8006406:	60b9      	str	r1, [r7, #8]
 8006408:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2203      	movs	r2, #3
 800640e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	2100      	movs	r1, #0
 8006428:	68f8      	ldr	r0, [r7, #12]
 800642a:	f003 f87e 	bl	800952a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	2100      	movs	r1, #0
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f003 f86d 	bl	800952a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b082      	sub	sp, #8
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2204      	movs	r2, #4
 8006466:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800646a:	2300      	movs	r3, #0
 800646c:	2200      	movs	r2, #0
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f003 f839 	bl	80094e8 <USBD_LL_Transmit>

  return USBD_OK;
 8006476:	2300      	movs	r3, #0
}
 8006478:	4618      	mov	r0, r3
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2205      	movs	r2, #5
 800648c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006490:	2300      	movs	r3, #0
 8006492:	2200      	movs	r2, #0
 8006494:	2100      	movs	r1, #0
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f003 f847 	bl	800952a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3708      	adds	r7, #8
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}

080064a6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064a6:	b580      	push	{r7, lr}
 80064a8:	b084      	sub	sp, #16
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	6078      	str	r0, [r7, #4]
 80064ae:	460b      	mov	r3, r1
 80064b0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80064b2:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80064b6:	f003 f86d 	bl	8009594 <USBD_static_malloc>
 80064ba:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d105      	bne.n	80064ce <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80064ca:	2302      	movs	r3, #2
 80064cc:	e066      	b.n	800659c <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	68fa      	ldr	r2, [r7, #12]
 80064d2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	7c1b      	ldrb	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d119      	bne.n	8006512 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80064de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064e2:	2202      	movs	r2, #2
 80064e4:	2181      	movs	r1, #129	; 0x81
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f002 ff11 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80064f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064f6:	2202      	movs	r2, #2
 80064f8:	2101      	movs	r1, #1
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f002 ff07 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2201      	movs	r2, #1
 8006504:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2210      	movs	r2, #16
 800650c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006510:	e016      	b.n	8006540 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006512:	2340      	movs	r3, #64	; 0x40
 8006514:	2202      	movs	r2, #2
 8006516:	2181      	movs	r1, #129	; 0x81
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f002 fef8 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006524:	2340      	movs	r3, #64	; 0x40
 8006526:	2202      	movs	r2, #2
 8006528:	2101      	movs	r1, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f002 feef 	bl	800930e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	2210      	movs	r2, #16
 800653c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006540:	2308      	movs	r3, #8
 8006542:	2203      	movs	r2, #3
 8006544:	2182      	movs	r1, #130	; 0x82
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f002 fee1 	bl	800930e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2200      	movs	r2, #0
 800656a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	7c1b      	ldrb	r3, [r3, #16]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d109      	bne.n	800658a <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800657c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006580:	2101      	movs	r1, #1
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f002 ffd1 	bl	800952a <USBD_LL_PrepareReceive>
 8006588:	e007      	b.n	800659a <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006590:	2340      	movs	r3, #64	; 0x40
 8006592:	2101      	movs	r1, #1
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f002 ffc8 	bl	800952a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3710      	adds	r7, #16
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}

080065a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b082      	sub	sp, #8
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80065b0:	2181      	movs	r1, #129	; 0x81
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f002 fed1 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80065be:	2101      	movs	r1, #1
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f002 feca 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80065ce:	2182      	movs	r1, #130	; 0x82
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f002 fec2 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00e      	beq.n	800660e <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006600:	4618      	mov	r0, r3
 8006602:	f002 ffd5 	bl	80095b0 <USBD_static_free>
    pdev->pClassData = NULL;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006628:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800662a:	2300      	movs	r3, #0
 800662c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800663c:	2303      	movs	r3, #3
 800663e:	e0af      	b.n	80067a0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006648:	2b00      	cmp	r3, #0
 800664a:	d03f      	beq.n	80066cc <USBD_CDC_Setup+0xb4>
 800664c:	2b20      	cmp	r3, #32
 800664e:	f040 809f 	bne.w	8006790 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	88db      	ldrh	r3, [r3, #6]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d02e      	beq.n	80066b8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b25b      	sxtb	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	da16      	bge.n	8006692 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8006670:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	88d2      	ldrh	r2, [r2, #6]
 8006676:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	88db      	ldrh	r3, [r3, #6]
 800667c:	2b07      	cmp	r3, #7
 800667e:	bf28      	it	cs
 8006680:	2307      	movcs	r3, #7
 8006682:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	89fa      	ldrh	r2, [r7, #14]
 8006688:	4619      	mov	r1, r3
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7ff fe8b 	bl	80063a6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8006690:	e085      	b.n	800679e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	785a      	ldrb	r2, [r3, #1]
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	88db      	ldrh	r3, [r3, #6]
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80066a8:	6939      	ldr	r1, [r7, #16]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	88db      	ldrh	r3, [r3, #6]
 80066ae:	461a      	mov	r2, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f7ff fea4 	bl	80063fe <USBD_CtlPrepareRx>
      break;
 80066b6:	e072      	b.n	800679e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	683a      	ldr	r2, [r7, #0]
 80066c2:	7850      	ldrb	r0, [r2, #1]
 80066c4:	2200      	movs	r2, #0
 80066c6:	6839      	ldr	r1, [r7, #0]
 80066c8:	4798      	blx	r3
      break;
 80066ca:	e068      	b.n	800679e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	785b      	ldrb	r3, [r3, #1]
 80066d0:	2b0b      	cmp	r3, #11
 80066d2:	d852      	bhi.n	800677a <USBD_CDC_Setup+0x162>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <USBD_CDC_Setup+0xc4>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	0800670d 	.word	0x0800670d
 80066e0:	08006789 	.word	0x08006789
 80066e4:	0800677b 	.word	0x0800677b
 80066e8:	0800677b 	.word	0x0800677b
 80066ec:	0800677b 	.word	0x0800677b
 80066f0:	0800677b 	.word	0x0800677b
 80066f4:	0800677b 	.word	0x0800677b
 80066f8:	0800677b 	.word	0x0800677b
 80066fc:	0800677b 	.word	0x0800677b
 8006700:	0800677b 	.word	0x0800677b
 8006704:	08006737 	.word	0x08006737
 8006708:	08006761 	.word	0x08006761
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006712:	b2db      	uxtb	r3, r3
 8006714:	2b03      	cmp	r3, #3
 8006716:	d107      	bne.n	8006728 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006718:	f107 030a 	add.w	r3, r7, #10
 800671c:	2202      	movs	r2, #2
 800671e:	4619      	mov	r1, r3
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7ff fe40 	bl	80063a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006726:	e032      	b.n	800678e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006728:	6839      	ldr	r1, [r7, #0]
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7ff fdca 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006730:	2303      	movs	r3, #3
 8006732:	75fb      	strb	r3, [r7, #23]
          break;
 8006734:	e02b      	b.n	800678e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800673c:	b2db      	uxtb	r3, r3
 800673e:	2b03      	cmp	r3, #3
 8006740:	d107      	bne.n	8006752 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006742:	f107 030d 	add.w	r3, r7, #13
 8006746:	2201      	movs	r2, #1
 8006748:	4619      	mov	r1, r3
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7ff fe2b 	bl	80063a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006750:	e01d      	b.n	800678e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8006752:	6839      	ldr	r1, [r7, #0]
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f7ff fdb5 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 800675a:	2303      	movs	r3, #3
 800675c:	75fb      	strb	r3, [r7, #23]
          break;
 800675e:	e016      	b.n	800678e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006766:	b2db      	uxtb	r3, r3
 8006768:	2b03      	cmp	r3, #3
 800676a:	d00f      	beq.n	800678c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fda8 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8006774:	2303      	movs	r3, #3
 8006776:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006778:	e008      	b.n	800678c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800677a:	6839      	ldr	r1, [r7, #0]
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff fda1 	bl	80062c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8006782:	2303      	movs	r3, #3
 8006784:	75fb      	strb	r3, [r7, #23]
          break;
 8006786:	e002      	b.n	800678e <USBD_CDC_Setup+0x176>
          break;
 8006788:	bf00      	nop
 800678a:	e008      	b.n	800679e <USBD_CDC_Setup+0x186>
          break;
 800678c:	bf00      	nop
      }
      break;
 800678e:	e006      	b.n	800679e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fd96 	bl	80062c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8006798:	2303      	movs	r3, #3
 800679a:	75fb      	strb	r3, [r7, #23]
      break;
 800679c:	bf00      	nop
  }

  return (uint8_t)ret;
 800679e:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3718      	adds	r7, #24
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80067ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d101      	bne.n	80067ca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e04f      	b.n	800686a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80067d2:	78fa      	ldrb	r2, [r7, #3]
 80067d4:	6879      	ldr	r1, [r7, #4]
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	440b      	add	r3, r1
 80067e0:	3318      	adds	r3, #24
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d029      	beq.n	800683c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80067e8:	78fa      	ldrb	r2, [r7, #3]
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	4613      	mov	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	440b      	add	r3, r1
 80067f6:	3318      	adds	r3, #24
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	78f9      	ldrb	r1, [r7, #3]
 80067fc:	68f8      	ldr	r0, [r7, #12]
 80067fe:	460b      	mov	r3, r1
 8006800:	00db      	lsls	r3, r3, #3
 8006802:	1a5b      	subs	r3, r3, r1
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4403      	add	r3, r0
 8006808:	3344      	adds	r3, #68	; 0x44
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006810:	fb03 f301 	mul.w	r3, r3, r1
 8006814:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006816:	2b00      	cmp	r3, #0
 8006818:	d110      	bne.n	800683c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800681a:	78fa      	ldrb	r2, [r7, #3]
 800681c:	6879      	ldr	r1, [r7, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	009b      	lsls	r3, r3, #2
 8006822:	4413      	add	r3, r2
 8006824:	009b      	lsls	r3, r3, #2
 8006826:	440b      	add	r3, r1
 8006828:	3318      	adds	r3, #24
 800682a:	2200      	movs	r2, #0
 800682c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800682e:	78f9      	ldrb	r1, [r7, #3]
 8006830:	2300      	movs	r3, #0
 8006832:	2200      	movs	r2, #0
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f002 fe57 	bl	80094e8 <USBD_LL_Transmit>
 800683a:	e015      	b.n	8006868 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00b      	beq.n	8006868 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	68ba      	ldr	r2, [r7, #8]
 800685a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006864:	78fa      	ldrb	r2, [r7, #3]
 8006866:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3710      	adds	r7, #16
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b084      	sub	sp, #16
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	460b      	mov	r3, r1
 800687c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006884:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006890:	2303      	movs	r3, #3
 8006892:	e015      	b.n	80068c0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	4619      	mov	r1, r3
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f002 fe67 	bl	800956c <USBD_LL_GetRxDataSize>
 800689e:	4602      	mov	r2, r0
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068ac:	68db      	ldr	r3, [r3, #12]
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068ba:	4611      	mov	r1, r2
 80068bc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80068be:	2300      	movs	r3, #0
}
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068d6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 80068de:	2303      	movs	r3, #3
 80068e0:	e01b      	b.n	800691a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d015      	beq.n	8006918 <USBD_CDC_EP0_RxReady+0x50>
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d010      	beq.n	8006918 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8006904:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800690c:	b292      	uxth	r2, r2
 800690e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	22ff      	movs	r2, #255	; 0xff
 8006914:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3710      	adds	r7, #16
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
	...

08006924 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2243      	movs	r2, #67	; 0x43
 8006930:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8006932:	4b03      	ldr	r3, [pc, #12]	; (8006940 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006934:	4618      	mov	r0, r3
 8006936:	370c      	adds	r7, #12
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20000118 	.word	0x20000118

08006944 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2243      	movs	r2, #67	; 0x43
 8006950:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8006952:	4b03      	ldr	r3, [pc, #12]	; (8006960 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006954:	4618      	mov	r0, r3
 8006956:	370c      	adds	r7, #12
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	200000d4 	.word	0x200000d4

08006964 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2243      	movs	r2, #67	; 0x43
 8006970:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8006972:	4b03      	ldr	r3, [pc, #12]	; (8006980 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr
 8006980:	2000015c 	.word	0x2000015c

08006984 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	220a      	movs	r2, #10
 8006990:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006992:	4b03      	ldr	r3, [pc, #12]	; (80069a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr
 80069a0:	20000090 	.word	0x20000090

080069a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d101      	bne.n	80069b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e004      	b.n	80069c2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	370c      	adds	r7, #12
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b087      	sub	sp, #28
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	60f8      	str	r0, [r7, #12]
 80069d6:	60b9      	str	r1, [r7, #8]
 80069d8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069e0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d101      	bne.n	80069ec <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e008      	b.n	80069fe <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80069f4:	697b      	ldr	r3, [r7, #20]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	371c      	adds	r7, #28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr

08006a0a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b085      	sub	sp, #20
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	6078      	str	r0, [r7, #4]
 8006a12:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a1a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d101      	bne.n	8006a26 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	e004      	b.n	8006a30 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a4a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d101      	bne.n	8006a5e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	e01a      	b.n	8006a94 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d114      	bne.n	8006a92 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006a86:	2181      	movs	r1, #129	; 0x81
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f002 fd2d 	bl	80094e8 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3710      	adds	r7, #16
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd80      	pop	{r7, pc}

08006a9c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006aaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	e016      	b.n	8006ae8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	7c1b      	ldrb	r3, [r3, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006ac8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006acc:	2101      	movs	r1, #1
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f002 fd2b 	bl	800952a <USBD_LL_PrepareReceive>
 8006ad4:	e007      	b.n	8006ae6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006adc:	2340      	movs	r3, #64	; 0x40
 8006ade:	2101      	movs	r1, #1
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f002 fd22 	bl	800952a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <cdcAvailable>:
uint8_t  rx_buf[512];
bool     rx_full = false;


uint32_t cdcAvailable(void)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
  uint32_t ret;

  ret = (rx_in - rx_out) % rx_len;
 8006af6:	4b0a      	ldr	r3, [pc, #40]	; (8006b20 <cdcAvailable+0x30>)
 8006af8:	681a      	ldr	r2, [r3, #0]
 8006afa:	4b0a      	ldr	r3, [pc, #40]	; (8006b24 <cdcAvailable+0x34>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	4a09      	ldr	r2, [pc, #36]	; (8006b28 <cdcAvailable+0x38>)
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b08:	fb02 f201 	mul.w	r2, r2, r1
 8006b0c:	1a9b      	subs	r3, r3, r2
 8006b0e:	607b      	str	r3, [r7, #4]

  return ret;
 8006b10:	687b      	ldr	r3, [r7, #4]
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	370c      	adds	r7, #12
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	20006a3c 	.word	0x20006a3c
 8006b24:	20006a40 	.word	0x20006a40
 8006b28:	200001a8 	.word	0x200001a8

08006b2c <cdcDataIn>:

  return ret;
}

void cdcDataIn(uint8_t rx_data)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	71fb      	strb	r3, [r7, #7]
  uint32_t next_rx_in;

  rx_buf[rx_in] = rx_data;
 8006b36:	4b0f      	ldr	r3, [pc, #60]	; (8006b74 <cdcDataIn+0x48>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	490f      	ldr	r1, [pc, #60]	; (8006b78 <cdcDataIn+0x4c>)
 8006b3c:	79fa      	ldrb	r2, [r7, #7]
 8006b3e:	54ca      	strb	r2, [r1, r3]

  next_rx_in = (rx_in + 1) % rx_len;
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <cdcDataIn+0x48>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3301      	adds	r3, #1
 8006b46:	4a0d      	ldr	r2, [pc, #52]	; (8006b7c <cdcDataIn+0x50>)
 8006b48:	6812      	ldr	r2, [r2, #0]
 8006b4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b4e:	fb02 f201 	mul.w	r2, r2, r1
 8006b52:	1a9b      	subs	r3, r3, r2
 8006b54:	60fb      	str	r3, [r7, #12]

  if (next_rx_in != rx_out)
 8006b56:	4b0a      	ldr	r3, [pc, #40]	; (8006b80 <cdcDataIn+0x54>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	68fa      	ldr	r2, [r7, #12]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d002      	beq.n	8006b66 <cdcDataIn+0x3a>
  {
    rx_in = next_rx_in;
 8006b60:	4a04      	ldr	r2, [pc, #16]	; (8006b74 <cdcDataIn+0x48>)
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6013      	str	r3, [r2, #0]
  }
}
 8006b66:	bf00      	nop
 8006b68:	3714      	adds	r7, #20
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20006a3c 	.word	0x20006a3c
 8006b78:	20008100 	.word	0x20008100
 8006b7c:	200001a8 	.word	0x200001a8
 8006b80:	20006a40 	.word	0x20006a40

08006b84 <cdcWrite>:

uint32_t cdcWrite(uint8_t *p_data, uint32_t length)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
  if(cdcIsInit() != true)
  {
	  return 0;
  }
 */
  pre_time = millis();
 8006b8e:	f7fa fa80 	bl	8001092 <millis>
 8006b92:	60f8      	str	r0, [r7, #12]
  while(1)
  {
    ret = CDC_Transmit_FS(p_data, length);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	4619      	mov	r1, r3
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f928 	bl	8006df0 <CDC_Transmit_FS>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	72fb      	strb	r3, [r7, #11]

    if (ret == USBD_OK)
 8006ba4:	7afb      	ldrb	r3, [r7, #11]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d101      	bne.n	8006bae <cdcWrite+0x2a>
    {
      return length;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	e00e      	b.n	8006bcc <cdcWrite+0x48>
    }
    else if (ret == USBD_FAIL)
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	2b03      	cmp	r3, #3
 8006bb2:	d101      	bne.n	8006bb8 <cdcWrite+0x34>
    {
      return 0;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	e009      	b.n	8006bcc <cdcWrite+0x48>
    }

    if (millis()-pre_time >= 100)
 8006bb8:	f7fa fa6b 	bl	8001092 <millis>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	2b63      	cmp	r3, #99	; 0x63
 8006bc4:	d800      	bhi.n	8006bc8 <cdcWrite+0x44>
    ret = CDC_Transmit_FS(p_data, length);
 8006bc6:	e7e5      	b.n	8006b94 <cdcWrite+0x10>
    {
      break;
 8006bc8:	bf00      	nop
    }
  }

  return 0;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3710      	adds	r7, #16
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006bd8:	2200      	movs	r2, #0
 8006bda:	4905      	ldr	r1, [pc, #20]	; (8006bf0 <CDC_Init_FS+0x1c>)
 8006bdc:	4805      	ldr	r0, [pc, #20]	; (8006bf4 <CDC_Init_FS+0x20>)
 8006bde:	f7ff fef6 	bl	80069ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006be2:	4905      	ldr	r1, [pc, #20]	; (8006bf8 <CDC_Init_FS+0x24>)
 8006be4:	4803      	ldr	r0, [pc, #12]	; (8006bf4 <CDC_Init_FS+0x20>)
 8006be6:	f7ff ff10 	bl	8006a0a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006bea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	bd80      	pop	{r7, pc}
 8006bf0:	20007d00 	.word	0x20007d00
 8006bf4:	20007630 	.word	0x20007630
 8006bf8:	20007900 	.word	0x20007900

08006bfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006c00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	4603      	mov	r3, r0
 8006c14:	6039      	str	r1, [r7, #0]
 8006c16:	71fb      	strb	r3, [r7, #7]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	2b23      	cmp	r3, #35	; 0x23
 8006c20:	f200 80a3 	bhi.w	8006d6a <CDC_Control_FS+0x15e>
 8006c24:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <CDC_Control_FS+0x20>)
 8006c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2a:	bf00      	nop
 8006c2c:	08006d6b 	.word	0x08006d6b
 8006c30:	08006d6b 	.word	0x08006d6b
 8006c34:	08006d6b 	.word	0x08006d6b
 8006c38:	08006d6b 	.word	0x08006d6b
 8006c3c:	08006d6b 	.word	0x08006d6b
 8006c40:	08006d6b 	.word	0x08006d6b
 8006c44:	08006d6b 	.word	0x08006d6b
 8006c48:	08006d6b 	.word	0x08006d6b
 8006c4c:	08006d6b 	.word	0x08006d6b
 8006c50:	08006d6b 	.word	0x08006d6b
 8006c54:	08006d6b 	.word	0x08006d6b
 8006c58:	08006d6b 	.word	0x08006d6b
 8006c5c:	08006d6b 	.word	0x08006d6b
 8006c60:	08006d6b 	.word	0x08006d6b
 8006c64:	08006d6b 	.word	0x08006d6b
 8006c68:	08006d6b 	.word	0x08006d6b
 8006c6c:	08006d6b 	.word	0x08006d6b
 8006c70:	08006d6b 	.word	0x08006d6b
 8006c74:	08006d6b 	.word	0x08006d6b
 8006c78:	08006d6b 	.word	0x08006d6b
 8006c7c:	08006d6b 	.word	0x08006d6b
 8006c80:	08006d6b 	.word	0x08006d6b
 8006c84:	08006d6b 	.word	0x08006d6b
 8006c88:	08006d6b 	.word	0x08006d6b
 8006c8c:	08006d6b 	.word	0x08006d6b
 8006c90:	08006d6b 	.word	0x08006d6b
 8006c94:	08006d6b 	.word	0x08006d6b
 8006c98:	08006d6b 	.word	0x08006d6b
 8006c9c:	08006d6b 	.word	0x08006d6b
 8006ca0:	08006d6b 	.word	0x08006d6b
 8006ca4:	08006d6b 	.word	0x08006d6b
 8006ca8:	08006d6b 	.word	0x08006d6b
 8006cac:	08006cbd 	.word	0x08006cbd
 8006cb0:	08006d17 	.word	0x08006d17
 8006cb4:	08006d6b 	.word	0x08006d6b
 8006cb8:	08006d6b 	.word	0x08006d6b
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
      LineCoding.bitrate   = (uint32_t)(pbuf[0]);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b2e      	ldr	r3, [pc, #184]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cc4:	601a      	str	r2, [r3, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[1]<<8);
 8006cc6:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	683a      	ldr	r2, [r7, #0]
 8006ccc:	3201      	adds	r2, #1
 8006cce:	7812      	ldrb	r2, [r2, #0]
 8006cd0:	0212      	lsls	r2, r2, #8
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	4a29      	ldr	r2, [pc, #164]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cd6:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[2]<<16);
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	3202      	adds	r2, #2
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	0412      	lsls	r2, r2, #16
 8006ce4:	4313      	orrs	r3, r2
 8006ce6:	4a25      	ldr	r2, [pc, #148]	; (8006d7c <CDC_Control_FS+0x170>)
 8006ce8:	6013      	str	r3, [r2, #0]
      LineCoding.bitrate  |= (uint32_t)(pbuf[3]<<24);
 8006cea:	4b24      	ldr	r3, [pc, #144]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	683a      	ldr	r2, [r7, #0]
 8006cf0:	3203      	adds	r2, #3
 8006cf2:	7812      	ldrb	r2, [r2, #0]
 8006cf4:	0612      	lsls	r2, r2, #24
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	4a20      	ldr	r2, [pc, #128]	; (8006d7c <CDC_Control_FS+0x170>)
 8006cfa:	6013      	str	r3, [r2, #0]
      LineCoding.format    = pbuf[4];
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	791a      	ldrb	r2, [r3, #4]
 8006d00:	4b1e      	ldr	r3, [pc, #120]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d02:	711a      	strb	r2, [r3, #4]
      LineCoding.paritytype= pbuf[5];
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	795a      	ldrb	r2, [r3, #5]
 8006d08:	4b1c      	ldr	r3, [pc, #112]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d0a:	715a      	strb	r2, [r3, #5]
      LineCoding.datatype  = pbuf[6];
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	799a      	ldrb	r2, [r3, #6]
 8006d10:	4b1a      	ldr	r3, [pc, #104]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d12:	719a      	strb	r2, [r3, #6]
    break;
 8006d14:	e02a      	b.n	8006d6c <CDC_Control_FS+0x160>

    case CDC_GET_LINE_CODING:
      pbuf[0] = (uint8_t)(LineCoding.bitrate);
 8006d16:	4b19      	ldr	r3, [pc, #100]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	b2da      	uxtb	r2, r3
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	701a      	strb	r2, [r3, #0]
      pbuf[1] = (uint8_t)(LineCoding.bitrate>>8);
 8006d20:	4b16      	ldr	r3, [pc, #88]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	0a1a      	lsrs	r2, r3, #8
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	3301      	adds	r3, #1
 8006d2a:	b2d2      	uxtb	r2, r2
 8006d2c:	701a      	strb	r2, [r3, #0]
      pbuf[2] = (uint8_t)(LineCoding.bitrate>>16);
 8006d2e:	4b13      	ldr	r3, [pc, #76]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	0c1a      	lsrs	r2, r3, #16
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	3302      	adds	r3, #2
 8006d38:	b2d2      	uxtb	r2, r2
 8006d3a:	701a      	strb	r2, [r3, #0]
      pbuf[3] = (uint8_t)(LineCoding.bitrate>>24);
 8006d3c:	4b0f      	ldr	r3, [pc, #60]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	0e1a      	lsrs	r2, r3, #24
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	3303      	adds	r3, #3
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]
      pbuf[4] = LineCoding.format;
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	3304      	adds	r3, #4
 8006d4e:	4a0b      	ldr	r2, [pc, #44]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d50:	7912      	ldrb	r2, [r2, #4]
 8006d52:	701a      	strb	r2, [r3, #0]
      pbuf[5] = LineCoding.paritytype;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	3305      	adds	r3, #5
 8006d58:	4a08      	ldr	r2, [pc, #32]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d5a:	7952      	ldrb	r2, [r2, #5]
 8006d5c:	701a      	strb	r2, [r3, #0]
      pbuf[6] = LineCoding.datatype;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	3306      	adds	r3, #6
 8006d62:	4a06      	ldr	r2, [pc, #24]	; (8006d7c <CDC_Control_FS+0x170>)
 8006d64:	7992      	ldrb	r2, [r2, #6]
 8006d66:	701a      	strb	r2, [r3, #0]
    break;
 8006d68:	e000      	b.n	8006d6c <CDC_Control_FS+0x160>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006d6a:	bf00      	nop
  }

  return (USBD_OK);
 8006d6c:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	370c      	adds	r7, #12
 8006d72:	46bd      	mov	sp, r7
 8006d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	200001a0 	.word	0x200001a0

08006d80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */


	for (int i=0; i<*Len; i++)
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
 8006d8e:	e009      	b.n	8006da4 <CDC_Receive_FS+0x24>
  {
    cdcDataIn(Buf[i]);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	4413      	add	r3, r2
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f7ff fec7 	bl	8006b2c <cdcDataIn>
	for (int i=0; i<*Len; i++)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	3301      	adds	r3, #1
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d8f0      	bhi.n	8006d90 <CDC_Receive_FS+0x10>
  }

  uint32_t buf_len;

  // ?��?�� 버퍼?��?�� 비어?��?�� ?��?��?�� ?��
  buf_len = (rx_len - cdcAvailable()) - 1;
 8006dae:	4b0d      	ldr	r3, [pc, #52]	; (8006de4 <CDC_Receive_FS+0x64>)
 8006db0:	681c      	ldr	r4, [r3, #0]
 8006db2:	f7ff fe9d 	bl	8006af0 <cdcAvailable>
 8006db6:	4603      	mov	r3, r0
 8006db8:	1ae3      	subs	r3, r4, r3
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	60bb      	str	r3, [r7, #8]

  if (buf_len >= USB_FS_MAX_PACKET_SIZE)
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b3f      	cmp	r3, #63	; 0x3f
 8006dc2:	d907      	bls.n	8006dd4 <CDC_Receive_FS+0x54>
  {
    // ?��?�� ?��?��?��?�� 보내�?.
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4808      	ldr	r0, [pc, #32]	; (8006de8 <CDC_Receive_FS+0x68>)
 8006dc8:	f7ff fe1f 	bl	8006a0a <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006dcc:	4806      	ldr	r0, [pc, #24]	; (8006de8 <CDC_Receive_FS+0x68>)
 8006dce:	f7ff fe65 	bl	8006a9c <USBD_CDC_ReceivePacket>
 8006dd2:	e002      	b.n	8006dda <CDC_Receive_FS+0x5a>
  }
  else
  {
    // 버퍼 ?��?��?�� �?족하?��, 기다?��?��..
    rx_full = true;
 8006dd4:	4b05      	ldr	r3, [pc, #20]	; (8006dec <CDC_Receive_FS+0x6c>)
 8006dd6:	2201      	movs	r2, #1
 8006dd8:	701a      	strb	r2, [r3, #0]
  }


  return (USBD_OK);
 8006dda:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3714      	adds	r7, #20
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd90      	pop	{r4, r7, pc}
 8006de4:	200001a8 	.word	0x200001a8
 8006de8:	20007630 	.word	0x20007630
 8006dec:	20006a44 	.word	0x20006a44

08006df0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b084      	sub	sp, #16
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006e00:	4b0d      	ldr	r3, [pc, #52]	; (8006e38 <CDC_Transmit_FS+0x48>)
 8006e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d001      	beq.n	8006e16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006e12:	2301      	movs	r3, #1
 8006e14:	e00b      	b.n	8006e2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006e16:	887b      	ldrh	r3, [r7, #2]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4806      	ldr	r0, [pc, #24]	; (8006e38 <CDC_Transmit_FS+0x48>)
 8006e1e:	f7ff fdd6 	bl	80069ce <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006e22:	4805      	ldr	r0, [pc, #20]	; (8006e38 <CDC_Transmit_FS+0x48>)
 8006e24:	f7ff fe0a 	bl	8006a3c <USBD_CDC_TransmitPacket>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20007630 	.word	0x20007630

08006e3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	4613      	mov	r3, r2
 8006e48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	371c      	adds	r7, #28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5c:	4770      	bx	lr
	...

08006e60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	2212      	movs	r2, #18
 8006e70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006e72:	4b03      	ldr	r3, [pc, #12]	; (8006e80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	200001dc 	.word	0x200001dc

08006e84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b083      	sub	sp, #12
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	6039      	str	r1, [r7, #0]
 8006e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	2204      	movs	r2, #4
 8006e94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006e96:	4b03      	ldr	r3, [pc, #12]	; (8006ea4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	370c      	adds	r7, #12
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	200001f0 	.word	0x200001f0

08006ea8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	4603      	mov	r3, r0
 8006eb0:	6039      	str	r1, [r7, #0]
 8006eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006eb4:	79fb      	ldrb	r3, [r7, #7]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d105      	bne.n	8006ec6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	4907      	ldr	r1, [pc, #28]	; (8006edc <USBD_FS_ProductStrDescriptor+0x34>)
 8006ebe:	4808      	ldr	r0, [pc, #32]	; (8006ee0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ec0:	f7ff fa11 	bl	80062e6 <USBD_GetString>
 8006ec4:	e004      	b.n	8006ed0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ec6:	683a      	ldr	r2, [r7, #0]
 8006ec8:	4904      	ldr	r1, [pc, #16]	; (8006edc <USBD_FS_ProductStrDescriptor+0x34>)
 8006eca:	4805      	ldr	r0, [pc, #20]	; (8006ee0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ecc:	f7ff fa0b 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ed0:	4b02      	ldr	r3, [pc, #8]	; (8006edc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20008300 	.word	0x20008300
 8006ee0:	08018acc 	.word	0x08018acc

08006ee4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006ef0:	683a      	ldr	r2, [r7, #0]
 8006ef2:	4904      	ldr	r1, [pc, #16]	; (8006f04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006ef4:	4804      	ldr	r0, [pc, #16]	; (8006f08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006ef6:	f7ff f9f6 	bl	80062e6 <USBD_GetString>
  return USBD_StrDesc;
 8006efa:	4b02      	ldr	r3, [pc, #8]	; (8006f04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	20008300 	.word	0x20008300
 8006f08:	08018ae4 	.word	0x08018ae4

08006f0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	4603      	mov	r3, r0
 8006f14:	6039      	str	r1, [r7, #0]
 8006f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	221a      	movs	r2, #26
 8006f1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006f1e:	f000 f843 	bl	8006fa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006f22:	4b02      	ldr	r3, [pc, #8]	; (8006f2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3708      	adds	r7, #8
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	200001f4 	.word	0x200001f4

08006f30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	4603      	mov	r3, r0
 8006f38:	6039      	str	r1, [r7, #0]
 8006f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d105      	bne.n	8006f4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f42:	683a      	ldr	r2, [r7, #0]
 8006f44:	4907      	ldr	r1, [pc, #28]	; (8006f64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f46:	4808      	ldr	r0, [pc, #32]	; (8006f68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f48:	f7ff f9cd 	bl	80062e6 <USBD_GetString>
 8006f4c:	e004      	b.n	8006f58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006f4e:	683a      	ldr	r2, [r7, #0]
 8006f50:	4904      	ldr	r1, [pc, #16]	; (8006f64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006f52:	4805      	ldr	r0, [pc, #20]	; (8006f68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006f54:	f7ff f9c7 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f58:	4b02      	ldr	r3, [pc, #8]	; (8006f64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20008300 	.word	0x20008300
 8006f68:	08018af8 	.word	0x08018af8

08006f6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	4603      	mov	r3, r0
 8006f74:	6039      	str	r1, [r7, #0]
 8006f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d105      	bne.n	8006f8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f7e:	683a      	ldr	r2, [r7, #0]
 8006f80:	4907      	ldr	r1, [pc, #28]	; (8006fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f82:	4808      	ldr	r0, [pc, #32]	; (8006fa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f84:	f7ff f9af 	bl	80062e6 <USBD_GetString>
 8006f88:	e004      	b.n	8006f94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006f8a:	683a      	ldr	r2, [r7, #0]
 8006f8c:	4904      	ldr	r1, [pc, #16]	; (8006fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006f8e:	4805      	ldr	r0, [pc, #20]	; (8006fa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006f90:	f7ff f9a9 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f94:	4b02      	ldr	r3, [pc, #8]	; (8006fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006f96:	4618      	mov	r0, r3
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}
 8006f9e:	bf00      	nop
 8006fa0:	20008300 	.word	0x20008300
 8006fa4:	08018b04 	.word	0x08018b04

08006fa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006fae:	4b0f      	ldr	r3, [pc, #60]	; (8006fec <Get_SerialNum+0x44>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <Get_SerialNum+0x48>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006fba:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <Get_SerialNum+0x4c>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d009      	beq.n	8006fe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006fce:	2208      	movs	r2, #8
 8006fd0:	4909      	ldr	r1, [pc, #36]	; (8006ff8 <Get_SerialNum+0x50>)
 8006fd2:	68f8      	ldr	r0, [r7, #12]
 8006fd4:	f000 f814 	bl	8007000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006fd8:	2204      	movs	r2, #4
 8006fda:	4908      	ldr	r1, [pc, #32]	; (8006ffc <Get_SerialNum+0x54>)
 8006fdc:	68b8      	ldr	r0, [r7, #8]
 8006fde:	f000 f80f 	bl	8007000 <IntToUnicode>
  }
}
 8006fe2:	bf00      	nop
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	1fff7a10 	.word	0x1fff7a10
 8006ff0:	1fff7a14 	.word	0x1fff7a14
 8006ff4:	1fff7a18 	.word	0x1fff7a18
 8006ff8:	200001f6 	.word	0x200001f6
 8006ffc:	20000206 	.word	0x20000206

08007000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007000:	b480      	push	{r7}
 8007002:	b087      	sub	sp, #28
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	4613      	mov	r3, r2
 800700c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007012:	2300      	movs	r3, #0
 8007014:	75fb      	strb	r3, [r7, #23]
 8007016:	e027      	b.n	8007068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	0f1b      	lsrs	r3, r3, #28
 800701c:	2b09      	cmp	r3, #9
 800701e:	d80b      	bhi.n	8007038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	0f1b      	lsrs	r3, r3, #28
 8007024:	b2da      	uxtb	r2, r3
 8007026:	7dfb      	ldrb	r3, [r7, #23]
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	4619      	mov	r1, r3
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	440b      	add	r3, r1
 8007030:	3230      	adds	r2, #48	; 0x30
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	e00a      	b.n	800704e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	0f1b      	lsrs	r3, r3, #28
 800703c:	b2da      	uxtb	r2, r3
 800703e:	7dfb      	ldrb	r3, [r7, #23]
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4619      	mov	r1, r3
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	440b      	add	r3, r1
 8007048:	3237      	adds	r2, #55	; 0x37
 800704a:	b2d2      	uxtb	r2, r2
 800704c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	011b      	lsls	r3, r3, #4
 8007052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007054:	7dfb      	ldrb	r3, [r7, #23]
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	3301      	adds	r3, #1
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4413      	add	r3, r2
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007062:	7dfb      	ldrb	r3, [r7, #23]
 8007064:	3301      	adds	r3, #1
 8007066:	75fb      	strb	r3, [r7, #23]
 8007068:	7dfa      	ldrb	r2, [r7, #23]
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	429a      	cmp	r2, r3
 800706e:	d3d3      	bcc.n	8007018 <IntToUnicode+0x18>
  }
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	371c      	adds	r7, #28
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	4603      	mov	r3, r0
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	2212      	movs	r2, #18
 8007090:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007092:	4b03      	ldr	r3, [pc, #12]	; (80070a0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007094:	4618      	mov	r0, r3
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	2000022c 	.word	0x2000022c

080070a4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	4603      	mov	r3, r0
 80070ac:	6039      	str	r1, [r7, #0]
 80070ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	2204      	movs	r2, #4
 80070b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070b6:	4b03      	ldr	r3, [pc, #12]	; (80070c4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	370c      	adds	r7, #12
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr
 80070c4:	20000240 	.word	0x20000240

080070c8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b082      	sub	sp, #8
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	4603      	mov	r3, r0
 80070d0:	6039      	str	r1, [r7, #0]
 80070d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070d4:	79fb      	ldrb	r3, [r7, #7]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d105      	bne.n	80070e6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070da:	683a      	ldr	r2, [r7, #0]
 80070dc:	4907      	ldr	r1, [pc, #28]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
 80070de:	4808      	ldr	r0, [pc, #32]	; (8007100 <USBD_FS_ProductStrDescriptor+0x38>)
 80070e0:	f7ff f901 	bl	80062e6 <USBD_GetString>
 80070e4:	e004      	b.n	80070f0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	4904      	ldr	r1, [pc, #16]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
 80070ea:	4805      	ldr	r0, [pc, #20]	; (8007100 <USBD_FS_ProductStrDescriptor+0x38>)
 80070ec:	f7ff f8fb 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80070f0:	4b02      	ldr	r3, [pc, #8]	; (80070fc <USBD_FS_ProductStrDescriptor+0x34>)
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20008300 	.word	0x20008300
 8007100:	08018b14 	.word	0x08018b14

08007104 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b082      	sub	sp, #8
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	4904      	ldr	r1, [pc, #16]	; (8007124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007114:	4804      	ldr	r0, [pc, #16]	; (8007128 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007116:	f7ff f8e6 	bl	80062e6 <USBD_GetString>
  return USBD_StrDesc;
 800711a:	4b02      	ldr	r3, [pc, #8]	; (8007124 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800711c:	4618      	mov	r0, r3
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	20008300 	.word	0x20008300
 8007128:	08018b28 	.word	0x08018b28

0800712c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b082      	sub	sp, #8
 8007130:	af00      	add	r7, sp, #0
 8007132:	4603      	mov	r3, r0
 8007134:	6039      	str	r1, [r7, #0]
 8007136:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	221a      	movs	r2, #26
 800713c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800713e:	f000 f843 	bl	80071c8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007142:	4b02      	ldr	r3, [pc, #8]	; (800714c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}
 800714c:	20000244 	.word	0x20000244

08007150 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b082      	sub	sp, #8
 8007154:	af00      	add	r7, sp, #0
 8007156:	4603      	mov	r3, r0
 8007158:	6039      	str	r1, [r7, #0]
 800715a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800715c:	79fb      	ldrb	r3, [r7, #7]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d105      	bne.n	800716e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	4907      	ldr	r1, [pc, #28]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007166:	4808      	ldr	r0, [pc, #32]	; (8007188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007168:	f7ff f8bd 	bl	80062e6 <USBD_GetString>
 800716c:	e004      	b.n	8007178 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800716e:	683a      	ldr	r2, [r7, #0]
 8007170:	4904      	ldr	r1, [pc, #16]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007172:	4805      	ldr	r0, [pc, #20]	; (8007188 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007174:	f7ff f8b7 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007178:	4b02      	ldr	r3, [pc, #8]	; (8007184 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20008300 	.word	0x20008300
 8007188:	08018b3c 	.word	0x08018b3c

0800718c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	4603      	mov	r3, r0
 8007194:	6039      	str	r1, [r7, #0]
 8007196:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d105      	bne.n	80071aa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	4907      	ldr	r1, [pc, #28]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071a2:	4808      	ldr	r0, [pc, #32]	; (80071c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071a4:	f7ff f89f 	bl	80062e6 <USBD_GetString>
 80071a8:	e004      	b.n	80071b4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	4904      	ldr	r1, [pc, #16]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ae:	4805      	ldr	r0, [pc, #20]	; (80071c4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071b0:	f7ff f899 	bl	80062e6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b4:	4b02      	ldr	r3, [pc, #8]	; (80071c0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	20008300 	.word	0x20008300
 80071c4:	08018b48 	.word	0x08018b48

080071c8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <Get_SerialNum+0x44>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071d4:	4b0e      	ldr	r3, [pc, #56]	; (8007210 <Get_SerialNum+0x48>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071da:	4b0e      	ldr	r3, [pc, #56]	; (8007214 <Get_SerialNum+0x4c>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d009      	beq.n	8007202 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80071ee:	2208      	movs	r2, #8
 80071f0:	4909      	ldr	r1, [pc, #36]	; (8007218 <Get_SerialNum+0x50>)
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f000 f814 	bl	8007220 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80071f8:	2204      	movs	r2, #4
 80071fa:	4908      	ldr	r1, [pc, #32]	; (800721c <Get_SerialNum+0x54>)
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	f000 f80f 	bl	8007220 <IntToUnicode>
  }
}
 8007202:	bf00      	nop
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	1fff7a10 	.word	0x1fff7a10
 8007210:	1fff7a14 	.word	0x1fff7a14
 8007214:	1fff7a18 	.word	0x1fff7a18
 8007218:	20000246 	.word	0x20000246
 800721c:	20000256 	.word	0x20000256

08007220 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007220:	b480      	push	{r7}
 8007222:	b087      	sub	sp, #28
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	4613      	mov	r3, r2
 800722c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007232:	2300      	movs	r3, #0
 8007234:	75fb      	strb	r3, [r7, #23]
 8007236:	e027      	b.n	8007288 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	0f1b      	lsrs	r3, r3, #28
 800723c:	2b09      	cmp	r3, #9
 800723e:	d80b      	bhi.n	8007258 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	0f1b      	lsrs	r3, r3, #28
 8007244:	b2da      	uxtb	r2, r3
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	005b      	lsls	r3, r3, #1
 800724a:	4619      	mov	r1, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	440b      	add	r3, r1
 8007250:	3230      	adds	r2, #48	; 0x30
 8007252:	b2d2      	uxtb	r2, r2
 8007254:	701a      	strb	r2, [r3, #0]
 8007256:	e00a      	b.n	800726e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	0f1b      	lsrs	r3, r3, #28
 800725c:	b2da      	uxtb	r2, r3
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4619      	mov	r1, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	440b      	add	r3, r1
 8007268:	3237      	adds	r2, #55	; 0x37
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	011b      	lsls	r3, r3, #4
 8007272:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007274:	7dfb      	ldrb	r3, [r7, #23]
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	3301      	adds	r3, #1
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	4413      	add	r3, r2
 800727e:	2200      	movs	r2, #0
 8007280:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007282:	7dfb      	ldrb	r3, [r7, #23]
 8007284:	3301      	adds	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
 8007288:	7dfa      	ldrb	r2, [r7, #23]
 800728a:	79fb      	ldrb	r3, [r7, #7]
 800728c:	429a      	cmp	r2, r3
 800728e:	d3d3      	bcc.n	8007238 <IntToUnicode+0x18>
  }
}
 8007290:	bf00      	nop
 8007292:	bf00      	nop
 8007294:	371c      	adds	r7, #28
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	460b      	mov	r3, r1
 80072a8:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 80072aa:	f44f 701d 	mov.w	r0, #628	; 0x274
 80072ae:	f002 f971 	bl	8009594 <USBD_static_malloc>
 80072b2:	60f8      	str	r0, [r7, #12]

  if (hmsc == NULL)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d105      	bne.n	80072c6 <USBD_MSC_Init+0x28>
  {
    pdev->pClassData = NULL;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80072c2:	2302      	movs	r3, #2
 80072c4:	e034      	b.n	8007330 <USBD_MSC_Init+0x92>
  }

  pdev->pClassData = (void *)hmsc;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68fa      	ldr	r2, [r7, #12]
 80072ca:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7c1b      	ldrb	r3, [r3, #16]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d115      	bne.n	8007302 <USBD_MSC_Init+0x64>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80072d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072da:	2202      	movs	r2, #2
 80072dc:	2101      	movs	r1, #1
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f002 f815 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2201      	movs	r2, #1
 80072e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 80072ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80072f0:	2202      	movs	r2, #2
 80072f2:	2181      	movs	r1, #129	; 0x81
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f002 f80a 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2201      	movs	r2, #1
 80072fe:	871a      	strh	r2, [r3, #56]	; 0x38
 8007300:	e012      	b.n	8007328 <USBD_MSC_Init+0x8a>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007302:	2340      	movs	r3, #64	; 0x40
 8007304:	2202      	movs	r2, #2
 8007306:	2101      	movs	r1, #1
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f002 f800 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2201      	movs	r2, #1
 8007312:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	2202      	movs	r2, #2
 800731a:	2181      	movs	r1, #129	; 0x81
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fff6 	bl	800930e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2201      	movs	r2, #1
 8007326:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f000 f998 	bl	800765e <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8007344:	2101      	movs	r1, #1
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f002 f807 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8007354:	2181      	movs	r1, #129	; 0x81
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f001 ffff 	bl	800935a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2200      	movs	r2, #0
 8007360:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007368:	2b00      	cmp	r3, #0
 800736a:	d00c      	beq.n	8007386 <USBD_MSC_DeInit+0x4e>
  {
    /* De-Init the BOT layer */
    MSC_BOT_DeInit(pdev);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f000 f9d4 	bl	800771a <MSC_BOT_DeInit>

    (void)USBD_free(pdev->pClassData);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007378:	4618      	mov	r0, r3
 800737a:	f002 f919 	bl	80095b0 <USBD_static_free>
    pdev->pClassData = NULL;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_MSC_Setup>:
  * @param  pdev: device instance
  * @param  req: USB request
  * @retval status
  */
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b086      	sub	sp, #24
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073a0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 80073a6:	2300      	movs	r3, #0
 80073a8:	81fb      	strh	r3, [r7, #14]

  if (hmsc == NULL)
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <USBD_MSC_Setup+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80073b0:	2303      	movs	r3, #3
 80073b2:	e0db      	b.n	800756c <USBD_MSC_Setup+0x1dc>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d04e      	beq.n	800745e <USBD_MSC_Setup+0xce>
 80073c0:	2b20      	cmp	r3, #32
 80073c2:	f040 80cb 	bne.w	800755c <USBD_MSC_Setup+0x1cc>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	785b      	ldrb	r3, [r3, #1]
 80073ca:	2bfe      	cmp	r3, #254	; 0xfe
 80073cc:	d002      	beq.n	80073d4 <USBD_MSC_Setup+0x44>
 80073ce:	2bff      	cmp	r3, #255	; 0xff
 80073d0:	d025      	beq.n	800741e <USBD_MSC_Setup+0x8e>
 80073d2:	e03c      	b.n	800744e <USBD_MSC_Setup+0xbe>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	885b      	ldrh	r3, [r3, #2]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d119      	bne.n	8007410 <USBD_MSC_Setup+0x80>
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	88db      	ldrh	r3, [r3, #6]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d115      	bne.n	8007410 <USBD_MSC_Setup+0x80>
              ((req->bmRequest & 0x80U) == 0x80U))
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da10      	bge.n	8007410 <USBD_MSC_Setup+0x80>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80073f4:	699b      	ldr	r3, [r3, #24]
 80073f6:	4798      	blx	r3
 80073f8:	4603      	mov	r3, r0
 80073fa:	461a      	mov	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	601a      	str	r2, [r3, #0]
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	2201      	movs	r2, #1
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe ffcd 	bl	80063a6 <USBD_CtlSendData>
 800740c:	bf00      	nop
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800740e:	e025      	b.n	800745c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8007410:	6839      	ldr	r1, [r7, #0]
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7fe ff56 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007418:	2303      	movs	r3, #3
 800741a:	75fb      	strb	r3, [r7, #23]
          break;
 800741c:	e01e      	b.n	800745c <USBD_MSC_Setup+0xcc>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	885b      	ldrh	r3, [r3, #2]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d10c      	bne.n	8007440 <USBD_MSC_Setup+0xb0>
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	88db      	ldrh	r3, [r3, #6]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d108      	bne.n	8007440 <USBD_MSC_Setup+0xb0>
              ((req->bmRequest & 0x80U) != 0x80U))
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8007434:	2b00      	cmp	r3, #0
 8007436:	db03      	blt.n	8007440 <USBD_MSC_Setup+0xb0>
          {
            MSC_BOT_Reset(pdev);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f000 f948 	bl	80076ce <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800743e:	e00d      	b.n	800745c <USBD_MSC_Setup+0xcc>
            USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f7fe ff3e 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	75fb      	strb	r3, [r7, #23]
          break;
 800744c:	e006      	b.n	800745c <USBD_MSC_Setup+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7fe ff37 	bl	80062c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007456:	2303      	movs	r3, #3
 8007458:	75fb      	strb	r3, [r7, #23]
          break;
 800745a:	bf00      	nop
      }
      break;
 800745c:	e085      	b.n	800756a <USBD_MSC_Setup+0x1da>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	785b      	ldrb	r3, [r3, #1]
 8007462:	2b0b      	cmp	r3, #11
 8007464:	d871      	bhi.n	800754a <USBD_MSC_Setup+0x1ba>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <USBD_MSC_Setup+0xdc>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	0800749d 	.word	0x0800749d
 8007470:	08007519 	.word	0x08007519
 8007474:	0800754b 	.word	0x0800754b
 8007478:	0800754b 	.word	0x0800754b
 800747c:	0800754b 	.word	0x0800754b
 8007480:	0800754b 	.word	0x0800754b
 8007484:	0800754b 	.word	0x0800754b
 8007488:	0800754b 	.word	0x0800754b
 800748c:	0800754b 	.word	0x0800754b
 8007490:	0800754b 	.word	0x0800754b
 8007494:	080074c7 	.word	0x080074c7
 8007498:	080074f1 	.word	0x080074f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d107      	bne.n	80074b8 <USBD_MSC_Setup+0x128>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80074a8:	f107 030e 	add.w	r3, r7, #14
 80074ac:	2202      	movs	r2, #2
 80074ae:	4619      	mov	r1, r3
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f7fe ff78 	bl	80063a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074b6:	e050      	b.n	800755a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7fe ff02 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80074c0:	2303      	movs	r3, #3
 80074c2:	75fb      	strb	r3, [r7, #23]
          break;
 80074c4:	e049      	b.n	800755a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b03      	cmp	r3, #3
 80074d0:	d107      	bne.n	80074e2 <USBD_MSC_Setup+0x152>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3304      	adds	r3, #4
 80074d6:	2201      	movs	r2, #1
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f7fe ff63 	bl	80063a6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074e0:	e03b      	b.n	800755a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 80074e2:	6839      	ldr	r1, [r7, #0]
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fe feed 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 80074ea:	2303      	movs	r3, #3
 80074ec:	75fb      	strb	r3, [r7, #23]
          break;
 80074ee:	e034      	b.n	800755a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	2b03      	cmp	r3, #3
 80074fa:	d106      	bne.n	800750a <USBD_MSC_Setup+0x17a>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	885b      	ldrh	r3, [r3, #2]
 8007500:	b2db      	uxtb	r3, r3
 8007502:	461a      	mov	r2, r3
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007508:	e027      	b.n	800755a <USBD_MSC_Setup+0x1ca>
            USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f7fe fed9 	bl	80062c4 <USBD_CtlError>
            ret = USBD_FAIL;
 8007512:	2303      	movs	r3, #3
 8007514:	75fb      	strb	r3, [r7, #23]
          break;
 8007516:	e020      	b.n	800755a <USBD_MSC_Setup+0x1ca>

        case USB_REQ_CLEAR_FEATURE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751e:	b2db      	uxtb	r3, r3
 8007520:	2b03      	cmp	r3, #3
 8007522:	d119      	bne.n	8007558 <USBD_MSC_Setup+0x1c8>
          {
            if (req->wValue == USB_FEATURE_EP_HALT)
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	885b      	ldrh	r3, [r3, #2]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d115      	bne.n	8007558 <USBD_MSC_Setup+0x1c8>
            {
              /* Flush the FIFO */
              (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	889b      	ldrh	r3, [r3, #4]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	4619      	mov	r1, r3
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	f001 ff2f 	bl	8009398 <USBD_LL_FlushEP>

              /* Handle BOT error */
              MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	889b      	ldrh	r3, [r3, #4]
 800753e:	b2db      	uxtb	r3, r3
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa82 	bl	8007a4c <MSC_BOT_CplClrFeature>
            }
          }
          break;
 8007548:	e006      	b.n	8007558 <USBD_MSC_Setup+0x1c8>

        default:
          USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe feb9 	bl	80062c4 <USBD_CtlError>
          ret = USBD_FAIL;
 8007552:	2303      	movs	r3, #3
 8007554:	75fb      	strb	r3, [r7, #23]
          break;
 8007556:	e000      	b.n	800755a <USBD_MSC_Setup+0x1ca>
          break;
 8007558:	bf00      	nop
      }
      break;
 800755a:	e006      	b.n	800756a <USBD_MSC_Setup+0x1da>

    default:
      USBD_CtlError(pdev, req);
 800755c:	6839      	ldr	r1, [r7, #0]
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7fe feb0 	bl	80062c4 <USBD_CtlError>
      ret = USBD_FAIL;
 8007564:	2303      	movs	r3, #3
 8007566:	75fb      	strb	r3, [r7, #23]
      break;
 8007568:	bf00      	nop
  }

  return (uint8_t)ret;
 800756a:	7dfb      	ldrb	r3, [r7, #23]
}
 800756c:	4618      	mov	r0, r3
 800756e:	3718      	adds	r7, #24
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <USBD_MSC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	b082      	sub	sp, #8
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
 800757c:	460b      	mov	r3, r1
 800757e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8007580:	78fb      	ldrb	r3, [r7, #3]
 8007582:	4619      	mov	r1, r3
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f8dc 	bl	8007742 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3708      	adds	r7, #8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <USBD_MSC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	460b      	mov	r3, r1
 800759e:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80075a0:	78fb      	ldrb	r3, [r7, #3]
 80075a2:	4619      	mov	r1, r3
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f902 	bl	80077ae <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80075aa:	2300      	movs	r3, #0
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3708      	adds	r7, #8
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <USBD_MSC_GetHSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80075c2:	4b03      	ldr	r3, [pc, #12]	; (80075d0 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000298 	.word	0x20000298

080075d4 <USBD_MSC_GetFSCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80075e2:	4b03      	ldr	r3, [pc, #12]	; (80075f0 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr
 80075f0:	200002b8 	.word	0x200002b8

080075f4 <USBD_MSC_GetOtherSpeedCfgDesc>:
  *         return other speed configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2220      	movs	r2, #32
 8007600:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007602:	4b03      	ldr	r3, [pc, #12]	; (8007610 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr
 8007610:	200002d8 	.word	0x200002d8

08007614 <USBD_MSC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	220a      	movs	r2, #10
 8007620:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007622:	4b03      	ldr	r3, [pc, #12]	; (8007630 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr
 8007630:	200002f8 	.word	0x200002f8

08007634 <USBD_MSC_RegisterStorage>:
  * @brief  USBD_MSC_RegisterStorage
  * @param  fops: storage callback
  * @retval status
  */
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d101      	bne.n	8007648 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007644:	2303      	movs	r3, #3
 8007646:	e004      	b.n	8007652 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <MSC_BOT_Init>:
  *         Initialize the BOT Process
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800766c:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d028      	beq.n	80076c6 <MSC_BOT_Init+0x68>
  {
    return;
  }

  hmsc->bot_state = USBD_BOT_IDLE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	2200      	movs	r2, #0
 800767e:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	2000      	movs	r0, #0
 80076a2:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80076a4:	2101      	movs	r1, #1
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f001 fe76 	bl	8009398 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80076ac:	2181      	movs	r1, #129	; 0x81
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f001 fe72 	bl	8009398 <USBD_LL_FlushEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80076ba:	231f      	movs	r3, #31
 80076bc:	2101      	movs	r1, #1
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f001 ff33 	bl	800952a <USBD_LL_PrepareReceive>
 80076c4:	e000      	b.n	80076c8 <MSC_BOT_Init+0x6a>
    return;
 80076c6:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <MSC_BOT_Reset>:
  *         Reset the BOT Machine
  * @param  pdev: device instance
  * @retval  None
  */
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b084      	sub	sp, #16
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076dc:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d016      	beq.n	8007712 <MSC_BOT_Reset+0x44>
  {
    return;
  }

  hmsc->bot_state  = USBD_BOT_IDLE;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2200      	movs	r2, #0
 80076e8:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2201      	movs	r2, #1
 80076ee:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80076f0:	2181      	movs	r1, #129	; 0x81
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f001 fe8e 	bl	8009414 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 80076f8:	2101      	movs	r1, #1
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f001 fe8a 	bl	8009414 <USBD_LL_ClearStallEP>

  /* Prepare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f503 7204 	add.w	r2, r3, #528	; 0x210
 8007706:	231f      	movs	r3, #31
 8007708:	2101      	movs	r1, #1
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f001 ff0d 	bl	800952a <USBD_LL_PrepareReceive>
 8007710:	e000      	b.n	8007714 <MSC_BOT_Reset+0x46>
    return;
 8007712:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 8007714:	3710      	adds	r7, #16
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <MSC_BOT_DeInit>:
  *         DeInitialize the BOT Machine
  * @param  pdev: device instance
  * @retval None
  */
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007728:	60fb      	str	r3, [r7, #12]

  if (hmsc != NULL)
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2b00      	cmp	r3, #0
 800772e:	d002      	beq.n	8007736 <MSC_BOT_DeInit+0x1c>
  {
    hmsc->bot_state = USBD_BOT_IDLE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	721a      	strb	r2, [r3, #8]
  }
}
 8007736:	bf00      	nop
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <MSC_BOT_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007754:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d020      	beq.n	800779e <MSC_BOT_DataIn+0x5c>
  {
    return;
  }

  switch (hmsc->bot_state)
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	7a1b      	ldrb	r3, [r3, #8]
 8007760:	2b02      	cmp	r3, #2
 8007762:	d005      	beq.n	8007770 <MSC_BOT_DataIn+0x2e>
 8007764:	2b02      	cmp	r3, #2
 8007766:	db1c      	blt.n	80077a2 <MSC_BOT_DataIn+0x60>
 8007768:	3b03      	subs	r3, #3
 800776a:	2b01      	cmp	r3, #1
 800776c:	d819      	bhi.n	80077a2 <MSC_BOT_DataIn+0x60>
 800776e:	e011      	b.n	8007794 <MSC_BOT_DataIn+0x52>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800777c:	461a      	mov	r2, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f992 	bl	8007aa8 <SCSI_ProcessCmd>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	da0d      	bge.n	80077a6 <MSC_BOT_DataIn+0x64>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800778a:	2101      	movs	r1, #1
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f8fb 	bl	8007988 <MSC_BOT_SendCSW>
      }
      break;
 8007792:	e008      	b.n	80077a6 <MSC_BOT_DataIn+0x64>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007794:	2100      	movs	r1, #0
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f8f6 	bl	8007988 <MSC_BOT_SendCSW>
      break;
 800779c:	e004      	b.n	80077a8 <MSC_BOT_DataIn+0x66>
    return;
 800779e:	bf00      	nop
 80077a0:	e002      	b.n	80077a8 <MSC_BOT_DataIn+0x66>

    default:
      break;
 80077a2:	bf00      	nop
 80077a4:	e000      	b.n	80077a8 <MSC_BOT_DataIn+0x66>
      break;
 80077a6:	bf00      	nop
  }
}
 80077a8:	3710      	adds	r7, #16
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}

080077ae <MSC_BOT_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval None
  */
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80077ae:	b580      	push	{r7, lr}
 80077b0:	b084      	sub	sp, #16
 80077b2:	af00      	add	r7, sp, #0
 80077b4:	6078      	str	r0, [r7, #4]
 80077b6:	460b      	mov	r3, r1
 80077b8:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077c0:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d01c      	beq.n	8007802 <MSC_BOT_DataOut+0x54>
  {
    return;
  }

  switch (hmsc->bot_state)
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	7a1b      	ldrb	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d002      	beq.n	80077d6 <MSC_BOT_DataOut+0x28>
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d004      	beq.n	80077de <MSC_BOT_DataOut+0x30>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80077d4:	e018      	b.n	8007808 <MSC_BOT_DataOut+0x5a>
      MSC_BOT_CBW_Decode(pdev);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 f81a 	bl	8007810 <MSC_BOT_CBW_Decode>
      break;
 80077dc:	e014      	b.n	8007808 <MSC_BOT_DataOut+0x5a>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80077ea:	461a      	mov	r2, r3
 80077ec:	6878      	ldr	r0, [r7, #4]
 80077ee:	f000 f95b 	bl	8007aa8 <SCSI_ProcessCmd>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da06      	bge.n	8007806 <MSC_BOT_DataOut+0x58>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80077f8:	2101      	movs	r1, #1
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f8c4 	bl	8007988 <MSC_BOT_SendCSW>
      break;
 8007800:	e001      	b.n	8007806 <MSC_BOT_DataOut+0x58>
    return;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <MSC_BOT_DataOut+0x5a>
      break;
 8007806:	bf00      	nop
  }
}
 8007808:	3710      	adds	r7, #16
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
	...

08007810 <MSC_BOT_CBW_Decode>:
  *         Decode the CBW command and set the BOT state machine accordingly
  * @param  pdev: device instance
  * @retval None
  */
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800781e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d077      	beq.n	8007916 <MSC_BOT_CBW_Decode+0x106>
  {
    return;
  }

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f001 fe93 	bl	800956c <USBD_LL_GetRxDataSize>
 8007846:	4603      	mov	r3, r0
 8007848:	2b1f      	cmp	r3, #31
 800784a:	d114      	bne.n	8007876 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007852:	4a34      	ldr	r2, [pc, #208]	; (8007924 <MSC_BOT_CBW_Decode+0x114>)
 8007854:	4293      	cmp	r3, r2
 8007856:	d10e      	bne.n	8007876 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800785e:	2b01      	cmp	r3, #1
 8007860:	d809      	bhi.n	8007876 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 8007868:	2b00      	cmp	r3, #0
 800786a:	d004      	beq.n	8007876 <MSC_BOT_CBW_Decode+0x66>
      (hmsc->cbw.bCBLength > 16U))
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8007872:	2b10      	cmp	r3, #16
 8007874:	d90e      	bls.n	8007894 <MSC_BOT_CBW_Decode+0x84>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800787c:	2320      	movs	r3, #32
 800787e:	2205      	movs	r2, #5
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 fdbc 	bl	80083fe <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2202      	movs	r2, #2
 800788a:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 f8ab 	bl	80079e8 <MSC_BOT_Abort>
 8007892:	e043      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	f203 231f 	addw	r3, r3, #543	; 0x21f
 80078a0:	461a      	mov	r2, r3
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 f900 	bl	8007aa8 <SCSI_ProcessCmd>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	da0c      	bge.n	80078c8 <MSC_BOT_CBW_Decode+0xb8>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	7a1b      	ldrb	r3, [r3, #8]
 80078b2:	2b05      	cmp	r3, #5
 80078b4:	d104      	bne.n	80078c0 <MSC_BOT_CBW_Decode+0xb0>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80078b6:	2101      	movs	r1, #1
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f865 	bl	8007988 <MSC_BOT_SendCSW>
 80078be:	e02d      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f891 	bl	80079e8 <MSC_BOT_Abort>
 80078c6:	e029      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	7a1b      	ldrb	r3, [r3, #8]
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d024      	beq.n	800791a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d020      	beq.n	800791a <MSC_BOT_CBW_Decode+0x10a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d01c      	beq.n	800791a <MSC_BOT_CBW_Decode+0x10a>
    {
      if (hmsc->bot_data_length > 0U)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <MSC_BOT_CBW_Decode+0xec>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f103 0110 	add.w	r1, r3, #16
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	68db      	ldr	r3, [r3, #12]
 80078f2:	461a      	mov	r2, r3
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 f817 	bl	8007928 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 80078fa:	e00f      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
      }
      else if (hmsc->bot_data_length == 0U)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d104      	bne.n	800790e <MSC_BOT_CBW_Decode+0xfe>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8007904:	2100      	movs	r1, #0
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f000 f83e 	bl	8007988 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800790c:	e006      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f86a 	bl	80079e8 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8007914:	e002      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
    return;
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <MSC_BOT_CBW_Decode+0x10c>
      }
    }
    else
    {
      return;
 800791a:	bf00      	nop
    }
  }
}
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
 8007922:	bf00      	nop
 8007924:	43425355 	.word	0x43425355

08007928 <MSC_BOT_SendData>:
  * @param  buf: pointer to data buffer
  * @param  len: Data Length
  * @retval None
  */
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b086      	sub	sp, #24
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800793a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007942:	687a      	ldr	r2, [r7, #4]
 8007944:	4293      	cmp	r3, r2
 8007946:	bf28      	it	cs
 8007948:	4613      	movcs	r3, r2
 800794a:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d015      	beq.n	800797e <MSC_BOT_SendData+0x56>
  {
    return;
  }

  hmsc->csw.dDataResidue -= len;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	1ad2      	subs	r2, r2, r3
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	2200      	movs	r2, #0
 8007966:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2204      	movs	r2, #4
 800796e:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	68ba      	ldr	r2, [r7, #8]
 8007974:	2181      	movs	r1, #129	; 0x81
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f001 fdb6 	bl	80094e8 <USBD_LL_Transmit>
 800797c:	e000      	b.n	8007980 <MSC_BOT_SendData+0x58>
    return;
 800797e:	bf00      	nop
}
 8007980:	3718      	adds	r7, #24
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
	...

08007988 <MSC_BOT_SendCSW>:
  * @param  pdev: device instance
  * @param  status : CSW status
  * @retval None
  */
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	460b      	mov	r3, r1
 8007992:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800799a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d01b      	beq.n	80079da <MSC_BOT_SendCSW+0x52>
  {
    return;
  }

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	4a0f      	ldr	r2, [pc, #60]	; (80079e4 <MSC_BOT_SendCSW+0x5c>)
 80079a6:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	78fa      	ldrb	r2, [r7, #3]
 80079ae:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	f503 720c 	add.w	r2, r3, #560	; 0x230
 80079be:	230d      	movs	r3, #13
 80079c0:	2181      	movs	r1, #129	; 0x81
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f001 fd90 	bl	80094e8 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f503 7204 	add.w	r2, r3, #528	; 0x210
 80079ce:	231f      	movs	r3, #31
 80079d0:	2101      	movs	r1, #1
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f001 fda9 	bl	800952a <USBD_LL_PrepareReceive>
 80079d8:	e000      	b.n	80079dc <MSC_BOT_SendCSW+0x54>
    return;
 80079da:	bf00      	nop
                               USBD_BOT_CBW_LENGTH);
}
 80079dc:	3710      	adds	r7, #16
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
 80079e2:	bf00      	nop
 80079e4:	53425355 	.word	0x53425355

080079e8 <MSC_BOT_Abort>:
  * @param  pdev: device instance
  * @retval status
  */

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80079f6:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d022      	beq.n	8007a44 <MSC_BOT_Abort+0x5c>
  {
    return;
  }

  if ((hmsc->cbw.bmFlags == 0U) &&
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d10c      	bne.n	8007a22 <MSC_BOT_Abort+0x3a>
      (hmsc->cbw.dDataLength != 0U) &&
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d007      	beq.n	8007a22 <MSC_BOT_Abort+0x3a>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d103      	bne.n	8007a22 <MSC_BOT_Abort+0x3a>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f001 fcda 	bl	80093d6 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007a22:	2181      	movs	r1, #129	; 0x81
 8007a24:	6878      	ldr	r0, [r7, #4]
 8007a26:	f001 fcd6 	bl	80093d6 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	7a5b      	ldrb	r3, [r3, #9]
 8007a2e:	2b02      	cmp	r3, #2
 8007a30:	d109      	bne.n	8007a46 <MSC_BOT_Abort+0x5e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007a32:	2181      	movs	r1, #129	; 0x81
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f001 fcce 	bl	80093d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007a3a:	2101      	movs	r1, #1
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f001 fcca 	bl	80093d6 <USBD_LL_StallEP>
 8007a42:	e000      	b.n	8007a46 <MSC_BOT_Abort+0x5e>
    return;
 8007a44:	bf00      	nop
  }
}
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <MSC_BOT_CplClrFeature>:
  * @param  epnum: endpoint index
  * @retval None
  */

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
 8007a54:	460b      	mov	r3, r1
 8007a56:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007a5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d019      	beq.n	8007a9a <MSC_BOT_CplClrFeature+0x4e>
  {
    return;
  }

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	7a5b      	ldrb	r3, [r3, #9]
 8007a6a:	2b02      	cmp	r3, #2
 8007a6c:	d108      	bne.n	8007a80 <MSC_BOT_CplClrFeature+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007a6e:	2181      	movs	r1, #129	; 0x81
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fcb0 	bl	80093d6 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007a76:	2101      	movs	r1, #1
 8007a78:	6878      	ldr	r0, [r7, #4]
 8007a7a:	f001 fcac 	bl	80093d6 <USBD_LL_StallEP>
 8007a7e:	e00f      	b.n	8007aa0 <MSC_BOT_CplClrFeature+0x54>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8007a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	da0a      	bge.n	8007a9e <MSC_BOT_CplClrFeature+0x52>
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	7a5b      	ldrb	r3, [r3, #9]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d006      	beq.n	8007a9e <MSC_BOT_CplClrFeature+0x52>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007a90:	2101      	movs	r1, #1
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff ff78 	bl	8007988 <MSC_BOT_SendCSW>
 8007a98:	e002      	b.n	8007aa0 <MSC_BOT_CplClrFeature+0x54>
    return;
 8007a9a:	bf00      	nop
 8007a9c:	e000      	b.n	8007aa0 <MSC_BOT_CplClrFeature+0x54>
  }
  else
  {
    return;
 8007a9e:	bf00      	nop
  }
}
 8007aa0:	3710      	adds	r7, #16
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
	...

08007aa8 <SCSI_ProcessCmd>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	460b      	mov	r3, r1
 8007ab2:	607a      	str	r2, [r7, #4]
 8007ab4:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007abc:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <SCSI_ProcessCmd+0x22>
  {
    return -1;
 8007ac4:	f04f 33ff 	mov.w	r3, #4294967295
 8007ac8:	e168      	b.n	8007d9c <SCSI_ProcessCmd+0x2f4>
  }

  switch (cmd[0])
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	2baa      	cmp	r3, #170	; 0xaa
 8007ad0:	f000 8144 	beq.w	8007d5c <SCSI_ProcessCmd+0x2b4>
 8007ad4:	2baa      	cmp	r3, #170	; 0xaa
 8007ad6:	f300 8153 	bgt.w	8007d80 <SCSI_ProcessCmd+0x2d8>
 8007ada:	2ba8      	cmp	r3, #168	; 0xa8
 8007adc:	f000 812c 	beq.w	8007d38 <SCSI_ProcessCmd+0x290>
 8007ae0:	2ba8      	cmp	r3, #168	; 0xa8
 8007ae2:	f300 814d 	bgt.w	8007d80 <SCSI_ProcessCmd+0x2d8>
 8007ae6:	2b5a      	cmp	r3, #90	; 0x5a
 8007ae8:	f300 80c0 	bgt.w	8007c6c <SCSI_ProcessCmd+0x1c4>
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f2c0 8147 	blt.w	8007d80 <SCSI_ProcessCmd+0x2d8>
 8007af2:	2b5a      	cmp	r3, #90	; 0x5a
 8007af4:	f200 8144 	bhi.w	8007d80 <SCSI_ProcessCmd+0x2d8>
 8007af8:	a201      	add	r2, pc, #4	; (adr r2, 8007b00 <SCSI_ProcessCmd+0x58>)
 8007afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afe:	bf00      	nop
 8007b00:	08007c73 	.word	0x08007c73
 8007b04:	08007d81 	.word	0x08007d81
 8007b08:	08007d81 	.word	0x08007d81
 8007b0c:	08007c85 	.word	0x08007c85
 8007b10:	08007d81 	.word	0x08007d81
 8007b14:	08007d81 	.word	0x08007d81
 8007b18:	08007d81 	.word	0x08007d81
 8007b1c:	08007d81 	.word	0x08007d81
 8007b20:	08007d81 	.word	0x08007d81
 8007b24:	08007d81 	.word	0x08007d81
 8007b28:	08007d81 	.word	0x08007d81
 8007b2c:	08007d81 	.word	0x08007d81
 8007b30:	08007d81 	.word	0x08007d81
 8007b34:	08007d81 	.word	0x08007d81
 8007b38:	08007d81 	.word	0x08007d81
 8007b3c:	08007d81 	.word	0x08007d81
 8007b40:	08007d81 	.word	0x08007d81
 8007b44:	08007d81 	.word	0x08007d81
 8007b48:	08007c97 	.word	0x08007c97
 8007b4c:	08007d81 	.word	0x08007d81
 8007b50:	08007d81 	.word	0x08007d81
 8007b54:	08007d81 	.word	0x08007d81
 8007b58:	08007d81 	.word	0x08007d81
 8007b5c:	08007d81 	.word	0x08007d81
 8007b60:	08007d81 	.word	0x08007d81
 8007b64:	08007d81 	.word	0x08007d81
 8007b68:	08007ccd 	.word	0x08007ccd
 8007b6c:	08007ca9 	.word	0x08007ca9
 8007b70:	08007d81 	.word	0x08007d81
 8007b74:	08007d81 	.word	0x08007d81
 8007b78:	08007cbb 	.word	0x08007cbb
 8007b7c:	08007d81 	.word	0x08007d81
 8007b80:	08007d81 	.word	0x08007d81
 8007b84:	08007d81 	.word	0x08007d81
 8007b88:	08007d81 	.word	0x08007d81
 8007b8c:	08007cf1 	.word	0x08007cf1
 8007b90:	08007d81 	.word	0x08007d81
 8007b94:	08007d03 	.word	0x08007d03
 8007b98:	08007d81 	.word	0x08007d81
 8007b9c:	08007d81 	.word	0x08007d81
 8007ba0:	08007d27 	.word	0x08007d27
 8007ba4:	08007d81 	.word	0x08007d81
 8007ba8:	08007d4b 	.word	0x08007d4b
 8007bac:	08007d81 	.word	0x08007d81
 8007bb0:	08007d81 	.word	0x08007d81
 8007bb4:	08007d81 	.word	0x08007d81
 8007bb8:	08007d81 	.word	0x08007d81
 8007bbc:	08007d6f 	.word	0x08007d6f
 8007bc0:	08007d81 	.word	0x08007d81
 8007bc4:	08007d81 	.word	0x08007d81
 8007bc8:	08007d81 	.word	0x08007d81
 8007bcc:	08007d81 	.word	0x08007d81
 8007bd0:	08007d81 	.word	0x08007d81
 8007bd4:	08007d81 	.word	0x08007d81
 8007bd8:	08007d81 	.word	0x08007d81
 8007bdc:	08007d81 	.word	0x08007d81
 8007be0:	08007d81 	.word	0x08007d81
 8007be4:	08007d81 	.word	0x08007d81
 8007be8:	08007d81 	.word	0x08007d81
 8007bec:	08007d81 	.word	0x08007d81
 8007bf0:	08007d81 	.word	0x08007d81
 8007bf4:	08007d81 	.word	0x08007d81
 8007bf8:	08007d81 	.word	0x08007d81
 8007bfc:	08007d81 	.word	0x08007d81
 8007c00:	08007d81 	.word	0x08007d81
 8007c04:	08007d81 	.word	0x08007d81
 8007c08:	08007d81 	.word	0x08007d81
 8007c0c:	08007d81 	.word	0x08007d81
 8007c10:	08007d81 	.word	0x08007d81
 8007c14:	08007d81 	.word	0x08007d81
 8007c18:	08007d81 	.word	0x08007d81
 8007c1c:	08007d81 	.word	0x08007d81
 8007c20:	08007d81 	.word	0x08007d81
 8007c24:	08007d81 	.word	0x08007d81
 8007c28:	08007d81 	.word	0x08007d81
 8007c2c:	08007d81 	.word	0x08007d81
 8007c30:	08007d81 	.word	0x08007d81
 8007c34:	08007d81 	.word	0x08007d81
 8007c38:	08007d81 	.word	0x08007d81
 8007c3c:	08007d81 	.word	0x08007d81
 8007c40:	08007d81 	.word	0x08007d81
 8007c44:	08007d81 	.word	0x08007d81
 8007c48:	08007d81 	.word	0x08007d81
 8007c4c:	08007d81 	.word	0x08007d81
 8007c50:	08007d81 	.word	0x08007d81
 8007c54:	08007d81 	.word	0x08007d81
 8007c58:	08007d81 	.word	0x08007d81
 8007c5c:	08007d81 	.word	0x08007d81
 8007c60:	08007d81 	.word	0x08007d81
 8007c64:	08007d81 	.word	0x08007d81
 8007c68:	08007cdf 	.word	0x08007cdf
 8007c6c:	2b9e      	cmp	r3, #158	; 0x9e
 8007c6e:	d051      	beq.n	8007d14 <SCSI_ProcessCmd+0x26c>
 8007c70:	e086      	b.n	8007d80 <SCSI_ProcessCmd+0x2d8>
  {
    case SCSI_TEST_UNIT_READY:
      ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8007c72:	7afb      	ldrb	r3, [r7, #11]
 8007c74:	687a      	ldr	r2, [r7, #4]
 8007c76:	4619      	mov	r1, r3
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f000 f893 	bl	8007da4 <SCSI_TestUnitReady>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
      break;
 8007c82:	e089      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_REQUEST_SENSE:
      ret = SCSI_RequestSense(pdev, lun, cmd);
 8007c84:	7afb      	ldrb	r3, [r7, #11]
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f000 fb38 	bl	8008300 <SCSI_RequestSense>
 8007c90:	4603      	mov	r3, r0
 8007c92:	75fb      	strb	r3, [r7, #23]
      break;
 8007c94:	e080      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_INQUIRY:
      ret = SCSI_Inquiry(pdev, lun, cmd);
 8007c96:	7afb      	ldrb	r3, [r7, #11]
 8007c98:	687a      	ldr	r2, [r7, #4]
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f000 f8d1 	bl	8007e44 <SCSI_Inquiry>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	75fb      	strb	r3, [r7, #23]
      break;
 8007ca6:	e077      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_START_STOP_UNIT:
      ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8007ca8:	7afb      	ldrb	r3, [r7, #11]
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	4619      	mov	r1, r3
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	f000 fbec 	bl	800848c <SCSI_StartStopUnit>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	75fb      	strb	r3, [r7, #23]
      break;
 8007cb8:	e06e      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8007cba:	7afb      	ldrb	r3, [r7, #11]
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f000 fc34 	bl	800852e <SCSI_AllowPreventRemovable>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cca:	e065      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE6:
      ret = SCSI_ModeSense6(pdev, lun, cmd);
 8007ccc:	7afb      	ldrb	r3, [r7, #11]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	68f8      	ldr	r0, [r7, #12]
 8007cd4:	f000 fabc 	bl	8008250 <SCSI_ModeSense6>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	e05c      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_MODE_SENSE10:
      ret = SCSI_ModeSense10(pdev, lun, cmd);
 8007cde:	7afb      	ldrb	r3, [r7, #11]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	4619      	mov	r1, r3
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	f000 fadf 	bl	80082a8 <SCSI_ModeSense10>
 8007cea:	4603      	mov	r3, r0
 8007cec:	75fb      	strb	r3, [r7, #23]
      break;
 8007cee:	e053      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_FORMAT_CAPACITIES:
      ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8007cf0:	7afb      	ldrb	r3, [r7, #11]
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	4619      	mov	r1, r3
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	f000 fa37 	bl	800816a <SCSI_ReadFormatCapacity>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	75fb      	strb	r3, [r7, #23]
      break;
 8007d00:	e04a      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY10:
      ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4619      	mov	r1, r3
 8007d08:	68f8      	ldr	r0, [r7, #12]
 8007d0a:	f000 f90f 	bl	8007f2c <SCSI_ReadCapacity10>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	75fb      	strb	r3, [r7, #23]
      break;
 8007d12:	e041      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ_CAPACITY16:
      ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8007d14:	7afb      	ldrb	r3, [r7, #11]
 8007d16:	687a      	ldr	r2, [r7, #4]
 8007d18:	4619      	mov	r1, r3
 8007d1a:	68f8      	ldr	r0, [r7, #12]
 8007d1c:	f000 f97b 	bl	8008016 <SCSI_ReadCapacity16>
 8007d20:	4603      	mov	r3, r0
 8007d22:	75fb      	strb	r3, [r7, #23]
      break;
 8007d24:	e038      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ10:
      ret = SCSI_Read10(pdev, lun, cmd);
 8007d26:	7afb      	ldrb	r3, [r7, #11]
 8007d28:	687a      	ldr	r2, [r7, #4]
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f000 fc27 	bl	8008580 <SCSI_Read10>
 8007d32:	4603      	mov	r3, r0
 8007d34:	75fb      	strb	r3, [r7, #23]
      break;
 8007d36:	e02f      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_READ12:
      ret = SCSI_Read12(pdev, lun, cmd);
 8007d38:	7afb      	ldrb	r3, [r7, #11]
 8007d3a:	687a      	ldr	r2, [r7, #4]
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	68f8      	ldr	r0, [r7, #12]
 8007d40:	f000 fcbe 	bl	80086c0 <SCSI_Read12>
 8007d44:	4603      	mov	r3, r0
 8007d46:	75fb      	strb	r3, [r7, #23]
      break;
 8007d48:	e026      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE10:
      ret = SCSI_Write10(pdev, lun, cmd);
 8007d4a:	7afb      	ldrb	r3, [r7, #11]
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	4619      	mov	r1, r3
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 fd60 	bl	8008816 <SCSI_Write10>
 8007d56:	4603      	mov	r3, r0
 8007d58:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5a:	e01d      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_WRITE12:
      ret = SCSI_Write12(pdev, lun, cmd);
 8007d5c:	7afb      	ldrb	r3, [r7, #11]
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	4619      	mov	r1, r3
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f000 fe1c 	bl	80089a0 <SCSI_Write12>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d6c:	e014      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    case SCSI_VERIFY10:
      ret = SCSI_Verify10(pdev, lun, cmd);
 8007d6e:	7afb      	ldrb	r3, [r7, #11]
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	4619      	mov	r1, r3
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f000 fee8 	bl	8008b4a <SCSI_Verify10>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	75fb      	strb	r3, [r7, #23]
      break;
 8007d7e:	e00b      	b.n	8007d98 <SCSI_ProcessCmd+0x2f0>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8007d80:	7af9      	ldrb	r1, [r7, #11]
 8007d82:	2320      	movs	r3, #32
 8007d84:	2205      	movs	r2, #5
 8007d86:	68f8      	ldr	r0, [r7, #12]
 8007d88:	f000 fb39 	bl	80083fe <SCSI_SenseCode>
      hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	2202      	movs	r2, #2
 8007d90:	725a      	strb	r2, [r3, #9]
      ret = -1;
 8007d92:	23ff      	movs	r3, #255	; 0xff
 8007d94:	75fb      	strb	r3, [r7, #23]
      break;
 8007d96:	bf00      	nop
  }

  return ret;
 8007d98:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	3718      	adds	r7, #24
 8007da0:	46bd      	mov	sp, r7
 8007da2:	bd80      	pop	{r7, pc}

08007da4 <SCSI_TestUnitReady>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b086      	sub	sp, #24
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	460b      	mov	r3, r1
 8007dae:	607a      	str	r2, [r7, #4]
 8007db0:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007db8:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d102      	bne.n	8007dc6 <SCSI_TestUnitReady+0x22>
  {
    return -1;
 8007dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8007dc4:	e03a      	b.n	8007e3c <SCSI_TestUnitReady+0x98>
  }

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d00a      	beq.n	8007de6 <SCSI_TestUnitReady+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007dd6:	2320      	movs	r3, #32
 8007dd8:	2205      	movs	r2, #5
 8007dda:	68f8      	ldr	r0, [r7, #12]
 8007ddc:	f000 fb0f 	bl	80083fe <SCSI_SenseCode>

    return -1;
 8007de0:	f04f 33ff 	mov.w	r3, #4294967295
 8007de4:	e02a      	b.n	8007e3c <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007dec:	2b02      	cmp	r3, #2
 8007dee:	d10b      	bne.n	8007e08 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007df0:	7af9      	ldrb	r1, [r7, #11]
 8007df2:	233a      	movs	r3, #58	; 0x3a
 8007df4:	2202      	movs	r2, #2
 8007df6:	68f8      	ldr	r0, [r7, #12]
 8007df8:	f000 fb01 	bl	80083fe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	2205      	movs	r2, #5
 8007e00:	721a      	strb	r2, [r3, #8]
    return -1;
 8007e02:	f04f 33ff 	mov.w	r3, #4294967295
 8007e06:	e019      	b.n	8007e3c <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	7afa      	ldrb	r2, [r7, #11]
 8007e12:	4610      	mov	r0, r2
 8007e14:	4798      	blx	r3
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00b      	beq.n	8007e34 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007e1c:	7af9      	ldrb	r1, [r7, #11]
 8007e1e:	233a      	movs	r3, #58	; 0x3a
 8007e20:	2202      	movs	r2, #2
 8007e22:	68f8      	ldr	r0, [r7, #12]
 8007e24:	f000 faeb 	bl	80083fe <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2205      	movs	r2, #5
 8007e2c:	721a      	strb	r2, [r3, #8]

    return -1;
 8007e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e32:	e003      	b.n	8007e3c <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	2200      	movs	r2, #0
 8007e38:	60da      	str	r2, [r3, #12]

  return 0;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3718      	adds	r7, #24
 8007e40:	46bd      	mov	sp, r7
 8007e42:	bd80      	pop	{r7, pc}

08007e44 <SCSI_Inquiry>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b088      	sub	sp, #32
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	60f8      	str	r0, [r7, #12]
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	607a      	str	r2, [r7, #4]
 8007e50:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e58:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d102      	bne.n	8007e66 <SCSI_Inquiry+0x22>
  {
    return -1;
 8007e60:	f04f 33ff 	mov.w	r3, #4294967295
 8007e64:	e05a      	b.n	8007f1c <SCSI_Inquiry+0xd8>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8007e66:	69bb      	ldr	r3, [r7, #24]
 8007e68:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <SCSI_Inquiry+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007e70:	69bb      	ldr	r3, [r7, #24]
 8007e72:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007e76:	2320      	movs	r3, #32
 8007e78:	2205      	movs	r2, #5
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 fabf 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8007e80:	f04f 33ff 	mov.w	r3, #4294967295
 8007e84:	e04a      	b.n	8007f1c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	f003 0301 	and.w	r3, r3, #1
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d020      	beq.n	8007ed6 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3302      	adds	r3, #2
 8007e98:	781b      	ldrb	r3, [r3, #0]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d105      	bne.n	8007eaa <SCSI_Inquiry+0x66>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 8007e9e:	2206      	movs	r2, #6
 8007ea0:	4920      	ldr	r1, [pc, #128]	; (8007f24 <SCSI_Inquiry+0xe0>)
 8007ea2:	69b8      	ldr	r0, [r7, #24]
 8007ea4:	f000 ffb4 	bl	8008e10 <SCSI_UpdateBotData>
 8007ea8:	e037      	b.n	8007f1a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	3302      	adds	r3, #2
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	2b80      	cmp	r3, #128	; 0x80
 8007eb2:	d105      	bne.n	8007ec0 <SCSI_Inquiry+0x7c>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8007eb4:	2208      	movs	r2, #8
 8007eb6:	491c      	ldr	r1, [pc, #112]	; (8007f28 <SCSI_Inquiry+0xe4>)
 8007eb8:	69b8      	ldr	r0, [r7, #24]
 8007eba:	f000 ffa9 	bl	8008e10 <SCSI_UpdateBotData>
 8007ebe:	e02c      	b.n	8007f1a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8007ec6:	2324      	movs	r3, #36	; 0x24
 8007ec8:	2205      	movs	r2, #5
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f000 fa97 	bl	80083fe <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8007ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed4:	e022      	b.n	8007f1c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *) &((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007edc:	69d9      	ldr	r1, [r3, #28]
 8007ede:	7afa      	ldrb	r2, [r7, #11]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	4413      	add	r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	3304      	adds	r3, #4
 8007ef0:	781b      	ldrb	r3, [r3, #0]
 8007ef2:	b29b      	uxth	r3, r3
 8007ef4:	3305      	adds	r3, #5
 8007ef6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	3304      	adds	r3, #4
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	8bfa      	ldrh	r2, [r7, #30]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d303      	bcc.n	8007f0e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	3304      	adds	r3, #4
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 8007f0e:	8bfb      	ldrh	r3, [r7, #30]
 8007f10:	461a      	mov	r2, r3
 8007f12:	6979      	ldr	r1, [r7, #20]
 8007f14:	69b8      	ldr	r0, [r7, #24]
 8007f16:	f000 ff7b 	bl	8008e10 <SCSI_UpdateBotData>
  }

  return 0;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3720      	adds	r7, #32
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000304 	.word	0x20000304
 8007f28:	2000030c 	.word	0x2000030c

08007f2c <SCSI_ReadCapacity10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b086      	sub	sp, #24
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	460b      	mov	r3, r1
 8007f36:	607a      	str	r2, [r7, #4]
 8007f38:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f40:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d102      	bne.n	8007f4e <SCSI_ReadCapacity10+0x22>
  {
    return -1;
 8007f48:	f04f 33ff 	mov.w	r3, #4294967295
 8007f4c:	e05f      	b.n	800800e <SCSI_ReadCapacity10+0xe2>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8007f5c:	697a      	ldr	r2, [r7, #20]
 8007f5e:	f502 7219 	add.w	r2, r2, #612	; 0x264
 8007f62:	7af8      	ldrb	r0, [r7, #11]
 8007f64:	4798      	blx	r3
 8007f66:	4603      	mov	r3, r0
 8007f68:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8007f6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d104      	bne.n	8007f7c <SCSI_ReadCapacity10+0x50>
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d108      	bne.n	8007f8e <SCSI_ReadCapacity10+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007f7c:	7af9      	ldrb	r1, [r7, #11]
 8007f7e:	233a      	movs	r3, #58	; 0x3a
 8007f80:	2202      	movs	r2, #2
 8007f82:	68f8      	ldr	r0, [r7, #12]
 8007f84:	f000 fa3b 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	e03f      	b.n	800800e <SCSI_ReadCapacity10+0xe2>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007f8e:	697b      	ldr	r3, [r7, #20]
 8007f90:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007f94:	3b01      	subs	r3, #1
 8007f96:	0e1b      	lsrs	r3, r3, #24
 8007f98:	b2da      	uxtb	r2, r3
 8007f9a:	697b      	ldr	r3, [r7, #20]
 8007f9c:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	0c1b      	lsrs	r3, r3, #16
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007fb4:	3b01      	subs	r3, #1
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	b2da      	uxtb	r2, r3
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8007fc4:	b2db      	uxtb	r3, r3
 8007fc6:	3b01      	subs	r3, #1
 8007fc8:	b2da      	uxtb	r2, r3
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007fd4:	161b      	asrs	r3, r3, #24
 8007fd6:	b2da      	uxtb	r2, r3
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007fe2:	141b      	asrs	r3, r3, #16
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8007ff0:	0a1b      	lsrs	r3, r3, #8
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008000:	b2da      	uxtb	r2, r3
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	2208      	movs	r2, #8
 800800a:	60da      	str	r2, [r3, #12]

  return 0;
 800800c:	2300      	movs	r3, #0

}
 800800e:	4618      	mov	r0, r3
 8008010:	3718      	adds	r7, #24
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <SCSI_ReadCapacity16>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008016:	b580      	push	{r7, lr}
 8008018:	b088      	sub	sp, #32
 800801a:	af00      	add	r7, sp, #0
 800801c:	60f8      	str	r0, [r7, #12]
 800801e:	460b      	mov	r3, r1
 8008020:	607a      	str	r2, [r7, #4]
 8008022:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800802a:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d102      	bne.n	8008038 <SCSI_ReadCapacity16+0x22>
  {
    return -1;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295
 8008036:	e094      	b.n	8008162 <SCSI_ReadCapacity16+0x14c>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	f502 711a 	add.w	r1, r2, #616	; 0x268
 8008046:	69ba      	ldr	r2, [r7, #24]
 8008048:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800804c:	7af8      	ldrb	r0, [r7, #11]
 800804e:	4798      	blx	r3
 8008050:	4603      	mov	r3, r0
 8008052:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8008054:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d104      	bne.n	8008066 <SCSI_ReadCapacity16+0x50>
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008062:	2b02      	cmp	r3, #2
 8008064:	d108      	bne.n	8008078 <SCSI_ReadCapacity16+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008066:	7af9      	ldrb	r1, [r7, #11]
 8008068:	233a      	movs	r3, #58	; 0x3a
 800806a:	2202      	movs	r2, #2
 800806c:	68f8      	ldr	r0, [r7, #12]
 800806e:	f000 f9c6 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8008072:	f04f 33ff 	mov.w	r3, #4294967295
 8008076:	e074      	b.n	8008162 <SCSI_ReadCapacity16+0x14c>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	330a      	adds	r3, #10
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	330b      	adds	r3, #11
 8008084:	781b      	ldrb	r3, [r3, #0]
 8008086:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008088:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	330c      	adds	r3, #12
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008092:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	320d      	adds	r2, #13
 8008098:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800809a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80080a0:	2300      	movs	r3, #0
 80080a2:	77fb      	strb	r3, [r7, #31]
 80080a4:	e007      	b.n	80080b6 <SCSI_ReadCapacity16+0xa0>
  {
    hmsc->bot_data[idx] = 0U;
 80080a6:	7ffb      	ldrb	r3, [r7, #31]
 80080a8:	69ba      	ldr	r2, [r7, #24]
 80080aa:	4413      	add	r3, r2
 80080ac:	2200      	movs	r2, #0
 80080ae:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80080b0:	7ffb      	ldrb	r3, [r7, #31]
 80080b2:	3301      	adds	r3, #1
 80080b4:	77fb      	strb	r3, [r7, #31]
 80080b6:	7ffa      	ldrb	r2, [r7, #31]
 80080b8:	69bb      	ldr	r3, [r7, #24]
 80080ba:	68db      	ldr	r3, [r3, #12]
 80080bc:	429a      	cmp	r2, r3
 80080be:	d3f2      	bcc.n	80080a6 <SCSI_ReadCapacity16+0x90>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80080c0:	69bb      	ldr	r3, [r7, #24]
 80080c2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080c6:	3b01      	subs	r3, #1
 80080c8:	0e1b      	lsrs	r3, r3, #24
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	69bb      	ldr	r3, [r7, #24]
 80080ce:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080d6:	3b01      	subs	r3, #1
 80080d8:	0c1b      	lsrs	r3, r3, #16
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080e6:	3b01      	subs	r3, #1
 80080e8:	0a1b      	lsrs	r3, r3, #8
 80080ea:	b2da      	uxtb	r2, r3
 80080ec:	69bb      	ldr	r3, [r7, #24]
 80080ee:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 80080f0:	69bb      	ldr	r3, [r7, #24]
 80080f2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	3b01      	subs	r3, #1
 80080fa:	b2da      	uxtb	r2, r3
 80080fc:	69bb      	ldr	r3, [r7, #24]
 80080fe:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8008100:	69bb      	ldr	r3, [r7, #24]
 8008102:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008106:	161b      	asrs	r3, r3, #24
 8008108:	b2da      	uxtb	r2, r3
 800810a:	69bb      	ldr	r3, [r7, #24]
 800810c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800810e:	69bb      	ldr	r3, [r7, #24]
 8008110:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008114:	141b      	asrs	r3, r3, #16
 8008116:	b2da      	uxtb	r2, r3
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800811c:	69bb      	ldr	r3, [r7, #24]
 800811e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008122:	0a1b      	lsrs	r3, r3, #8
 8008124:	b29b      	uxth	r3, r3
 8008126:	b2da      	uxtb	r2, r3
 8008128:	69bb      	ldr	r3, [r7, #24]
 800812a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800812c:	69bb      	ldr	r3, [r7, #24]
 800812e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008132:	b2da      	uxtb	r2, r3
 8008134:	69bb      	ldr	r3, [r7, #24]
 8008136:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	330a      	adds	r3, #10
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	330b      	adds	r3, #11
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8008148:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	330c      	adds	r3, #12
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8008152:	4313      	orrs	r3, r2
                          (uint32_t)params[13];
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	320d      	adds	r2, #13
 8008158:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800815a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	60da      	str	r2, [r3, #12]

  return 0;
 8008160:	2300      	movs	r3, #0
}
 8008162:	4618      	mov	r0, r3
 8008164:	3720      	adds	r7, #32
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}

0800816a <SCSI_ReadFormatCapacity>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800816a:	b580      	push	{r7, lr}
 800816c:	b088      	sub	sp, #32
 800816e:	af00      	add	r7, sp, #0
 8008170:	60f8      	str	r0, [r7, #12]
 8008172:	460b      	mov	r3, r1
 8008174:	607a      	str	r2, [r7, #4]
 8008176:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800817e:	61bb      	str	r3, [r7, #24]

  if (hmsc == NULL)
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <SCSI_ReadFormatCapacity+0x22>
  {
    return -1;
 8008186:	f04f 33ff 	mov.w	r3, #4294967295
 800818a:	e05c      	b.n	8008246 <SCSI_ReadFormatCapacity+0xdc>
  }

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	f107 0214 	add.w	r2, r7, #20
 8008198:	f107 0110 	add.w	r1, r7, #16
 800819c:	7af8      	ldrb	r0, [r7, #11]
 800819e:	4798      	blx	r3
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80081a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d104      	bne.n	80081b6 <SCSI_ReadFormatCapacity+0x4c>
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d108      	bne.n	80081c8 <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80081b6:	7af9      	ldrb	r1, [r7, #11]
 80081b8:	233a      	movs	r3, #58	; 0x3a
 80081ba:	2202      	movs	r2, #2
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f91e 	bl	80083fe <SCSI_SenseCode>
    return -1;
 80081c2:	f04f 33ff 	mov.w	r3, #4294967295
 80081c6:	e03e      	b.n	8008246 <SCSI_ReadFormatCapacity+0xdc>
  }

  for (i = 0U; i < 12U ; i++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	83fb      	strh	r3, [r7, #30]
 80081cc:	e007      	b.n	80081de <SCSI_ReadFormatCapacity+0x74>
  {
    hmsc->bot_data[i] = 0U;
 80081ce:	8bfb      	ldrh	r3, [r7, #30]
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	4413      	add	r3, r2
 80081d4:	2200      	movs	r2, #0
 80081d6:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 80081d8:	8bfb      	ldrh	r3, [r7, #30]
 80081da:	3301      	adds	r3, #1
 80081dc:	83fb      	strh	r3, [r7, #30]
 80081de:	8bfb      	ldrh	r3, [r7, #30]
 80081e0:	2b0b      	cmp	r3, #11
 80081e2:	d9f4      	bls.n	80081ce <SCSI_ReadFormatCapacity+0x64>
  }

  hmsc->bot_data[3] = 0x08U;
 80081e4:	69bb      	ldr	r3, [r7, #24]
 80081e6:	2208      	movs	r2, #8
 80081e8:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	3b01      	subs	r3, #1
 80081ee:	0e1b      	lsrs	r3, r3, #24
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	3b01      	subs	r3, #1
 80081fa:	0c1b      	lsrs	r3, r3, #16
 80081fc:	b2da      	uxtb	r2, r3
 80081fe:	69bb      	ldr	r3, [r7, #24]
 8008200:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	3b01      	subs	r3, #1
 8008206:	0a1b      	lsrs	r3, r3, #8
 8008208:	b2da      	uxtb	r2, r3
 800820a:	69bb      	ldr	r3, [r7, #24]
 800820c:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	b2db      	uxtb	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b2da      	uxtb	r2, r3
 8008216:	69bb      	ldr	r3, [r7, #24]
 8008218:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	2202      	movs	r2, #2
 800821e:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8008220:	8abb      	ldrh	r3, [r7, #20]
 8008222:	141b      	asrs	r3, r3, #16
 8008224:	b2da      	uxtb	r2, r3
 8008226:	69bb      	ldr	r3, [r7, #24]
 8008228:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800822a:	8abb      	ldrh	r3, [r7, #20]
 800822c:	0a1b      	lsrs	r3, r3, #8
 800822e:	b29b      	uxth	r3, r3
 8008230:	b2da      	uxtb	r2, r3
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8008236:	8abb      	ldrh	r3, [r7, #20]
 8008238:	b2da      	uxtb	r2, r3
 800823a:	69bb      	ldr	r3, [r7, #24]
 800823c:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	220c      	movs	r2, #12
 8008242:	60da      	str	r2, [r3, #12]

  return 0;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3720      	adds	r7, #32
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}
	...

08008250 <SCSI_ModeSense6>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b086      	sub	sp, #24
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	460b      	mov	r3, r1
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008264:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8008266:	2317      	movs	r3, #23
 8008268:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d102      	bne.n	8008276 <SCSI_ModeSense6+0x26>
  {
    return -1;
 8008270:	f04f 33ff 	mov.w	r3, #4294967295
 8008274:	e011      	b.n	800829a <SCSI_ModeSense6+0x4a>
  }

  if (params[4] <= len)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	3304      	adds	r3, #4
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	b29b      	uxth	r3, r3
 800827e:	8afa      	ldrh	r2, [r7, #22]
 8008280:	429a      	cmp	r2, r3
 8008282:	d303      	bcc.n	800828c <SCSI_ModeSense6+0x3c>
  {
    len = params[4];
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3304      	adds	r3, #4
 8008288:	781b      	ldrb	r3, [r3, #0]
 800828a:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800828c:	8afb      	ldrh	r3, [r7, #22]
 800828e:	461a      	mov	r2, r3
 8008290:	4904      	ldr	r1, [pc, #16]	; (80082a4 <SCSI_ModeSense6+0x54>)
 8008292:	6938      	ldr	r0, [r7, #16]
 8008294:	f000 fdbc 	bl	8008e10 <SCSI_UpdateBotData>

  return 0;
 8008298:	2300      	movs	r3, #0
}
 800829a:	4618      	mov	r0, r3
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000314 	.word	0x20000314

080082a8 <SCSI_ModeSense10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b086      	sub	sp, #24
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	460b      	mov	r3, r1
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082bc:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 80082be:	231b      	movs	r3, #27
 80082c0:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d102      	bne.n	80082ce <SCSI_ModeSense10+0x26>
  {
    return -1;
 80082c8:	f04f 33ff 	mov.w	r3, #4294967295
 80082cc:	e011      	b.n	80082f2 <SCSI_ModeSense10+0x4a>
  }

  if (params[8] <= len)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	3308      	adds	r3, #8
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	8afa      	ldrh	r2, [r7, #22]
 80082d8:	429a      	cmp	r2, r3
 80082da:	d303      	bcc.n	80082e4 <SCSI_ModeSense10+0x3c>
  {
    len = params[8];
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3308      	adds	r3, #8
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	461a      	mov	r2, r3
 80082e8:	4904      	ldr	r1, [pc, #16]	; (80082fc <SCSI_ModeSense10+0x54>)
 80082ea:	6938      	ldr	r0, [r7, #16]
 80082ec:	f000 fd90 	bl	8008e10 <SCSI_UpdateBotData>

  return 0;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop
 80082fc:	2000032c 	.word	0x2000032c

08008300 <SCSI_RequestSense>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b086      	sub	sp, #24
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	460b      	mov	r3, r1
 800830a:	607a      	str	r2, [r7, #4]
 800830c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008314:	613b      	str	r3, [r7, #16]

  if (hmsc == NULL)
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <SCSI_RequestSense+0x22>
  {
    return -1;
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	e069      	b.n	80083f6 <SCSI_RequestSense+0xf6>
  }

  if (hmsc->cbw.dDataLength == 0U)
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008328:	2b00      	cmp	r3, #0
 800832a:	d10a      	bne.n	8008342 <SCSI_RequestSense+0x42>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008332:	2320      	movs	r3, #32
 8008334:	2205      	movs	r2, #5
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f861 	bl	80083fe <SCSI_SenseCode>
    return -1;
 800833c:	f04f 33ff 	mov.w	r3, #4294967295
 8008340:	e059      	b.n	80083f6 <SCSI_RequestSense+0xf6>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]
 8008346:	e007      	b.n	8008358 <SCSI_RequestSense+0x58>
  {
    hmsc->bot_data[i] = 0U;
 8008348:	7dfb      	ldrb	r3, [r7, #23]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4413      	add	r3, r2
 800834e:	2200      	movs	r2, #0
 8008350:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8008352:	7dfb      	ldrb	r3, [r7, #23]
 8008354:	3301      	adds	r3, #1
 8008356:	75fb      	strb	r3, [r7, #23]
 8008358:	7dfb      	ldrb	r3, [r7, #23]
 800835a:	2b11      	cmp	r3, #17
 800835c:	d9f4      	bls.n	8008348 <SCSI_RequestSense+0x48>
  }

  hmsc->bot_data[0] = 0x70U;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2270      	movs	r2, #112	; 0x70
 8008362:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	220c      	movs	r2, #12
 8008368:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008376:	429a      	cmp	r2, r3
 8008378:	d02e      	beq.n	80083d8 <SCSI_RequestSense+0xd8>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800837a:	693b      	ldr	r3, [r7, #16]
 800837c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008380:	461a      	mov	r2, r3
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	3248      	adds	r2, #72	; 0x48
 8008386:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	3348      	adds	r3, #72	; 0x48
 8008398:	00db      	lsls	r3, r3, #3
 800839a:	4413      	add	r3, r2
 800839c:	791a      	ldrb	r2, [r3, #4]
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083a8:	693a      	ldr	r2, [r7, #16]
 80083aa:	3348      	adds	r3, #72	; 0x48
 80083ac:	00db      	lsls	r3, r3, #3
 80083ae:	4413      	add	r3, r2
 80083b0:	795a      	ldrb	r2, [r3, #5]
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 80083b6:	693b      	ldr	r3, [r7, #16]
 80083b8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083bc:	3301      	adds	r3, #1
 80083be:	b2da      	uxtb	r2, r3
 80083c0:	693b      	ldr	r3, [r7, #16]
 80083c2:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80083cc:	2b04      	cmp	r3, #4
 80083ce:	d103      	bne.n	80083d8 <SCSI_RequestSense+0xd8>
    {
      hmsc->scsi_sense_head = 0U;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	2212      	movs	r2, #18
 80083dc:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	3304      	adds	r3, #4
 80083e2:	781b      	ldrb	r3, [r3, #0]
 80083e4:	2b12      	cmp	r3, #18
 80083e6:	d805      	bhi.n	80083f4 <SCSI_RequestSense+0xf4>
  {
    hmsc->bot_data_length = params[4];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	3304      	adds	r3, #4
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	461a      	mov	r2, r3
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	60da      	str	r2, [r3, #12]
  }

  return 0;
 80083f4:	2300      	movs	r3, #0
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <SCSI_SenseCode>:
  * @param  ASC: Additional Sense Code
  * @retval none

  */
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 80083fe:	b480      	push	{r7}
 8008400:	b085      	sub	sp, #20
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	4608      	mov	r0, r1
 8008408:	4611      	mov	r1, r2
 800840a:	461a      	mov	r2, r3
 800840c:	4603      	mov	r3, r0
 800840e:	70fb      	strb	r3, [r7, #3]
 8008410:	460b      	mov	r3, r1
 8008412:	70bb      	strb	r3, [r7, #2]
 8008414:	4613      	mov	r3, r2
 8008416:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d02c      	beq.n	8008480 <SCSI_SenseCode+0x82>
  {
    return;
  }

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800842c:	461a      	mov	r2, r3
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3248      	adds	r2, #72	; 0x48
 8008432:	78b9      	ldrb	r1, [r7, #2]
 8008434:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800843e:	68fa      	ldr	r2, [r7, #12]
 8008440:	3348      	adds	r3, #72	; 0x48
 8008442:	00db      	lsls	r3, r3, #3
 8008444:	4413      	add	r3, r2
 8008446:	787a      	ldrb	r2, [r7, #1]
 8008448:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	3348      	adds	r3, #72	; 0x48
 8008454:	00db      	lsls	r3, r3, #3
 8008456:	4413      	add	r3, r2
 8008458:	2200      	movs	r2, #0
 800845a:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008462:	3301      	adds	r3, #1
 8008464:	b2da      	uxtb	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 8008472:	2b04      	cmp	r3, #4
 8008474:	d105      	bne.n	8008482 <SCSI_SenseCode+0x84>
  {
    hmsc->scsi_sense_tail = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
 800847e:	e000      	b.n	8008482 <SCSI_SenseCode+0x84>
    return;
 8008480:	bf00      	nop
  }
}
 8008482:	3714      	adds	r7, #20
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <SCSI_StartStopUnit>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b086      	sub	sp, #24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	460b      	mov	r3, r1
 8008496:	607a      	str	r2, [r7, #4]
 8008498:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80084a0:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d102      	bne.n	80084ae <SCSI_StartStopUnit+0x22>
  {
    return -1;
 80084a8:	f04f 33ff 	mov.w	r3, #4294967295
 80084ac:	e03b      	b.n	8008526 <SCSI_StartStopUnit+0x9a>
  }

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d10f      	bne.n	80084d8 <SCSI_StartStopUnit+0x4c>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3304      	adds	r3, #4
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	f003 0303 	and.w	r3, r3, #3
 80084c2:	2b02      	cmp	r3, #2
 80084c4:	d108      	bne.n	80084d8 <SCSI_StartStopUnit+0x4c>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 80084c6:	7af9      	ldrb	r1, [r7, #11]
 80084c8:	2324      	movs	r3, #36	; 0x24
 80084ca:	2205      	movs	r2, #5
 80084cc:	68f8      	ldr	r0, [r7, #12]
 80084ce:	f7ff ff96 	bl	80083fe <SCSI_SenseCode>

    return -1;
 80084d2:	f04f 33ff 	mov.w	r3, #4294967295
 80084d6:	e026      	b.n	8008526 <SCSI_StartStopUnit+0x9a>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	781b      	ldrb	r3, [r3, #0]
 80084de:	f003 0303 	and.w	r3, r3, #3
 80084e2:	2b01      	cmp	r3, #1
 80084e4:	d104      	bne.n	80084f0 <SCSI_StartStopUnit+0x64>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 80084ee:	e016      	b.n	800851e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	3304      	adds	r3, #4
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	f003 0303 	and.w	r3, r3, #3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d104      	bne.n	8008508 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2202      	movs	r2, #2
 8008502:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008506:	e00a      	b.n	800851e <SCSI_StartStopUnit+0x92>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	3304      	adds	r3, #4
 800850c:	781b      	ldrb	r3, [r3, #0]
 800850e:	f003 0303 	and.w	r3, r3, #3
 8008512:	2b03      	cmp	r3, #3
 8008514:	d103      	bne.n	800851e <SCSI_StartStopUnit+0x92>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2200      	movs	r2, #0
 800851a:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	2200      	movs	r2, #0
 8008522:	60da      	str	r2, [r3, #12]

  return 0;
 8008524:	2300      	movs	r3, #0
}
 8008526:	4618      	mov	r0, r3
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <SCSI_AllowPreventRemovable>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800852e:	b480      	push	{r7}
 8008530:	b087      	sub	sp, #28
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	460b      	mov	r3, r1
 8008538:	607a      	str	r2, [r7, #4]
 800853a:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008542:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d102      	bne.n	8008550 <SCSI_AllowPreventRemovable+0x22>
  {
    return -1;
 800854a:	f04f 33ff 	mov.w	r3, #4294967295
 800854e:	e011      	b.n	8008574 <SCSI_AllowPreventRemovable+0x46>
  }

  if (params[4] == 0U)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	3304      	adds	r3, #4
 8008554:	781b      	ldrb	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d104      	bne.n	8008564 <SCSI_AllowPreventRemovable+0x36>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2200      	movs	r2, #0
 800855e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 8008562:	e003      	b.n	800856c <SCSI_AllowPreventRemovable+0x3e>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800856c:	697b      	ldr	r3, [r7, #20]
 800856e:	2200      	movs	r2, #0
 8008570:	60da      	str	r2, [r3, #12]

  return 0;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	371c      	adds	r7, #28
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <SCSI_Read10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	460b      	mov	r3, r1
 800858a:	607a      	str	r2, [r7, #4]
 800858c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008594:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <SCSI_Read10+0x22>
  {
    return -1;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295
 80085a0:	e08a      	b.n	80086b8 <SCSI_Read10+0x138>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	7a1b      	ldrb	r3, [r3, #8]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d17c      	bne.n	80086a4 <SCSI_Read10+0x124>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80085b0:	b25b      	sxtb	r3, r3
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	db0a      	blt.n	80085cc <SCSI_Read10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80085bc:	2320      	movs	r3, #32
 80085be:	2205      	movs	r2, #5
 80085c0:	68f8      	ldr	r0, [r7, #12]
 80085c2:	f7ff ff1c 	bl	80083fe <SCSI_SenseCode>
      return -1;
 80085c6:	f04f 33ff 	mov.w	r3, #4294967295
 80085ca:	e075      	b.n	80086b8 <SCSI_Read10+0x138>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d108      	bne.n	80085e8 <SCSI_Read10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80085d6:	7af9      	ldrb	r1, [r7, #11]
 80085d8:	233a      	movs	r3, #58	; 0x3a
 80085da:	2202      	movs	r2, #2
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f7ff ff0e 	bl	80083fe <SCSI_SenseCode>

      return -1;
 80085e2:	f04f 33ff 	mov.w	r3, #4294967295
 80085e6:	e067      	b.n	80086b8 <SCSI_Read10+0x138>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	7afa      	ldrb	r2, [r7, #11]
 80085f2:	4610      	mov	r0, r2
 80085f4:	4798      	blx	r3
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d008      	beq.n	800860e <SCSI_Read10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80085fc:	7af9      	ldrb	r1, [r7, #11]
 80085fe:	233a      	movs	r3, #58	; 0x3a
 8008600:	2202      	movs	r2, #2
 8008602:	68f8      	ldr	r0, [r7, #12]
 8008604:	f7ff fefb 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008608:	f04f 33ff 	mov.w	r3, #4294967295
 800860c:	e054      	b.n	80086b8 <SCSI_Read10+0x138>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	3302      	adds	r3, #2
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	3303      	adds	r3, #3
 800861a:	781b      	ldrb	r3, [r3, #0]
 800861c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800861e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3304      	adds	r3, #4
 8008624:	781b      	ldrb	r3, [r3, #0]
 8008626:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008628:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	3205      	adds	r2, #5
 800862e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008630:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	3307      	adds	r3, #7
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	021b      	lsls	r3, r3, #8
 8008640:	687a      	ldr	r2, [r7, #4]
 8008642:	3208      	adds	r2, #8
 8008644:	7812      	ldrb	r2, [r2, #0]
 8008646:	431a      	orrs	r2, r3
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800865a:	7af9      	ldrb	r1, [r7, #11]
 800865c:	68f8      	ldr	r0, [r7, #12]
 800865e:	f000 faad 	bl	8008bbc <SCSI_CheckAddressRange>
 8008662:	4603      	mov	r3, r0
 8008664:	2b00      	cmp	r3, #0
 8008666:	da02      	bge.n	800866e <SCSI_Read10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008668:	f04f 33ff 	mov.w	r3, #4294967295
 800866c:	e024      	b.n	80086b8 <SCSI_Read10+0x138>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800867a:	6979      	ldr	r1, [r7, #20]
 800867c:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 8008680:	fb01 f303 	mul.w	r3, r1, r3
 8008684:	429a      	cmp	r2, r3
 8008686:	d00a      	beq.n	800869e <SCSI_Read10+0x11e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800868e:	2320      	movs	r3, #32
 8008690:	2205      	movs	r2, #5
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f7ff feb3 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008698:	f04f 33ff 	mov.w	r3, #4294967295
 800869c:	e00c      	b.n	80086b8 <SCSI_Read10+0x138>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800869e:	697b      	ldr	r3, [r7, #20]
 80086a0:	2202      	movs	r2, #2
 80086a2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80086a4:	697b      	ldr	r3, [r7, #20]
 80086a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086aa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 80086ac:	7afb      	ldrb	r3, [r7, #11]
 80086ae:	4619      	mov	r1, r3
 80086b0:	68f8      	ldr	r0, [r7, #12]
 80086b2:	f000 faab 	bl	8008c0c <SCSI_ProcessRead>
 80086b6:	4603      	mov	r3, r0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}

080086c0 <SCSI_Read12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b086      	sub	sp, #24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	460b      	mov	r3, r1
 80086ca:	607a      	str	r2, [r7, #4]
 80086cc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80086d4:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d102      	bne.n	80086e2 <SCSI_Read12+0x22>
  {
    return -1;
 80086dc:	f04f 33ff 	mov.w	r3, #4294967295
 80086e0:	e095      	b.n	800880e <SCSI_Read12+0x14e>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	7a1b      	ldrb	r3, [r3, #8]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f040 8087 	bne.w	80087fa <SCSI_Read12+0x13a>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80086f2:	b25b      	sxtb	r3, r3
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	db0a      	blt.n	800870e <SCSI_Read12+0x4e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80086fe:	2320      	movs	r3, #32
 8008700:	2205      	movs	r2, #5
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fe7b 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008708:	f04f 33ff 	mov.w	r3, #4294967295
 800870c:	e07f      	b.n	800880e <SCSI_Read12+0x14e>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 8008714:	2b02      	cmp	r3, #2
 8008716:	d108      	bne.n	800872a <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008718:	7af9      	ldrb	r1, [r7, #11]
 800871a:	233a      	movs	r3, #58	; 0x3a
 800871c:	2202      	movs	r2, #2
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f7ff fe6d 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008724:	f04f 33ff 	mov.w	r3, #4294967295
 8008728:	e071      	b.n	800880e <SCSI_Read12+0x14e>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	7afa      	ldrb	r2, [r7, #11]
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d008      	beq.n	8008750 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800873e:	7af9      	ldrb	r1, [r7, #11]
 8008740:	233a      	movs	r3, #58	; 0x3a
 8008742:	2202      	movs	r2, #2
 8008744:	68f8      	ldr	r0, [r7, #12]
 8008746:	f7ff fe5a 	bl	80083fe <SCSI_SenseCode>
      return -1;
 800874a:	f04f 33ff 	mov.w	r3, #4294967295
 800874e:	e05e      	b.n	800880e <SCSI_Read12+0x14e>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3302      	adds	r3, #2
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	3303      	adds	r3, #3
 800875c:	781b      	ldrb	r3, [r3, #0]
 800875e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008760:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	3304      	adds	r3, #4
 8008766:	781b      	ldrb	r3, [r3, #0]
 8008768:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800876a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	3205      	adds	r2, #5
 8008770:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8008772:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	3306      	adds	r3, #6
 800877e:	781b      	ldrb	r3, [r3, #0]
 8008780:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	3307      	adds	r3, #7
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800878a:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	3308      	adds	r3, #8
 8008790:	781b      	ldrb	r3, [r3, #0]
 8008792:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008794:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	3209      	adds	r2, #9
 800879a:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800879c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 80087a4:	697b      	ldr	r3, [r7, #20]
 80087a6:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087b0:	7af9      	ldrb	r1, [r7, #11]
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f000 fa02 	bl	8008bbc <SCSI_CheckAddressRange>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	da02      	bge.n	80087c4 <SCSI_Read12+0x104>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80087be:	f04f 33ff 	mov.w	r3, #4294967295
 80087c2:	e024      	b.n	800880e <SCSI_Read12+0x14e>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80087c4:	697b      	ldr	r3, [r7, #20]
 80087c6:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80087d0:	6979      	ldr	r1, [r7, #20]
 80087d2:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 80087d6:	fb01 f303 	mul.w	r3, r1, r3
 80087da:	429a      	cmp	r2, r3
 80087dc:	d00a      	beq.n	80087f4 <SCSI_Read12+0x134>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80087e4:	2320      	movs	r3, #32
 80087e6:	2205      	movs	r2, #5
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f7ff fe08 	bl	80083fe <SCSI_SenseCode>
      return -1;
 80087ee:	f04f 33ff 	mov.w	r3, #4294967295
 80087f2:	e00c      	b.n	800880e <SCSI_Read12+0x14e>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	2202      	movs	r2, #2
 80087f8:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008800:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8008802:	7afb      	ldrb	r3, [r7, #11]
 8008804:	4619      	mov	r1, r3
 8008806:	68f8      	ldr	r0, [r7, #12]
 8008808:	f000 fa00 	bl	8008c0c <SCSI_ProcessRead>
 800880c:	4603      	mov	r3, r0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3718      	adds	r7, #24
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <SCSI_Write10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b086      	sub	sp, #24
 800881a:	af00      	add	r7, sp, #0
 800881c:	60f8      	str	r0, [r7, #12]
 800881e:	460b      	mov	r3, r1
 8008820:	607a      	str	r2, [r7, #4]
 8008822:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800882a:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <SCSI_Write10+0x22>
  {
    return -1;
 8008832:	f04f 33ff 	mov.w	r3, #4294967295
 8008836:	e0af      	b.n	8008998 <SCSI_Write10+0x182>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	7a1b      	ldrb	r3, [r3, #8]
 800883c:	2b00      	cmp	r3, #0
 800883e:	f040 80a5 	bne.w	800898c <SCSI_Write10+0x176>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8008842:	697b      	ldr	r3, [r7, #20]
 8008844:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10a      	bne.n	8008862 <SCSI_Write10+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008852:	2320      	movs	r3, #32
 8008854:	2205      	movs	r2, #5
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7ff fdd1 	bl	80083fe <SCSI_SenseCode>
      return -1;
 800885c:	f04f 33ff 	mov.w	r3, #4294967295
 8008860:	e09a      	b.n	8008998 <SCSI_Write10+0x182>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8008868:	b25b      	sxtb	r3, r3
 800886a:	2b00      	cmp	r3, #0
 800886c:	da0a      	bge.n	8008884 <SCSI_Write10+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008874:	2320      	movs	r3, #32
 8008876:	2205      	movs	r2, #5
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fdc0 	bl	80083fe <SCSI_SenseCode>
      return -1;
 800887e:	f04f 33ff 	mov.w	r3, #4294967295
 8008882:	e089      	b.n	8008998 <SCSI_Write10+0x182>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	7afa      	ldrb	r2, [r7, #11]
 800888e:	4610      	mov	r0, r2
 8008890:	4798      	blx	r3
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	d008      	beq.n	80088aa <SCSI_Write10+0x94>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008898:	7af9      	ldrb	r1, [r7, #11]
 800889a:	233a      	movs	r3, #58	; 0x3a
 800889c:	2202      	movs	r2, #2
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f7ff fdad 	bl	80083fe <SCSI_SenseCode>
      return -1;
 80088a4:	f04f 33ff 	mov.w	r3, #4294967295
 80088a8:	e076      	b.n	8008998 <SCSI_Write10+0x182>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	7afa      	ldrb	r2, [r7, #11]
 80088b4:	4610      	mov	r0, r2
 80088b6:	4798      	blx	r3
 80088b8:	4603      	mov	r3, r0
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d008      	beq.n	80088d0 <SCSI_Write10+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80088be:	7af9      	ldrb	r1, [r7, #11]
 80088c0:	2327      	movs	r3, #39	; 0x27
 80088c2:	2202      	movs	r2, #2
 80088c4:	68f8      	ldr	r0, [r7, #12]
 80088c6:	f7ff fd9a 	bl	80083fe <SCSI_SenseCode>
      return -1;
 80088ca:	f04f 33ff 	mov.w	r3, #4294967295
 80088ce:	e063      	b.n	8008998 <SCSI_Write10+0x182>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	3302      	adds	r3, #2
 80088d4:	781b      	ldrb	r3, [r3, #0]
 80088d6:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3303      	adds	r3, #3
 80088dc:	781b      	ldrb	r3, [r3, #0]
 80088de:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80088e0:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	3304      	adds	r3, #4
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80088ea:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80088ec:	687a      	ldr	r2, [r7, #4]
 80088ee:	3205      	adds	r2, #5
 80088f0:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 80088f2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	3307      	adds	r3, #7
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	3208      	adds	r2, #8
 8008906:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8008908:	431a      	orrs	r2, r3
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008910:	697b      	ldr	r3, [r7, #20]
 8008912:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800891c:	7af9      	ldrb	r1, [r7, #11]
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f000 f94c 	bl	8008bbc <SCSI_CheckAddressRange>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	da02      	bge.n	8008930 <SCSI_Write10+0x11a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800892a:	f04f 33ff 	mov.w	r3, #4294967295
 800892e:	e033      	b.n	8008998 <SCSI_Write10+0x182>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008936:	697a      	ldr	r2, [r7, #20]
 8008938:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800893c:	fb02 f303 	mul.w	r3, r2, r3
 8008940:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008948:	693a      	ldr	r2, [r7, #16]
 800894a:	429a      	cmp	r2, r3
 800894c:	d00a      	beq.n	8008964 <SCSI_Write10+0x14e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008954:	2320      	movs	r3, #32
 8008956:	2205      	movs	r2, #5
 8008958:	68f8      	ldr	r0, [r7, #12]
 800895a:	f7ff fd50 	bl	80083fe <SCSI_SenseCode>
      return -1;
 800895e:	f04f 33ff 	mov.w	r3, #4294967295
 8008962:	e019      	b.n	8008998 <SCSI_Write10+0x182>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800896a:	bf28      	it	cs
 800896c:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008970:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	2201      	movs	r2, #1
 8008976:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f103 0210 	add.w	r2, r3, #16
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	2101      	movs	r1, #1
 8008982:	68f8      	ldr	r0, [r7, #12]
 8008984:	f000 fdd1 	bl	800952a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008988:	2300      	movs	r3, #0
 800898a:	e005      	b.n	8008998 <SCSI_Write10+0x182>
    return SCSI_ProcessWrite(pdev, lun);
 800898c:	7afb      	ldrb	r3, [r7, #11]
 800898e:	4619      	mov	r1, r3
 8008990:	68f8      	ldr	r0, [r7, #12]
 8008992:	f000 f9b4 	bl	8008cfe <SCSI_ProcessWrite>
 8008996:	4603      	mov	r3, r0
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <SCSI_Write12>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	460b      	mov	r3, r1
 80089aa:	607a      	str	r2, [r7, #4]
 80089ac:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80089b4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc == NULL)
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d102      	bne.n	80089c2 <SCSI_Write12+0x22>
  {
    return -1;
 80089bc:	f04f 33ff 	mov.w	r3, #4294967295
 80089c0:	e0bf      	b.n	8008b42 <SCSI_Write12+0x1a2>
  }

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	7a1b      	ldrb	r3, [r3, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f040 80b5 	bne.w	8008b36 <SCSI_Write12+0x196>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d10a      	bne.n	80089ec <SCSI_Write12+0x4c>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80089dc:	2320      	movs	r3, #32
 80089de:	2205      	movs	r2, #5
 80089e0:	68f8      	ldr	r0, [r7, #12]
 80089e2:	f7ff fd0c 	bl	80083fe <SCSI_SenseCode>
      return -1;
 80089e6:	f04f 33ff 	mov.w	r3, #4294967295
 80089ea:	e0aa      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80089f2:	b25b      	sxtb	r3, r3
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	da0a      	bge.n	8008a0e <SCSI_Write12+0x6e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 80089fe:	2320      	movs	r3, #32
 8008a00:	2205      	movs	r2, #5
 8008a02:	68f8      	ldr	r0, [r7, #12]
 8008a04:	f7ff fcfb 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008a08:	f04f 33ff 	mov.w	r3, #4294967295
 8008a0c:	e099      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	7afa      	ldrb	r2, [r7, #11]
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d00b      	beq.n	8008a3a <SCSI_Write12+0x9a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8008a22:	7af9      	ldrb	r1, [r7, #11]
 8008a24:	233a      	movs	r3, #58	; 0x3a
 8008a26:	2202      	movs	r2, #2
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff fce8 	bl	80083fe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	2205      	movs	r2, #5
 8008a32:	721a      	strb	r2, [r3, #8]
      return -1;
 8008a34:	f04f 33ff 	mov.w	r3, #4294967295
 8008a38:	e083      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	7afa      	ldrb	r2, [r7, #11]
 8008a44:	4610      	mov	r0, r2
 8008a46:	4798      	blx	r3
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00b      	beq.n	8008a66 <SCSI_Write12+0xc6>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8008a4e:	7af9      	ldrb	r1, [r7, #11]
 8008a50:	2327      	movs	r3, #39	; 0x27
 8008a52:	2202      	movs	r2, #2
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f7ff fcd2 	bl	80083fe <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	2205      	movs	r2, #5
 8008a5e:	721a      	strb	r2, [r3, #8]
      return -1;
 8008a60:	f04f 33ff 	mov.w	r3, #4294967295
 8008a64:	e06d      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	3302      	adds	r3, #2
 8008a6a:	781b      	ldrb	r3, [r3, #0]
 8008a6c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	3303      	adds	r3, #3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a76:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	3304      	adds	r3, #4
 8008a7c:	781b      	ldrb	r3, [r3, #0]
 8008a7e:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8008a80:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	3205      	adds	r2, #5
 8008a86:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8008a88:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	3306      	adds	r3, #6
 8008a94:	781b      	ldrb	r3, [r3, #0]
 8008a96:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3307      	adds	r3, #7
 8008a9c:	781b      	ldrb	r3, [r3, #0]
 8008a9e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008aa0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	3308      	adds	r3, #8
 8008aa6:	781b      	ldrb	r3, [r3, #0]
 8008aa8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8008aaa:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8008aac:	687a      	ldr	r2, [r7, #4]
 8008aae:	3209      	adds	r2, #9
 8008ab0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8008ab2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ac6:	7af9      	ldrb	r1, [r7, #11]
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 f877 	bl	8008bbc <SCSI_CheckAddressRange>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	da02      	bge.n	8008ada <SCSI_Write12+0x13a>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8008ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ad8:	e033      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008ae6:	fb02 f303 	mul.w	r3, r2, r3
 8008aea:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d00a      	beq.n	8008b0e <SCSI_Write12+0x16e>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 8008afe:	2320      	movs	r3, #32
 8008b00:	2205      	movs	r2, #5
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f7ff fc7b 	bl	80083fe <SCSI_SenseCode>
      return -1;
 8008b08:	f04f 33ff 	mov.w	r3, #4294967295
 8008b0c:	e019      	b.n	8008b42 <SCSI_Write12+0x1a2>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	bf28      	it	cs
 8008b16:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008b1a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8008b1c:	697b      	ldr	r3, [r7, #20]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	f103 0210 	add.w	r2, r3, #16
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	2101      	movs	r1, #1
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fcfc 	bl	800952a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8008b32:	2300      	movs	r3, #0
 8008b34:	e005      	b.n	8008b42 <SCSI_Write12+0x1a2>
    return SCSI_ProcessWrite(pdev, lun);
 8008b36:	7afb      	ldrb	r3, [r7, #11]
 8008b38:	4619      	mov	r1, r3
 8008b3a:	68f8      	ldr	r0, [r7, #12]
 8008b3c:	f000 f8df 	bl	8008cfe <SCSI_ProcessWrite>
 8008b40:	4603      	mov	r3, r0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3718      	adds	r7, #24
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <SCSI_Verify10>:
  * @param  lun: Logical unit number
  * @param  params: Command parameters
  * @retval status
  */
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b086      	sub	sp, #24
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	60f8      	str	r0, [r7, #12]
 8008b52:	460b      	mov	r3, r1
 8008b54:	607a      	str	r2, [r7, #4]
 8008b56:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008b5e:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d102      	bne.n	8008b6c <SCSI_Verify10+0x22>
  {
    return -1;
 8008b66:	f04f 33ff 	mov.w	r3, #4294967295
 8008b6a:	e023      	b.n	8008bb4 <SCSI_Verify10+0x6a>
  }

  if ((params[1] & 0x02U) == 0x02U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3301      	adds	r3, #1
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	f003 0302 	and.w	r3, r3, #2
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d008      	beq.n	8008b8c <SCSI_Verify10+0x42>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8008b7a:	7af9      	ldrb	r1, [r7, #11]
 8008b7c:	2324      	movs	r3, #36	; 0x24
 8008b7e:	2205      	movs	r2, #5
 8008b80:	68f8      	ldr	r0, [r7, #12]
 8008b82:	f7ff fc3c 	bl	80083fe <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8008b86:	f04f 33ff 	mov.w	r3, #4294967295
 8008b8a:	e013      	b.n	8008bb4 <SCSI_Verify10+0x6a>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008b98:	7af9      	ldrb	r1, [r7, #11]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f80e 	bl	8008bbc <SCSI_CheckAddressRange>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	da02      	bge.n	8008bac <SCSI_Verify10+0x62>
  {
    return -1; /* error */
 8008ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8008baa:	e003      	b.n	8008bb4 <SCSI_Verify10+0x6a>
  }

  hmsc->bot_data_length = 0U;
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	2200      	movs	r2, #0
 8008bb0:	60da      	str	r2, [r3, #12]

  return 0;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3718      	adds	r7, #24
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <SCSI_CheckAddressRange>:
  * @param  blk_nbr: number of block to be processed
  * @retval status
  */
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b086      	sub	sp, #24
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	603b      	str	r3, [r7, #0]
 8008bc8:	460b      	mov	r3, r1
 8008bca:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008bd2:	617b      	str	r3, [r7, #20]

  if (hmsc == NULL)
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d102      	bne.n	8008be0 <SCSI_CheckAddressRange+0x24>
  {
    return -1;
 8008bda:	f04f 33ff 	mov.w	r3, #4294967295
 8008bde:	e011      	b.n	8008c04 <SCSI_CheckAddressRange+0x48>
  }

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8008be0:	687a      	ldr	r2, [r7, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	441a      	add	r2, r3
 8008be6:	697b      	ldr	r3, [r7, #20]
 8008be8:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d908      	bls.n	8008c02 <SCSI_CheckAddressRange+0x46>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8008bf0:	7af9      	ldrb	r1, [r7, #11]
 8008bf2:	2321      	movs	r3, #33	; 0x21
 8008bf4:	2205      	movs	r2, #5
 8008bf6:	68f8      	ldr	r0, [r7, #12]
 8008bf8:	f7ff fc01 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8008bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8008c00:	e000      	b.n	8008c04 <SCSI_CheckAddressRange+0x48>
  }

  return 0;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3718      	adds	r7, #24
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SCSI_ProcessRead>:
  *         Handle Read Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008c0c:	b590      	push	{r4, r7, lr}
 8008c0e:	b085      	sub	sp, #20
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c1e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008c2c:	fb02 f303 	mul.w	r3, r2, r3
 8008c30:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d102      	bne.n	8008c3e <SCSI_ProcessRead+0x32>
  {
    return -1;
 8008c38:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3c:	e05b      	b.n	8008cf6 <SCSI_ProcessRead+0xea>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c44:	bf28      	it	cs
 8008c46:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008c4a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008c52:	691c      	ldr	r4, [r3, #16]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f103 0110 	add.w	r1, r3, #16
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008c66:	4618      	mov	r0, r3
 8008c68:	68bb      	ldr	r3, [r7, #8]
 8008c6a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8008c6e:	b29b      	uxth	r3, r3
 8008c70:	78f8      	ldrb	r0, [r7, #3]
 8008c72:	47a0      	blx	r4
 8008c74:	4603      	mov	r3, r0
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	da08      	bge.n	8008c8c <SCSI_ProcessRead+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8008c7a:	78f9      	ldrb	r1, [r7, #3]
 8008c7c:	2311      	movs	r3, #17
 8008c7e:	2204      	movs	r2, #4
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f7ff fbbc 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8008c86:	f04f 33ff 	mov.w	r3, #4294967295
 8008c8a:	e034      	b.n	8008cf6 <SCSI_ProcessRead+0xea>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	f103 0210 	add.w	r2, r3, #16
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	2181      	movs	r1, #129	; 0x81
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f000 fc26 	bl	80094e8 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008ca8:	4619      	mov	r1, r3
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	fbb3 f3f1 	udiv	r3, r3, r1
 8008cb0:	441a      	add	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	fbb3 f3f1 	udiv	r3, r3, r1
 8008ccc:	1ad2      	subs	r2, r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	1ad2      	subs	r2, r2, r3
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d102      	bne.n	8008cf4 <SCSI_ProcessRead+0xe8>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2203      	movs	r2, #3
 8008cf2:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3714      	adds	r7, #20
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd90      	pop	{r4, r7, pc}

08008cfe <SCSI_ProcessWrite>:
  *         Handle Write Process
  * @param  lun: Logical unit number
  * @retval status
  */
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8008cfe:	b590      	push	{r4, r7, lr}
 8008d00:	b085      	sub	sp, #20
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	6078      	str	r0, [r7, #4]
 8008d06:	460b      	mov	r3, r1
 8008d08:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008d1e:	fb02 f303 	mul.w	r3, r2, r3
 8008d22:	60bb      	str	r3, [r7, #8]

  if (hmsc == NULL)
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d102      	bne.n	8008d30 <SCSI_ProcessWrite+0x32>
  {
    return -1;
 8008d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8008d2e:	e06b      	b.n	8008e08 <SCSI_ProcessWrite+0x10a>
  }

  len = MIN(len, MSC_MEDIA_PACKET);
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d36:	bf28      	it	cs
 8008d38:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008d3c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d44:	695c      	ldr	r4, [r3, #20]
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f103 0110 	add.w	r1, r3, #16
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d58:	4618      	mov	r0, r3
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	78f8      	ldrb	r0, [r7, #3]
 8008d64:	47a0      	blx	r4
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	da08      	bge.n	8008d7e <SCSI_ProcessWrite+0x80>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008d6c:	78f9      	ldrb	r1, [r7, #3]
 8008d6e:	2303      	movs	r3, #3
 8008d70:	2204      	movs	r2, #4
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f7ff fb43 	bl	80083fe <SCSI_SenseCode>
    return -1;
 8008d78:	f04f 33ff 	mov.w	r3, #4294967295
 8008d7c:	e044      	b.n	8008e08 <SCSI_ProcessWrite+0x10a>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008d8a:	4619      	mov	r1, r3
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008d92:	441a      	add	r2, r3
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 8008da6:	4619      	mov	r1, r3
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8008dae:	1ad2      	subs	r2, r2, r3
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	1ad2      	subs	r2, r2, r3
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d104      	bne.n	8008dda <SCSI_ProcessWrite+0xdc>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7fe fdd8 	bl	8007988 <MSC_BOT_SendCSW>
 8008dd8:	e015      	b.n	8008e06 <SCSI_ProcessWrite+0x108>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8008de0:	68fa      	ldr	r2, [r7, #12]
 8008de2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 8008de6:	fb02 f303 	mul.w	r3, r2, r3
 8008dea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dee:	bf28      	it	cs
 8008df0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 8008df4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f103 0210 	add.w	r2, r3, #16
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2101      	movs	r1, #1
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fb92 	bl	800952a <USBD_LL_PrepareReceive>
  }

  return 0;
 8008e06:	2300      	movs	r3, #0
}
 8008e08:	4618      	mov	r0, r3
 8008e0a:	3714      	adds	r7, #20
 8008e0c:	46bd      	mov	sp, r7
 8008e0e:	bd90      	pop	{r4, r7, pc}

08008e10 <SCSI_UpdateBotData>:
  * @param  length: Data length
  * @retval status
  */
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8008e1e:	88fb      	ldrh	r3, [r7, #6]
 8008e20:	82fb      	strh	r3, [r7, #22]

  if (hmsc == NULL)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d102      	bne.n	8008e2e <SCSI_UpdateBotData+0x1e>
  {
    return -1;
 8008e28:	f04f 33ff 	mov.w	r3, #4294967295
 8008e2c:	e013      	b.n	8008e56 <SCSI_UpdateBotData+0x46>
  }

  hmsc->bot_data_length = len;
 8008e2e:	8afa      	ldrh	r2, [r7, #22]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8008e34:	e00b      	b.n	8008e4e <SCSI_UpdateBotData+0x3e>
  {
    len--;
 8008e36:	8afb      	ldrh	r3, [r7, #22]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8008e3c:	8afb      	ldrh	r3, [r7, #22]
 8008e3e:	68ba      	ldr	r2, [r7, #8]
 8008e40:	441a      	add	r2, r3
 8008e42:	8afb      	ldrh	r3, [r7, #22]
 8008e44:	7811      	ldrb	r1, [r2, #0]
 8008e46:	68fa      	ldr	r2, [r7, #12]
 8008e48:	4413      	add	r3, r2
 8008e4a:	460a      	mov	r2, r1
 8008e4c:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8008e4e:	8afb      	ldrh	r3, [r7, #22]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d1f0      	bne.n	8008e36 <SCSI_UpdateBotData+0x26>
  }

  return 0;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	371c      	adds	r7, #28
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e60:	4770      	bx	lr

08008e62 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8008e62:	b480      	push	{r7}
 8008e64:	b083      	sub	sp, #12
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	4603      	mov	r3, r0
 8008e6a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8008e6c:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	370c      	adds	r7, #12
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr

08008e7a <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b08e      	sub	sp, #56	; 0x38
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	4603      	mov	r3, r0
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
 8008e86:	73fb      	strb	r3, [r7, #15]
  sd_info_t info;
  int8_t ret = -1;
 8008e88:	23ff      	movs	r3, #255	; 0xff
 8008e8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  if (sdIsDetected() == true)
 8008e8e:	f7fa fadf 	bl	8003450 <sdIsDetected>
 8008e92:	4603      	mov	r3, r0
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00f      	beq.n	8008eb8 <STORAGE_GetCapacity_FS+0x3e>
  {
    sdGetInfo(&info);
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f7fa faed 	bl	800347c <sdGetInfo>

    *block_num = info.log_block_numbers - 1;
 8008ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	601a      	str	r2, [r3, #0]
    *block_size = info.log_block_size;
 8008eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eac:	b29a      	uxth	r2, r3
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	801a      	strh	r2, [r3, #0]
    ret = 0;
 8008eb2:	2300      	movs	r3, #0
 8008eb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  return ret;
 8008eb8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3738      	adds	r7, #56	; 0x38
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	71fb      	strb	r3, [r7, #7]
  static int8_t prev_status = 0;
  int8_t ret = -1;
 8008ece:	23ff      	movs	r3, #255	; 0xff
 8008ed0:	73fb      	strb	r3, [r7, #15]

  if (sdIsDetected() == true)
 8008ed2:	f7fa fabd 	bl	8003450 <sdIsDetected>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00a      	beq.n	8008ef2 <STORAGE_IsReady_FS+0x2e>
  {
    if (sdIsBusy() != true)
 8008edc:	f7fa fb24 	bl	8003528 <sdIsBusy>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f083 0301 	eor.w	r3, r3, #1
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00a      	beq.n	8008f02 <STORAGE_IsReady_FS+0x3e>
    {
      ret = 0;
 8008eec:	2300      	movs	r3, #0
 8008eee:	73fb      	strb	r3, [r7, #15]
 8008ef0:	e007      	b.n	8008f02 <STORAGE_IsReady_FS+0x3e>
    }
  }
  else if (prev_status == 0)
 8008ef2:	4b07      	ldr	r3, [pc, #28]	; (8008f10 <STORAGE_IsReady_FS+0x4c>)
 8008ef4:	f993 3000 	ldrsb.w	r3, [r3]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d102      	bne.n	8008f02 <STORAGE_IsReady_FS+0x3e>
  {
    prev_status = -1;
 8008efc:	4b04      	ldr	r3, [pc, #16]	; (8008f10 <STORAGE_IsReady_FS+0x4c>)
 8008efe:	22ff      	movs	r2, #255	; 0xff
 8008f00:	701a      	strb	r2, [r3, #0]
  }
  return ret;
 8008f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008f06:	4618      	mov	r0, r3
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
 8008f0e:	bf00      	nop
 8008f10:	20006a45 	.word	0x20006a45

08008f14 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8008f1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	370c      	adds	r7, #12
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr

08008f2c <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60b9      	str	r1, [r7, #8]
 8008f34:	607a      	str	r2, [r7, #4]
 8008f36:	461a      	mov	r2, r3
 8008f38:	4603      	mov	r3, r0
 8008f3a:	73fb      	strb	r3, [r7, #15]
 8008f3c:	4613      	mov	r3, r2
 8008f3e:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;
 8008f40:	23ff      	movs	r3, #255	; 0xff
 8008f42:	75fb      	strb	r3, [r7, #23]

  if (sdIsDetected() == true)
 8008f44:	f7fa fa84 	bl	8003450 <sdIsDetected>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d00b      	beq.n	8008f66 <STORAGE_Read_FS+0x3a>
  {
    if (sdReadBlocks(blk_addr, buf, blk_len, 1000) == true)
 8008f4e:	89ba      	ldrh	r2, [r7, #12]
 8008f50:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f54:	68b9      	ldr	r1, [r7, #8]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fa fb1c 	bl	8003594 <sdReadBlocks>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <STORAGE_Read_FS+0x3a>
    {
      ret = 0;
 8008f62:	2300      	movs	r3, #0
 8008f64:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008f66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b086      	sub	sp, #24
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	4603      	mov	r3, r0
 8008f80:	73fb      	strb	r3, [r7, #15]
 8008f82:	4613      	mov	r3, r2
 8008f84:	81bb      	strh	r3, [r7, #12]
  int8_t ret = -1;
 8008f86:	23ff      	movs	r3, #255	; 0xff
 8008f88:	75fb      	strb	r3, [r7, #23]

  if (sdIsDetected() == true)
 8008f8a:	f7fa fa61 	bl	8003450 <sdIsDetected>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d00b      	beq.n	8008fac <STORAGE_Write_FS+0x3a>
  {
    if (sdWriteBlocks(blk_addr, buf, blk_len, 1000) == true)
 8008f94:	89ba      	ldrh	r2, [r7, #12]
 8008f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f9a:	68b9      	ldr	r1, [r7, #8]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7fa fb63 	bl	8003668 <sdWriteBlocks>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d001      	beq.n	8008fac <STORAGE_Write_FS+0x3a>
    {
      ret = 0;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	75fb      	strb	r3, [r7, #23]
    }
  }
  return ret;
 8008fac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3718      	adds	r7, #24
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8008fbc:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b08a      	sub	sp, #40	; 0x28
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fd0:	f107 0314 	add.w	r3, r7, #20
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	605a      	str	r2, [r3, #4]
 8008fda:	609a      	str	r2, [r3, #8]
 8008fdc:	60da      	str	r2, [r3, #12]
 8008fde:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008fe8:	d13a      	bne.n	8009060 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
 8008fee:	4b1e      	ldr	r3, [pc, #120]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ff2:	4a1d      	ldr	r2, [pc, #116]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8008ffa:	4b1b      	ldr	r3, [pc, #108]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8008ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ffe:	f003 0301 	and.w	r3, r3, #1
 8009002:	613b      	str	r3, [r7, #16]
 8009004:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009006:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800900a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800900c:	2302      	movs	r3, #2
 800900e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009014:	2303      	movs	r3, #3
 8009016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009018:	230a      	movs	r3, #10
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800901c:	f107 0314 	add.w	r3, r7, #20
 8009020:	4619      	mov	r1, r3
 8009022:	4812      	ldr	r0, [pc, #72]	; (800906c <HAL_PCD_MspInit+0xa4>)
 8009024:	f005 fbe4 	bl	800e7f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009028:	4b0f      	ldr	r3, [pc, #60]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800902a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800902c:	4a0e      	ldr	r2, [pc, #56]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800902e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009032:	6353      	str	r3, [r2, #52]	; 0x34
 8009034:	2300      	movs	r3, #0
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	4b0b      	ldr	r3, [pc, #44]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800903a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903c:	4a0a      	ldr	r2, [pc, #40]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 800903e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009042:	6453      	str	r3, [r2, #68]	; 0x44
 8009044:	4b08      	ldr	r3, [pc, #32]	; (8009068 <HAL_PCD_MspInit+0xa0>)
 8009046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904c:	60fb      	str	r3, [r7, #12]
 800904e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8009050:	2200      	movs	r2, #0
 8009052:	2106      	movs	r1, #6
 8009054:	2043      	movs	r0, #67	; 0x43
 8009056:	f004 fd0e 	bl	800da76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800905a:	2043      	movs	r0, #67	; 0x43
 800905c:	f004 fd27 	bl	800daae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009060:	bf00      	nop
 8009062:	3728      	adds	r7, #40	; 0x28
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	40023800 	.word	0x40023800
 800906c:	40020000 	.word	0x40020000

08009070 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b082      	sub	sp, #8
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009084:	4619      	mov	r1, r3
 8009086:	4610      	mov	r0, r2
 8009088:	f7fc f946 	bl	8005318 <USBD_LL_SetupStage>
}
 800908c:	bf00      	nop
 800908e:	3708      	adds	r7, #8
 8009090:	46bd      	mov	sp, r7
 8009092:	bd80      	pop	{r7, pc}

08009094 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b082      	sub	sp, #8
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	460b      	mov	r3, r1
 800909e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090a6:	78fa      	ldrb	r2, [r7, #3]
 80090a8:	6879      	ldr	r1, [r7, #4]
 80090aa:	4613      	mov	r3, r2
 80090ac:	00db      	lsls	r3, r3, #3
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	440b      	add	r3, r1
 80090b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80090b8:	681a      	ldr	r2, [r3, #0]
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	4619      	mov	r1, r3
 80090be:	f7fc f980 	bl	80053c2 <USBD_LL_DataOutStage>
}
 80090c2:	bf00      	nop
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}

080090ca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ca:	b580      	push	{r7, lr}
 80090cc:	b082      	sub	sp, #8
 80090ce:	af00      	add	r7, sp, #0
 80090d0:	6078      	str	r0, [r7, #4]
 80090d2:	460b      	mov	r3, r1
 80090d4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80090dc:	78fa      	ldrb	r2, [r7, #3]
 80090de:	6879      	ldr	r1, [r7, #4]
 80090e0:	4613      	mov	r3, r2
 80090e2:	00db      	lsls	r3, r3, #3
 80090e4:	1a9b      	subs	r3, r3, r2
 80090e6:	009b      	lsls	r3, r3, #2
 80090e8:	440b      	add	r3, r1
 80090ea:	3348      	adds	r3, #72	; 0x48
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	78fb      	ldrb	r3, [r7, #3]
 80090f0:	4619      	mov	r1, r3
 80090f2:	f7fc f9c9 	bl	8005488 <USBD_LL_DataInStage>
}
 80090f6:	bf00      	nop
 80090f8:	3708      	adds	r7, #8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b082      	sub	sp, #8
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800910c:	4618      	mov	r0, r3
 800910e:	f7fc fadd 	bl	80056cc <USBD_LL_SOF>
}
 8009112:	bf00      	nop
 8009114:	3708      	adds	r7, #8
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b084      	sub	sp, #16
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009122:	2301      	movs	r3, #1
 8009124:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68db      	ldr	r3, [r3, #12]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d001      	beq.n	8009132 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800912e:	f7f8 f831 	bl	8001194 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009138:	7bfa      	ldrb	r2, [r7, #15]
 800913a:	4611      	mov	r1, r2
 800913c:	4618      	mov	r0, r3
 800913e:	f7fc fa87 	bl	8005650 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009148:	4618      	mov	r0, r3
 800914a:	f7fc fa33 	bl	80055b4 <USBD_LL_Reset>
}
 800914e:	bf00      	nop
 8009150:	3710      	adds	r7, #16
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
	...

08009158 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009166:	4618      	mov	r0, r3
 8009168:	f7fc fa82 	bl	8005670 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	6812      	ldr	r2, [r2, #0]
 800917a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800917e:	f043 0301 	orr.w	r3, r3, #1
 8009182:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6a1b      	ldr	r3, [r3, #32]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d005      	beq.n	8009198 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800918c:	4b04      	ldr	r3, [pc, #16]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	4a03      	ldr	r2, [pc, #12]	; (80091a0 <HAL_PCD_SuspendCallback+0x48>)
 8009192:	f043 0306 	orr.w	r3, r3, #6
 8009196:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009198:	bf00      	nop
 800919a:	3708      	adds	r7, #8
 800919c:	46bd      	mov	sp, r7
 800919e:	bd80      	pop	{r7, pc}
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b082      	sub	sp, #8
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091b2:	4618      	mov	r0, r3
 80091b4:	f7fc fa72 	bl	800569c <USBD_LL_Resume>
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091d2:	78fa      	ldrb	r2, [r7, #3]
 80091d4:	4611      	mov	r1, r2
 80091d6:	4618      	mov	r0, r3
 80091d8:	f7fc fac0 	bl	800575c <USBD_LL_IsoOUTIncomplete>
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
 80091ec:	460b      	mov	r3, r1
 80091ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80091f6:	78fa      	ldrb	r2, [r7, #3]
 80091f8:	4611      	mov	r1, r2
 80091fa:	4618      	mov	r0, r3
 80091fc:	f7fc fa88 	bl	8005710 <USBD_LL_IsoINIncomplete>
}
 8009200:	bf00      	nop
 8009202:	3708      	adds	r7, #8
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}

08009208 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009216:	4618      	mov	r0, r3
 8009218:	f7fc fac6 	bl	80057a8 <USBD_LL_DevConnected>
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009232:	4618      	mov	r0, r3
 8009234:	f7fc fac3 	bl	80057be <USBD_LL_DevDisconnected>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d13c      	bne.n	80092ca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009250:	4a20      	ldr	r2, [pc, #128]	; (80092d4 <USBD_LL_Init+0x94>)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <USBD_LL_Init+0x94>)
 800925c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009260:	4b1c      	ldr	r3, [pc, #112]	; (80092d4 <USBD_LL_Init+0x94>)
 8009262:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009266:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009268:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <USBD_LL_Init+0x94>)
 800926a:	2204      	movs	r2, #4
 800926c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800926e:	4b19      	ldr	r3, [pc, #100]	; (80092d4 <USBD_LL_Init+0x94>)
 8009270:	2202      	movs	r2, #2
 8009272:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009274:	4b17      	ldr	r3, [pc, #92]	; (80092d4 <USBD_LL_Init+0x94>)
 8009276:	2200      	movs	r2, #0
 8009278:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800927a:	4b16      	ldr	r3, [pc, #88]	; (80092d4 <USBD_LL_Init+0x94>)
 800927c:	2202      	movs	r2, #2
 800927e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8009280:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <USBD_LL_Init+0x94>)
 8009282:	2201      	movs	r2, #1
 8009284:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009286:	4b13      	ldr	r3, [pc, #76]	; (80092d4 <USBD_LL_Init+0x94>)
 8009288:	2200      	movs	r2, #0
 800928a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800928c:	4b11      	ldr	r3, [pc, #68]	; (80092d4 <USBD_LL_Init+0x94>)
 800928e:	2200      	movs	r2, #0
 8009290:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009292:	4b10      	ldr	r3, [pc, #64]	; (80092d4 <USBD_LL_Init+0x94>)
 8009294:	2200      	movs	r2, #0
 8009296:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009298:	4b0e      	ldr	r3, [pc, #56]	; (80092d4 <USBD_LL_Init+0x94>)
 800929a:	2200      	movs	r2, #0
 800929c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800929e:	480d      	ldr	r0, [pc, #52]	; (80092d4 <USBD_LL_Init+0x94>)
 80092a0:	f005 fc75 	bl	800eb8e <HAL_PCD_Init>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80092aa:	f7f7 ff73 	bl	8001194 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80092ae:	2180      	movs	r1, #128	; 0x80
 80092b0:	4808      	ldr	r0, [pc, #32]	; (80092d4 <USBD_LL_Init+0x94>)
 80092b2:	f006 fe00 	bl	800feb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80092b6:	2240      	movs	r2, #64	; 0x40
 80092b8:	2100      	movs	r1, #0
 80092ba:	4806      	ldr	r0, [pc, #24]	; (80092d4 <USBD_LL_Init+0x94>)
 80092bc:	f006 fdb4 	bl	800fe28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80092c0:	2280      	movs	r2, #128	; 0x80
 80092c2:	2101      	movs	r1, #1
 80092c4:	4803      	ldr	r0, [pc, #12]	; (80092d4 <USBD_LL_Init+0x94>)
 80092c6:	f006 fdaf 	bl	800fe28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20008500 	.word	0x20008500

080092d8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092e0:	2300      	movs	r3, #0
 80092e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092e4:	2300      	movs	r3, #0
 80092e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092ee:	4618      	mov	r0, r3
 80092f0:	f005 fd6a 	bl	800edc8 <HAL_PCD_Start>
 80092f4:	4603      	mov	r3, r0
 80092f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
 80092fa:	4618      	mov	r0, r3
 80092fc:	f000 f962 	bl	80095c4 <USBD_Get_USB_Status>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009304:	7bbb      	ldrb	r3, [r7, #14]
}
 8009306:	4618      	mov	r0, r3
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800930e:	b580      	push	{r7, lr}
 8009310:	b084      	sub	sp, #16
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	4608      	mov	r0, r1
 8009318:	4611      	mov	r1, r2
 800931a:	461a      	mov	r2, r3
 800931c:	4603      	mov	r3, r0
 800931e:	70fb      	strb	r3, [r7, #3]
 8009320:	460b      	mov	r3, r1
 8009322:	70bb      	strb	r3, [r7, #2]
 8009324:	4613      	mov	r3, r2
 8009326:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009328:	2300      	movs	r3, #0
 800932a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009336:	78bb      	ldrb	r3, [r7, #2]
 8009338:	883a      	ldrh	r2, [r7, #0]
 800933a:	78f9      	ldrb	r1, [r7, #3]
 800933c:	f006 f94e 	bl	800f5dc <HAL_PCD_EP_Open>
 8009340:	4603      	mov	r3, r0
 8009342:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009344:	7bfb      	ldrb	r3, [r7, #15]
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f93c 	bl	80095c4 <USBD_Get_USB_Status>
 800934c:	4603      	mov	r3, r0
 800934e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009350:	7bbb      	ldrb	r3, [r7, #14]
}
 8009352:	4618      	mov	r0, r3
 8009354:	3710      	adds	r7, #16
 8009356:	46bd      	mov	sp, r7
 8009358:	bd80      	pop	{r7, pc}

0800935a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800935a:	b580      	push	{r7, lr}
 800935c:	b084      	sub	sp, #16
 800935e:	af00      	add	r7, sp, #0
 8009360:	6078      	str	r0, [r7, #4]
 8009362:	460b      	mov	r3, r1
 8009364:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009366:	2300      	movs	r3, #0
 8009368:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800936a:	2300      	movs	r3, #0
 800936c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009374:	78fa      	ldrb	r2, [r7, #3]
 8009376:	4611      	mov	r1, r2
 8009378:	4618      	mov	r0, r3
 800937a:	f006 f997 	bl	800f6ac <HAL_PCD_EP_Close>
 800937e:	4603      	mov	r3, r0
 8009380:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009382:	7bfb      	ldrb	r3, [r7, #15]
 8009384:	4618      	mov	r0, r3
 8009386:	f000 f91d 	bl	80095c4 <USBD_Get_USB_Status>
 800938a:	4603      	mov	r3, r0
 800938c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800938e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3710      	adds	r7, #16
 8009394:	46bd      	mov	sp, r7
 8009396:	bd80      	pop	{r7, pc}

08009398 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b084      	sub	sp, #16
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	460b      	mov	r3, r1
 80093a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093a4:	2300      	movs	r3, #0
 80093a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093a8:	2300      	movs	r3, #0
 80093aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	4611      	mov	r1, r2
 80093b6:	4618      	mov	r0, r3
 80093b8:	f006 fb29 	bl	800fa0e <HAL_PCD_EP_Flush>
 80093bc:	4603      	mov	r3, r0
 80093be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093c0:	7bfb      	ldrb	r3, [r7, #15]
 80093c2:	4618      	mov	r0, r3
 80093c4:	f000 f8fe 	bl	80095c4 <USBD_Get_USB_Status>
 80093c8:	4603      	mov	r3, r0
 80093ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80093ce:	4618      	mov	r0, r3
 80093d0:	3710      	adds	r7, #16
 80093d2:	46bd      	mov	sp, r7
 80093d4:	bd80      	pop	{r7, pc}

080093d6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80093d6:	b580      	push	{r7, lr}
 80093d8:	b084      	sub	sp, #16
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	460b      	mov	r3, r1
 80093e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093e2:	2300      	movs	r3, #0
 80093e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093e6:	2300      	movs	r3, #0
 80093e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093f0:	78fa      	ldrb	r2, [r7, #3]
 80093f2:	4611      	mov	r1, r2
 80093f4:	4618      	mov	r0, r3
 80093f6:	f006 fa50 	bl	800f89a <HAL_PCD_EP_SetStall>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093fe:	7bfb      	ldrb	r3, [r7, #15]
 8009400:	4618      	mov	r0, r3
 8009402:	f000 f8df 	bl	80095c4 <USBD_Get_USB_Status>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800940a:	7bbb      	ldrb	r3, [r7, #14]
}
 800940c:	4618      	mov	r0, r3
 800940e:	3710      	adds	r7, #16
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	460b      	mov	r3, r1
 800941e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009420:	2300      	movs	r3, #0
 8009422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009424:	2300      	movs	r3, #0
 8009426:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800942e:	78fa      	ldrb	r2, [r7, #3]
 8009430:	4611      	mov	r1, r2
 8009432:	4618      	mov	r0, r3
 8009434:	f006 fa95 	bl	800f962 <HAL_PCD_EP_ClrStall>
 8009438:	4603      	mov	r3, r0
 800943a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800943c:	7bfb      	ldrb	r3, [r7, #15]
 800943e:	4618      	mov	r0, r3
 8009440:	f000 f8c0 	bl	80095c4 <USBD_Get_USB_Status>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009448:	7bbb      	ldrb	r3, [r7, #14]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}

08009452 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]
 800945a:	460b      	mov	r3, r1
 800945c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009464:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009466:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800946a:	2b00      	cmp	r3, #0
 800946c:	da0b      	bge.n	8009486 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009474:	68f9      	ldr	r1, [r7, #12]
 8009476:	4613      	mov	r3, r2
 8009478:	00db      	lsls	r3, r3, #3
 800947a:	1a9b      	subs	r3, r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	440b      	add	r3, r1
 8009480:	333e      	adds	r3, #62	; 0x3e
 8009482:	781b      	ldrb	r3, [r3, #0]
 8009484:	e00b      	b.n	800949e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009486:	78fb      	ldrb	r3, [r7, #3]
 8009488:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800948c:	68f9      	ldr	r1, [r7, #12]
 800948e:	4613      	mov	r3, r2
 8009490:	00db      	lsls	r3, r3, #3
 8009492:	1a9b      	subs	r3, r3, r2
 8009494:	009b      	lsls	r3, r3, #2
 8009496:	440b      	add	r3, r1
 8009498:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800949c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b084      	sub	sp, #16
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	460b      	mov	r3, r1
 80094b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094b6:	2300      	movs	r3, #0
 80094b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	4611      	mov	r1, r2
 80094c8:	4618      	mov	r0, r3
 80094ca:	f006 f862 	bl	800f592 <HAL_PCD_SetAddress>
 80094ce:	4603      	mov	r3, r0
 80094d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094d2:	7bfb      	ldrb	r3, [r7, #15]
 80094d4:	4618      	mov	r0, r3
 80094d6:	f000 f875 	bl	80095c4 <USBD_Get_USB_Status>
 80094da:	4603      	mov	r3, r0
 80094dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094de:	7bbb      	ldrb	r3, [r7, #14]
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b086      	sub	sp, #24
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	607a      	str	r2, [r7, #4]
 80094f2:	603b      	str	r3, [r7, #0]
 80094f4:	460b      	mov	r3, r1
 80094f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094f8:	2300      	movs	r3, #0
 80094fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094fc:	2300      	movs	r3, #0
 80094fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009506:	7af9      	ldrb	r1, [r7, #11]
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	f006 f97b 	bl	800f806 <HAL_PCD_EP_Transmit>
 8009510:	4603      	mov	r3, r0
 8009512:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009514:	7dfb      	ldrb	r3, [r7, #23]
 8009516:	4618      	mov	r0, r3
 8009518:	f000 f854 	bl	80095c4 <USBD_Get_USB_Status>
 800951c:	4603      	mov	r3, r0
 800951e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009520:	7dbb      	ldrb	r3, [r7, #22]
}
 8009522:	4618      	mov	r0, r3
 8009524:	3718      	adds	r7, #24
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}

0800952a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800952a:	b580      	push	{r7, lr}
 800952c:	b086      	sub	sp, #24
 800952e:	af00      	add	r7, sp, #0
 8009530:	60f8      	str	r0, [r7, #12]
 8009532:	607a      	str	r2, [r7, #4]
 8009534:	603b      	str	r3, [r7, #0]
 8009536:	460b      	mov	r3, r1
 8009538:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800953a:	2300      	movs	r3, #0
 800953c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800953e:	2300      	movs	r3, #0
 8009540:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009548:	7af9      	ldrb	r1, [r7, #11]
 800954a:	683b      	ldr	r3, [r7, #0]
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	f006 f8f7 	bl	800f740 <HAL_PCD_EP_Receive>
 8009552:	4603      	mov	r3, r0
 8009554:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009556:	7dfb      	ldrb	r3, [r7, #23]
 8009558:	4618      	mov	r0, r3
 800955a:	f000 f833 	bl	80095c4 <USBD_Get_USB_Status>
 800955e:	4603      	mov	r3, r0
 8009560:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009562:	7dbb      	ldrb	r3, [r7, #22]
}
 8009564:	4618      	mov	r0, r3
 8009566:	3718      	adds	r7, #24
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}

0800956c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b082      	sub	sp, #8
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	460b      	mov	r3, r1
 8009576:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800957e:	78fa      	ldrb	r2, [r7, #3]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f006 f927 	bl	800f7d6 <HAL_PCD_EP_GetRxCount>
 8009588:	4603      	mov	r3, r0
}
 800958a:	4618      	mov	r0, r3
 800958c:	3708      	adds	r7, #8
 800958e:	46bd      	mov	sp, r7
 8009590:	bd80      	pop	{r7, pc}
	...

08009594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009594:	b480      	push	{r7}
 8009596:	b083      	sub	sp, #12
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800959c:	4b03      	ldr	r3, [pc, #12]	; (80095ac <USBD_static_malloc+0x18>)
}
 800959e:	4618      	mov	r0, r3
 80095a0:	370c      	adds	r7, #12
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	20006a48 	.word	0x20006a48

080095b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	4603      	mov	r3, r0
 80095cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ce:	2300      	movs	r3, #0
 80095d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80095d2:	79fb      	ldrb	r3, [r7, #7]
 80095d4:	2b03      	cmp	r3, #3
 80095d6:	d817      	bhi.n	8009608 <USBD_Get_USB_Status+0x44>
 80095d8:	a201      	add	r2, pc, #4	; (adr r2, 80095e0 <USBD_Get_USB_Status+0x1c>)
 80095da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095de:	bf00      	nop
 80095e0:	080095f1 	.word	0x080095f1
 80095e4:	080095f7 	.word	0x080095f7
 80095e8:	080095fd 	.word	0x080095fd
 80095ec:	08009603 	.word	0x08009603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	73fb      	strb	r3, [r7, #15]
    break;
 80095f4:	e00b      	b.n	800960e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80095f6:	2303      	movs	r3, #3
 80095f8:	73fb      	strb	r3, [r7, #15]
    break;
 80095fa:	e008      	b.n	800960e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80095fc:	2301      	movs	r3, #1
 80095fe:	73fb      	strb	r3, [r7, #15]
    break;
 8009600:	e005      	b.n	800960e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009602:	2303      	movs	r3, #3
 8009604:	73fb      	strb	r3, [r7, #15]
    break;
 8009606:	e002      	b.n	800960e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009608:	2303      	movs	r3, #3
 800960a:	73fb      	strb	r3, [r7, #15]
    break;
 800960c:	bf00      	nop
  }
  return usb_status;
 800960e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <hwInit>:




void hwInit(void)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	af00      	add	r7, sp, #0
  bspInit();
 8009620:	f7f7 fd10 	bl	8001044 <bspInit>

  cliInit(); /* 다른 모듈 보다 가장 위에서 초기화 해줘야함 */
 8009624:	f7f8 f846 	bl	80016b4 <cliInit>
  ledInit();
 8009628:	f7f9 fc18 	bl	8002e5c <ledInit>
  usbInit();
 800962c:	f7fa fe8c 	bl	8004348 <usbInit>
  uartInit();
 8009630:	f7fa fda0 	bl	8004174 <uartInit>
  MX_USART1_UART_Init();
 8009634:	f7fa fe5e 	bl	80042f4 <MX_USART1_UART_Init>
  buttonInit();
 8009638:	f7f7 ff5a 	bl	80014f0 <buttonInit>
  gpioInit();
 800963c:	f7f8 fe7e 	bl	800233c <gpioInit>
  flashInit();
 8009640:	f7f8 fcaa 	bl	8001f98 <flashInit>
  MX_SPI1_Init();
 8009644:	f7fa fd60 	bl	8004108 <MX_SPI1_Init>
  spiInit();
 8009648:	f7fa fa70 	bl	8003b2c <spiInit>
  NRF24L01_Init();
 800964c:	f7f9 fce0 	bl	8003010 <NRF24L01_Init>

  if (sdInit() == true)
 8009650:	f7f9 fea0 	bl	8003394 <sdInit>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d001      	beq.n	800965e <hwInit+0x42>
  {
	 fatfsInit();
 800965a:	f7f8 fac5 	bl	8001be8 <fatfsInit>
  }

  if (buttonGetPressed(_DEF_BUTTON1) == true && sdIsDetected() == true)
 800965e:	2000      	movs	r0, #0
 8009660:	f7f7 ff96 	bl	8001590 <buttonGetPressed>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d008      	beq.n	800967c <hwInit+0x60>
 800966a:	f7f9 fef1 	bl	8003450 <sdIsDetected>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d003      	beq.n	800967c <hwInit+0x60>
  {
	  usbBegin(USB_MSC_MODE);
 8009674:	2002      	movs	r0, #2
 8009676:	f7fa fe73 	bl	8004360 <usbBegin>
 800967a:	e002      	b.n	8009682 <hwInit+0x66>
  }
  else
  {
	  usbBegin(USB_CDC_MODE);
 800967c:	2001      	movs	r0, #1
 800967e:	f7fa fe6f 	bl	8004360 <usbBegin>
  }

  lcdInit();
 8009682:	f7f9 f869 	bl	8002758 <lcdInit>
}
 8009686:	bf00      	nop
 8009688:	bd80      	pop	{r7, pc}
	...

0800968c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	4603      	mov	r3, r0
 8009694:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009696:	79fb      	ldrb	r3, [r7, #7]
 8009698:	4a08      	ldr	r2, [pc, #32]	; (80096bc <disk_status+0x30>)
 800969a:	009b      	lsls	r3, r3, #2
 800969c:	4413      	add	r3, r2
 800969e:	685b      	ldr	r3, [r3, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	79fa      	ldrb	r2, [r7, #7]
 80096a4:	4905      	ldr	r1, [pc, #20]	; (80096bc <disk_status+0x30>)
 80096a6:	440a      	add	r2, r1
 80096a8:	7b12      	ldrb	r2, [r2, #12]
 80096aa:	4610      	mov	r0, r2
 80096ac:	4798      	blx	r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80096b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80096b4:	4618      	mov	r0, r3
 80096b6:	3710      	adds	r7, #16
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}
 80096bc:	20006c94 	.word	0x20006c94

080096c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	4603      	mov	r3, r0
 80096c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80096ca:	2300      	movs	r3, #0
 80096cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80096ce:	79fb      	ldrb	r3, [r7, #7]
 80096d0:	4a0d      	ldr	r2, [pc, #52]	; (8009708 <disk_initialize+0x48>)
 80096d2:	5cd3      	ldrb	r3, [r2, r3]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d111      	bne.n	80096fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80096d8:	79fb      	ldrb	r3, [r7, #7]
 80096da:	4a0b      	ldr	r2, [pc, #44]	; (8009708 <disk_initialize+0x48>)
 80096dc:	2101      	movs	r1, #1
 80096de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80096e0:	79fb      	ldrb	r3, [r7, #7]
 80096e2:	4a09      	ldr	r2, [pc, #36]	; (8009708 <disk_initialize+0x48>)
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	685b      	ldr	r3, [r3, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	79fa      	ldrb	r2, [r7, #7]
 80096ee:	4906      	ldr	r1, [pc, #24]	; (8009708 <disk_initialize+0x48>)
 80096f0:	440a      	add	r2, r1
 80096f2:	7b12      	ldrb	r2, [r2, #12]
 80096f4:	4610      	mov	r0, r2
 80096f6:	4798      	blx	r3
 80096f8:	4603      	mov	r3, r0
 80096fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80096fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3710      	adds	r7, #16
 8009702:	46bd      	mov	sp, r7
 8009704:	bd80      	pop	{r7, pc}
 8009706:	bf00      	nop
 8009708:	20006c94 	.word	0x20006c94

0800970c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800970c:	b590      	push	{r4, r7, lr}
 800970e:	b087      	sub	sp, #28
 8009710:	af00      	add	r7, sp, #0
 8009712:	60b9      	str	r1, [r7, #8]
 8009714:	607a      	str	r2, [r7, #4]
 8009716:	603b      	str	r3, [r7, #0]
 8009718:	4603      	mov	r3, r0
 800971a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	4a0a      	ldr	r2, [pc, #40]	; (8009748 <disk_read+0x3c>)
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	689c      	ldr	r4, [r3, #8]
 8009728:	7bfb      	ldrb	r3, [r7, #15]
 800972a:	4a07      	ldr	r2, [pc, #28]	; (8009748 <disk_read+0x3c>)
 800972c:	4413      	add	r3, r2
 800972e:	7b18      	ldrb	r0, [r3, #12]
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	68b9      	ldr	r1, [r7, #8]
 8009736:	47a0      	blx	r4
 8009738:	4603      	mov	r3, r0
 800973a:	75fb      	strb	r3, [r7, #23]
  return res;
 800973c:	7dfb      	ldrb	r3, [r7, #23]
}
 800973e:	4618      	mov	r0, r3
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd90      	pop	{r4, r7, pc}
 8009746:	bf00      	nop
 8009748:	20006c94 	.word	0x20006c94

0800974c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800974c:	b590      	push	{r4, r7, lr}
 800974e:	b087      	sub	sp, #28
 8009750:	af00      	add	r7, sp, #0
 8009752:	60b9      	str	r1, [r7, #8]
 8009754:	607a      	str	r2, [r7, #4]
 8009756:	603b      	str	r3, [r7, #0]
 8009758:	4603      	mov	r3, r0
 800975a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800975c:	7bfb      	ldrb	r3, [r7, #15]
 800975e:	4a0a      	ldr	r2, [pc, #40]	; (8009788 <disk_write+0x3c>)
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	4413      	add	r3, r2
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	68dc      	ldr	r4, [r3, #12]
 8009768:	7bfb      	ldrb	r3, [r7, #15]
 800976a:	4a07      	ldr	r2, [pc, #28]	; (8009788 <disk_write+0x3c>)
 800976c:	4413      	add	r3, r2
 800976e:	7b18      	ldrb	r0, [r3, #12]
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	68b9      	ldr	r1, [r7, #8]
 8009776:	47a0      	blx	r4
 8009778:	4603      	mov	r3, r0
 800977a:	75fb      	strb	r3, [r7, #23]
  return res;
 800977c:	7dfb      	ldrb	r3, [r7, #23]
}
 800977e:	4618      	mov	r0, r3
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	bd90      	pop	{r4, r7, pc}
 8009786:	bf00      	nop
 8009788:	20006c94 	.word	0x20006c94

0800978c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b084      	sub	sp, #16
 8009790:	af00      	add	r7, sp, #0
 8009792:	4603      	mov	r3, r0
 8009794:	603a      	str	r2, [r7, #0]
 8009796:	71fb      	strb	r3, [r7, #7]
 8009798:	460b      	mov	r3, r1
 800979a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800979c:	79fb      	ldrb	r3, [r7, #7]
 800979e:	4a09      	ldr	r2, [pc, #36]	; (80097c4 <disk_ioctl+0x38>)
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	691b      	ldr	r3, [r3, #16]
 80097a8:	79fa      	ldrb	r2, [r7, #7]
 80097aa:	4906      	ldr	r1, [pc, #24]	; (80097c4 <disk_ioctl+0x38>)
 80097ac:	440a      	add	r2, r1
 80097ae:	7b10      	ldrb	r0, [r2, #12]
 80097b0:	79b9      	ldrb	r1, [r7, #6]
 80097b2:	683a      	ldr	r2, [r7, #0]
 80097b4:	4798      	blx	r3
 80097b6:	4603      	mov	r3, r0
 80097b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80097ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80097bc:	4618      	mov	r0, r3
 80097be:	3710      	adds	r7, #16
 80097c0:	46bd      	mov	sp, r7
 80097c2:	bd80      	pop	{r7, pc}
 80097c4:	20006c94 	.word	0x20006c94

080097c8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
__weak DWORD get_fattime (void)
{
 80097c8:	b480      	push	{r7}
 80097ca:	af00      	add	r7, sp, #0
  return 0;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	46bd      	mov	sp, r7
 80097d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d6:	4770      	bx	lr

080097d8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80097d8:	b480      	push	{r7}
 80097da:	b085      	sub	sp, #20
 80097dc:	af00      	add	r7, sp, #0
 80097de:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	3301      	adds	r3, #1
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	021b      	lsls	r3, r3, #8
 80097ec:	b21a      	sxth	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	781b      	ldrb	r3, [r3, #0]
 80097f2:	b21b      	sxth	r3, r3
 80097f4:	4313      	orrs	r3, r2
 80097f6:	b21b      	sxth	r3, r3
 80097f8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80097fa:	89fb      	ldrh	r3, [r7, #14]
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3714      	adds	r7, #20
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009808:	b480      	push	{r7}
 800980a:	b085      	sub	sp, #20
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	3303      	adds	r3, #3
 8009814:	781b      	ldrb	r3, [r3, #0]
 8009816:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	021b      	lsls	r3, r3, #8
 800981c:	687a      	ldr	r2, [r7, #4]
 800981e:	3202      	adds	r2, #2
 8009820:	7812      	ldrb	r2, [r2, #0]
 8009822:	4313      	orrs	r3, r2
 8009824:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	687a      	ldr	r2, [r7, #4]
 800982c:	3201      	adds	r2, #1
 800982e:	7812      	ldrb	r2, [r2, #0]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	687a      	ldr	r2, [r7, #4]
 800983a:	7812      	ldrb	r2, [r2, #0]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]
	return rv;
 8009840:	68fb      	ldr	r3, [r7, #12]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3714      	adds	r7, #20
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800984e:	b480      	push	{r7}
 8009850:	b083      	sub	sp, #12
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	607a      	str	r2, [r7, #4]
 8009860:	887a      	ldrh	r2, [r7, #2]
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	701a      	strb	r2, [r3, #0]
 8009866:	887b      	ldrh	r3, [r7, #2]
 8009868:	0a1b      	lsrs	r3, r3, #8
 800986a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	607a      	str	r2, [r7, #4]
 8009872:	887a      	ldrh	r2, [r7, #2]
 8009874:	b2d2      	uxtb	r2, r2
 8009876:	701a      	strb	r2, [r3, #0]
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
 800988c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	607a      	str	r2, [r7, #4]
 8009894:	683a      	ldr	r2, [r7, #0]
 8009896:	b2d2      	uxtb	r2, r2
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	0a1b      	lsrs	r3, r3, #8
 800989e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	607a      	str	r2, [r7, #4]
 80098a6:	683a      	ldr	r2, [r7, #0]
 80098a8:	b2d2      	uxtb	r2, r2
 80098aa:	701a      	strb	r2, [r3, #0]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	0a1b      	lsrs	r3, r3, #8
 80098b0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	1c5a      	adds	r2, r3, #1
 80098b6:	607a      	str	r2, [r7, #4]
 80098b8:	683a      	ldr	r2, [r7, #0]
 80098ba:	b2d2      	uxtb	r2, r2
 80098bc:	701a      	strb	r2, [r3, #0]
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	0a1b      	lsrs	r3, r3, #8
 80098c2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	1c5a      	adds	r2, r3, #1
 80098c8:	607a      	str	r2, [r7, #4]
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	b2d2      	uxtb	r2, r2
 80098ce:	701a      	strb	r2, [r3, #0]
}
 80098d0:	bf00      	nop
 80098d2:	370c      	adds	r7, #12
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80098dc:	b480      	push	{r7}
 80098de:	b087      	sub	sp, #28
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d00d      	beq.n	8009912 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80098f6:	693a      	ldr	r2, [r7, #16]
 80098f8:	1c53      	adds	r3, r2, #1
 80098fa:	613b      	str	r3, [r7, #16]
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	1c59      	adds	r1, r3, #1
 8009900:	6179      	str	r1, [r7, #20]
 8009902:	7812      	ldrb	r2, [r2, #0]
 8009904:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	3b01      	subs	r3, #1
 800990a:	607b      	str	r3, [r7, #4]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d1f1      	bne.n	80098f6 <mem_cpy+0x1a>
	}
}
 8009912:	bf00      	nop
 8009914:	371c      	adds	r7, #28
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800991e:	b480      	push	{r7}
 8009920:	b087      	sub	sp, #28
 8009922:	af00      	add	r7, sp, #0
 8009924:	60f8      	str	r0, [r7, #12]
 8009926:	60b9      	str	r1, [r7, #8]
 8009928:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	1c5a      	adds	r2, r3, #1
 8009932:	617a      	str	r2, [r7, #20]
 8009934:	68ba      	ldr	r2, [r7, #8]
 8009936:	b2d2      	uxtb	r2, r2
 8009938:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	3b01      	subs	r3, #1
 800993e:	607b      	str	r3, [r7, #4]
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1f3      	bne.n	800992e <mem_set+0x10>
}
 8009946:	bf00      	nop
 8009948:	bf00      	nop
 800994a:	371c      	adds	r7, #28
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009954:	b480      	push	{r7}
 8009956:	b089      	sub	sp, #36	; 0x24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	61fb      	str	r3, [r7, #28]
 8009964:	68bb      	ldr	r3, [r7, #8]
 8009966:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009968:	2300      	movs	r3, #0
 800996a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800996c:	69fb      	ldr	r3, [r7, #28]
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	61fa      	str	r2, [r7, #28]
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	4619      	mov	r1, r3
 8009976:	69bb      	ldr	r3, [r7, #24]
 8009978:	1c5a      	adds	r2, r3, #1
 800997a:	61ba      	str	r2, [r7, #24]
 800997c:	781b      	ldrb	r3, [r3, #0]
 800997e:	1acb      	subs	r3, r1, r3
 8009980:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	3b01      	subs	r3, #1
 8009986:	607b      	str	r3, [r7, #4]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d002      	beq.n	8009994 <mem_cmp+0x40>
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d0eb      	beq.n	800996c <mem_cmp+0x18>

	return r;
 8009994:	697b      	ldr	r3, [r7, #20]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3724      	adds	r7, #36	; 0x24
 800999a:	46bd      	mov	sp, r7
 800999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a0:	4770      	bx	lr

080099a2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80099a2:	b480      	push	{r7}
 80099a4:	b083      	sub	sp, #12
 80099a6:	af00      	add	r7, sp, #0
 80099a8:	6078      	str	r0, [r7, #4]
 80099aa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80099ac:	e002      	b.n	80099b4 <chk_chr+0x12>
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	3301      	adds	r3, #1
 80099b2:	607b      	str	r3, [r7, #4]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d005      	beq.n	80099c8 <chk_chr+0x26>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	461a      	mov	r2, r3
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d1f2      	bne.n	80099ae <chk_chr+0xc>
	return *str;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	781b      	ldrb	r3, [r3, #0]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	370c      	adds	r7, #12
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr

080099d8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80099d8:	b480      	push	{r7}
 80099da:	b085      	sub	sp, #20
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80099e2:	2300      	movs	r3, #0
 80099e4:	60bb      	str	r3, [r7, #8]
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	e029      	b.n	8009a40 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80099ec:	4a27      	ldr	r2, [pc, #156]	; (8009a8c <chk_lock+0xb4>)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	011b      	lsls	r3, r3, #4
 80099f2:	4413      	add	r3, r2
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d01d      	beq.n	8009a36 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80099fa:	4a24      	ldr	r2, [pc, #144]	; (8009a8c <chk_lock+0xb4>)
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	011b      	lsls	r3, r3, #4
 8009a00:	4413      	add	r3, r2
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d116      	bne.n	8009a3a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <chk_lock+0xb4>)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	011b      	lsls	r3, r3, #4
 8009a12:	4413      	add	r3, r2
 8009a14:	3304      	adds	r3, #4
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009a1c:	429a      	cmp	r2, r3
 8009a1e:	d10c      	bne.n	8009a3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a20:	4a1a      	ldr	r2, [pc, #104]	; (8009a8c <chk_lock+0xb4>)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	011b      	lsls	r3, r3, #4
 8009a26:	4413      	add	r3, r2
 8009a28:	3308      	adds	r3, #8
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009a30:	429a      	cmp	r2, r3
 8009a32:	d102      	bne.n	8009a3a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009a34:	e007      	b.n	8009a46 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009a36:	2301      	movs	r3, #1
 8009a38:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	3301      	adds	r3, #1
 8009a3e:	60fb      	str	r3, [r7, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d9d2      	bls.n	80099ec <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d109      	bne.n	8009a60 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d102      	bne.n	8009a58 <chk_lock+0x80>
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	2b02      	cmp	r3, #2
 8009a56:	d101      	bne.n	8009a5c <chk_lock+0x84>
 8009a58:	2300      	movs	r3, #0
 8009a5a:	e010      	b.n	8009a7e <chk_lock+0xa6>
 8009a5c:	2312      	movs	r3, #18
 8009a5e:	e00e      	b.n	8009a7e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d108      	bne.n	8009a78 <chk_lock+0xa0>
 8009a66:	4a09      	ldr	r2, [pc, #36]	; (8009a8c <chk_lock+0xb4>)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	011b      	lsls	r3, r3, #4
 8009a6c:	4413      	add	r3, r2
 8009a6e:	330c      	adds	r3, #12
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a76:	d101      	bne.n	8009a7c <chk_lock+0xa4>
 8009a78:	2310      	movs	r3, #16
 8009a7a:	e000      	b.n	8009a7e <chk_lock+0xa6>
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3714      	adds	r7, #20
 8009a82:	46bd      	mov	sp, r7
 8009a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a88:	4770      	bx	lr
 8009a8a:	bf00      	nop
 8009a8c:	20006c74 	.word	0x20006c74

08009a90 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8009a90:	b480      	push	{r7}
 8009a92:	b083      	sub	sp, #12
 8009a94:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009a96:	2300      	movs	r3, #0
 8009a98:	607b      	str	r3, [r7, #4]
 8009a9a:	e002      	b.n	8009aa2 <enq_lock+0x12>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	607b      	str	r3, [r7, #4]
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2b01      	cmp	r3, #1
 8009aa6:	d806      	bhi.n	8009ab6 <enq_lock+0x26>
 8009aa8:	4a09      	ldr	r2, [pc, #36]	; (8009ad0 <enq_lock+0x40>)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	011b      	lsls	r3, r3, #4
 8009aae:	4413      	add	r3, r2
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1f2      	bne.n	8009a9c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	bf14      	ite	ne
 8009abc:	2301      	movne	r3, #1
 8009abe:	2300      	moveq	r3, #0
 8009ac0:	b2db      	uxtb	r3, r3
}
 8009ac2:	4618      	mov	r0, r3
 8009ac4:	370c      	adds	r7, #12
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009acc:	4770      	bx	lr
 8009ace:	bf00      	nop
 8009ad0:	20006c74 	.word	0x20006c74

08009ad4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009ade:	2300      	movs	r3, #0
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e01f      	b.n	8009b24 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8009ae4:	4a41      	ldr	r2, [pc, #260]	; (8009bec <inc_lock+0x118>)
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	011b      	lsls	r3, r3, #4
 8009aea:	4413      	add	r3, r2
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d113      	bne.n	8009b1e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8009af6:	4a3d      	ldr	r2, [pc, #244]	; (8009bec <inc_lock+0x118>)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	011b      	lsls	r3, r3, #4
 8009afc:	4413      	add	r3, r2
 8009afe:	3304      	adds	r3, #4
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d109      	bne.n	8009b1e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8009b0a:	4a38      	ldr	r2, [pc, #224]	; (8009bec <inc_lock+0x118>)
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	4413      	add	r3, r2
 8009b12:	3308      	adds	r3, #8
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d006      	beq.n	8009b2c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3301      	adds	r3, #1
 8009b22:	60fb      	str	r3, [r7, #12]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d9dc      	bls.n	8009ae4 <inc_lock+0x10>
 8009b2a:	e000      	b.n	8009b2e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8009b2c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2b02      	cmp	r3, #2
 8009b32:	d132      	bne.n	8009b9a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8009b34:	2300      	movs	r3, #0
 8009b36:	60fb      	str	r3, [r7, #12]
 8009b38:	e002      	b.n	8009b40 <inc_lock+0x6c>
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	3301      	adds	r3, #1
 8009b3e:	60fb      	str	r3, [r7, #12]
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d806      	bhi.n	8009b54 <inc_lock+0x80>
 8009b46:	4a29      	ldr	r2, [pc, #164]	; (8009bec <inc_lock+0x118>)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	4413      	add	r3, r2
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d1f2      	bne.n	8009b3a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2b02      	cmp	r3, #2
 8009b58:	d101      	bne.n	8009b5e <inc_lock+0x8a>
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	e040      	b.n	8009be0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	4922      	ldr	r1, [pc, #136]	; (8009bec <inc_lock+0x118>)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	011b      	lsls	r3, r3, #4
 8009b68:	440b      	add	r3, r1
 8009b6a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	689a      	ldr	r2, [r3, #8]
 8009b70:	491e      	ldr	r1, [pc, #120]	; (8009bec <inc_lock+0x118>)
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	440b      	add	r3, r1
 8009b78:	3304      	adds	r3, #4
 8009b7a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	695a      	ldr	r2, [r3, #20]
 8009b80:	491a      	ldr	r1, [pc, #104]	; (8009bec <inc_lock+0x118>)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	011b      	lsls	r3, r3, #4
 8009b86:	440b      	add	r3, r1
 8009b88:	3308      	adds	r3, #8
 8009b8a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8009b8c:	4a17      	ldr	r2, [pc, #92]	; (8009bec <inc_lock+0x118>)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	011b      	lsls	r3, r3, #4
 8009b92:	4413      	add	r3, r2
 8009b94:	330c      	adds	r3, #12
 8009b96:	2200      	movs	r2, #0
 8009b98:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8009b9a:	683b      	ldr	r3, [r7, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d009      	beq.n	8009bb4 <inc_lock+0xe0>
 8009ba0:	4a12      	ldr	r2, [pc, #72]	; (8009bec <inc_lock+0x118>)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	4413      	add	r3, r2
 8009ba8:	330c      	adds	r3, #12
 8009baa:	881b      	ldrh	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d001      	beq.n	8009bb4 <inc_lock+0xe0>
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	e015      	b.n	8009be0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d108      	bne.n	8009bcc <inc_lock+0xf8>
 8009bba:	4a0c      	ldr	r2, [pc, #48]	; (8009bec <inc_lock+0x118>)
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	011b      	lsls	r3, r3, #4
 8009bc0:	4413      	add	r3, r2
 8009bc2:	330c      	adds	r3, #12
 8009bc4:	881b      	ldrh	r3, [r3, #0]
 8009bc6:	3301      	adds	r3, #1
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	e001      	b.n	8009bd0 <inc_lock+0xfc>
 8009bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009bd0:	4906      	ldr	r1, [pc, #24]	; (8009bec <inc_lock+0x118>)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	011b      	lsls	r3, r3, #4
 8009bd6:	440b      	add	r3, r1
 8009bd8:	330c      	adds	r3, #12
 8009bda:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	3301      	adds	r3, #1
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	3714      	adds	r7, #20
 8009be4:	46bd      	mov	sp, r7
 8009be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bea:	4770      	bx	lr
 8009bec:	20006c74 	.word	0x20006c74

08009bf0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	3b01      	subs	r3, #1
 8009bfc:	607b      	str	r3, [r7, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	d825      	bhi.n	8009c50 <dec_lock+0x60>
		n = Files[i].ctr;
 8009c04:	4a17      	ldr	r2, [pc, #92]	; (8009c64 <dec_lock+0x74>)
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	011b      	lsls	r3, r3, #4
 8009c0a:	4413      	add	r3, r2
 8009c0c:	330c      	adds	r3, #12
 8009c0e:	881b      	ldrh	r3, [r3, #0]
 8009c10:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8009c12:	89fb      	ldrh	r3, [r7, #14]
 8009c14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009c18:	d101      	bne.n	8009c1e <dec_lock+0x2e>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8009c1e:	89fb      	ldrh	r3, [r7, #14]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d002      	beq.n	8009c2a <dec_lock+0x3a>
 8009c24:	89fb      	ldrh	r3, [r7, #14]
 8009c26:	3b01      	subs	r3, #1
 8009c28:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8009c2a:	4a0e      	ldr	r2, [pc, #56]	; (8009c64 <dec_lock+0x74>)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	011b      	lsls	r3, r3, #4
 8009c30:	4413      	add	r3, r2
 8009c32:	330c      	adds	r3, #12
 8009c34:	89fa      	ldrh	r2, [r7, #14]
 8009c36:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8009c38:	89fb      	ldrh	r3, [r7, #14]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d105      	bne.n	8009c4a <dec_lock+0x5a>
 8009c3e:	4a09      	ldr	r2, [pc, #36]	; (8009c64 <dec_lock+0x74>)
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	4413      	add	r3, r2
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	737b      	strb	r3, [r7, #13]
 8009c4e:	e001      	b.n	8009c54 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8009c50:	2302      	movs	r3, #2
 8009c52:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8009c54:	7b7b      	ldrb	r3, [r7, #13]
}
 8009c56:	4618      	mov	r0, r3
 8009c58:	3714      	adds	r7, #20
 8009c5a:	46bd      	mov	sp, r7
 8009c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c60:	4770      	bx	lr
 8009c62:	bf00      	nop
 8009c64:	20006c74 	.word	0x20006c74

08009c68 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e010      	b.n	8009c98 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009c76:	4a0d      	ldr	r2, [pc, #52]	; (8009cac <clear_lock+0x44>)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	011b      	lsls	r3, r3, #4
 8009c7c:	4413      	add	r3, r2
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	687a      	ldr	r2, [r7, #4]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d105      	bne.n	8009c92 <clear_lock+0x2a>
 8009c86:	4a09      	ldr	r2, [pc, #36]	; (8009cac <clear_lock+0x44>)
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	011b      	lsls	r3, r3, #4
 8009c8c:	4413      	add	r3, r2
 8009c8e:	2200      	movs	r2, #0
 8009c90:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	3301      	adds	r3, #1
 8009c96:	60fb      	str	r3, [r7, #12]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d9eb      	bls.n	8009c76 <clear_lock+0xe>
	}
}
 8009c9e:	bf00      	nop
 8009ca0:	bf00      	nop
 8009ca2:	3714      	adds	r7, #20
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20006c74 	.word	0x20006c74

08009cb0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	78db      	ldrb	r3, [r3, #3]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d034      	beq.n	8009d2e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cc8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	7858      	ldrb	r0, [r3, #1]
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	f7ff fd38 	bl	800974c <disk_write>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d002      	beq.n	8009ce8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	73fb      	strb	r3, [r7, #15]
 8009ce6:	e022      	b.n	8009d2e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2200      	movs	r2, #0
 8009cec:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cf2:	697a      	ldr	r2, [r7, #20]
 8009cf4:	1ad2      	subs	r2, r2, r3
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	69db      	ldr	r3, [r3, #28]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d217      	bcs.n	8009d2e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	789b      	ldrb	r3, [r3, #2]
 8009d02:	613b      	str	r3, [r7, #16]
 8009d04:	e010      	b.n	8009d28 <sync_window+0x78>
					wsect += fs->fsize;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	69db      	ldr	r3, [r3, #28]
 8009d0a:	697a      	ldr	r2, [r7, #20]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	7858      	ldrb	r0, [r3, #1]
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	f7ff fd15 	bl	800974c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8009d22:	693b      	ldr	r3, [r7, #16]
 8009d24:	3b01      	subs	r3, #1
 8009d26:	613b      	str	r3, [r7, #16]
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d8eb      	bhi.n	8009d06 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3718      	adds	r7, #24
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8009d42:	2300      	movs	r3, #0
 8009d44:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d4a:	683a      	ldr	r2, [r7, #0]
 8009d4c:	429a      	cmp	r2, r3
 8009d4e:	d01b      	beq.n	8009d88 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8009d50:	6878      	ldr	r0, [r7, #4]
 8009d52:	f7ff ffad 	bl	8009cb0 <sync_window>
 8009d56:	4603      	mov	r3, r0
 8009d58:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8009d5a:	7bfb      	ldrb	r3, [r7, #15]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d113      	bne.n	8009d88 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	7858      	ldrb	r0, [r3, #1]
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	683a      	ldr	r2, [r7, #0]
 8009d6e:	f7ff fccd 	bl	800970c <disk_read>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d004      	beq.n	8009d82 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009d78:	f04f 33ff 	mov.w	r3, #4294967295
 8009d7c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	683a      	ldr	r2, [r7, #0]
 8009d86:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8009d9c:	6878      	ldr	r0, [r7, #4]
 8009d9e:	f7ff ff87 	bl	8009cb0 <sync_window>
 8009da2:	4603      	mov	r3, r0
 8009da4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009da6:	7bfb      	ldrb	r3, [r7, #15]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d158      	bne.n	8009e5e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d148      	bne.n	8009e46 <sync_fs+0xb2>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	791b      	ldrb	r3, [r3, #4]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d144      	bne.n	8009e46 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	3334      	adds	r3, #52	; 0x34
 8009dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009dc4:	2100      	movs	r1, #0
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f7ff fda9 	bl	800991e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	3334      	adds	r3, #52	; 0x34
 8009dd0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dd4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fd38 	bl	800984e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	3334      	adds	r3, #52	; 0x34
 8009de2:	4921      	ldr	r1, [pc, #132]	; (8009e68 <sync_fs+0xd4>)
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7ff fd4d 	bl	8009884 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	3334      	adds	r3, #52	; 0x34
 8009dee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009df2:	491e      	ldr	r1, [pc, #120]	; (8009e6c <sync_fs+0xd8>)
 8009df4:	4618      	mov	r0, r3
 8009df6:	f7ff fd45 	bl	8009884 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	3334      	adds	r3, #52	; 0x34
 8009dfe:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	695b      	ldr	r3, [r3, #20]
 8009e06:	4619      	mov	r1, r3
 8009e08:	4610      	mov	r0, r2
 8009e0a:	f7ff fd3b 	bl	8009884 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	3334      	adds	r3, #52	; 0x34
 8009e12:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	691b      	ldr	r3, [r3, #16]
 8009e1a:	4619      	mov	r1, r3
 8009e1c:	4610      	mov	r0, r2
 8009e1e:	f7ff fd31 	bl	8009884 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a1b      	ldr	r3, [r3, #32]
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	7858      	ldrb	r0, [r3, #1]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009e3a:	2301      	movs	r3, #1
 8009e3c:	f7ff fc86 	bl	800974c <disk_write>
			fs->fsi_flag = 0;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	2100      	movs	r1, #0
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7ff fc9c 	bl	800978c <disk_ioctl>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <sync_fs+0xca>
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8009e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}
 8009e68:	41615252 	.word	0x41615252
 8009e6c:	61417272 	.word	0x61417272

08009e70 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
 8009e78:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	3b02      	subs	r3, #2
 8009e7e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	699b      	ldr	r3, [r3, #24]
 8009e84:	3b02      	subs	r3, #2
 8009e86:	683a      	ldr	r2, [r7, #0]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d301      	bcc.n	8009e90 <clust2sect+0x20>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	e008      	b.n	8009ea2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	895b      	ldrh	r3, [r3, #10]
 8009e94:	461a      	mov	r2, r3
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	fb03 f202 	mul.w	r2, r3, r2
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea0:	4413      	add	r3, r2
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	370c      	adds	r7, #12
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	6078      	str	r0, [r7, #4]
 8009eb6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d904      	bls.n	8009ece <get_fat+0x20>
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	699b      	ldr	r3, [r3, #24]
 8009ec8:	683a      	ldr	r2, [r7, #0]
 8009eca:	429a      	cmp	r2, r3
 8009ecc:	d302      	bcc.n	8009ed4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009ece:	2301      	movs	r3, #1
 8009ed0:	617b      	str	r3, [r7, #20]
 8009ed2:	e08f      	b.n	8009ff4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009ed4:	f04f 33ff 	mov.w	r3, #4294967295
 8009ed8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8009eda:	693b      	ldr	r3, [r7, #16]
 8009edc:	781b      	ldrb	r3, [r3, #0]
 8009ede:	2b03      	cmp	r3, #3
 8009ee0:	d062      	beq.n	8009fa8 <get_fat+0xfa>
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	dc7c      	bgt.n	8009fe0 <get_fat+0x132>
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	d002      	beq.n	8009ef0 <get_fat+0x42>
 8009eea:	2b02      	cmp	r3, #2
 8009eec:	d042      	beq.n	8009f74 <get_fat+0xc6>
 8009eee:	e077      	b.n	8009fe0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	60fb      	str	r3, [r7, #12]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	085b      	lsrs	r3, r3, #1
 8009ef8:	68fa      	ldr	r2, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	0a5b      	lsrs	r3, r3, #9
 8009f06:	4413      	add	r3, r2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6938      	ldr	r0, [r7, #16]
 8009f0c:	f7ff ff14 	bl	8009d38 <move_window>
 8009f10:	4603      	mov	r3, r0
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d167      	bne.n	8009fe6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1c5a      	adds	r2, r3, #1
 8009f1a:	60fa      	str	r2, [r7, #12]
 8009f1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	4413      	add	r3, r2
 8009f24:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f28:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009f2a:	693b      	ldr	r3, [r7, #16]
 8009f2c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	0a5b      	lsrs	r3, r3, #9
 8009f32:	4413      	add	r3, r2
 8009f34:	4619      	mov	r1, r3
 8009f36:	6938      	ldr	r0, [r7, #16]
 8009f38:	f7ff fefe 	bl	8009d38 <move_window>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d153      	bne.n	8009fea <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009f50:	021b      	lsls	r3, r3, #8
 8009f52:	461a      	mov	r2, r3
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	f003 0301 	and.w	r3, r3, #1
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d002      	beq.n	8009f6a <get_fat+0xbc>
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	e002      	b.n	8009f70 <get_fat+0xc2>
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009f70:	617b      	str	r3, [r7, #20]
			break;
 8009f72:	e03f      	b.n	8009ff4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	0a1b      	lsrs	r3, r3, #8
 8009f7c:	4413      	add	r3, r2
 8009f7e:	4619      	mov	r1, r3
 8009f80:	6938      	ldr	r0, [r7, #16]
 8009f82:	f7ff fed9 	bl	8009d38 <move_window>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d130      	bne.n	8009fee <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009f8c:	693b      	ldr	r3, [r7, #16]
 8009f8e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009f92:	683b      	ldr	r3, [r7, #0]
 8009f94:	005b      	lsls	r3, r3, #1
 8009f96:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8009f9a:	4413      	add	r3, r2
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	f7ff fc1b 	bl	80097d8 <ld_word>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	617b      	str	r3, [r7, #20]
			break;
 8009fa6:	e025      	b.n	8009ff4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009fa8:	693b      	ldr	r3, [r7, #16]
 8009faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	09db      	lsrs	r3, r3, #7
 8009fb0:	4413      	add	r3, r2
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	6938      	ldr	r0, [r7, #16]
 8009fb6:	f7ff febf 	bl	8009d38 <move_window>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d118      	bne.n	8009ff2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8009fce:	4413      	add	r3, r2
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7ff fc19 	bl	8009808 <ld_dword>
 8009fd6:	4603      	mov	r3, r0
 8009fd8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009fdc:	617b      	str	r3, [r7, #20]
			break;
 8009fde:	e009      	b.n	8009ff4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	617b      	str	r3, [r7, #20]
 8009fe4:	e006      	b.n	8009ff4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fe6:	bf00      	nop
 8009fe8:	e004      	b.n	8009ff4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8009fea:	bf00      	nop
 8009fec:	e002      	b.n	8009ff4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8009fee:	bf00      	nop
 8009ff0:	e000      	b.n	8009ff4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009ff2:	bf00      	nop
		}
	}

	return val;
 8009ff4:	697b      	ldr	r3, [r7, #20]
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}

08009ffe <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8009ffe:	b590      	push	{r4, r7, lr}
 800a000:	b089      	sub	sp, #36	; 0x24
 800a002:	af00      	add	r7, sp, #0
 800a004:	60f8      	str	r0, [r7, #12]
 800a006:	60b9      	str	r1, [r7, #8]
 800a008:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a00a:	2302      	movs	r3, #2
 800a00c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	2b01      	cmp	r3, #1
 800a012:	f240 80d2 	bls.w	800a1ba <put_fat+0x1bc>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	699b      	ldr	r3, [r3, #24]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	f080 80cc 	bcs.w	800a1ba <put_fat+0x1bc>
		switch (fs->fs_type) {
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b03      	cmp	r3, #3
 800a028:	f000 8096 	beq.w	800a158 <put_fat+0x15a>
 800a02c:	2b03      	cmp	r3, #3
 800a02e:	f300 80cd 	bgt.w	800a1cc <put_fat+0x1ce>
 800a032:	2b01      	cmp	r3, #1
 800a034:	d002      	beq.n	800a03c <put_fat+0x3e>
 800a036:	2b02      	cmp	r3, #2
 800a038:	d06e      	beq.n	800a118 <put_fat+0x11a>
 800a03a:	e0c7      	b.n	800a1cc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	61bb      	str	r3, [r7, #24]
 800a040:	69bb      	ldr	r3, [r7, #24]
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	69ba      	ldr	r2, [r7, #24]
 800a046:	4413      	add	r3, r2
 800a048:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	0a5b      	lsrs	r3, r3, #9
 800a052:	4413      	add	r3, r2
 800a054:	4619      	mov	r1, r3
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f7ff fe6e 	bl	8009d38 <move_window>
 800a05c:	4603      	mov	r3, r0
 800a05e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a060:	7ffb      	ldrb	r3, [r7, #31]
 800a062:	2b00      	cmp	r3, #0
 800a064:	f040 80ab 	bne.w	800a1be <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a06e:	69bb      	ldr	r3, [r7, #24]
 800a070:	1c59      	adds	r1, r3, #1
 800a072:	61b9      	str	r1, [r7, #24]
 800a074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a078:	4413      	add	r3, r2
 800a07a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a07c:	68bb      	ldr	r3, [r7, #8]
 800a07e:	f003 0301 	and.w	r3, r3, #1
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00d      	beq.n	800a0a2 <put_fat+0xa4>
 800a086:	697b      	ldr	r3, [r7, #20]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	b25b      	sxtb	r3, r3
 800a08c:	f003 030f 	and.w	r3, r3, #15
 800a090:	b25a      	sxtb	r2, r3
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	b2db      	uxtb	r3, r3
 800a096:	011b      	lsls	r3, r3, #4
 800a098:	b25b      	sxtb	r3, r3
 800a09a:	4313      	orrs	r3, r2
 800a09c:	b25b      	sxtb	r3, r3
 800a09e:	b2db      	uxtb	r3, r3
 800a0a0:	e001      	b.n	800a0a6 <put_fat+0xa8>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	b2db      	uxtb	r3, r3
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	0a5b      	lsrs	r3, r3, #9
 800a0b8:	4413      	add	r3, r2
 800a0ba:	4619      	mov	r1, r3
 800a0bc:	68f8      	ldr	r0, [r7, #12]
 800a0be:	f7ff fe3b 	bl	8009d38 <move_window>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a0c6:	7ffb      	ldrb	r3, [r7, #31]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d17a      	bne.n	800a1c2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a0d2:	69bb      	ldr	r3, [r7, #24]
 800a0d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0d8:	4413      	add	r3, r2
 800a0da:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	f003 0301 	and.w	r3, r3, #1
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d003      	beq.n	800a0ee <put_fat+0xf0>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	091b      	lsrs	r3, r3, #4
 800a0ea:	b2db      	uxtb	r3, r3
 800a0ec:	e00e      	b.n	800a10c <put_fat+0x10e>
 800a0ee:	697b      	ldr	r3, [r7, #20]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	b25b      	sxtb	r3, r3
 800a0f4:	f023 030f 	bic.w	r3, r3, #15
 800a0f8:	b25a      	sxtb	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	0a1b      	lsrs	r3, r3, #8
 800a0fe:	b25b      	sxtb	r3, r3
 800a100:	f003 030f 	and.w	r3, r3, #15
 800a104:	b25b      	sxtb	r3, r3
 800a106:	4313      	orrs	r3, r2
 800a108:	b25b      	sxtb	r3, r3
 800a10a:	b2db      	uxtb	r3, r3
 800a10c:	697a      	ldr	r2, [r7, #20]
 800a10e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2201      	movs	r2, #1
 800a114:	70da      	strb	r2, [r3, #3]
			break;
 800a116:	e059      	b.n	800a1cc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	0a1b      	lsrs	r3, r3, #8
 800a120:	4413      	add	r3, r2
 800a122:	4619      	mov	r1, r3
 800a124:	68f8      	ldr	r0, [r7, #12]
 800a126:	f7ff fe07 	bl	8009d38 <move_window>
 800a12a:	4603      	mov	r3, r0
 800a12c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a12e:	7ffb      	ldrb	r3, [r7, #31]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d148      	bne.n	800a1c6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	005b      	lsls	r3, r3, #1
 800a13e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a142:	4413      	add	r3, r2
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	b292      	uxth	r2, r2
 800a148:	4611      	mov	r1, r2
 800a14a:	4618      	mov	r0, r3
 800a14c:	f7ff fb7f 	bl	800984e <st_word>
			fs->wflag = 1;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2201      	movs	r2, #1
 800a154:	70da      	strb	r2, [r3, #3]
			break;
 800a156:	e039      	b.n	800a1cc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	09db      	lsrs	r3, r3, #7
 800a160:	4413      	add	r3, r2
 800a162:	4619      	mov	r1, r3
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f7ff fde7 	bl	8009d38 <move_window>
 800a16a:	4603      	mov	r3, r0
 800a16c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a16e:	7ffb      	ldrb	r3, [r7, #31]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d12a      	bne.n	800a1ca <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	009b      	lsls	r3, r3, #2
 800a184:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a188:	4413      	add	r3, r2
 800a18a:	4618      	mov	r0, r3
 800a18c:	f7ff fb3c 	bl	8009808 <ld_dword>
 800a190:	4603      	mov	r3, r0
 800a192:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a196:	4323      	orrs	r3, r4
 800a198:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	009b      	lsls	r3, r3, #2
 800a1a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a1a8:	4413      	add	r3, r2
 800a1aa:	6879      	ldr	r1, [r7, #4]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7ff fb69 	bl	8009884 <st_dword>
			fs->wflag = 1;
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2201      	movs	r2, #1
 800a1b6:	70da      	strb	r2, [r3, #3]
			break;
 800a1b8:	e008      	b.n	800a1cc <put_fat+0x1ce>
		}
	}
 800a1ba:	bf00      	nop
 800a1bc:	e006      	b.n	800a1cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1be:	bf00      	nop
 800a1c0:	e004      	b.n	800a1cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1c2:	bf00      	nop
 800a1c4:	e002      	b.n	800a1cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1c6:	bf00      	nop
 800a1c8:	e000      	b.n	800a1cc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800a1ca:	bf00      	nop
	return res;
 800a1cc:	7ffb      	ldrb	r3, [r7, #31]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3724      	adds	r7, #36	; 0x24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd90      	pop	{r4, r7, pc}

0800a1d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a1d6:	b580      	push	{r7, lr}
 800a1d8:	b088      	sub	sp, #32
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	60f8      	str	r0, [r7, #12]
 800a1de:	60b9      	str	r1, [r7, #8]
 800a1e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d904      	bls.n	800a1fc <remove_chain+0x26>
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	699b      	ldr	r3, [r3, #24]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d301      	bcc.n	800a200 <remove_chain+0x2a>
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	e04b      	b.n	800a298 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00c      	beq.n	800a220 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a206:	f04f 32ff 	mov.w	r2, #4294967295
 800a20a:	6879      	ldr	r1, [r7, #4]
 800a20c:	69b8      	ldr	r0, [r7, #24]
 800a20e:	f7ff fef6 	bl	8009ffe <put_fat>
 800a212:	4603      	mov	r3, r0
 800a214:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a216:	7ffb      	ldrb	r3, [r7, #31]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d001      	beq.n	800a220 <remove_chain+0x4a>
 800a21c:	7ffb      	ldrb	r3, [r7, #31]
 800a21e:	e03b      	b.n	800a298 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a220:	68b9      	ldr	r1, [r7, #8]
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f7ff fe43 	bl	8009eae <get_fat>
 800a228:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d031      	beq.n	800a294 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	2b01      	cmp	r3, #1
 800a234:	d101      	bne.n	800a23a <remove_chain+0x64>
 800a236:	2302      	movs	r3, #2
 800a238:	e02e      	b.n	800a298 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a240:	d101      	bne.n	800a246 <remove_chain+0x70>
 800a242:	2301      	movs	r3, #1
 800a244:	e028      	b.n	800a298 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a246:	2200      	movs	r2, #0
 800a248:	68b9      	ldr	r1, [r7, #8]
 800a24a:	69b8      	ldr	r0, [r7, #24]
 800a24c:	f7ff fed7 	bl	8009ffe <put_fat>
 800a250:	4603      	mov	r3, r0
 800a252:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a254:	7ffb      	ldrb	r3, [r7, #31]
 800a256:	2b00      	cmp	r3, #0
 800a258:	d001      	beq.n	800a25e <remove_chain+0x88>
 800a25a:	7ffb      	ldrb	r3, [r7, #31]
 800a25c:	e01c      	b.n	800a298 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	695a      	ldr	r2, [r3, #20]
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	699b      	ldr	r3, [r3, #24]
 800a266:	3b02      	subs	r3, #2
 800a268:	429a      	cmp	r2, r3
 800a26a:	d20b      	bcs.n	800a284 <remove_chain+0xae>
			fs->free_clst++;
 800a26c:	69bb      	ldr	r3, [r7, #24]
 800a26e:	695b      	ldr	r3, [r3, #20]
 800a270:	1c5a      	adds	r2, r3, #1
 800a272:	69bb      	ldr	r3, [r7, #24]
 800a274:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a276:	69bb      	ldr	r3, [r7, #24]
 800a278:	791b      	ldrb	r3, [r3, #4]
 800a27a:	f043 0301 	orr.w	r3, r3, #1
 800a27e:	b2da      	uxtb	r2, r3
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a284:	697b      	ldr	r3, [r7, #20]
 800a286:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	699b      	ldr	r3, [r3, #24]
 800a28c:	68ba      	ldr	r2, [r7, #8]
 800a28e:	429a      	cmp	r2, r3
 800a290:	d3c6      	bcc.n	800a220 <remove_chain+0x4a>
 800a292:	e000      	b.n	800a296 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a294:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3720      	adds	r7, #32
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d10d      	bne.n	800a2d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a2b6:	693b      	ldr	r3, [r7, #16]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a2bc:	69bb      	ldr	r3, [r7, #24]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d004      	beq.n	800a2cc <create_chain+0x2c>
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d31b      	bcc.n	800a304 <create_chain+0x64>
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	61bb      	str	r3, [r7, #24]
 800a2d0:	e018      	b.n	800a304 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a2d2:	6839      	ldr	r1, [r7, #0]
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f7ff fdea 	bl	8009eae <get_fat>
 800a2da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d801      	bhi.n	800a2e6 <create_chain+0x46>
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e070      	b.n	800a3c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ec:	d101      	bne.n	800a2f2 <create_chain+0x52>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	e06a      	b.n	800a3c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	699b      	ldr	r3, [r3, #24]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d201      	bcs.n	800a300 <create_chain+0x60>
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	e063      	b.n	800a3c8 <create_chain+0x128>
		scl = clst;
 800a300:	683b      	ldr	r3, [r7, #0]
 800a302:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a308:	69fb      	ldr	r3, [r7, #28]
 800a30a:	3301      	adds	r3, #1
 800a30c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a30e:	693b      	ldr	r3, [r7, #16]
 800a310:	699b      	ldr	r3, [r3, #24]
 800a312:	69fa      	ldr	r2, [r7, #28]
 800a314:	429a      	cmp	r2, r3
 800a316:	d307      	bcc.n	800a328 <create_chain+0x88>
				ncl = 2;
 800a318:	2302      	movs	r3, #2
 800a31a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a31c:	69fa      	ldr	r2, [r7, #28]
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	429a      	cmp	r2, r3
 800a322:	d901      	bls.n	800a328 <create_chain+0x88>
 800a324:	2300      	movs	r3, #0
 800a326:	e04f      	b.n	800a3c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a328:	69f9      	ldr	r1, [r7, #28]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f7ff fdbf 	bl	8009eae <get_fat>
 800a330:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d00e      	beq.n	800a356 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d003      	beq.n	800a346 <create_chain+0xa6>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a344:	d101      	bne.n	800a34a <create_chain+0xaa>
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	e03e      	b.n	800a3c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a34a:	69fa      	ldr	r2, [r7, #28]
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	429a      	cmp	r2, r3
 800a350:	d1da      	bne.n	800a308 <create_chain+0x68>
 800a352:	2300      	movs	r3, #0
 800a354:	e038      	b.n	800a3c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a356:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a358:	f04f 32ff 	mov.w	r2, #4294967295
 800a35c:	69f9      	ldr	r1, [r7, #28]
 800a35e:	6938      	ldr	r0, [r7, #16]
 800a360:	f7ff fe4d 	bl	8009ffe <put_fat>
 800a364:	4603      	mov	r3, r0
 800a366:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a368:	7dfb      	ldrb	r3, [r7, #23]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d109      	bne.n	800a382 <create_chain+0xe2>
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d006      	beq.n	800a382 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a374:	69fa      	ldr	r2, [r7, #28]
 800a376:	6839      	ldr	r1, [r7, #0]
 800a378:	6938      	ldr	r0, [r7, #16]
 800a37a:	f7ff fe40 	bl	8009ffe <put_fat>
 800a37e:	4603      	mov	r3, r0
 800a380:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a382:	7dfb      	ldrb	r3, [r7, #23]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d116      	bne.n	800a3b6 <create_chain+0x116>
		fs->last_clst = ncl;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	69fa      	ldr	r2, [r7, #28]
 800a38c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	695a      	ldr	r2, [r3, #20]
 800a392:	693b      	ldr	r3, [r7, #16]
 800a394:	699b      	ldr	r3, [r3, #24]
 800a396:	3b02      	subs	r3, #2
 800a398:	429a      	cmp	r2, r3
 800a39a:	d804      	bhi.n	800a3a6 <create_chain+0x106>
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	695b      	ldr	r3, [r3, #20]
 800a3a0:	1e5a      	subs	r2, r3, #1
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	791b      	ldrb	r3, [r3, #4]
 800a3aa:	f043 0301 	orr.w	r3, r3, #1
 800a3ae:	b2da      	uxtb	r2, r3
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	711a      	strb	r2, [r3, #4]
 800a3b4:	e007      	b.n	800a3c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a3b6:	7dfb      	ldrb	r3, [r7, #23]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d102      	bne.n	800a3c2 <create_chain+0x122>
 800a3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a3c0:	e000      	b.n	800a3c4 <create_chain+0x124>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a3c6:	69fb      	ldr	r3, [r7, #28]
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3720      	adds	r7, #32
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b087      	sub	sp, #28
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e4:	3304      	adds	r3, #4
 800a3e6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	0a5b      	lsrs	r3, r3, #9
 800a3ec:	68fa      	ldr	r2, [r7, #12]
 800a3ee:	8952      	ldrh	r2, [r2, #10]
 800a3f0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3f4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1d1a      	adds	r2, r3, #4
 800a3fa:	613a      	str	r2, [r7, #16]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <clmt_clust+0x3a>
 800a406:	2300      	movs	r3, #0
 800a408:	e010      	b.n	800a42c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a40a:	697a      	ldr	r2, [r7, #20]
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d307      	bcc.n	800a422 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a412:	697a      	ldr	r2, [r7, #20]
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	1ad3      	subs	r3, r2, r3
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	693b      	ldr	r3, [r7, #16]
 800a41c:	3304      	adds	r3, #4
 800a41e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a420:	e7e9      	b.n	800a3f6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a422:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a424:	693b      	ldr	r3, [r7, #16]
 800a426:	681a      	ldr	r2, [r3, #0]
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	4413      	add	r3, r2
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	371c      	adds	r7, #28
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a44e:	d204      	bcs.n	800a45a <dir_sdi+0x22>
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	f003 031f 	and.w	r3, r3, #31
 800a456:	2b00      	cmp	r3, #0
 800a458:	d001      	beq.n	800a45e <dir_sdi+0x26>
		return FR_INT_ERR;
 800a45a:	2302      	movs	r3, #2
 800a45c:	e063      	b.n	800a526 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	683a      	ldr	r2, [r7, #0]
 800a462:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d106      	bne.n	800a47e <dir_sdi+0x46>
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	781b      	ldrb	r3, [r3, #0]
 800a474:	2b02      	cmp	r3, #2
 800a476:	d902      	bls.n	800a47e <dir_sdi+0x46>
		clst = fs->dirbase;
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a47c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10c      	bne.n	800a49e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	095b      	lsrs	r3, r3, #5
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	8912      	ldrh	r2, [r2, #8]
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d301      	bcc.n	800a494 <dir_sdi+0x5c>
 800a490:	2302      	movs	r3, #2
 800a492:	e048      	b.n	800a526 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800a494:	693b      	ldr	r3, [r7, #16]
 800a496:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	61da      	str	r2, [r3, #28]
 800a49c:	e029      	b.n	800a4f2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800a49e:	693b      	ldr	r3, [r7, #16]
 800a4a0:	895b      	ldrh	r3, [r3, #10]
 800a4a2:	025b      	lsls	r3, r3, #9
 800a4a4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4a6:	e019      	b.n	800a4dc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6979      	ldr	r1, [r7, #20]
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	f7ff fcfe 	bl	8009eae <get_fat>
 800a4b2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4ba:	d101      	bne.n	800a4c0 <dir_sdi+0x88>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e032      	b.n	800a526 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d904      	bls.n	800a4d0 <dir_sdi+0x98>
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	699b      	ldr	r3, [r3, #24]
 800a4ca:	697a      	ldr	r2, [r7, #20]
 800a4cc:	429a      	cmp	r2, r3
 800a4ce:	d301      	bcc.n	800a4d4 <dir_sdi+0x9c>
 800a4d0:	2302      	movs	r3, #2
 800a4d2:	e028      	b.n	800a526 <dir_sdi+0xee>
			ofs -= csz;
 800a4d4:	683a      	ldr	r2, [r7, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	1ad3      	subs	r3, r2, r3
 800a4da:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800a4dc:	683a      	ldr	r2, [r7, #0]
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	d2e1      	bcs.n	800a4a8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800a4e4:	6979      	ldr	r1, [r7, #20]
 800a4e6:	6938      	ldr	r0, [r7, #16]
 800a4e8:	f7ff fcc2 	bl	8009e70 <clust2sect>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	697a      	ldr	r2, [r7, #20]
 800a4f6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	69db      	ldr	r3, [r3, #28]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <dir_sdi+0xcc>
 800a500:	2302      	movs	r3, #2
 800a502:	e010      	b.n	800a526 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	69da      	ldr	r2, [r3, #28]
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	0a5b      	lsrs	r3, r3, #9
 800a50c:	441a      	add	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a51e:	441a      	add	r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3718      	adds	r7, #24
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}

0800a52e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b086      	sub	sp, #24
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	695b      	ldr	r3, [r3, #20]
 800a542:	3320      	adds	r3, #32
 800a544:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	69db      	ldr	r3, [r3, #28]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d003      	beq.n	800a556 <dir_next+0x28>
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a554:	d301      	bcc.n	800a55a <dir_next+0x2c>
 800a556:	2304      	movs	r3, #4
 800a558:	e0aa      	b.n	800a6b0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a560:	2b00      	cmp	r3, #0
 800a562:	f040 8098 	bne.w	800a696 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	69db      	ldr	r3, [r3, #28]
 800a56a:	1c5a      	adds	r2, r3, #1
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	699b      	ldr	r3, [r3, #24]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d10b      	bne.n	800a590 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	095b      	lsrs	r3, r3, #5
 800a57c:	68fa      	ldr	r2, [r7, #12]
 800a57e:	8912      	ldrh	r2, [r2, #8]
 800a580:	4293      	cmp	r3, r2
 800a582:	f0c0 8088 	bcc.w	800a696 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	2200      	movs	r2, #0
 800a58a:	61da      	str	r2, [r3, #28]
 800a58c:	2304      	movs	r3, #4
 800a58e:	e08f      	b.n	800a6b0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	0a5b      	lsrs	r3, r3, #9
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	8952      	ldrh	r2, [r2, #10]
 800a598:	3a01      	subs	r2, #1
 800a59a:	4013      	ands	r3, r2
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d17a      	bne.n	800a696 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	4610      	mov	r0, r2
 800a5aa:	f7ff fc80 	bl	8009eae <get_fat>
 800a5ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800a5b0:	697b      	ldr	r3, [r7, #20]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d801      	bhi.n	800a5ba <dir_next+0x8c>
 800a5b6:	2302      	movs	r3, #2
 800a5b8:	e07a      	b.n	800a6b0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5c0:	d101      	bne.n	800a5c6 <dir_next+0x98>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e074      	b.n	800a6b0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d358      	bcc.n	800a682 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d104      	bne.n	800a5e0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	61da      	str	r2, [r3, #28]
 800a5dc:	2304      	movs	r3, #4
 800a5de:	e067      	b.n	800a6b0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800a5e0:	687a      	ldr	r2, [r7, #4]
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	4619      	mov	r1, r3
 800a5e8:	4610      	mov	r0, r2
 800a5ea:	f7ff fe59 	bl	800a2a0 <create_chain>
 800a5ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800a5f0:	697b      	ldr	r3, [r7, #20]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d101      	bne.n	800a5fa <dir_next+0xcc>
 800a5f6:	2307      	movs	r3, #7
 800a5f8:	e05a      	b.n	800a6b0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d101      	bne.n	800a604 <dir_next+0xd6>
 800a600:	2302      	movs	r3, #2
 800a602:	e055      	b.n	800a6b0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a60a:	d101      	bne.n	800a610 <dir_next+0xe2>
 800a60c:	2301      	movs	r3, #1
 800a60e:	e04f      	b.n	800a6b0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800a610:	68f8      	ldr	r0, [r7, #12]
 800a612:	f7ff fb4d 	bl	8009cb0 <sync_window>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d001      	beq.n	800a620 <dir_next+0xf2>
 800a61c:	2301      	movs	r3, #1
 800a61e:	e047      	b.n	800a6b0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	3334      	adds	r3, #52	; 0x34
 800a624:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a628:	2100      	movs	r1, #0
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7ff f977 	bl	800991e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a630:	2300      	movs	r3, #0
 800a632:	613b      	str	r3, [r7, #16]
 800a634:	6979      	ldr	r1, [r7, #20]
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f7ff fc1a 	bl	8009e70 <clust2sect>
 800a63c:	4602      	mov	r2, r0
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	631a      	str	r2, [r3, #48]	; 0x30
 800a642:	e012      	b.n	800a66a <dir_next+0x13c>
						fs->wflag = 1;
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	2201      	movs	r2, #1
 800a648:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f7ff fb30 	bl	8009cb0 <sync_window>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <dir_next+0x12c>
 800a656:	2301      	movs	r3, #1
 800a658:	e02a      	b.n	800a6b0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	3301      	adds	r3, #1
 800a65e:	613b      	str	r3, [r7, #16]
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a664:	1c5a      	adds	r2, r3, #1
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	631a      	str	r2, [r3, #48]	; 0x30
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	895b      	ldrh	r3, [r3, #10]
 800a66e:	461a      	mov	r2, r3
 800a670:	693b      	ldr	r3, [r7, #16]
 800a672:	4293      	cmp	r3, r2
 800a674:	d3e6      	bcc.n	800a644 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	1ad2      	subs	r2, r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800a688:	6979      	ldr	r1, [r7, #20]
 800a68a:	68f8      	ldr	r0, [r7, #12]
 800a68c:	f7ff fbf0 	bl	8009e70 <clust2sect>
 800a690:	4602      	mov	r2, r0
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	68ba      	ldr	r2, [r7, #8]
 800a69a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6a8:	441a      	add	r2, r3
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3718      	adds	r7, #24
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}

0800a6b8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800a6b8:	b580      	push	{r7, lr}
 800a6ba:	b086      	sub	sp, #24
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
 800a6c0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800a6c8:	2100      	movs	r1, #0
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f7ff feb4 	bl	800a438 <dir_sdi>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800a6d4:	7dfb      	ldrb	r3, [r7, #23]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d12b      	bne.n	800a732 <dir_alloc+0x7a>
		n = 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	69db      	ldr	r3, [r3, #28]
 800a6e2:	4619      	mov	r1, r3
 800a6e4:	68f8      	ldr	r0, [r7, #12]
 800a6e6:	f7ff fb27 	bl	8009d38 <move_window>
 800a6ea:	4603      	mov	r3, r0
 800a6ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d11d      	bne.n	800a730 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a1b      	ldr	r3, [r3, #32]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	2be5      	cmp	r3, #229	; 0xe5
 800a6fc:	d004      	beq.n	800a708 <dir_alloc+0x50>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a1b      	ldr	r3, [r3, #32]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d107      	bne.n	800a718 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	3301      	adds	r3, #1
 800a70c:	613b      	str	r3, [r7, #16]
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d102      	bne.n	800a71c <dir_alloc+0x64>
 800a716:	e00c      	b.n	800a732 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800a718:	2300      	movs	r3, #0
 800a71a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800a71c:	2101      	movs	r1, #1
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f7ff ff05 	bl	800a52e <dir_next>
 800a724:	4603      	mov	r3, r0
 800a726:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800a728:	7dfb      	ldrb	r3, [r7, #23]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d0d7      	beq.n	800a6de <dir_alloc+0x26>
 800a72e:	e000      	b.n	800a732 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800a730:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800a732:	7dfb      	ldrb	r3, [r7, #23]
 800a734:	2b04      	cmp	r3, #4
 800a736:	d101      	bne.n	800a73c <dir_alloc+0x84>
 800a738:	2307      	movs	r3, #7
 800a73a:	75fb      	strb	r3, [r7, #23]
	return res;
 800a73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3718      	adds	r7, #24
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}

0800a746 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800a746:	b580      	push	{r7, lr}
 800a748:	b084      	sub	sp, #16
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	331a      	adds	r3, #26
 800a754:	4618      	mov	r0, r3
 800a756:	f7ff f83f 	bl	80097d8 <ld_word>
 800a75a:	4603      	mov	r3, r0
 800a75c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	2b03      	cmp	r3, #3
 800a764:	d109      	bne.n	800a77a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	3314      	adds	r3, #20
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7ff f834 	bl	80097d8 <ld_word>
 800a770:	4603      	mov	r3, r0
 800a772:	041b      	lsls	r3, r3, #16
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	4313      	orrs	r3, r2
 800a778:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800a77a:	68fb      	ldr	r3, [r7, #12]
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3710      	adds	r7, #16
 800a780:	46bd      	mov	sp, r7
 800a782:	bd80      	pop	{r7, pc}

0800a784 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	60f8      	str	r0, [r7, #12]
 800a78c:	60b9      	str	r1, [r7, #8]
 800a78e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	331a      	adds	r3, #26
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	b292      	uxth	r2, r2
 800a798:	4611      	mov	r1, r2
 800a79a:	4618      	mov	r0, r3
 800a79c:	f7ff f857 	bl	800984e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	781b      	ldrb	r3, [r3, #0]
 800a7a4:	2b03      	cmp	r3, #3
 800a7a6:	d109      	bne.n	800a7bc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800a7a8:	68bb      	ldr	r3, [r7, #8]
 800a7aa:	f103 0214 	add.w	r2, r3, #20
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	0c1b      	lsrs	r3, r3, #16
 800a7b2:	b29b      	uxth	r3, r3
 800a7b4:	4619      	mov	r1, r3
 800a7b6:	4610      	mov	r0, r2
 800a7b8:	f7ff f849 	bl	800984e <st_word>
	}
}
 800a7bc:	bf00      	nop
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800a7c4:	b590      	push	{r4, r7, lr}
 800a7c6:	b087      	sub	sp, #28
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	331a      	adds	r3, #26
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	f7ff f800 	bl	80097d8 <ld_word>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <cmp_lfn+0x1e>
 800a7de:	2300      	movs	r3, #0
 800a7e0:	e059      	b.n	800a896 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	781b      	ldrb	r3, [r3, #0]
 800a7e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a7ea:	1e5a      	subs	r2, r3, #1
 800a7ec:	4613      	mov	r3, r2
 800a7ee:	005b      	lsls	r3, r3, #1
 800a7f0:	4413      	add	r3, r2
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	81fb      	strh	r3, [r7, #14]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	613b      	str	r3, [r7, #16]
 800a800:	e033      	b.n	800a86a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a802:	4a27      	ldr	r2, [pc, #156]	; (800a8a0 <cmp_lfn+0xdc>)
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	4413      	add	r3, r2
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	461a      	mov	r2, r3
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	4413      	add	r3, r2
 800a810:	4618      	mov	r0, r3
 800a812:	f7fe ffe1 	bl	80097d8 <ld_word>
 800a816:	4603      	mov	r3, r0
 800a818:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a81a:	89fb      	ldrh	r3, [r7, #14]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d01a      	beq.n	800a856 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800a820:	697b      	ldr	r3, [r7, #20]
 800a822:	2bfe      	cmp	r3, #254	; 0xfe
 800a824:	d812      	bhi.n	800a84c <cmp_lfn+0x88>
 800a826:	89bb      	ldrh	r3, [r7, #12]
 800a828:	4618      	mov	r0, r3
 800a82a:	f002 ff29 	bl	800d680 <ff_wtoupper>
 800a82e:	4603      	mov	r3, r0
 800a830:	461c      	mov	r4, r3
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	1c5a      	adds	r2, r3, #1
 800a836:	617a      	str	r2, [r7, #20]
 800a838:	005b      	lsls	r3, r3, #1
 800a83a:	687a      	ldr	r2, [r7, #4]
 800a83c:	4413      	add	r3, r2
 800a83e:	881b      	ldrh	r3, [r3, #0]
 800a840:	4618      	mov	r0, r3
 800a842:	f002 ff1d 	bl	800d680 <ff_wtoupper>
 800a846:	4603      	mov	r3, r0
 800a848:	429c      	cmp	r4, r3
 800a84a:	d001      	beq.n	800a850 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800a84c:	2300      	movs	r3, #0
 800a84e:	e022      	b.n	800a896 <cmp_lfn+0xd2>
			}
			wc = uc;
 800a850:	89bb      	ldrh	r3, [r7, #12]
 800a852:	81fb      	strh	r3, [r7, #14]
 800a854:	e006      	b.n	800a864 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a856:	89bb      	ldrh	r3, [r7, #12]
 800a858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d001      	beq.n	800a864 <cmp_lfn+0xa0>
 800a860:	2300      	movs	r3, #0
 800a862:	e018      	b.n	800a896 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a864:	693b      	ldr	r3, [r7, #16]
 800a866:	3301      	adds	r3, #1
 800a868:	613b      	str	r3, [r7, #16]
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b0c      	cmp	r3, #12
 800a86e:	d9c8      	bls.n	800a802 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d00b      	beq.n	800a894 <cmp_lfn+0xd0>
 800a87c:	89fb      	ldrh	r3, [r7, #14]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d008      	beq.n	800a894 <cmp_lfn+0xd0>
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4413      	add	r3, r2
 800a88a:	881b      	ldrh	r3, [r3, #0]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d001      	beq.n	800a894 <cmp_lfn+0xd0>
 800a890:	2300      	movs	r3, #0
 800a892:	e000      	b.n	800a896 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800a894:	2301      	movs	r3, #1
}
 800a896:	4618      	mov	r0, r3
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd90      	pop	{r4, r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	080224a4 	.word	0x080224a4

0800a8a4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b086      	sub	sp, #24
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	331a      	adds	r3, #26
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fe ff90 	bl	80097d8 <ld_word>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d001      	beq.n	800a8c2 <pick_lfn+0x1e>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	e04d      	b.n	800a95e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8ca:	1e5a      	subs	r2, r3, #1
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	005b      	lsls	r3, r3, #1
 800a8d0:	4413      	add	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a8d8:	2301      	movs	r3, #1
 800a8da:	81fb      	strh	r3, [r7, #14]
 800a8dc:	2300      	movs	r3, #0
 800a8de:	613b      	str	r3, [r7, #16]
 800a8e0:	e028      	b.n	800a934 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800a8e2:	4a21      	ldr	r2, [pc, #132]	; (800a968 <pick_lfn+0xc4>)
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	4413      	add	r3, r2
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	461a      	mov	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	f7fe ff71 	bl	80097d8 <ld_word>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800a8fa:	89fb      	ldrh	r3, [r7, #14]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00f      	beq.n	800a920 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2bfe      	cmp	r3, #254	; 0xfe
 800a904:	d901      	bls.n	800a90a <pick_lfn+0x66>
 800a906:	2300      	movs	r3, #0
 800a908:	e029      	b.n	800a95e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800a90a:	89bb      	ldrh	r3, [r7, #12]
 800a90c:	81fb      	strh	r3, [r7, #14]
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	1c5a      	adds	r2, r3, #1
 800a912:	617a      	str	r2, [r7, #20]
 800a914:	005b      	lsls	r3, r3, #1
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	4413      	add	r3, r2
 800a91a:	89fa      	ldrh	r2, [r7, #14]
 800a91c:	801a      	strh	r2, [r3, #0]
 800a91e:	e006      	b.n	800a92e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800a920:	89bb      	ldrh	r3, [r7, #12]
 800a922:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a926:	4293      	cmp	r3, r2
 800a928:	d001      	beq.n	800a92e <pick_lfn+0x8a>
 800a92a:	2300      	movs	r3, #0
 800a92c:	e017      	b.n	800a95e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3301      	adds	r3, #1
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b0c      	cmp	r3, #12
 800a938:	d9d3      	bls.n	800a8e2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800a93a:	683b      	ldr	r3, [r7, #0]
 800a93c:	781b      	ldrb	r3, [r3, #0]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b00      	cmp	r3, #0
 800a944:	d00a      	beq.n	800a95c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	2bfe      	cmp	r3, #254	; 0xfe
 800a94a:	d901      	bls.n	800a950 <pick_lfn+0xac>
 800a94c:	2300      	movs	r3, #0
 800a94e:	e006      	b.n	800a95e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800a950:	697b      	ldr	r3, [r7, #20]
 800a952:	005b      	lsls	r3, r3, #1
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	4413      	add	r3, r2
 800a958:	2200      	movs	r2, #0
 800a95a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800a95c:	2301      	movs	r3, #1
}
 800a95e:	4618      	mov	r0, r3
 800a960:	3718      	adds	r7, #24
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	bf00      	nop
 800a968:	080224a4 	.word	0x080224a4

0800a96c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b088      	sub	sp, #32
 800a970:	af00      	add	r7, sp, #0
 800a972:	60f8      	str	r0, [r7, #12]
 800a974:	60b9      	str	r1, [r7, #8]
 800a976:	4611      	mov	r1, r2
 800a978:	461a      	mov	r2, r3
 800a97a:	460b      	mov	r3, r1
 800a97c:	71fb      	strb	r3, [r7, #7]
 800a97e:	4613      	mov	r3, r2
 800a980:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	330d      	adds	r3, #13
 800a986:	79ba      	ldrb	r2, [r7, #6]
 800a988:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800a98a:	68bb      	ldr	r3, [r7, #8]
 800a98c:	330b      	adds	r3, #11
 800a98e:	220f      	movs	r2, #15
 800a990:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	330c      	adds	r3, #12
 800a996:	2200      	movs	r2, #0
 800a998:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800a99a:	68bb      	ldr	r3, [r7, #8]
 800a99c:	331a      	adds	r3, #26
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7fe ff54 	bl	800984e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800a9a6:	79fb      	ldrb	r3, [r7, #7]
 800a9a8:	1e5a      	subs	r2, r3, #1
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	005b      	lsls	r3, r3, #1
 800a9ae:	4413      	add	r3, r2
 800a9b0:	009b      	lsls	r3, r3, #2
 800a9b2:	4413      	add	r3, r2
 800a9b4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	82fb      	strh	r3, [r7, #22]
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800a9be:	8afb      	ldrh	r3, [r7, #22]
 800a9c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d007      	beq.n	800a9d8 <put_lfn+0x6c>
 800a9c8:	69fb      	ldr	r3, [r7, #28]
 800a9ca:	1c5a      	adds	r2, r3, #1
 800a9cc:	61fa      	str	r2, [r7, #28]
 800a9ce:	005b      	lsls	r3, r3, #1
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	4413      	add	r3, r2
 800a9d4:	881b      	ldrh	r3, [r3, #0]
 800a9d6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800a9d8:	4a17      	ldr	r2, [pc, #92]	; (800aa38 <put_lfn+0xcc>)
 800a9da:	69bb      	ldr	r3, [r7, #24]
 800a9dc:	4413      	add	r3, r2
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	8afa      	ldrh	r2, [r7, #22]
 800a9e8:	4611      	mov	r1, r2
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	f7fe ff2f 	bl	800984e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800a9f0:	8afb      	ldrh	r3, [r7, #22]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d102      	bne.n	800a9fc <put_lfn+0x90>
 800a9f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a9fa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	3301      	adds	r3, #1
 800aa00:	61bb      	str	r3, [r7, #24]
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	2b0c      	cmp	r3, #12
 800aa06:	d9da      	bls.n	800a9be <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800aa08:	8afb      	ldrh	r3, [r7, #22]
 800aa0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d006      	beq.n	800aa20 <put_lfn+0xb4>
 800aa12:	69fb      	ldr	r3, [r7, #28]
 800aa14:	005b      	lsls	r3, r3, #1
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	881b      	ldrh	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d103      	bne.n	800aa28 <put_lfn+0xbc>
 800aa20:	79fb      	ldrb	r3, [r7, #7]
 800aa22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	79fa      	ldrb	r2, [r7, #7]
 800aa2c:	701a      	strb	r2, [r3, #0]
}
 800aa2e:	bf00      	nop
 800aa30:	3720      	adds	r7, #32
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	080224a4 	.word	0x080224a4

0800aa3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b08c      	sub	sp, #48	; 0x30
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	607a      	str	r2, [r7, #4]
 800aa48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800aa4a:	220b      	movs	r2, #11
 800aa4c:	68b9      	ldr	r1, [r7, #8]
 800aa4e:	68f8      	ldr	r0, [r7, #12]
 800aa50:	f7fe ff44 	bl	80098dc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	2b05      	cmp	r3, #5
 800aa58:	d92b      	bls.n	800aab2 <gen_numname+0x76>
		sr = seq;
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800aa5e:	e022      	b.n	800aaa6 <gen_numname+0x6a>
			wc = *lfn++;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	1c9a      	adds	r2, r3, #2
 800aa64:	607a      	str	r2, [r7, #4]
 800aa66:	881b      	ldrh	r3, [r3, #0]
 800aa68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa6e:	e017      	b.n	800aaa0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800aa70:	69fb      	ldr	r3, [r7, #28]
 800aa72:	005a      	lsls	r2, r3, #1
 800aa74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa76:	f003 0301 	and.w	r3, r3, #1
 800aa7a:	4413      	add	r3, r2
 800aa7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800aa7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aa80:	085b      	lsrs	r3, r3, #1
 800aa82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800aa84:	69fb      	ldr	r3, [r7, #28]
 800aa86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d005      	beq.n	800aa9a <gen_numname+0x5e>
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800aa94:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800aa98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800aa9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	2b0f      	cmp	r3, #15
 800aaa4:	d9e4      	bls.n	800aa70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	881b      	ldrh	r3, [r3, #0]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d1d8      	bne.n	800aa60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800aaae:	69fb      	ldr	r3, [r7, #28]
 800aab0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800aab2:	2307      	movs	r3, #7
 800aab4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	b2db      	uxtb	r3, r3
 800aaba:	f003 030f 	and.w	r3, r3, #15
 800aabe:	b2db      	uxtb	r3, r3
 800aac0:	3330      	adds	r3, #48	; 0x30
 800aac2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800aac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aaca:	2b39      	cmp	r3, #57	; 0x39
 800aacc:	d904      	bls.n	800aad8 <gen_numname+0x9c>
 800aace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aad2:	3307      	adds	r3, #7
 800aad4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800aad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aada:	1e5a      	subs	r2, r3, #1
 800aadc:	62ba      	str	r2, [r7, #40]	; 0x28
 800aade:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800aae2:	4413      	add	r3, r2
 800aae4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800aae8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800aaec:	683b      	ldr	r3, [r7, #0]
 800aaee:	091b      	lsrs	r3, r3, #4
 800aaf0:	603b      	str	r3, [r7, #0]
	} while (seq);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d1de      	bne.n	800aab6 <gen_numname+0x7a>
	ns[i] = '~';
 800aaf8:	f107 0214 	add.w	r2, r7, #20
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	4413      	add	r3, r2
 800ab00:	227e      	movs	r2, #126	; 0x7e
 800ab02:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ab04:	2300      	movs	r3, #0
 800ab06:	627b      	str	r3, [r7, #36]	; 0x24
 800ab08:	e002      	b.n	800ab10 <gen_numname+0xd4>
 800ab0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	627b      	str	r3, [r7, #36]	; 0x24
 800ab10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	429a      	cmp	r2, r3
 800ab16:	d205      	bcs.n	800ab24 <gen_numname+0xe8>
 800ab18:	68fa      	ldr	r2, [r7, #12]
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	4413      	add	r3, r2
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	2b20      	cmp	r3, #32
 800ab22:	d1f2      	bne.n	800ab0a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ab24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab26:	2b07      	cmp	r3, #7
 800ab28:	d808      	bhi.n	800ab3c <gen_numname+0x100>
 800ab2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	62ba      	str	r2, [r7, #40]	; 0x28
 800ab30:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ab34:	4413      	add	r3, r2
 800ab36:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ab3a:	e000      	b.n	800ab3e <gen_numname+0x102>
 800ab3c:	2120      	movs	r1, #32
 800ab3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab40:	1c5a      	adds	r2, r3, #1
 800ab42:	627a      	str	r2, [r7, #36]	; 0x24
 800ab44:	68fa      	ldr	r2, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	460a      	mov	r2, r1
 800ab4a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab4e:	2b07      	cmp	r3, #7
 800ab50:	d9e8      	bls.n	800ab24 <gen_numname+0xe8>
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	3730      	adds	r7, #48	; 0x30
 800ab58:	46bd      	mov	sp, r7
 800ab5a:	bd80      	pop	{r7, pc}

0800ab5c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ab5c:	b480      	push	{r7}
 800ab5e:	b085      	sub	sp, #20
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ab64:	2300      	movs	r3, #0
 800ab66:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ab68:	230b      	movs	r3, #11
 800ab6a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	b2da      	uxtb	r2, r3
 800ab70:	0852      	lsrs	r2, r2, #1
 800ab72:	01db      	lsls	r3, r3, #7
 800ab74:	4313      	orrs	r3, r2
 800ab76:	b2da      	uxtb	r2, r3
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	1c59      	adds	r1, r3, #1
 800ab7c:	6079      	str	r1, [r7, #4]
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	4413      	add	r3, r2
 800ab82:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	3b01      	subs	r3, #1
 800ab88:	60bb      	str	r3, [r7, #8]
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d1ed      	bne.n	800ab6c <sum_sfn+0x10>
	return sum;
 800ab90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3714      	adds	r7, #20
 800ab96:	46bd      	mov	sp, r7
 800ab98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9c:	4770      	bx	lr

0800ab9e <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b086      	sub	sp, #24
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800aba8:	2304      	movs	r3, #4
 800abaa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800abb2:	23ff      	movs	r3, #255	; 0xff
 800abb4:	757b      	strb	r3, [r7, #21]
 800abb6:	23ff      	movs	r3, #255	; 0xff
 800abb8:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800abba:	e081      	b.n	800acc0 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	69db      	ldr	r3, [r3, #28]
 800abc0:	4619      	mov	r1, r3
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f7ff f8b8 	bl	8009d38 <move_window>
 800abc8:	4603      	mov	r3, r0
 800abca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d17c      	bne.n	800accc <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	6a1b      	ldr	r3, [r3, #32]
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800abda:	7dbb      	ldrb	r3, [r7, #22]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d102      	bne.n	800abe6 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800abe0:	2304      	movs	r3, #4
 800abe2:	75fb      	strb	r3, [r7, #23]
 800abe4:	e077      	b.n	800acd6 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	330b      	adds	r3, #11
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abf2:	73fb      	strb	r3, [r7, #15]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7bfa      	ldrb	r2, [r7, #15]
 800abf8:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800abfa:	7dbb      	ldrb	r3, [r7, #22]
 800abfc:	2be5      	cmp	r3, #229	; 0xe5
 800abfe:	d00e      	beq.n	800ac1e <dir_read+0x80>
 800ac00:	7dbb      	ldrb	r3, [r7, #22]
 800ac02:	2b2e      	cmp	r3, #46	; 0x2e
 800ac04:	d00b      	beq.n	800ac1e <dir_read+0x80>
 800ac06:	7bfb      	ldrb	r3, [r7, #15]
 800ac08:	f023 0320 	bic.w	r3, r3, #32
 800ac0c:	2b08      	cmp	r3, #8
 800ac0e:	bf0c      	ite	eq
 800ac10:	2301      	moveq	r3, #1
 800ac12:	2300      	movne	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	461a      	mov	r2, r3
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	4293      	cmp	r3, r2
 800ac1c:	d002      	beq.n	800ac24 <dir_read+0x86>
				ord = 0xFF;
 800ac1e:	23ff      	movs	r3, #255	; 0xff
 800ac20:	757b      	strb	r3, [r7, #21]
 800ac22:	e044      	b.n	800acae <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ac24:	7bfb      	ldrb	r3, [r7, #15]
 800ac26:	2b0f      	cmp	r3, #15
 800ac28:	d12f      	bne.n	800ac8a <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ac2a:	7dbb      	ldrb	r3, [r7, #22]
 800ac2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00d      	beq.n	800ac50 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6a1b      	ldr	r3, [r3, #32]
 800ac38:	7b5b      	ldrb	r3, [r3, #13]
 800ac3a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ac3c:	7dbb      	ldrb	r3, [r7, #22]
 800ac3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac42:	75bb      	strb	r3, [r7, #22]
 800ac44:	7dbb      	ldrb	r3, [r7, #22]
 800ac46:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	695a      	ldr	r2, [r3, #20]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ac50:	7dba      	ldrb	r2, [r7, #22]
 800ac52:	7d7b      	ldrb	r3, [r7, #21]
 800ac54:	429a      	cmp	r2, r3
 800ac56:	d115      	bne.n	800ac84 <dir_read+0xe6>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6a1b      	ldr	r3, [r3, #32]
 800ac5c:	330d      	adds	r3, #13
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	7d3a      	ldrb	r2, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d10e      	bne.n	800ac84 <dir_read+0xe6>
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	68da      	ldr	r2, [r3, #12]
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	4619      	mov	r1, r3
 800ac70:	4610      	mov	r0, r2
 800ac72:	f7ff fe17 	bl	800a8a4 <pick_lfn>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <dir_read+0xe6>
 800ac7c:	7d7b      	ldrb	r3, [r7, #21]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	e000      	b.n	800ac86 <dir_read+0xe8>
 800ac84:	23ff      	movs	r3, #255	; 0xff
 800ac86:	757b      	strb	r3, [r7, #21]
 800ac88:	e011      	b.n	800acae <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ac8a:	7d7b      	ldrb	r3, [r7, #21]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d109      	bne.n	800aca4 <dir_read+0x106>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	6a1b      	ldr	r3, [r3, #32]
 800ac94:	4618      	mov	r0, r3
 800ac96:	f7ff ff61 	bl	800ab5c <sum_sfn>
 800ac9a:	4603      	mov	r3, r0
 800ac9c:	461a      	mov	r2, r3
 800ac9e:	7d3b      	ldrb	r3, [r7, #20]
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d015      	beq.n	800acd0 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	f04f 32ff 	mov.w	r2, #4294967295
 800acaa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800acac:	e010      	b.n	800acd0 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800acae:	2100      	movs	r1, #0
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff fc3c 	bl	800a52e <dir_next>
 800acb6:	4603      	mov	r3, r0
 800acb8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800acba:	7dfb      	ldrb	r3, [r7, #23]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d109      	bne.n	800acd4 <dir_read+0x136>
	while (dp->sect) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	69db      	ldr	r3, [r3, #28]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	f47f af79 	bne.w	800abbc <dir_read+0x1e>
 800acca:	e004      	b.n	800acd6 <dir_read+0x138>
		if (res != FR_OK) break;
 800accc:	bf00      	nop
 800acce:	e002      	b.n	800acd6 <dir_read+0x138>
					break;
 800acd0:	bf00      	nop
 800acd2:	e000      	b.n	800acd6 <dir_read+0x138>
		if (res != FR_OK) break;
 800acd4:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800acd6:	7dfb      	ldrb	r3, [r7, #23]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d002      	beq.n	800ace2 <dir_read+0x144>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2200      	movs	r2, #0
 800ace0:	61da      	str	r2, [r3, #28]
	return res;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b086      	sub	sp, #24
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800acfa:	2100      	movs	r1, #0
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7ff fb9b 	bl	800a438 <dir_sdi>
 800ad02:	4603      	mov	r3, r0
 800ad04:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d001      	beq.n	800ad10 <dir_find+0x24>
 800ad0c:	7dfb      	ldrb	r3, [r7, #23]
 800ad0e:	e0a9      	b.n	800ae64 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad10:	23ff      	movs	r3, #255	; 0xff
 800ad12:	753b      	strb	r3, [r7, #20]
 800ad14:	7d3b      	ldrb	r3, [r7, #20]
 800ad16:	757b      	strb	r3, [r7, #21]
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ad1e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	69db      	ldr	r3, [r3, #28]
 800ad24:	4619      	mov	r1, r3
 800ad26:	6938      	ldr	r0, [r7, #16]
 800ad28:	f7ff f806 	bl	8009d38 <move_window>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad30:	7dfb      	ldrb	r3, [r7, #23]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f040 8090 	bne.w	800ae58 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	6a1b      	ldr	r3, [r3, #32]
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ad40:	7dbb      	ldrb	r3, [r7, #22]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d102      	bne.n	800ad4c <dir_find+0x60>
 800ad46:	2304      	movs	r3, #4
 800ad48:	75fb      	strb	r3, [r7, #23]
 800ad4a:	e08a      	b.n	800ae62 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6a1b      	ldr	r3, [r3, #32]
 800ad50:	330b      	adds	r3, #11
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ad58:	73fb      	strb	r3, [r7, #15]
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7bfa      	ldrb	r2, [r7, #15]
 800ad5e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800ad60:	7dbb      	ldrb	r3, [r7, #22]
 800ad62:	2be5      	cmp	r3, #229	; 0xe5
 800ad64:	d007      	beq.n	800ad76 <dir_find+0x8a>
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
 800ad68:	f003 0308 	and.w	r3, r3, #8
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d009      	beq.n	800ad84 <dir_find+0x98>
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	2b0f      	cmp	r3, #15
 800ad74:	d006      	beq.n	800ad84 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ad76:	23ff      	movs	r3, #255	; 0xff
 800ad78:	757b      	strb	r3, [r7, #21]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ad80:	631a      	str	r2, [r3, #48]	; 0x30
 800ad82:	e05e      	b.n	800ae42 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800ad84:	7bfb      	ldrb	r3, [r7, #15]
 800ad86:	2b0f      	cmp	r3, #15
 800ad88:	d136      	bne.n	800adf8 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ad90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d154      	bne.n	800ae42 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
 800ad9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00d      	beq.n	800adbe <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a1b      	ldr	r3, [r3, #32]
 800ada6:	7b5b      	ldrb	r3, [r3, #13]
 800ada8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800adaa:	7dbb      	ldrb	r3, [r7, #22]
 800adac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adb0:	75bb      	strb	r3, [r7, #22]
 800adb2:	7dbb      	ldrb	r3, [r7, #22]
 800adb4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	695a      	ldr	r2, [r3, #20]
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800adbe:	7dba      	ldrb	r2, [r7, #22]
 800adc0:	7d7b      	ldrb	r3, [r7, #21]
 800adc2:	429a      	cmp	r2, r3
 800adc4:	d115      	bne.n	800adf2 <dir_find+0x106>
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	330d      	adds	r3, #13
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	7d3a      	ldrb	r2, [r7, #20]
 800add0:	429a      	cmp	r2, r3
 800add2:	d10e      	bne.n	800adf2 <dir_find+0x106>
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	6a1b      	ldr	r3, [r3, #32]
 800addc:	4619      	mov	r1, r3
 800adde:	4610      	mov	r0, r2
 800ade0:	f7ff fcf0 	bl	800a7c4 <cmp_lfn>
 800ade4:	4603      	mov	r3, r0
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d003      	beq.n	800adf2 <dir_find+0x106>
 800adea:	7d7b      	ldrb	r3, [r7, #21]
 800adec:	3b01      	subs	r3, #1
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	e000      	b.n	800adf4 <dir_find+0x108>
 800adf2:	23ff      	movs	r3, #255	; 0xff
 800adf4:	757b      	strb	r3, [r7, #21]
 800adf6:	e024      	b.n	800ae42 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800adf8:	7d7b      	ldrb	r3, [r7, #21]
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d109      	bne.n	800ae12 <dir_find+0x126>
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff feaa 	bl	800ab5c <sum_sfn>
 800ae08:	4603      	mov	r3, r0
 800ae0a:	461a      	mov	r2, r3
 800ae0c:	7d3b      	ldrb	r3, [r7, #20]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	d024      	beq.n	800ae5c <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d10a      	bne.n	800ae36 <dir_find+0x14a>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6a18      	ldr	r0, [r3, #32]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	3324      	adds	r3, #36	; 0x24
 800ae28:	220b      	movs	r2, #11
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	f7fe fd92 	bl	8009954 <mem_cmp>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d014      	beq.n	800ae60 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ae36:	23ff      	movs	r3, #255	; 0xff
 800ae38:	757b      	strb	r3, [r7, #21]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae40:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ae42:	2100      	movs	r1, #0
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f7ff fb72 	bl	800a52e <dir_next>
 800ae4a:	4603      	mov	r3, r0
 800ae4c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ae4e:	7dfb      	ldrb	r3, [r7, #23]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f43f af65 	beq.w	800ad20 <dir_find+0x34>
 800ae56:	e004      	b.n	800ae62 <dir_find+0x176>
		if (res != FR_OK) break;
 800ae58:	bf00      	nop
 800ae5a:	e002      	b.n	800ae62 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ae5c:	bf00      	nop
 800ae5e:	e000      	b.n	800ae62 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ae60:	bf00      	nop

	return res;
 800ae62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3718      	adds	r7, #24
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08c      	sub	sp, #48	; 0x30
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ae80:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	d001      	beq.n	800ae8c <dir_register+0x20>
 800ae88:	2306      	movs	r3, #6
 800ae8a:	e0e0      	b.n	800b04e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	627b      	str	r3, [r7, #36]	; 0x24
 800ae90:	e002      	b.n	800ae98 <dir_register+0x2c>
 800ae92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae94:	3301      	adds	r3, #1
 800ae96:	627b      	str	r3, [r7, #36]	; 0x24
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	005b      	lsls	r3, r3, #1
 800aea0:	4413      	add	r3, r2
 800aea2:	881b      	ldrh	r3, [r3, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d1f4      	bne.n	800ae92 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800aeae:	f107 030c 	add.w	r3, r7, #12
 800aeb2:	220c      	movs	r2, #12
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe fd11 	bl	80098dc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	f003 0301 	and.w	r3, r3, #1
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d032      	beq.n	800af2a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2240      	movs	r2, #64	; 0x40
 800aec8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800aecc:	2301      	movs	r3, #1
 800aece:	62bb      	str	r3, [r7, #40]	; 0x28
 800aed0:	e016      	b.n	800af00 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	68da      	ldr	r2, [r3, #12]
 800aedc:	f107 010c 	add.w	r1, r7, #12
 800aee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aee2:	f7ff fdab 	bl	800aa3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff ff00 	bl	800acec <dir_find>
 800aeec:	4603      	mov	r3, r0
 800aeee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800aef2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d106      	bne.n	800af08 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800aefa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefc:	3301      	adds	r3, #1
 800aefe:	62bb      	str	r3, [r7, #40]	; 0x28
 800af00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af02:	2b63      	cmp	r3, #99	; 0x63
 800af04:	d9e5      	bls.n	800aed2 <dir_register+0x66>
 800af06:	e000      	b.n	800af0a <dir_register+0x9e>
			if (res != FR_OK) break;
 800af08:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800af0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af0c:	2b64      	cmp	r3, #100	; 0x64
 800af0e:	d101      	bne.n	800af14 <dir_register+0xa8>
 800af10:	2307      	movs	r3, #7
 800af12:	e09c      	b.n	800b04e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800af14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af18:	2b04      	cmp	r3, #4
 800af1a:	d002      	beq.n	800af22 <dir_register+0xb6>
 800af1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af20:	e095      	b.n	800b04e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800af22:	7dfa      	ldrb	r2, [r7, #23]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800af2a:	7dfb      	ldrb	r3, [r7, #23]
 800af2c:	f003 0302 	and.w	r3, r3, #2
 800af30:	2b00      	cmp	r3, #0
 800af32:	d007      	beq.n	800af44 <dir_register+0xd8>
 800af34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af36:	330c      	adds	r3, #12
 800af38:	4a47      	ldr	r2, [pc, #284]	; (800b058 <dir_register+0x1ec>)
 800af3a:	fba2 2303 	umull	r2, r3, r2, r3
 800af3e:	089b      	lsrs	r3, r3, #2
 800af40:	3301      	adds	r3, #1
 800af42:	e000      	b.n	800af46 <dir_register+0xda>
 800af44:	2301      	movs	r3, #1
 800af46:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800af48:	6a39      	ldr	r1, [r7, #32]
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff fbb4 	bl	800a6b8 <dir_alloc>
 800af50:	4603      	mov	r3, r0
 800af52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800af56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d148      	bne.n	800aff0 <dir_register+0x184>
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	3b01      	subs	r3, #1
 800af62:	623b      	str	r3, [r7, #32]
 800af64:	6a3b      	ldr	r3, [r7, #32]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d042      	beq.n	800aff0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	695a      	ldr	r2, [r3, #20]
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	015b      	lsls	r3, r3, #5
 800af72:	1ad3      	subs	r3, r2, r3
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff fa5e 	bl	800a438 <dir_sdi>
 800af7c:	4603      	mov	r3, r0
 800af7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800af82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800af86:	2b00      	cmp	r3, #0
 800af88:	d132      	bne.n	800aff0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3324      	adds	r3, #36	; 0x24
 800af8e:	4618      	mov	r0, r3
 800af90:	f7ff fde4 	bl	800ab5c <sum_sfn>
 800af94:	4603      	mov	r3, r0
 800af96:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	69db      	ldr	r3, [r3, #28]
 800af9c:	4619      	mov	r1, r3
 800af9e:	69f8      	ldr	r0, [r7, #28]
 800afa0:	f7fe feca 	bl	8009d38 <move_window>
 800afa4:	4603      	mov	r3, r0
 800afa6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800afaa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d11d      	bne.n	800afee <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800afb2:	69fb      	ldr	r3, [r7, #28]
 800afb4:	68d8      	ldr	r0, [r3, #12]
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6a19      	ldr	r1, [r3, #32]
 800afba:	6a3b      	ldr	r3, [r7, #32]
 800afbc:	b2da      	uxtb	r2, r3
 800afbe:	7efb      	ldrb	r3, [r7, #27]
 800afc0:	f7ff fcd4 	bl	800a96c <put_lfn>
				fs->wflag = 1;
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	2201      	movs	r2, #1
 800afc8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800afca:	2100      	movs	r1, #0
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f7ff faae 	bl	800a52e <dir_next>
 800afd2:	4603      	mov	r3, r0
 800afd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800afd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d107      	bne.n	800aff0 <dir_register+0x184>
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	3b01      	subs	r3, #1
 800afe4:	623b      	str	r3, [r7, #32]
 800afe6:	6a3b      	ldr	r3, [r7, #32]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d1d5      	bne.n	800af98 <dir_register+0x12c>
 800afec:	e000      	b.n	800aff0 <dir_register+0x184>
				if (res != FR_OK) break;
 800afee:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800aff0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d128      	bne.n	800b04a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	69db      	ldr	r3, [r3, #28]
 800affc:	4619      	mov	r1, r3
 800affe:	69f8      	ldr	r0, [r7, #28]
 800b000:	f7fe fe9a 	bl	8009d38 <move_window>
 800b004:	4603      	mov	r3, r0
 800b006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800b00a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d11b      	bne.n	800b04a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6a1b      	ldr	r3, [r3, #32]
 800b016:	2220      	movs	r2, #32
 800b018:	2100      	movs	r1, #0
 800b01a:	4618      	mov	r0, r3
 800b01c:	f7fe fc7f 	bl	800991e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a18      	ldr	r0, [r3, #32]
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	3324      	adds	r3, #36	; 0x24
 800b028:	220b      	movs	r2, #11
 800b02a:	4619      	mov	r1, r3
 800b02c:	f7fe fc56 	bl	80098dc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	6a1b      	ldr	r3, [r3, #32]
 800b03a:	330c      	adds	r3, #12
 800b03c:	f002 0218 	and.w	r2, r2, #24
 800b040:	b2d2      	uxtb	r2, r2
 800b042:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800b044:	69fb      	ldr	r3, [r7, #28]
 800b046:	2201      	movs	r2, #1
 800b048:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b04a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3730      	adds	r7, #48	; 0x30
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}
 800b056:	bf00      	nop
 800b058:	4ec4ec4f 	.word	0x4ec4ec4f

0800b05c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b088      	sub	sp, #32
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	2200      	movs	r2, #0
 800b070:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	69db      	ldr	r3, [r3, #28]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80c9 	beq.w	800b20e <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b080:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b084:	d032      	beq.n	800b0ec <get_fileinfo+0x90>
			i = j = 0;
 800b086:	2300      	movs	r3, #0
 800b088:	61bb      	str	r3, [r7, #24]
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b08e:	e01b      	b.n	800b0c8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800b090:	89fb      	ldrh	r3, [r7, #14]
 800b092:	2100      	movs	r1, #0
 800b094:	4618      	mov	r0, r3
 800b096:	f002 fab7 	bl	800d608 <ff_convert>
 800b09a:	4603      	mov	r3, r0
 800b09c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800b09e:	89fb      	ldrh	r3, [r7, #14]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d102      	bne.n	800b0aa <get_fileinfo+0x4e>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	61fb      	str	r3, [r7, #28]
 800b0a8:	e01a      	b.n	800b0e0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800b0aa:	69fb      	ldr	r3, [r7, #28]
 800b0ac:	2bfe      	cmp	r3, #254	; 0xfe
 800b0ae:	d902      	bls.n	800b0b6 <get_fileinfo+0x5a>
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	61fb      	str	r3, [r7, #28]
 800b0b4:	e014      	b.n	800b0e0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800b0b6:	69fb      	ldr	r3, [r7, #28]
 800b0b8:	1c5a      	adds	r2, r3, #1
 800b0ba:	61fa      	str	r2, [r7, #28]
 800b0bc:	89fa      	ldrh	r2, [r7, #14]
 800b0be:	b2d1      	uxtb	r1, r2
 800b0c0:	683a      	ldr	r2, [r7, #0]
 800b0c2:	4413      	add	r3, r2
 800b0c4:	460a      	mov	r2, r1
 800b0c6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800b0c8:	693b      	ldr	r3, [r7, #16]
 800b0ca:	68da      	ldr	r2, [r3, #12]
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	1c59      	adds	r1, r3, #1
 800b0d0:	61b9      	str	r1, [r7, #24]
 800b0d2:	005b      	lsls	r3, r3, #1
 800b0d4:	4413      	add	r3, r2
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	81fb      	strh	r3, [r7, #14]
 800b0da:	89fb      	ldrh	r3, [r7, #14]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d1d7      	bne.n	800b090 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800b0e0:	683a      	ldr	r2, [r7, #0]
 800b0e2:	69fb      	ldr	r3, [r7, #28]
 800b0e4:	4413      	add	r3, r2
 800b0e6:	3316      	adds	r3, #22
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	61bb      	str	r3, [r7, #24]
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800b0f4:	683a      	ldr	r2, [r7, #0]
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3316      	adds	r3, #22
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800b100:	e04c      	b.n	800b19c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6a1a      	ldr	r2, [r3, #32]
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	1c59      	adds	r1, r3, #1
 800b10a:	61f9      	str	r1, [r7, #28]
 800b10c:	4413      	add	r3, r2
 800b10e:	781b      	ldrb	r3, [r3, #0]
 800b110:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800b112:	7dfb      	ldrb	r3, [r7, #23]
 800b114:	2b20      	cmp	r3, #32
 800b116:	d100      	bne.n	800b11a <get_fileinfo+0xbe>
 800b118:	e040      	b.n	800b19c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	2b05      	cmp	r3, #5
 800b11e:	d101      	bne.n	800b124 <get_fileinfo+0xc8>
 800b120:	23e5      	movs	r3, #229	; 0xe5
 800b122:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800b124:	69fb      	ldr	r3, [r7, #28]
 800b126:	2b09      	cmp	r3, #9
 800b128:	d10f      	bne.n	800b14a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800b12a:	89bb      	ldrh	r3, [r7, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d105      	bne.n	800b13c <get_fileinfo+0xe0>
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	4413      	add	r3, r2
 800b136:	3316      	adds	r3, #22
 800b138:	222e      	movs	r2, #46	; 0x2e
 800b13a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	61ba      	str	r2, [r7, #24]
 800b142:	683a      	ldr	r2, [r7, #0]
 800b144:	4413      	add	r3, r2
 800b146:	222e      	movs	r2, #46	; 0x2e
 800b148:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800b14a:	683a      	ldr	r2, [r7, #0]
 800b14c:	69bb      	ldr	r3, [r7, #24]
 800b14e:	4413      	add	r3, r2
 800b150:	3309      	adds	r3, #9
 800b152:	7dfa      	ldrb	r2, [r7, #23]
 800b154:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800b156:	89bb      	ldrh	r3, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d11c      	bne.n	800b196 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800b15c:	7dfb      	ldrb	r3, [r7, #23]
 800b15e:	2b40      	cmp	r3, #64	; 0x40
 800b160:	d913      	bls.n	800b18a <get_fileinfo+0x12e>
 800b162:	7dfb      	ldrb	r3, [r7, #23]
 800b164:	2b5a      	cmp	r3, #90	; 0x5a
 800b166:	d810      	bhi.n	800b18a <get_fileinfo+0x12e>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6a1b      	ldr	r3, [r3, #32]
 800b16c:	330c      	adds	r3, #12
 800b16e:	781b      	ldrb	r3, [r3, #0]
 800b170:	461a      	mov	r2, r3
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	2b08      	cmp	r3, #8
 800b176:	d901      	bls.n	800b17c <get_fileinfo+0x120>
 800b178:	2310      	movs	r3, #16
 800b17a:	e000      	b.n	800b17e <get_fileinfo+0x122>
 800b17c:	2308      	movs	r3, #8
 800b17e:	4013      	ands	r3, r2
 800b180:	2b00      	cmp	r3, #0
 800b182:	d002      	beq.n	800b18a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800b184:	7dfb      	ldrb	r3, [r7, #23]
 800b186:	3320      	adds	r3, #32
 800b188:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800b18a:	683a      	ldr	r2, [r7, #0]
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	4413      	add	r3, r2
 800b190:	3316      	adds	r3, #22
 800b192:	7dfa      	ldrb	r2, [r7, #23]
 800b194:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	3301      	adds	r3, #1
 800b19a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	2b0a      	cmp	r3, #10
 800b1a0:	d9af      	bls.n	800b102 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800b1a2:	89bb      	ldrh	r3, [r7, #12]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d10d      	bne.n	800b1c4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800b1a8:	683a      	ldr	r2, [r7, #0]
 800b1aa:	69bb      	ldr	r3, [r7, #24]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	3316      	adds	r3, #22
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	6a1b      	ldr	r3, [r3, #32]
 800b1b8:	330c      	adds	r3, #12
 800b1ba:	781b      	ldrb	r3, [r3, #0]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d101      	bne.n	800b1c4 <get_fileinfo+0x168>
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800b1c4:	683a      	ldr	r2, [r7, #0]
 800b1c6:	69bb      	ldr	r3, [r7, #24]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	3309      	adds	r3, #9
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6a1b      	ldr	r3, [r3, #32]
 800b1d4:	7ada      	ldrb	r2, [r3, #11]
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a1b      	ldr	r3, [r3, #32]
 800b1de:	331c      	adds	r3, #28
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f7fe fb11 	bl	8009808 <ld_dword>
 800b1e6:	4602      	mov	r2, r0
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6a1b      	ldr	r3, [r3, #32]
 800b1f0:	3316      	adds	r3, #22
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f7fe fb08 	bl	8009808 <ld_dword>
 800b1f8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	b29a      	uxth	r2, r3
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	80da      	strh	r2, [r3, #6]
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	0c1b      	lsrs	r3, r3, #16
 800b206:	b29a      	uxth	r2, r3
 800b208:	683b      	ldr	r3, [r7, #0]
 800b20a:	809a      	strh	r2, [r3, #4]
 800b20c:	e000      	b.n	800b210 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800b20e:	bf00      	nop
}
 800b210:	3720      	adds	r7, #32
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
	...

0800b218 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b218:	b580      	push	{r7, lr}
 800b21a:	b08a      	sub	sp, #40	; 0x28
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
 800b220:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	613b      	str	r3, [r7, #16]
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68db      	ldr	r3, [r3, #12]
 800b22e:	60fb      	str	r3, [r7, #12]
 800b230:	2300      	movs	r3, #0
 800b232:	617b      	str	r3, [r7, #20]
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	1c5a      	adds	r2, r3, #1
 800b23c:	61ba      	str	r2, [r7, #24]
 800b23e:	693a      	ldr	r2, [r7, #16]
 800b240:	4413      	add	r3, r2
 800b242:	781b      	ldrb	r3, [r3, #0]
 800b244:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800b246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b248:	2b1f      	cmp	r3, #31
 800b24a:	d940      	bls.n	800b2ce <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800b24c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b24e:	2b2f      	cmp	r3, #47	; 0x2f
 800b250:	d006      	beq.n	800b260 <create_name+0x48>
 800b252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b254:	2b5c      	cmp	r3, #92	; 0x5c
 800b256:	d110      	bne.n	800b27a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b258:	e002      	b.n	800b260 <create_name+0x48>
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	3301      	adds	r3, #1
 800b25e:	61bb      	str	r3, [r7, #24]
 800b260:	693a      	ldr	r2, [r7, #16]
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	4413      	add	r3, r2
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	2b2f      	cmp	r3, #47	; 0x2f
 800b26a:	d0f6      	beq.n	800b25a <create_name+0x42>
 800b26c:	693a      	ldr	r2, [r7, #16]
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	4413      	add	r3, r2
 800b272:	781b      	ldrb	r3, [r3, #0]
 800b274:	2b5c      	cmp	r3, #92	; 0x5c
 800b276:	d0f0      	beq.n	800b25a <create_name+0x42>
			break;
 800b278:	e02a      	b.n	800b2d0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	2bfe      	cmp	r3, #254	; 0xfe
 800b27e:	d901      	bls.n	800b284 <create_name+0x6c>
 800b280:	2306      	movs	r3, #6
 800b282:	e177      	b.n	800b574 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800b284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b286:	b2db      	uxtb	r3, r3
 800b288:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800b28a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b28c:	2101      	movs	r1, #1
 800b28e:	4618      	mov	r0, r3
 800b290:	f002 f9ba 	bl	800d608 <ff_convert>
 800b294:	4603      	mov	r3, r0
 800b296:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800b298:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d101      	bne.n	800b2a2 <create_name+0x8a>
 800b29e:	2306      	movs	r3, #6
 800b2a0:	e168      	b.n	800b574 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800b2a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2a4:	2b7f      	cmp	r3, #127	; 0x7f
 800b2a6:	d809      	bhi.n	800b2bc <create_name+0xa4>
 800b2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	48b3      	ldr	r0, [pc, #716]	; (800b57c <create_name+0x364>)
 800b2ae:	f7fe fb78 	bl	80099a2 <chk_chr>
 800b2b2:	4603      	mov	r3, r0
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d001      	beq.n	800b2bc <create_name+0xa4>
 800b2b8:	2306      	movs	r3, #6
 800b2ba:	e15b      	b.n	800b574 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	1c5a      	adds	r2, r3, #1
 800b2c0:	617a      	str	r2, [r7, #20]
 800b2c2:	005b      	lsls	r3, r3, #1
 800b2c4:	68fa      	ldr	r2, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b2ca:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800b2cc:	e7b4      	b.n	800b238 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800b2ce:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800b2d0:	693a      	ldr	r2, [r7, #16]
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	441a      	add	r2, r3
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b2da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b2dc:	2b1f      	cmp	r3, #31
 800b2de:	d801      	bhi.n	800b2e4 <create_name+0xcc>
 800b2e0:	2304      	movs	r3, #4
 800b2e2:	e000      	b.n	800b2e6 <create_name+0xce>
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b2ea:	e011      	b.n	800b310 <create_name+0xf8>
		w = lfn[di - 1];
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b2f2:	3b01      	subs	r3, #1
 800b2f4:	005b      	lsls	r3, r3, #1
 800b2f6:	68fa      	ldr	r2, [r7, #12]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	881b      	ldrh	r3, [r3, #0]
 800b2fc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800b2fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b300:	2b20      	cmp	r3, #32
 800b302:	d002      	beq.n	800b30a <create_name+0xf2>
 800b304:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b306:	2b2e      	cmp	r3, #46	; 0x2e
 800b308:	d106      	bne.n	800b318 <create_name+0x100>
		di--;
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1ea      	bne.n	800b2ec <create_name+0xd4>
 800b316:	e000      	b.n	800b31a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800b318:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	005b      	lsls	r3, r3, #1
 800b31e:	68fa      	ldr	r2, [r7, #12]
 800b320:	4413      	add	r3, r2
 800b322:	2200      	movs	r2, #0
 800b324:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d101      	bne.n	800b330 <create_name+0x118>
 800b32c:	2306      	movs	r3, #6
 800b32e:	e121      	b.n	800b574 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	3324      	adds	r3, #36	; 0x24
 800b334:	220b      	movs	r2, #11
 800b336:	2120      	movs	r1, #32
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe faf0 	bl	800991e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800b33e:	2300      	movs	r3, #0
 800b340:	61bb      	str	r3, [r7, #24]
 800b342:	e002      	b.n	800b34a <create_name+0x132>
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	3301      	adds	r3, #1
 800b348:	61bb      	str	r3, [r7, #24]
 800b34a:	69bb      	ldr	r3, [r7, #24]
 800b34c:	005b      	lsls	r3, r3, #1
 800b34e:	68fa      	ldr	r2, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	2b20      	cmp	r3, #32
 800b356:	d0f5      	beq.n	800b344 <create_name+0x12c>
 800b358:	69bb      	ldr	r3, [r7, #24]
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	4413      	add	r3, r2
 800b360:	881b      	ldrh	r3, [r3, #0]
 800b362:	2b2e      	cmp	r3, #46	; 0x2e
 800b364:	d0ee      	beq.n	800b344 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d009      	beq.n	800b380 <create_name+0x168>
 800b36c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b370:	f043 0303 	orr.w	r3, r3, #3
 800b374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800b378:	e002      	b.n	800b380 <create_name+0x168>
 800b37a:	697b      	ldr	r3, [r7, #20]
 800b37c:	3b01      	subs	r3, #1
 800b37e:	617b      	str	r3, [r7, #20]
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d009      	beq.n	800b39a <create_name+0x182>
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800b38c:	3b01      	subs	r3, #1
 800b38e:	005b      	lsls	r3, r3, #1
 800b390:	68fa      	ldr	r2, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	881b      	ldrh	r3, [r3, #0]
 800b396:	2b2e      	cmp	r3, #46	; 0x2e
 800b398:	d1ef      	bne.n	800b37a <create_name+0x162>

	i = b = 0; ni = 8;
 800b39a:	2300      	movs	r3, #0
 800b39c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	623b      	str	r3, [r7, #32]
 800b3a4:	2308      	movs	r3, #8
 800b3a6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	61ba      	str	r2, [r7, #24]
 800b3ae:	005b      	lsls	r3, r3, #1
 800b3b0:	68fa      	ldr	r2, [r7, #12]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	881b      	ldrh	r3, [r3, #0]
 800b3b6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800b3b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	f000 8090 	beq.w	800b4e0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800b3c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c2:	2b20      	cmp	r3, #32
 800b3c4:	d006      	beq.n	800b3d4 <create_name+0x1bc>
 800b3c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b3c8:	2b2e      	cmp	r3, #46	; 0x2e
 800b3ca:	d10a      	bne.n	800b3e2 <create_name+0x1ca>
 800b3cc:	69ba      	ldr	r2, [r7, #24]
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d006      	beq.n	800b3e2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800b3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d8:	f043 0303 	orr.w	r3, r3, #3
 800b3dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3e0:	e07d      	b.n	800b4de <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800b3e2:	6a3a      	ldr	r2, [r7, #32]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d203      	bcs.n	800b3f2 <create_name+0x1da>
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d123      	bne.n	800b43a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	2b0b      	cmp	r3, #11
 800b3f6:	d106      	bne.n	800b406 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800b3f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3fc:	f043 0303 	orr.w	r3, r3, #3
 800b400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b404:	e06f      	b.n	800b4e6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800b406:	69ba      	ldr	r2, [r7, #24]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d005      	beq.n	800b41a <create_name+0x202>
 800b40e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b412:	f043 0303 	orr.w	r3, r3, #3
 800b416:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800b41a:	69ba      	ldr	r2, [r7, #24]
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	429a      	cmp	r2, r3
 800b420:	d860      	bhi.n	800b4e4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	61bb      	str	r3, [r7, #24]
 800b426:	2308      	movs	r3, #8
 800b428:	623b      	str	r3, [r7, #32]
 800b42a:	230b      	movs	r3, #11
 800b42c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800b42e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b438:	e051      	b.n	800b4de <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800b43a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b43c:	2b7f      	cmp	r3, #127	; 0x7f
 800b43e:	d914      	bls.n	800b46a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800b440:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b442:	2100      	movs	r1, #0
 800b444:	4618      	mov	r0, r3
 800b446:	f002 f8df 	bl	800d608 <ff_convert>
 800b44a:	4603      	mov	r3, r0
 800b44c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800b44e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b450:	2b00      	cmp	r3, #0
 800b452:	d004      	beq.n	800b45e <create_name+0x246>
 800b454:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b456:	3b80      	subs	r3, #128	; 0x80
 800b458:	4a49      	ldr	r2, [pc, #292]	; (800b580 <create_name+0x368>)
 800b45a:	5cd3      	ldrb	r3, [r2, r3]
 800b45c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800b45e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b462:	f043 0302 	orr.w	r3, r3, #2
 800b466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800b46a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d007      	beq.n	800b480 <create_name+0x268>
 800b470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b472:	4619      	mov	r1, r3
 800b474:	4843      	ldr	r0, [pc, #268]	; (800b584 <create_name+0x36c>)
 800b476:	f7fe fa94 	bl	80099a2 <chk_chr>
 800b47a:	4603      	mov	r3, r0
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d008      	beq.n	800b492 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800b480:	235f      	movs	r3, #95	; 0x5f
 800b482:	84bb      	strh	r3, [r7, #36]	; 0x24
 800b484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b488:	f043 0303 	orr.w	r3, r3, #3
 800b48c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b490:	e01b      	b.n	800b4ca <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800b492:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b494:	2b40      	cmp	r3, #64	; 0x40
 800b496:	d909      	bls.n	800b4ac <create_name+0x294>
 800b498:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b49a:	2b5a      	cmp	r3, #90	; 0x5a
 800b49c:	d806      	bhi.n	800b4ac <create_name+0x294>
					b |= 2;
 800b49e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4a2:	f043 0302 	orr.w	r3, r3, #2
 800b4a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4aa:	e00e      	b.n	800b4ca <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800b4ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4ae:	2b60      	cmp	r3, #96	; 0x60
 800b4b0:	d90b      	bls.n	800b4ca <create_name+0x2b2>
 800b4b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4b4:	2b7a      	cmp	r3, #122	; 0x7a
 800b4b6:	d808      	bhi.n	800b4ca <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800b4b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b4bc:	f043 0301 	orr.w	r3, r3, #1
 800b4c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b4c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b4c6:	3b20      	subs	r3, #32
 800b4c8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800b4ca:	6a3b      	ldr	r3, [r7, #32]
 800b4cc:	1c5a      	adds	r2, r3, #1
 800b4ce:	623a      	str	r2, [r7, #32]
 800b4d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800b4d2:	b2d1      	uxtb	r1, r2
 800b4d4:	687a      	ldr	r2, [r7, #4]
 800b4d6:	4413      	add	r3, r2
 800b4d8:	460a      	mov	r2, r1
 800b4da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800b4de:	e763      	b.n	800b3a8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800b4e0:	bf00      	nop
 800b4e2:	e000      	b.n	800b4e6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800b4e4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800b4ec:	2be5      	cmp	r3, #229	; 0xe5
 800b4ee:	d103      	bne.n	800b4f8 <create_name+0x2e0>
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	2205      	movs	r2, #5
 800b4f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800b4f8:	69fb      	ldr	r3, [r7, #28]
 800b4fa:	2b08      	cmp	r3, #8
 800b4fc:	d104      	bne.n	800b508 <create_name+0x2f0>
 800b4fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b502:	009b      	lsls	r3, r3, #2
 800b504:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800b508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b50c:	f003 030c 	and.w	r3, r3, #12
 800b510:	2b0c      	cmp	r3, #12
 800b512:	d005      	beq.n	800b520 <create_name+0x308>
 800b514:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b518:	f003 0303 	and.w	r3, r3, #3
 800b51c:	2b03      	cmp	r3, #3
 800b51e:	d105      	bne.n	800b52c <create_name+0x314>
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b524:	f043 0302 	orr.w	r3, r3, #2
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800b52c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b530:	f003 0302 	and.w	r3, r3, #2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d117      	bne.n	800b568 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800b538:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b53c:	f003 0303 	and.w	r3, r3, #3
 800b540:	2b01      	cmp	r3, #1
 800b542:	d105      	bne.n	800b550 <create_name+0x338>
 800b544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b548:	f043 0310 	orr.w	r3, r3, #16
 800b54c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800b550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b554:	f003 030c 	and.w	r3, r3, #12
 800b558:	2b04      	cmp	r3, #4
 800b55a:	d105      	bne.n	800b568 <create_name+0x350>
 800b55c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b560:	f043 0308 	orr.w	r3, r3, #8
 800b564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b56e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800b572:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800b574:	4618      	mov	r0, r3
 800b576:	3728      	adds	r7, #40	; 0x28
 800b578:	46bd      	mov	sp, r7
 800b57a:	bd80      	pop	{r7, pc}
 800b57c:	08018b58 	.word	0x08018b58
 800b580:	08022424 	.word	0x08022424
 800b584:	08018b64 	.word	0x08018b64

0800b588 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b086      	sub	sp, #24
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b59c:	e002      	b.n	800b5a4 <follow_path+0x1c>
 800b59e:	683b      	ldr	r3, [r7, #0]
 800b5a0:	3301      	adds	r3, #1
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	683b      	ldr	r3, [r7, #0]
 800b5a6:	781b      	ldrb	r3, [r3, #0]
 800b5a8:	2b2f      	cmp	r3, #47	; 0x2f
 800b5aa:	d0f8      	beq.n	800b59e <follow_path+0x16>
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	781b      	ldrb	r3, [r3, #0]
 800b5b0:	2b5c      	cmp	r3, #92	; 0x5c
 800b5b2:	d0f4      	beq.n	800b59e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5b4:	693b      	ldr	r3, [r7, #16]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	781b      	ldrb	r3, [r3, #0]
 800b5be:	2b1f      	cmp	r3, #31
 800b5c0:	d80a      	bhi.n	800b5d8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2280      	movs	r2, #128	; 0x80
 800b5c6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800b5ca:	2100      	movs	r1, #0
 800b5cc:	6878      	ldr	r0, [r7, #4]
 800b5ce:	f7fe ff33 	bl	800a438 <dir_sdi>
 800b5d2:	4603      	mov	r3, r0
 800b5d4:	75fb      	strb	r3, [r7, #23]
 800b5d6:	e043      	b.n	800b660 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5d8:	463b      	mov	r3, r7
 800b5da:	4619      	mov	r1, r3
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f7ff fe1b 	bl	800b218 <create_name>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b5e6:	7dfb      	ldrb	r3, [r7, #23]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d134      	bne.n	800b656 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fb7d 	bl	800acec <dir_find>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800b5fc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b5fe:	7dfb      	ldrb	r3, [r7, #23]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d00a      	beq.n	800b61a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b604:	7dfb      	ldrb	r3, [r7, #23]
 800b606:	2b04      	cmp	r3, #4
 800b608:	d127      	bne.n	800b65a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b60a:	7afb      	ldrb	r3, [r7, #11]
 800b60c:	f003 0304 	and.w	r3, r3, #4
 800b610:	2b00      	cmp	r3, #0
 800b612:	d122      	bne.n	800b65a <follow_path+0xd2>
 800b614:	2305      	movs	r3, #5
 800b616:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b618:	e01f      	b.n	800b65a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b61a:	7afb      	ldrb	r3, [r7, #11]
 800b61c:	f003 0304 	and.w	r3, r3, #4
 800b620:	2b00      	cmp	r3, #0
 800b622:	d11c      	bne.n	800b65e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	799b      	ldrb	r3, [r3, #6]
 800b628:	f003 0310 	and.w	r3, r3, #16
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d102      	bne.n	800b636 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b630:	2305      	movs	r3, #5
 800b632:	75fb      	strb	r3, [r7, #23]
 800b634:	e014      	b.n	800b660 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	695b      	ldr	r3, [r3, #20]
 800b640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b644:	4413      	add	r3, r2
 800b646:	4619      	mov	r1, r3
 800b648:	68f8      	ldr	r0, [r7, #12]
 800b64a:	f7ff f87c 	bl	800a746 <ld_clust>
 800b64e:	4602      	mov	r2, r0
 800b650:	693b      	ldr	r3, [r7, #16]
 800b652:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b654:	e7c0      	b.n	800b5d8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b656:	bf00      	nop
 800b658:	e002      	b.n	800b660 <follow_path+0xd8>
				break;
 800b65a:	bf00      	nop
 800b65c:	e000      	b.n	800b660 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b65e:	bf00      	nop
			}
		}
	}

	return res;
 800b660:	7dfb      	ldrb	r3, [r7, #23]
}
 800b662:	4618      	mov	r0, r3
 800b664:	3718      	adds	r7, #24
 800b666:	46bd      	mov	sp, r7
 800b668:	bd80      	pop	{r7, pc}

0800b66a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b087      	sub	sp, #28
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b672:	f04f 33ff 	mov.w	r3, #4294967295
 800b676:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d031      	beq.n	800b6e4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	617b      	str	r3, [r7, #20]
 800b686:	e002      	b.n	800b68e <get_ldnumber+0x24>
 800b688:	697b      	ldr	r3, [r7, #20]
 800b68a:	3301      	adds	r3, #1
 800b68c:	617b      	str	r3, [r7, #20]
 800b68e:	697b      	ldr	r3, [r7, #20]
 800b690:	781b      	ldrb	r3, [r3, #0]
 800b692:	2b1f      	cmp	r3, #31
 800b694:	d903      	bls.n	800b69e <get_ldnumber+0x34>
 800b696:	697b      	ldr	r3, [r7, #20]
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	2b3a      	cmp	r3, #58	; 0x3a
 800b69c:	d1f4      	bne.n	800b688 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	781b      	ldrb	r3, [r3, #0]
 800b6a2:	2b3a      	cmp	r3, #58	; 0x3a
 800b6a4:	d11c      	bne.n	800b6e0 <get_ldnumber+0x76>
			tp = *path;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	1c5a      	adds	r2, r3, #1
 800b6b0:	60fa      	str	r2, [r7, #12]
 800b6b2:	781b      	ldrb	r3, [r3, #0]
 800b6b4:	3b30      	subs	r3, #48	; 0x30
 800b6b6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	2b09      	cmp	r3, #9
 800b6bc:	d80e      	bhi.n	800b6dc <get_ldnumber+0x72>
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d10a      	bne.n	800b6dc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d807      	bhi.n	800b6dc <get_ldnumber+0x72>
					vol = (int)i;
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	617b      	str	r3, [r7, #20]
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	e002      	b.n	800b6e6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b6e4:	693b      	ldr	r3, [r7, #16]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
 800b6fc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2200      	movs	r2, #0
 800b702:	70da      	strb	r2, [r3, #3]
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f04f 32ff 	mov.w	r2, #4294967295
 800b70a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b70c:	6839      	ldr	r1, [r7, #0]
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f7fe fb12 	bl	8009d38 <move_window>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d001      	beq.n	800b71e <check_fs+0x2a>
 800b71a:	2304      	movs	r3, #4
 800b71c:	e038      	b.n	800b790 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	3334      	adds	r3, #52	; 0x34
 800b722:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b726:	4618      	mov	r0, r3
 800b728:	f7fe f856 	bl	80097d8 <ld_word>
 800b72c:	4603      	mov	r3, r0
 800b72e:	461a      	mov	r2, r3
 800b730:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800b734:	429a      	cmp	r2, r3
 800b736:	d001      	beq.n	800b73c <check_fs+0x48>
 800b738:	2303      	movs	r3, #3
 800b73a:	e029      	b.n	800b790 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b742:	2be9      	cmp	r3, #233	; 0xe9
 800b744:	d009      	beq.n	800b75a <check_fs+0x66>
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b74c:	2beb      	cmp	r3, #235	; 0xeb
 800b74e:	d11e      	bne.n	800b78e <check_fs+0x9a>
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800b756:	2b90      	cmp	r3, #144	; 0x90
 800b758:	d119      	bne.n	800b78e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3334      	adds	r3, #52	; 0x34
 800b75e:	3336      	adds	r3, #54	; 0x36
 800b760:	4618      	mov	r0, r3
 800b762:	f7fe f851 	bl	8009808 <ld_dword>
 800b766:	4603      	mov	r3, r0
 800b768:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800b76c:	4a0a      	ldr	r2, [pc, #40]	; (800b798 <check_fs+0xa4>)
 800b76e:	4293      	cmp	r3, r2
 800b770:	d101      	bne.n	800b776 <check_fs+0x82>
 800b772:	2300      	movs	r3, #0
 800b774:	e00c      	b.n	800b790 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	3334      	adds	r3, #52	; 0x34
 800b77a:	3352      	adds	r3, #82	; 0x52
 800b77c:	4618      	mov	r0, r3
 800b77e:	f7fe f843 	bl	8009808 <ld_dword>
 800b782:	4603      	mov	r3, r0
 800b784:	4a05      	ldr	r2, [pc, #20]	; (800b79c <check_fs+0xa8>)
 800b786:	4293      	cmp	r3, r2
 800b788:	d101      	bne.n	800b78e <check_fs+0x9a>
 800b78a:	2300      	movs	r3, #0
 800b78c:	e000      	b.n	800b790 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b78e:	2302      	movs	r3, #2
}
 800b790:	4618      	mov	r0, r3
 800b792:	3708      	adds	r7, #8
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}
 800b798:	00544146 	.word	0x00544146
 800b79c:	33544146 	.word	0x33544146

0800b7a0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b096      	sub	sp, #88	; 0x58
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	4613      	mov	r3, r2
 800b7ac:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7b4:	68f8      	ldr	r0, [r7, #12]
 800b7b6:	f7ff ff58 	bl	800b66a <get_ldnumber>
 800b7ba:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	da01      	bge.n	800b7c6 <find_volume+0x26>
 800b7c2:	230b      	movs	r3, #11
 800b7c4:	e22e      	b.n	800bc24 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7c6:	4aa8      	ldr	r2, [pc, #672]	; (800ba68 <find_volume+0x2c8>)
 800b7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b7ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ce:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b7d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d101      	bne.n	800b7da <find_volume+0x3a>
 800b7d6:	230c      	movs	r3, #12
 800b7d8:	e224      	b.n	800bc24 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b7de:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b7e0:	79fb      	ldrb	r3, [r7, #7]
 800b7e2:	f023 0301 	bic.w	r3, r3, #1
 800b7e6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b7e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7ea:	781b      	ldrb	r3, [r3, #0]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d01a      	beq.n	800b826 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7f2:	785b      	ldrb	r3, [r3, #1]
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fd ff49 	bl	800968c <disk_status>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b800:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b804:	f003 0301 	and.w	r3, r3, #1
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d10c      	bne.n	800b826 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b80c:	79fb      	ldrb	r3, [r7, #7]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d007      	beq.n	800b822 <find_volume+0x82>
 800b812:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b816:	f003 0304 	and.w	r3, r3, #4
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d001      	beq.n	800b822 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b81e:	230a      	movs	r3, #10
 800b820:	e200      	b.n	800bc24 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800b822:	2300      	movs	r3, #0
 800b824:	e1fe      	b.n	800bc24 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b828:	2200      	movs	r2, #0
 800b82a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b82c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b832:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b836:	785b      	ldrb	r3, [r3, #1]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fd ff41 	bl	80096c0 <disk_initialize>
 800b83e:	4603      	mov	r3, r0
 800b840:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b844:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b850:	2303      	movs	r3, #3
 800b852:	e1e7      	b.n	800bc24 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d007      	beq.n	800b86a <find_volume+0xca>
 800b85a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800b85e:	f003 0304 	and.w	r3, r3, #4
 800b862:	2b00      	cmp	r3, #0
 800b864:	d001      	beq.n	800b86a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b866:	230a      	movs	r3, #10
 800b868:	e1dc      	b.n	800bc24 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b86a:	2300      	movs	r3, #0
 800b86c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b86e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b870:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b872:	f7ff ff3f 	bl	800b6f4 <check_fs>
 800b876:	4603      	mov	r3, r0
 800b878:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b87c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b880:	2b02      	cmp	r3, #2
 800b882:	d14b      	bne.n	800b91c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b884:	2300      	movs	r3, #0
 800b886:	643b      	str	r3, [r7, #64]	; 0x40
 800b888:	e01f      	b.n	800b8ca <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b88c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800b890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800b898:	4413      	add	r3, r2
 800b89a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b89e:	3304      	adds	r3, #4
 800b8a0:	781b      	ldrb	r3, [r3, #0]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d006      	beq.n	800b8b4 <find_volume+0x114>
 800b8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8a8:	3308      	adds	r3, #8
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fd ffac 	bl	8009808 <ld_dword>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	e000      	b.n	800b8b6 <find_volume+0x116>
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8b8:	009b      	lsls	r3, r3, #2
 800b8ba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800b8be:	440b      	add	r3, r1
 800b8c0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8c6:	3301      	adds	r3, #1
 800b8c8:	643b      	str	r3, [r7, #64]	; 0x40
 800b8ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8cc:	2b03      	cmp	r3, #3
 800b8ce:	d9dc      	bls.n	800b88a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800b8d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <find_volume+0x140>
 800b8da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8dc:	3b01      	subs	r3, #1
 800b8de:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b8e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b8ee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b8f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d005      	beq.n	800b902 <find_volume+0x162>
 800b8f6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b8f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800b8fa:	f7ff fefb 	bl	800b6f4 <check_fs>
 800b8fe:	4603      	mov	r3, r0
 800b900:	e000      	b.n	800b904 <find_volume+0x164>
 800b902:	2303      	movs	r3, #3
 800b904:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b908:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b90c:	2b01      	cmp	r3, #1
 800b90e:	d905      	bls.n	800b91c <find_volume+0x17c>
 800b910:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b912:	3301      	adds	r3, #1
 800b914:	643b      	str	r3, [r7, #64]	; 0x40
 800b916:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b918:	2b03      	cmp	r3, #3
 800b91a:	d9e1      	bls.n	800b8e0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b91c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b920:	2b04      	cmp	r3, #4
 800b922:	d101      	bne.n	800b928 <find_volume+0x188>
 800b924:	2301      	movs	r3, #1
 800b926:	e17d      	b.n	800bc24 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800b92c:	2b01      	cmp	r3, #1
 800b92e:	d901      	bls.n	800b934 <find_volume+0x194>
 800b930:	230d      	movs	r3, #13
 800b932:	e177      	b.n	800bc24 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b936:	3334      	adds	r3, #52	; 0x34
 800b938:	330b      	adds	r3, #11
 800b93a:	4618      	mov	r0, r3
 800b93c:	f7fd ff4c 	bl	80097d8 <ld_word>
 800b940:	4603      	mov	r3, r0
 800b942:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b946:	d001      	beq.n	800b94c <find_volume+0x1ac>
 800b948:	230d      	movs	r3, #13
 800b94a:	e16b      	b.n	800bc24 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b94e:	3334      	adds	r3, #52	; 0x34
 800b950:	3316      	adds	r3, #22
 800b952:	4618      	mov	r0, r3
 800b954:	f7fd ff40 	bl	80097d8 <ld_word>
 800b958:	4603      	mov	r3, r0
 800b95a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <find_volume+0x1d0>
 800b962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b964:	3334      	adds	r3, #52	; 0x34
 800b966:	3324      	adds	r3, #36	; 0x24
 800b968:	4618      	mov	r0, r3
 800b96a:	f7fd ff4d 	bl	8009808 <ld_dword>
 800b96e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800b970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b974:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b978:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800b97c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b97e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b982:	789b      	ldrb	r3, [r3, #2]
 800b984:	2b01      	cmp	r3, #1
 800b986:	d005      	beq.n	800b994 <find_volume+0x1f4>
 800b988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b98a:	789b      	ldrb	r3, [r3, #2]
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d001      	beq.n	800b994 <find_volume+0x1f4>
 800b990:	230d      	movs	r3, #13
 800b992:	e147      	b.n	800bc24 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b996:	789b      	ldrb	r3, [r3, #2]
 800b998:	461a      	mov	r2, r3
 800b99a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b99c:	fb02 f303 	mul.w	r3, r2, r3
 800b9a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b9a8:	b29a      	uxth	r2, r3
 800b9aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b0:	895b      	ldrh	r3, [r3, #10]
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d008      	beq.n	800b9c8 <find_volume+0x228>
 800b9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9b8:	895b      	ldrh	r3, [r3, #10]
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9be:	895b      	ldrh	r3, [r3, #10]
 800b9c0:	3b01      	subs	r3, #1
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d001      	beq.n	800b9cc <find_volume+0x22c>
 800b9c8:	230d      	movs	r3, #13
 800b9ca:	e12b      	b.n	800bc24 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9ce:	3334      	adds	r3, #52	; 0x34
 800b9d0:	3311      	adds	r3, #17
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f7fd ff00 	bl	80097d8 <ld_word>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	461a      	mov	r2, r3
 800b9dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b9e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9e2:	891b      	ldrh	r3, [r3, #8]
 800b9e4:	f003 030f 	and.w	r3, r3, #15
 800b9e8:	b29b      	uxth	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <find_volume+0x252>
 800b9ee:	230d      	movs	r3, #13
 800b9f0:	e118      	b.n	800bc24 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b9f4:	3334      	adds	r3, #52	; 0x34
 800b9f6:	3313      	adds	r3, #19
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f7fd feed 	bl	80097d8 <ld_word>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d106      	bne.n	800ba16 <find_volume+0x276>
 800ba08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba0a:	3334      	adds	r3, #52	; 0x34
 800ba0c:	3320      	adds	r3, #32
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7fd fefa 	bl	8009808 <ld_dword>
 800ba14:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba18:	3334      	adds	r3, #52	; 0x34
 800ba1a:	330e      	adds	r3, #14
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fd fedb 	bl	80097d8 <ld_word>
 800ba22:	4603      	mov	r3, r0
 800ba24:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <find_volume+0x290>
 800ba2c:	230d      	movs	r3, #13
 800ba2e:	e0f9      	b.n	800bc24 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba30:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ba32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba34:	4413      	add	r3, r2
 800ba36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba38:	8912      	ldrh	r2, [r2, #8]
 800ba3a:	0912      	lsrs	r2, r2, #4
 800ba3c:	b292      	uxth	r2, r2
 800ba3e:	4413      	add	r3, r2
 800ba40:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d201      	bcs.n	800ba4e <find_volume+0x2ae>
 800ba4a:	230d      	movs	r3, #13
 800ba4c:	e0ea      	b.n	800bc24 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ba50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba52:	1ad3      	subs	r3, r2, r3
 800ba54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ba56:	8952      	ldrh	r2, [r2, #10]
 800ba58:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d103      	bne.n	800ba6c <find_volume+0x2cc>
 800ba64:	230d      	movs	r3, #13
 800ba66:	e0dd      	b.n	800bc24 <find_volume+0x484>
 800ba68:	20006c68 	.word	0x20006c68
		fmt = FS_FAT32;
 800ba6c:	2303      	movs	r3, #3
 800ba6e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba74:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d802      	bhi.n	800ba82 <find_volume+0x2e2>
 800ba7c:	2302      	movs	r3, #2
 800ba7e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800ba82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba84:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ba88:	4293      	cmp	r3, r2
 800ba8a:	d802      	bhi.n	800ba92 <find_volume+0x2f2>
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba94:	1c9a      	adds	r2, r3, #2
 800ba96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba98:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800ba9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ba9e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800baa0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800baa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800baa4:	441a      	add	r2, r3
 800baa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baa8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800baaa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800baac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800baae:	441a      	add	r2, r3
 800bab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bab2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800bab4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d11e      	bne.n	800bafa <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800babc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800babe:	3334      	adds	r3, #52	; 0x34
 800bac0:	332a      	adds	r3, #42	; 0x2a
 800bac2:	4618      	mov	r0, r3
 800bac4:	f7fd fe88 	bl	80097d8 <ld_word>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <find_volume+0x332>
 800bace:	230d      	movs	r3, #13
 800bad0:	e0a8      	b.n	800bc24 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800bad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bad4:	891b      	ldrh	r3, [r3, #8]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d001      	beq.n	800bade <find_volume+0x33e>
 800bada:	230d      	movs	r3, #13
 800badc:	e0a2      	b.n	800bc24 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bae0:	3334      	adds	r3, #52	; 0x34
 800bae2:	332c      	adds	r3, #44	; 0x2c
 800bae4:	4618      	mov	r0, r3
 800bae6:	f7fd fe8f 	bl	8009808 <ld_dword>
 800baea:	4602      	mov	r2, r0
 800baec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baee:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800baf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800baf2:	699b      	ldr	r3, [r3, #24]
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	647b      	str	r3, [r7, #68]	; 0x44
 800baf8:	e01f      	b.n	800bb3a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bafa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bafc:	891b      	ldrh	r3, [r3, #8]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d101      	bne.n	800bb06 <find_volume+0x366>
 800bb02:	230d      	movs	r3, #13
 800bb04:	e08e      	b.n	800bc24 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb0c:	441a      	add	r2, r3
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb10:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d103      	bne.n	800bb22 <find_volume+0x382>
 800bb1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb1c:	699b      	ldr	r3, [r3, #24]
 800bb1e:	005b      	lsls	r3, r3, #1
 800bb20:	e00a      	b.n	800bb38 <find_volume+0x398>
 800bb22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb24:	699a      	ldr	r2, [r3, #24]
 800bb26:	4613      	mov	r3, r2
 800bb28:	005b      	lsls	r3, r3, #1
 800bb2a:	4413      	add	r3, r2
 800bb2c:	085a      	lsrs	r2, r3, #1
 800bb2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	f003 0301 	and.w	r3, r3, #1
 800bb36:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb38:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb3c:	69da      	ldr	r2, [r3, #28]
 800bb3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800bb44:	0a5b      	lsrs	r3, r3, #9
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d201      	bcs.n	800bb4e <find_volume+0x3ae>
 800bb4a:	230d      	movs	r3, #13
 800bb4c:	e06a      	b.n	800bc24 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb50:	f04f 32ff 	mov.w	r2, #4294967295
 800bb54:	615a      	str	r2, [r3, #20]
 800bb56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb58:	695a      	ldr	r2, [r3, #20]
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb5c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800bb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb60:	2280      	movs	r2, #128	; 0x80
 800bb62:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb64:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800bb68:	2b03      	cmp	r3, #3
 800bb6a:	d149      	bne.n	800bc00 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb6e:	3334      	adds	r3, #52	; 0x34
 800bb70:	3330      	adds	r3, #48	; 0x30
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7fd fe30 	bl	80097d8 <ld_word>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d140      	bne.n	800bc00 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb80:	3301      	adds	r3, #1
 800bb82:	4619      	mov	r1, r3
 800bb84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bb86:	f7fe f8d7 	bl	8009d38 <move_window>
 800bb8a:	4603      	mov	r3, r0
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d137      	bne.n	800bc00 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 800bb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb92:	2200      	movs	r2, #0
 800bb94:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bb96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bb98:	3334      	adds	r3, #52	; 0x34
 800bb9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f7fd fe1a 	bl	80097d8 <ld_word>
 800bba4:	4603      	mov	r3, r0
 800bba6:	461a      	mov	r2, r3
 800bba8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800bbac:	429a      	cmp	r2, r3
 800bbae:	d127      	bne.n	800bc00 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbb2:	3334      	adds	r3, #52	; 0x34
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	f7fd fe27 	bl	8009808 <ld_dword>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	4a1b      	ldr	r2, [pc, #108]	; (800bc2c <find_volume+0x48c>)
 800bbbe:	4293      	cmp	r3, r2
 800bbc0:	d11e      	bne.n	800bc00 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbc4:	3334      	adds	r3, #52	; 0x34
 800bbc6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7fd fe1c 	bl	8009808 <ld_dword>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	4a17      	ldr	r2, [pc, #92]	; (800bc30 <find_volume+0x490>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d113      	bne.n	800bc00 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bbd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbda:	3334      	adds	r3, #52	; 0x34
 800bbdc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800bbe0:	4618      	mov	r0, r3
 800bbe2:	f7fd fe11 	bl	8009808 <ld_dword>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbea:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bbec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbee:	3334      	adds	r3, #52	; 0x34
 800bbf0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	f7fd fe07 	bl	8009808 <ld_dword>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbfe:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc02:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800bc06:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc08:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <find_volume+0x494>)
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	b29a      	uxth	r2, r3
 800bc10:	4b08      	ldr	r3, [pc, #32]	; (800bc34 <find_volume+0x494>)
 800bc12:	801a      	strh	r2, [r3, #0]
 800bc14:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <find_volume+0x494>)
 800bc16:	881a      	ldrh	r2, [r3, #0]
 800bc18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc1a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bc1e:	f7fe f823 	bl	8009c68 <clear_lock>
#endif
	return FR_OK;
 800bc22:	2300      	movs	r3, #0
}
 800bc24:	4618      	mov	r0, r3
 800bc26:	3758      	adds	r7, #88	; 0x58
 800bc28:	46bd      	mov	sp, r7
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	41615252 	.word	0x41615252
 800bc30:	61417272 	.word	0x61417272
 800bc34:	20006c70 	.word	0x20006c70

0800bc38 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800bc38:	b580      	push	{r7, lr}
 800bc3a:	b084      	sub	sp, #16
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
 800bc40:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800bc42:	2309      	movs	r3, #9
 800bc44:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d01c      	beq.n	800bc86 <validate+0x4e>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d018      	beq.n	800bc86 <validate+0x4e>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	781b      	ldrb	r3, [r3, #0]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d013      	beq.n	800bc86 <validate+0x4e>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	889a      	ldrh	r2, [r3, #4]
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	88db      	ldrh	r3, [r3, #6]
 800bc68:	429a      	cmp	r2, r3
 800bc6a:	d10c      	bne.n	800bc86 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	785b      	ldrb	r3, [r3, #1]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7fd fd0a 	bl	800968c <disk_status>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f003 0301 	and.w	r3, r3, #1
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d101      	bne.n	800bc86 <validate+0x4e>
			res = FR_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800bc86:	7bfb      	ldrb	r3, [r7, #15]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d102      	bne.n	800bc92 <validate+0x5a>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	e000      	b.n	800bc94 <validate+0x5c>
 800bc92:	2300      	movs	r3, #0
 800bc94:	683a      	ldr	r2, [r7, #0]
 800bc96:	6013      	str	r3, [r2, #0]
	return res;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}
	...

0800bca4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b088      	sub	sp, #32
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bcb2:	68bb      	ldr	r3, [r7, #8]
 800bcb4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bcb6:	f107 0310 	add.w	r3, r7, #16
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fcd5 	bl	800b66a <get_ldnumber>
 800bcc0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bcc2:	69fb      	ldr	r3, [r7, #28]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	da01      	bge.n	800bccc <f_mount+0x28>
 800bcc8:	230b      	movs	r3, #11
 800bcca:	e02b      	b.n	800bd24 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bccc:	4a17      	ldr	r2, [pc, #92]	; (800bd2c <f_mount+0x88>)
 800bcce:	69fb      	ldr	r3, [r7, #28]
 800bcd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcd4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bcd6:	69bb      	ldr	r3, [r7, #24]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d005      	beq.n	800bce8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bcdc:	69b8      	ldr	r0, [r7, #24]
 800bcde:	f7fd ffc3 	bl	8009c68 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bce2:	69bb      	ldr	r3, [r7, #24]
 800bce4:	2200      	movs	r2, #0
 800bce6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d002      	beq.n	800bcf4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bcf4:	68fa      	ldr	r2, [r7, #12]
 800bcf6:	490d      	ldr	r1, [pc, #52]	; (800bd2c <f_mount+0x88>)
 800bcf8:	69fb      	ldr	r3, [r7, #28]
 800bcfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d002      	beq.n	800bd0a <f_mount+0x66>
 800bd04:	79fb      	ldrb	r3, [r7, #7]
 800bd06:	2b01      	cmp	r3, #1
 800bd08:	d001      	beq.n	800bd0e <f_mount+0x6a>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	e00a      	b.n	800bd24 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bd0e:	f107 010c 	add.w	r1, r7, #12
 800bd12:	f107 0308 	add.w	r3, r7, #8
 800bd16:	2200      	movs	r2, #0
 800bd18:	4618      	mov	r0, r3
 800bd1a:	f7ff fd41 	bl	800b7a0 <find_volume>
 800bd1e:	4603      	mov	r3, r0
 800bd20:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bd22:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd24:	4618      	mov	r0, r3
 800bd26:	3720      	adds	r7, #32
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	20006c68 	.word	0x20006c68

0800bd30 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	f107 030c 	add.w	r3, r7, #12
 800bd3c:	6018      	str	r0, [r3, #0]
 800bd3e:	f107 0308 	add.w	r3, r7, #8
 800bd42:	6019      	str	r1, [r3, #0]
 800bd44:	1dfb      	adds	r3, r7, #7
 800bd46:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bd48:	f107 030c 	add.w	r3, r7, #12
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d101      	bne.n	800bd56 <f_open+0x26>
 800bd52:	2309      	movs	r3, #9
 800bd54:	e231      	b.n	800c1ba <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bd56:	1dfb      	adds	r3, r7, #7
 800bd58:	1dfa      	adds	r2, r7, #7
 800bd5a:	7812      	ldrb	r2, [r2, #0]
 800bd5c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800bd60:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800bd62:	1dfb      	adds	r3, r7, #7
 800bd64:	781a      	ldrb	r2, [r3, #0]
 800bd66:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800bd6a:	f107 0308 	add.w	r3, r7, #8
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f7ff fd16 	bl	800b7a0 <find_volume>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800bd7a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f040 8210 	bne.w	800c1a4 <f_open+0x474>
		dj.obj.fs = fs;
 800bd84:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bd88:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800bd8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bd90:	f107 0214 	add.w	r2, r7, #20
 800bd94:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd96:	f107 0308 	add.w	r3, r7, #8
 800bd9a:	681a      	ldr	r2, [r3, #0]
 800bd9c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bda0:	4611      	mov	r1, r2
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7ff fbf0 	bl	800b588 <follow_path>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bdae:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d11b      	bne.n	800bdee <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bdb6:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800bdba:	b25b      	sxtb	r3, r3
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	da03      	bge.n	800bdc8 <f_open+0x98>
				res = FR_INVALID_NAME;
 800bdc0:	2306      	movs	r3, #6
 800bdc2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bdc6:	e012      	b.n	800bdee <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bdc8:	1dfb      	adds	r3, r7, #7
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	f023 0301 	bic.w	r3, r3, #1
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	bf14      	ite	ne
 800bdd4:	2301      	movne	r3, #1
 800bdd6:	2300      	moveq	r3, #0
 800bdd8:	b2db      	uxtb	r3, r3
 800bdda:	461a      	mov	r2, r3
 800bddc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bde0:	4611      	mov	r1, r2
 800bde2:	4618      	mov	r0, r3
 800bde4:	f7fd fdf8 	bl	80099d8 <chk_lock>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bdee:	1dfb      	adds	r3, r7, #7
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	f003 031c 	and.w	r3, r3, #28
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	f000 809b 	beq.w	800bf32 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800bdfc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be00:	2b00      	cmp	r3, #0
 800be02:	d019      	beq.n	800be38 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800be04:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be08:	2b04      	cmp	r3, #4
 800be0a:	d10e      	bne.n	800be2a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800be0c:	f7fd fe40 	bl	8009a90 <enq_lock>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d006      	beq.n	800be24 <f_open+0xf4>
 800be16:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff f826 	bl	800ae6c <dir_register>
 800be20:	4603      	mov	r3, r0
 800be22:	e000      	b.n	800be26 <f_open+0xf6>
 800be24:	2312      	movs	r3, #18
 800be26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800be2a:	1dfb      	adds	r3, r7, #7
 800be2c:	1dfa      	adds	r2, r7, #7
 800be2e:	7812      	ldrb	r2, [r2, #0]
 800be30:	f042 0208 	orr.w	r2, r2, #8
 800be34:	701a      	strb	r2, [r3, #0]
 800be36:	e012      	b.n	800be5e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800be38:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800be3c:	f003 0311 	and.w	r3, r3, #17
 800be40:	2b00      	cmp	r3, #0
 800be42:	d003      	beq.n	800be4c <f_open+0x11c>
					res = FR_DENIED;
 800be44:	2307      	movs	r3, #7
 800be46:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800be4a:	e008      	b.n	800be5e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800be4c:	1dfb      	adds	r3, r7, #7
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 0304 	and.w	r3, r3, #4
 800be54:	2b00      	cmp	r3, #0
 800be56:	d002      	beq.n	800be5e <f_open+0x12e>
 800be58:	2308      	movs	r3, #8
 800be5a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800be5e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800be62:	2b00      	cmp	r3, #0
 800be64:	f040 8082 	bne.w	800bf6c <f_open+0x23c>
 800be68:	1dfb      	adds	r3, r7, #7
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 0308 	and.w	r3, r3, #8
 800be70:	2b00      	cmp	r3, #0
 800be72:	d07b      	beq.n	800bf6c <f_open+0x23c>
				dw = GET_FATTIME();
 800be74:	f7fd fca8 	bl	80097c8 <get_fattime>
 800be78:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800be7c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800be80:	330e      	adds	r3, #14
 800be82:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800be86:	4618      	mov	r0, r3
 800be88:	f7fd fcfc 	bl	8009884 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800be8c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800be90:	3316      	adds	r3, #22
 800be92:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800be96:	4618      	mov	r0, r3
 800be98:	f7fd fcf4 	bl	8009884 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be9c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bea0:	330b      	adds	r3, #11
 800bea2:	2220      	movs	r2, #32
 800bea4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800bea6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800beaa:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800beae:	4611      	mov	r1, r2
 800beb0:	4618      	mov	r0, r3
 800beb2:	f7fe fc48 	bl	800a746 <ld_clust>
 800beb6:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800beba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bebe:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800bec2:	2200      	movs	r2, #0
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7fe fc5d 	bl	800a784 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800beca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800bece:	331c      	adds	r3, #28
 800bed0:	2100      	movs	r1, #0
 800bed2:	4618      	mov	r0, r3
 800bed4:	f7fd fcd6 	bl	8009884 <st_dword>
					fs->wflag = 1;
 800bed8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bedc:	2201      	movs	r2, #1
 800bede:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800bee0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d041      	beq.n	800bf6c <f_open+0x23c>
						dw = fs->winsect;
 800bee8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800beec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beee:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800bef2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bef6:	2200      	movs	r2, #0
 800bef8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800befc:	4618      	mov	r0, r3
 800befe:	f7fe f96a 	bl	800a1d6 <remove_chain>
 800bf02:	4603      	mov	r3, r0
 800bf04:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800bf08:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d12d      	bne.n	800bf6c <f_open+0x23c>
							res = move_window(fs, dw);
 800bf10:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bf14:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800bf18:	4618      	mov	r0, r3
 800bf1a:	f7fd ff0d 	bl	8009d38 <move_window>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800bf24:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bf28:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800bf2c:	3a01      	subs	r2, #1
 800bf2e:	611a      	str	r2, [r3, #16]
 800bf30:	e01c      	b.n	800bf6c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800bf32:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d118      	bne.n	800bf6c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800bf3a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800bf3e:	f003 0310 	and.w	r3, r3, #16
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <f_open+0x21e>
					res = FR_NO_FILE;
 800bf46:	2304      	movs	r3, #4
 800bf48:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800bf4c:	e00e      	b.n	800bf6c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800bf4e:	1dfb      	adds	r3, r7, #7
 800bf50:	781b      	ldrb	r3, [r3, #0]
 800bf52:	f003 0302 	and.w	r3, r3, #2
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d008      	beq.n	800bf6c <f_open+0x23c>
 800bf5a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d002      	beq.n	800bf6c <f_open+0x23c>
						res = FR_DENIED;
 800bf66:	2307      	movs	r3, #7
 800bf68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800bf6c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d136      	bne.n	800bfe2 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bf74:	1dfb      	adds	r3, r7, #7
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	f003 0308 	and.w	r3, r3, #8
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d005      	beq.n	800bf8c <f_open+0x25c>
				mode |= FA_MODIFIED;
 800bf80:	1dfb      	adds	r3, r7, #7
 800bf82:	1dfa      	adds	r2, r7, #7
 800bf84:	7812      	ldrb	r2, [r2, #0]
 800bf86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf8a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bf8c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bf90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf92:	f107 030c 	add.w	r3, r7, #12
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800bf9a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bf9e:	f107 030c 	add.w	r3, r7, #12
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bfa6:	1dfb      	adds	r3, r7, #7
 800bfa8:	781b      	ldrb	r3, [r3, #0]
 800bfaa:	f023 0301 	bic.w	r3, r3, #1
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	bf14      	ite	ne
 800bfb2:	2301      	movne	r3, #1
 800bfb4:	2300      	moveq	r3, #0
 800bfb6:	b2db      	uxtb	r3, r3
 800bfb8:	461a      	mov	r2, r3
 800bfba:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800bfbe:	4611      	mov	r1, r2
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fd fd87 	bl	8009ad4 <inc_lock>
 800bfc6:	4602      	mov	r2, r0
 800bfc8:	f107 030c 	add.w	r3, r7, #12
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800bfd0:	f107 030c 	add.w	r3, r7, #12
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d102      	bne.n	800bfe2 <f_open+0x2b2>
 800bfdc:	2302      	movs	r3, #2
 800bfde:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bfe2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	f040 80dc 	bne.w	800c1a4 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bfec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800bff0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800bff4:	4611      	mov	r1, r2
 800bff6:	4618      	mov	r0, r3
 800bff8:	f7fe fba5 	bl	800a746 <ld_clust>
 800bffc:	4602      	mov	r2, r0
 800bffe:	f107 030c 	add.w	r3, r7, #12
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c006:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800c00a:	331c      	adds	r3, #28
 800c00c:	4618      	mov	r0, r3
 800c00e:	f7fd fbfb 	bl	8009808 <ld_dword>
 800c012:	4602      	mov	r2, r0
 800c014:	f107 030c 	add.w	r3, r7, #12
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c01c:	f107 030c 	add.w	r3, r7, #12
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	2200      	movs	r2, #0
 800c024:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c026:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800c02a:	f107 030c 	add.w	r3, r7, #12
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c032:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c036:	88da      	ldrh	r2, [r3, #6]
 800c038:	f107 030c 	add.w	r3, r7, #12
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c040:	f107 030c 	add.w	r3, r7, #12
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	1dfa      	adds	r2, r7, #7
 800c048:	7812      	ldrb	r2, [r2, #0]
 800c04a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	2200      	movs	r2, #0
 800c054:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800c056:	f107 030c 	add.w	r3, r7, #12
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	2200      	movs	r2, #0
 800c05e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800c060:	f107 030c 	add.w	r3, r7, #12
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	2200      	movs	r2, #0
 800c068:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800c06a:	f107 030c 	add.w	r3, r7, #12
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	3330      	adds	r3, #48	; 0x30
 800c072:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c076:	2100      	movs	r1, #0
 800c078:	4618      	mov	r0, r3
 800c07a:	f7fd fc50 	bl	800991e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800c07e:	1dfb      	adds	r3, r7, #7
 800c080:	781b      	ldrb	r3, [r3, #0]
 800c082:	f003 0320 	and.w	r3, r3, #32
 800c086:	2b00      	cmp	r3, #0
 800c088:	f000 808c 	beq.w	800c1a4 <f_open+0x474>
 800c08c:	f107 030c 	add.w	r3, r7, #12
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	68db      	ldr	r3, [r3, #12]
 800c094:	2b00      	cmp	r3, #0
 800c096:	f000 8085 	beq.w	800c1a4 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800c09a:	f107 030c 	add.w	r3, r7, #12
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	68da      	ldr	r2, [r3, #12]
 800c0a2:	f107 030c 	add.w	r3, r7, #12
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800c0aa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c0ae:	895b      	ldrh	r3, [r3, #10]
 800c0b0:	025b      	lsls	r3, r3, #9
 800c0b2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800c0b6:	f107 030c 	add.w	r3, r7, #12
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c0c2:	f107 030c 	add.w	r3, r7, #12
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c0ce:	e01f      	b.n	800c110 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 800c0d0:	f107 030c 	add.w	r3, r7, #12
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd fee7 	bl	8009eae <get_fat>
 800c0e0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800c0e4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c0e8:	2b01      	cmp	r3, #1
 800c0ea:	d802      	bhi.n	800c0f2 <f_open+0x3c2>
 800c0ec:	2302      	movs	r3, #2
 800c0ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800c0f2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800c0f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0fa:	d102      	bne.n	800c102 <f_open+0x3d2>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800c102:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c106:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c10a:	1ad3      	subs	r3, r2, r3
 800c10c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800c110:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c114:	2b00      	cmp	r3, #0
 800c116:	d105      	bne.n	800c124 <f_open+0x3f4>
 800c118:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800c11c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800c120:	429a      	cmp	r2, r3
 800c122:	d8d5      	bhi.n	800c0d0 <f_open+0x3a0>
				}
				fp->clust = clst;
 800c124:	f107 030c 	add.w	r3, r7, #12
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 800c12e:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800c130:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c134:	2b00      	cmp	r3, #0
 800c136:	d135      	bne.n	800c1a4 <f_open+0x474>
 800c138:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c13c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c140:	2b00      	cmp	r3, #0
 800c142:	d02f      	beq.n	800c1a4 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800c144:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c148:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fd fe8f 	bl	8009e70 <clust2sect>
 800c152:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800c156:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d103      	bne.n	800c166 <f_open+0x436>
						res = FR_INT_ERR;
 800c15e:	2302      	movs	r3, #2
 800c160:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800c164:	e01e      	b.n	800c1a4 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c166:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800c16a:	0a5a      	lsrs	r2, r3, #9
 800c16c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800c170:	441a      	add	r2, r3
 800c172:	f107 030c 	add.w	r3, r7, #12
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c17a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800c17e:	7858      	ldrb	r0, [r3, #1]
 800c180:	f107 030c 	add.w	r3, r7, #12
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c18a:	f107 030c 	add.w	r3, r7, #12
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6a1a      	ldr	r2, [r3, #32]
 800c192:	2301      	movs	r3, #1
 800c194:	f7fd faba 	bl	800970c <disk_read>
 800c198:	4603      	mov	r3, r0
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d002      	beq.n	800c1a4 <f_open+0x474>
 800c19e:	2301      	movs	r3, #1
 800c1a0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c1a4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d004      	beq.n	800c1b6 <f_open+0x486>
 800c1ac:	f107 030c 	add.w	r3, r7, #12
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c1b6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f507 771a 	add.w	r7, r7, #616	; 0x268
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08e      	sub	sp, #56	; 0x38
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	607a      	str	r2, [r7, #4]
 800c1d0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	2200      	movs	r2, #0
 800c1da:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f107 0214 	add.w	r2, r7, #20
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f7ff fd27 	bl	800bc38 <validate>
 800c1ea:	4603      	mov	r3, r0
 800c1ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c1f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d107      	bne.n	800c208 <f_read+0x44>
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	7d5b      	ldrb	r3, [r3, #21]
 800c1fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800c200:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c204:	2b00      	cmp	r3, #0
 800c206:	d002      	beq.n	800c20e <f_read+0x4a>
 800c208:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c20c:	e115      	b.n	800c43a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	7d1b      	ldrb	r3, [r3, #20]
 800c212:	f003 0301 	and.w	r3, r3, #1
 800c216:	2b00      	cmp	r3, #0
 800c218:	d101      	bne.n	800c21e <f_read+0x5a>
 800c21a:	2307      	movs	r3, #7
 800c21c:	e10d      	b.n	800c43a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	68da      	ldr	r2, [r3, #12]
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	699b      	ldr	r3, [r3, #24]
 800c226:	1ad3      	subs	r3, r2, r3
 800c228:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800c22a:	687a      	ldr	r2, [r7, #4]
 800c22c:	6a3b      	ldr	r3, [r7, #32]
 800c22e:	429a      	cmp	r2, r3
 800c230:	f240 80fe 	bls.w	800c430 <f_read+0x26c>
 800c234:	6a3b      	ldr	r3, [r7, #32]
 800c236:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800c238:	e0fa      	b.n	800c430 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	699b      	ldr	r3, [r3, #24]
 800c23e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c242:	2b00      	cmp	r3, #0
 800c244:	f040 80c6 	bne.w	800c3d4 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	0a5b      	lsrs	r3, r3, #9
 800c24e:	697a      	ldr	r2, [r7, #20]
 800c250:	8952      	ldrh	r2, [r2, #10]
 800c252:	3a01      	subs	r2, #1
 800c254:	4013      	ands	r3, r2
 800c256:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800c258:	69fb      	ldr	r3, [r7, #28]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d12f      	bne.n	800c2be <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d103      	bne.n	800c26e <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	689b      	ldr	r3, [r3, #8]
 800c26a:	633b      	str	r3, [r7, #48]	; 0x30
 800c26c:	e013      	b.n	800c296 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c272:	2b00      	cmp	r3, #0
 800c274:	d007      	beq.n	800c286 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	699b      	ldr	r3, [r3, #24]
 800c27a:	4619      	mov	r1, r3
 800c27c:	68f8      	ldr	r0, [r7, #12]
 800c27e:	f7fe f8a7 	bl	800a3d0 <clmt_clust>
 800c282:	6338      	str	r0, [r7, #48]	; 0x30
 800c284:	e007      	b.n	800c296 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	4619      	mov	r1, r3
 800c28e:	4610      	mov	r0, r2
 800c290:	f7fd fe0d 	bl	8009eae <get_fat>
 800c294:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d804      	bhi.n	800c2a6 <f_read+0xe2>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2202      	movs	r2, #2
 800c2a0:	755a      	strb	r2, [r3, #21]
 800c2a2:	2302      	movs	r3, #2
 800c2a4:	e0c9      	b.n	800c43a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c2a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2ac:	d104      	bne.n	800c2b8 <f_read+0xf4>
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	755a      	strb	r2, [r3, #21]
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	e0c0      	b.n	800c43a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c2bc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c2be:	697a      	ldr	r2, [r7, #20]
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	69db      	ldr	r3, [r3, #28]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	4610      	mov	r0, r2
 800c2c8:	f7fd fdd2 	bl	8009e70 <clust2sect>
 800c2cc:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c2ce:	69bb      	ldr	r3, [r7, #24]
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d104      	bne.n	800c2de <f_read+0x11a>
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2202      	movs	r2, #2
 800c2d8:	755a      	strb	r2, [r3, #21]
 800c2da:	2302      	movs	r3, #2
 800c2dc:	e0ad      	b.n	800c43a <f_read+0x276>
			sect += csect;
 800c2de:	69ba      	ldr	r2, [r7, #24]
 800c2e0:	69fb      	ldr	r3, [r7, #28]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	0a5b      	lsrs	r3, r3, #9
 800c2ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800c2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d039      	beq.n	800c366 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c2f2:	69fa      	ldr	r2, [r7, #28]
 800c2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f6:	4413      	add	r3, r2
 800c2f8:	697a      	ldr	r2, [r7, #20]
 800c2fa:	8952      	ldrh	r2, [r2, #10]
 800c2fc:	4293      	cmp	r3, r2
 800c2fe:	d905      	bls.n	800c30c <f_read+0x148>
					cc = fs->csize - csect;
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	895b      	ldrh	r3, [r3, #10]
 800c304:	461a      	mov	r2, r3
 800c306:	69fb      	ldr	r3, [r7, #28]
 800c308:	1ad3      	subs	r3, r2, r3
 800c30a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	7858      	ldrb	r0, [r3, #1]
 800c310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c312:	69ba      	ldr	r2, [r7, #24]
 800c314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c316:	f7fd f9f9 	bl	800970c <disk_read>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d004      	beq.n	800c32a <f_read+0x166>
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	755a      	strb	r2, [r3, #21]
 800c326:	2301      	movs	r3, #1
 800c328:	e087      	b.n	800c43a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	7d1b      	ldrb	r3, [r3, #20]
 800c32e:	b25b      	sxtb	r3, r3
 800c330:	2b00      	cmp	r3, #0
 800c332:	da14      	bge.n	800c35e <f_read+0x19a>
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	6a1a      	ldr	r2, [r3, #32]
 800c338:	69bb      	ldr	r3, [r7, #24]
 800c33a:	1ad3      	subs	r3, r2, r3
 800c33c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c33e:	429a      	cmp	r2, r3
 800c340:	d90d      	bls.n	800c35e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	6a1a      	ldr	r2, [r3, #32]
 800c346:	69bb      	ldr	r3, [r7, #24]
 800c348:	1ad3      	subs	r3, r2, r3
 800c34a:	025b      	lsls	r3, r3, #9
 800c34c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c34e:	18d0      	adds	r0, r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	3330      	adds	r3, #48	; 0x30
 800c354:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c358:	4619      	mov	r1, r3
 800c35a:	f7fd fabf 	bl	80098dc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	025b      	lsls	r3, r3, #9
 800c362:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800c364:	e050      	b.n	800c408 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	6a1b      	ldr	r3, [r3, #32]
 800c36a:	69ba      	ldr	r2, [r7, #24]
 800c36c:	429a      	cmp	r2, r3
 800c36e:	d02e      	beq.n	800c3ce <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	7d1b      	ldrb	r3, [r3, #20]
 800c374:	b25b      	sxtb	r3, r3
 800c376:	2b00      	cmp	r3, #0
 800c378:	da18      	bge.n	800c3ac <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c37a:	697b      	ldr	r3, [r7, #20]
 800c37c:	7858      	ldrb	r0, [r3, #1]
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	6a1a      	ldr	r2, [r3, #32]
 800c388:	2301      	movs	r3, #1
 800c38a:	f7fd f9df 	bl	800974c <disk_write>
 800c38e:	4603      	mov	r3, r0
 800c390:	2b00      	cmp	r3, #0
 800c392:	d004      	beq.n	800c39e <f_read+0x1da>
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	2201      	movs	r2, #1
 800c398:	755a      	strb	r2, [r3, #21]
 800c39a:	2301      	movs	r3, #1
 800c39c:	e04d      	b.n	800c43a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	7d1b      	ldrb	r3, [r3, #20]
 800c3a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3a6:	b2da      	uxtb	r2, r3
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	7858      	ldrb	r0, [r3, #1]
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	69ba      	ldr	r2, [r7, #24]
 800c3ba:	f7fd f9a7 	bl	800970c <disk_read>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d004      	beq.n	800c3ce <f_read+0x20a>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	755a      	strb	r2, [r3, #21]
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	e035      	b.n	800c43a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	69ba      	ldr	r2, [r7, #24]
 800c3d2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	699b      	ldr	r3, [r3, #24]
 800c3d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3dc:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c3e0:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800c3e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d901      	bls.n	800c3ee <f_read+0x22a>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	699b      	ldr	r3, [r3, #24]
 800c3f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3fc:	4413      	add	r3, r2
 800c3fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c400:	4619      	mov	r1, r3
 800c402:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c404:	f7fd fa6a 	bl	80098dc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800c408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40c:	4413      	add	r3, r2
 800c40e:	627b      	str	r3, [r7, #36]	; 0x24
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	699a      	ldr	r2, [r3, #24]
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	441a      	add	r2, r3
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	619a      	str	r2, [r3, #24]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	681a      	ldr	r2, [r3, #0]
 800c420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c422:	441a      	add	r2, r3
 800c424:	683b      	ldr	r3, [r7, #0]
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	1ad3      	subs	r3, r2, r3
 800c42e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	2b00      	cmp	r3, #0
 800c434:	f47f af01 	bne.w	800c23a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800c438:	2300      	movs	r3, #0
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3738      	adds	r7, #56	; 0x38
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}

0800c442 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800c442:	b580      	push	{r7, lr}
 800c444:	b08c      	sub	sp, #48	; 0x30
 800c446:	af00      	add	r7, sp, #0
 800c448:	60f8      	str	r0, [r7, #12]
 800c44a:	60b9      	str	r1, [r7, #8]
 800c44c:	607a      	str	r2, [r7, #4]
 800c44e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800c450:	68bb      	ldr	r3, [r7, #8]
 800c452:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800c454:	683b      	ldr	r3, [r7, #0]
 800c456:	2200      	movs	r2, #0
 800c458:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	f107 0210 	add.w	r2, r7, #16
 800c460:	4611      	mov	r1, r2
 800c462:	4618      	mov	r0, r3
 800c464:	f7ff fbe8 	bl	800bc38 <validate>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800c46e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c472:	2b00      	cmp	r3, #0
 800c474:	d107      	bne.n	800c486 <f_write+0x44>
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	7d5b      	ldrb	r3, [r3, #21]
 800c47a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c47e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c482:	2b00      	cmp	r3, #0
 800c484:	d002      	beq.n	800c48c <f_write+0x4a>
 800c486:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c48a:	e14b      	b.n	800c724 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	7d1b      	ldrb	r3, [r3, #20]
 800c490:	f003 0302 	and.w	r3, r3, #2
 800c494:	2b00      	cmp	r3, #0
 800c496:	d101      	bne.n	800c49c <f_write+0x5a>
 800c498:	2307      	movs	r3, #7
 800c49a:	e143      	b.n	800c724 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	699a      	ldr	r2, [r3, #24]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	441a      	add	r2, r3
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	699b      	ldr	r3, [r3, #24]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	f080 812d 	bcs.w	800c708 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	43db      	mvns	r3, r3
 800c4b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800c4b6:	e127      	b.n	800c708 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	699b      	ldr	r3, [r3, #24]
 800c4bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	f040 80e3 	bne.w	800c68c <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	699b      	ldr	r3, [r3, #24]
 800c4ca:	0a5b      	lsrs	r3, r3, #9
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	8952      	ldrh	r2, [r2, #10]
 800c4d0:	3a01      	subs	r2, #1
 800c4d2:	4013      	ands	r3, r2
 800c4d4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800c4d6:	69bb      	ldr	r3, [r7, #24]
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d143      	bne.n	800c564 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	699b      	ldr	r3, [r3, #24]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10c      	bne.n	800c4fe <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800c4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11a      	bne.n	800c526 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	2100      	movs	r1, #0
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f7fd fed3 	bl	800a2a0 <create_chain>
 800c4fa:	62b8      	str	r0, [r7, #40]	; 0x28
 800c4fc:	e013      	b.n	800c526 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c502:	2b00      	cmp	r3, #0
 800c504:	d007      	beq.n	800c516 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	699b      	ldr	r3, [r3, #24]
 800c50a:	4619      	mov	r1, r3
 800c50c:	68f8      	ldr	r0, [r7, #12]
 800c50e:	f7fd ff5f 	bl	800a3d0 <clmt_clust>
 800c512:	62b8      	str	r0, [r7, #40]	; 0x28
 800c514:	e007      	b.n	800c526 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	69db      	ldr	r3, [r3, #28]
 800c51c:	4619      	mov	r1, r3
 800c51e:	4610      	mov	r0, r2
 800c520:	f7fd febe 	bl	800a2a0 <create_chain>
 800c524:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f000 80f2 	beq.w	800c712 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c530:	2b01      	cmp	r3, #1
 800c532:	d104      	bne.n	800c53e <f_write+0xfc>
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	2202      	movs	r2, #2
 800c538:	755a      	strb	r2, [r3, #21]
 800c53a:	2302      	movs	r3, #2
 800c53c:	e0f2      	b.n	800c724 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c544:	d104      	bne.n	800c550 <f_write+0x10e>
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	2201      	movs	r2, #1
 800c54a:	755a      	strb	r2, [r3, #21]
 800c54c:	2301      	movs	r3, #1
 800c54e:	e0e9      	b.n	800c724 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c554:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	689b      	ldr	r3, [r3, #8]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d102      	bne.n	800c564 <f_write+0x122>
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c562:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	7d1b      	ldrb	r3, [r3, #20]
 800c568:	b25b      	sxtb	r3, r3
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	da18      	bge.n	800c5a0 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	7858      	ldrb	r0, [r3, #1]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	6a1a      	ldr	r2, [r3, #32]
 800c57c:	2301      	movs	r3, #1
 800c57e:	f7fd f8e5 	bl	800974c <disk_write>
 800c582:	4603      	mov	r3, r0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d004      	beq.n	800c592 <f_write+0x150>
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2201      	movs	r2, #1
 800c58c:	755a      	strb	r2, [r3, #21]
 800c58e:	2301      	movs	r3, #1
 800c590:	e0c8      	b.n	800c724 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c592:	68fb      	ldr	r3, [r7, #12]
 800c594:	7d1b      	ldrb	r3, [r3, #20]
 800c596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800c5a0:	693a      	ldr	r2, [r7, #16]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	69db      	ldr	r3, [r3, #28]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4610      	mov	r0, r2
 800c5aa:	f7fd fc61 	bl	8009e70 <clust2sect>
 800c5ae:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d104      	bne.n	800c5c0 <f_write+0x17e>
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2202      	movs	r2, #2
 800c5ba:	755a      	strb	r2, [r3, #21]
 800c5bc:	2302      	movs	r3, #2
 800c5be:	e0b1      	b.n	800c724 <f_write+0x2e2>
			sect += csect;
 800c5c0:	697a      	ldr	r2, [r7, #20]
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	4413      	add	r3, r2
 800c5c6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	0a5b      	lsrs	r3, r3, #9
 800c5cc:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800c5ce:	6a3b      	ldr	r3, [r7, #32]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d03c      	beq.n	800c64e <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800c5d4:	69ba      	ldr	r2, [r7, #24]
 800c5d6:	6a3b      	ldr	r3, [r7, #32]
 800c5d8:	4413      	add	r3, r2
 800c5da:	693a      	ldr	r2, [r7, #16]
 800c5dc:	8952      	ldrh	r2, [r2, #10]
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d905      	bls.n	800c5ee <f_write+0x1ac>
					cc = fs->csize - csect;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	895b      	ldrh	r3, [r3, #10]
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	7858      	ldrb	r0, [r3, #1]
 800c5f2:	6a3b      	ldr	r3, [r7, #32]
 800c5f4:	697a      	ldr	r2, [r7, #20]
 800c5f6:	69f9      	ldr	r1, [r7, #28]
 800c5f8:	f7fd f8a8 	bl	800974c <disk_write>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d004      	beq.n	800c60c <f_write+0x1ca>
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	2201      	movs	r2, #1
 800c606:	755a      	strb	r2, [r3, #21]
 800c608:	2301      	movs	r3, #1
 800c60a:	e08b      	b.n	800c724 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	6a1a      	ldr	r2, [r3, #32]
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	6a3a      	ldr	r2, [r7, #32]
 800c616:	429a      	cmp	r2, r3
 800c618:	d915      	bls.n	800c646 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c61a:	68fb      	ldr	r3, [r7, #12]
 800c61c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a1a      	ldr	r2, [r3, #32]
 800c624:	697b      	ldr	r3, [r7, #20]
 800c626:	1ad3      	subs	r3, r2, r3
 800c628:	025b      	lsls	r3, r3, #9
 800c62a:	69fa      	ldr	r2, [r7, #28]
 800c62c:	4413      	add	r3, r2
 800c62e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c632:	4619      	mov	r1, r3
 800c634:	f7fd f952 	bl	80098dc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	7d1b      	ldrb	r3, [r3, #20]
 800c63c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c640:	b2da      	uxtb	r2, r3
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c646:	6a3b      	ldr	r3, [r7, #32]
 800c648:	025b      	lsls	r3, r3, #9
 800c64a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800c64c:	e03f      	b.n	800c6ce <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	429a      	cmp	r2, r3
 800c656:	d016      	beq.n	800c686 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	699a      	ldr	r2, [r3, #24]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c660:	429a      	cmp	r2, r3
 800c662:	d210      	bcs.n	800c686 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	7858      	ldrb	r0, [r3, #1]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c66e:	2301      	movs	r3, #1
 800c670:	697a      	ldr	r2, [r7, #20]
 800c672:	f7fd f84b 	bl	800970c <disk_read>
 800c676:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d004      	beq.n	800c686 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2201      	movs	r2, #1
 800c680:	755a      	strb	r2, [r3, #21]
 800c682:	2301      	movs	r3, #1
 800c684:	e04e      	b.n	800c724 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	697a      	ldr	r2, [r7, #20]
 800c68a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	699b      	ldr	r3, [r3, #24]
 800c690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c694:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800c698:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c69a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	429a      	cmp	r2, r3
 800c6a0:	d901      	bls.n	800c6a6 <f_write+0x264>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	699b      	ldr	r3, [r3, #24]
 800c6b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6b4:	4413      	add	r3, r2
 800c6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6b8:	69f9      	ldr	r1, [r7, #28]
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f7fd f90e 	bl	80098dc <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	7d1b      	ldrb	r3, [r3, #20]
 800c6c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c6c8:	b2da      	uxtb	r2, r3
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c6ce:	69fa      	ldr	r2, [r7, #28]
 800c6d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6d2:	4413      	add	r3, r2
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	699a      	ldr	r2, [r3, #24]
 800c6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6dc:	441a      	add	r2, r3
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	619a      	str	r2, [r3, #24]
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	68da      	ldr	r2, [r3, #12]
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	699b      	ldr	r3, [r3, #24]
 800c6ea:	429a      	cmp	r2, r3
 800c6ec:	bf38      	it	cc
 800c6ee:	461a      	movcc	r2, r3
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	60da      	str	r2, [r3, #12]
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681a      	ldr	r2, [r3, #0]
 800c6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6fa:	441a      	add	r2, r3
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	601a      	str	r2, [r3, #0]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c704:	1ad3      	subs	r3, r2, r3
 800c706:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	f47f aed4 	bne.w	800c4b8 <f_write+0x76>
 800c710:	e000      	b.n	800c714 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c712:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	7d1b      	ldrb	r3, [r3, #20]
 800c718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c71c:	b2da      	uxtb	r2, r3
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3730      	adds	r7, #48	; 0x30
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b086      	sub	sp, #24
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f107 0208 	add.w	r2, r7, #8
 800c73a:	4611      	mov	r1, r2
 800c73c:	4618      	mov	r0, r3
 800c73e:	f7ff fa7b 	bl	800bc38 <validate>
 800c742:	4603      	mov	r3, r0
 800c744:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c746:	7dfb      	ldrb	r3, [r7, #23]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d168      	bne.n	800c81e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	7d1b      	ldrb	r3, [r3, #20]
 800c750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c754:	2b00      	cmp	r3, #0
 800c756:	d062      	beq.n	800c81e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	7d1b      	ldrb	r3, [r3, #20]
 800c75c:	b25b      	sxtb	r3, r3
 800c75e:	2b00      	cmp	r3, #0
 800c760:	da15      	bge.n	800c78e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	7858      	ldrb	r0, [r3, #1]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6a1a      	ldr	r2, [r3, #32]
 800c770:	2301      	movs	r3, #1
 800c772:	f7fc ffeb 	bl	800974c <disk_write>
 800c776:	4603      	mov	r3, r0
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d001      	beq.n	800c780 <f_sync+0x54>
 800c77c:	2301      	movs	r3, #1
 800c77e:	e04f      	b.n	800c820 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	7d1b      	ldrb	r3, [r3, #20]
 800c784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c788:	b2da      	uxtb	r2, r3
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c78e:	f7fd f81b 	bl	80097c8 <get_fattime>
 800c792:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	4619      	mov	r1, r3
 800c79c:	4610      	mov	r0, r2
 800c79e:	f7fd facb 	bl	8009d38 <move_window>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c7a6:	7dfb      	ldrb	r3, [r7, #23]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d138      	bne.n	800c81e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c7b0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	330b      	adds	r3, #11
 800c7b6:	781a      	ldrb	r2, [r3, #0]
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	330b      	adds	r3, #11
 800c7bc:	f042 0220 	orr.w	r2, r2, #32
 800c7c0:	b2d2      	uxtb	r2, r2
 800c7c2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	6818      	ldr	r0, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689b      	ldr	r3, [r3, #8]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	68f9      	ldr	r1, [r7, #12]
 800c7d0:	f7fd ffd8 	bl	800a784 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f103 021c 	add.w	r2, r3, #28
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	68db      	ldr	r3, [r3, #12]
 800c7de:	4619      	mov	r1, r3
 800c7e0:	4610      	mov	r0, r2
 800c7e2:	f7fd f84f 	bl	8009884 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	3316      	adds	r3, #22
 800c7ea:	6939      	ldr	r1, [r7, #16]
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fd f849 	bl	8009884 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	3312      	adds	r3, #18
 800c7f6:	2100      	movs	r1, #0
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	f7fd f828 	bl	800984e <st_word>
					fs->wflag = 1;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	2201      	movs	r2, #1
 800c802:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	4618      	mov	r0, r3
 800c808:	f7fd fac4 	bl	8009d94 <sync_fs>
 800c80c:	4603      	mov	r3, r0
 800c80e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	7d1b      	ldrb	r3, [r3, #20]
 800c814:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c818:	b2da      	uxtb	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c81e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c820:	4618      	mov	r0, r3
 800c822:	3718      	adds	r7, #24
 800c824:	46bd      	mov	sp, r7
 800c826:	bd80      	pop	{r7, pc}

0800c828 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c830:	6878      	ldr	r0, [r7, #4]
 800c832:	f7ff ff7b 	bl	800c72c <f_sync>
 800c836:	4603      	mov	r3, r0
 800c838:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c83a:	7bfb      	ldrb	r3, [r7, #15]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d118      	bne.n	800c872 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f107 0208 	add.w	r2, r7, #8
 800c846:	4611      	mov	r1, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7ff f9f5 	bl	800bc38 <validate>
 800c84e:	4603      	mov	r3, r0
 800c850:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c852:	7bfb      	ldrb	r3, [r7, #15]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d10c      	bne.n	800c872 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f7fd f9c7 	bl	8009bf0 <dec_lock>
 800c862:	4603      	mov	r3, r0
 800c864:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c866:	7bfb      	ldrb	r3, [r7, #15]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d102      	bne.n	800c872 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800c872:	7bfb      	ldrb	r3, [r7, #15]
}
 800c874:	4618      	mov	r0, r3
 800c876:	3710      	adds	r7, #16
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}

0800c87c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b090      	sub	sp, #64	; 0x40
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
 800c884:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f107 0208 	add.w	r2, r7, #8
 800c88c:	4611      	mov	r1, r2
 800c88e:	4618      	mov	r0, r3
 800c890:	f7ff f9d2 	bl	800bc38 <validate>
 800c894:	4603      	mov	r3, r0
 800c896:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800c89a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d103      	bne.n	800c8aa <f_lseek+0x2e>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	7d5b      	ldrb	r3, [r3, #21]
 800c8a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800c8aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d002      	beq.n	800c8b8 <f_lseek+0x3c>
 800c8b2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800c8b6:	e1e6      	b.n	800cc86 <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	f000 80d1 	beq.w	800ca64 <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800c8c2:	683b      	ldr	r3, [r7, #0]
 800c8c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c8c8:	d15a      	bne.n	800c980 <f_lseek+0x104>
			tbl = fp->cltbl;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8d2:	1d1a      	adds	r2, r3, #4
 800c8d4:	627a      	str	r2, [r7, #36]	; 0x24
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	617b      	str	r3, [r7, #20]
 800c8da:	2302      	movs	r3, #2
 800c8dc:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	689b      	ldr	r3, [r3, #8]
 800c8e2:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800c8e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d03a      	beq.n	800c960 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800c8ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ec:	613b      	str	r3, [r7, #16]
 800c8ee:	2300      	movs	r3, #0
 800c8f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f4:	3302      	adds	r3, #2
 800c8f6:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800c8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8fa:	60fb      	str	r3, [r7, #12]
 800c8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fe:	3301      	adds	r3, #1
 800c900:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c906:	4618      	mov	r0, r3
 800c908:	f7fd fad1 	bl	8009eae <get_fat>
 800c90c:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800c90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c910:	2b01      	cmp	r3, #1
 800c912:	d804      	bhi.n	800c91e <f_lseek+0xa2>
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2202      	movs	r2, #2
 800c918:	755a      	strb	r2, [r3, #21]
 800c91a:	2302      	movs	r3, #2
 800c91c:	e1b3      	b.n	800cc86 <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800c91e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c920:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c924:	d104      	bne.n	800c930 <f_lseek+0xb4>
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2201      	movs	r2, #1
 800c92a:	755a      	strb	r2, [r3, #21]
 800c92c:	2301      	movs	r3, #1
 800c92e:	e1aa      	b.n	800cc86 <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	3301      	adds	r3, #1
 800c934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c936:	429a      	cmp	r2, r3
 800c938:	d0de      	beq.n	800c8f8 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800c93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d809      	bhi.n	800c956 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800c942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c944:	1d1a      	adds	r2, r3, #4
 800c946:	627a      	str	r2, [r7, #36]	; 0x24
 800c948:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c94e:	1d1a      	adds	r2, r3, #4
 800c950:	627a      	str	r2, [r7, #36]	; 0x24
 800c952:	693a      	ldr	r2, [r7, #16]
 800c954:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800c956:	68bb      	ldr	r3, [r7, #8]
 800c958:	699b      	ldr	r3, [r3, #24]
 800c95a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d3c4      	bcc.n	800c8ea <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c966:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800c968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	429a      	cmp	r2, r3
 800c96e:	d803      	bhi.n	800c978 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800c970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c972:	2200      	movs	r2, #0
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	e184      	b.n	800cc82 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800c978:	2311      	movs	r3, #17
 800c97a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800c97e:	e180      	b.n	800cc82 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	683a      	ldr	r2, [r7, #0]
 800c986:	429a      	cmp	r2, r3
 800c988:	d902      	bls.n	800c990 <f_lseek+0x114>
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	68db      	ldr	r3, [r3, #12]
 800c98e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	683a      	ldr	r2, [r7, #0]
 800c994:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800c996:	683b      	ldr	r3, [r7, #0]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	f000 8172 	beq.w	800cc82 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800c99e:	683b      	ldr	r3, [r7, #0]
 800c9a0:	3b01      	subs	r3, #1
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f7fd fd13 	bl	800a3d0 <clmt_clust>
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800c9b0:	68ba      	ldr	r2, [r7, #8]
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	69db      	ldr	r3, [r3, #28]
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4610      	mov	r0, r2
 800c9ba:	f7fd fa59 	bl	8009e70 <clust2sect>
 800c9be:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800c9c0:	69bb      	ldr	r3, [r7, #24]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d104      	bne.n	800c9d0 <f_lseek+0x154>
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2202      	movs	r2, #2
 800c9ca:	755a      	strb	r2, [r3, #21]
 800c9cc:	2302      	movs	r3, #2
 800c9ce:	e15a      	b.n	800cc86 <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	3b01      	subs	r3, #1
 800c9d4:	0a5b      	lsrs	r3, r3, #9
 800c9d6:	68ba      	ldr	r2, [r7, #8]
 800c9d8:	8952      	ldrh	r2, [r2, #10]
 800c9da:	3a01      	subs	r2, #1
 800c9dc:	4013      	ands	r3, r2
 800c9de:	69ba      	ldr	r2, [r7, #24]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	699b      	ldr	r3, [r3, #24]
 800c9e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f000 8148 	beq.w	800cc82 <f_lseek+0x406>
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	6a1b      	ldr	r3, [r3, #32]
 800c9f6:	69ba      	ldr	r2, [r7, #24]
 800c9f8:	429a      	cmp	r2, r3
 800c9fa:	f000 8142 	beq.w	800cc82 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	7d1b      	ldrb	r3, [r3, #20]
 800ca02:	b25b      	sxtb	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	da18      	bge.n	800ca3a <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	7858      	ldrb	r0, [r3, #1]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6a1a      	ldr	r2, [r3, #32]
 800ca16:	2301      	movs	r3, #1
 800ca18:	f7fc fe98 	bl	800974c <disk_write>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d004      	beq.n	800ca2c <f_lseek+0x1b0>
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	2201      	movs	r2, #1
 800ca26:	755a      	strb	r2, [r3, #21]
 800ca28:	2301      	movs	r3, #1
 800ca2a:	e12c      	b.n	800cc86 <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	7d1b      	ldrb	r3, [r3, #20]
 800ca30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca34:	b2da      	uxtb	r2, r3
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	7858      	ldrb	r0, [r3, #1]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ca44:	2301      	movs	r3, #1
 800ca46:	69ba      	ldr	r2, [r7, #24]
 800ca48:	f7fc fe60 	bl	800970c <disk_read>
 800ca4c:	4603      	mov	r3, r0
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d004      	beq.n	800ca5c <f_lseek+0x1e0>
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2201      	movs	r2, #1
 800ca56:	755a      	strb	r2, [r3, #21]
 800ca58:	2301      	movs	r3, #1
 800ca5a:	e114      	b.n	800cc86 <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	69ba      	ldr	r2, [r7, #24]
 800ca60:	621a      	str	r2, [r3, #32]
 800ca62:	e10e      	b.n	800cc82 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	68db      	ldr	r3, [r3, #12]
 800ca68:	683a      	ldr	r2, [r7, #0]
 800ca6a:	429a      	cmp	r2, r3
 800ca6c:	d908      	bls.n	800ca80 <f_lseek+0x204>
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	7d1b      	ldrb	r3, [r3, #20]
 800ca72:	f003 0302 	and.w	r3, r3, #2
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d102      	bne.n	800ca80 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	699b      	ldr	r3, [r3, #24]
 800ca84:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800ca86:	2300      	movs	r3, #0
 800ca88:	637b      	str	r3, [r7, #52]	; 0x34
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca8e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	f000 80a7 	beq.w	800cbe6 <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800ca98:	68bb      	ldr	r3, [r7, #8]
 800ca9a:	895b      	ldrh	r3, [r3, #10]
 800ca9c:	025b      	lsls	r3, r3, #9
 800ca9e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d01b      	beq.n	800cade <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	1e5a      	subs	r2, r3, #1
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	fbb2 f2f3 	udiv	r2, r2, r3
 800cab0:	6a3b      	ldr	r3, [r7, #32]
 800cab2:	1e59      	subs	r1, r3, #1
 800cab4:	69fb      	ldr	r3, [r7, #28]
 800cab6:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800caba:	429a      	cmp	r2, r3
 800cabc:	d30f      	bcc.n	800cade <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800cabe:	6a3b      	ldr	r3, [r7, #32]
 800cac0:	1e5a      	subs	r2, r3, #1
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	425b      	negs	r3, r3
 800cac6:	401a      	ands	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	699b      	ldr	r3, [r3, #24]
 800cad0:	683a      	ldr	r2, [r7, #0]
 800cad2:	1ad3      	subs	r3, r2, r3
 800cad4:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	69db      	ldr	r3, [r3, #28]
 800cada:	63bb      	str	r3, [r7, #56]	; 0x38
 800cadc:	e022      	b.n	800cb24 <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800cae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d119      	bne.n	800cb1e <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	2100      	movs	r1, #0
 800caee:	4618      	mov	r0, r3
 800caf0:	f7fd fbd6 	bl	800a2a0 <create_chain>
 800caf4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800caf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d104      	bne.n	800cb06 <f_lseek+0x28a>
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	2202      	movs	r2, #2
 800cb00:	755a      	strb	r2, [r3, #21]
 800cb02:	2302      	movs	r3, #2
 800cb04:	e0bf      	b.n	800cc86 <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb0c:	d104      	bne.n	800cb18 <f_lseek+0x29c>
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2201      	movs	r2, #1
 800cb12:	755a      	strb	r2, [r3, #21]
 800cb14:	2301      	movs	r3, #1
 800cb16:	e0b6      	b.n	800cc86 <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb1c:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb22:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800cb24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d05d      	beq.n	800cbe6 <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800cb2a:	e03a      	b.n	800cba2 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800cb2c:	683a      	ldr	r2, [r7, #0]
 800cb2e:	69fb      	ldr	r3, [r7, #28]
 800cb30:	1ad3      	subs	r3, r2, r3
 800cb32:	603b      	str	r3, [r7, #0]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	699a      	ldr	r2, [r3, #24]
 800cb38:	69fb      	ldr	r3, [r7, #28]
 800cb3a:	441a      	add	r2, r3
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	7d1b      	ldrb	r3, [r3, #20]
 800cb44:	f003 0302 	and.w	r3, r3, #2
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb50:	4618      	mov	r0, r3
 800cb52:	f7fd fba5 	bl	800a2a0 <create_chain>
 800cb56:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800cb58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d108      	bne.n	800cb70 <f_lseek+0x2f4>
							ofs = 0; break;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	603b      	str	r3, [r7, #0]
 800cb62:	e022      	b.n	800cbaa <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cb68:	4618      	mov	r0, r3
 800cb6a:	f7fd f9a0 	bl	8009eae <get_fat>
 800cb6e:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cb70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb76:	d104      	bne.n	800cb82 <f_lseek+0x306>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	755a      	strb	r2, [r3, #21]
 800cb7e:	2301      	movs	r3, #1
 800cb80:	e081      	b.n	800cc86 <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	2b01      	cmp	r3, #1
 800cb86:	d904      	bls.n	800cb92 <f_lseek+0x316>
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d304      	bcc.n	800cb9c <f_lseek+0x320>
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2202      	movs	r2, #2
 800cb96:	755a      	strb	r2, [r3, #21]
 800cb98:	2302      	movs	r3, #2
 800cb9a:	e074      	b.n	800cc86 <f_lseek+0x40a>
					fp->clust = clst;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cba0:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800cba2:	683a      	ldr	r2, [r7, #0]
 800cba4:	69fb      	ldr	r3, [r7, #28]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d8c0      	bhi.n	800cb2c <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	699a      	ldr	r2, [r3, #24]
 800cbae:	683b      	ldr	r3, [r7, #0]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800cbb6:	683b      	ldr	r3, [r7, #0]
 800cbb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d012      	beq.n	800cbe6 <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7fd f953 	bl	8009e70 <clust2sect>
 800cbca:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800cbcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d104      	bne.n	800cbdc <f_lseek+0x360>
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2202      	movs	r2, #2
 800cbd6:	755a      	strb	r2, [r3, #21]
 800cbd8:	2302      	movs	r3, #2
 800cbda:	e054      	b.n	800cc86 <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800cbdc:	683b      	ldr	r3, [r7, #0]
 800cbde:	0a5b      	lsrs	r3, r3, #9
 800cbe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cbe2:	4413      	add	r3, r2
 800cbe4:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	699a      	ldr	r2, [r3, #24]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	68db      	ldr	r3, [r3, #12]
 800cbee:	429a      	cmp	r2, r3
 800cbf0:	d90a      	bls.n	800cc08 <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	699a      	ldr	r2, [r3, #24]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	7d1b      	ldrb	r3, [r3, #20]
 800cbfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc02:	b2da      	uxtb	r2, r3
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	699b      	ldr	r3, [r3, #24]
 800cc0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d036      	beq.n	800cc82 <f_lseek+0x406>
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	6a1b      	ldr	r3, [r3, #32]
 800cc18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d031      	beq.n	800cc82 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7d1b      	ldrb	r3, [r3, #20]
 800cc22:	b25b      	sxtb	r3, r3
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	da18      	bge.n	800cc5a <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	7858      	ldrb	r0, [r3, #1]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6a1a      	ldr	r2, [r3, #32]
 800cc36:	2301      	movs	r3, #1
 800cc38:	f7fc fd88 	bl	800974c <disk_write>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d004      	beq.n	800cc4c <f_lseek+0x3d0>
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2201      	movs	r2, #1
 800cc46:	755a      	strb	r2, [r3, #21]
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e01c      	b.n	800cc86 <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	7d1b      	ldrb	r3, [r3, #20]
 800cc50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc54:	b2da      	uxtb	r2, r3
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	7858      	ldrb	r0, [r3, #1]
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cc64:	2301      	movs	r3, #1
 800cc66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc68:	f7fc fd50 	bl	800970c <disk_read>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d004      	beq.n	800cc7c <f_lseek+0x400>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2201      	movs	r2, #1
 800cc76:	755a      	strb	r2, [r3, #21]
 800cc78:	2301      	movs	r3, #1
 800cc7a:	e004      	b.n	800cc86 <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc80:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800cc82:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3740      	adds	r7, #64	; 0x40
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	1d3b      	adds	r3, r7, #4
 800cc98:	6018      	str	r0, [r3, #0]
 800cc9a:	463b      	mov	r3, r7
 800cc9c:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 800cc9e:	1d3b      	adds	r3, r7, #4
 800cca0:	681b      	ldr	r3, [r3, #0]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <f_opendir+0x1c>
 800cca6:	2309      	movs	r3, #9
 800cca8:	e08a      	b.n	800cdc0 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 800ccaa:	1d3b      	adds	r3, r7, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 800ccb2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 800ccb6:	463b      	mov	r3, r7
 800ccb8:	2200      	movs	r2, #0
 800ccba:	4618      	mov	r0, r3
 800ccbc:	f7fe fd70 	bl	800b7a0 <find_volume>
 800ccc0:	4603      	mov	r3, r0
 800ccc2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 800ccc6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d16e      	bne.n	800cdac <f_opendir+0x11e>
		obj->fs = fs;
 800ccce:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800ccd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800ccd6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 800ccd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800ccdc:	f107 020c 	add.w	r2, r7, #12
 800cce0:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800cce2:	463b      	mov	r3, r7
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	1d3b      	adds	r3, r7, #4
 800cce8:	4611      	mov	r1, r2
 800ccea:	6818      	ldr	r0, [r3, #0]
 800ccec:	f7fe fc4c 	bl	800b588 <follow_path>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 800ccf6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d14f      	bne.n	800cd9e <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800ccfe:	1d3b      	adds	r3, r7, #4
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cd06:	b25b      	sxtb	r3, r3
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	db17      	blt.n	800cd3c <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800cd0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd10:	799b      	ldrb	r3, [r3, #6]
 800cd12:	f003 0310 	and.w	r3, r3, #16
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00d      	beq.n	800cd36 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800cd1a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 800cd1e:	1d3b      	adds	r3, r7, #4
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	6a1b      	ldr	r3, [r3, #32]
 800cd24:	4619      	mov	r1, r3
 800cd26:	4610      	mov	r0, r2
 800cd28:	f7fd fd0d 	bl	800a746 <ld_clust>
 800cd2c:	4602      	mov	r2, r0
 800cd2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd32:	609a      	str	r2, [r3, #8]
 800cd34:	e002      	b.n	800cd3c <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 800cd36:	2305      	movs	r3, #5
 800cd38:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 800cd3c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d12c      	bne.n	800cd9e <f_opendir+0x110>
				obj->id = fs->id;
 800cd44:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800cd48:	88da      	ldrh	r2, [r3, #6]
 800cd4a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd4e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800cd50:	1d3b      	adds	r3, r7, #4
 800cd52:	2100      	movs	r1, #0
 800cd54:	6818      	ldr	r0, [r3, #0]
 800cd56:	f7fd fb6f 	bl	800a438 <dir_sdi>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 800cd60:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d11a      	bne.n	800cd9e <f_opendir+0x110>
					if (obj->sclust) {
 800cd68:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d011      	beq.n	800cd96 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800cd72:	1d3b      	adds	r3, r7, #4
 800cd74:	2100      	movs	r1, #0
 800cd76:	6818      	ldr	r0, [r3, #0]
 800cd78:	f7fc feac 	bl	8009ad4 <inc_lock>
 800cd7c:	4602      	mov	r2, r0
 800cd7e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd82:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800cd84:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd88:	691b      	ldr	r3, [r3, #16]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d107      	bne.n	800cd9e <f_opendir+0x110>
 800cd8e:	2312      	movs	r3, #18
 800cd90:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 800cd94:	e003      	b.n	800cd9e <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 800cd96:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800cd9e:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800cda2:	2b04      	cmp	r3, #4
 800cda4:	d102      	bne.n	800cdac <f_opendir+0x11e>
 800cda6:	2305      	movs	r3, #5
 800cda8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800cdac:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d003      	beq.n	800cdbc <f_opendir+0x12e>
 800cdb4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800cdb8:	2200      	movs	r2, #0
 800cdba:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800cdbc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	bd80      	pop	{r7, pc}

0800cdca <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 800cdca:	b580      	push	{r7, lr}
 800cdcc:	b084      	sub	sp, #16
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	f107 0208 	add.w	r2, r7, #8
 800cdd8:	4611      	mov	r1, r2
 800cdda:	4618      	mov	r0, r3
 800cddc:	f7fe ff2c 	bl	800bc38 <validate>
 800cde0:	4603      	mov	r3, r0
 800cde2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cde4:	7bfb      	ldrb	r3, [r7, #15]
 800cde6:	2b00      	cmp	r3, #0
 800cde8:	d110      	bne.n	800ce0c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	691b      	ldr	r3, [r3, #16]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d006      	beq.n	800ce00 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fc fefa 	bl	8009bf0 <dec_lock>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800ce00:	7bfb      	ldrb	r3, [r7, #15]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d102      	bne.n	800ce0c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2200      	movs	r2, #0
 800ce0a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	1d3b      	adds	r3, r7, #4
 800ce20:	6018      	str	r0, [r3, #0]
 800ce22:	463b      	mov	r3, r7
 800ce24:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800ce26:	1d3b      	adds	r3, r7, #4
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7fe ff01 	bl	800bc38 <validate>
 800ce36:	4603      	mov	r3, r0
 800ce38:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 800ce3c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d139      	bne.n	800ceb8 <f_readdir+0xa2>
		if (!fno) {
 800ce44:	463b      	mov	r3, r7
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d108      	bne.n	800ce5e <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800ce4c:	1d3b      	adds	r3, r7, #4
 800ce4e:	2100      	movs	r1, #0
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	f7fd faf1 	bl	800a438 <dir_sdi>
 800ce56:	4603      	mov	r3, r0
 800ce58:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 800ce5c:	e02c      	b.n	800ceb8 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 800ce5e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800ce62:	f107 0208 	add.w	r2, r7, #8
 800ce66:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 800ce68:	1d3b      	adds	r3, r7, #4
 800ce6a:	2100      	movs	r1, #0
 800ce6c:	6818      	ldr	r0, [r3, #0]
 800ce6e:	f7fd fe96 	bl	800ab9e <dir_read>
 800ce72:	4603      	mov	r3, r0
 800ce74:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 800ce78:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ce7c:	2b04      	cmp	r3, #4
 800ce7e:	d102      	bne.n	800ce86 <f_readdir+0x70>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 800ce86:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d114      	bne.n	800ceb8 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 800ce8e:	463a      	mov	r2, r7
 800ce90:	1d3b      	adds	r3, r7, #4
 800ce92:	6811      	ldr	r1, [r2, #0]
 800ce94:	6818      	ldr	r0, [r3, #0]
 800ce96:	f7fe f8e1 	bl	800b05c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800ce9a:	1d3b      	adds	r3, r7, #4
 800ce9c:	2100      	movs	r1, #0
 800ce9e:	6818      	ldr	r0, [r3, #0]
 800cea0:	f7fd fb45 	bl	800a52e <dir_next>
 800cea4:	4603      	mov	r3, r0
 800cea6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 800ceaa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800ceae:	2b04      	cmp	r3, #4
 800ceb0:	d102      	bne.n	800ceb8 <f_readdir+0xa2>
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 800ceb8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	f507 7704 	add.w	r7, r7, #528	; 0x210
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800cec6:	b580      	push	{r7, lr}
 800cec8:	b092      	sub	sp, #72	; 0x48
 800ceca:	af00      	add	r7, sp, #0
 800cecc:	60f8      	str	r0, [r7, #12]
 800cece:	60b9      	str	r1, [r7, #8]
 800ced0:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800ced2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800ced6:	f107 030c 	add.w	r3, r7, #12
 800ceda:	2200      	movs	r2, #0
 800cedc:	4618      	mov	r0, r3
 800cede:	f7fe fc5f 	bl	800b7a0 <find_volume>
 800cee2:	4603      	mov	r3, r0
 800cee4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800cee8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f040 8099 	bne.w	800d024 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800cef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800cef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefa:	695a      	ldr	r2, [r3, #20]
 800cefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cefe:	699b      	ldr	r3, [r3, #24]
 800cf00:	3b02      	subs	r3, #2
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d804      	bhi.n	800cf10 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800cf06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf08:	695a      	ldr	r2, [r3, #20]
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	601a      	str	r2, [r3, #0]
 800cf0e:	e089      	b.n	800d024 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800cf10:	2300      	movs	r3, #0
 800cf12:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800cf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf16:	781b      	ldrb	r3, [r3, #0]
 800cf18:	2b01      	cmp	r3, #1
 800cf1a:	d128      	bne.n	800cf6e <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800cf1c:	2302      	movs	r3, #2
 800cf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf22:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800cf24:	f107 0314 	add.w	r3, r7, #20
 800cf28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	f7fc ffbf 	bl	8009eae <get_fat>
 800cf30:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800cf32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf34:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf38:	d103      	bne.n	800cf42 <f_getfree+0x7c>
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf40:	e063      	b.n	800d00a <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800cf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d103      	bne.n	800cf50 <f_getfree+0x8a>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800cf4e:	e05c      	b.n	800d00a <f_getfree+0x144>
					if (stat == 0) nfree++;
 800cf50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d102      	bne.n	800cf5c <f_getfree+0x96>
 800cf56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf58:	3301      	adds	r3, #1
 800cf5a:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800cf5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf5e:	3301      	adds	r3, #1
 800cf60:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf64:	699b      	ldr	r3, [r3, #24]
 800cf66:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cf68:	429a      	cmp	r2, r3
 800cf6a:	d3db      	bcc.n	800cf24 <f_getfree+0x5e>
 800cf6c:	e04d      	b.n	800d00a <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800cf6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf78:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	637b      	str	r3, [r7, #52]	; 0x34
 800cf7e:	2300      	movs	r3, #0
 800cf80:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800cf82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	d113      	bne.n	800cfb0 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800cf88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf8c:	1c5a      	adds	r2, r3, #1
 800cf8e:	63ba      	str	r2, [r7, #56]	; 0x38
 800cf90:	4619      	mov	r1, r3
 800cf92:	f7fc fed1 	bl	8009d38 <move_window>
 800cf96:	4603      	mov	r3, r0
 800cf98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800cf9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d131      	bne.n	800d008 <f_getfree+0x142>
							p = fs->win;
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	3334      	adds	r3, #52	; 0x34
 800cfa8:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800cfaa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfae:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800cfb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	2b02      	cmp	r3, #2
 800cfb6:	d10f      	bne.n	800cfd8 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800cfb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfba:	f7fc fc0d 	bl	80097d8 <ld_word>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d102      	bne.n	800cfca <f_getfree+0x104>
 800cfc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	3302      	adds	r3, #2
 800cfce:	633b      	str	r3, [r7, #48]	; 0x30
 800cfd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfd2:	3b02      	subs	r3, #2
 800cfd4:	637b      	str	r3, [r7, #52]	; 0x34
 800cfd6:	e010      	b.n	800cffa <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800cfd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cfda:	f7fc fc15 	bl	8009808 <ld_dword>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	d102      	bne.n	800cfee <f_getfree+0x128>
 800cfe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfea:	3301      	adds	r3, #1
 800cfec:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	3304      	adds	r3, #4
 800cff2:	633b      	str	r3, [r7, #48]	; 0x30
 800cff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cff6:	3b04      	subs	r3, #4
 800cff8:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800cffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cffc:	3b01      	subs	r3, #1
 800cffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1bd      	bne.n	800cf82 <f_getfree+0xbc>
 800d006:	e000      	b.n	800d00a <f_getfree+0x144>
							if (res != FR_OK) break;
 800d008:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d00e:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800d010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d012:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d014:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	791a      	ldrb	r2, [r3, #4]
 800d01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d01c:	f042 0201 	orr.w	r2, r2, #1
 800d020:	b2d2      	uxtb	r2, r2
 800d022:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800d024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3748      	adds	r7, #72	; 0x48
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}

0800d030 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
 800d038:	460b      	mov	r3, r1
 800d03a:	70fb      	strb	r3, [r7, #3]

	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
		putc_bfd(pb, '\r');
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	685b      	ldr	r3, [r3, #4]
 800d040:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2b00      	cmp	r3, #0
 800d046:	db25      	blt.n	800d094 <putc_bfd+0x64>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	1c5a      	adds	r2, r3, #1
 800d04c:	60fa      	str	r2, [r7, #12]
 800d04e:	687a      	ldr	r2, [r7, #4]
 800d050:	4413      	add	r3, r2
 800d052:	78fa      	ldrb	r2, [r7, #3]
 800d054:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b3c      	cmp	r3, #60	; 0x3c
 800d05a:	dd12      	ble.n	800d082 <putc_bfd+0x52>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6818      	ldr	r0, [r3, #0]
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f103 010c 	add.w	r1, r3, #12
 800d066:	68fa      	ldr	r2, [r7, #12]
 800d068:	f107 0308 	add.w	r3, r7, #8
 800d06c:	f7ff f9e9 	bl	800c442 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 800d070:	68ba      	ldr	r2, [r7, #8]
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	429a      	cmp	r2, r3
 800d076:	d101      	bne.n	800d07c <putc_bfd+0x4c>
 800d078:	2300      	movs	r3, #0
 800d07a:	e001      	b.n	800d080 <putc_bfd+0x50>
 800d07c:	f04f 33ff 	mov.w	r3, #4294967295
 800d080:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	1c5a      	adds	r2, r3, #1
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	609a      	str	r2, [r3, #8]
 800d092:	e000      	b.n	800d096 <putc_bfd+0x66>
	if (i < 0) return;
 800d094:	bf00      	nop
}
 800d096:	3710      	adds	r7, #16
 800d098:	46bd      	mov	sp, r7
 800d09a:	bd80      	pop	{r7, pc}

0800d09c <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	b084      	sub	sp, #16
 800d0a0:	af00      	add	r7, sp, #0
 800d0a2:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	db16      	blt.n	800d0da <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6818      	ldr	r0, [r3, #0]
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f103 010c 	add.w	r1, r3, #12
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	685b      	ldr	r3, [r3, #4]
 800d0ba:	461a      	mov	r2, r3
 800d0bc:	f107 030c 	add.w	r3, r7, #12
 800d0c0:	f7ff f9bf 	bl	800c442 <f_write>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d107      	bne.n	800d0da <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	685b      	ldr	r3, [r3, #4]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d102      	bne.n	800d0da <putc_flush+0x3e>
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	689b      	ldr	r3, [r3, #8]
 800d0d8:	e001      	b.n	800d0de <putc_flush+0x42>
	return EOF;
 800d0da:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3710      	adds	r7, #16
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 800d0e6:	b480      	push	{r7}
 800d0e8:	b083      	sub	sp, #12
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2200      	movs	r2, #0
 800d0fa:	605a      	str	r2, [r3, #4]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	685a      	ldr	r2, [r3, #4]
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	609a      	str	r2, [r3, #8]
}
 800d104:	bf00      	nop
 800d106:	370c      	adds	r7, #12
 800d108:	46bd      	mov	sp, r7
 800d10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10e:	4770      	bx	lr

0800d110 <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
 800d110:	b40e      	push	{r1, r2, r3}
 800d112:	b580      	push	{r7, lr}
 800d114:	b0a7      	sub	sp, #156	; 0x9c
 800d116:	af00      	add	r7, sp, #0
 800d118:	6078      	str	r0, [r7, #4]
	UINT i, j, w;
	DWORD v;
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);
 800d11a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d11e:	6879      	ldr	r1, [r7, #4]
 800d120:	4618      	mov	r0, r3
 800d122:	f7ff ffe0 	bl	800d0e6 <putc_init>

	va_start(arp, fmt);
 800d126:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800d12a:	67bb      	str	r3, [r7, #120]	; 0x78

	for (;;) {
		c = *fmt++;
 800d12c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d130:	1c5a      	adds	r2, r3, #1
 800d132:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == 0) break;			/* End of string */
 800d13c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d140:	2b00      	cmp	r3, #0
 800d142:	f000 81f4 	beq.w	800d52e <f_printf+0x41e>
		if (c != '%') {				/* Non escape character */
 800d146:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d14a:	2b25      	cmp	r3, #37	; 0x25
 800d14c:	d008      	beq.n	800d160 <f_printf+0x50>
			putc_bfd(&pb, c);
 800d14e:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d152:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7ff ff69 	bl	800d030 <putc_bfd>
			continue;
 800d15e:	e1e5      	b.n	800d52c <f_printf+0x41c>
		}
		w = f = 0;
 800d160:	2300      	movs	r3, #0
 800d162:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d166:	2300      	movs	r3, #0
 800d168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
		c = *fmt++;
 800d16c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d170:	1c5a      	adds	r2, r3, #1
 800d172:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d176:	781b      	ldrb	r3, [r3, #0]
 800d178:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		if (c == '0') {				/* Flag: '0' padding */
 800d17c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d180:	2b30      	cmp	r3, #48	; 0x30
 800d182:	d10b      	bne.n	800d19c <f_printf+0x8c>
			f = 1; c = *fmt++;
 800d184:	2301      	movs	r3, #1
 800d186:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d18a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d18e:	1c5a      	adds	r2, r3, #1
 800d190:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d194:	781b      	ldrb	r3, [r3, #0]
 800d196:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
 800d19a:	e024      	b.n	800d1e6 <f_printf+0xd6>
		} else {
			if (c == '-') {			/* Flag: left justified */
 800d19c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d1a0:	2b2d      	cmp	r3, #45	; 0x2d
 800d1a2:	d120      	bne.n	800d1e6 <f_printf+0xd6>
				f = 2; c = *fmt++;
 800d1a4:	2302      	movs	r3, #2
 800d1a6:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d1aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d1ae:	1c5a      	adds	r2, r3, #1
 800d1b0:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			}
		}
		while (IsDigit(c)) {		/* Precision */
 800d1ba:	e014      	b.n	800d1e6 <f_printf+0xd6>
			w = w * 10 + c - '0';
 800d1bc:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d1c0:	4613      	mov	r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	4413      	add	r3, r2
 800d1c6:	005b      	lsls	r3, r3, #1
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d1ce:	4413      	add	r3, r2
 800d1d0:	3b30      	subs	r3, #48	; 0x30
 800d1d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			c = *fmt++;
 800d1d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d1da:	1c5a      	adds	r2, r3, #1
 800d1dc:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		while (IsDigit(c)) {		/* Precision */
 800d1e6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d1ea:	2b2f      	cmp	r3, #47	; 0x2f
 800d1ec:	d903      	bls.n	800d1f6 <f_printf+0xe6>
 800d1ee:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d1f2:	2b39      	cmp	r3, #57	; 0x39
 800d1f4:	d9e2      	bls.n	800d1bc <f_printf+0xac>
		}
		if (c == 'l' || c == 'L') {	/* Prefix: Size is long int */
 800d1f6:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d1fa:	2b6c      	cmp	r3, #108	; 0x6c
 800d1fc:	d003      	beq.n	800d206 <f_printf+0xf6>
 800d1fe:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d202:	2b4c      	cmp	r3, #76	; 0x4c
 800d204:	d10d      	bne.n	800d222 <f_printf+0x112>
			f |= 4; c = *fmt++;
 800d206:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d20a:	f043 0304 	orr.w	r3, r3, #4
 800d20e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800d212:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d216:	1c5a      	adds	r2, r3, #1
 800d218:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800d21c:	781b      	ldrb	r3, [r3, #0]
 800d21e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
		}
		if (!c) break;
 800d222:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d226:	2b00      	cmp	r3, #0
 800d228:	f000 8183 	beq.w	800d532 <f_printf+0x422>
		d = c;
 800d22c:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d230:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		if (IsLower(d)) d -= 0x20;
 800d234:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d238:	2b60      	cmp	r3, #96	; 0x60
 800d23a:	d908      	bls.n	800d24e <f_printf+0x13e>
 800d23c:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d240:	2b7a      	cmp	r3, #122	; 0x7a
 800d242:	d804      	bhi.n	800d24e <f_printf+0x13e>
 800d244:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d248:	3b20      	subs	r3, #32
 800d24a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		switch (d) {				/* Type is... */
 800d24e:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d252:	3b42      	subs	r3, #66	; 0x42
 800d254:	2b16      	cmp	r3, #22
 800d256:	f200 8098 	bhi.w	800d38a <f_printf+0x27a>
 800d25a:	a201      	add	r2, pc, #4	; (adr r2, 800d260 <f_printf+0x150>)
 800d25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d260:	0800d36b 	.word	0x0800d36b
 800d264:	0800d353 	.word	0x0800d353
 800d268:	0800d37b 	.word	0x0800d37b
 800d26c:	0800d38b 	.word	0x0800d38b
 800d270:	0800d38b 	.word	0x0800d38b
 800d274:	0800d38b 	.word	0x0800d38b
 800d278:	0800d38b 	.word	0x0800d38b
 800d27c:	0800d38b 	.word	0x0800d38b
 800d280:	0800d38b 	.word	0x0800d38b
 800d284:	0800d38b 	.word	0x0800d38b
 800d288:	0800d38b 	.word	0x0800d38b
 800d28c:	0800d38b 	.word	0x0800d38b
 800d290:	0800d38b 	.word	0x0800d38b
 800d294:	0800d373 	.word	0x0800d373
 800d298:	0800d38b 	.word	0x0800d38b
 800d29c:	0800d38b 	.word	0x0800d38b
 800d2a0:	0800d38b 	.word	0x0800d38b
 800d2a4:	0800d2bd 	.word	0x0800d2bd
 800d2a8:	0800d38b 	.word	0x0800d38b
 800d2ac:	0800d37b 	.word	0x0800d37b
 800d2b0:	0800d38b 	.word	0x0800d38b
 800d2b4:	0800d38b 	.word	0x0800d38b
 800d2b8:	0800d383 	.word	0x0800d383
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
 800d2bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d2be:	1d1a      	adds	r2, r3, #4
 800d2c0:	67ba      	str	r2, [r7, #120]	; 0x78
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	67fb      	str	r3, [r7, #124]	; 0x7c
			for (j = 0; p[j]; j++) ;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d2cc:	e004      	b.n	800d2d8 <f_printf+0x1c8>
 800d2ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d2d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d2da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d2de:	4413      	add	r3, r2
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d1f3      	bne.n	800d2ce <f_printf+0x1be>
			if (!(f & 2)) {
 800d2e6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d2ea:	f003 0302 	and.w	r3, r3, #2
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d11a      	bne.n	800d328 <f_printf+0x218>
				while (j++ < w) putc_bfd(&pb, ' ');
 800d2f2:	e005      	b.n	800d300 <f_printf+0x1f0>
 800d2f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d2f8:	2120      	movs	r1, #32
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	f7ff fe98 	bl	800d030 <putc_bfd>
 800d300:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d304:	1c5a      	adds	r2, r3, #1
 800d306:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d30a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d30e:	429a      	cmp	r2, r3
 800d310:	d8f0      	bhi.n	800d2f4 <f_printf+0x1e4>
			}
			while (*p) putc_bfd(&pb, *p++);
 800d312:	e009      	b.n	800d328 <f_printf+0x218>
 800d314:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d316:	1c5a      	adds	r2, r3, #1
 800d318:	67fa      	str	r2, [r7, #124]	; 0x7c
 800d31a:	781a      	ldrb	r2, [r3, #0]
 800d31c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d320:	4611      	mov	r1, r2
 800d322:	4618      	mov	r0, r3
 800d324:	f7ff fe84 	bl	800d030 <putc_bfd>
 800d328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d1f1      	bne.n	800d314 <f_printf+0x204>
			while (j++ < w) putc_bfd(&pb, ' ');
 800d330:	e005      	b.n	800d33e <f_printf+0x22e>
 800d332:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d336:	2120      	movs	r1, #32
 800d338:	4618      	mov	r0, r3
 800d33a:	f7ff fe79 	bl	800d030 <putc_bfd>
 800d33e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d342:	1c5a      	adds	r2, r3, #1
 800d344:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d348:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d8f0      	bhi.n	800d332 <f_printf+0x222>
			continue;
 800d350:	e0ec      	b.n	800d52c <f_printf+0x41c>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
 800d352:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d354:	1d1a      	adds	r2, r3, #4
 800d356:	67ba      	str	r2, [r7, #120]	; 0x78
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	b2da      	uxtb	r2, r3
 800d35c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d360:	4611      	mov	r1, r2
 800d362:	4618      	mov	r0, r3
 800d364:	f7ff fe64 	bl	800d030 <putc_bfd>
 800d368:	e0e0      	b.n	800d52c <f_printf+0x41c>

		case 'B' :					/* Binary */
			r = 2; break;
 800d36a:	2302      	movs	r3, #2
 800d36c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d370:	e014      	b.n	800d39c <f_printf+0x28c>

		case 'O' :					/* Octal */
			r = 8; break;
 800d372:	2308      	movs	r3, #8
 800d374:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d378:	e010      	b.n	800d39c <f_printf+0x28c>

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
 800d37a:	230a      	movs	r3, #10
 800d37c:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d380:	e00c      	b.n	800d39c <f_printf+0x28c>

		case 'X' :					/* Hexdecimal */
			r = 16; break;
 800d382:	2310      	movs	r3, #16
 800d384:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
 800d388:	e008      	b.n	800d39c <f_printf+0x28c>

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
 800d38a:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800d38e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f7ff fe4b 	bl	800d030 <putc_bfd>
 800d39a:	e0c7      	b.n	800d52c <f_printf+0x41c>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
 800d39c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d004      	beq.n	800d3b2 <f_printf+0x2a2>
 800d3a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3aa:	1d1a      	adds	r2, r3, #4
 800d3ac:	67ba      	str	r2, [r7, #120]	; 0x78
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	e00c      	b.n	800d3cc <f_printf+0x2bc>
 800d3b2:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d3b6:	2b44      	cmp	r3, #68	; 0x44
 800d3b8:	d104      	bne.n	800d3c4 <f_printf+0x2b4>
 800d3ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3bc:	1d1a      	adds	r2, r3, #4
 800d3be:	67ba      	str	r2, [r7, #120]	; 0x78
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	e003      	b.n	800d3cc <f_printf+0x2bc>
 800d3c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d3c6:	1d1a      	adds	r2, r3, #4
 800d3c8:	67ba      	str	r2, [r7, #120]	; 0x78
 800d3ca:	681b      	ldr	r3, [r3, #0]
 800d3cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		if (d == 'D' && (v & 0x80000000)) {
 800d3d0:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d3d4:	2b44      	cmp	r3, #68	; 0x44
 800d3d6:	d10e      	bne.n	800d3f6 <f_printf+0x2e6>
 800d3d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	da0a      	bge.n	800d3f6 <f_printf+0x2e6>
			v = 0 - v;
 800d3e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d3e4:	425b      	negs	r3, r3
 800d3e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			f |= 8;
 800d3ea:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d3ee:	f043 0308 	orr.w	r3, r3, #8
 800d3f2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		}
		i = 0;
 800d3f6:	2300      	movs	r3, #0
 800d3f8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
		do {
			d = (TCHAR)(v % r); v /= r;
 800d3fc:	f897 2096 	ldrb.w	r2, [r7, #150]	; 0x96
 800d400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d404:	fbb3 f1f2 	udiv	r1, r3, r2
 800d408:	fb02 f201 	mul.w	r2, r2, r1
 800d40c:	1a9b      	subs	r3, r3, r2
 800d40e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 800d412:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800d416:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d41a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d41e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 800d422:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d426:	2b09      	cmp	r3, #9
 800d428:	d90b      	bls.n	800d442 <f_printf+0x332>
 800d42a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800d42e:	2b78      	cmp	r3, #120	; 0x78
 800d430:	d101      	bne.n	800d436 <f_printf+0x326>
 800d432:	2227      	movs	r2, #39	; 0x27
 800d434:	e000      	b.n	800d438 <f_printf+0x328>
 800d436:	2207      	movs	r2, #7
 800d438:	f897 3082 	ldrb.w	r3, [r7, #130]	; 0x82
 800d43c:	4413      	add	r3, r2
 800d43e:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
			str[i++] = d + '0';
 800d442:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d446:	1c5a      	adds	r2, r3, #1
 800d448:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d44c:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d450:	3230      	adds	r2, #48	; 0x30
 800d452:	b2d2      	uxtb	r2, r2
 800d454:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800d458:	440b      	add	r3, r1
 800d45a:	f803 2c8c 	strb.w	r2, [r3, #-140]
		} while (v && i < sizeof str / sizeof str[0]);
 800d45e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d462:	2b00      	cmp	r3, #0
 800d464:	d003      	beq.n	800d46e <f_printf+0x35e>
 800d466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d46a:	2b1f      	cmp	r3, #31
 800d46c:	d9c6      	bls.n	800d3fc <f_printf+0x2ec>
		if (f & 8) str[i++] = '-';
 800d46e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d472:	f003 0308 	and.w	r3, r3, #8
 800d476:	2b00      	cmp	r3, #0
 800d478:	d00a      	beq.n	800d490 <f_printf+0x380>
 800d47a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800d484:	f107 0298 	add.w	r2, r7, #152	; 0x98
 800d488:	4413      	add	r3, r2
 800d48a:	222d      	movs	r2, #45	; 0x2d
 800d48c:	f803 2c8c 	strb.w	r2, [r3, #-140]
		j = i; d = (f & 1) ? '0' : ' ';
 800d490:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d498:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d49c:	f003 0301 	and.w	r3, r3, #1
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d001      	beq.n	800d4a8 <f_printf+0x398>
 800d4a4:	2330      	movs	r3, #48	; 0x30
 800d4a6:	e000      	b.n	800d4aa <f_printf+0x39a>
 800d4a8:	2320      	movs	r3, #32
 800d4aa:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
 800d4ae:	e007      	b.n	800d4c0 <f_printf+0x3b0>
 800d4b0:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d4b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7ff fdb8 	bl	800d030 <putc_bfd>
 800d4c0:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800d4c4:	f003 0302 	and.w	r3, r3, #2
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d108      	bne.n	800d4de <f_printf+0x3ce>
 800d4cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d4d0:	1c5a      	adds	r2, r3, #1
 800d4d2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d4d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d4da:	429a      	cmp	r2, r3
 800d4dc:	d8e8      	bhi.n	800d4b0 <f_printf+0x3a0>
		do {
			putc_bfd(&pb, str[--i]);
 800d4de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4e2:	3b01      	subs	r3, #1
 800d4e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d4e8:	f107 020c 	add.w	r2, r7, #12
 800d4ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d4f0:	4413      	add	r3, r2
 800d4f2:	781a      	ldrb	r2, [r3, #0]
 800d4f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d4f8:	4611      	mov	r1, r2
 800d4fa:	4618      	mov	r0, r3
 800d4fc:	f7ff fd98 	bl	800d030 <putc_bfd>
		} while (i);
 800d500:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1ea      	bne.n	800d4de <f_printf+0x3ce>
		while (j++ < w) putc_bfd(&pb, d);
 800d508:	e007      	b.n	800d51a <f_printf+0x40a>
 800d50a:	f897 2082 	ldrb.w	r2, [r7, #130]	; 0x82
 800d50e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d512:	4611      	mov	r1, r2
 800d514:	4618      	mov	r0, r3
 800d516:	f7ff fd8b 	bl	800d030 <putc_bfd>
 800d51a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d51e:	1c5a      	adds	r2, r3, #1
 800d520:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800d524:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d528:	429a      	cmp	r2, r3
 800d52a:	d8ee      	bhi.n	800d50a <f_printf+0x3fa>
		c = *fmt++;
 800d52c:	e5fe      	b.n	800d12c <f_printf+0x1c>
		if (c == 0) break;			/* End of string */
 800d52e:	bf00      	nop
 800d530:	e000      	b.n	800d534 <f_printf+0x424>
		if (!c) break;
 800d532:	bf00      	nop
	}

	va_end(arp);

	return putc_flush(&pb);
 800d534:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d538:	4618      	mov	r0, r3
 800d53a:	f7ff fdaf 	bl	800d09c <putc_flush>
 800d53e:	4603      	mov	r3, r0
}
 800d540:	4618      	mov	r0, r3
 800d542:	379c      	adds	r7, #156	; 0x9c
 800d544:	46bd      	mov	sp, r7
 800d546:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d54a:	b003      	add	sp, #12
 800d54c:	4770      	bx	lr
 800d54e:	bf00      	nop

0800d550 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d550:	b480      	push	{r7}
 800d552:	b087      	sub	sp, #28
 800d554:	af00      	add	r7, sp, #0
 800d556:	60f8      	str	r0, [r7, #12]
 800d558:	60b9      	str	r1, [r7, #8]
 800d55a:	4613      	mov	r3, r2
 800d55c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d55e:	2301      	movs	r3, #1
 800d560:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d566:	4b1f      	ldr	r3, [pc, #124]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d568:	7b9b      	ldrb	r3, [r3, #14]
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b01      	cmp	r3, #1
 800d56e:	d831      	bhi.n	800d5d4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d570:	4b1c      	ldr	r3, [pc, #112]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d572:	7b9b      	ldrb	r3, [r3, #14]
 800d574:	b2db      	uxtb	r3, r3
 800d576:	461a      	mov	r2, r3
 800d578:	4b1a      	ldr	r3, [pc, #104]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d57a:	2100      	movs	r1, #0
 800d57c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d57e:	4b19      	ldr	r3, [pc, #100]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d580:	7b9b      	ldrb	r3, [r3, #14]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	4a17      	ldr	r2, [pc, #92]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d586:	009b      	lsls	r3, r3, #2
 800d588:	4413      	add	r3, r2
 800d58a:	68fa      	ldr	r2, [r7, #12]
 800d58c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d58e:	4b15      	ldr	r3, [pc, #84]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d590:	7b9b      	ldrb	r3, [r3, #14]
 800d592:	b2db      	uxtb	r3, r3
 800d594:	461a      	mov	r2, r3
 800d596:	4b13      	ldr	r3, [pc, #76]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d598:	4413      	add	r3, r2
 800d59a:	79fa      	ldrb	r2, [r7, #7]
 800d59c:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 800d59e:	4b11      	ldr	r3, [pc, #68]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d5a0:	7b9b      	ldrb	r3, [r3, #14]
 800d5a2:	b2db      	uxtb	r3, r3
 800d5a4:	1c5a      	adds	r2, r3, #1
 800d5a6:	b2d1      	uxtb	r1, r2
 800d5a8:	4a0e      	ldr	r2, [pc, #56]	; (800d5e4 <FATFS_LinkDriverEx+0x94>)
 800d5aa:	7391      	strb	r1, [r2, #14]
 800d5ac:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d5ae:	7dbb      	ldrb	r3, [r7, #22]
 800d5b0:	3330      	adds	r3, #48	; 0x30
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	223a      	movs	r2, #58	; 0x3a
 800d5be:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	3302      	adds	r3, #2
 800d5c4:	222f      	movs	r2, #47	; 0x2f
 800d5c6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d5c8:	68bb      	ldr	r3, [r7, #8]
 800d5ca:	3303      	adds	r3, #3
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	371c      	adds	r7, #28
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e0:	4770      	bx	lr
 800d5e2:	bf00      	nop
 800d5e4:	20006c94 	.word	0x20006c94

0800d5e8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	6839      	ldr	r1, [r7, #0]
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f7ff ffaa 	bl	800d550 <FATFS_LinkDriverEx>
 800d5fc:	4603      	mov	r3, r0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}
	...

0800d608 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800d608:	b480      	push	{r7}
 800d60a:	b085      	sub	sp, #20
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	4603      	mov	r3, r0
 800d610:	6039      	str	r1, [r7, #0]
 800d612:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800d614:	88fb      	ldrh	r3, [r7, #6]
 800d616:	2b7f      	cmp	r3, #127	; 0x7f
 800d618:	d802      	bhi.n	800d620 <ff_convert+0x18>
		c = chr;
 800d61a:	88fb      	ldrh	r3, [r7, #6]
 800d61c:	81fb      	strh	r3, [r7, #14]
 800d61e:	e025      	b.n	800d66c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d00b      	beq.n	800d63e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800d626:	88fb      	ldrh	r3, [r7, #6]
 800d628:	2bff      	cmp	r3, #255	; 0xff
 800d62a:	d805      	bhi.n	800d638 <ff_convert+0x30>
 800d62c:	88fb      	ldrh	r3, [r7, #6]
 800d62e:	3b80      	subs	r3, #128	; 0x80
 800d630:	4a12      	ldr	r2, [pc, #72]	; (800d67c <ff_convert+0x74>)
 800d632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d636:	e000      	b.n	800d63a <ff_convert+0x32>
 800d638:	2300      	movs	r3, #0
 800d63a:	81fb      	strh	r3, [r7, #14]
 800d63c:	e016      	b.n	800d66c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800d63e:	2300      	movs	r3, #0
 800d640:	81fb      	strh	r3, [r7, #14]
 800d642:	e009      	b.n	800d658 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800d644:	89fb      	ldrh	r3, [r7, #14]
 800d646:	4a0d      	ldr	r2, [pc, #52]	; (800d67c <ff_convert+0x74>)
 800d648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d64c:	88fa      	ldrh	r2, [r7, #6]
 800d64e:	429a      	cmp	r2, r3
 800d650:	d006      	beq.n	800d660 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	3301      	adds	r3, #1
 800d656:	81fb      	strh	r3, [r7, #14]
 800d658:	89fb      	ldrh	r3, [r7, #14]
 800d65a:	2b7f      	cmp	r3, #127	; 0x7f
 800d65c:	d9f2      	bls.n	800d644 <ff_convert+0x3c>
 800d65e:	e000      	b.n	800d662 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800d660:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800d662:	89fb      	ldrh	r3, [r7, #14]
 800d664:	3380      	adds	r3, #128	; 0x80
 800d666:	b29b      	uxth	r3, r3
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800d66c:	89fb      	ldrh	r3, [r7, #14]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3714      	adds	r7, #20
 800d672:	46bd      	mov	sp, r7
 800d674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d678:	4770      	bx	lr
 800d67a:	bf00      	nop
 800d67c:	080224b4 	.word	0x080224b4

0800d680 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800d680:	b480      	push	{r7}
 800d682:	b087      	sub	sp, #28
 800d684:	af00      	add	r7, sp, #0
 800d686:	4603      	mov	r3, r0
 800d688:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800d68a:	88fb      	ldrh	r3, [r7, #6]
 800d68c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d690:	d201      	bcs.n	800d696 <ff_wtoupper+0x16>
 800d692:	4b3e      	ldr	r3, [pc, #248]	; (800d78c <ff_wtoupper+0x10c>)
 800d694:	e000      	b.n	800d698 <ff_wtoupper+0x18>
 800d696:	4b3e      	ldr	r3, [pc, #248]	; (800d790 <ff_wtoupper+0x110>)
 800d698:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	1c9a      	adds	r2, r3, #2
 800d69e:	617a      	str	r2, [r7, #20]
 800d6a0:	881b      	ldrh	r3, [r3, #0]
 800d6a2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800d6a4:	8a7b      	ldrh	r3, [r7, #18]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d068      	beq.n	800d77c <ff_wtoupper+0xfc>
 800d6aa:	88fa      	ldrh	r2, [r7, #6]
 800d6ac:	8a7b      	ldrh	r3, [r7, #18]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d364      	bcc.n	800d77c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800d6b2:	697b      	ldr	r3, [r7, #20]
 800d6b4:	1c9a      	adds	r2, r3, #2
 800d6b6:	617a      	str	r2, [r7, #20]
 800d6b8:	881b      	ldrh	r3, [r3, #0]
 800d6ba:	823b      	strh	r3, [r7, #16]
 800d6bc:	8a3b      	ldrh	r3, [r7, #16]
 800d6be:	0a1b      	lsrs	r3, r3, #8
 800d6c0:	81fb      	strh	r3, [r7, #14]
 800d6c2:	8a3b      	ldrh	r3, [r7, #16]
 800d6c4:	b2db      	uxtb	r3, r3
 800d6c6:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800d6c8:	88fa      	ldrh	r2, [r7, #6]
 800d6ca:	8a79      	ldrh	r1, [r7, #18]
 800d6cc:	8a3b      	ldrh	r3, [r7, #16]
 800d6ce:	440b      	add	r3, r1
 800d6d0:	429a      	cmp	r2, r3
 800d6d2:	da49      	bge.n	800d768 <ff_wtoupper+0xe8>
			switch (cmd) {
 800d6d4:	89fb      	ldrh	r3, [r7, #14]
 800d6d6:	2b08      	cmp	r3, #8
 800d6d8:	d84f      	bhi.n	800d77a <ff_wtoupper+0xfa>
 800d6da:	a201      	add	r2, pc, #4	; (adr r2, 800d6e0 <ff_wtoupper+0x60>)
 800d6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e0:	0800d705 	.word	0x0800d705
 800d6e4:	0800d717 	.word	0x0800d717
 800d6e8:	0800d72d 	.word	0x0800d72d
 800d6ec:	0800d735 	.word	0x0800d735
 800d6f0:	0800d73d 	.word	0x0800d73d
 800d6f4:	0800d745 	.word	0x0800d745
 800d6f8:	0800d74d 	.word	0x0800d74d
 800d6fc:	0800d755 	.word	0x0800d755
 800d700:	0800d75d 	.word	0x0800d75d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800d704:	88fa      	ldrh	r2, [r7, #6]
 800d706:	8a7b      	ldrh	r3, [r7, #18]
 800d708:	1ad3      	subs	r3, r2, r3
 800d70a:	005b      	lsls	r3, r3, #1
 800d70c:	697a      	ldr	r2, [r7, #20]
 800d70e:	4413      	add	r3, r2
 800d710:	881b      	ldrh	r3, [r3, #0]
 800d712:	80fb      	strh	r3, [r7, #6]
 800d714:	e027      	b.n	800d766 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800d716:	88fa      	ldrh	r2, [r7, #6]
 800d718:	8a7b      	ldrh	r3, [r7, #18]
 800d71a:	1ad3      	subs	r3, r2, r3
 800d71c:	b29b      	uxth	r3, r3
 800d71e:	f003 0301 	and.w	r3, r3, #1
 800d722:	b29b      	uxth	r3, r3
 800d724:	88fa      	ldrh	r2, [r7, #6]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	80fb      	strh	r3, [r7, #6]
 800d72a:	e01c      	b.n	800d766 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800d72c:	88fb      	ldrh	r3, [r7, #6]
 800d72e:	3b10      	subs	r3, #16
 800d730:	80fb      	strh	r3, [r7, #6]
 800d732:	e018      	b.n	800d766 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800d734:	88fb      	ldrh	r3, [r7, #6]
 800d736:	3b20      	subs	r3, #32
 800d738:	80fb      	strh	r3, [r7, #6]
 800d73a:	e014      	b.n	800d766 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800d73c:	88fb      	ldrh	r3, [r7, #6]
 800d73e:	3b30      	subs	r3, #48	; 0x30
 800d740:	80fb      	strh	r3, [r7, #6]
 800d742:	e010      	b.n	800d766 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800d744:	88fb      	ldrh	r3, [r7, #6]
 800d746:	3b1a      	subs	r3, #26
 800d748:	80fb      	strh	r3, [r7, #6]
 800d74a:	e00c      	b.n	800d766 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800d74c:	88fb      	ldrh	r3, [r7, #6]
 800d74e:	3308      	adds	r3, #8
 800d750:	80fb      	strh	r3, [r7, #6]
 800d752:	e008      	b.n	800d766 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800d754:	88fb      	ldrh	r3, [r7, #6]
 800d756:	3b50      	subs	r3, #80	; 0x50
 800d758:	80fb      	strh	r3, [r7, #6]
 800d75a:	e004      	b.n	800d766 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800d75c:	88fb      	ldrh	r3, [r7, #6]
 800d75e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800d762:	80fb      	strh	r3, [r7, #6]
 800d764:	bf00      	nop
			}
			break;
 800d766:	e008      	b.n	800d77a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800d768:	89fb      	ldrh	r3, [r7, #14]
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d195      	bne.n	800d69a <ff_wtoupper+0x1a>
 800d76e:	8a3b      	ldrh	r3, [r7, #16]
 800d770:	005b      	lsls	r3, r3, #1
 800d772:	697a      	ldr	r2, [r7, #20]
 800d774:	4413      	add	r3, r2
 800d776:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800d778:	e78f      	b.n	800d69a <ff_wtoupper+0x1a>
			break;
 800d77a:	bf00      	nop
	}

	return chr;
 800d77c:	88fb      	ldrh	r3, [r7, #6]
}
 800d77e:	4618      	mov	r0, r3
 800d780:	371c      	adds	r7, #28
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr
 800d78a:	bf00      	nop
 800d78c:	080225b4 	.word	0x080225b4
 800d790:	080227a8 	.word	0x080227a8

0800d794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800d798:	4b0e      	ldr	r3, [pc, #56]	; (800d7d4 <HAL_Init+0x40>)
 800d79a:	681b      	ldr	r3, [r3, #0]
 800d79c:	4a0d      	ldr	r2, [pc, #52]	; (800d7d4 <HAL_Init+0x40>)
 800d79e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d7a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800d7a4:	4b0b      	ldr	r3, [pc, #44]	; (800d7d4 <HAL_Init+0x40>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	4a0a      	ldr	r2, [pc, #40]	; (800d7d4 <HAL_Init+0x40>)
 800d7aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800d7ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800d7b0:	4b08      	ldr	r3, [pc, #32]	; (800d7d4 <HAL_Init+0x40>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	4a07      	ldr	r2, [pc, #28]	; (800d7d4 <HAL_Init+0x40>)
 800d7b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d7ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d7bc:	2003      	movs	r0, #3
 800d7be:	f000 f94f 	bl	800da60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800d7c2:	2000      	movs	r0, #0
 800d7c4:	f000 f808 	bl	800d7d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800d7c8:	f7f3 fcea 	bl	80011a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800d7cc:	2300      	movs	r3, #0
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	bd80      	pop	{r7, pc}
 800d7d2:	bf00      	nop
 800d7d4:	40023c00 	.word	0x40023c00

0800d7d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800d7e0:	4b12      	ldr	r3, [pc, #72]	; (800d82c <HAL_InitTick+0x54>)
 800d7e2:	681a      	ldr	r2, [r3, #0]
 800d7e4:	4b12      	ldr	r3, [pc, #72]	; (800d830 <HAL_InitTick+0x58>)
 800d7e6:	781b      	ldrb	r3, [r3, #0]
 800d7e8:	4619      	mov	r1, r3
 800d7ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d7ee:	fbb3 f3f1 	udiv	r3, r3, r1
 800d7f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f000 f967 	bl	800daca <HAL_SYSTICK_Config>
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d001      	beq.n	800d806 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800d802:	2301      	movs	r3, #1
 800d804:	e00e      	b.n	800d824 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2b0f      	cmp	r3, #15
 800d80a:	d80a      	bhi.n	800d822 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d80c:	2200      	movs	r2, #0
 800d80e:	6879      	ldr	r1, [r7, #4]
 800d810:	f04f 30ff 	mov.w	r0, #4294967295
 800d814:	f000 f92f 	bl	800da76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800d818:	4a06      	ldr	r2, [pc, #24]	; (800d834 <HAL_InitTick+0x5c>)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800d81e:	2300      	movs	r3, #0
 800d820:	e000      	b.n	800d824 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800d822:	2301      	movs	r3, #1
}
 800d824:	4618      	mov	r0, r3
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	20000000 	.word	0x20000000
 800d830:	2000036c 	.word	0x2000036c
 800d834:	20000368 	.word	0x20000368

0800d838 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d838:	b480      	push	{r7}
 800d83a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d83c:	4b06      	ldr	r3, [pc, #24]	; (800d858 <HAL_IncTick+0x20>)
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	461a      	mov	r2, r3
 800d842:	4b06      	ldr	r3, [pc, #24]	; (800d85c <HAL_IncTick+0x24>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	4413      	add	r3, r2
 800d848:	4a04      	ldr	r2, [pc, #16]	; (800d85c <HAL_IncTick+0x24>)
 800d84a:	6013      	str	r3, [r2, #0]
}
 800d84c:	bf00      	nop
 800d84e:	46bd      	mov	sp, r7
 800d850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d854:	4770      	bx	lr
 800d856:	bf00      	nop
 800d858:	2000036c 	.word	0x2000036c
 800d85c:	20008908 	.word	0x20008908

0800d860 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d860:	b480      	push	{r7}
 800d862:	af00      	add	r7, sp, #0
  return uwTick;
 800d864:	4b03      	ldr	r3, [pc, #12]	; (800d874 <HAL_GetTick+0x14>)
 800d866:	681b      	ldr	r3, [r3, #0]
}
 800d868:	4618      	mov	r0, r3
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	20008908 	.word	0x20008908

0800d878 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d880:	f7ff ffee 	bl	800d860 <HAL_GetTick>
 800d884:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d890:	d005      	beq.n	800d89e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d892:	4b0a      	ldr	r3, [pc, #40]	; (800d8bc <HAL_Delay+0x44>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	68fb      	ldr	r3, [r7, #12]
 800d89a:	4413      	add	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d89e:	bf00      	nop
 800d8a0:	f7ff ffde 	bl	800d860 <HAL_GetTick>
 800d8a4:	4602      	mov	r2, r0
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	1ad3      	subs	r3, r2, r3
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d8f7      	bhi.n	800d8a0 <HAL_Delay+0x28>
  {
  }
}
 800d8b0:	bf00      	nop
 800d8b2:	bf00      	nop
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2000036c 	.word	0x2000036c

0800d8c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b085      	sub	sp, #20
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d8d0:	4b0c      	ldr	r3, [pc, #48]	; (800d904 <__NVIC_SetPriorityGrouping+0x44>)
 800d8d2:	68db      	ldr	r3, [r3, #12]
 800d8d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d8dc:	4013      	ands	r3, r2
 800d8de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d8e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d8ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d8f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d8f2:	4a04      	ldr	r2, [pc, #16]	; (800d904 <__NVIC_SetPriorityGrouping+0x44>)
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	60d3      	str	r3, [r2, #12]
}
 800d8f8:	bf00      	nop
 800d8fa:	3714      	adds	r7, #20
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	e000ed00 	.word	0xe000ed00

0800d908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d908:	b480      	push	{r7}
 800d90a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d90c:	4b04      	ldr	r3, [pc, #16]	; (800d920 <__NVIC_GetPriorityGrouping+0x18>)
 800d90e:	68db      	ldr	r3, [r3, #12]
 800d910:	0a1b      	lsrs	r3, r3, #8
 800d912:	f003 0307 	and.w	r3, r3, #7
}
 800d916:	4618      	mov	r0, r3
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	e000ed00 	.word	0xe000ed00

0800d924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	4603      	mov	r3, r0
 800d92c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d92e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d932:	2b00      	cmp	r3, #0
 800d934:	db0b      	blt.n	800d94e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d936:	79fb      	ldrb	r3, [r7, #7]
 800d938:	f003 021f 	and.w	r2, r3, #31
 800d93c:	4907      	ldr	r1, [pc, #28]	; (800d95c <__NVIC_EnableIRQ+0x38>)
 800d93e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d942:	095b      	lsrs	r3, r3, #5
 800d944:	2001      	movs	r0, #1
 800d946:	fa00 f202 	lsl.w	r2, r0, r2
 800d94a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	e000e100 	.word	0xe000e100

0800d960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d960:	b480      	push	{r7}
 800d962:	b083      	sub	sp, #12
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	6039      	str	r1, [r7, #0]
 800d96a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d96c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d970:	2b00      	cmp	r3, #0
 800d972:	db0a      	blt.n	800d98a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d974:	683b      	ldr	r3, [r7, #0]
 800d976:	b2da      	uxtb	r2, r3
 800d978:	490c      	ldr	r1, [pc, #48]	; (800d9ac <__NVIC_SetPriority+0x4c>)
 800d97a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d97e:	0112      	lsls	r2, r2, #4
 800d980:	b2d2      	uxtb	r2, r2
 800d982:	440b      	add	r3, r1
 800d984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800d988:	e00a      	b.n	800d9a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	4908      	ldr	r1, [pc, #32]	; (800d9b0 <__NVIC_SetPriority+0x50>)
 800d990:	79fb      	ldrb	r3, [r7, #7]
 800d992:	f003 030f 	and.w	r3, r3, #15
 800d996:	3b04      	subs	r3, #4
 800d998:	0112      	lsls	r2, r2, #4
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	440b      	add	r3, r1
 800d99e:	761a      	strb	r2, [r3, #24]
}
 800d9a0:	bf00      	nop
 800d9a2:	370c      	adds	r7, #12
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr
 800d9ac:	e000e100 	.word	0xe000e100
 800d9b0:	e000ed00 	.word	0xe000ed00

0800d9b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b089      	sub	sp, #36	; 0x24
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	f1c3 0307 	rsb	r3, r3, #7
 800d9ce:	2b04      	cmp	r3, #4
 800d9d0:	bf28      	it	cs
 800d9d2:	2304      	movcs	r3, #4
 800d9d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	3304      	adds	r3, #4
 800d9da:	2b06      	cmp	r3, #6
 800d9dc:	d902      	bls.n	800d9e4 <NVIC_EncodePriority+0x30>
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	3b03      	subs	r3, #3
 800d9e2:	e000      	b.n	800d9e6 <NVIC_EncodePriority+0x32>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800d9e8:	f04f 32ff 	mov.w	r2, #4294967295
 800d9ec:	69bb      	ldr	r3, [r7, #24]
 800d9ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f2:	43da      	mvns	r2, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	401a      	ands	r2, r3
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800d9fc:	f04f 31ff 	mov.w	r1, #4294967295
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	fa01 f303 	lsl.w	r3, r1, r3
 800da06:	43d9      	mvns	r1, r3
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da0c:	4313      	orrs	r3, r2
         );
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3724      	adds	r7, #36	; 0x24
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr
	...

0800da1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800da1c:	b580      	push	{r7, lr}
 800da1e:	b082      	sub	sp, #8
 800da20:	af00      	add	r7, sp, #0
 800da22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	3b01      	subs	r3, #1
 800da28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800da2c:	d301      	bcc.n	800da32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800da2e:	2301      	movs	r3, #1
 800da30:	e00f      	b.n	800da52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800da32:	4a0a      	ldr	r2, [pc, #40]	; (800da5c <SysTick_Config+0x40>)
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	3b01      	subs	r3, #1
 800da38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800da3a:	210f      	movs	r1, #15
 800da3c:	f04f 30ff 	mov.w	r0, #4294967295
 800da40:	f7ff ff8e 	bl	800d960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800da44:	4b05      	ldr	r3, [pc, #20]	; (800da5c <SysTick_Config+0x40>)
 800da46:	2200      	movs	r2, #0
 800da48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800da4a:	4b04      	ldr	r3, [pc, #16]	; (800da5c <SysTick_Config+0x40>)
 800da4c:	2207      	movs	r2, #7
 800da4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800da50:	2300      	movs	r3, #0
}
 800da52:	4618      	mov	r0, r3
 800da54:	3708      	adds	r7, #8
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}
 800da5a:	bf00      	nop
 800da5c:	e000e010 	.word	0xe000e010

0800da60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800da60:	b580      	push	{r7, lr}
 800da62:	b082      	sub	sp, #8
 800da64:	af00      	add	r7, sp, #0
 800da66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800da68:	6878      	ldr	r0, [r7, #4]
 800da6a:	f7ff ff29 	bl	800d8c0 <__NVIC_SetPriorityGrouping>
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800da76:	b580      	push	{r7, lr}
 800da78:	b086      	sub	sp, #24
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	4603      	mov	r3, r0
 800da7e:	60b9      	str	r1, [r7, #8]
 800da80:	607a      	str	r2, [r7, #4]
 800da82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800da84:	2300      	movs	r3, #0
 800da86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800da88:	f7ff ff3e 	bl	800d908 <__NVIC_GetPriorityGrouping>
 800da8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800da8e:	687a      	ldr	r2, [r7, #4]
 800da90:	68b9      	ldr	r1, [r7, #8]
 800da92:	6978      	ldr	r0, [r7, #20]
 800da94:	f7ff ff8e 	bl	800d9b4 <NVIC_EncodePriority>
 800da98:	4602      	mov	r2, r0
 800da9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da9e:	4611      	mov	r1, r2
 800daa0:	4618      	mov	r0, r3
 800daa2:	f7ff ff5d 	bl	800d960 <__NVIC_SetPriority>
}
 800daa6:	bf00      	nop
 800daa8:	3718      	adds	r7, #24
 800daaa:	46bd      	mov	sp, r7
 800daac:	bd80      	pop	{r7, pc}

0800daae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800daae:	b580      	push	{r7, lr}
 800dab0:	b082      	sub	sp, #8
 800dab2:	af00      	add	r7, sp, #0
 800dab4:	4603      	mov	r3, r0
 800dab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800dab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dabc:	4618      	mov	r0, r3
 800dabe:	f7ff ff31 	bl	800d924 <__NVIC_EnableIRQ>
}
 800dac2:	bf00      	nop
 800dac4:	3708      	adds	r7, #8
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}

0800daca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800daca:	b580      	push	{r7, lr}
 800dacc:	b082      	sub	sp, #8
 800dace:	af00      	add	r7, sp, #0
 800dad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800dad2:	6878      	ldr	r0, [r7, #4]
 800dad4:	f7ff ffa2 	bl	800da1c <SysTick_Config>
 800dad8:	4603      	mov	r3, r0
}
 800dada:	4618      	mov	r0, r3
 800dadc:	3708      	adds	r7, #8
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
	...

0800dae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800dae4:	b580      	push	{r7, lr}
 800dae6:	b086      	sub	sp, #24
 800dae8:	af00      	add	r7, sp, #0
 800daea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800daf0:	f7ff feb6 	bl	800d860 <HAL_GetTick>
 800daf4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d101      	bne.n	800db00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e099      	b.n	800dc34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2202      	movs	r2, #2
 800db0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f022 0201 	bic.w	r2, r2, #1
 800db1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db20:	e00f      	b.n	800db42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800db22:	f7ff fe9d 	bl	800d860 <HAL_GetTick>
 800db26:	4602      	mov	r2, r0
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	1ad3      	subs	r3, r2, r3
 800db2c:	2b05      	cmp	r3, #5
 800db2e:	d908      	bls.n	800db42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	2220      	movs	r2, #32
 800db34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2203      	movs	r2, #3
 800db3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800db3e:	2303      	movs	r3, #3
 800db40:	e078      	b.n	800dc34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	f003 0301 	and.w	r3, r3, #1
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d1e8      	bne.n	800db22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800db58:	697a      	ldr	r2, [r7, #20]
 800db5a:	4b38      	ldr	r3, [pc, #224]	; (800dc3c <HAL_DMA_Init+0x158>)
 800db5c:	4013      	ands	r3, r2
 800db5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	685a      	ldr	r2, [r3, #4]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	689b      	ldr	r3, [r3, #8]
 800db68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800db6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	691b      	ldr	r3, [r3, #16]
 800db74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800db7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	699b      	ldr	r3, [r3, #24]
 800db80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800db86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800db8e:	697a      	ldr	r2, [r7, #20]
 800db90:	4313      	orrs	r3, r2
 800db92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db98:	2b04      	cmp	r3, #4
 800db9a:	d107      	bne.n	800dbac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dba4:	4313      	orrs	r3, r2
 800dba6:	697a      	ldr	r2, [r7, #20]
 800dba8:	4313      	orrs	r3, r2
 800dbaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	697a      	ldr	r2, [r7, #20]
 800dbb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	695b      	ldr	r3, [r3, #20]
 800dbba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800dbbc:	697b      	ldr	r3, [r7, #20]
 800dbbe:	f023 0307 	bic.w	r3, r3, #7
 800dbc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	697a      	ldr	r2, [r7, #20]
 800dbca:	4313      	orrs	r3, r2
 800dbcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd2:	2b04      	cmp	r3, #4
 800dbd4:	d117      	bne.n	800dc06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbda:	697a      	ldr	r2, [r7, #20]
 800dbdc:	4313      	orrs	r3, r2
 800dbde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d00e      	beq.n	800dc06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800dbe8:	6878      	ldr	r0, [r7, #4]
 800dbea:	f000 fa9d 	bl	800e128 <DMA_CheckFifoParam>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d008      	beq.n	800dc06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2240      	movs	r2, #64	; 0x40
 800dbf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800dc02:	2301      	movs	r3, #1
 800dc04:	e016      	b.n	800dc34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	697a      	ldr	r2, [r7, #20]
 800dc0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 fa54 	bl	800e0bc <DMA_CalcBaseAndBitshift>
 800dc14:	4603      	mov	r3, r0
 800dc16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc1c:	223f      	movs	r2, #63	; 0x3f
 800dc1e:	409a      	lsls	r2, r3
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2200      	movs	r2, #0
 800dc28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2201      	movs	r2, #1
 800dc2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800dc32:	2300      	movs	r3, #0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3718      	adds	r7, #24
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}
 800dc3c:	f010803f 	.word	0xf010803f

0800dc40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b086      	sub	sp, #24
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d101      	bne.n	800dc66 <HAL_DMA_Start_IT+0x26>
 800dc62:	2302      	movs	r3, #2
 800dc64:	e040      	b.n	800dce8 <HAL_DMA_Start_IT+0xa8>
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2201      	movs	r2, #1
 800dc6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b01      	cmp	r3, #1
 800dc78:	d12f      	bne.n	800dcda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	2200      	movs	r2, #0
 800dc86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	68b9      	ldr	r1, [r7, #8]
 800dc8e:	68f8      	ldr	r0, [r7, #12]
 800dc90:	f000 f9e6 	bl	800e060 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dc98:	223f      	movs	r2, #63	; 0x3f
 800dc9a:	409a      	lsls	r2, r3
 800dc9c:	693b      	ldr	r3, [r7, #16]
 800dc9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	f042 0216 	orr.w	r2, r2, #22
 800dcae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d007      	beq.n	800dcc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	681a      	ldr	r2, [r3, #0]
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	681b      	ldr	r3, [r3, #0]
 800dcc2:	f042 0208 	orr.w	r2, r2, #8
 800dcc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	681a      	ldr	r2, [r3, #0]
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	f042 0201 	orr.w	r2, r2, #1
 800dcd6:	601a      	str	r2, [r3, #0]
 800dcd8:	e005      	b.n	800dce6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800dce2:	2302      	movs	r3, #2
 800dce4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800dce6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3718      	adds	r7, #24
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd80      	pop	{r7, pc}

0800dcf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800dcf0:	b480      	push	{r7}
 800dcf2:	b083      	sub	sp, #12
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d004      	beq.n	800dd0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2280      	movs	r2, #128	; 0x80
 800dd08:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800dd0a:	2301      	movs	r3, #1
 800dd0c:	e00c      	b.n	800dd28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2205      	movs	r2, #5
 800dd12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	f022 0201 	bic.w	r2, r2, #1
 800dd24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	370c      	adds	r7, #12
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd32:	4770      	bx	lr

0800dd34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b086      	sub	sp, #24
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800dd40:	4b92      	ldr	r3, [pc, #584]	; (800df8c <HAL_DMA_IRQHandler+0x258>)
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	4a92      	ldr	r2, [pc, #584]	; (800df90 <HAL_DMA_IRQHandler+0x25c>)
 800dd46:	fba2 2303 	umull	r2, r3, r2, r3
 800dd4a:	0a9b      	lsrs	r3, r3, #10
 800dd4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dd52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800dd54:	693b      	ldr	r3, [r7, #16]
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd5e:	2208      	movs	r2, #8
 800dd60:	409a      	lsls	r2, r3
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	4013      	ands	r3, r2
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d01a      	beq.n	800dda0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f003 0304 	and.w	r3, r3, #4
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d013      	beq.n	800dda0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	681a      	ldr	r2, [r3, #0]
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	f022 0204 	bic.w	r2, r2, #4
 800dd86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dd8c:	2208      	movs	r2, #8
 800dd8e:	409a      	lsls	r2, r3
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd98:	f043 0201 	orr.w	r2, r3, #1
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dda4:	2201      	movs	r2, #1
 800dda6:	409a      	lsls	r2, r3
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	4013      	ands	r3, r2
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d012      	beq.n	800ddd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d00b      	beq.n	800ddd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddc2:	2201      	movs	r2, #1
 800ddc4:	409a      	lsls	r2, r3
 800ddc6:	693b      	ldr	r3, [r7, #16]
 800ddc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddce:	f043 0202 	orr.w	r2, r3, #2
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddda:	2204      	movs	r2, #4
 800dddc:	409a      	lsls	r2, r3
 800ddde:	68fb      	ldr	r3, [r7, #12]
 800dde0:	4013      	ands	r3, r2
 800dde2:	2b00      	cmp	r3, #0
 800dde4:	d012      	beq.n	800de0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	f003 0302 	and.w	r3, r3, #2
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d00b      	beq.n	800de0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ddf8:	2204      	movs	r2, #4
 800ddfa:	409a      	lsls	r2, r3
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de04:	f043 0204 	orr.w	r2, r3, #4
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de10:	2210      	movs	r2, #16
 800de12:	409a      	lsls	r2, r3
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	4013      	ands	r3, r2
 800de18:	2b00      	cmp	r3, #0
 800de1a:	d043      	beq.n	800dea4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f003 0308 	and.w	r3, r3, #8
 800de26:	2b00      	cmp	r3, #0
 800de28:	d03c      	beq.n	800dea4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800de2e:	2210      	movs	r2, #16
 800de30:	409a      	lsls	r2, r3
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800de40:	2b00      	cmp	r3, #0
 800de42:	d018      	beq.n	800de76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d108      	bne.n	800de64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de56:	2b00      	cmp	r3, #0
 800de58:	d024      	beq.n	800dea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de5e:	6878      	ldr	r0, [r7, #4]
 800de60:	4798      	blx	r3
 800de62:	e01f      	b.n	800dea4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d01b      	beq.n	800dea4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	4798      	blx	r3
 800de74:	e016      	b.n	800dea4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de80:	2b00      	cmp	r3, #0
 800de82:	d107      	bne.n	800de94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	681a      	ldr	r2, [r3, #0]
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	f022 0208 	bic.w	r2, r2, #8
 800de92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d003      	beq.n	800dea4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dea0:	6878      	ldr	r0, [r7, #4]
 800dea2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dea8:	2220      	movs	r2, #32
 800deaa:	409a      	lsls	r2, r3
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	4013      	ands	r3, r2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 808e 	beq.w	800dfd2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	f003 0310 	and.w	r3, r3, #16
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	f000 8086 	beq.w	800dfd2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deca:	2220      	movs	r2, #32
 800decc:	409a      	lsls	r2, r3
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800ded8:	b2db      	uxtb	r3, r3
 800deda:	2b05      	cmp	r3, #5
 800dedc:	d136      	bne.n	800df4c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0216 	bic.w	r2, r2, #22
 800deec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	695a      	ldr	r2, [r3, #20]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800defc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df02:	2b00      	cmp	r3, #0
 800df04:	d103      	bne.n	800df0e <HAL_DMA_IRQHandler+0x1da>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d007      	beq.n	800df1e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	681a      	ldr	r2, [r3, #0]
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	f022 0208 	bic.w	r2, r2, #8
 800df1c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800df22:	223f      	movs	r2, #63	; 0x3f
 800df24:	409a      	lsls	r2, r3
 800df26:	693b      	ldr	r3, [r7, #16]
 800df28:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2200      	movs	r2, #0
 800df2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2201      	movs	r2, #1
 800df36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d07d      	beq.n	800e03e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	4798      	blx	r3
        }
        return;
 800df4a:	e078      	b.n	800e03e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800df56:	2b00      	cmp	r3, #0
 800df58:	d01c      	beq.n	800df94 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800df64:	2b00      	cmp	r3, #0
 800df66:	d108      	bne.n	800df7a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d030      	beq.n	800dfd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	4798      	blx	r3
 800df78:	e02b      	b.n	800dfd2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d027      	beq.n	800dfd2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	4798      	blx	r3
 800df8a:	e022      	b.n	800dfd2 <HAL_DMA_IRQHandler+0x29e>
 800df8c:	20000000 	.word	0x20000000
 800df90:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d10f      	bne.n	800dfc2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	681a      	ldr	r2, [r3, #0]
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	f022 0210 	bic.w	r2, r2, #16
 800dfb0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d003      	beq.n	800dfd2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d032      	beq.n	800e040 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d022      	beq.n	800e02c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2205      	movs	r2, #5
 800dfea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f022 0201 	bic.w	r2, r2, #1
 800dffc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800dffe:	68bb      	ldr	r3, [r7, #8]
 800e000:	3301      	adds	r3, #1
 800e002:	60bb      	str	r3, [r7, #8]
 800e004:	697a      	ldr	r2, [r7, #20]
 800e006:	429a      	cmp	r2, r3
 800e008:	d307      	bcc.n	800e01a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	f003 0301 	and.w	r3, r3, #1
 800e014:	2b00      	cmp	r3, #0
 800e016:	d1f2      	bne.n	800dffe <HAL_DMA_IRQHandler+0x2ca>
 800e018:	e000      	b.n	800e01c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800e01a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2201      	movs	r2, #1
 800e028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e030:	2b00      	cmp	r3, #0
 800e032:	d005      	beq.n	800e040 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	4798      	blx	r3
 800e03c:	e000      	b.n	800e040 <HAL_DMA_IRQHandler+0x30c>
        return;
 800e03e:	bf00      	nop
    }
  }
}
 800e040:	3718      	adds	r7, #24
 800e042:	46bd      	mov	sp, r7
 800e044:	bd80      	pop	{r7, pc}
 800e046:	bf00      	nop

0800e048 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800e048:	b480      	push	{r7}
 800e04a:	b083      	sub	sp, #12
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800e054:	4618      	mov	r0, r3
 800e056:	370c      	adds	r7, #12
 800e058:	46bd      	mov	sp, r7
 800e05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e05e:	4770      	bx	lr

0800e060 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e060:	b480      	push	{r7}
 800e062:	b085      	sub	sp, #20
 800e064:	af00      	add	r7, sp, #0
 800e066:	60f8      	str	r0, [r7, #12]
 800e068:	60b9      	str	r1, [r7, #8]
 800e06a:	607a      	str	r2, [r7, #4]
 800e06c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	681a      	ldr	r2, [r3, #0]
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800e07c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	683a      	ldr	r2, [r7, #0]
 800e084:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	2b40      	cmp	r3, #64	; 0x40
 800e08c:	d108      	bne.n	800e0a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	687a      	ldr	r2, [r7, #4]
 800e094:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	68ba      	ldr	r2, [r7, #8]
 800e09c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800e09e:	e007      	b.n	800e0b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	68ba      	ldr	r2, [r7, #8]
 800e0a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	681b      	ldr	r3, [r3, #0]
 800e0ac:	687a      	ldr	r2, [r7, #4]
 800e0ae:	60da      	str	r2, [r3, #12]
}
 800e0b0:	bf00      	nop
 800e0b2:	3714      	adds	r7, #20
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ba:	4770      	bx	lr

0800e0bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800e0bc:	b480      	push	{r7}
 800e0be:	b085      	sub	sp, #20
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	b2db      	uxtb	r3, r3
 800e0ca:	3b10      	subs	r3, #16
 800e0cc:	4a14      	ldr	r2, [pc, #80]	; (800e120 <DMA_CalcBaseAndBitshift+0x64>)
 800e0ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e0d2:	091b      	lsrs	r3, r3, #4
 800e0d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800e0d6:	4a13      	ldr	r2, [pc, #76]	; (800e124 <DMA_CalcBaseAndBitshift+0x68>)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	4413      	add	r3, r2
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d909      	bls.n	800e0fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e0f2:	f023 0303 	bic.w	r3, r3, #3
 800e0f6:	1d1a      	adds	r2, r3, #4
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	659a      	str	r2, [r3, #88]	; 0x58
 800e0fc:	e007      	b.n	800e10e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800e106:	f023 0303 	bic.w	r3, r3, #3
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800e112:	4618      	mov	r0, r3
 800e114:	3714      	adds	r7, #20
 800e116:	46bd      	mov	sp, r7
 800e118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11c:	4770      	bx	lr
 800e11e:	bf00      	nop
 800e120:	aaaaaaab 	.word	0xaaaaaaab
 800e124:	08022864 	.word	0x08022864

0800e128 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800e128:	b480      	push	{r7}
 800e12a:	b085      	sub	sp, #20
 800e12c:	af00      	add	r7, sp, #0
 800e12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e130:	2300      	movs	r3, #0
 800e132:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e138:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	699b      	ldr	r3, [r3, #24]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d11f      	bne.n	800e182 <DMA_CheckFifoParam+0x5a>
 800e142:	68bb      	ldr	r3, [r7, #8]
 800e144:	2b03      	cmp	r3, #3
 800e146:	d856      	bhi.n	800e1f6 <DMA_CheckFifoParam+0xce>
 800e148:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <DMA_CheckFifoParam+0x28>)
 800e14a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e14e:	bf00      	nop
 800e150:	0800e161 	.word	0x0800e161
 800e154:	0800e173 	.word	0x0800e173
 800e158:	0800e161 	.word	0x0800e161
 800e15c:	0800e1f7 	.word	0x0800e1f7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d046      	beq.n	800e1fa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800e16c:	2301      	movs	r3, #1
 800e16e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e170:	e043      	b.n	800e1fa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e176:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e17a:	d140      	bne.n	800e1fe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800e17c:	2301      	movs	r3, #1
 800e17e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e180:	e03d      	b.n	800e1fe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	699b      	ldr	r3, [r3, #24]
 800e186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e18a:	d121      	bne.n	800e1d0 <DMA_CheckFifoParam+0xa8>
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	2b03      	cmp	r3, #3
 800e190:	d837      	bhi.n	800e202 <DMA_CheckFifoParam+0xda>
 800e192:	a201      	add	r2, pc, #4	; (adr r2, 800e198 <DMA_CheckFifoParam+0x70>)
 800e194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e198:	0800e1a9 	.word	0x0800e1a9
 800e19c:	0800e1af 	.word	0x0800e1af
 800e1a0:	0800e1a9 	.word	0x0800e1a9
 800e1a4:	0800e1c1 	.word	0x0800e1c1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800e1a8:	2301      	movs	r3, #1
 800e1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800e1ac:	e030      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d025      	beq.n	800e206 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800e1be:	e022      	b.n	800e206 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1c4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800e1c8:	d11f      	bne.n	800e20a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800e1ca:	2301      	movs	r3, #1
 800e1cc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800e1ce:	e01c      	b.n	800e20a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	2b02      	cmp	r3, #2
 800e1d4:	d903      	bls.n	800e1de <DMA_CheckFifoParam+0xb6>
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d003      	beq.n	800e1e4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800e1dc:	e018      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800e1de:	2301      	movs	r3, #1
 800e1e0:	73fb      	strb	r3, [r7, #15]
      break;
 800e1e2:	e015      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00e      	beq.n	800e20e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800e1f0:	2301      	movs	r3, #1
 800e1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800e1f4:	e00b      	b.n	800e20e <DMA_CheckFifoParam+0xe6>
      break;
 800e1f6:	bf00      	nop
 800e1f8:	e00a      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;
 800e1fa:	bf00      	nop
 800e1fc:	e008      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;
 800e1fe:	bf00      	nop
 800e200:	e006      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;
 800e202:	bf00      	nop
 800e204:	e004      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;
 800e206:	bf00      	nop
 800e208:	e002      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;   
 800e20a:	bf00      	nop
 800e20c:	e000      	b.n	800e210 <DMA_CheckFifoParam+0xe8>
      break;
 800e20e:	bf00      	nop
    }
  } 
  
  return status; 
 800e210:	7bfb      	ldrb	r3, [r7, #15]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3714      	adds	r7, #20
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop

0800e220 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b086      	sub	sp, #24
 800e224:	af00      	add	r7, sp, #0
 800e226:	60f8      	str	r0, [r7, #12]
 800e228:	60b9      	str	r1, [r7, #8]
 800e22a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e22e:	2301      	movs	r3, #1
 800e230:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e232:	4b23      	ldr	r3, [pc, #140]	; (800e2c0 <HAL_FLASH_Program+0xa0>)
 800e234:	7e1b      	ldrb	r3, [r3, #24]
 800e236:	2b01      	cmp	r3, #1
 800e238:	d101      	bne.n	800e23e <HAL_FLASH_Program+0x1e>
 800e23a:	2302      	movs	r3, #2
 800e23c:	e03b      	b.n	800e2b6 <HAL_FLASH_Program+0x96>
 800e23e:	4b20      	ldr	r3, [pc, #128]	; (800e2c0 <HAL_FLASH_Program+0xa0>)
 800e240:	2201      	movs	r2, #1
 800e242:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e244:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e248:	f000 f870 	bl	800e32c <FLASH_WaitForLastOperation>
 800e24c:	4603      	mov	r3, r0
 800e24e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800e250:	7dfb      	ldrb	r3, [r7, #23]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d12b      	bne.n	800e2ae <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d105      	bne.n	800e268 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800e25c:	783b      	ldrb	r3, [r7, #0]
 800e25e:	4619      	mov	r1, r3
 800e260:	68b8      	ldr	r0, [r7, #8]
 800e262:	f000 f91b 	bl	800e49c <FLASH_Program_Byte>
 800e266:	e016      	b.n	800e296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	2b01      	cmp	r3, #1
 800e26c:	d105      	bne.n	800e27a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800e26e:	883b      	ldrh	r3, [r7, #0]
 800e270:	4619      	mov	r1, r3
 800e272:	68b8      	ldr	r0, [r7, #8]
 800e274:	f000 f8ee 	bl	800e454 <FLASH_Program_HalfWord>
 800e278:	e00d      	b.n	800e296 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	2b02      	cmp	r3, #2
 800e27e:	d105      	bne.n	800e28c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800e280:	683b      	ldr	r3, [r7, #0]
 800e282:	4619      	mov	r1, r3
 800e284:	68b8      	ldr	r0, [r7, #8]
 800e286:	f000 f8c3 	bl	800e410 <FLASH_Program_Word>
 800e28a:	e004      	b.n	800e296 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800e28c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e290:	68b8      	ldr	r0, [r7, #8]
 800e292:	f000 f88b 	bl	800e3ac <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e296:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e29a:	f000 f847 	bl	800e32c <FLASH_WaitForLastOperation>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800e2a2:	4b08      	ldr	r3, [pc, #32]	; (800e2c4 <HAL_FLASH_Program+0xa4>)
 800e2a4:	691b      	ldr	r3, [r3, #16]
 800e2a6:	4a07      	ldr	r2, [pc, #28]	; (800e2c4 <HAL_FLASH_Program+0xa4>)
 800e2a8:	f023 0301 	bic.w	r3, r3, #1
 800e2ac:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e2ae:	4b04      	ldr	r3, [pc, #16]	; (800e2c0 <HAL_FLASH_Program+0xa0>)
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	761a      	strb	r2, [r3, #24]
  
  return status;
 800e2b4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	2000890c 	.word	0x2000890c
 800e2c4:	40023c00 	.word	0x40023c00

0800e2c8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800e2ce:	2300      	movs	r3, #0
 800e2d0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e2d2:	4b0b      	ldr	r3, [pc, #44]	; (800e300 <HAL_FLASH_Unlock+0x38>)
 800e2d4:	691b      	ldr	r3, [r3, #16]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	da0b      	bge.n	800e2f2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800e2da:	4b09      	ldr	r3, [pc, #36]	; (800e300 <HAL_FLASH_Unlock+0x38>)
 800e2dc:	4a09      	ldr	r2, [pc, #36]	; (800e304 <HAL_FLASH_Unlock+0x3c>)
 800e2de:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800e2e0:	4b07      	ldr	r3, [pc, #28]	; (800e300 <HAL_FLASH_Unlock+0x38>)
 800e2e2:	4a09      	ldr	r2, [pc, #36]	; (800e308 <HAL_FLASH_Unlock+0x40>)
 800e2e4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800e2e6:	4b06      	ldr	r3, [pc, #24]	; (800e300 <HAL_FLASH_Unlock+0x38>)
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	da01      	bge.n	800e2f2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
}
 800e2f4:	4618      	mov	r0, r3
 800e2f6:	370c      	adds	r7, #12
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fe:	4770      	bx	lr
 800e300:	40023c00 	.word	0x40023c00
 800e304:	45670123 	.word	0x45670123
 800e308:	cdef89ab 	.word	0xcdef89ab

0800e30c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800e30c:	b480      	push	{r7}
 800e30e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800e310:	4b05      	ldr	r3, [pc, #20]	; (800e328 <HAL_FLASH_Lock+0x1c>)
 800e312:	691b      	ldr	r3, [r3, #16]
 800e314:	4a04      	ldr	r2, [pc, #16]	; (800e328 <HAL_FLASH_Lock+0x1c>)
 800e316:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e31a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	46bd      	mov	sp, r7
 800e322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e326:	4770      	bx	lr
 800e328:	40023c00 	.word	0x40023c00

0800e32c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b084      	sub	sp, #16
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800e334:	2300      	movs	r3, #0
 800e336:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800e338:	4b1a      	ldr	r3, [pc, #104]	; (800e3a4 <FLASH_WaitForLastOperation+0x78>)
 800e33a:	2200      	movs	r2, #0
 800e33c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800e33e:	f7ff fa8f 	bl	800d860 <HAL_GetTick>
 800e342:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e344:	e010      	b.n	800e368 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e34c:	d00c      	beq.n	800e368 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d007      	beq.n	800e364 <FLASH_WaitForLastOperation+0x38>
 800e354:	f7ff fa84 	bl	800d860 <HAL_GetTick>
 800e358:	4602      	mov	r2, r0
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	1ad3      	subs	r3, r2, r3
 800e35e:	687a      	ldr	r2, [r7, #4]
 800e360:	429a      	cmp	r2, r3
 800e362:	d201      	bcs.n	800e368 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800e364:	2303      	movs	r3, #3
 800e366:	e019      	b.n	800e39c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800e368:	4b0f      	ldr	r3, [pc, #60]	; (800e3a8 <FLASH_WaitForLastOperation+0x7c>)
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e370:	2b00      	cmp	r3, #0
 800e372:	d1e8      	bne.n	800e346 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800e374:	4b0c      	ldr	r3, [pc, #48]	; (800e3a8 <FLASH_WaitForLastOperation+0x7c>)
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	f003 0301 	and.w	r3, r3, #1
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d002      	beq.n	800e386 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800e380:	4b09      	ldr	r3, [pc, #36]	; (800e3a8 <FLASH_WaitForLastOperation+0x7c>)
 800e382:	2201      	movs	r2, #1
 800e384:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800e386:	4b08      	ldr	r3, [pc, #32]	; (800e3a8 <FLASH_WaitForLastOperation+0x7c>)
 800e388:	68db      	ldr	r3, [r3, #12]
 800e38a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800e392:	f000 f8a5 	bl	800e4e0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800e396:	2301      	movs	r3, #1
 800e398:	e000      	b.n	800e39c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800e39a:	2300      	movs	r3, #0
  
}  
 800e39c:	4618      	mov	r0, r3
 800e39e:	3710      	adds	r7, #16
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	2000890c 	.word	0x2000890c
 800e3a8:	40023c00 	.word	0x40023c00

0800e3ac <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800e3ac:	b480      	push	{r7}
 800e3ae:	b085      	sub	sp, #20
 800e3b0:	af00      	add	r7, sp, #0
 800e3b2:	60f8      	str	r0, [r7, #12]
 800e3b4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e3b8:	4b14      	ldr	r3, [pc, #80]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	4a13      	ldr	r2, [pc, #76]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e3c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800e3c4:	4b11      	ldr	r3, [pc, #68]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3c6:	691b      	ldr	r3, [r3, #16]
 800e3c8:	4a10      	ldr	r2, [pc, #64]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3ca:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800e3ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e3d0:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3d2:	691b      	ldr	r3, [r3, #16]
 800e3d4:	4a0d      	ldr	r2, [pc, #52]	; (800e40c <FLASH_Program_DoubleWord+0x60>)
 800e3d6:	f043 0301 	orr.w	r3, r3, #1
 800e3da:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	683a      	ldr	r2, [r7, #0]
 800e3e0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800e3e2:	f3bf 8f6f 	isb	sy
}
 800e3e6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800e3e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800e3ec:	f04f 0200 	mov.w	r2, #0
 800e3f0:	f04f 0300 	mov.w	r3, #0
 800e3f4:	000a      	movs	r2, r1
 800e3f6:	2300      	movs	r3, #0
 800e3f8:	68f9      	ldr	r1, [r7, #12]
 800e3fa:	3104      	adds	r1, #4
 800e3fc:	4613      	mov	r3, r2
 800e3fe:	600b      	str	r3, [r1, #0]
}
 800e400:	bf00      	nop
 800e402:	3714      	adds	r7, #20
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr
 800e40c:	40023c00 	.word	0x40023c00

0800e410 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800e410:	b480      	push	{r7}
 800e412:	b083      	sub	sp, #12
 800e414:	af00      	add	r7, sp, #0
 800e416:	6078      	str	r0, [r7, #4]
 800e418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e41a:	4b0d      	ldr	r3, [pc, #52]	; (800e450 <FLASH_Program_Word+0x40>)
 800e41c:	691b      	ldr	r3, [r3, #16]
 800e41e:	4a0c      	ldr	r2, [pc, #48]	; (800e450 <FLASH_Program_Word+0x40>)
 800e420:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e424:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800e426:	4b0a      	ldr	r3, [pc, #40]	; (800e450 <FLASH_Program_Word+0x40>)
 800e428:	691b      	ldr	r3, [r3, #16]
 800e42a:	4a09      	ldr	r2, [pc, #36]	; (800e450 <FLASH_Program_Word+0x40>)
 800e42c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e430:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e432:	4b07      	ldr	r3, [pc, #28]	; (800e450 <FLASH_Program_Word+0x40>)
 800e434:	691b      	ldr	r3, [r3, #16]
 800e436:	4a06      	ldr	r2, [pc, #24]	; (800e450 <FLASH_Program_Word+0x40>)
 800e438:	f043 0301 	orr.w	r3, r3, #1
 800e43c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	683a      	ldr	r2, [r7, #0]
 800e442:	601a      	str	r2, [r3, #0]
}
 800e444:	bf00      	nop
 800e446:	370c      	adds	r7, #12
 800e448:	46bd      	mov	sp, r7
 800e44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e44e:	4770      	bx	lr
 800e450:	40023c00 	.word	0x40023c00

0800e454 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800e454:	b480      	push	{r7}
 800e456:	b083      	sub	sp, #12
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
 800e45c:	460b      	mov	r3, r1
 800e45e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e460:	4b0d      	ldr	r3, [pc, #52]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e462:	691b      	ldr	r3, [r3, #16]
 800e464:	4a0c      	ldr	r2, [pc, #48]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e466:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e46a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800e46c:	4b0a      	ldr	r3, [pc, #40]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e46e:	691b      	ldr	r3, [r3, #16]
 800e470:	4a09      	ldr	r2, [pc, #36]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e472:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e476:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e478:	4b07      	ldr	r3, [pc, #28]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e47a:	691b      	ldr	r3, [r3, #16]
 800e47c:	4a06      	ldr	r2, [pc, #24]	; (800e498 <FLASH_Program_HalfWord+0x44>)
 800e47e:	f043 0301 	orr.w	r3, r3, #1
 800e482:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	887a      	ldrh	r2, [r7, #2]
 800e488:	801a      	strh	r2, [r3, #0]
}
 800e48a:	bf00      	nop
 800e48c:	370c      	adds	r7, #12
 800e48e:	46bd      	mov	sp, r7
 800e490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e494:	4770      	bx	lr
 800e496:	bf00      	nop
 800e498:	40023c00 	.word	0x40023c00

0800e49c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
 800e4a4:	460b      	mov	r3, r1
 800e4a6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e4a8:	4b0c      	ldr	r3, [pc, #48]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4aa:	691b      	ldr	r3, [r3, #16]
 800e4ac:	4a0b      	ldr	r2, [pc, #44]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e4b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800e4b4:	4b09      	ldr	r3, [pc, #36]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4b6:	4a09      	ldr	r2, [pc, #36]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4b8:	691b      	ldr	r3, [r3, #16]
 800e4ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800e4bc:	4b07      	ldr	r3, [pc, #28]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	4a06      	ldr	r2, [pc, #24]	; (800e4dc <FLASH_Program_Byte+0x40>)
 800e4c2:	f043 0301 	orr.w	r3, r3, #1
 800e4c6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	78fa      	ldrb	r2, [r7, #3]
 800e4cc:	701a      	strb	r2, [r3, #0]
}
 800e4ce:	bf00      	nop
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4d8:	4770      	bx	lr
 800e4da:	bf00      	nop
 800e4dc:	40023c00 	.word	0x40023c00

0800e4e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800e4e0:	b480      	push	{r7}
 800e4e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800e4e4:	4b2f      	ldr	r3, [pc, #188]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e4e6:	68db      	ldr	r3, [r3, #12]
 800e4e8:	f003 0310 	and.w	r3, r3, #16
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d008      	beq.n	800e502 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800e4f0:	4b2d      	ldr	r3, [pc, #180]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e4f2:	69db      	ldr	r3, [r3, #28]
 800e4f4:	f043 0310 	orr.w	r3, r3, #16
 800e4f8:	4a2b      	ldr	r2, [pc, #172]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e4fa:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800e4fc:	4b29      	ldr	r3, [pc, #164]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e4fe:	2210      	movs	r2, #16
 800e500:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800e502:	4b28      	ldr	r3, [pc, #160]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e504:	68db      	ldr	r3, [r3, #12]
 800e506:	f003 0320 	and.w	r3, r3, #32
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d008      	beq.n	800e520 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800e50e:	4b26      	ldr	r3, [pc, #152]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e510:	69db      	ldr	r3, [r3, #28]
 800e512:	f043 0308 	orr.w	r3, r3, #8
 800e516:	4a24      	ldr	r2, [pc, #144]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e518:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800e51a:	4b22      	ldr	r3, [pc, #136]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e51c:	2220      	movs	r2, #32
 800e51e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800e520:	4b20      	ldr	r3, [pc, #128]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e522:	68db      	ldr	r3, [r3, #12]
 800e524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d008      	beq.n	800e53e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800e52c:	4b1e      	ldr	r3, [pc, #120]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e52e:	69db      	ldr	r3, [r3, #28]
 800e530:	f043 0304 	orr.w	r3, r3, #4
 800e534:	4a1c      	ldr	r2, [pc, #112]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e536:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800e538:	4b1a      	ldr	r3, [pc, #104]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e53a:	2240      	movs	r2, #64	; 0x40
 800e53c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800e53e:	4b19      	ldr	r3, [pc, #100]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e540:	68db      	ldr	r3, [r3, #12]
 800e542:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e546:	2b00      	cmp	r3, #0
 800e548:	d008      	beq.n	800e55c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800e54a:	4b17      	ldr	r3, [pc, #92]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	f043 0302 	orr.w	r3, r3, #2
 800e552:	4a15      	ldr	r2, [pc, #84]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e554:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800e556:	4b13      	ldr	r3, [pc, #76]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e558:	2280      	movs	r2, #128	; 0x80
 800e55a:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800e55c:	4b11      	ldr	r3, [pc, #68]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e55e:	68db      	ldr	r3, [r3, #12]
 800e560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e564:	2b00      	cmp	r3, #0
 800e566:	d009      	beq.n	800e57c <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e56a:	69db      	ldr	r3, [r3, #28]
 800e56c:	f043 0301 	orr.w	r3, r3, #1
 800e570:	4a0d      	ldr	r2, [pc, #52]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e572:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800e574:	4b0b      	ldr	r3, [pc, #44]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e576:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e57a:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800e57c:	4b09      	ldr	r3, [pc, #36]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e57e:	68db      	ldr	r3, [r3, #12]
 800e580:	f003 0302 	and.w	r3, r3, #2
 800e584:	2b00      	cmp	r3, #0
 800e586:	d008      	beq.n	800e59a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800e588:	4b07      	ldr	r3, [pc, #28]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e58a:	69db      	ldr	r3, [r3, #28]
 800e58c:	f043 0320 	orr.w	r3, r3, #32
 800e590:	4a05      	ldr	r2, [pc, #20]	; (800e5a8 <FLASH_SetErrorCode+0xc8>)
 800e592:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800e594:	4b03      	ldr	r3, [pc, #12]	; (800e5a4 <FLASH_SetErrorCode+0xc4>)
 800e596:	2202      	movs	r2, #2
 800e598:	60da      	str	r2, [r3, #12]
  }
}
 800e59a:	bf00      	nop
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr
 800e5a4:	40023c00 	.word	0x40023c00
 800e5a8:	2000890c 	.word	0x2000890c

0800e5ac <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800e5b6:	2301      	movs	r3, #1
 800e5b8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800e5be:	4b31      	ldr	r3, [pc, #196]	; (800e684 <HAL_FLASHEx_Erase+0xd8>)
 800e5c0:	7e1b      	ldrb	r3, [r3, #24]
 800e5c2:	2b01      	cmp	r3, #1
 800e5c4:	d101      	bne.n	800e5ca <HAL_FLASHEx_Erase+0x1e>
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	e058      	b.n	800e67c <HAL_FLASHEx_Erase+0xd0>
 800e5ca:	4b2e      	ldr	r3, [pc, #184]	; (800e684 <HAL_FLASHEx_Erase+0xd8>)
 800e5cc:	2201      	movs	r2, #1
 800e5ce:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e5d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e5d4:	f7ff feaa 	bl	800e32c <FLASH_WaitForLastOperation>
 800e5d8:	4603      	mov	r3, r0
 800e5da:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 800e5dc:	7bfb      	ldrb	r3, [r7, #15]
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d148      	bne.n	800e674 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800e5e8:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	2b01      	cmp	r3, #1
 800e5f0:	d115      	bne.n	800e61e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	691b      	ldr	r3, [r3, #16]
 800e5f6:	b2da      	uxtb	r2, r3
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f000 f844 	bl	800e68c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e604:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e608:	f7ff fe90 	bl	800e32c <FLASH_WaitForLastOperation>
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800e610:	4b1d      	ldr	r3, [pc, #116]	; (800e688 <HAL_FLASHEx_Erase+0xdc>)
 800e612:	691b      	ldr	r3, [r3, #16]
 800e614:	4a1c      	ldr	r2, [pc, #112]	; (800e688 <HAL_FLASHEx_Erase+0xdc>)
 800e616:	f023 0304 	bic.w	r3, r3, #4
 800e61a:	6113      	str	r3, [r2, #16]
 800e61c:	e028      	b.n	800e670 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	689b      	ldr	r3, [r3, #8]
 800e622:	60bb      	str	r3, [r7, #8]
 800e624:	e01c      	b.n	800e660 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	691b      	ldr	r3, [r3, #16]
 800e62a:	b2db      	uxtb	r3, r3
 800e62c:	4619      	mov	r1, r3
 800e62e:	68b8      	ldr	r0, [r7, #8]
 800e630:	f000 f850 	bl	800e6d4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800e634:	f24c 3050 	movw	r0, #50000	; 0xc350
 800e638:	f7ff fe78 	bl	800e32c <FLASH_WaitForLastOperation>
 800e63c:	4603      	mov	r3, r0
 800e63e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800e640:	4b11      	ldr	r3, [pc, #68]	; (800e688 <HAL_FLASHEx_Erase+0xdc>)
 800e642:	691b      	ldr	r3, [r3, #16]
 800e644:	4a10      	ldr	r2, [pc, #64]	; (800e688 <HAL_FLASHEx_Erase+0xdc>)
 800e646:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800e64a:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 800e64c:	7bfb      	ldrb	r3, [r7, #15]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d003      	beq.n	800e65a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	68ba      	ldr	r2, [r7, #8]
 800e656:	601a      	str	r2, [r3, #0]
          break;
 800e658:	e00a      	b.n	800e670 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	3301      	adds	r3, #1
 800e65e:	60bb      	str	r3, [r7, #8]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	68da      	ldr	r2, [r3, #12]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	4413      	add	r3, r2
 800e66a:	68ba      	ldr	r2, [r7, #8]
 800e66c:	429a      	cmp	r2, r3
 800e66e:	d3da      	bcc.n	800e626 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800e670:	f000 f878 	bl	800e764 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800e674:	4b03      	ldr	r3, [pc, #12]	; (800e684 <HAL_FLASHEx_Erase+0xd8>)
 800e676:	2200      	movs	r2, #0
 800e678:	761a      	strb	r2, [r3, #24]

  return status;
 800e67a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e67c:	4618      	mov	r0, r3
 800e67e:	3710      	adds	r7, #16
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	2000890c 	.word	0x2000890c
 800e688:	40023c00 	.word	0x40023c00

0800e68c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800e68c:	b480      	push	{r7}
 800e68e:	b083      	sub	sp, #12
 800e690:	af00      	add	r7, sp, #0
 800e692:	4603      	mov	r3, r0
 800e694:	6039      	str	r1, [r7, #0]
 800e696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e698:	4b0d      	ldr	r3, [pc, #52]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e69a:	691b      	ldr	r3, [r3, #16]
 800e69c:	4a0c      	ldr	r2, [pc, #48]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e69e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800e6a4:	4b0a      	ldr	r3, [pc, #40]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e6a6:	691b      	ldr	r3, [r3, #16]
 800e6a8:	4a09      	ldr	r2, [pc, #36]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e6aa:	f043 0304 	orr.w	r3, r3, #4
 800e6ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800e6b0:	4b07      	ldr	r3, [pc, #28]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e6b2:	691a      	ldr	r2, [r3, #16]
 800e6b4:	79fb      	ldrb	r3, [r7, #7]
 800e6b6:	021b      	lsls	r3, r3, #8
 800e6b8:	4313      	orrs	r3, r2
 800e6ba:	4a05      	ldr	r2, [pc, #20]	; (800e6d0 <FLASH_MassErase+0x44>)
 800e6bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6c0:	6113      	str	r3, [r2, #16]
}
 800e6c2:	bf00      	nop
 800e6c4:	370c      	adds	r7, #12
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	40023c00 	.word	0x40023c00

0800e6d4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800e6d4:	b480      	push	{r7}
 800e6d6:	b085      	sub	sp, #20
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
 800e6dc:	460b      	mov	r3, r1
 800e6de:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800e6e4:	78fb      	ldrb	r3, [r7, #3]
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d102      	bne.n	800e6f0 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e010      	b.n	800e712 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800e6f0:	78fb      	ldrb	r3, [r7, #3]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d103      	bne.n	800e6fe <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800e6f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800e6fa:	60fb      	str	r3, [r7, #12]
 800e6fc:	e009      	b.n	800e712 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800e6fe:	78fb      	ldrb	r3, [r7, #3]
 800e700:	2b02      	cmp	r3, #2
 800e702:	d103      	bne.n	800e70c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800e704:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e708:	60fb      	str	r3, [r7, #12]
 800e70a:	e002      	b.n	800e712 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800e70c:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e710:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800e712:	4b13      	ldr	r3, [pc, #76]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e714:	691b      	ldr	r3, [r3, #16]
 800e716:	4a12      	ldr	r2, [pc, #72]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e71c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800e71e:	4b10      	ldr	r3, [pc, #64]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	490f      	ldr	r1, [pc, #60]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	4313      	orrs	r3, r2
 800e728:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800e72a:	4b0d      	ldr	r3, [pc, #52]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	4a0c      	ldr	r2, [pc, #48]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e730:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800e734:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800e736:	4b0a      	ldr	r3, [pc, #40]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e738:	691a      	ldr	r2, [r3, #16]
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	00db      	lsls	r3, r3, #3
 800e73e:	4313      	orrs	r3, r2
 800e740:	4a07      	ldr	r2, [pc, #28]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e742:	f043 0302 	orr.w	r3, r3, #2
 800e746:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800e748:	4b05      	ldr	r3, [pc, #20]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e74a:	691b      	ldr	r3, [r3, #16]
 800e74c:	4a04      	ldr	r2, [pc, #16]	; (800e760 <FLASH_Erase_Sector+0x8c>)
 800e74e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e752:	6113      	str	r3, [r2, #16]
}
 800e754:	bf00      	nop
 800e756:	3714      	adds	r7, #20
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr
 800e760:	40023c00 	.word	0x40023c00

0800e764 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800e764:	b480      	push	{r7}
 800e766:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800e768:	4b20      	ldr	r3, [pc, #128]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e770:	2b00      	cmp	r3, #0
 800e772:	d017      	beq.n	800e7a4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800e774:	4b1d      	ldr	r3, [pc, #116]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a1c      	ldr	r2, [pc, #112]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e77a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e77e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800e780:	4b1a      	ldr	r3, [pc, #104]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a19      	ldr	r2, [pc, #100]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e786:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	4b17      	ldr	r3, [pc, #92]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a16      	ldr	r2, [pc, #88]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e796:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800e798:	4b14      	ldr	r3, [pc, #80]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a13      	ldr	r2, [pc, #76]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e79e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e7a2:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800e7a4:	4b11      	ldr	r3, [pc, #68]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d017      	beq.n	800e7e0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800e7b0:	4b0e      	ldr	r3, [pc, #56]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a0d      	ldr	r2, [pc, #52]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800e7ba:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800e7bc:	4b0b      	ldr	r3, [pc, #44]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a0a      	ldr	r2, [pc, #40]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	4b08      	ldr	r3, [pc, #32]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a07      	ldr	r2, [pc, #28]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e7d2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800e7d4:	4b05      	ldr	r3, [pc, #20]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a04      	ldr	r2, [pc, #16]	; (800e7ec <FLASH_FlushCaches+0x88>)
 800e7da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800e7de:	6013      	str	r3, [r2, #0]
  }
}
 800e7e0:	bf00      	nop
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e8:	4770      	bx	lr
 800e7ea:	bf00      	nop
 800e7ec:	40023c00 	.word	0x40023c00

0800e7f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800e7f0:	b480      	push	{r7}
 800e7f2:	b089      	sub	sp, #36	; 0x24
 800e7f4:	af00      	add	r7, sp, #0
 800e7f6:	6078      	str	r0, [r7, #4]
 800e7f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800e7fe:	2300      	movs	r3, #0
 800e800:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800e802:	2300      	movs	r3, #0
 800e804:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800e806:	2300      	movs	r3, #0
 800e808:	61fb      	str	r3, [r7, #28]
 800e80a:	e159      	b.n	800eac0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800e80c:	2201      	movs	r2, #1
 800e80e:	69fb      	ldr	r3, [r7, #28]
 800e810:	fa02 f303 	lsl.w	r3, r2, r3
 800e814:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800e816:	683b      	ldr	r3, [r7, #0]
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	697a      	ldr	r2, [r7, #20]
 800e81c:	4013      	ands	r3, r2
 800e81e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800e820:	693a      	ldr	r2, [r7, #16]
 800e822:	697b      	ldr	r3, [r7, #20]
 800e824:	429a      	cmp	r2, r3
 800e826:	f040 8148 	bne.w	800eaba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e82a:	683b      	ldr	r3, [r7, #0]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	f003 0303 	and.w	r3, r3, #3
 800e832:	2b01      	cmp	r3, #1
 800e834:	d005      	beq.n	800e842 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e836:	683b      	ldr	r3, [r7, #0]
 800e838:	685b      	ldr	r3, [r3, #4]
 800e83a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800e83e:	2b02      	cmp	r3, #2
 800e840:	d130      	bne.n	800e8a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	689b      	ldr	r3, [r3, #8]
 800e846:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800e848:	69fb      	ldr	r3, [r7, #28]
 800e84a:	005b      	lsls	r3, r3, #1
 800e84c:	2203      	movs	r2, #3
 800e84e:	fa02 f303 	lsl.w	r3, r2, r3
 800e852:	43db      	mvns	r3, r3
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	4013      	ands	r3, r2
 800e858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	68da      	ldr	r2, [r3, #12]
 800e85e:	69fb      	ldr	r3, [r7, #28]
 800e860:	005b      	lsls	r3, r3, #1
 800e862:	fa02 f303 	lsl.w	r3, r2, r3
 800e866:	69ba      	ldr	r2, [r7, #24]
 800e868:	4313      	orrs	r3, r2
 800e86a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	69ba      	ldr	r2, [r7, #24]
 800e870:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800e878:	2201      	movs	r2, #1
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	fa02 f303 	lsl.w	r3, r2, r3
 800e880:	43db      	mvns	r3, r3
 800e882:	69ba      	ldr	r2, [r7, #24]
 800e884:	4013      	ands	r3, r2
 800e886:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800e888:	683b      	ldr	r3, [r7, #0]
 800e88a:	685b      	ldr	r3, [r3, #4]
 800e88c:	091b      	lsrs	r3, r3, #4
 800e88e:	f003 0201 	and.w	r2, r3, #1
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	fa02 f303 	lsl.w	r3, r2, r3
 800e898:	69ba      	ldr	r2, [r7, #24]
 800e89a:	4313      	orrs	r3, r2
 800e89c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	69ba      	ldr	r2, [r7, #24]
 800e8a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800e8a4:	683b      	ldr	r3, [r7, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	f003 0303 	and.w	r3, r3, #3
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	d017      	beq.n	800e8e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	68db      	ldr	r3, [r3, #12]
 800e8b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800e8b6:	69fb      	ldr	r3, [r7, #28]
 800e8b8:	005b      	lsls	r3, r3, #1
 800e8ba:	2203      	movs	r2, #3
 800e8bc:	fa02 f303 	lsl.w	r3, r2, r3
 800e8c0:	43db      	mvns	r3, r3
 800e8c2:	69ba      	ldr	r2, [r7, #24]
 800e8c4:	4013      	ands	r3, r2
 800e8c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800e8c8:	683b      	ldr	r3, [r7, #0]
 800e8ca:	689a      	ldr	r2, [r3, #8]
 800e8cc:	69fb      	ldr	r3, [r7, #28]
 800e8ce:	005b      	lsls	r3, r3, #1
 800e8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800e8d4:	69ba      	ldr	r2, [r7, #24]
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	69ba      	ldr	r2, [r7, #24]
 800e8de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800e8e0:	683b      	ldr	r3, [r7, #0]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	f003 0303 	and.w	r3, r3, #3
 800e8e8:	2b02      	cmp	r3, #2
 800e8ea:	d123      	bne.n	800e934 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800e8ec:	69fb      	ldr	r3, [r7, #28]
 800e8ee:	08da      	lsrs	r2, r3, #3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	3208      	adds	r2, #8
 800e8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e8f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800e8fa:	69fb      	ldr	r3, [r7, #28]
 800e8fc:	f003 0307 	and.w	r3, r3, #7
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	220f      	movs	r2, #15
 800e904:	fa02 f303 	lsl.w	r3, r2, r3
 800e908:	43db      	mvns	r3, r3
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	4013      	ands	r3, r2
 800e90e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	691a      	ldr	r2, [r3, #16]
 800e914:	69fb      	ldr	r3, [r7, #28]
 800e916:	f003 0307 	and.w	r3, r3, #7
 800e91a:	009b      	lsls	r3, r3, #2
 800e91c:	fa02 f303 	lsl.w	r3, r2, r3
 800e920:	69ba      	ldr	r2, [r7, #24]
 800e922:	4313      	orrs	r3, r2
 800e924:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800e926:	69fb      	ldr	r3, [r7, #28]
 800e928:	08da      	lsrs	r2, r3, #3
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	3208      	adds	r2, #8
 800e92e:	69b9      	ldr	r1, [r7, #24]
 800e930:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800e93a:	69fb      	ldr	r3, [r7, #28]
 800e93c:	005b      	lsls	r3, r3, #1
 800e93e:	2203      	movs	r2, #3
 800e940:	fa02 f303 	lsl.w	r3, r2, r3
 800e944:	43db      	mvns	r3, r3
 800e946:	69ba      	ldr	r2, [r7, #24]
 800e948:	4013      	ands	r3, r2
 800e94a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	f003 0203 	and.w	r2, r3, #3
 800e954:	69fb      	ldr	r3, [r7, #28]
 800e956:	005b      	lsls	r3, r3, #1
 800e958:	fa02 f303 	lsl.w	r3, r2, r3
 800e95c:	69ba      	ldr	r2, [r7, #24]
 800e95e:	4313      	orrs	r3, r2
 800e960:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	69ba      	ldr	r2, [r7, #24]
 800e966:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	685b      	ldr	r3, [r3, #4]
 800e96c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e970:	2b00      	cmp	r3, #0
 800e972:	f000 80a2 	beq.w	800eaba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e976:	2300      	movs	r3, #0
 800e978:	60fb      	str	r3, [r7, #12]
 800e97a:	4b57      	ldr	r3, [pc, #348]	; (800ead8 <HAL_GPIO_Init+0x2e8>)
 800e97c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e97e:	4a56      	ldr	r2, [pc, #344]	; (800ead8 <HAL_GPIO_Init+0x2e8>)
 800e980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e984:	6453      	str	r3, [r2, #68]	; 0x44
 800e986:	4b54      	ldr	r3, [pc, #336]	; (800ead8 <HAL_GPIO_Init+0x2e8>)
 800e988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e98a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e98e:	60fb      	str	r3, [r7, #12]
 800e990:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800e992:	4a52      	ldr	r2, [pc, #328]	; (800eadc <HAL_GPIO_Init+0x2ec>)
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	089b      	lsrs	r3, r3, #2
 800e998:	3302      	adds	r3, #2
 800e99a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e99e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800e9a0:	69fb      	ldr	r3, [r7, #28]
 800e9a2:	f003 0303 	and.w	r3, r3, #3
 800e9a6:	009b      	lsls	r3, r3, #2
 800e9a8:	220f      	movs	r2, #15
 800e9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800e9ae:	43db      	mvns	r3, r3
 800e9b0:	69ba      	ldr	r2, [r7, #24]
 800e9b2:	4013      	ands	r3, r2
 800e9b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	4a49      	ldr	r2, [pc, #292]	; (800eae0 <HAL_GPIO_Init+0x2f0>)
 800e9ba:	4293      	cmp	r3, r2
 800e9bc:	d019      	beq.n	800e9f2 <HAL_GPIO_Init+0x202>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	4a48      	ldr	r2, [pc, #288]	; (800eae4 <HAL_GPIO_Init+0x2f4>)
 800e9c2:	4293      	cmp	r3, r2
 800e9c4:	d013      	beq.n	800e9ee <HAL_GPIO_Init+0x1fe>
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	4a47      	ldr	r2, [pc, #284]	; (800eae8 <HAL_GPIO_Init+0x2f8>)
 800e9ca:	4293      	cmp	r3, r2
 800e9cc:	d00d      	beq.n	800e9ea <HAL_GPIO_Init+0x1fa>
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4a46      	ldr	r2, [pc, #280]	; (800eaec <HAL_GPIO_Init+0x2fc>)
 800e9d2:	4293      	cmp	r3, r2
 800e9d4:	d007      	beq.n	800e9e6 <HAL_GPIO_Init+0x1f6>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4a45      	ldr	r2, [pc, #276]	; (800eaf0 <HAL_GPIO_Init+0x300>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d101      	bne.n	800e9e2 <HAL_GPIO_Init+0x1f2>
 800e9de:	2304      	movs	r3, #4
 800e9e0:	e008      	b.n	800e9f4 <HAL_GPIO_Init+0x204>
 800e9e2:	2307      	movs	r3, #7
 800e9e4:	e006      	b.n	800e9f4 <HAL_GPIO_Init+0x204>
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e004      	b.n	800e9f4 <HAL_GPIO_Init+0x204>
 800e9ea:	2302      	movs	r3, #2
 800e9ec:	e002      	b.n	800e9f4 <HAL_GPIO_Init+0x204>
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	e000      	b.n	800e9f4 <HAL_GPIO_Init+0x204>
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	69fa      	ldr	r2, [r7, #28]
 800e9f6:	f002 0203 	and.w	r2, r2, #3
 800e9fa:	0092      	lsls	r2, r2, #2
 800e9fc:	4093      	lsls	r3, r2
 800e9fe:	69ba      	ldr	r2, [r7, #24]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ea04:	4935      	ldr	r1, [pc, #212]	; (800eadc <HAL_GPIO_Init+0x2ec>)
 800ea06:	69fb      	ldr	r3, [r7, #28]
 800ea08:	089b      	lsrs	r3, r3, #2
 800ea0a:	3302      	adds	r3, #2
 800ea0c:	69ba      	ldr	r2, [r7, #24]
 800ea0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800ea12:	4b38      	ldr	r3, [pc, #224]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	43db      	mvns	r3, r3
 800ea1c:	69ba      	ldr	r2, [r7, #24]
 800ea1e:	4013      	ands	r3, r2
 800ea20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	685b      	ldr	r3, [r3, #4]
 800ea26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d003      	beq.n	800ea36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	4313      	orrs	r3, r2
 800ea34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800ea36:	4a2f      	ldr	r2, [pc, #188]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800ea3c:	4b2d      	ldr	r3, [pc, #180]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea3e:	685b      	ldr	r3, [r3, #4]
 800ea40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea42:	693b      	ldr	r3, [r7, #16]
 800ea44:	43db      	mvns	r3, r3
 800ea46:	69ba      	ldr	r2, [r7, #24]
 800ea48:	4013      	ands	r3, r2
 800ea4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800ea4c:	683b      	ldr	r3, [r7, #0]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d003      	beq.n	800ea60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800ea58:	69ba      	ldr	r2, [r7, #24]
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	4313      	orrs	r3, r2
 800ea5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800ea60:	4a24      	ldr	r2, [pc, #144]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea62:	69bb      	ldr	r3, [r7, #24]
 800ea64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ea66:	4b23      	ldr	r3, [pc, #140]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea68:	689b      	ldr	r3, [r3, #8]
 800ea6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	43db      	mvns	r3, r3
 800ea70:	69ba      	ldr	r2, [r7, #24]
 800ea72:	4013      	ands	r3, r2
 800ea74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ea76:	683b      	ldr	r3, [r7, #0]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d003      	beq.n	800ea8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800ea82:	69ba      	ldr	r2, [r7, #24]
 800ea84:	693b      	ldr	r3, [r7, #16]
 800ea86:	4313      	orrs	r3, r2
 800ea88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ea8a:	4a1a      	ldr	r2, [pc, #104]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea8c:	69bb      	ldr	r3, [r7, #24]
 800ea8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ea90:	4b18      	ldr	r3, [pc, #96]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ea96:	693b      	ldr	r3, [r7, #16]
 800ea98:	43db      	mvns	r3, r3
 800ea9a:	69ba      	ldr	r2, [r7, #24]
 800ea9c:	4013      	ands	r3, r2
 800ea9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d003      	beq.n	800eab4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800eaac:	69ba      	ldr	r2, [r7, #24]
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	4313      	orrs	r3, r2
 800eab2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800eab4:	4a0f      	ldr	r2, [pc, #60]	; (800eaf4 <HAL_GPIO_Init+0x304>)
 800eab6:	69bb      	ldr	r3, [r7, #24]
 800eab8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800eaba:	69fb      	ldr	r3, [r7, #28]
 800eabc:	3301      	adds	r3, #1
 800eabe:	61fb      	str	r3, [r7, #28]
 800eac0:	69fb      	ldr	r3, [r7, #28]
 800eac2:	2b0f      	cmp	r3, #15
 800eac4:	f67f aea2 	bls.w	800e80c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800eac8:	bf00      	nop
 800eaca:	bf00      	nop
 800eacc:	3724      	adds	r7, #36	; 0x24
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr
 800ead6:	bf00      	nop
 800ead8:	40023800 	.word	0x40023800
 800eadc:	40013800 	.word	0x40013800
 800eae0:	40020000 	.word	0x40020000
 800eae4:	40020400 	.word	0x40020400
 800eae8:	40020800 	.word	0x40020800
 800eaec:	40020c00 	.word	0x40020c00
 800eaf0:	40021000 	.word	0x40021000
 800eaf4:	40013c00 	.word	0x40013c00

0800eaf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b085      	sub	sp, #20
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	460b      	mov	r3, r1
 800eb02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	691a      	ldr	r2, [r3, #16]
 800eb08:	887b      	ldrh	r3, [r7, #2]
 800eb0a:	4013      	ands	r3, r2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d002      	beq.n	800eb16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800eb10:	2301      	movs	r3, #1
 800eb12:	73fb      	strb	r3, [r7, #15]
 800eb14:	e001      	b.n	800eb1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800eb16:	2300      	movs	r3, #0
 800eb18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800eb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	3714      	adds	r7, #20
 800eb20:	46bd      	mov	sp, r7
 800eb22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb26:	4770      	bx	lr

0800eb28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800eb28:	b480      	push	{r7}
 800eb2a:	b083      	sub	sp, #12
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	460b      	mov	r3, r1
 800eb32:	807b      	strh	r3, [r7, #2]
 800eb34:	4613      	mov	r3, r2
 800eb36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800eb38:	787b      	ldrb	r3, [r7, #1]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d003      	beq.n	800eb46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800eb3e:	887a      	ldrh	r2, [r7, #2]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800eb44:	e003      	b.n	800eb4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800eb46:	887b      	ldrh	r3, [r7, #2]
 800eb48:	041a      	lsls	r2, r3, #16
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	619a      	str	r2, [r3, #24]
}
 800eb4e:	bf00      	nop
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800eb5a:	b480      	push	{r7}
 800eb5c:	b085      	sub	sp, #20
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	460b      	mov	r3, r1
 800eb64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	695b      	ldr	r3, [r3, #20]
 800eb6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800eb6c:	887a      	ldrh	r2, [r7, #2]
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	4013      	ands	r3, r2
 800eb72:	041a      	lsls	r2, r3, #16
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	43d9      	mvns	r1, r3
 800eb78:	887b      	ldrh	r3, [r7, #2]
 800eb7a:	400b      	ands	r3, r1
 800eb7c:	431a      	orrs	r2, r3
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	619a      	str	r2, [r3, #24]
}
 800eb82:	bf00      	nop
 800eb84:	3714      	adds	r7, #20
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr

0800eb8e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800eb8e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb90:	b08f      	sub	sp, #60	; 0x3c
 800eb92:	af0a      	add	r7, sp, #40	; 0x28
 800eb94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d101      	bne.n	800eba0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	e10f      	b.n	800edc0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	681b      	ldr	r3, [r3, #0]
 800eba4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800ebac:	b2db      	uxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d106      	bne.n	800ebc0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ebba:	6878      	ldr	r0, [r7, #4]
 800ebbc:	f7fa fa04 	bl	8008fc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	2203      	movs	r2, #3
 800ebc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ebc8:	68bb      	ldr	r3, [r7, #8]
 800ebca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d102      	bne.n	800ebda <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	681b      	ldr	r3, [r3, #0]
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f004 ffd7 	bl	8013b92 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	603b      	str	r3, [r7, #0]
 800ebea:	687e      	ldr	r6, [r7, #4]
 800ebec:	466d      	mov	r5, sp
 800ebee:	f106 0410 	add.w	r4, r6, #16
 800ebf2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebf4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebf6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebfa:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ebfe:	e885 0003 	stmia.w	r5, {r0, r1}
 800ec02:	1d33      	adds	r3, r6, #4
 800ec04:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ec06:	6838      	ldr	r0, [r7, #0]
 800ec08:	f004 feae 	bl	8013968 <USB_CoreInit>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d005      	beq.n	800ec1e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800ec1a:	2301      	movs	r3, #1
 800ec1c:	e0d0      	b.n	800edc0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2100      	movs	r1, #0
 800ec24:	4618      	mov	r0, r3
 800ec26:	f004 ffc5 	bl	8013bb4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	73fb      	strb	r3, [r7, #15]
 800ec2e:	e04a      	b.n	800ecc6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800ec30:	7bfa      	ldrb	r2, [r7, #15]
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	4613      	mov	r3, r2
 800ec36:	00db      	lsls	r3, r3, #3
 800ec38:	1a9b      	subs	r3, r3, r2
 800ec3a:	009b      	lsls	r3, r3, #2
 800ec3c:	440b      	add	r3, r1
 800ec3e:	333d      	adds	r3, #61	; 0x3d
 800ec40:	2201      	movs	r2, #1
 800ec42:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ec44:	7bfa      	ldrb	r2, [r7, #15]
 800ec46:	6879      	ldr	r1, [r7, #4]
 800ec48:	4613      	mov	r3, r2
 800ec4a:	00db      	lsls	r3, r3, #3
 800ec4c:	1a9b      	subs	r3, r3, r2
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	440b      	add	r3, r1
 800ec52:	333c      	adds	r3, #60	; 0x3c
 800ec54:	7bfa      	ldrb	r2, [r7, #15]
 800ec56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ec58:	7bfa      	ldrb	r2, [r7, #15]
 800ec5a:	7bfb      	ldrb	r3, [r7, #15]
 800ec5c:	b298      	uxth	r0, r3
 800ec5e:	6879      	ldr	r1, [r7, #4]
 800ec60:	4613      	mov	r3, r2
 800ec62:	00db      	lsls	r3, r3, #3
 800ec64:	1a9b      	subs	r3, r3, r2
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	440b      	add	r3, r1
 800ec6a:	3342      	adds	r3, #66	; 0x42
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ec70:	7bfa      	ldrb	r2, [r7, #15]
 800ec72:	6879      	ldr	r1, [r7, #4]
 800ec74:	4613      	mov	r3, r2
 800ec76:	00db      	lsls	r3, r3, #3
 800ec78:	1a9b      	subs	r3, r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	440b      	add	r3, r1
 800ec7e:	333f      	adds	r3, #63	; 0x3f
 800ec80:	2200      	movs	r2, #0
 800ec82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ec84:	7bfa      	ldrb	r2, [r7, #15]
 800ec86:	6879      	ldr	r1, [r7, #4]
 800ec88:	4613      	mov	r3, r2
 800ec8a:	00db      	lsls	r3, r3, #3
 800ec8c:	1a9b      	subs	r3, r3, r2
 800ec8e:	009b      	lsls	r3, r3, #2
 800ec90:	440b      	add	r3, r1
 800ec92:	3344      	adds	r3, #68	; 0x44
 800ec94:	2200      	movs	r2, #0
 800ec96:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ec98:	7bfa      	ldrb	r2, [r7, #15]
 800ec9a:	6879      	ldr	r1, [r7, #4]
 800ec9c:	4613      	mov	r3, r2
 800ec9e:	00db      	lsls	r3, r3, #3
 800eca0:	1a9b      	subs	r3, r3, r2
 800eca2:	009b      	lsls	r3, r3, #2
 800eca4:	440b      	add	r3, r1
 800eca6:	3348      	adds	r3, #72	; 0x48
 800eca8:	2200      	movs	r2, #0
 800ecaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ecac:	7bfa      	ldrb	r2, [r7, #15]
 800ecae:	6879      	ldr	r1, [r7, #4]
 800ecb0:	4613      	mov	r3, r2
 800ecb2:	00db      	lsls	r3, r3, #3
 800ecb4:	1a9b      	subs	r3, r3, r2
 800ecb6:	009b      	lsls	r3, r3, #2
 800ecb8:	440b      	add	r3, r1
 800ecba:	3350      	adds	r3, #80	; 0x50
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ecc0:	7bfb      	ldrb	r3, [r7, #15]
 800ecc2:	3301      	adds	r3, #1
 800ecc4:	73fb      	strb	r3, [r7, #15]
 800ecc6:	7bfa      	ldrb	r2, [r7, #15]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	685b      	ldr	r3, [r3, #4]
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d3af      	bcc.n	800ec30 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ecd0:	2300      	movs	r3, #0
 800ecd2:	73fb      	strb	r3, [r7, #15]
 800ecd4:	e044      	b.n	800ed60 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ecd6:	7bfa      	ldrb	r2, [r7, #15]
 800ecd8:	6879      	ldr	r1, [r7, #4]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	00db      	lsls	r3, r3, #3
 800ecde:	1a9b      	subs	r3, r3, r2
 800ece0:	009b      	lsls	r3, r3, #2
 800ece2:	440b      	add	r3, r1
 800ece4:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800ece8:	2200      	movs	r2, #0
 800ecea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ecec:	7bfa      	ldrb	r2, [r7, #15]
 800ecee:	6879      	ldr	r1, [r7, #4]
 800ecf0:	4613      	mov	r3, r2
 800ecf2:	00db      	lsls	r3, r3, #3
 800ecf4:	1a9b      	subs	r3, r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	440b      	add	r3, r1
 800ecfa:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800ecfe:	7bfa      	ldrb	r2, [r7, #15]
 800ed00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ed02:	7bfa      	ldrb	r2, [r7, #15]
 800ed04:	6879      	ldr	r1, [r7, #4]
 800ed06:	4613      	mov	r3, r2
 800ed08:	00db      	lsls	r3, r3, #3
 800ed0a:	1a9b      	subs	r3, r3, r2
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	440b      	add	r3, r1
 800ed10:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800ed14:	2200      	movs	r2, #0
 800ed16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800ed18:	7bfa      	ldrb	r2, [r7, #15]
 800ed1a:	6879      	ldr	r1, [r7, #4]
 800ed1c:	4613      	mov	r3, r2
 800ed1e:	00db      	lsls	r3, r3, #3
 800ed20:	1a9b      	subs	r3, r3, r2
 800ed22:	009b      	lsls	r3, r3, #2
 800ed24:	440b      	add	r3, r1
 800ed26:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800ed2a:	2200      	movs	r2, #0
 800ed2c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ed2e:	7bfa      	ldrb	r2, [r7, #15]
 800ed30:	6879      	ldr	r1, [r7, #4]
 800ed32:	4613      	mov	r3, r2
 800ed34:	00db      	lsls	r3, r3, #3
 800ed36:	1a9b      	subs	r3, r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	440b      	add	r3, r1
 800ed3c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800ed40:	2200      	movs	r2, #0
 800ed42:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ed44:	7bfa      	ldrb	r2, [r7, #15]
 800ed46:	6879      	ldr	r1, [r7, #4]
 800ed48:	4613      	mov	r3, r2
 800ed4a:	00db      	lsls	r3, r3, #3
 800ed4c:	1a9b      	subs	r3, r3, r2
 800ed4e:	009b      	lsls	r3, r3, #2
 800ed50:	440b      	add	r3, r1
 800ed52:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800ed56:	2200      	movs	r2, #0
 800ed58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
 800ed5c:	3301      	adds	r3, #1
 800ed5e:	73fb      	strb	r3, [r7, #15]
 800ed60:	7bfa      	ldrb	r2, [r7, #15]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d3b5      	bcc.n	800ecd6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	603b      	str	r3, [r7, #0]
 800ed70:	687e      	ldr	r6, [r7, #4]
 800ed72:	466d      	mov	r5, sp
 800ed74:	f106 0410 	add.w	r4, r6, #16
 800ed78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ed7e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ed80:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ed84:	e885 0003 	stmia.w	r5, {r0, r1}
 800ed88:	1d33      	adds	r3, r6, #4
 800ed8a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ed8c:	6838      	ldr	r0, [r7, #0]
 800ed8e:	f004 ff3b 	bl	8013c08 <USB_DevInit>
 800ed92:	4603      	mov	r3, r0
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d005      	beq.n	800eda4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2202      	movs	r2, #2
 800ed9c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800eda0:	2301      	movs	r3, #1
 800eda2:	e00d      	b.n	800edc0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2201      	movs	r2, #1
 800edb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	4618      	mov	r0, r3
 800edba:	f005 ff83 	bl	8014cc4 <USB_DevDisconnect>

  return HAL_OK;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3714      	adds	r7, #20
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800edc8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800edc8:	b580      	push	{r7, lr}
 800edca:	b084      	sub	sp, #16
 800edcc:	af00      	add	r7, sp, #0
 800edce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800eddc:	2b01      	cmp	r3, #1
 800edde:	d101      	bne.n	800ede4 <HAL_PCD_Start+0x1c>
 800ede0:	2302      	movs	r3, #2
 800ede2:	e020      	b.n	800ee26 <HAL_PCD_Start+0x5e>
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2201      	movs	r2, #1
 800ede8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edf0:	2b01      	cmp	r3, #1
 800edf2:	d109      	bne.n	800ee08 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800edf8:	2b01      	cmp	r3, #1
 800edfa:	d005      	beq.n	800ee08 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800edfc:	68fb      	ldr	r3, [r7, #12]
 800edfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee00:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f004 feaf 	bl	8013b70 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4618      	mov	r0, r3
 800ee18:	f005 ff33 	bl	8014c82 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	2200      	movs	r2, #0
 800ee20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800ee24:	2300      	movs	r3, #0
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ee2e:	b590      	push	{r4, r7, lr}
 800ee30:	b08d      	sub	sp, #52	; 0x34
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee3c:	6a3b      	ldr	r3, [r7, #32]
 800ee3e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	4618      	mov	r0, r3
 800ee46:	f005 fff1 	bl	8014e2c <USB_GetMode>
 800ee4a:	4603      	mov	r3, r0
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	f040 839d 	bne.w	800f58c <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	4618      	mov	r0, r3
 800ee58:	f005 ff55 	bl	8014d06 <USB_ReadInterrupts>
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	f000 8393 	beq.w	800f58a <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f005 ff4c 	bl	8014d06 <USB_ReadInterrupts>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f003 0302 	and.w	r3, r3, #2
 800ee74:	2b02      	cmp	r3, #2
 800ee76:	d107      	bne.n	800ee88 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	695a      	ldr	r2, [r3, #20]
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	f002 0202 	and.w	r2, r2, #2
 800ee86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	f005 ff3a 	bl	8014d06 <USB_ReadInterrupts>
 800ee92:	4603      	mov	r3, r0
 800ee94:	f003 0310 	and.w	r3, r3, #16
 800ee98:	2b10      	cmp	r3, #16
 800ee9a:	d161      	bne.n	800ef60 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	699a      	ldr	r2, [r3, #24]
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	f022 0210 	bic.w	r2, r2, #16
 800eeaa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800eeac:	6a3b      	ldr	r3, [r7, #32]
 800eeae:	6a1b      	ldr	r3, [r3, #32]
 800eeb0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800eeb2:	69bb      	ldr	r3, [r7, #24]
 800eeb4:	f003 020f 	and.w	r2, r3, #15
 800eeb8:	4613      	mov	r3, r2
 800eeba:	00db      	lsls	r3, r3, #3
 800eebc:	1a9b      	subs	r3, r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	4413      	add	r3, r2
 800eec8:	3304      	adds	r3, #4
 800eeca:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	0c5b      	lsrs	r3, r3, #17
 800eed0:	f003 030f 	and.w	r3, r3, #15
 800eed4:	2b02      	cmp	r3, #2
 800eed6:	d124      	bne.n	800ef22 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800eed8:	69ba      	ldr	r2, [r7, #24]
 800eeda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800eede:	4013      	ands	r3, r2
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d035      	beq.n	800ef50 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800eee8:	69bb      	ldr	r3, [r7, #24]
 800eeea:	091b      	lsrs	r3, r3, #4
 800eeec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800eeee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800eef2:	b29b      	uxth	r3, r3
 800eef4:	461a      	mov	r2, r3
 800eef6:	6a38      	ldr	r0, [r7, #32]
 800eef8:	f005 fda0 	bl	8014a3c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800eefc:	697b      	ldr	r3, [r7, #20]
 800eefe:	68da      	ldr	r2, [r3, #12]
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	091b      	lsrs	r3, r3, #4
 800ef04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef08:	441a      	add	r2, r3
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef0e:	697b      	ldr	r3, [r7, #20]
 800ef10:	699a      	ldr	r2, [r3, #24]
 800ef12:	69bb      	ldr	r3, [r7, #24]
 800ef14:	091b      	lsrs	r3, r3, #4
 800ef16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef1a:	441a      	add	r2, r3
 800ef1c:	697b      	ldr	r3, [r7, #20]
 800ef1e:	619a      	str	r2, [r3, #24]
 800ef20:	e016      	b.n	800ef50 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	0c5b      	lsrs	r3, r3, #17
 800ef26:	f003 030f 	and.w	r3, r3, #15
 800ef2a:	2b06      	cmp	r3, #6
 800ef2c:	d110      	bne.n	800ef50 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800ef34:	2208      	movs	r2, #8
 800ef36:	4619      	mov	r1, r3
 800ef38:	6a38      	ldr	r0, [r7, #32]
 800ef3a:	f005 fd7f 	bl	8014a3c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800ef3e:	697b      	ldr	r3, [r7, #20]
 800ef40:	699a      	ldr	r2, [r3, #24]
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	091b      	lsrs	r3, r3, #4
 800ef46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ef4a:	441a      	add	r2, r3
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699a      	ldr	r2, [r3, #24]
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	f042 0210 	orr.w	r2, r2, #16
 800ef5e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	4618      	mov	r0, r3
 800ef66:	f005 fece 	bl	8014d06 <USB_ReadInterrupts>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ef70:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800ef74:	d16e      	bne.n	800f054 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800ef76:	2300      	movs	r3, #0
 800ef78:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	f005 fed4 	bl	8014d2c <USB_ReadDevAllOutEpInterrupt>
 800ef84:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800ef86:	e062      	b.n	800f04e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800ef88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef8a:	f003 0301 	and.w	r3, r3, #1
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d057      	beq.n	800f042 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	681b      	ldr	r3, [r3, #0]
 800ef96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef98:	b2d2      	uxtb	r2, r2
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f005 fef9 	bl	8014d94 <USB_ReadDevOutEPInterrupt>
 800efa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800efa4:	693b      	ldr	r3, [r7, #16]
 800efa6:	f003 0301 	and.w	r3, r3, #1
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00c      	beq.n	800efc8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800efae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efb0:	015a      	lsls	r2, r3, #5
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	4413      	add	r3, r2
 800efb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efba:	461a      	mov	r2, r3
 800efbc:	2301      	movs	r3, #1
 800efbe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800efc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f000 fdde 	bl	800fb84 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800efc8:	693b      	ldr	r3, [r7, #16]
 800efca:	f003 0308 	and.w	r3, r3, #8
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d00c      	beq.n	800efec <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800efd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800efd4:	015a      	lsls	r2, r3, #5
 800efd6:	69fb      	ldr	r3, [r7, #28]
 800efd8:	4413      	add	r3, r2
 800efda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800efde:	461a      	mov	r2, r3
 800efe0:	2308      	movs	r3, #8
 800efe2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800efe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f000 fed8 	bl	800fd9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800efec:	693b      	ldr	r3, [r7, #16]
 800efee:	f003 0310 	and.w	r3, r3, #16
 800eff2:	2b00      	cmp	r3, #0
 800eff4:	d008      	beq.n	800f008 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800eff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eff8:	015a      	lsls	r2, r3, #5
 800effa:	69fb      	ldr	r3, [r7, #28]
 800effc:	4413      	add	r3, r2
 800effe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f002:	461a      	mov	r2, r3
 800f004:	2310      	movs	r3, #16
 800f006:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	f003 0320 	and.w	r3, r3, #32
 800f00e:	2b00      	cmp	r3, #0
 800f010:	d008      	beq.n	800f024 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f014:	015a      	lsls	r2, r3, #5
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	4413      	add	r3, r2
 800f01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f01e:	461a      	mov	r2, r3
 800f020:	2320      	movs	r3, #32
 800f022:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d009      	beq.n	800f042 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f02e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f030:	015a      	lsls	r2, r3, #5
 800f032:	69fb      	ldr	r3, [r7, #28]
 800f034:	4413      	add	r3, r2
 800f036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f03a:	461a      	mov	r2, r3
 800f03c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f040:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f044:	3301      	adds	r3, #1
 800f046:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f04a:	085b      	lsrs	r3, r3, #1
 800f04c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f04e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f050:	2b00      	cmp	r3, #0
 800f052:	d199      	bne.n	800ef88 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	4618      	mov	r0, r3
 800f05a:	f005 fe54 	bl	8014d06 <USB_ReadInterrupts>
 800f05e:	4603      	mov	r3, r0
 800f060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f064:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f068:	f040 80c0 	bne.w	800f1ec <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	4618      	mov	r0, r3
 800f072:	f005 fe75 	bl	8014d60 <USB_ReadDevAllInEpInterrupt>
 800f076:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f078:	2300      	movs	r3, #0
 800f07a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f07c:	e0b2      	b.n	800f1e4 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f080:	f003 0301 	and.w	r3, r3, #1
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 80a7 	beq.w	800f1d8 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f090:	b2d2      	uxtb	r2, r2
 800f092:	4611      	mov	r1, r2
 800f094:	4618      	mov	r0, r3
 800f096:	f005 fe9b 	bl	8014dd0 <USB_ReadDevInEPInterrupt>
 800f09a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f09c:	693b      	ldr	r3, [r7, #16]
 800f09e:	f003 0301 	and.w	r3, r3, #1
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d057      	beq.n	800f156 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a8:	f003 030f 	and.w	r3, r3, #15
 800f0ac:	2201      	movs	r2, #1
 800f0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f0b2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f0b4:	69fb      	ldr	r3, [r7, #28]
 800f0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f0ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	43db      	mvns	r3, r3
 800f0c0:	69f9      	ldr	r1, [r7, #28]
 800f0c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f0c6:	4013      	ands	r3, r2
 800f0c8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0cc:	015a      	lsls	r2, r3, #5
 800f0ce:	69fb      	ldr	r3, [r7, #28]
 800f0d0:	4413      	add	r3, r2
 800f0d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f0d6:	461a      	mov	r2, r3
 800f0d8:	2301      	movs	r3, #1
 800f0da:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	691b      	ldr	r3, [r3, #16]
 800f0e0:	2b01      	cmp	r3, #1
 800f0e2:	d132      	bne.n	800f14a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f0e4:	6879      	ldr	r1, [r7, #4]
 800f0e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	00db      	lsls	r3, r3, #3
 800f0ec:	1a9b      	subs	r3, r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	440b      	add	r3, r1
 800f0f2:	3348      	adds	r3, #72	; 0x48
 800f0f4:	6819      	ldr	r1, [r3, #0]
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	00db      	lsls	r3, r3, #3
 800f0fe:	1a9b      	subs	r3, r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4403      	add	r3, r0
 800f104:	3344      	adds	r3, #68	; 0x44
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	4419      	add	r1, r3
 800f10a:	6878      	ldr	r0, [r7, #4]
 800f10c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f10e:	4613      	mov	r3, r2
 800f110:	00db      	lsls	r3, r3, #3
 800f112:	1a9b      	subs	r3, r3, r2
 800f114:	009b      	lsls	r3, r3, #2
 800f116:	4403      	add	r3, r0
 800f118:	3348      	adds	r3, #72	; 0x48
 800f11a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d113      	bne.n	800f14a <HAL_PCD_IRQHandler+0x31c>
 800f122:	6879      	ldr	r1, [r7, #4]
 800f124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f126:	4613      	mov	r3, r2
 800f128:	00db      	lsls	r3, r3, #3
 800f12a:	1a9b      	subs	r3, r3, r2
 800f12c:	009b      	lsls	r3, r3, #2
 800f12e:	440b      	add	r3, r1
 800f130:	3350      	adds	r3, #80	; 0x50
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d108      	bne.n	800f14a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	6818      	ldr	r0, [r3, #0]
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f142:	461a      	mov	r2, r3
 800f144:	2101      	movs	r1, #1
 800f146:	f005 fea3 	bl	8014e90 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f14c:	b2db      	uxtb	r3, r3
 800f14e:	4619      	mov	r1, r3
 800f150:	6878      	ldr	r0, [r7, #4]
 800f152:	f7f9 ffba 	bl	80090ca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	f003 0308 	and.w	r3, r3, #8
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d008      	beq.n	800f172 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	015a      	lsls	r2, r3, #5
 800f164:	69fb      	ldr	r3, [r7, #28]
 800f166:	4413      	add	r3, r2
 800f168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f16c:	461a      	mov	r2, r3
 800f16e:	2308      	movs	r3, #8
 800f170:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f172:	693b      	ldr	r3, [r7, #16]
 800f174:	f003 0310 	and.w	r3, r3, #16
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d008      	beq.n	800f18e <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f17c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f17e:	015a      	lsls	r2, r3, #5
 800f180:	69fb      	ldr	r3, [r7, #28]
 800f182:	4413      	add	r3, r2
 800f184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f188:	461a      	mov	r2, r3
 800f18a:	2310      	movs	r3, #16
 800f18c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f18e:	693b      	ldr	r3, [r7, #16]
 800f190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f194:	2b00      	cmp	r3, #0
 800f196:	d008      	beq.n	800f1aa <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19a:	015a      	lsls	r2, r3, #5
 800f19c:	69fb      	ldr	r3, [r7, #28]
 800f19e:	4413      	add	r3, r2
 800f1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1a4:	461a      	mov	r2, r3
 800f1a6:	2340      	movs	r3, #64	; 0x40
 800f1a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	f003 0302 	and.w	r3, r3, #2
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d008      	beq.n	800f1c6 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b6:	015a      	lsls	r2, r3, #5
 800f1b8:	69fb      	ldr	r3, [r7, #28]
 800f1ba:	4413      	add	r3, r2
 800f1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f1c0:	461a      	mov	r2, r3
 800f1c2:	2302      	movs	r3, #2
 800f1c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d003      	beq.n	800f1d8 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f1d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f1d2:	6878      	ldr	r0, [r7, #4]
 800f1d4:	f000 fc48 	bl	800fa68 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1da:	3301      	adds	r3, #1
 800f1dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f1de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e0:	085b      	lsrs	r3, r3, #1
 800f1e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f1e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f47f af49 	bne.w	800f07e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f005 fd88 	bl	8014d06 <USB_ReadInterrupts>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f200:	d122      	bne.n	800f248 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f202:	69fb      	ldr	r3, [r7, #28]
 800f204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f208:	685b      	ldr	r3, [r3, #4]
 800f20a:	69fa      	ldr	r2, [r7, #28]
 800f20c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f210:	f023 0301 	bic.w	r3, r3, #1
 800f214:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800f21c:	2b01      	cmp	r3, #1
 800f21e:	d108      	bne.n	800f232 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2200      	movs	r2, #0
 800f224:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f228:	2100      	movs	r1, #0
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f000 fe54 	bl	800fed8 <HAL_PCDEx_LPM_Callback>
 800f230:	e002      	b.n	800f238 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f232:	6878      	ldr	r0, [r7, #4]
 800f234:	f7f9 ffb6 	bl	80091a4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	695a      	ldr	r2, [r3, #20]
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f246:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	4618      	mov	r0, r3
 800f24e:	f005 fd5a 	bl	8014d06 <USB_ReadInterrupts>
 800f252:	4603      	mov	r3, r0
 800f254:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f258:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f25c:	d112      	bne.n	800f284 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f264:	689b      	ldr	r3, [r3, #8]
 800f266:	f003 0301 	and.w	r3, r3, #1
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d102      	bne.n	800f274 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f26e:	6878      	ldr	r0, [r7, #4]
 800f270:	f7f9 ff72 	bl	8009158 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	695a      	ldr	r2, [r3, #20]
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f282:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	4618      	mov	r0, r3
 800f28a:	f005 fd3c 	bl	8014d06 <USB_ReadInterrupts>
 800f28e:	4603      	mov	r3, r0
 800f290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f298:	f040 80c7 	bne.w	800f42a <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f2a2:	685b      	ldr	r3, [r3, #4]
 800f2a4:	69fa      	ldr	r2, [r7, #28]
 800f2a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f2aa:	f023 0301 	bic.w	r3, r3, #1
 800f2ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	2110      	movs	r1, #16
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	f004 fe0a 	bl	8013ed0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f2c0:	e056      	b.n	800f370 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2c4:	015a      	lsls	r2, r3, #5
 800f2c6:	69fb      	ldr	r3, [r7, #28]
 800f2c8:	4413      	add	r3, r2
 800f2ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ce:	461a      	mov	r2, r3
 800f2d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f2d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f2d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2d8:	015a      	lsls	r2, r3, #5
 800f2da:	69fb      	ldr	r3, [r7, #28]
 800f2dc:	4413      	add	r3, r2
 800f2de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2e6:	0151      	lsls	r1, r2, #5
 800f2e8:	69fa      	ldr	r2, [r7, #28]
 800f2ea:	440a      	add	r2, r1
 800f2ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f2f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f2f4:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2f8:	015a      	lsls	r2, r3, #5
 800f2fa:	69fb      	ldr	r3, [r7, #28]
 800f2fc:	4413      	add	r3, r2
 800f2fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f306:	0151      	lsls	r1, r2, #5
 800f308:	69fa      	ldr	r2, [r7, #28]
 800f30a:	440a      	add	r2, r1
 800f30c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f310:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f314:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f318:	015a      	lsls	r2, r3, #5
 800f31a:	69fb      	ldr	r3, [r7, #28]
 800f31c:	4413      	add	r3, r2
 800f31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f322:	461a      	mov	r2, r3
 800f324:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f328:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f32c:	015a      	lsls	r2, r3, #5
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	4413      	add	r3, r2
 800f332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f33a:	0151      	lsls	r1, r2, #5
 800f33c:	69fa      	ldr	r2, [r7, #28]
 800f33e:	440a      	add	r2, r1
 800f340:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f344:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f348:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	4413      	add	r3, r2
 800f352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f35a:	0151      	lsls	r1, r2, #5
 800f35c:	69fa      	ldr	r2, [r7, #28]
 800f35e:	440a      	add	r2, r1
 800f360:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f364:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f368:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f36c:	3301      	adds	r3, #1
 800f36e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	685b      	ldr	r3, [r3, #4]
 800f374:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f376:	429a      	cmp	r2, r3
 800f378:	d3a3      	bcc.n	800f2c2 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f380:	69db      	ldr	r3, [r3, #28]
 800f382:	69fa      	ldr	r2, [r7, #28]
 800f384:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f388:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f38c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f392:	2b00      	cmp	r3, #0
 800f394:	d016      	beq.n	800f3c4 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f396:	69fb      	ldr	r3, [r7, #28]
 800f398:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f39c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f3a0:	69fa      	ldr	r2, [r7, #28]
 800f3a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3a6:	f043 030b 	orr.w	r3, r3, #11
 800f3aa:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f3ae:	69fb      	ldr	r3, [r7, #28]
 800f3b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f3b6:	69fa      	ldr	r2, [r7, #28]
 800f3b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3bc:	f043 030b 	orr.w	r3, r3, #11
 800f3c0:	6453      	str	r3, [r2, #68]	; 0x44
 800f3c2:	e015      	b.n	800f3f0 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ca:	695b      	ldr	r3, [r3, #20]
 800f3cc:	69fa      	ldr	r2, [r7, #28]
 800f3ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3d2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f3d6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f3da:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3e2:	691b      	ldr	r3, [r3, #16]
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3ea:	f043 030b 	orr.w	r3, r3, #11
 800f3ee:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	69fa      	ldr	r2, [r7, #28]
 800f3fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3fe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f402:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	6818      	ldr	r0, [r3, #0]
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f414:	461a      	mov	r2, r3
 800f416:	f005 fd3b 	bl	8014e90 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	681b      	ldr	r3, [r3, #0]
 800f41e:	695a      	ldr	r2, [r3, #20]
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800f428:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	4618      	mov	r0, r3
 800f430:	f005 fc69 	bl	8014d06 <USB_ReadInterrupts>
 800f434:	4603      	mov	r3, r0
 800f436:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f43a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f43e:	d124      	bne.n	800f48a <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4618      	mov	r0, r3
 800f446:	f005 fcff 	bl	8014e48 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	4618      	mov	r0, r3
 800f450:	f004 fd9f 	bl	8013f92 <USB_GetDevSpeed>
 800f454:	4603      	mov	r3, r0
 800f456:	461a      	mov	r2, r3
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	681c      	ldr	r4, [r3, #0]
 800f460:	f001 f95a 	bl	8010718 <HAL_RCC_GetHCLKFreq>
 800f464:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800f46a:	b2db      	uxtb	r3, r3
 800f46c:	461a      	mov	r2, r3
 800f46e:	4620      	mov	r0, r4
 800f470:	f004 fadc 	bl	8013a2c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800f474:	6878      	ldr	r0, [r7, #4]
 800f476:	f7f9 fe50 	bl	800911a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	681b      	ldr	r3, [r3, #0]
 800f47e:	695a      	ldr	r2, [r3, #20]
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800f488:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	681b      	ldr	r3, [r3, #0]
 800f48e:	4618      	mov	r0, r3
 800f490:	f005 fc39 	bl	8014d06 <USB_ReadInterrupts>
 800f494:	4603      	mov	r3, r0
 800f496:	f003 0308 	and.w	r3, r3, #8
 800f49a:	2b08      	cmp	r3, #8
 800f49c:	d10a      	bne.n	800f4b4 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7f9 fe2d 	bl	80090fe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	695a      	ldr	r2, [r3, #20]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	f002 0208 	and.w	r2, r2, #8
 800f4b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4618      	mov	r0, r3
 800f4ba:	f005 fc24 	bl	8014d06 <USB_ReadInterrupts>
 800f4be:	4603      	mov	r3, r0
 800f4c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f4c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f4c8:	d10f      	bne.n	800f4ea <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f4ca:	2300      	movs	r3, #0
 800f4cc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d0:	b2db      	uxtb	r3, r3
 800f4d2:	4619      	mov	r1, r3
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f7f9 fe85 	bl	80091e4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	695a      	ldr	r2, [r3, #20]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800f4e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	4618      	mov	r0, r3
 800f4f0:	f005 fc09 	bl	8014d06 <USB_ReadInterrupts>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4fe:	d10f      	bne.n	800f520 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800f500:	2300      	movs	r3, #0
 800f502:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f506:	b2db      	uxtb	r3, r3
 800f508:	4619      	mov	r1, r3
 800f50a:	6878      	ldr	r0, [r7, #4]
 800f50c:	f7f9 fe58 	bl	80091c0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	695a      	ldr	r2, [r3, #20]
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	681b      	ldr	r3, [r3, #0]
 800f51a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800f51e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	4618      	mov	r0, r3
 800f526:	f005 fbee 	bl	8014d06 <USB_ReadInterrupts>
 800f52a:	4603      	mov	r3, r0
 800f52c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f534:	d10a      	bne.n	800f54c <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800f536:	6878      	ldr	r0, [r7, #4]
 800f538:	f7f9 fe66 	bl	8009208 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	695a      	ldr	r2, [r3, #20]
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800f54a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4618      	mov	r0, r3
 800f552:	f005 fbd8 	bl	8014d06 <USB_ReadInterrupts>
 800f556:	4603      	mov	r3, r0
 800f558:	f003 0304 	and.w	r3, r3, #4
 800f55c:	2b04      	cmp	r3, #4
 800f55e:	d115      	bne.n	800f58c <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	685b      	ldr	r3, [r3, #4]
 800f566:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800f568:	69bb      	ldr	r3, [r7, #24]
 800f56a:	f003 0304 	and.w	r3, r3, #4
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d002      	beq.n	800f578 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800f572:	6878      	ldr	r0, [r7, #4]
 800f574:	f7f9 fe56 	bl	8009224 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	6859      	ldr	r1, [r3, #4]
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	681b      	ldr	r3, [r3, #0]
 800f582:	69ba      	ldr	r2, [r7, #24]
 800f584:	430a      	orrs	r2, r1
 800f586:	605a      	str	r2, [r3, #4]
 800f588:	e000      	b.n	800f58c <HAL_PCD_IRQHandler+0x75e>
      return;
 800f58a:	bf00      	nop
    }
  }
}
 800f58c:	3734      	adds	r7, #52	; 0x34
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd90      	pop	{r4, r7, pc}

0800f592 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b082      	sub	sp, #8
 800f596:	af00      	add	r7, sp, #0
 800f598:	6078      	str	r0, [r7, #4]
 800f59a:	460b      	mov	r3, r1
 800f59c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f5a4:	2b01      	cmp	r3, #1
 800f5a6:	d101      	bne.n	800f5ac <HAL_PCD_SetAddress+0x1a>
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	e013      	b.n	800f5d4 <HAL_PCD_SetAddress+0x42>
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	2201      	movs	r2, #1
 800f5b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	78fa      	ldrb	r2, [r7, #3]
 800f5b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	78fa      	ldrb	r2, [r7, #3]
 800f5c2:	4611      	mov	r1, r2
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f005 fb36 	bl	8014c36 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2200      	movs	r2, #0
 800f5ce:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f5d2:	2300      	movs	r3, #0
}
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}

0800f5dc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800f5dc:	b580      	push	{r7, lr}
 800f5de:	b084      	sub	sp, #16
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
 800f5e4:	4608      	mov	r0, r1
 800f5e6:	4611      	mov	r1, r2
 800f5e8:	461a      	mov	r2, r3
 800f5ea:	4603      	mov	r3, r0
 800f5ec:	70fb      	strb	r3, [r7, #3]
 800f5ee:	460b      	mov	r3, r1
 800f5f0:	803b      	strh	r3, [r7, #0]
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f5fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	da0f      	bge.n	800f622 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f602:	78fb      	ldrb	r3, [r7, #3]
 800f604:	f003 020f 	and.w	r2, r3, #15
 800f608:	4613      	mov	r3, r2
 800f60a:	00db      	lsls	r3, r3, #3
 800f60c:	1a9b      	subs	r3, r3, r2
 800f60e:	009b      	lsls	r3, r3, #2
 800f610:	3338      	adds	r3, #56	; 0x38
 800f612:	687a      	ldr	r2, [r7, #4]
 800f614:	4413      	add	r3, r2
 800f616:	3304      	adds	r3, #4
 800f618:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	2201      	movs	r2, #1
 800f61e:	705a      	strb	r2, [r3, #1]
 800f620:	e00f      	b.n	800f642 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f622:	78fb      	ldrb	r3, [r7, #3]
 800f624:	f003 020f 	and.w	r2, r3, #15
 800f628:	4613      	mov	r3, r2
 800f62a:	00db      	lsls	r3, r3, #3
 800f62c:	1a9b      	subs	r3, r3, r2
 800f62e:	009b      	lsls	r3, r3, #2
 800f630:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f634:	687a      	ldr	r2, [r7, #4]
 800f636:	4413      	add	r3, r2
 800f638:	3304      	adds	r3, #4
 800f63a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	2200      	movs	r2, #0
 800f640:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800f642:	78fb      	ldrb	r3, [r7, #3]
 800f644:	f003 030f 	and.w	r3, r3, #15
 800f648:	b2da      	uxtb	r2, r3
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800f64e:	883a      	ldrh	r2, [r7, #0]
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	78ba      	ldrb	r2, [r7, #2]
 800f658:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	785b      	ldrb	r3, [r3, #1]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d004      	beq.n	800f66c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	b29a      	uxth	r2, r3
 800f668:	68fb      	ldr	r3, [r7, #12]
 800f66a:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800f66c:	78bb      	ldrb	r3, [r7, #2]
 800f66e:	2b02      	cmp	r3, #2
 800f670:	d102      	bne.n	800f678 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	2200      	movs	r2, #0
 800f676:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d101      	bne.n	800f686 <HAL_PCD_EP_Open+0xaa>
 800f682:	2302      	movs	r3, #2
 800f684:	e00e      	b.n	800f6a4 <HAL_PCD_EP_Open+0xc8>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	2201      	movs	r2, #1
 800f68a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	68f9      	ldr	r1, [r7, #12]
 800f694:	4618      	mov	r0, r3
 800f696:	f004 fca1 	bl	8013fdc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	2200      	movs	r2, #0
 800f69e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800f6a2:	7afb      	ldrb	r3, [r7, #11]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800f6b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	da0f      	bge.n	800f6e0 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f6c0:	78fb      	ldrb	r3, [r7, #3]
 800f6c2:	f003 020f 	and.w	r2, r3, #15
 800f6c6:	4613      	mov	r3, r2
 800f6c8:	00db      	lsls	r3, r3, #3
 800f6ca:	1a9b      	subs	r3, r3, r2
 800f6cc:	009b      	lsls	r3, r3, #2
 800f6ce:	3338      	adds	r3, #56	; 0x38
 800f6d0:	687a      	ldr	r2, [r7, #4]
 800f6d2:	4413      	add	r3, r2
 800f6d4:	3304      	adds	r3, #4
 800f6d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	2201      	movs	r2, #1
 800f6dc:	705a      	strb	r2, [r3, #1]
 800f6de:	e00f      	b.n	800f700 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	f003 020f 	and.w	r2, r3, #15
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	1a9b      	subs	r3, r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f6f2:	687a      	ldr	r2, [r7, #4]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800f700:	78fb      	ldrb	r3, [r7, #3]
 800f702:	f003 030f 	and.w	r3, r3, #15
 800f706:	b2da      	uxtb	r2, r3
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f712:	2b01      	cmp	r3, #1
 800f714:	d101      	bne.n	800f71a <HAL_PCD_EP_Close+0x6e>
 800f716:	2302      	movs	r3, #2
 800f718:	e00e      	b.n	800f738 <HAL_PCD_EP_Close+0x8c>
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	2201      	movs	r2, #1
 800f71e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	68f9      	ldr	r1, [r7, #12]
 800f728:	4618      	mov	r0, r3
 800f72a:	f004 fcdf 	bl	80140ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	2200      	movs	r2, #0
 800f732:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800f736:	2300      	movs	r3, #0
}
 800f738:	4618      	mov	r0, r3
 800f73a:	3710      	adds	r7, #16
 800f73c:	46bd      	mov	sp, r7
 800f73e:	bd80      	pop	{r7, pc}

0800f740 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f740:	b580      	push	{r7, lr}
 800f742:	b086      	sub	sp, #24
 800f744:	af00      	add	r7, sp, #0
 800f746:	60f8      	str	r0, [r7, #12]
 800f748:	607a      	str	r2, [r7, #4]
 800f74a:	603b      	str	r3, [r7, #0]
 800f74c:	460b      	mov	r3, r1
 800f74e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f750:	7afb      	ldrb	r3, [r7, #11]
 800f752:	f003 020f 	and.w	r2, r3, #15
 800f756:	4613      	mov	r3, r2
 800f758:	00db      	lsls	r3, r3, #3
 800f75a:	1a9b      	subs	r3, r3, r2
 800f75c:	009b      	lsls	r3, r3, #2
 800f75e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f762:	68fa      	ldr	r2, [r7, #12]
 800f764:	4413      	add	r3, r2
 800f766:	3304      	adds	r3, #4
 800f768:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	2200      	movs	r2, #0
 800f77a:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	2200      	movs	r2, #0
 800f780:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f782:	7afb      	ldrb	r3, [r7, #11]
 800f784:	f003 030f 	and.w	r3, r3, #15
 800f788:	b2da      	uxtb	r2, r3
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f78e:	68fb      	ldr	r3, [r7, #12]
 800f790:	691b      	ldr	r3, [r3, #16]
 800f792:	2b01      	cmp	r3, #1
 800f794:	d102      	bne.n	800f79c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f796:	687a      	ldr	r2, [r7, #4]
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f79c:	7afb      	ldrb	r3, [r7, #11]
 800f79e:	f003 030f 	and.w	r3, r3, #15
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d109      	bne.n	800f7ba <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	6818      	ldr	r0, [r3, #0]
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	b2db      	uxtb	r3, r3
 800f7b0:	461a      	mov	r2, r3
 800f7b2:	6979      	ldr	r1, [r7, #20]
 800f7b4:	f004 ffba 	bl	801472c <USB_EP0StartXfer>
 800f7b8:	e008      	b.n	800f7cc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	6818      	ldr	r0, [r3, #0]
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	691b      	ldr	r3, [r3, #16]
 800f7c2:	b2db      	uxtb	r3, r3
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	6979      	ldr	r1, [r7, #20]
 800f7c8:	f004 fd6c 	bl	80142a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f7cc:	2300      	movs	r3, #0
}
 800f7ce:	4618      	mov	r0, r3
 800f7d0:	3718      	adds	r7, #24
 800f7d2:	46bd      	mov	sp, r7
 800f7d4:	bd80      	pop	{r7, pc}

0800f7d6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f7d6:	b480      	push	{r7}
 800f7d8:	b083      	sub	sp, #12
 800f7da:	af00      	add	r7, sp, #0
 800f7dc:	6078      	str	r0, [r7, #4]
 800f7de:	460b      	mov	r3, r1
 800f7e0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800f7e2:	78fb      	ldrb	r3, [r7, #3]
 800f7e4:	f003 020f 	and.w	r2, r3, #15
 800f7e8:	6879      	ldr	r1, [r7, #4]
 800f7ea:	4613      	mov	r3, r2
 800f7ec:	00db      	lsls	r3, r3, #3
 800f7ee:	1a9b      	subs	r3, r3, r2
 800f7f0:	009b      	lsls	r3, r3, #2
 800f7f2:	440b      	add	r3, r1
 800f7f4:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800f7f8:	681b      	ldr	r3, [r3, #0]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	370c      	adds	r7, #12
 800f7fe:	46bd      	mov	sp, r7
 800f800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f804:	4770      	bx	lr

0800f806 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800f806:	b580      	push	{r7, lr}
 800f808:	b086      	sub	sp, #24
 800f80a:	af00      	add	r7, sp, #0
 800f80c:	60f8      	str	r0, [r7, #12]
 800f80e:	607a      	str	r2, [r7, #4]
 800f810:	603b      	str	r3, [r7, #0]
 800f812:	460b      	mov	r3, r1
 800f814:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f816:	7afb      	ldrb	r3, [r7, #11]
 800f818:	f003 020f 	and.w	r2, r3, #15
 800f81c:	4613      	mov	r3, r2
 800f81e:	00db      	lsls	r3, r3, #3
 800f820:	1a9b      	subs	r3, r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	3338      	adds	r3, #56	; 0x38
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	4413      	add	r3, r2
 800f82a:	3304      	adds	r3, #4
 800f82c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800f82e:	697b      	ldr	r3, [r7, #20]
 800f830:	687a      	ldr	r2, [r7, #4]
 800f832:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	683a      	ldr	r2, [r7, #0]
 800f838:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	2200      	movs	r2, #0
 800f83e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2201      	movs	r2, #1
 800f844:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f846:	7afb      	ldrb	r3, [r7, #11]
 800f848:	f003 030f 	and.w	r3, r3, #15
 800f84c:	b2da      	uxtb	r2, r3
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	691b      	ldr	r3, [r3, #16]
 800f856:	2b01      	cmp	r3, #1
 800f858:	d102      	bne.n	800f860 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800f85a:	687a      	ldr	r2, [r7, #4]
 800f85c:	697b      	ldr	r3, [r7, #20]
 800f85e:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f860:	7afb      	ldrb	r3, [r7, #11]
 800f862:	f003 030f 	and.w	r3, r3, #15
 800f866:	2b00      	cmp	r3, #0
 800f868:	d109      	bne.n	800f87e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	6818      	ldr	r0, [r3, #0]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	691b      	ldr	r3, [r3, #16]
 800f872:	b2db      	uxtb	r3, r3
 800f874:	461a      	mov	r2, r3
 800f876:	6979      	ldr	r1, [r7, #20]
 800f878:	f004 ff58 	bl	801472c <USB_EP0StartXfer>
 800f87c:	e008      	b.n	800f890 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	6818      	ldr	r0, [r3, #0]
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	691b      	ldr	r3, [r3, #16]
 800f886:	b2db      	uxtb	r3, r3
 800f888:	461a      	mov	r2, r3
 800f88a:	6979      	ldr	r1, [r7, #20]
 800f88c:	f004 fd0a 	bl	80142a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 800f890:	2300      	movs	r3, #0
}
 800f892:	4618      	mov	r0, r3
 800f894:	3718      	adds	r7, #24
 800f896:	46bd      	mov	sp, r7
 800f898:	bd80      	pop	{r7, pc}

0800f89a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f89a:	b580      	push	{r7, lr}
 800f89c:	b084      	sub	sp, #16
 800f89e:	af00      	add	r7, sp, #0
 800f8a0:	6078      	str	r0, [r7, #4]
 800f8a2:	460b      	mov	r3, r1
 800f8a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800f8a6:	78fb      	ldrb	r3, [r7, #3]
 800f8a8:	f003 020f 	and.w	r2, r3, #15
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	685b      	ldr	r3, [r3, #4]
 800f8b0:	429a      	cmp	r2, r3
 800f8b2:	d901      	bls.n	800f8b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e050      	b.n	800f95a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f8b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f8bc:	2b00      	cmp	r3, #0
 800f8be:	da0f      	bge.n	800f8e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f8c0:	78fb      	ldrb	r3, [r7, #3]
 800f8c2:	f003 020f 	and.w	r2, r3, #15
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	00db      	lsls	r3, r3, #3
 800f8ca:	1a9b      	subs	r3, r3, r2
 800f8cc:	009b      	lsls	r3, r3, #2
 800f8ce:	3338      	adds	r3, #56	; 0x38
 800f8d0:	687a      	ldr	r2, [r7, #4]
 800f8d2:	4413      	add	r3, r2
 800f8d4:	3304      	adds	r3, #4
 800f8d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	2201      	movs	r2, #1
 800f8dc:	705a      	strb	r2, [r3, #1]
 800f8de:	e00d      	b.n	800f8fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800f8e0:	78fa      	ldrb	r2, [r7, #3]
 800f8e2:	4613      	mov	r3, r2
 800f8e4:	00db      	lsls	r3, r3, #3
 800f8e6:	1a9b      	subs	r3, r3, r2
 800f8e8:	009b      	lsls	r3, r3, #2
 800f8ea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	4413      	add	r3, r2
 800f8f2:	3304      	adds	r3, #4
 800f8f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	2201      	movs	r2, #1
 800f900:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f902:	78fb      	ldrb	r3, [r7, #3]
 800f904:	f003 030f 	and.w	r3, r3, #15
 800f908:	b2da      	uxtb	r2, r3
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f914:	2b01      	cmp	r3, #1
 800f916:	d101      	bne.n	800f91c <HAL_PCD_EP_SetStall+0x82>
 800f918:	2302      	movs	r3, #2
 800f91a:	e01e      	b.n	800f95a <HAL_PCD_EP_SetStall+0xc0>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2201      	movs	r2, #1
 800f920:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	68f9      	ldr	r1, [r7, #12]
 800f92a:	4618      	mov	r0, r3
 800f92c:	f005 f8af 	bl	8014a8e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	f003 030f 	and.w	r3, r3, #15
 800f936:	2b00      	cmp	r3, #0
 800f938:	d10a      	bne.n	800f950 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	6818      	ldr	r0, [r3, #0]
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	691b      	ldr	r3, [r3, #16]
 800f942:	b2d9      	uxtb	r1, r3
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800f94a:	461a      	mov	r2, r3
 800f94c:	f005 faa0 	bl	8014e90 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800f958:	2300      	movs	r3, #0
}
 800f95a:	4618      	mov	r0, r3
 800f95c:	3710      	adds	r7, #16
 800f95e:	46bd      	mov	sp, r7
 800f960:	bd80      	pop	{r7, pc}

0800f962 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800f962:	b580      	push	{r7, lr}
 800f964:	b084      	sub	sp, #16
 800f966:	af00      	add	r7, sp, #0
 800f968:	6078      	str	r0, [r7, #4]
 800f96a:	460b      	mov	r3, r1
 800f96c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800f96e:	78fb      	ldrb	r3, [r7, #3]
 800f970:	f003 020f 	and.w	r2, r3, #15
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d901      	bls.n	800f980 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800f97c:	2301      	movs	r3, #1
 800f97e:	e042      	b.n	800fa06 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800f980:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f984:	2b00      	cmp	r3, #0
 800f986:	da0f      	bge.n	800f9a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800f988:	78fb      	ldrb	r3, [r7, #3]
 800f98a:	f003 020f 	and.w	r2, r3, #15
 800f98e:	4613      	mov	r3, r2
 800f990:	00db      	lsls	r3, r3, #3
 800f992:	1a9b      	subs	r3, r3, r2
 800f994:	009b      	lsls	r3, r3, #2
 800f996:	3338      	adds	r3, #56	; 0x38
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	4413      	add	r3, r2
 800f99c:	3304      	adds	r3, #4
 800f99e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	705a      	strb	r2, [r3, #1]
 800f9a6:	e00f      	b.n	800f9c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800f9a8:	78fb      	ldrb	r3, [r7, #3]
 800f9aa:	f003 020f 	and.w	r2, r3, #15
 800f9ae:	4613      	mov	r3, r2
 800f9b0:	00db      	lsls	r3, r3, #3
 800f9b2:	1a9b      	subs	r3, r3, r2
 800f9b4:	009b      	lsls	r3, r3, #2
 800f9b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800f9ba:	687a      	ldr	r2, [r7, #4]
 800f9bc:	4413      	add	r3, r2
 800f9be:	3304      	adds	r3, #4
 800f9c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	2200      	movs	r2, #0
 800f9c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800f9ce:	78fb      	ldrb	r3, [r7, #3]
 800f9d0:	f003 030f 	and.w	r3, r3, #15
 800f9d4:	b2da      	uxtb	r2, r3
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800f9e0:	2b01      	cmp	r3, #1
 800f9e2:	d101      	bne.n	800f9e8 <HAL_PCD_EP_ClrStall+0x86>
 800f9e4:	2302      	movs	r3, #2
 800f9e6:	e00e      	b.n	800fa06 <HAL_PCD_EP_ClrStall+0xa4>
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2201      	movs	r2, #1
 800f9ec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	68f9      	ldr	r1, [r7, #12]
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	f005 f8b7 	bl	8014b6a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	3710      	adds	r7, #16
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	bd80      	pop	{r7, pc}

0800fa0e <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fa0e:	b580      	push	{r7, lr}
 800fa10:	b082      	sub	sp, #8
 800fa12:	af00      	add	r7, sp, #0
 800fa14:	6078      	str	r0, [r7, #4]
 800fa16:	460b      	mov	r3, r1
 800fa18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d101      	bne.n	800fa28 <HAL_PCD_EP_Flush+0x1a>
 800fa24:	2302      	movs	r3, #2
 800fa26:	e01b      	b.n	800fa60 <HAL_PCD_EP_Flush+0x52>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 800fa30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	da09      	bge.n	800fa4c <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681a      	ldr	r2, [r3, #0]
 800fa3c:	78fb      	ldrb	r3, [r7, #3]
 800fa3e:	f003 030f 	and.w	r3, r3, #15
 800fa42:	4619      	mov	r1, r3
 800fa44:	4610      	mov	r0, r2
 800fa46:	f004 fa43 	bl	8013ed0 <USB_FlushTxFifo>
 800fa4a:	e004      	b.n	800fa56 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	681b      	ldr	r3, [r3, #0]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f004 fa63 	bl	8013f1c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	2200      	movs	r2, #0
 800fa5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800fa5e:	2300      	movs	r3, #0
}
 800fa60:	4618      	mov	r0, r3
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fa68:	b580      	push	{r7, lr}
 800fa6a:	b08a      	sub	sp, #40	; 0x28
 800fa6c:	af02      	add	r7, sp, #8
 800fa6e:	6078      	str	r0, [r7, #4]
 800fa70:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800fa7c:	683a      	ldr	r2, [r7, #0]
 800fa7e:	4613      	mov	r3, r2
 800fa80:	00db      	lsls	r3, r3, #3
 800fa82:	1a9b      	subs	r3, r3, r2
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	3338      	adds	r3, #56	; 0x38
 800fa88:	687a      	ldr	r2, [r7, #4]
 800fa8a:	4413      	add	r3, r2
 800fa8c:	3304      	adds	r3, #4
 800fa8e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	699a      	ldr	r2, [r3, #24]
 800fa94:	68fb      	ldr	r3, [r7, #12]
 800fa96:	695b      	ldr	r3, [r3, #20]
 800fa98:	429a      	cmp	r2, r3
 800fa9a:	d901      	bls.n	800faa0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	e06c      	b.n	800fb7a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	695a      	ldr	r2, [r3, #20]
 800faa4:	68fb      	ldr	r3, [r7, #12]
 800faa6:	699b      	ldr	r3, [r3, #24]
 800faa8:	1ad3      	subs	r3, r2, r3
 800faaa:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	689b      	ldr	r3, [r3, #8]
 800fab0:	69fa      	ldr	r2, [r7, #28]
 800fab2:	429a      	cmp	r2, r3
 800fab4:	d902      	bls.n	800fabc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	689b      	ldr	r3, [r3, #8]
 800faba:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	3303      	adds	r3, #3
 800fac0:	089b      	lsrs	r3, r3, #2
 800fac2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fac4:	e02b      	b.n	800fb1e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	695a      	ldr	r2, [r3, #20]
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	699b      	ldr	r3, [r3, #24]
 800face:	1ad3      	subs	r3, r2, r3
 800fad0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	689b      	ldr	r3, [r3, #8]
 800fad6:	69fa      	ldr	r2, [r7, #28]
 800fad8:	429a      	cmp	r2, r3
 800fada:	d902      	bls.n	800fae2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	3303      	adds	r3, #3
 800fae6:	089b      	lsrs	r3, r3, #2
 800fae8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	68d9      	ldr	r1, [r3, #12]
 800faee:	683b      	ldr	r3, [r7, #0]
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	4603      	mov	r3, r0
 800fb00:	6978      	ldr	r0, [r7, #20]
 800fb02:	f004 ff66 	bl	80149d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	68da      	ldr	r2, [r3, #12]
 800fb0a:	69fb      	ldr	r3, [r7, #28]
 800fb0c:	441a      	add	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	699a      	ldr	r2, [r3, #24]
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	441a      	add	r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	015a      	lsls	r2, r3, #5
 800fb22:	693b      	ldr	r3, [r7, #16]
 800fb24:	4413      	add	r3, r2
 800fb26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb2a:	699b      	ldr	r3, [r3, #24]
 800fb2c:	b29b      	uxth	r3, r3
 800fb2e:	69ba      	ldr	r2, [r7, #24]
 800fb30:	429a      	cmp	r2, r3
 800fb32:	d809      	bhi.n	800fb48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	699a      	ldr	r2, [r3, #24]
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d203      	bcs.n	800fb48 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	695b      	ldr	r3, [r3, #20]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d1be      	bne.n	800fac6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	695a      	ldr	r2, [r3, #20]
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	699b      	ldr	r3, [r3, #24]
 800fb50:	429a      	cmp	r2, r3
 800fb52:	d811      	bhi.n	800fb78 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800fb54:	683b      	ldr	r3, [r7, #0]
 800fb56:	f003 030f 	and.w	r3, r3, #15
 800fb5a:	2201      	movs	r2, #1
 800fb5c:	fa02 f303 	lsl.w	r3, r2, r3
 800fb60:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	43db      	mvns	r3, r3
 800fb6e:	6939      	ldr	r1, [r7, #16]
 800fb70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fb74:	4013      	ands	r3, r2
 800fb76:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800fb78:	2300      	movs	r3, #0
}
 800fb7a:	4618      	mov	r0, r3
 800fb7c:	3720      	adds	r7, #32
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fb84:	b580      	push	{r7, lr}
 800fb86:	b086      	sub	sp, #24
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
 800fb8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb94:	697b      	ldr	r3, [r7, #20]
 800fb96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fb98:	697b      	ldr	r3, [r7, #20]
 800fb9a:	333c      	adds	r3, #60	; 0x3c
 800fb9c:	3304      	adds	r3, #4
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fba2:	683b      	ldr	r3, [r7, #0]
 800fba4:	015a      	lsls	r2, r3, #5
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	4413      	add	r3, r2
 800fbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbae:	689b      	ldr	r3, [r3, #8]
 800fbb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	691b      	ldr	r3, [r3, #16]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	f040 80a0 	bne.w	800fcfc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	f003 0308 	and.w	r3, r3, #8
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d015      	beq.n	800fbf2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	4a72      	ldr	r2, [pc, #456]	; (800fd94 <PCD_EP_OutXfrComplete_int+0x210>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	f240 80dd 	bls.w	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	f000 80d7 	beq.w	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fbdc:	683b      	ldr	r3, [r7, #0]
 800fbde:	015a      	lsls	r2, r3, #5
 800fbe0:	693b      	ldr	r3, [r7, #16]
 800fbe2:	4413      	add	r3, r2
 800fbe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbe8:	461a      	mov	r2, r3
 800fbea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbee:	6093      	str	r3, [r2, #8]
 800fbf0:	e0cb      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	f003 0320 	and.w	r3, r3, #32
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d009      	beq.n	800fc10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	015a      	lsls	r2, r3, #5
 800fc00:	693b      	ldr	r3, [r7, #16]
 800fc02:	4413      	add	r3, r2
 800fc04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc08:	461a      	mov	r2, r3
 800fc0a:	2320      	movs	r3, #32
 800fc0c:	6093      	str	r3, [r2, #8]
 800fc0e:	e0bc      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800fc10:	68bb      	ldr	r3, [r7, #8]
 800fc12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	f040 80b7 	bne.w	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	4a5d      	ldr	r2, [pc, #372]	; (800fd94 <PCD_EP_OutXfrComplete_int+0x210>)
 800fc20:	4293      	cmp	r3, r2
 800fc22:	d90f      	bls.n	800fc44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fc24:	68bb      	ldr	r3, [r7, #8]
 800fc26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d00a      	beq.n	800fc44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	015a      	lsls	r2, r3, #5
 800fc32:	693b      	ldr	r3, [r7, #16]
 800fc34:	4413      	add	r3, r2
 800fc36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc3a:	461a      	mov	r2, r3
 800fc3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fc40:	6093      	str	r3, [r2, #8]
 800fc42:	e0a2      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800fc44:	6879      	ldr	r1, [r7, #4]
 800fc46:	683a      	ldr	r2, [r7, #0]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	00db      	lsls	r3, r3, #3
 800fc4c:	1a9b      	subs	r3, r3, r2
 800fc4e:	009b      	lsls	r3, r3, #2
 800fc50:	440b      	add	r3, r1
 800fc52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fc56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800fc58:	683b      	ldr	r3, [r7, #0]
 800fc5a:	0159      	lsls	r1, r3, #5
 800fc5c:	693b      	ldr	r3, [r7, #16]
 800fc5e:	440b      	add	r3, r1
 800fc60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc64:	691b      	ldr	r3, [r3, #16]
 800fc66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800fc6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	683a      	ldr	r2, [r7, #0]
 800fc70:	4613      	mov	r3, r2
 800fc72:	00db      	lsls	r3, r3, #3
 800fc74:	1a9b      	subs	r3, r3, r2
 800fc76:	009b      	lsls	r3, r3, #2
 800fc78:	4403      	add	r3, r0
 800fc7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800fc7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800fc80:	6879      	ldr	r1, [r7, #4]
 800fc82:	683a      	ldr	r2, [r7, #0]
 800fc84:	4613      	mov	r3, r2
 800fc86:	00db      	lsls	r3, r3, #3
 800fc88:	1a9b      	subs	r3, r3, r2
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	440b      	add	r3, r1
 800fc8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	683a      	ldr	r2, [r7, #0]
 800fc98:	4613      	mov	r3, r2
 800fc9a:	00db      	lsls	r3, r3, #3
 800fc9c:	1a9b      	subs	r3, r3, r2
 800fc9e:	009b      	lsls	r3, r3, #2
 800fca0:	4403      	add	r3, r0
 800fca2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	4419      	add	r1, r3
 800fcaa:	6878      	ldr	r0, [r7, #4]
 800fcac:	683a      	ldr	r2, [r7, #0]
 800fcae:	4613      	mov	r3, r2
 800fcb0:	00db      	lsls	r3, r3, #3
 800fcb2:	1a9b      	subs	r3, r3, r2
 800fcb4:	009b      	lsls	r3, r3, #2
 800fcb6:	4403      	add	r3, r0
 800fcb8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fcbc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d114      	bne.n	800fcee <PCD_EP_OutXfrComplete_int+0x16a>
 800fcc4:	6879      	ldr	r1, [r7, #4]
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	4613      	mov	r3, r2
 800fcca:	00db      	lsls	r3, r3, #3
 800fccc:	1a9b      	subs	r3, r3, r2
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	440b      	add	r3, r1
 800fcd2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d108      	bne.n	800fcee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	6818      	ldr	r0, [r3, #0]
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fce6:	461a      	mov	r2, r3
 800fce8:	2101      	movs	r1, #1
 800fcea:	f005 f8d1 	bl	8014e90 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fcee:	683b      	ldr	r3, [r7, #0]
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	4619      	mov	r1, r3
 800fcf4:	6878      	ldr	r0, [r7, #4]
 800fcf6:	f7f9 f9cd 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 800fcfa:	e046      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	4a26      	ldr	r2, [pc, #152]	; (800fd98 <PCD_EP_OutXfrComplete_int+0x214>)
 800fd00:	4293      	cmp	r3, r2
 800fd02:	d124      	bne.n	800fd4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800fd04:	68bb      	ldr	r3, [r7, #8]
 800fd06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d00a      	beq.n	800fd24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fd0e:	683b      	ldr	r3, [r7, #0]
 800fd10:	015a      	lsls	r2, r3, #5
 800fd12:	693b      	ldr	r3, [r7, #16]
 800fd14:	4413      	add	r3, r2
 800fd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fd20:	6093      	str	r3, [r2, #8]
 800fd22:	e032      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800fd24:	68bb      	ldr	r3, [r7, #8]
 800fd26:	f003 0320 	and.w	r3, r3, #32
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d008      	beq.n	800fd40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800fd2e:	683b      	ldr	r3, [r7, #0]
 800fd30:	015a      	lsls	r2, r3, #5
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	4413      	add	r3, r2
 800fd36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	2320      	movs	r3, #32
 800fd3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fd40:	683b      	ldr	r3, [r7, #0]
 800fd42:	b2db      	uxtb	r3, r3
 800fd44:	4619      	mov	r1, r3
 800fd46:	6878      	ldr	r0, [r7, #4]
 800fd48:	f7f9 f9a4 	bl	8009094 <HAL_PCD_DataOutStageCallback>
 800fd4c:	e01d      	b.n	800fd8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800fd4e:	683b      	ldr	r3, [r7, #0]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d114      	bne.n	800fd7e <PCD_EP_OutXfrComplete_int+0x1fa>
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	683a      	ldr	r2, [r7, #0]
 800fd58:	4613      	mov	r3, r2
 800fd5a:	00db      	lsls	r3, r3, #3
 800fd5c:	1a9b      	subs	r3, r3, r2
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	440b      	add	r3, r1
 800fd62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d108      	bne.n	800fd7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6818      	ldr	r0, [r3, #0]
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fd76:	461a      	mov	r2, r3
 800fd78:	2100      	movs	r1, #0
 800fd7a:	f005 f889 	bl	8014e90 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	4619      	mov	r1, r3
 800fd84:	6878      	ldr	r0, [r7, #4]
 800fd86:	f7f9 f985 	bl	8009094 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800fd8a:	2300      	movs	r3, #0
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3718      	adds	r7, #24
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	4f54300a 	.word	0x4f54300a
 800fd98:	4f54310a 	.word	0x4f54310a

0800fd9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800fd9c:	b580      	push	{r7, lr}
 800fd9e:	b086      	sub	sp, #24
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
 800fda4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdac:	697b      	ldr	r3, [r7, #20]
 800fdae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800fdb0:	697b      	ldr	r3, [r7, #20]
 800fdb2:	333c      	adds	r3, #60	; 0x3c
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	681b      	ldr	r3, [r3, #0]
 800fdb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800fdba:	683b      	ldr	r3, [r7, #0]
 800fdbc:	015a      	lsls	r2, r3, #5
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdc6:	689b      	ldr	r3, [r3, #8]
 800fdc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	4a15      	ldr	r2, [pc, #84]	; (800fe24 <PCD_EP_OutSetupPacket_int+0x88>)
 800fdce:	4293      	cmp	r3, r2
 800fdd0:	d90e      	bls.n	800fdf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800fdd2:	68bb      	ldr	r3, [r7, #8]
 800fdd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d009      	beq.n	800fdf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800fddc:	683b      	ldr	r3, [r7, #0]
 800fdde:	015a      	lsls	r2, r3, #5
 800fde0:	693b      	ldr	r3, [r7, #16]
 800fde2:	4413      	add	r3, r2
 800fde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fde8:	461a      	mov	r2, r3
 800fdea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800fdf0:	6878      	ldr	r0, [r7, #4]
 800fdf2:	f7f9 f93d 	bl	8009070 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <PCD_EP_OutSetupPacket_int+0x88>)
 800fdfa:	4293      	cmp	r3, r2
 800fdfc:	d90c      	bls.n	800fe18 <PCD_EP_OutSetupPacket_int+0x7c>
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	691b      	ldr	r3, [r3, #16]
 800fe02:	2b01      	cmp	r3, #1
 800fe04:	d108      	bne.n	800fe18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6818      	ldr	r0, [r3, #0]
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fe10:	461a      	mov	r2, r3
 800fe12:	2101      	movs	r1, #1
 800fe14:	f005 f83c 	bl	8014e90 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800fe18:	2300      	movs	r3, #0
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3718      	adds	r7, #24
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	4f54300a 	.word	0x4f54300a

0800fe28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800fe28:	b480      	push	{r7}
 800fe2a:	b085      	sub	sp, #20
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	460b      	mov	r3, r1
 800fe32:	70fb      	strb	r3, [r7, #3]
 800fe34:	4613      	mov	r3, r2
 800fe36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800fe40:	78fb      	ldrb	r3, [r7, #3]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d107      	bne.n	800fe56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800fe46:	883b      	ldrh	r3, [r7, #0]
 800fe48:	0419      	lsls	r1, r3, #16
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	68ba      	ldr	r2, [r7, #8]
 800fe50:	430a      	orrs	r2, r1
 800fe52:	629a      	str	r2, [r3, #40]	; 0x28
 800fe54:	e028      	b.n	800fea8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe5c:	0c1b      	lsrs	r3, r3, #16
 800fe5e:	68ba      	ldr	r2, [r7, #8]
 800fe60:	4413      	add	r3, r2
 800fe62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fe64:	2300      	movs	r3, #0
 800fe66:	73fb      	strb	r3, [r7, #15]
 800fe68:	e00d      	b.n	800fe86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	7bfb      	ldrb	r3, [r7, #15]
 800fe70:	3340      	adds	r3, #64	; 0x40
 800fe72:	009b      	lsls	r3, r3, #2
 800fe74:	4413      	add	r3, r2
 800fe76:	685b      	ldr	r3, [r3, #4]
 800fe78:	0c1b      	lsrs	r3, r3, #16
 800fe7a:	68ba      	ldr	r2, [r7, #8]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800fe80:	7bfb      	ldrb	r3, [r7, #15]
 800fe82:	3301      	adds	r3, #1
 800fe84:	73fb      	strb	r3, [r7, #15]
 800fe86:	7bfa      	ldrb	r2, [r7, #15]
 800fe88:	78fb      	ldrb	r3, [r7, #3]
 800fe8a:	3b01      	subs	r3, #1
 800fe8c:	429a      	cmp	r2, r3
 800fe8e:	d3ec      	bcc.n	800fe6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800fe90:	883b      	ldrh	r3, [r7, #0]
 800fe92:	0418      	lsls	r0, r3, #16
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6819      	ldr	r1, [r3, #0]
 800fe98:	78fb      	ldrb	r3, [r7, #3]
 800fe9a:	3b01      	subs	r3, #1
 800fe9c:	68ba      	ldr	r2, [r7, #8]
 800fe9e:	4302      	orrs	r2, r0
 800fea0:	3340      	adds	r3, #64	; 0x40
 800fea2:	009b      	lsls	r3, r3, #2
 800fea4:	440b      	add	r3, r1
 800fea6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800fea8:	2300      	movs	r3, #0
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3714      	adds	r7, #20
 800feae:	46bd      	mov	sp, r7
 800feb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feb4:	4770      	bx	lr

0800feb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800feb6:	b480      	push	{r7}
 800feb8:	b083      	sub	sp, #12
 800feba:	af00      	add	r7, sp, #0
 800febc:	6078      	str	r0, [r7, #4]
 800febe:	460b      	mov	r3, r1
 800fec0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	681b      	ldr	r3, [r3, #0]
 800fec6:	887a      	ldrh	r2, [r7, #2]
 800fec8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800feca:	2300      	movs	r3, #0
}
 800fecc:	4618      	mov	r0, r3
 800fece:	370c      	adds	r7, #12
 800fed0:	46bd      	mov	sp, r7
 800fed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed6:	4770      	bx	lr

0800fed8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800fed8:	b480      	push	{r7}
 800feda:	b083      	sub	sp, #12
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr

0800fef0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fef0:	b580      	push	{r7, lr}
 800fef2:	b086      	sub	sp, #24
 800fef4:	af00      	add	r7, sp, #0
 800fef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d101      	bne.n	800ff02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fefe:	2301      	movs	r3, #1
 800ff00:	e264      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	f003 0301 	and.w	r3, r3, #1
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d075      	beq.n	800fffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ff0e:	4ba3      	ldr	r3, [pc, #652]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	f003 030c 	and.w	r3, r3, #12
 800ff16:	2b04      	cmp	r3, #4
 800ff18:	d00c      	beq.n	800ff34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ff1a:	4ba0      	ldr	r3, [pc, #640]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800ff22:	2b08      	cmp	r3, #8
 800ff24:	d112      	bne.n	800ff4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ff26:	4b9d      	ldr	r3, [pc, #628]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff28:	685b      	ldr	r3, [r3, #4]
 800ff2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ff2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ff32:	d10b      	bne.n	800ff4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ff34:	4b99      	ldr	r3, [pc, #612]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d05b      	beq.n	800fff8 <HAL_RCC_OscConfig+0x108>
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	685b      	ldr	r3, [r3, #4]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d157      	bne.n	800fff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ff48:	2301      	movs	r3, #1
 800ff4a:	e23f      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff54:	d106      	bne.n	800ff64 <HAL_RCC_OscConfig+0x74>
 800ff56:	4b91      	ldr	r3, [pc, #580]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff58:	681b      	ldr	r3, [r3, #0]
 800ff5a:	4a90      	ldr	r2, [pc, #576]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff60:	6013      	str	r3, [r2, #0]
 800ff62:	e01d      	b.n	800ffa0 <HAL_RCC_OscConfig+0xb0>
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	685b      	ldr	r3, [r3, #4]
 800ff68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ff6c:	d10c      	bne.n	800ff88 <HAL_RCC_OscConfig+0x98>
 800ff6e:	4b8b      	ldr	r3, [pc, #556]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	4a8a      	ldr	r2, [pc, #552]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800ff78:	6013      	str	r3, [r2, #0]
 800ff7a:	4b88      	ldr	r3, [pc, #544]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff7c:	681b      	ldr	r3, [r3, #0]
 800ff7e:	4a87      	ldr	r2, [pc, #540]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ff84:	6013      	str	r3, [r2, #0]
 800ff86:	e00b      	b.n	800ffa0 <HAL_RCC_OscConfig+0xb0>
 800ff88:	4b84      	ldr	r3, [pc, #528]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	4a83      	ldr	r2, [pc, #524]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ff92:	6013      	str	r3, [r2, #0]
 800ff94:	4b81      	ldr	r3, [pc, #516]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	4a80      	ldr	r2, [pc, #512]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ff9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ff9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d013      	beq.n	800ffd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffa8:	f7fd fc5a 	bl	800d860 <HAL_GetTick>
 800ffac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ffae:	e008      	b.n	800ffc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ffb0:	f7fd fc56 	bl	800d860 <HAL_GetTick>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	1ad3      	subs	r3, r2, r3
 800ffba:	2b64      	cmp	r3, #100	; 0x64
 800ffbc:	d901      	bls.n	800ffc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ffbe:	2303      	movs	r3, #3
 800ffc0:	e204      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ffc2:	4b76      	ldr	r3, [pc, #472]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ffca:	2b00      	cmp	r3, #0
 800ffcc:	d0f0      	beq.n	800ffb0 <HAL_RCC_OscConfig+0xc0>
 800ffce:	e014      	b.n	800fffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ffd0:	f7fd fc46 	bl	800d860 <HAL_GetTick>
 800ffd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ffd6:	e008      	b.n	800ffea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800ffd8:	f7fd fc42 	bl	800d860 <HAL_GetTick>
 800ffdc:	4602      	mov	r2, r0
 800ffde:	693b      	ldr	r3, [r7, #16]
 800ffe0:	1ad3      	subs	r3, r2, r3
 800ffe2:	2b64      	cmp	r3, #100	; 0x64
 800ffe4:	d901      	bls.n	800ffea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ffe6:	2303      	movs	r3, #3
 800ffe8:	e1f0      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ffea:	4b6c      	ldr	r3, [pc, #432]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1f0      	bne.n	800ffd8 <HAL_RCC_OscConfig+0xe8>
 800fff6:	e000      	b.n	800fffa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	f003 0302 	and.w	r3, r3, #2
 8010002:	2b00      	cmp	r3, #0
 8010004:	d063      	beq.n	80100ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010006:	4b65      	ldr	r3, [pc, #404]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010008:	689b      	ldr	r3, [r3, #8]
 801000a:	f003 030c 	and.w	r3, r3, #12
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00b      	beq.n	801002a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010012:	4b62      	ldr	r3, [pc, #392]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010014:	689b      	ldr	r3, [r3, #8]
 8010016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801001a:	2b08      	cmp	r3, #8
 801001c:	d11c      	bne.n	8010058 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801001e:	4b5f      	ldr	r3, [pc, #380]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010020:	685b      	ldr	r3, [r3, #4]
 8010022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010026:	2b00      	cmp	r3, #0
 8010028:	d116      	bne.n	8010058 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801002a:	4b5c      	ldr	r3, [pc, #368]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	f003 0302 	and.w	r3, r3, #2
 8010032:	2b00      	cmp	r3, #0
 8010034:	d005      	beq.n	8010042 <HAL_RCC_OscConfig+0x152>
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	68db      	ldr	r3, [r3, #12]
 801003a:	2b01      	cmp	r3, #1
 801003c:	d001      	beq.n	8010042 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801003e:	2301      	movs	r3, #1
 8010040:	e1c4      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010042:	4b56      	ldr	r3, [pc, #344]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	691b      	ldr	r3, [r3, #16]
 801004e:	00db      	lsls	r3, r3, #3
 8010050:	4952      	ldr	r1, [pc, #328]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010052:	4313      	orrs	r3, r2
 8010054:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010056:	e03a      	b.n	80100ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	68db      	ldr	r3, [r3, #12]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d020      	beq.n	80100a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010060:	4b4f      	ldr	r3, [pc, #316]	; (80101a0 <HAL_RCC_OscConfig+0x2b0>)
 8010062:	2201      	movs	r2, #1
 8010064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010066:	f7fd fbfb 	bl	800d860 <HAL_GetTick>
 801006a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801006c:	e008      	b.n	8010080 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801006e:	f7fd fbf7 	bl	800d860 <HAL_GetTick>
 8010072:	4602      	mov	r2, r0
 8010074:	693b      	ldr	r3, [r7, #16]
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	2b02      	cmp	r3, #2
 801007a:	d901      	bls.n	8010080 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801007c:	2303      	movs	r3, #3
 801007e:	e1a5      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010080:	4b46      	ldr	r3, [pc, #280]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 0302 	and.w	r3, r3, #2
 8010088:	2b00      	cmp	r3, #0
 801008a:	d0f0      	beq.n	801006e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801008c:	4b43      	ldr	r3, [pc, #268]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	691b      	ldr	r3, [r3, #16]
 8010098:	00db      	lsls	r3, r3, #3
 801009a:	4940      	ldr	r1, [pc, #256]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 801009c:	4313      	orrs	r3, r2
 801009e:	600b      	str	r3, [r1, #0]
 80100a0:	e015      	b.n	80100ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80100a2:	4b3f      	ldr	r3, [pc, #252]	; (80101a0 <HAL_RCC_OscConfig+0x2b0>)
 80100a4:	2200      	movs	r2, #0
 80100a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80100a8:	f7fd fbda 	bl	800d860 <HAL_GetTick>
 80100ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80100ae:	e008      	b.n	80100c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80100b0:	f7fd fbd6 	bl	800d860 <HAL_GetTick>
 80100b4:	4602      	mov	r2, r0
 80100b6:	693b      	ldr	r3, [r7, #16]
 80100b8:	1ad3      	subs	r3, r2, r3
 80100ba:	2b02      	cmp	r3, #2
 80100bc:	d901      	bls.n	80100c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80100be:	2303      	movs	r3, #3
 80100c0:	e184      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80100c2:	4b36      	ldr	r3, [pc, #216]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	f003 0302 	and.w	r3, r3, #2
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d1f0      	bne.n	80100b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	681b      	ldr	r3, [r3, #0]
 80100d2:	f003 0308 	and.w	r3, r3, #8
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d030      	beq.n	801013c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	695b      	ldr	r3, [r3, #20]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	d016      	beq.n	8010110 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80100e2:	4b30      	ldr	r3, [pc, #192]	; (80101a4 <HAL_RCC_OscConfig+0x2b4>)
 80100e4:	2201      	movs	r2, #1
 80100e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80100e8:	f7fd fbba 	bl	800d860 <HAL_GetTick>
 80100ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80100ee:	e008      	b.n	8010102 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80100f0:	f7fd fbb6 	bl	800d860 <HAL_GetTick>
 80100f4:	4602      	mov	r2, r0
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d901      	bls.n	8010102 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80100fe:	2303      	movs	r3, #3
 8010100:	e164      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010102:	4b26      	ldr	r3, [pc, #152]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010106:	f003 0302 	and.w	r3, r3, #2
 801010a:	2b00      	cmp	r3, #0
 801010c:	d0f0      	beq.n	80100f0 <HAL_RCC_OscConfig+0x200>
 801010e:	e015      	b.n	801013c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010110:	4b24      	ldr	r3, [pc, #144]	; (80101a4 <HAL_RCC_OscConfig+0x2b4>)
 8010112:	2200      	movs	r2, #0
 8010114:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010116:	f7fd fba3 	bl	800d860 <HAL_GetTick>
 801011a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801011c:	e008      	b.n	8010130 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801011e:	f7fd fb9f 	bl	800d860 <HAL_GetTick>
 8010122:	4602      	mov	r2, r0
 8010124:	693b      	ldr	r3, [r7, #16]
 8010126:	1ad3      	subs	r3, r2, r3
 8010128:	2b02      	cmp	r3, #2
 801012a:	d901      	bls.n	8010130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 801012c:	2303      	movs	r3, #3
 801012e:	e14d      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8010130:	4b1a      	ldr	r3, [pc, #104]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010134:	f003 0302 	and.w	r3, r3, #2
 8010138:	2b00      	cmp	r3, #0
 801013a:	d1f0      	bne.n	801011e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	f003 0304 	and.w	r3, r3, #4
 8010144:	2b00      	cmp	r3, #0
 8010146:	f000 80a0 	beq.w	801028a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801014a:	2300      	movs	r3, #0
 801014c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801014e:	4b13      	ldr	r3, [pc, #76]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010156:	2b00      	cmp	r3, #0
 8010158:	d10f      	bne.n	801017a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801015a:	2300      	movs	r3, #0
 801015c:	60bb      	str	r3, [r7, #8]
 801015e:	4b0f      	ldr	r3, [pc, #60]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010162:	4a0e      	ldr	r2, [pc, #56]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 8010164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010168:	6413      	str	r3, [r2, #64]	; 0x40
 801016a:	4b0c      	ldr	r3, [pc, #48]	; (801019c <HAL_RCC_OscConfig+0x2ac>)
 801016c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801016e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010172:	60bb      	str	r3, [r7, #8]
 8010174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010176:	2301      	movs	r3, #1
 8010178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801017a:	4b0b      	ldr	r3, [pc, #44]	; (80101a8 <HAL_RCC_OscConfig+0x2b8>)
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010182:	2b00      	cmp	r3, #0
 8010184:	d121      	bne.n	80101ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8010186:	4b08      	ldr	r3, [pc, #32]	; (80101a8 <HAL_RCC_OscConfig+0x2b8>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	4a07      	ldr	r2, [pc, #28]	; (80101a8 <HAL_RCC_OscConfig+0x2b8>)
 801018c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8010192:	f7fd fb65 	bl	800d860 <HAL_GetTick>
 8010196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010198:	e011      	b.n	80101be <HAL_RCC_OscConfig+0x2ce>
 801019a:	bf00      	nop
 801019c:	40023800 	.word	0x40023800
 80101a0:	42470000 	.word	0x42470000
 80101a4:	42470e80 	.word	0x42470e80
 80101a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80101ac:	f7fd fb58 	bl	800d860 <HAL_GetTick>
 80101b0:	4602      	mov	r2, r0
 80101b2:	693b      	ldr	r3, [r7, #16]
 80101b4:	1ad3      	subs	r3, r2, r3
 80101b6:	2b02      	cmp	r3, #2
 80101b8:	d901      	bls.n	80101be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80101ba:	2303      	movs	r3, #3
 80101bc:	e106      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80101be:	4b85      	ldr	r3, [pc, #532]	; (80103d4 <HAL_RCC_OscConfig+0x4e4>)
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d0f0      	beq.n	80101ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	2b01      	cmp	r3, #1
 80101d0:	d106      	bne.n	80101e0 <HAL_RCC_OscConfig+0x2f0>
 80101d2:	4b81      	ldr	r3, [pc, #516]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101d6:	4a80      	ldr	r2, [pc, #512]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101d8:	f043 0301 	orr.w	r3, r3, #1
 80101dc:	6713      	str	r3, [r2, #112]	; 0x70
 80101de:	e01c      	b.n	801021a <HAL_RCC_OscConfig+0x32a>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	2b05      	cmp	r3, #5
 80101e6:	d10c      	bne.n	8010202 <HAL_RCC_OscConfig+0x312>
 80101e8:	4b7b      	ldr	r3, [pc, #492]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101ec:	4a7a      	ldr	r2, [pc, #488]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101ee:	f043 0304 	orr.w	r3, r3, #4
 80101f2:	6713      	str	r3, [r2, #112]	; 0x70
 80101f4:	4b78      	ldr	r3, [pc, #480]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101f8:	4a77      	ldr	r2, [pc, #476]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80101fa:	f043 0301 	orr.w	r3, r3, #1
 80101fe:	6713      	str	r3, [r2, #112]	; 0x70
 8010200:	e00b      	b.n	801021a <HAL_RCC_OscConfig+0x32a>
 8010202:	4b75      	ldr	r3, [pc, #468]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010206:	4a74      	ldr	r2, [pc, #464]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010208:	f023 0301 	bic.w	r3, r3, #1
 801020c:	6713      	str	r3, [r2, #112]	; 0x70
 801020e:	4b72      	ldr	r3, [pc, #456]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010212:	4a71      	ldr	r2, [pc, #452]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010214:	f023 0304 	bic.w	r3, r3, #4
 8010218:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	689b      	ldr	r3, [r3, #8]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d015      	beq.n	801024e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010222:	f7fd fb1d 	bl	800d860 <HAL_GetTick>
 8010226:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010228:	e00a      	b.n	8010240 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801022a:	f7fd fb19 	bl	800d860 <HAL_GetTick>
 801022e:	4602      	mov	r2, r0
 8010230:	693b      	ldr	r3, [r7, #16]
 8010232:	1ad3      	subs	r3, r2, r3
 8010234:	f241 3288 	movw	r2, #5000	; 0x1388
 8010238:	4293      	cmp	r3, r2
 801023a:	d901      	bls.n	8010240 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 801023c:	2303      	movs	r3, #3
 801023e:	e0c5      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010240:	4b65      	ldr	r3, [pc, #404]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010244:	f003 0302 	and.w	r3, r3, #2
 8010248:	2b00      	cmp	r3, #0
 801024a:	d0ee      	beq.n	801022a <HAL_RCC_OscConfig+0x33a>
 801024c:	e014      	b.n	8010278 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 801024e:	f7fd fb07 	bl	800d860 <HAL_GetTick>
 8010252:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010254:	e00a      	b.n	801026c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010256:	f7fd fb03 	bl	800d860 <HAL_GetTick>
 801025a:	4602      	mov	r2, r0
 801025c:	693b      	ldr	r3, [r7, #16]
 801025e:	1ad3      	subs	r3, r2, r3
 8010260:	f241 3288 	movw	r2, #5000	; 0x1388
 8010264:	4293      	cmp	r3, r2
 8010266:	d901      	bls.n	801026c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8010268:	2303      	movs	r3, #3
 801026a:	e0af      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801026c:	4b5a      	ldr	r3, [pc, #360]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 801026e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010270:	f003 0302 	and.w	r3, r3, #2
 8010274:	2b00      	cmp	r3, #0
 8010276:	d1ee      	bne.n	8010256 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010278:	7dfb      	ldrb	r3, [r7, #23]
 801027a:	2b01      	cmp	r3, #1
 801027c:	d105      	bne.n	801028a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801027e:	4b56      	ldr	r3, [pc, #344]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010282:	4a55      	ldr	r2, [pc, #340]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010288:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	699b      	ldr	r3, [r3, #24]
 801028e:	2b00      	cmp	r3, #0
 8010290:	f000 809b 	beq.w	80103ca <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8010294:	4b50      	ldr	r3, [pc, #320]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010296:	689b      	ldr	r3, [r3, #8]
 8010298:	f003 030c 	and.w	r3, r3, #12
 801029c:	2b08      	cmp	r3, #8
 801029e:	d05c      	beq.n	801035a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	699b      	ldr	r3, [r3, #24]
 80102a4:	2b02      	cmp	r3, #2
 80102a6:	d141      	bne.n	801032c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80102a8:	4b4c      	ldr	r3, [pc, #304]	; (80103dc <HAL_RCC_OscConfig+0x4ec>)
 80102aa:	2200      	movs	r2, #0
 80102ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80102ae:	f7fd fad7 	bl	800d860 <HAL_GetTick>
 80102b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80102b4:	e008      	b.n	80102c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80102b6:	f7fd fad3 	bl	800d860 <HAL_GetTick>
 80102ba:	4602      	mov	r2, r0
 80102bc:	693b      	ldr	r3, [r7, #16]
 80102be:	1ad3      	subs	r3, r2, r3
 80102c0:	2b02      	cmp	r3, #2
 80102c2:	d901      	bls.n	80102c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80102c4:	2303      	movs	r3, #3
 80102c6:	e081      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80102c8:	4b43      	ldr	r3, [pc, #268]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d1f0      	bne.n	80102b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	69da      	ldr	r2, [r3, #28]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a1b      	ldr	r3, [r3, #32]
 80102dc:	431a      	orrs	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e2:	019b      	lsls	r3, r3, #6
 80102e4:	431a      	orrs	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102ea:	085b      	lsrs	r3, r3, #1
 80102ec:	3b01      	subs	r3, #1
 80102ee:	041b      	lsls	r3, r3, #16
 80102f0:	431a      	orrs	r2, r3
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f6:	061b      	lsls	r3, r3, #24
 80102f8:	4937      	ldr	r1, [pc, #220]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 80102fa:	4313      	orrs	r3, r2
 80102fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80102fe:	4b37      	ldr	r3, [pc, #220]	; (80103dc <HAL_RCC_OscConfig+0x4ec>)
 8010300:	2201      	movs	r2, #1
 8010302:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010304:	f7fd faac 	bl	800d860 <HAL_GetTick>
 8010308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801030a:	e008      	b.n	801031e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801030c:	f7fd faa8 	bl	800d860 <HAL_GetTick>
 8010310:	4602      	mov	r2, r0
 8010312:	693b      	ldr	r3, [r7, #16]
 8010314:	1ad3      	subs	r3, r2, r3
 8010316:	2b02      	cmp	r3, #2
 8010318:	d901      	bls.n	801031e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 801031a:	2303      	movs	r3, #3
 801031c:	e056      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801031e:	4b2e      	ldr	r3, [pc, #184]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010326:	2b00      	cmp	r3, #0
 8010328:	d0f0      	beq.n	801030c <HAL_RCC_OscConfig+0x41c>
 801032a:	e04e      	b.n	80103ca <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801032c:	4b2b      	ldr	r3, [pc, #172]	; (80103dc <HAL_RCC_OscConfig+0x4ec>)
 801032e:	2200      	movs	r2, #0
 8010330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010332:	f7fd fa95 	bl	800d860 <HAL_GetTick>
 8010336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010338:	e008      	b.n	801034c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 801033a:	f7fd fa91 	bl	800d860 <HAL_GetTick>
 801033e:	4602      	mov	r2, r0
 8010340:	693b      	ldr	r3, [r7, #16]
 8010342:	1ad3      	subs	r3, r2, r3
 8010344:	2b02      	cmp	r3, #2
 8010346:	d901      	bls.n	801034c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8010348:	2303      	movs	r3, #3
 801034a:	e03f      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801034c:	4b22      	ldr	r3, [pc, #136]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 801034e:	681b      	ldr	r3, [r3, #0]
 8010350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010354:	2b00      	cmp	r3, #0
 8010356:	d1f0      	bne.n	801033a <HAL_RCC_OscConfig+0x44a>
 8010358:	e037      	b.n	80103ca <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	699b      	ldr	r3, [r3, #24]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d101      	bne.n	8010366 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8010362:	2301      	movs	r3, #1
 8010364:	e032      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010366:	4b1c      	ldr	r3, [pc, #112]	; (80103d8 <HAL_RCC_OscConfig+0x4e8>)
 8010368:	685b      	ldr	r3, [r3, #4]
 801036a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	699b      	ldr	r3, [r3, #24]
 8010370:	2b01      	cmp	r3, #1
 8010372:	d028      	beq.n	80103c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801037e:	429a      	cmp	r2, r3
 8010380:	d121      	bne.n	80103c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801038c:	429a      	cmp	r2, r3
 801038e:	d11a      	bne.n	80103c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010390:	68fa      	ldr	r2, [r7, #12]
 8010392:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010396:	4013      	ands	r3, r2
 8010398:	687a      	ldr	r2, [r7, #4]
 801039a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801039c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 801039e:	4293      	cmp	r3, r2
 80103a0:	d111      	bne.n	80103c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80103a2:	68fb      	ldr	r3, [r7, #12]
 80103a4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103ac:	085b      	lsrs	r3, r3, #1
 80103ae:	3b01      	subs	r3, #1
 80103b0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d107      	bne.n	80103c6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80103bc:	687b      	ldr	r3, [r7, #4]
 80103be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103c0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80103c2:	429a      	cmp	r2, r3
 80103c4:	d001      	beq.n	80103ca <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80103c6:	2301      	movs	r3, #1
 80103c8:	e000      	b.n	80103cc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80103ca:	2300      	movs	r3, #0
}
 80103cc:	4618      	mov	r0, r3
 80103ce:	3718      	adds	r7, #24
 80103d0:	46bd      	mov	sp, r7
 80103d2:	bd80      	pop	{r7, pc}
 80103d4:	40007000 	.word	0x40007000
 80103d8:	40023800 	.word	0x40023800
 80103dc:	42470060 	.word	0x42470060

080103e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b084      	sub	sp, #16
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
 80103e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d101      	bne.n	80103f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80103f0:	2301      	movs	r3, #1
 80103f2:	e0cc      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80103f4:	4b68      	ldr	r3, [pc, #416]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 80103f6:	681b      	ldr	r3, [r3, #0]
 80103f8:	f003 0307 	and.w	r3, r3, #7
 80103fc:	683a      	ldr	r2, [r7, #0]
 80103fe:	429a      	cmp	r2, r3
 8010400:	d90c      	bls.n	801041c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010402:	4b65      	ldr	r3, [pc, #404]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 8010404:	683a      	ldr	r2, [r7, #0]
 8010406:	b2d2      	uxtb	r2, r2
 8010408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 801040a:	4b63      	ldr	r3, [pc, #396]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 801040c:	681b      	ldr	r3, [r3, #0]
 801040e:	f003 0307 	and.w	r3, r3, #7
 8010412:	683a      	ldr	r2, [r7, #0]
 8010414:	429a      	cmp	r2, r3
 8010416:	d001      	beq.n	801041c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010418:	2301      	movs	r3, #1
 801041a:	e0b8      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	f003 0302 	and.w	r3, r3, #2
 8010424:	2b00      	cmp	r3, #0
 8010426:	d020      	beq.n	801046a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f003 0304 	and.w	r3, r3, #4
 8010430:	2b00      	cmp	r3, #0
 8010432:	d005      	beq.n	8010440 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010434:	4b59      	ldr	r3, [pc, #356]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010436:	689b      	ldr	r3, [r3, #8]
 8010438:	4a58      	ldr	r2, [pc, #352]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 801043a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 801043e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f003 0308 	and.w	r3, r3, #8
 8010448:	2b00      	cmp	r3, #0
 801044a:	d005      	beq.n	8010458 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 801044c:	4b53      	ldr	r3, [pc, #332]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 801044e:	689b      	ldr	r3, [r3, #8]
 8010450:	4a52      	ldr	r2, [pc, #328]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010452:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010456:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010458:	4b50      	ldr	r3, [pc, #320]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 801045a:	689b      	ldr	r3, [r3, #8]
 801045c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	689b      	ldr	r3, [r3, #8]
 8010464:	494d      	ldr	r1, [pc, #308]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010466:	4313      	orrs	r3, r2
 8010468:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	f003 0301 	and.w	r3, r3, #1
 8010472:	2b00      	cmp	r3, #0
 8010474:	d044      	beq.n	8010500 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	685b      	ldr	r3, [r3, #4]
 801047a:	2b01      	cmp	r3, #1
 801047c:	d107      	bne.n	801048e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801047e:	4b47      	ldr	r3, [pc, #284]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010486:	2b00      	cmp	r3, #0
 8010488:	d119      	bne.n	80104be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 801048a:	2301      	movs	r3, #1
 801048c:	e07f      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	2b02      	cmp	r3, #2
 8010494:	d003      	beq.n	801049e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 801049a:	2b03      	cmp	r3, #3
 801049c:	d107      	bne.n	80104ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801049e:	4b3f      	ldr	r3, [pc, #252]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d109      	bne.n	80104be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80104aa:	2301      	movs	r3, #1
 80104ac:	e06f      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80104ae:	4b3b      	ldr	r3, [pc, #236]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	f003 0302 	and.w	r3, r3, #2
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d101      	bne.n	80104be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	e067      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80104be:	4b37      	ldr	r3, [pc, #220]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 80104c0:	689b      	ldr	r3, [r3, #8]
 80104c2:	f023 0203 	bic.w	r2, r3, #3
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	4934      	ldr	r1, [pc, #208]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 80104cc:	4313      	orrs	r3, r2
 80104ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80104d0:	f7fd f9c6 	bl	800d860 <HAL_GetTick>
 80104d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80104d6:	e00a      	b.n	80104ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80104d8:	f7fd f9c2 	bl	800d860 <HAL_GetTick>
 80104dc:	4602      	mov	r2, r0
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80104e6:	4293      	cmp	r3, r2
 80104e8:	d901      	bls.n	80104ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80104ea:	2303      	movs	r3, #3
 80104ec:	e04f      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80104ee:	4b2b      	ldr	r3, [pc, #172]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 80104f0:	689b      	ldr	r3, [r3, #8]
 80104f2:	f003 020c 	and.w	r2, r3, #12
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	685b      	ldr	r3, [r3, #4]
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	429a      	cmp	r2, r3
 80104fe:	d1eb      	bne.n	80104d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010500:	4b25      	ldr	r3, [pc, #148]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 8010502:	681b      	ldr	r3, [r3, #0]
 8010504:	f003 0307 	and.w	r3, r3, #7
 8010508:	683a      	ldr	r2, [r7, #0]
 801050a:	429a      	cmp	r2, r3
 801050c:	d20c      	bcs.n	8010528 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801050e:	4b22      	ldr	r3, [pc, #136]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 8010510:	683a      	ldr	r2, [r7, #0]
 8010512:	b2d2      	uxtb	r2, r2
 8010514:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010516:	4b20      	ldr	r3, [pc, #128]	; (8010598 <HAL_RCC_ClockConfig+0x1b8>)
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f003 0307 	and.w	r3, r3, #7
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	429a      	cmp	r2, r3
 8010522:	d001      	beq.n	8010528 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010524:	2301      	movs	r3, #1
 8010526:	e032      	b.n	801058e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	f003 0304 	and.w	r3, r3, #4
 8010530:	2b00      	cmp	r3, #0
 8010532:	d008      	beq.n	8010546 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010534:	4b19      	ldr	r3, [pc, #100]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010536:	689b      	ldr	r3, [r3, #8]
 8010538:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	4916      	ldr	r1, [pc, #88]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010542:	4313      	orrs	r3, r2
 8010544:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	f003 0308 	and.w	r3, r3, #8
 801054e:	2b00      	cmp	r3, #0
 8010550:	d009      	beq.n	8010566 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010552:	4b12      	ldr	r3, [pc, #72]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010554:	689b      	ldr	r3, [r3, #8]
 8010556:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	691b      	ldr	r3, [r3, #16]
 801055e:	00db      	lsls	r3, r3, #3
 8010560:	490e      	ldr	r1, [pc, #56]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 8010562:	4313      	orrs	r3, r2
 8010564:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010566:	f000 f821 	bl	80105ac <HAL_RCC_GetSysClockFreq>
 801056a:	4602      	mov	r2, r0
 801056c:	4b0b      	ldr	r3, [pc, #44]	; (801059c <HAL_RCC_ClockConfig+0x1bc>)
 801056e:	689b      	ldr	r3, [r3, #8]
 8010570:	091b      	lsrs	r3, r3, #4
 8010572:	f003 030f 	and.w	r3, r3, #15
 8010576:	490a      	ldr	r1, [pc, #40]	; (80105a0 <HAL_RCC_ClockConfig+0x1c0>)
 8010578:	5ccb      	ldrb	r3, [r1, r3]
 801057a:	fa22 f303 	lsr.w	r3, r2, r3
 801057e:	4a09      	ldr	r2, [pc, #36]	; (80105a4 <HAL_RCC_ClockConfig+0x1c4>)
 8010580:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010582:	4b09      	ldr	r3, [pc, #36]	; (80105a8 <HAL_RCC_ClockConfig+0x1c8>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	4618      	mov	r0, r3
 8010588:	f7fd f926 	bl	800d7d8 <HAL_InitTick>

  return HAL_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop
 8010598:	40023c00 	.word	0x40023c00
 801059c:	40023800 	.word	0x40023800
 80105a0:	08018ba0 	.word	0x08018ba0
 80105a4:	20000000 	.word	0x20000000
 80105a8:	20000368 	.word	0x20000368

080105ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80105ac:	b5b0      	push	{r4, r5, r7, lr}
 80105ae:	b084      	sub	sp, #16
 80105b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80105b2:	2100      	movs	r1, #0
 80105b4:	6079      	str	r1, [r7, #4]
 80105b6:	2100      	movs	r1, #0
 80105b8:	60f9      	str	r1, [r7, #12]
 80105ba:	2100      	movs	r1, #0
 80105bc:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80105be:	2100      	movs	r1, #0
 80105c0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80105c2:	4952      	ldr	r1, [pc, #328]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 80105c4:	6889      	ldr	r1, [r1, #8]
 80105c6:	f001 010c 	and.w	r1, r1, #12
 80105ca:	2908      	cmp	r1, #8
 80105cc:	d00d      	beq.n	80105ea <HAL_RCC_GetSysClockFreq+0x3e>
 80105ce:	2908      	cmp	r1, #8
 80105d0:	f200 8094 	bhi.w	80106fc <HAL_RCC_GetSysClockFreq+0x150>
 80105d4:	2900      	cmp	r1, #0
 80105d6:	d002      	beq.n	80105de <HAL_RCC_GetSysClockFreq+0x32>
 80105d8:	2904      	cmp	r1, #4
 80105da:	d003      	beq.n	80105e4 <HAL_RCC_GetSysClockFreq+0x38>
 80105dc:	e08e      	b.n	80106fc <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80105de:	4b4c      	ldr	r3, [pc, #304]	; (8010710 <HAL_RCC_GetSysClockFreq+0x164>)
 80105e0:	60bb      	str	r3, [r7, #8]
       break;
 80105e2:	e08e      	b.n	8010702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80105e4:	4b4b      	ldr	r3, [pc, #300]	; (8010714 <HAL_RCC_GetSysClockFreq+0x168>)
 80105e6:	60bb      	str	r3, [r7, #8]
      break;
 80105e8:	e08b      	b.n	8010702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80105ea:	4948      	ldr	r1, [pc, #288]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 80105ec:	6849      	ldr	r1, [r1, #4]
 80105ee:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80105f2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80105f4:	4945      	ldr	r1, [pc, #276]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 80105f6:	6849      	ldr	r1, [r1, #4]
 80105f8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80105fc:	2900      	cmp	r1, #0
 80105fe:	d024      	beq.n	801064a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010600:	4942      	ldr	r1, [pc, #264]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 8010602:	6849      	ldr	r1, [r1, #4]
 8010604:	0989      	lsrs	r1, r1, #6
 8010606:	4608      	mov	r0, r1
 8010608:	f04f 0100 	mov.w	r1, #0
 801060c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8010610:	f04f 0500 	mov.w	r5, #0
 8010614:	ea00 0204 	and.w	r2, r0, r4
 8010618:	ea01 0305 	and.w	r3, r1, r5
 801061c:	493d      	ldr	r1, [pc, #244]	; (8010714 <HAL_RCC_GetSysClockFreq+0x168>)
 801061e:	fb01 f003 	mul.w	r0, r1, r3
 8010622:	2100      	movs	r1, #0
 8010624:	fb01 f102 	mul.w	r1, r1, r2
 8010628:	1844      	adds	r4, r0, r1
 801062a:	493a      	ldr	r1, [pc, #232]	; (8010714 <HAL_RCC_GetSysClockFreq+0x168>)
 801062c:	fba2 0101 	umull	r0, r1, r2, r1
 8010630:	1863      	adds	r3, r4, r1
 8010632:	4619      	mov	r1, r3
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	461a      	mov	r2, r3
 8010638:	f04f 0300 	mov.w	r3, #0
 801063c:	f7f0 fb14 	bl	8000c68 <__aeabi_uldivmod>
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	4613      	mov	r3, r2
 8010646:	60fb      	str	r3, [r7, #12]
 8010648:	e04a      	b.n	80106e0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801064a:	4b30      	ldr	r3, [pc, #192]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 801064c:	685b      	ldr	r3, [r3, #4]
 801064e:	099b      	lsrs	r3, r3, #6
 8010650:	461a      	mov	r2, r3
 8010652:	f04f 0300 	mov.w	r3, #0
 8010656:	f240 10ff 	movw	r0, #511	; 0x1ff
 801065a:	f04f 0100 	mov.w	r1, #0
 801065e:	ea02 0400 	and.w	r4, r2, r0
 8010662:	ea03 0501 	and.w	r5, r3, r1
 8010666:	4620      	mov	r0, r4
 8010668:	4629      	mov	r1, r5
 801066a:	f04f 0200 	mov.w	r2, #0
 801066e:	f04f 0300 	mov.w	r3, #0
 8010672:	014b      	lsls	r3, r1, #5
 8010674:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8010678:	0142      	lsls	r2, r0, #5
 801067a:	4610      	mov	r0, r2
 801067c:	4619      	mov	r1, r3
 801067e:	1b00      	subs	r0, r0, r4
 8010680:	eb61 0105 	sbc.w	r1, r1, r5
 8010684:	f04f 0200 	mov.w	r2, #0
 8010688:	f04f 0300 	mov.w	r3, #0
 801068c:	018b      	lsls	r3, r1, #6
 801068e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8010692:	0182      	lsls	r2, r0, #6
 8010694:	1a12      	subs	r2, r2, r0
 8010696:	eb63 0301 	sbc.w	r3, r3, r1
 801069a:	f04f 0000 	mov.w	r0, #0
 801069e:	f04f 0100 	mov.w	r1, #0
 80106a2:	00d9      	lsls	r1, r3, #3
 80106a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80106a8:	00d0      	lsls	r0, r2, #3
 80106aa:	4602      	mov	r2, r0
 80106ac:	460b      	mov	r3, r1
 80106ae:	1912      	adds	r2, r2, r4
 80106b0:	eb45 0303 	adc.w	r3, r5, r3
 80106b4:	f04f 0000 	mov.w	r0, #0
 80106b8:	f04f 0100 	mov.w	r1, #0
 80106bc:	0299      	lsls	r1, r3, #10
 80106be:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80106c2:	0290      	lsls	r0, r2, #10
 80106c4:	4602      	mov	r2, r0
 80106c6:	460b      	mov	r3, r1
 80106c8:	4610      	mov	r0, r2
 80106ca:	4619      	mov	r1, r3
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	461a      	mov	r2, r3
 80106d0:	f04f 0300 	mov.w	r3, #0
 80106d4:	f7f0 fac8 	bl	8000c68 <__aeabi_uldivmod>
 80106d8:	4602      	mov	r2, r0
 80106da:	460b      	mov	r3, r1
 80106dc:	4613      	mov	r3, r2
 80106de:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80106e0:	4b0a      	ldr	r3, [pc, #40]	; (801070c <HAL_RCC_GetSysClockFreq+0x160>)
 80106e2:	685b      	ldr	r3, [r3, #4]
 80106e4:	0c1b      	lsrs	r3, r3, #16
 80106e6:	f003 0303 	and.w	r3, r3, #3
 80106ea:	3301      	adds	r3, #1
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	683b      	ldr	r3, [r7, #0]
 80106f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80106f8:	60bb      	str	r3, [r7, #8]
      break;
 80106fa:	e002      	b.n	8010702 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80106fc:	4b04      	ldr	r3, [pc, #16]	; (8010710 <HAL_RCC_GetSysClockFreq+0x164>)
 80106fe:	60bb      	str	r3, [r7, #8]
      break;
 8010700:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010702:	68bb      	ldr	r3, [r7, #8]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3710      	adds	r7, #16
 8010708:	46bd      	mov	sp, r7
 801070a:	bdb0      	pop	{r4, r5, r7, pc}
 801070c:	40023800 	.word	0x40023800
 8010710:	00f42400 	.word	0x00f42400
 8010714:	017d7840 	.word	0x017d7840

08010718 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010718:	b480      	push	{r7}
 801071a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 801071c:	4b03      	ldr	r3, [pc, #12]	; (801072c <HAL_RCC_GetHCLKFreq+0x14>)
 801071e:	681b      	ldr	r3, [r3, #0]
}
 8010720:	4618      	mov	r0, r3
 8010722:	46bd      	mov	sp, r7
 8010724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010728:	4770      	bx	lr
 801072a:	bf00      	nop
 801072c:	20000000 	.word	0x20000000

08010730 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010734:	f7ff fff0 	bl	8010718 <HAL_RCC_GetHCLKFreq>
 8010738:	4602      	mov	r2, r0
 801073a:	4b05      	ldr	r3, [pc, #20]	; (8010750 <HAL_RCC_GetPCLK1Freq+0x20>)
 801073c:	689b      	ldr	r3, [r3, #8]
 801073e:	0a9b      	lsrs	r3, r3, #10
 8010740:	f003 0307 	and.w	r3, r3, #7
 8010744:	4903      	ldr	r1, [pc, #12]	; (8010754 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010746:	5ccb      	ldrb	r3, [r1, r3]
 8010748:	fa22 f303 	lsr.w	r3, r2, r3
}
 801074c:	4618      	mov	r0, r3
 801074e:	bd80      	pop	{r7, pc}
 8010750:	40023800 	.word	0x40023800
 8010754:	08018bb0 	.word	0x08018bb0

08010758 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 801075c:	f7ff ffdc 	bl	8010718 <HAL_RCC_GetHCLKFreq>
 8010760:	4602      	mov	r2, r0
 8010762:	4b05      	ldr	r3, [pc, #20]	; (8010778 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	0b5b      	lsrs	r3, r3, #13
 8010768:	f003 0307 	and.w	r3, r3, #7
 801076c:	4903      	ldr	r1, [pc, #12]	; (801077c <HAL_RCC_GetPCLK2Freq+0x24>)
 801076e:	5ccb      	ldrb	r3, [r1, r3]
 8010770:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010774:	4618      	mov	r0, r3
 8010776:	bd80      	pop	{r7, pc}
 8010778:	40023800 	.word	0x40023800
 801077c:	08018bb0 	.word	0x08018bb0

08010780 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8010780:	b580      	push	{r7, lr}
 8010782:	b082      	sub	sp, #8
 8010784:	af00      	add	r7, sp, #0
 8010786:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	2b00      	cmp	r3, #0
 801078c:	d101      	bne.n	8010792 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801078e:	2301      	movs	r3, #1
 8010790:	e022      	b.n	80107d8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b00      	cmp	r3, #0
 801079c:	d105      	bne.n	80107aa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	2200      	movs	r2, #0
 80107a2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80107a4:	6878      	ldr	r0, [r7, #4]
 80107a6:	f7f2 ffa9 	bl	80036fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	2203      	movs	r2, #3
 80107ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f814 	bl	80107e0 <HAL_SD_InitCard>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b00      	cmp	r3, #0
 80107bc:	d001      	beq.n	80107c2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80107be:	2301      	movs	r3, #1
 80107c0:	e00a      	b.n	80107d8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	2200      	movs	r2, #0
 80107c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	2200      	movs	r2, #0
 80107cc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	2201      	movs	r2, #1
 80107d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80107d6:	2300      	movs	r3, #0
}
 80107d8:	4618      	mov	r0, r3
 80107da:	3708      	adds	r7, #8
 80107dc:	46bd      	mov	sp, r7
 80107de:	bd80      	pop	{r7, pc}

080107e0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80107e0:	b5b0      	push	{r4, r5, r7, lr}
 80107e2:	b08e      	sub	sp, #56	; 0x38
 80107e4:	af04      	add	r7, sp, #16
 80107e6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80107e8:	2300      	movs	r3, #0
 80107ea:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80107ec:	2300      	movs	r3, #0
 80107ee:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80107f0:	2300      	movs	r3, #0
 80107f2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80107f4:	2300      	movs	r3, #0
 80107f6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80107f8:	2300      	movs	r3, #0
 80107fa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80107fc:	2376      	movs	r3, #118	; 0x76
 80107fe:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	681d      	ldr	r5, [r3, #0]
 8010804:	466c      	mov	r4, sp
 8010806:	f107 0314 	add.w	r3, r7, #20
 801080a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801080e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010812:	f107 0308 	add.w	r3, r7, #8
 8010816:	cb0e      	ldmia	r3, {r1, r2, r3}
 8010818:	4628      	mov	r0, r5
 801081a:	f002 fb31 	bl	8012e80 <SDIO_Init>
 801081e:	4603      	mov	r3, r0
 8010820:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8010824:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010828:	2b00      	cmp	r3, #0
 801082a:	d001      	beq.n	8010830 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 801082c:	2301      	movs	r3, #1
 801082e:	e04c      	b.n	80108ca <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8010830:	4b28      	ldr	r3, [pc, #160]	; (80108d4 <HAL_SD_InitCard+0xf4>)
 8010832:	2200      	movs	r2, #0
 8010834:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	681b      	ldr	r3, [r3, #0]
 801083a:	4618      	mov	r0, r3
 801083c:	f002 fb69 	bl	8012f12 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8010840:	4b24      	ldr	r3, [pc, #144]	; (80108d4 <HAL_SD_InitCard+0xf4>)
 8010842:	2201      	movs	r2, #1
 8010844:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f001 f80e 	bl	8011868 <SD_PowerON>
 801084c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801084e:	6a3b      	ldr	r3, [r7, #32]
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	2201      	movs	r2, #1
 8010858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010860:	6a3b      	ldr	r3, [r7, #32]
 8010862:	431a      	orrs	r2, r3
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010868:	2301      	movs	r3, #1
 801086a:	e02e      	b.n	80108ca <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f000 ff2f 	bl	80116d0 <SD_InitCard>
 8010872:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8010874:	6a3b      	ldr	r3, [r7, #32]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d00b      	beq.n	8010892 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	2201      	movs	r2, #1
 801087e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010886:	6a3b      	ldr	r3, [r7, #32]
 8010888:	431a      	orrs	r2, r3
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 801088e:	2301      	movs	r3, #1
 8010890:	e01b      	b.n	80108ca <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f44f 7100 	mov.w	r1, #512	; 0x200
 801089a:	4618      	mov	r0, r3
 801089c:	f002 fbcc 	bl	8013038 <SDMMC_CmdBlockLength>
 80108a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80108a2:	6a3b      	ldr	r3, [r7, #32]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00f      	beq.n	80108c8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	4a0a      	ldr	r2, [pc, #40]	; (80108d8 <HAL_SD_InitCard+0xf8>)
 80108ae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80108b4:	6a3b      	ldr	r3, [r7, #32]
 80108b6:	431a      	orrs	r2, r3
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	2201      	movs	r2, #1
 80108c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80108c4:	2301      	movs	r3, #1
 80108c6:	e000      	b.n	80108ca <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 80108c8:	2300      	movs	r3, #0
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	3728      	adds	r7, #40	; 0x28
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bdb0      	pop	{r4, r5, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	422580a0 	.word	0x422580a0
 80108d8:	004005ff 	.word	0x004005ff

080108dc <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80108dc:	b580      	push	{r7, lr}
 80108de:	b08c      	sub	sp, #48	; 0x30
 80108e0:	af00      	add	r7, sp, #0
 80108e2:	60f8      	str	r0, [r7, #12]
 80108e4:	60b9      	str	r1, [r7, #8]
 80108e6:	607a      	str	r2, [r7, #4]
 80108e8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d107      	bne.n	8010904 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80108f8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010900:	2301      	movs	r3, #1
 8010902:	e0c0      	b.n	8010a86 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801090a:	b2db      	uxtb	r3, r3
 801090c:	2b01      	cmp	r3, #1
 801090e:	f040 80b9 	bne.w	8010a84 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	2200      	movs	r2, #0
 8010916:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010918:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	441a      	add	r2, r3
 801091e:	68fb      	ldr	r3, [r7, #12]
 8010920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010922:	429a      	cmp	r2, r3
 8010924:	d907      	bls.n	8010936 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010926:	68fb      	ldr	r3, [r7, #12]
 8010928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801092a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010932:	2301      	movs	r3, #1
 8010934:	e0a7      	b.n	8010a86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	2203      	movs	r2, #3
 801093a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	681b      	ldr	r3, [r3, #0]
 8010942:	2200      	movs	r2, #0
 8010944:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801094c:	68fa      	ldr	r2, [r7, #12]
 801094e:	6812      	ldr	r2, [r2, #0]
 8010950:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 8010954:	f043 0302 	orr.w	r3, r3, #2
 8010958:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801095e:	4a4c      	ldr	r2, [pc, #304]	; (8010a90 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8010960:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8010962:	68fb      	ldr	r3, [r7, #12]
 8010964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010966:	4a4b      	ldr	r2, [pc, #300]	; (8010a94 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8010968:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801096e:	2200      	movs	r2, #0
 8010970:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8010972:	68fb      	ldr	r3, [r7, #12]
 8010974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010976:	2200      	movs	r2, #0
 8010978:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801097e:	681b      	ldr	r3, [r3, #0]
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098a:	689a      	ldr	r2, [r3, #8]
 801098c:	68fb      	ldr	r3, [r7, #12]
 801098e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010990:	681b      	ldr	r3, [r3, #0]
 8010992:	430a      	orrs	r2, r1
 8010994:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	6c18      	ldr	r0, [r3, #64]	; 0x40
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	3380      	adds	r3, #128	; 0x80
 80109a0:	4619      	mov	r1, r3
 80109a2:	68ba      	ldr	r2, [r7, #8]
 80109a4:	683b      	ldr	r3, [r7, #0]
 80109a6:	025b      	lsls	r3, r3, #9
 80109a8:	089b      	lsrs	r3, r3, #2
 80109aa:	f7fd f949 	bl	800dc40 <HAL_DMA_Start_IT>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d017      	beq.n	80109e4 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80109b4:	68fb      	ldr	r3, [r7, #12]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109ba:	68fb      	ldr	r3, [r7, #12]
 80109bc:	681b      	ldr	r3, [r3, #0]
 80109be:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80109c2:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	4a33      	ldr	r2, [pc, #204]	; (8010a98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80109ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80109cc:	68fb      	ldr	r3, [r7, #12]
 80109ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80109d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80109d4:	68fb      	ldr	r3, [r7, #12]
 80109d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80109d8:	68fb      	ldr	r3, [r7, #12]
 80109da:	2201      	movs	r2, #1
 80109dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80109e0:	2301      	movs	r3, #1
 80109e2:	e050      	b.n	8010a86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80109e4:	4b2d      	ldr	r3, [pc, #180]	; (8010a9c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80109e6:	2201      	movs	r2, #1
 80109e8:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109ee:	2b01      	cmp	r3, #1
 80109f0:	d002      	beq.n	80109f8 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80109f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109f4:	025b      	lsls	r3, r3, #9
 80109f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80109f8:	f04f 33ff 	mov.w	r3, #4294967295
 80109fc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	025b      	lsls	r3, r3, #9
 8010a02:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8010a04:	2390      	movs	r3, #144	; 0x90
 8010a06:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8010a08:	2302      	movs	r3, #2
 8010a0a:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010a10:	2301      	movs	r3, #1
 8010a12:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010a14:	68fb      	ldr	r3, [r7, #12]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f107 0210 	add.w	r2, r7, #16
 8010a1c:	4611      	mov	r1, r2
 8010a1e:	4618      	mov	r0, r3
 8010a20:	f002 fade 	bl	8012fe0 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	2b01      	cmp	r3, #1
 8010a28:	d90a      	bls.n	8010a40 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	2282      	movs	r2, #130	; 0x82
 8010a2e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a36:	4618      	mov	r0, r3
 8010a38:	f002 fb42 	bl	80130c0 <SDMMC_CmdReadMultiBlock>
 8010a3c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010a3e:	e009      	b.n	8010a54 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	2281      	movs	r2, #129	; 0x81
 8010a44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8010a46:	68fb      	ldr	r3, [r7, #12]
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010a4c:	4618      	mov	r0, r3
 8010a4e:	f002 fb15 	bl	801307c <SDMMC_CmdReadSingleBlock>
 8010a52:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8010a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d012      	beq.n	8010a80 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010a5a:	68fb      	ldr	r3, [r7, #12]
 8010a5c:	681b      	ldr	r3, [r3, #0]
 8010a5e:	4a0e      	ldr	r2, [pc, #56]	; (8010a98 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8010a60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a68:	431a      	orrs	r2, r3
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	2201      	movs	r2, #1
 8010a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e002      	b.n	8010a86 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8010a80:	2300      	movs	r3, #0
 8010a82:	e000      	b.n	8010a86 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8010a84:	2302      	movs	r3, #2
  }
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3730      	adds	r7, #48	; 0x30
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	bd80      	pop	{r7, pc}
 8010a8e:	bf00      	nop
 8010a90:	080114df 	.word	0x080114df
 8010a94:	08011551 	.word	0x08011551
 8010a98:	004005ff 	.word	0x004005ff
 8010a9c:	4225858c 	.word	0x4225858c

08010aa0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8010aa0:	b580      	push	{r7, lr}
 8010aa2:	b08c      	sub	sp, #48	; 0x30
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	60f8      	str	r0, [r7, #12]
 8010aa8:	60b9      	str	r1, [r7, #8]
 8010aaa:	607a      	str	r2, [r7, #4]
 8010aac:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d107      	bne.n	8010ac8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010abc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8010ac4:	2301      	movs	r3, #1
 8010ac6:	e0c5      	b.n	8010c54 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010ace:	b2db      	uxtb	r3, r3
 8010ad0:	2b01      	cmp	r3, #1
 8010ad2:	f040 80be 	bne.w	8010c52 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	2200      	movs	r2, #0
 8010ada:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8010adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010ade:	683b      	ldr	r3, [r7, #0]
 8010ae0:	441a      	add	r2, r3
 8010ae2:	68fb      	ldr	r3, [r7, #12]
 8010ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d907      	bls.n	8010afa <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8010af2:	68fb      	ldr	r3, [r7, #12]
 8010af4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8010af6:	2301      	movs	r3, #1
 8010af8:	e0ac      	b.n	8010c54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	2203      	movs	r2, #3
 8010afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	2200      	movs	r2, #0
 8010b08:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010b0a:	68fb      	ldr	r3, [r7, #12]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b10:	68fa      	ldr	r2, [r7, #12]
 8010b12:	6812      	ldr	r2, [r2, #0]
 8010b14:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8010b18:	f043 0302 	orr.w	r3, r3, #2
 8010b1c:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b22:	4a4e      	ldr	r2, [pc, #312]	; (8010c5c <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8010b24:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b2a:	4a4d      	ldr	r2, [pc, #308]	; (8010c60 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8010b2c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8010b2e:	68fb      	ldr	r3, [r7, #12]
 8010b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010b32:	2200      	movs	r2, #0
 8010b34:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b3a:	2b01      	cmp	r3, #1
 8010b3c:	d002      	beq.n	8010b44 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8010b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b40:	025b      	lsls	r3, r3, #9
 8010b42:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8010b44:	683b      	ldr	r3, [r7, #0]
 8010b46:	2b01      	cmp	r3, #1
 8010b48:	d90a      	bls.n	8010b60 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8010b4a:	68fb      	ldr	r3, [r7, #12]
 8010b4c:	22a0      	movs	r2, #160	; 0xa0
 8010b4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b56:	4618      	mov	r0, r3
 8010b58:	f002 faf6 	bl	8013148 <SDMMC_CmdWriteMultiBlock>
 8010b5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8010b5e:	e009      	b.n	8010b74 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	2290      	movs	r2, #144	; 0x90
 8010b64:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010b6c:	4618      	mov	r0, r3
 8010b6e:	f002 fac9 	bl	8013104 <SDMMC_CmdWriteSingleBlock>
 8010b72:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8010b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d012      	beq.n	8010ba0 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	4a39      	ldr	r2, [pc, #228]	; (8010c64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8010b80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b88:	431a      	orrs	r2, r3
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	2201      	movs	r2, #1
 8010b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	2200      	movs	r2, #0
 8010b9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	e059      	b.n	8010c54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8010ba0:	4b31      	ldr	r3, [pc, #196]	; (8010c68 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8010ba2:	2201      	movs	r2, #1
 8010ba4:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010baa:	2240      	movs	r2, #64	; 0x40
 8010bac:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8010bae:	68fb      	ldr	r3, [r7, #12]
 8010bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bbe:	689a      	ldr	r2, [r3, #8]
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	430a      	orrs	r2, r1
 8010bc8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8010bce:	68b9      	ldr	r1, [r7, #8]
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	3380      	adds	r3, #128	; 0x80
 8010bd6:	461a      	mov	r2, r3
 8010bd8:	683b      	ldr	r3, [r7, #0]
 8010bda:	025b      	lsls	r3, r3, #9
 8010bdc:	089b      	lsrs	r3, r3, #2
 8010bde:	f7fd f82f 	bl	800dc40 <HAL_DMA_Start_IT>
 8010be2:	4603      	mov	r3, r0
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d01c      	beq.n	8010c22 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8010be8:	68fb      	ldr	r3, [r7, #12]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bee:	68fa      	ldr	r2, [r7, #12]
 8010bf0:	6812      	ldr	r2, [r2, #0]
 8010bf2:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8010bf6:	f023 0302 	bic.w	r3, r3, #2
 8010bfa:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	4a18      	ldr	r2, [pc, #96]	; (8010c64 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8010c02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8010c04:	68fb      	ldr	r3, [r7, #12]
 8010c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c08:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010c18:	68fb      	ldr	r3, [r7, #12]
 8010c1a:	2200      	movs	r2, #0
 8010c1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8010c1e:	2301      	movs	r3, #1
 8010c20:	e018      	b.n	8010c54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8010c22:	f04f 33ff 	mov.w	r3, #4294967295
 8010c26:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	025b      	lsls	r3, r3, #9
 8010c2c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8010c2e:	2390      	movs	r3, #144	; 0x90
 8010c30:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8010c32:	2300      	movs	r3, #0
 8010c34:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8010c36:	2300      	movs	r3, #0
 8010c38:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	f107 0210 	add.w	r2, r7, #16
 8010c46:	4611      	mov	r1, r2
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f002 f9c9 	bl	8012fe0 <SDIO_ConfigData>

      return HAL_OK;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	e000      	b.n	8010c54 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8010c52:	2302      	movs	r3, #2
  }
}
 8010c54:	4618      	mov	r0, r3
 8010c56:	3730      	adds	r7, #48	; 0x30
 8010c58:	46bd      	mov	sp, r7
 8010c5a:	bd80      	pop	{r7, pc}
 8010c5c:	080114b5 	.word	0x080114b5
 8010c60:	08011551 	.word	0x08011551
 8010c64:	004005ff 	.word	0x004005ff
 8010c68:	4225858c 	.word	0x4225858c

08010c6c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8010c6c:	b580      	push	{r7, lr}
 8010c6e:	b084      	sub	sp, #16
 8010c70:	af00      	add	r7, sp, #0
 8010c72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c78:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d008      	beq.n	8010c9a <HAL_SD_IRQHandler+0x2e>
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f003 0308 	and.w	r3, r3, #8
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d003      	beq.n	8010c9a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8010c92:	6878      	ldr	r0, [r7, #4]
 8010c94:	f001 f807 	bl	8011ca6 <SD_Read_IT>
 8010c98:	e165      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 808f 	beq.w	8010dc8 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	681b      	ldr	r3, [r3, #0]
 8010cae:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010cb2:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010cba:	687a      	ldr	r2, [r7, #4]
 8010cbc:	6812      	ldr	r2, [r2, #0]
 8010cbe:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8010cc2:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8010cc6:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f022 0201 	bic.w	r2, r2, #1
 8010cd6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8010cd8:	68fb      	ldr	r3, [r7, #12]
 8010cda:	f003 0308 	and.w	r3, r3, #8
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	d039      	beq.n	8010d56 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	f003 0302 	and.w	r3, r3, #2
 8010ce8:	2b00      	cmp	r3, #0
 8010cea:	d104      	bne.n	8010cf6 <HAL_SD_IRQHandler+0x8a>
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	f003 0320 	and.w	r3, r3, #32
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d011      	beq.n	8010d1a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	681b      	ldr	r3, [r3, #0]
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f002 fa46 	bl	801318c <SDMMC_CmdStopTransfer>
 8010d00:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d008      	beq.n	8010d1a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	431a      	orrs	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8010d14:	6878      	ldr	r0, [r7, #4]
 8010d16:	f000 f92f 	bl	8010f78 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f240 523a 	movw	r2, #1338	; 0x53a
 8010d22:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	2201      	movs	r2, #1
 8010d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	2200      	movs	r2, #0
 8010d30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010d32:	68fb      	ldr	r3, [r7, #12]
 8010d34:	f003 0301 	and.w	r3, r3, #1
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d104      	bne.n	8010d46 <HAL_SD_IRQHandler+0xda>
 8010d3c:	68fb      	ldr	r3, [r7, #12]
 8010d3e:	f003 0302 	and.w	r3, r3, #2
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d003      	beq.n	8010d4e <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f7f2 fc6e 	bl	8003628 <HAL_SD_RxCpltCallback>
 8010d4c:	e10b      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8010d4e:	6878      	ldr	r0, [r7, #4]
 8010d50:	f7f2 fc7a 	bl	8003648 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8010d54:	e107      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8010d56:	68fb      	ldr	r3, [r7, #12]
 8010d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	f000 8102 	beq.w	8010f66 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8010d62:	68fb      	ldr	r3, [r7, #12]
 8010d64:	f003 0320 	and.w	r3, r3, #32
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d011      	beq.n	8010d90 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	4618      	mov	r0, r3
 8010d72:	f002 fa0b 	bl	801318c <SDMMC_CmdStopTransfer>
 8010d76:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d008      	beq.n	8010d90 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	431a      	orrs	r2, r3
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8010d8a:	6878      	ldr	r0, [r7, #4]
 8010d8c:	f000 f8f4 	bl	8010f78 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f003 0301 	and.w	r3, r3, #1
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	f040 80e5 	bne.w	8010f66 <HAL_SD_IRQHandler+0x2fa>
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	f003 0302 	and.w	r3, r3, #2
 8010da2:	2b00      	cmp	r3, #0
 8010da4:	f040 80df 	bne.w	8010f66 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8010da8:	687b      	ldr	r3, [r7, #4]
 8010daa:	681b      	ldr	r3, [r3, #0]
 8010dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	f022 0208 	bic.w	r2, r2, #8
 8010db6:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	2201      	movs	r2, #1
 8010dbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8010dc0:	6878      	ldr	r0, [r7, #4]
 8010dc2:	f7f2 fc41 	bl	8003648 <HAL_SD_TxCpltCallback>
}
 8010dc6:	e0ce      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	681b      	ldr	r3, [r3, #0]
 8010dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d008      	beq.n	8010de8 <HAL_SD_IRQHandler+0x17c>
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	f003 0308 	and.w	r3, r3, #8
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d003      	beq.n	8010de8 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8010de0:	6878      	ldr	r0, [r7, #4]
 8010de2:	f000 ffb1 	bl	8011d48 <SD_Write_IT>
 8010de6:	e0be      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	681b      	ldr	r3, [r3, #0]
 8010dec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010dee:	f240 233a 	movw	r3, #570	; 0x23a
 8010df2:	4013      	ands	r3, r2
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	f000 80b6 	beq.w	8010f66 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e00:	f003 0302 	and.w	r3, r3, #2
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d005      	beq.n	8010e14 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e0c:	f043 0202 	orr.w	r2, r3, #2
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e1a:	f003 0308 	and.w	r3, r3, #8
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d005      	beq.n	8010e2e <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e26:	f043 0208 	orr.w	r2, r3, #8
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e34:	f003 0320 	and.w	r3, r3, #32
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d005      	beq.n	8010e48 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e40:	f043 0220 	orr.w	r2, r3, #32
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	681b      	ldr	r3, [r3, #0]
 8010e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e4e:	f003 0310 	and.w	r3, r3, #16
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d005      	beq.n	8010e62 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e5a:	f043 0210 	orr.w	r2, r3, #16
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010e68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d005      	beq.n	8010e7c <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010e74:	f043 0208 	orr.w	r2, r3, #8
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f240 723a 	movw	r2, #1850	; 0x73a
 8010e84:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010e8c:	687a      	ldr	r2, [r7, #4]
 8010e8e:	6812      	ldr	r2, [r2, #0]
 8010e90:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8010e94:	f023 0302 	bic.w	r3, r3, #2
 8010e98:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f002 f974 	bl	801318c <SDMMC_CmdStopTransfer>
 8010ea4:	4602      	mov	r2, r0
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eaa:	431a      	orrs	r2, r3
 8010eac:	687b      	ldr	r3, [r7, #4]
 8010eae:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8010eb0:	68fb      	ldr	r3, [r7, #12]
 8010eb2:	f003 0308 	and.w	r3, r3, #8
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d00a      	beq.n	8010ed0 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	2201      	movs	r2, #1
 8010ebe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	2200      	movs	r2, #0
 8010ec6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8010ec8:	6878      	ldr	r0, [r7, #4]
 8010eca:	f000 f855 	bl	8010f78 <HAL_SD_ErrorCallback>
}
 8010ece:	e04a      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d045      	beq.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8010eda:	68fb      	ldr	r3, [r7, #12]
 8010edc:	f003 0310 	and.w	r3, r3, #16
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d104      	bne.n	8010eee <HAL_SD_IRQHandler+0x282>
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f003 0320 	and.w	r3, r3, #32
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d011      	beq.n	8010f12 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ef2:	4a1f      	ldr	r2, [pc, #124]	; (8010f70 <HAL_SD_IRQHandler+0x304>)
 8010ef4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010efa:	4618      	mov	r0, r3
 8010efc:	f7fc fef8 	bl	800dcf0 <HAL_DMA_Abort_IT>
 8010f00:	4603      	mov	r3, r0
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d02f      	beq.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f000 fb72 	bl	80115f4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8010f10:	e029      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	f003 0301 	and.w	r3, r3, #1
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d104      	bne.n	8010f26 <HAL_SD_IRQHandler+0x2ba>
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	f003 0302 	and.w	r3, r3, #2
 8010f22:	2b00      	cmp	r3, #0
 8010f24:	d011      	beq.n	8010f4a <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f2a:	4a12      	ldr	r2, [pc, #72]	; (8010f74 <HAL_SD_IRQHandler+0x308>)
 8010f2c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f32:	4618      	mov	r0, r3
 8010f34:	f7fc fedc 	bl	800dcf0 <HAL_DMA_Abort_IT>
 8010f38:	4603      	mov	r3, r0
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d013      	beq.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f42:	4618      	mov	r0, r3
 8010f44:	f000 fb8d 	bl	8011662 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8010f48:	e00d      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2201      	movs	r2, #1
 8010f54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8010f5e:	6878      	ldr	r0, [r7, #4]
 8010f60:	f000 f814 	bl	8010f8c <HAL_SD_AbortCallback>
}
 8010f64:	e7ff      	b.n	8010f66 <HAL_SD_IRQHandler+0x2fa>
 8010f66:	bf00      	nop
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	080115f5 	.word	0x080115f5
 8010f74:	08011663 	.word	0x08011663

08010f78 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_AbortCallback can be implemented in the user file
   */
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8010fa0:	b480      	push	{r7}
 8010fa2:	b083      	sub	sp, #12
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
 8010fa8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fae:	0f9b      	lsrs	r3, r3, #30
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	683b      	ldr	r3, [r7, #0]
 8010fb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8010fb6:	687b      	ldr	r3, [r7, #4]
 8010fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fba:	0e9b      	lsrs	r3, r3, #26
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	f003 030f 	and.w	r3, r3, #15
 8010fc2:	b2da      	uxtb	r2, r3
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fcc:	0e1b      	lsrs	r3, r3, #24
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	f003 0303 	and.w	r3, r3, #3
 8010fd4:	b2da      	uxtb	r2, r3
 8010fd6:	683b      	ldr	r3, [r7, #0]
 8010fd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fde:	0c1b      	lsrs	r3, r3, #16
 8010fe0:	b2da      	uxtb	r2, r3
 8010fe2:	683b      	ldr	r3, [r7, #0]
 8010fe4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010fea:	0a1b      	lsrs	r3, r3, #8
 8010fec:	b2da      	uxtb	r2, r3
 8010fee:	683b      	ldr	r3, [r7, #0]
 8010ff0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ff6:	b2da      	uxtb	r2, r3
 8010ff8:	683b      	ldr	r3, [r7, #0]
 8010ffa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011000:	0d1b      	lsrs	r3, r3, #20
 8011002:	b29a      	uxth	r2, r3
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801100c:	0c1b      	lsrs	r3, r3, #16
 801100e:	b2db      	uxtb	r3, r3
 8011010:	f003 030f 	and.w	r3, r3, #15
 8011014:	b2da      	uxtb	r2, r3
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801101a:	687b      	ldr	r3, [r7, #4]
 801101c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801101e:	0bdb      	lsrs	r3, r3, #15
 8011020:	b2db      	uxtb	r3, r3
 8011022:	f003 0301 	and.w	r3, r3, #1
 8011026:	b2da      	uxtb	r2, r3
 8011028:	683b      	ldr	r3, [r7, #0]
 801102a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011030:	0b9b      	lsrs	r3, r3, #14
 8011032:	b2db      	uxtb	r3, r3
 8011034:	f003 0301 	and.w	r3, r3, #1
 8011038:	b2da      	uxtb	r2, r3
 801103a:	683b      	ldr	r3, [r7, #0]
 801103c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801103e:	687b      	ldr	r3, [r7, #4]
 8011040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011042:	0b5b      	lsrs	r3, r3, #13
 8011044:	b2db      	uxtb	r3, r3
 8011046:	f003 0301 	and.w	r3, r3, #1
 801104a:	b2da      	uxtb	r2, r3
 801104c:	683b      	ldr	r3, [r7, #0]
 801104e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011054:	0b1b      	lsrs	r3, r3, #12
 8011056:	b2db      	uxtb	r3, r3
 8011058:	f003 0301 	and.w	r3, r3, #1
 801105c:	b2da      	uxtb	r2, r3
 801105e:	683b      	ldr	r3, [r7, #0]
 8011060:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8011062:	683b      	ldr	r3, [r7, #0]
 8011064:	2200      	movs	r2, #0
 8011066:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801106c:	2b00      	cmp	r3, #0
 801106e:	d163      	bne.n	8011138 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011074:	009a      	lsls	r2, r3, #2
 8011076:	f640 73fc 	movw	r3, #4092	; 0xffc
 801107a:	4013      	ands	r3, r2
 801107c:	687a      	ldr	r2, [r7, #4]
 801107e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8011080:	0f92      	lsrs	r2, r2, #30
 8011082:	431a      	orrs	r2, r3
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801108c:	0edb      	lsrs	r3, r3, #27
 801108e:	b2db      	uxtb	r3, r3
 8011090:	f003 0307 	and.w	r3, r3, #7
 8011094:	b2da      	uxtb	r2, r3
 8011096:	683b      	ldr	r3, [r7, #0]
 8011098:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801109e:	0e1b      	lsrs	r3, r3, #24
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	f003 0307 	and.w	r3, r3, #7
 80110a6:	b2da      	uxtb	r2, r3
 80110a8:	683b      	ldr	r3, [r7, #0]
 80110aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110b0:	0d5b      	lsrs	r3, r3, #21
 80110b2:	b2db      	uxtb	r3, r3
 80110b4:	f003 0307 	and.w	r3, r3, #7
 80110b8:	b2da      	uxtb	r2, r3
 80110ba:	683b      	ldr	r3, [r7, #0]
 80110bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110c2:	0c9b      	lsrs	r3, r3, #18
 80110c4:	b2db      	uxtb	r3, r3
 80110c6:	f003 0307 	and.w	r3, r3, #7
 80110ca:	b2da      	uxtb	r2, r3
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80110d4:	0bdb      	lsrs	r3, r3, #15
 80110d6:	b2db      	uxtb	r3, r3
 80110d8:	f003 0307 	and.w	r3, r3, #7
 80110dc:	b2da      	uxtb	r2, r3
 80110de:	683b      	ldr	r3, [r7, #0]
 80110e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80110e2:	683b      	ldr	r3, [r7, #0]
 80110e4:	691b      	ldr	r3, [r3, #16]
 80110e6:	1c5a      	adds	r2, r3, #1
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80110ec:	683b      	ldr	r3, [r7, #0]
 80110ee:	7e1b      	ldrb	r3, [r3, #24]
 80110f0:	b2db      	uxtb	r3, r3
 80110f2:	f003 0307 	and.w	r3, r3, #7
 80110f6:	3302      	adds	r3, #2
 80110f8:	2201      	movs	r2, #1
 80110fa:	fa02 f303 	lsl.w	r3, r2, r3
 80110fe:	687a      	ldr	r2, [r7, #4]
 8011100:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8011102:	fb02 f203 	mul.w	r2, r2, r3
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 801110a:	683b      	ldr	r3, [r7, #0]
 801110c:	7a1b      	ldrb	r3, [r3, #8]
 801110e:	b2db      	uxtb	r3, r3
 8011110:	f003 030f 	and.w	r3, r3, #15
 8011114:	2201      	movs	r2, #1
 8011116:	409a      	lsls	r2, r3
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011120:	687a      	ldr	r2, [r7, #4]
 8011122:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8011124:	0a52      	lsrs	r2, r2, #9
 8011126:	fb02 f203 	mul.w	r2, r2, r3
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011134:	661a      	str	r2, [r3, #96]	; 0x60
 8011136:	e031      	b.n	801119c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801113c:	2b01      	cmp	r3, #1
 801113e:	d11d      	bne.n	801117c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011144:	041b      	lsls	r3, r3, #16
 8011146:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801114e:	0c1b      	lsrs	r3, r3, #16
 8011150:	431a      	orrs	r2, r3
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	691b      	ldr	r3, [r3, #16]
 801115a:	3301      	adds	r3, #1
 801115c:	029a      	lsls	r2, r3, #10
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011170:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011176:	687b      	ldr	r3, [r7, #4]
 8011178:	661a      	str	r2, [r3, #96]	; 0x60
 801117a:	e00f      	b.n	801119c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	681b      	ldr	r3, [r3, #0]
 8011180:	4a58      	ldr	r2, [pc, #352]	; (80112e4 <HAL_SD_GetCardCSD+0x344>)
 8011182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	2201      	movs	r2, #1
 8011194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8011198:	2301      	movs	r3, #1
 801119a:	e09d      	b.n	80112d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111a0:	0b9b      	lsrs	r3, r3, #14
 80111a2:	b2db      	uxtb	r3, r3
 80111a4:	f003 0301 	and.w	r3, r3, #1
 80111a8:	b2da      	uxtb	r2, r3
 80111aa:	683b      	ldr	r3, [r7, #0]
 80111ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111b2:	09db      	lsrs	r3, r3, #7
 80111b4:	b2db      	uxtb	r3, r3
 80111b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ba:	b2da      	uxtb	r2, r3
 80111bc:	683b      	ldr	r3, [r7, #0]
 80111be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111c4:	b2db      	uxtb	r3, r3
 80111c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80111ca:	b2da      	uxtb	r2, r3
 80111cc:	683b      	ldr	r3, [r7, #0]
 80111ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111d4:	0fdb      	lsrs	r3, r3, #31
 80111d6:	b2da      	uxtb	r2, r3
 80111d8:	683b      	ldr	r3, [r7, #0]
 80111da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80111dc:	687b      	ldr	r3, [r7, #4]
 80111de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111e0:	0f5b      	lsrs	r3, r3, #29
 80111e2:	b2db      	uxtb	r3, r3
 80111e4:	f003 0303 	and.w	r3, r3, #3
 80111e8:	b2da      	uxtb	r2, r3
 80111ea:	683b      	ldr	r3, [r7, #0]
 80111ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111f2:	0e9b      	lsrs	r3, r3, #26
 80111f4:	b2db      	uxtb	r3, r3
 80111f6:	f003 0307 	and.w	r3, r3, #7
 80111fa:	b2da      	uxtb	r2, r3
 80111fc:	683b      	ldr	r3, [r7, #0]
 80111fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011204:	0d9b      	lsrs	r3, r3, #22
 8011206:	b2db      	uxtb	r3, r3
 8011208:	f003 030f 	and.w	r3, r3, #15
 801120c:	b2da      	uxtb	r2, r3
 801120e:	683b      	ldr	r3, [r7, #0]
 8011210:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011216:	0d5b      	lsrs	r3, r3, #21
 8011218:	b2db      	uxtb	r3, r3
 801121a:	f003 0301 	and.w	r3, r3, #1
 801121e:	b2da      	uxtb	r2, r3
 8011220:	683b      	ldr	r3, [r7, #0]
 8011222:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8011226:	683b      	ldr	r3, [r7, #0]
 8011228:	2200      	movs	r2, #0
 801122a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011232:	0c1b      	lsrs	r3, r3, #16
 8011234:	b2db      	uxtb	r3, r3
 8011236:	f003 0301 	and.w	r3, r3, #1
 801123a:	b2da      	uxtb	r2, r3
 801123c:	683b      	ldr	r3, [r7, #0]
 801123e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011246:	0bdb      	lsrs	r3, r3, #15
 8011248:	b2db      	uxtb	r3, r3
 801124a:	f003 0301 	and.w	r3, r3, #1
 801124e:	b2da      	uxtb	r2, r3
 8011250:	683b      	ldr	r3, [r7, #0]
 8011252:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801125a:	0b9b      	lsrs	r3, r3, #14
 801125c:	b2db      	uxtb	r3, r3
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	b2da      	uxtb	r2, r3
 8011264:	683b      	ldr	r3, [r7, #0]
 8011266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801126e:	0b5b      	lsrs	r3, r3, #13
 8011270:	b2db      	uxtb	r3, r3
 8011272:	f003 0301 	and.w	r3, r3, #1
 8011276:	b2da      	uxtb	r2, r3
 8011278:	683b      	ldr	r3, [r7, #0]
 801127a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 801127e:	687b      	ldr	r3, [r7, #4]
 8011280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011282:	0b1b      	lsrs	r3, r3, #12
 8011284:	b2db      	uxtb	r3, r3
 8011286:	f003 0301 	and.w	r3, r3, #1
 801128a:	b2da      	uxtb	r2, r3
 801128c:	683b      	ldr	r3, [r7, #0]
 801128e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011296:	0a9b      	lsrs	r3, r3, #10
 8011298:	b2db      	uxtb	r3, r3
 801129a:	f003 0303 	and.w	r3, r3, #3
 801129e:	b2da      	uxtb	r2, r3
 80112a0:	683b      	ldr	r3, [r7, #0]
 80112a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112aa:	0a1b      	lsrs	r3, r3, #8
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 0303 	and.w	r3, r3, #3
 80112b2:	b2da      	uxtb	r2, r3
 80112b4:	683b      	ldr	r3, [r7, #0]
 80112b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80112ba:	687b      	ldr	r3, [r7, #4]
 80112bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112be:	085b      	lsrs	r3, r3, #1
 80112c0:	b2db      	uxtb	r3, r3
 80112c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112c6:	b2da      	uxtb	r2, r3
 80112c8:	683b      	ldr	r3, [r7, #0]
 80112ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80112ce:	683b      	ldr	r3, [r7, #0]
 80112d0:	2201      	movs	r2, #1
 80112d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80112d6:	2300      	movs	r3, #0
}
 80112d8:	4618      	mov	r0, r3
 80112da:	370c      	adds	r7, #12
 80112dc:	46bd      	mov	sp, r7
 80112de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e2:	4770      	bx	lr
 80112e4:	004005ff 	.word	0x004005ff

080112e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112f6:	683b      	ldr	r3, [r7, #0]
 80112f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8011316:	683b      	ldr	r3, [r7, #0]
 8011318:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8011332:	2300      	movs	r3, #0
}
 8011334:	4618      	mov	r0, r3
 8011336:	370c      	adds	r7, #12
 8011338:	46bd      	mov	sp, r7
 801133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801133e:	4770      	bx	lr

08011340 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8011340:	b5b0      	push	{r4, r5, r7, lr}
 8011342:	b08e      	sub	sp, #56	; 0x38
 8011344:	af04      	add	r7, sp, #16
 8011346:	6078      	str	r0, [r7, #4]
 8011348:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 801134a:	2300      	movs	r3, #0
 801134c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	2203      	movs	r2, #3
 8011354:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801135c:	2b03      	cmp	r3, #3
 801135e:	d02e      	beq.n	80113be <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8011360:	683b      	ldr	r3, [r7, #0]
 8011362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011366:	d106      	bne.n	8011376 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801136c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	639a      	str	r2, [r3, #56]	; 0x38
 8011374:	e029      	b.n	80113ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8011376:	683b      	ldr	r3, [r7, #0]
 8011378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801137c:	d10a      	bne.n	8011394 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 801137e:	6878      	ldr	r0, [r7, #4]
 8011380:	f000 fb28 	bl	80119d4 <SD_WideBus_Enable>
 8011384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801138a:	6a3b      	ldr	r3, [r7, #32]
 801138c:	431a      	orrs	r2, r3
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	639a      	str	r2, [r3, #56]	; 0x38
 8011392:	e01a      	b.n	80113ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d10a      	bne.n	80113b0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f000 fb65 	bl	8011a6a <SD_WideBus_Disable>
 80113a0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80113a2:	687b      	ldr	r3, [r7, #4]
 80113a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80113a6:	6a3b      	ldr	r3, [r7, #32]
 80113a8:	431a      	orrs	r2, r3
 80113aa:	687b      	ldr	r3, [r7, #4]
 80113ac:	639a      	str	r2, [r3, #56]	; 0x38
 80113ae:	e00c      	b.n	80113ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80113b0:	687b      	ldr	r3, [r7, #4]
 80113b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113b4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	639a      	str	r2, [r3, #56]	; 0x38
 80113bc:	e005      	b.n	80113ca <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80113be:	687b      	ldr	r3, [r7, #4]
 80113c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d00b      	beq.n	80113ea <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	4a26      	ldr	r2, [pc, #152]	; (8011470 <HAL_SD_ConfigWideBusOperation+0x130>)
 80113d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80113da:	687b      	ldr	r3, [r7, #4]
 80113dc:	2201      	movs	r2, #1
 80113de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80113e2:	2301      	movs	r3, #1
 80113e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113e8:	e01f      	b.n	801142a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	685b      	ldr	r3, [r3, #4]
 80113ee:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	68db      	ldr	r3, [r3, #12]
 80113fa:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80113fc:	683b      	ldr	r3, [r7, #0]
 80113fe:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	695b      	ldr	r3, [r3, #20]
 8011404:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8011406:	687b      	ldr	r3, [r7, #4]
 8011408:	699b      	ldr	r3, [r3, #24]
 801140a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	681d      	ldr	r5, [r3, #0]
 8011410:	466c      	mov	r4, sp
 8011412:	f107 0314 	add.w	r3, r7, #20
 8011416:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801141a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801141e:	f107 0308 	add.w	r3, r7, #8
 8011422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011424:	4628      	mov	r0, r5
 8011426:	f001 fd2b 	bl	8012e80 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011432:	4618      	mov	r0, r3
 8011434:	f001 fe00 	bl	8013038 <SDMMC_CmdBlockLength>
 8011438:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 801143a:	6a3b      	ldr	r3, [r7, #32]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d00c      	beq.n	801145a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	4a0a      	ldr	r2, [pc, #40]	; (8011470 <HAL_SD_ConfigWideBusOperation+0x130>)
 8011446:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	431a      	orrs	r2, r3
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8011454:	2301      	movs	r3, #1
 8011456:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2201      	movs	r2, #1
 801145e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8011462:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8011466:	4618      	mov	r0, r3
 8011468:	3728      	adds	r7, #40	; 0x28
 801146a:	46bd      	mov	sp, r7
 801146c:	bdb0      	pop	{r4, r5, r7, pc}
 801146e:	bf00      	nop
 8011470:	004005ff 	.word	0x004005ff

08011474 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 801147c:	2300      	movs	r3, #0
 801147e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8011480:	f107 030c 	add.w	r3, r7, #12
 8011484:	4619      	mov	r1, r3
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f000 fa7c 	bl	8011984 <SD_SendStatus>
 801148c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d005      	beq.n	80114a0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011498:	697b      	ldr	r3, [r7, #20]
 801149a:	431a      	orrs	r2, r3
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80114a0:	68fb      	ldr	r3, [r7, #12]
 80114a2:	0a5b      	lsrs	r3, r3, #9
 80114a4:	f003 030f 	and.w	r3, r3, #15
 80114a8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80114aa:	693b      	ldr	r3, [r7, #16]
}
 80114ac:	4618      	mov	r0, r3
 80114ae:	3718      	adds	r7, #24
 80114b0:	46bd      	mov	sp, r7
 80114b2:	bd80      	pop	{r7, pc}

080114b4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80114b4:	b480      	push	{r7}
 80114b6:	b085      	sub	sp, #20
 80114b8:	af00      	add	r7, sp, #0
 80114ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114c0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114c8:	68fb      	ldr	r3, [r7, #12]
 80114ca:	681b      	ldr	r3, [r3, #0]
 80114cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80114d0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80114d2:	bf00      	nop
 80114d4:	3714      	adds	r7, #20
 80114d6:	46bd      	mov	sp, r7
 80114d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114dc:	4770      	bx	lr

080114de <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80114de:	b580      	push	{r7, lr}
 80114e0:	b084      	sub	sp, #16
 80114e2:	af00      	add	r7, sp, #0
 80114e4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114ea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114f0:	2b82      	cmp	r3, #130	; 0x82
 80114f2:	d111      	bne.n	8011518 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	4618      	mov	r0, r3
 80114fa:	f001 fe47 	bl	801318c <SDMMC_CmdStopTransfer>
 80114fe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d008      	beq.n	8011518 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801150a:	68bb      	ldr	r3, [r7, #8]
 801150c:	431a      	orrs	r2, r3
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8011512:	68f8      	ldr	r0, [r7, #12]
 8011514:	f7ff fd30 	bl	8010f78 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	681b      	ldr	r3, [r3, #0]
 801151c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801151e:	68fb      	ldr	r3, [r7, #12]
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	f022 0208 	bic.w	r2, r2, #8
 8011526:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	f240 523a 	movw	r2, #1338	; 0x53a
 8011530:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2201      	movs	r2, #1
 8011536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	2200      	movs	r2, #0
 801153e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8011540:	68f8      	ldr	r0, [r7, #12]
 8011542:	f7f2 f871 	bl	8003628 <HAL_SD_RxCpltCallback>
#endif
}
 8011546:	bf00      	nop
 8011548:	3710      	adds	r7, #16
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}
	...

08011550 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b086      	sub	sp, #24
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f7fc fd72 	bl	800e048 <HAL_DMA_GetError>
 8011564:	4603      	mov	r3, r0
 8011566:	2b02      	cmp	r3, #2
 8011568:	d03e      	beq.n	80115e8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801156e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011570:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8011572:	697b      	ldr	r3, [r7, #20]
 8011574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011578:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 801157a:	693b      	ldr	r3, [r7, #16]
 801157c:	2b01      	cmp	r3, #1
 801157e:	d002      	beq.n	8011586 <SD_DMAError+0x36>
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	2b01      	cmp	r3, #1
 8011584:	d12d      	bne.n	80115e2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8011586:	697b      	ldr	r3, [r7, #20]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	4a19      	ldr	r2, [pc, #100]	; (80115f0 <SD_DMAError+0xa0>)
 801158c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 801159c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 801159e:	697b      	ldr	r3, [r7, #20]
 80115a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80115aa:	6978      	ldr	r0, [r7, #20]
 80115ac:	f7ff ff62 	bl	8011474 <HAL_SD_GetCardState>
 80115b0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80115b2:	68bb      	ldr	r3, [r7, #8]
 80115b4:	2b06      	cmp	r3, #6
 80115b6:	d002      	beq.n	80115be <SD_DMAError+0x6e>
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	2b05      	cmp	r3, #5
 80115bc:	d10a      	bne.n	80115d4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	681b      	ldr	r3, [r3, #0]
 80115c2:	4618      	mov	r0, r3
 80115c4:	f001 fde2 	bl	801318c <SDMMC_CmdStopTransfer>
 80115c8:	4602      	mov	r2, r0
 80115ca:	697b      	ldr	r3, [r7, #20]
 80115cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115ce:	431a      	orrs	r2, r3
 80115d0:	697b      	ldr	r3, [r7, #20]
 80115d2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80115d4:	697b      	ldr	r3, [r7, #20]
 80115d6:	2201      	movs	r2, #1
 80115d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2200      	movs	r2, #0
 80115e0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80115e2:	6978      	ldr	r0, [r7, #20]
 80115e4:	f7ff fcc8 	bl	8010f78 <HAL_SD_ErrorCallback>
#endif
  }
}
 80115e8:	bf00      	nop
 80115ea:	3718      	adds	r7, #24
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	004005ff 	.word	0x004005ff

080115f4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b084      	sub	sp, #16
 80115f8:	af00      	add	r7, sp, #0
 80115fa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011600:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	681b      	ldr	r3, [r3, #0]
 8011606:	f240 523a 	movw	r2, #1338	; 0x53a
 801160a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801160c:	68f8      	ldr	r0, [r7, #12]
 801160e:	f7ff ff31 	bl	8011474 <HAL_SD_GetCardState>
 8011612:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	2201      	movs	r2, #1
 8011618:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	2200      	movs	r2, #0
 8011620:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	2b06      	cmp	r3, #6
 8011626:	d002      	beq.n	801162e <SD_DMATxAbort+0x3a>
 8011628:	68bb      	ldr	r3, [r7, #8]
 801162a:	2b05      	cmp	r3, #5
 801162c:	d10a      	bne.n	8011644 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	681b      	ldr	r3, [r3, #0]
 8011632:	4618      	mov	r0, r3
 8011634:	f001 fdaa 	bl	801318c <SDMMC_CmdStopTransfer>
 8011638:	4602      	mov	r2, r0
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801163e:	431a      	orrs	r2, r3
 8011640:	68fb      	ldr	r3, [r7, #12]
 8011642:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011648:	2b00      	cmp	r3, #0
 801164a:	d103      	bne.n	8011654 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7ff fc9d 	bl	8010f8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8011652:	e002      	b.n	801165a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8011654:	68f8      	ldr	r0, [r7, #12]
 8011656:	f7ff fc8f 	bl	8010f78 <HAL_SD_ErrorCallback>
}
 801165a:	bf00      	nop
 801165c:	3710      	adds	r7, #16
 801165e:	46bd      	mov	sp, r7
 8011660:	bd80      	pop	{r7, pc}

08011662 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8011662:	b580      	push	{r7, lr}
 8011664:	b084      	sub	sp, #16
 8011666:	af00      	add	r7, sp, #0
 8011668:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801166e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	681b      	ldr	r3, [r3, #0]
 8011674:	f240 523a 	movw	r2, #1338	; 0x53a
 8011678:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 801167a:	68f8      	ldr	r0, [r7, #12]
 801167c:	f7ff fefa 	bl	8011474 <HAL_SD_GetCardState>
 8011680:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8011682:	68fb      	ldr	r3, [r7, #12]
 8011684:	2201      	movs	r2, #1
 8011686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 801168a:	68fb      	ldr	r3, [r7, #12]
 801168c:	2200      	movs	r2, #0
 801168e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8011690:	68bb      	ldr	r3, [r7, #8]
 8011692:	2b06      	cmp	r3, #6
 8011694:	d002      	beq.n	801169c <SD_DMARxAbort+0x3a>
 8011696:	68bb      	ldr	r3, [r7, #8]
 8011698:	2b05      	cmp	r3, #5
 801169a:	d10a      	bne.n	80116b2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	4618      	mov	r0, r3
 80116a2:	f001 fd73 	bl	801318c <SDMMC_CmdStopTransfer>
 80116a6:	4602      	mov	r2, r0
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116ac:	431a      	orrs	r2, r3
 80116ae:	68fb      	ldr	r3, [r7, #12]
 80116b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80116b6:	2b00      	cmp	r3, #0
 80116b8:	d103      	bne.n	80116c2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80116ba:	68f8      	ldr	r0, [r7, #12]
 80116bc:	f7ff fc66 	bl	8010f8c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80116c0:	e002      	b.n	80116c8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80116c2:	68f8      	ldr	r0, [r7, #12]
 80116c4:	f7ff fc58 	bl	8010f78 <HAL_SD_ErrorCallback>
}
 80116c8:	bf00      	nop
 80116ca:	3710      	adds	r7, #16
 80116cc:	46bd      	mov	sp, r7
 80116ce:	bd80      	pop	{r7, pc}

080116d0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80116d0:	b5b0      	push	{r4, r5, r7, lr}
 80116d2:	b094      	sub	sp, #80	; 0x50
 80116d4:	af04      	add	r7, sp, #16
 80116d6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80116d8:	2301      	movs	r3, #1
 80116da:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	4618      	mov	r0, r3
 80116e2:	f001 fc25 	bl	8012f30 <SDIO_GetPowerState>
 80116e6:	4603      	mov	r3, r0
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d102      	bne.n	80116f2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80116ec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80116f0:	e0b6      	b.n	8011860 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	d02f      	beq.n	801175a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	681b      	ldr	r3, [r3, #0]
 80116fe:	4618      	mov	r0, r3
 8011700:	f001 fe4e 	bl	80133a0 <SDMMC_CmdSendCID>
 8011704:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011708:	2b00      	cmp	r3, #0
 801170a:	d001      	beq.n	8011710 <SD_InitCard+0x40>
    {
      return errorstate;
 801170c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801170e:	e0a7      	b.n	8011860 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	681b      	ldr	r3, [r3, #0]
 8011714:	2100      	movs	r1, #0
 8011716:	4618      	mov	r0, r3
 8011718:	f001 fc4f 	bl	8012fba <SDIO_GetResponse>
 801171c:	4602      	mov	r2, r0
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2104      	movs	r1, #4
 8011728:	4618      	mov	r0, r3
 801172a:	f001 fc46 	bl	8012fba <SDIO_GetResponse>
 801172e:	4602      	mov	r2, r0
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	2108      	movs	r1, #8
 801173a:	4618      	mov	r0, r3
 801173c:	f001 fc3d 	bl	8012fba <SDIO_GetResponse>
 8011740:	4602      	mov	r2, r0
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	210c      	movs	r1, #12
 801174c:	4618      	mov	r0, r3
 801174e:	f001 fc34 	bl	8012fba <SDIO_GetResponse>
 8011752:	4602      	mov	r2, r0
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801175e:	2b03      	cmp	r3, #3
 8011760:	d00d      	beq.n	801177e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	f107 020e 	add.w	r2, r7, #14
 801176a:	4611      	mov	r1, r2
 801176c:	4618      	mov	r0, r3
 801176e:	f001 fe54 	bl	801341a <SDMMC_CmdSetRelAdd>
 8011772:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8011774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011776:	2b00      	cmp	r3, #0
 8011778:	d001      	beq.n	801177e <SD_InitCard+0xae>
    {
      return errorstate;
 801177a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801177c:	e070      	b.n	8011860 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 801177e:	687b      	ldr	r3, [r7, #4]
 8011780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011782:	2b03      	cmp	r3, #3
 8011784:	d036      	beq.n	80117f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8011786:	89fb      	ldrh	r3, [r7, #14]
 8011788:	461a      	mov	r2, r3
 801178a:	687b      	ldr	r3, [r7, #4]
 801178c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	681a      	ldr	r2, [r3, #0]
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011796:	041b      	lsls	r3, r3, #16
 8011798:	4619      	mov	r1, r3
 801179a:	4610      	mov	r0, r2
 801179c:	f001 fe1e 	bl	80133dc <SDMMC_CmdSendCSD>
 80117a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80117a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d001      	beq.n	80117ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	e059      	b.n	8011860 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	681b      	ldr	r3, [r3, #0]
 80117b0:	2100      	movs	r1, #0
 80117b2:	4618      	mov	r0, r3
 80117b4:	f001 fc01 	bl	8012fba <SDIO_GetResponse>
 80117b8:	4602      	mov	r2, r0
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	681b      	ldr	r3, [r3, #0]
 80117c2:	2104      	movs	r1, #4
 80117c4:	4618      	mov	r0, r3
 80117c6:	f001 fbf8 	bl	8012fba <SDIO_GetResponse>
 80117ca:	4602      	mov	r2, r0
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	681b      	ldr	r3, [r3, #0]
 80117d4:	2108      	movs	r1, #8
 80117d6:	4618      	mov	r0, r3
 80117d8:	f001 fbef 	bl	8012fba <SDIO_GetResponse>
 80117dc:	4602      	mov	r2, r0
 80117de:	687b      	ldr	r3, [r7, #4]
 80117e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	210c      	movs	r1, #12
 80117e8:	4618      	mov	r0, r3
 80117ea:	f001 fbe6 	bl	8012fba <SDIO_GetResponse>
 80117ee:	4602      	mov	r2, r0
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	2104      	movs	r1, #4
 80117fa:	4618      	mov	r0, r3
 80117fc:	f001 fbdd 	bl	8012fba <SDIO_GetResponse>
 8011800:	4603      	mov	r3, r0
 8011802:	0d1a      	lsrs	r2, r3, #20
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8011808:	f107 0310 	add.w	r3, r7, #16
 801180c:	4619      	mov	r1, r3
 801180e:	6878      	ldr	r0, [r7, #4]
 8011810:	f7ff fbc6 	bl	8010fa0 <HAL_SD_GetCardCSD>
 8011814:	4603      	mov	r3, r0
 8011816:	2b00      	cmp	r3, #0
 8011818:	d002      	beq.n	8011820 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 801181a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801181e:	e01f      	b.n	8011860 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	6819      	ldr	r1, [r3, #0]
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011828:	041b      	lsls	r3, r3, #16
 801182a:	461a      	mov	r2, r3
 801182c:	f04f 0300 	mov.w	r3, #0
 8011830:	4608      	mov	r0, r1
 8011832:	f001 fccd 	bl	80131d0 <SDMMC_CmdSelDesel>
 8011836:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8011838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801183a:	2b00      	cmp	r3, #0
 801183c:	d001      	beq.n	8011842 <SD_InitCard+0x172>
  {
    return errorstate;
 801183e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011840:	e00e      	b.n	8011860 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	681d      	ldr	r5, [r3, #0]
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	466c      	mov	r4, sp
 801184a:	f103 0210 	add.w	r2, r3, #16
 801184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8011850:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011854:	3304      	adds	r3, #4
 8011856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8011858:	4628      	mov	r0, r5
 801185a:	f001 fb11 	bl	8012e80 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 801185e:	2300      	movs	r3, #0
}
 8011860:	4618      	mov	r0, r3
 8011862:	3740      	adds	r7, #64	; 0x40
 8011864:	46bd      	mov	sp, r7
 8011866:	bdb0      	pop	{r4, r5, r7, pc}

08011868 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8011868:	b580      	push	{r7, lr}
 801186a:	b086      	sub	sp, #24
 801186c:	af00      	add	r7, sp, #0
 801186e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011870:	2300      	movs	r3, #0
 8011872:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8011874:	2300      	movs	r3, #0
 8011876:	617b      	str	r3, [r7, #20]
 8011878:	2300      	movs	r3, #0
 801187a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 801187c:	687b      	ldr	r3, [r7, #4]
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	4618      	mov	r0, r3
 8011882:	f001 fcc8 	bl	8013216 <SDMMC_CmdGoIdleState>
 8011886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011888:	68fb      	ldr	r3, [r7, #12]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d001      	beq.n	8011892 <SD_PowerON+0x2a>
  {
    return errorstate;
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	e072      	b.n	8011978 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	681b      	ldr	r3, [r3, #0]
 8011896:	4618      	mov	r0, r3
 8011898:	f001 fcdb 	bl	8013252 <SDMMC_CmdOperCond>
 801189c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 801189e:	68fb      	ldr	r3, [r7, #12]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d00d      	beq.n	80118c0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	2200      	movs	r2, #0
 80118a8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	4618      	mov	r0, r3
 80118b0:	f001 fcb1 	bl	8013216 <SDMMC_CmdGoIdleState>
 80118b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	2b00      	cmp	r3, #0
 80118ba:	d004      	beq.n	80118c6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80118bc:	68fb      	ldr	r3, [r7, #12]
 80118be:	e05b      	b.n	8011978 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2201      	movs	r2, #1
 80118c4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80118ca:	2b01      	cmp	r3, #1
 80118cc:	d137      	bne.n	801193e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80118ce:	687b      	ldr	r3, [r7, #4]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2100      	movs	r1, #0
 80118d4:	4618      	mov	r0, r3
 80118d6:	f001 fcdb 	bl	8013290 <SDMMC_CmdAppCommand>
 80118da:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d02d      	beq.n	801193e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80118e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80118e6:	e047      	b.n	8011978 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	681b      	ldr	r3, [r3, #0]
 80118ec:	2100      	movs	r1, #0
 80118ee:	4618      	mov	r0, r3
 80118f0:	f001 fcce 	bl	8013290 <SDMMC_CmdAppCommand>
 80118f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d001      	beq.n	8011900 <SD_PowerON+0x98>
    {
      return errorstate;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	e03b      	b.n	8011978 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	491e      	ldr	r1, [pc, #120]	; (8011980 <SD_PowerON+0x118>)
 8011906:	4618      	mov	r0, r3
 8011908:	f001 fce4 	bl	80132d4 <SDMMC_CmdAppOperCommand>
 801190c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 801190e:	68fb      	ldr	r3, [r7, #12]
 8011910:	2b00      	cmp	r3, #0
 8011912:	d002      	beq.n	801191a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8011914:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011918:	e02e      	b.n	8011978 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	2100      	movs	r1, #0
 8011920:	4618      	mov	r0, r3
 8011922:	f001 fb4a 	bl	8012fba <SDIO_GetResponse>
 8011926:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8011928:	697b      	ldr	r3, [r7, #20]
 801192a:	0fdb      	lsrs	r3, r3, #31
 801192c:	2b01      	cmp	r3, #1
 801192e:	d101      	bne.n	8011934 <SD_PowerON+0xcc>
 8011930:	2301      	movs	r3, #1
 8011932:	e000      	b.n	8011936 <SD_PowerON+0xce>
 8011934:	2300      	movs	r3, #0
 8011936:	613b      	str	r3, [r7, #16]

    count++;
 8011938:	68bb      	ldr	r3, [r7, #8]
 801193a:	3301      	adds	r3, #1
 801193c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 801193e:	68bb      	ldr	r3, [r7, #8]
 8011940:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011944:	4293      	cmp	r3, r2
 8011946:	d802      	bhi.n	801194e <SD_PowerON+0xe6>
 8011948:	693b      	ldr	r3, [r7, #16]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d0cc      	beq.n	80118e8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 801194e:	68bb      	ldr	r3, [r7, #8]
 8011950:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011954:	4293      	cmp	r3, r2
 8011956:	d902      	bls.n	801195e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8011958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801195c:	e00c      	b.n	8011978 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 801195e:	697b      	ldr	r3, [r7, #20]
 8011960:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8011964:	2b00      	cmp	r3, #0
 8011966:	d003      	beq.n	8011970 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	2201      	movs	r2, #1
 801196c:	645a      	str	r2, [r3, #68]	; 0x44
 801196e:	e002      	b.n	8011976 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	2200      	movs	r2, #0
 8011974:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8011976:	2300      	movs	r3, #0
}
 8011978:	4618      	mov	r0, r3
 801197a:	3718      	adds	r7, #24
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	c1100000 	.word	0xc1100000

08011984 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8011984:	b580      	push	{r7, lr}
 8011986:	b084      	sub	sp, #16
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
 801198c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d102      	bne.n	801199a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8011994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011998:	e018      	b.n	80119cc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	681a      	ldr	r2, [r3, #0]
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119a2:	041b      	lsls	r3, r3, #16
 80119a4:	4619      	mov	r1, r3
 80119a6:	4610      	mov	r0, r2
 80119a8:	f001 fd58 	bl	801345c <SDMMC_CmdSendStatus>
 80119ac:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d001      	beq.n	80119b8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	e009      	b.n	80119cc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	2100      	movs	r1, #0
 80119be:	4618      	mov	r0, r3
 80119c0:	f001 fafb 	bl	8012fba <SDIO_GetResponse>
 80119c4:	4602      	mov	r2, r0
 80119c6:	683b      	ldr	r3, [r7, #0]
 80119c8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80119ca:	2300      	movs	r3, #0
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3710      	adds	r7, #16
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b086      	sub	sp, #24
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80119dc:	2300      	movs	r3, #0
 80119de:	60fb      	str	r3, [r7, #12]
 80119e0:	2300      	movs	r3, #0
 80119e2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2100      	movs	r1, #0
 80119ea:	4618      	mov	r0, r3
 80119ec:	f001 fae5 	bl	8012fba <SDIO_GetResponse>
 80119f0:	4603      	mov	r3, r0
 80119f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119fa:	d102      	bne.n	8011a02 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80119fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a00:	e02f      	b.n	8011a62 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011a02:	f107 030c 	add.w	r3, r7, #12
 8011a06:	4619      	mov	r1, r3
 8011a08:	6878      	ldr	r0, [r7, #4]
 8011a0a:	f000 f879 	bl	8011b00 <SD_FindSCR>
 8011a0e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d001      	beq.n	8011a1a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	e023      	b.n	8011a62 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d01c      	beq.n	8011a5e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	681a      	ldr	r2, [r3, #0]
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011a2c:	041b      	lsls	r3, r3, #16
 8011a2e:	4619      	mov	r1, r3
 8011a30:	4610      	mov	r0, r2
 8011a32:	f001 fc2d 	bl	8013290 <SDMMC_CmdAppCommand>
 8011a36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a38:	697b      	ldr	r3, [r7, #20]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d001      	beq.n	8011a42 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8011a3e:	697b      	ldr	r3, [r7, #20]
 8011a40:	e00f      	b.n	8011a62 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	2102      	movs	r1, #2
 8011a48:	4618      	mov	r0, r3
 8011a4a:	f001 fc66 	bl	801331a <SDMMC_CmdBusWidth>
 8011a4e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d001      	beq.n	8011a5a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	e003      	b.n	8011a62 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011a5a:	2300      	movs	r3, #0
 8011a5c:	e001      	b.n	8011a62 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011a5e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011a62:	4618      	mov	r0, r3
 8011a64:	3718      	adds	r7, #24
 8011a66:	46bd      	mov	sp, r7
 8011a68:	bd80      	pop	{r7, pc}

08011a6a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8011a6a:	b580      	push	{r7, lr}
 8011a6c:	b086      	sub	sp, #24
 8011a6e:	af00      	add	r7, sp, #0
 8011a70:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8011a72:	2300      	movs	r3, #0
 8011a74:	60fb      	str	r3, [r7, #12]
 8011a76:	2300      	movs	r3, #0
 8011a78:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	2100      	movs	r1, #0
 8011a80:	4618      	mov	r0, r3
 8011a82:	f001 fa9a 	bl	8012fba <SDIO_GetResponse>
 8011a86:	4603      	mov	r3, r0
 8011a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011a8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011a90:	d102      	bne.n	8011a98 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8011a92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011a96:	e02f      	b.n	8011af8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8011a98:	f107 030c 	add.w	r3, r7, #12
 8011a9c:	4619      	mov	r1, r3
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f000 f82e 	bl	8011b00 <SD_FindSCR>
 8011aa4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8011aa6:	697b      	ldr	r3, [r7, #20]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8011aac:	697b      	ldr	r3, [r7, #20]
 8011aae:	e023      	b.n	8011af8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8011ab0:	693b      	ldr	r3, [r7, #16]
 8011ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011ab6:	2b00      	cmp	r3, #0
 8011ab8:	d01c      	beq.n	8011af4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	681a      	ldr	r2, [r3, #0]
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ac2:	041b      	lsls	r3, r3, #16
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4610      	mov	r0, r2
 8011ac8:	f001 fbe2 	bl	8013290 <SDMMC_CmdAppCommand>
 8011acc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ace:	697b      	ldr	r3, [r7, #20]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d001      	beq.n	8011ad8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8011ad4:	697b      	ldr	r3, [r7, #20]
 8011ad6:	e00f      	b.n	8011af8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8011ad8:	687b      	ldr	r3, [r7, #4]
 8011ada:	681b      	ldr	r3, [r3, #0]
 8011adc:	2100      	movs	r1, #0
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f001 fc1b 	bl	801331a <SDMMC_CmdBusWidth>
 8011ae4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d001      	beq.n	8011af0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	e003      	b.n	8011af8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8011af0:	2300      	movs	r3, #0
 8011af2:	e001      	b.n	8011af8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8011af4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8011af8:	4618      	mov	r0, r3
 8011afa:	3718      	adds	r7, #24
 8011afc:	46bd      	mov	sp, r7
 8011afe:	bd80      	pop	{r7, pc}

08011b00 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8011b00:	b590      	push	{r4, r7, lr}
 8011b02:	b08f      	sub	sp, #60	; 0x3c
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8011b0a:	f7fb fea9 	bl	800d860 <HAL_GetTick>
 8011b0e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8011b10:	2300      	movs	r3, #0
 8011b12:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8011b14:	2300      	movs	r3, #0
 8011b16:	60bb      	str	r3, [r7, #8]
 8011b18:	2300      	movs	r3, #0
 8011b1a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8011b1c:	683b      	ldr	r3, [r7, #0]
 8011b1e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	681b      	ldr	r3, [r3, #0]
 8011b24:	2108      	movs	r1, #8
 8011b26:	4618      	mov	r0, r3
 8011b28:	f001 fa86 	bl	8013038 <SDMMC_CmdBlockLength>
 8011b2c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d001      	beq.n	8011b38 <SD_FindSCR+0x38>
  {
    return errorstate;
 8011b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b36:	e0b2      	b.n	8011c9e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	681a      	ldr	r2, [r3, #0]
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b40:	041b      	lsls	r3, r3, #16
 8011b42:	4619      	mov	r1, r3
 8011b44:	4610      	mov	r0, r2
 8011b46:	f001 fba3 	bl	8013290 <SDMMC_CmdAppCommand>
 8011b4a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b4e:	2b00      	cmp	r3, #0
 8011b50:	d001      	beq.n	8011b56 <SD_FindSCR+0x56>
  {
    return errorstate;
 8011b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b54:	e0a3      	b.n	8011c9e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8011b56:	f04f 33ff 	mov.w	r3, #4294967295
 8011b5a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8011b5c:	2308      	movs	r3, #8
 8011b5e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8011b60:	2330      	movs	r3, #48	; 0x30
 8011b62:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8011b64:	2302      	movs	r3, #2
 8011b66:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8011b68:	2300      	movs	r3, #0
 8011b6a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	681b      	ldr	r3, [r3, #0]
 8011b74:	f107 0210 	add.w	r2, r7, #16
 8011b78:	4611      	mov	r1, r2
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f001 fa30 	bl	8012fe0 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f001 fbea 	bl	801335e <SDMMC_CmdSendSCR>
 8011b8a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8011b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d02a      	beq.n	8011be8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8011b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b94:	e083      	b.n	8011c9e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	681b      	ldr	r3, [r3, #0]
 8011b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d00f      	beq.n	8011bc4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	6819      	ldr	r1, [r3, #0]
 8011ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011baa:	009b      	lsls	r3, r3, #2
 8011bac:	f107 0208 	add.w	r2, r7, #8
 8011bb0:	18d4      	adds	r4, r2, r3
 8011bb2:	4608      	mov	r0, r1
 8011bb4:	f001 f98f 	bl	8012ed6 <SDIO_ReadFIFO>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	6023      	str	r3, [r4, #0]
      index++;
 8011bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bbe:	3301      	adds	r3, #1
 8011bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8011bc2:	e006      	b.n	8011bd2 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8011bc4:	687b      	ldr	r3, [r7, #4]
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d012      	beq.n	8011bf8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8011bd2:	f7fb fe45 	bl	800d860 <HAL_GetTick>
 8011bd6:	4602      	mov	r2, r0
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bda:	1ad3      	subs	r3, r2, r3
 8011bdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011be0:	d102      	bne.n	8011be8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8011be2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011be6:	e05a      	b.n	8011c9e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	681b      	ldr	r3, [r3, #0]
 8011bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011bee:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d0cf      	beq.n	8011b96 <SD_FindSCR+0x96>
 8011bf6:	e000      	b.n	8011bfa <SD_FindSCR+0xfa>
      break;
 8011bf8:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	681b      	ldr	r3, [r3, #0]
 8011bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c00:	f003 0308 	and.w	r3, r3, #8
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d005      	beq.n	8011c14 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	2208      	movs	r2, #8
 8011c0e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8011c10:	2308      	movs	r3, #8
 8011c12:	e044      	b.n	8011c9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c1a:	f003 0302 	and.w	r3, r3, #2
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d005      	beq.n	8011c2e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	681b      	ldr	r3, [r3, #0]
 8011c26:	2202      	movs	r2, #2
 8011c28:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8011c2a:	2302      	movs	r3, #2
 8011c2c:	e037      	b.n	8011c9e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c34:	f003 0320 	and.w	r3, r3, #32
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d005      	beq.n	8011c48 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	2220      	movs	r2, #32
 8011c42:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8011c44:	2320      	movs	r3, #32
 8011c46:	e02a      	b.n	8011c9e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	681b      	ldr	r3, [r3, #0]
 8011c4c:	f240 523a 	movw	r2, #1338	; 0x53a
 8011c50:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011c52:	68fb      	ldr	r3, [r7, #12]
 8011c54:	061a      	lsls	r2, r3, #24
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	021b      	lsls	r3, r3, #8
 8011c5a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011c5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	0a1b      	lsrs	r3, r3, #8
 8011c64:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011c68:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	0e1b      	lsrs	r3, r3, #24
 8011c6e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8011c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c72:	601a      	str	r2, [r3, #0]
    scr++;
 8011c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c76:	3304      	adds	r3, #4
 8011c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011c7a:	68bb      	ldr	r3, [r7, #8]
 8011c7c:	061a      	lsls	r2, r3, #24
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	021b      	lsls	r3, r3, #8
 8011c82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011c86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	0a1b      	lsrs	r3, r3, #8
 8011c8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011c90:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	0e1b      	lsrs	r3, r3, #24
 8011c96:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8011c98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c9a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8011c9c:	2300      	movs	r3, #0
}
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	373c      	adds	r7, #60	; 0x3c
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd90      	pop	{r4, r7, pc}

08011ca6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8011ca6:	b580      	push	{r7, lr}
 8011ca8:	b086      	sub	sp, #24
 8011caa:	af00      	add	r7, sp, #0
 8011cac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011cb2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8011cb4:	687b      	ldr	r3, [r7, #4]
 8011cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cb8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d03f      	beq.n	8011d40 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	617b      	str	r3, [r7, #20]
 8011cc4:	e033      	b.n	8011d2e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	4618      	mov	r0, r3
 8011ccc:	f001 f903 	bl	8012ed6 <SDIO_ReadFIFO>
 8011cd0:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8011cd2:	68bb      	ldr	r3, [r7, #8]
 8011cd4:	b2da      	uxtb	r2, r3
 8011cd6:	68fb      	ldr	r3, [r7, #12]
 8011cd8:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	3301      	adds	r3, #1
 8011cde:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011ce0:	693b      	ldr	r3, [r7, #16]
 8011ce2:	3b01      	subs	r3, #1
 8011ce4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8011ce6:	68bb      	ldr	r3, [r7, #8]
 8011ce8:	0a1b      	lsrs	r3, r3, #8
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011cf6:	693b      	ldr	r3, [r7, #16]
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	0c1b      	lsrs	r3, r3, #16
 8011d00:	b2da      	uxtb	r2, r3
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011d06:	68fb      	ldr	r3, [r7, #12]
 8011d08:	3301      	adds	r3, #1
 8011d0a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	3b01      	subs	r3, #1
 8011d10:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	0e1b      	lsrs	r3, r3, #24
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	701a      	strb	r2, [r3, #0]
      tmp++;
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	3301      	adds	r3, #1
 8011d20:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	3b01      	subs	r3, #1
 8011d26:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	3301      	adds	r3, #1
 8011d2c:	617b      	str	r3, [r7, #20]
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	2b07      	cmp	r3, #7
 8011d32:	d9c8      	bls.n	8011cc6 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	68fa      	ldr	r2, [r7, #12]
 8011d38:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	693a      	ldr	r2, [r7, #16]
 8011d3e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8011d40:	bf00      	nop
 8011d42:	3718      	adds	r7, #24
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}

08011d48 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8011d48:	b580      	push	{r7, lr}
 8011d4a:	b086      	sub	sp, #24
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	6a1b      	ldr	r3, [r3, #32]
 8011d54:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d5a:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d043      	beq.n	8011dea <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8011d62:	2300      	movs	r3, #0
 8011d64:	617b      	str	r3, [r7, #20]
 8011d66:	e037      	b.n	8011dd8 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8011d68:	68fb      	ldr	r3, [r7, #12]
 8011d6a:	781b      	ldrb	r3, [r3, #0]
 8011d6c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	3301      	adds	r3, #1
 8011d72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	3b01      	subs	r3, #1
 8011d78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	781b      	ldrb	r3, [r3, #0]
 8011d7e:	021a      	lsls	r2, r3, #8
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	4313      	orrs	r3, r2
 8011d84:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011d86:	68fb      	ldr	r3, [r7, #12]
 8011d88:	3301      	adds	r3, #1
 8011d8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011d8c:	693b      	ldr	r3, [r7, #16]
 8011d8e:	3b01      	subs	r3, #1
 8011d90:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	041a      	lsls	r2, r3, #16
 8011d98:	68bb      	ldr	r3, [r7, #8]
 8011d9a:	4313      	orrs	r3, r2
 8011d9c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3301      	adds	r3, #1
 8011da2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011da4:	693b      	ldr	r3, [r7, #16]
 8011da6:	3b01      	subs	r3, #1
 8011da8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	061a      	lsls	r2, r3, #24
 8011db0:	68bb      	ldr	r3, [r7, #8]
 8011db2:	4313      	orrs	r3, r2
 8011db4:	60bb      	str	r3, [r7, #8]
      tmp++;
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	3301      	adds	r3, #1
 8011dba:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8011dbc:	693b      	ldr	r3, [r7, #16]
 8011dbe:	3b01      	subs	r3, #1
 8011dc0:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f107 0208 	add.w	r2, r7, #8
 8011dca:	4611      	mov	r1, r2
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f001 f88f 	bl	8012ef0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8011dd2:	697b      	ldr	r3, [r7, #20]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	617b      	str	r3, [r7, #20]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	2b07      	cmp	r3, #7
 8011ddc:	d9c4      	bls.n	8011d68 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	68fa      	ldr	r2, [r7, #12]
 8011de2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	693a      	ldr	r2, [r7, #16]
 8011de8:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8011dea:	bf00      	nop
 8011dec:	3718      	adds	r7, #24
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b082      	sub	sp, #8
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d101      	bne.n	8011e04 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8011e00:	2301      	movs	r3, #1
 8011e02:	e07b      	b.n	8011efc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d108      	bne.n	8011e1e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	685b      	ldr	r3, [r3, #4]
 8011e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011e14:	d009      	beq.n	8011e2a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	2200      	movs	r2, #0
 8011e1a:	61da      	str	r2, [r3, #28]
 8011e1c:	e005      	b.n	8011e2a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011e36:	b2db      	uxtb	r3, r3
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d106      	bne.n	8011e4a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2200      	movs	r2, #0
 8011e40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8011e44:	6878      	ldr	r0, [r7, #4]
 8011e46:	f7f2 f851 	bl	8003eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	2202      	movs	r2, #2
 8011e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	681a      	ldr	r2, [r3, #0]
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011e60:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8011e72:	431a      	orrs	r2, r3
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	68db      	ldr	r3, [r3, #12]
 8011e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011e7c:	431a      	orrs	r2, r3
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	691b      	ldr	r3, [r3, #16]
 8011e82:	f003 0302 	and.w	r3, r3, #2
 8011e86:	431a      	orrs	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	695b      	ldr	r3, [r3, #20]
 8011e8c:	f003 0301 	and.w	r3, r3, #1
 8011e90:	431a      	orrs	r2, r3
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	699b      	ldr	r3, [r3, #24]
 8011e96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011e9a:	431a      	orrs	r2, r3
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8011ea4:	431a      	orrs	r2, r3
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	6a1b      	ldr	r3, [r3, #32]
 8011eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011eae:	ea42 0103 	orr.w	r1, r2, r3
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011eb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	430a      	orrs	r2, r1
 8011ec0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8011ec2:	687b      	ldr	r3, [r7, #4]
 8011ec4:	699b      	ldr	r3, [r3, #24]
 8011ec6:	0c1b      	lsrs	r3, r3, #16
 8011ec8:	f003 0104 	and.w	r1, r3, #4
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ed0:	f003 0210 	and.w	r2, r3, #16
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	430a      	orrs	r2, r1
 8011eda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	681b      	ldr	r3, [r3, #0]
 8011ee0:	69da      	ldr	r2, [r3, #28]
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011eea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8011eec:	687b      	ldr	r3, [r7, #4]
 8011eee:	2200      	movs	r2, #0
 8011ef0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	2201      	movs	r2, #1
 8011ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8011efa:	2300      	movs	r3, #0
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3708      	adds	r7, #8
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b08c      	sub	sp, #48	; 0x30
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	60f8      	str	r0, [r7, #12]
 8011f0c:	60b9      	str	r1, [r7, #8]
 8011f0e:	607a      	str	r2, [r7, #4]
 8011f10:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011f12:	2301      	movs	r3, #1
 8011f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011f16:	2300      	movs	r3, #0
 8011f18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011f22:	2b01      	cmp	r3, #1
 8011f24:	d101      	bne.n	8011f2a <HAL_SPI_TransmitReceive+0x26>
 8011f26:	2302      	movs	r3, #2
 8011f28:	e18a      	b.n	8012240 <HAL_SPI_TransmitReceive+0x33c>
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	2201      	movs	r2, #1
 8011f2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011f32:	f7fb fc95 	bl	800d860 <HAL_GetTick>
 8011f36:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8011f42:	68fb      	ldr	r3, [r7, #12]
 8011f44:	685b      	ldr	r3, [r3, #4]
 8011f46:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8011f48:	887b      	ldrh	r3, [r7, #2]
 8011f4a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8011f4c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d00f      	beq.n	8011f74 <HAL_SPI_TransmitReceive+0x70>
 8011f54:	69fb      	ldr	r3, [r7, #28]
 8011f56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011f5a:	d107      	bne.n	8011f6c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	689b      	ldr	r3, [r3, #8]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d103      	bne.n	8011f6c <HAL_SPI_TransmitReceive+0x68>
 8011f64:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8011f68:	2b04      	cmp	r3, #4
 8011f6a:	d003      	beq.n	8011f74 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8011f6c:	2302      	movs	r3, #2
 8011f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011f72:	e15b      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <HAL_SPI_TransmitReceive+0x82>
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	2b00      	cmp	r3, #0
 8011f7e:	d002      	beq.n	8011f86 <HAL_SPI_TransmitReceive+0x82>
 8011f80:	887b      	ldrh	r3, [r7, #2]
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d103      	bne.n	8011f8e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8011f86:	2301      	movs	r3, #1
 8011f88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8011f8c:	e14e      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011f94:	b2db      	uxtb	r3, r3
 8011f96:	2b04      	cmp	r3, #4
 8011f98:	d003      	beq.n	8011fa2 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8011f9a:	68fb      	ldr	r3, [r7, #12]
 8011f9c:	2205      	movs	r2, #5
 8011f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	687a      	ldr	r2, [r7, #4]
 8011fac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	887a      	ldrh	r2, [r7, #2]
 8011fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	887a      	ldrh	r2, [r7, #2]
 8011fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	68ba      	ldr	r2, [r7, #8]
 8011fbe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	887a      	ldrh	r2, [r7, #2]
 8011fc4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	887a      	ldrh	r2, [r7, #2]
 8011fca:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2200      	movs	r2, #0
 8011fd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011fd2:	68fb      	ldr	r3, [r7, #12]
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011fe2:	2b40      	cmp	r3, #64	; 0x40
 8011fe4:	d007      	beq.n	8011ff6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	681a      	ldr	r2, [r3, #0]
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ff4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011ff6:	68fb      	ldr	r3, [r7, #12]
 8011ff8:	68db      	ldr	r3, [r3, #12]
 8011ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011ffe:	d178      	bne.n	80120f2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8012000:	68fb      	ldr	r3, [r7, #12]
 8012002:	685b      	ldr	r3, [r3, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d002      	beq.n	801200e <HAL_SPI_TransmitReceive+0x10a>
 8012008:	8b7b      	ldrh	r3, [r7, #26]
 801200a:	2b01      	cmp	r3, #1
 801200c:	d166      	bne.n	80120dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012012:	881a      	ldrh	r2, [r3, #0]
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801201a:	68fb      	ldr	r3, [r7, #12]
 801201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801201e:	1c9a      	adds	r2, r3, #2
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012028:	b29b      	uxth	r3, r3
 801202a:	3b01      	subs	r3, #1
 801202c:	b29a      	uxth	r2, r3
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012032:	e053      	b.n	80120dc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	f003 0302 	and.w	r3, r3, #2
 801203e:	2b02      	cmp	r3, #2
 8012040:	d11b      	bne.n	801207a <HAL_SPI_TransmitReceive+0x176>
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012046:	b29b      	uxth	r3, r3
 8012048:	2b00      	cmp	r3, #0
 801204a:	d016      	beq.n	801207a <HAL_SPI_TransmitReceive+0x176>
 801204c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801204e:	2b01      	cmp	r3, #1
 8012050:	d113      	bne.n	801207a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8012052:	68fb      	ldr	r3, [r7, #12]
 8012054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012056:	881a      	ldrh	r2, [r3, #0]
 8012058:	68fb      	ldr	r3, [r7, #12]
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012062:	1c9a      	adds	r2, r3, #2
 8012064:	68fb      	ldr	r3, [r7, #12]
 8012066:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801206c:	b29b      	uxth	r3, r3
 801206e:	3b01      	subs	r3, #1
 8012070:	b29a      	uxth	r2, r3
 8012072:	68fb      	ldr	r3, [r7, #12]
 8012074:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8012076:	2300      	movs	r3, #0
 8012078:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	681b      	ldr	r3, [r3, #0]
 801207e:	689b      	ldr	r3, [r3, #8]
 8012080:	f003 0301 	and.w	r3, r3, #1
 8012084:	2b01      	cmp	r3, #1
 8012086:	d119      	bne.n	80120bc <HAL_SPI_TransmitReceive+0x1b8>
 8012088:	68fb      	ldr	r3, [r7, #12]
 801208a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801208c:	b29b      	uxth	r3, r3
 801208e:	2b00      	cmp	r3, #0
 8012090:	d014      	beq.n	80120bc <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8012092:	68fb      	ldr	r3, [r7, #12]
 8012094:	681b      	ldr	r3, [r3, #0]
 8012096:	68da      	ldr	r2, [r3, #12]
 8012098:	68fb      	ldr	r3, [r7, #12]
 801209a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801209c:	b292      	uxth	r2, r2
 801209e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80120a0:	68fb      	ldr	r3, [r7, #12]
 80120a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a4:	1c9a      	adds	r2, r3, #2
 80120a6:	68fb      	ldr	r3, [r7, #12]
 80120a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80120aa:	68fb      	ldr	r3, [r7, #12]
 80120ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	3b01      	subs	r3, #1
 80120b2:	b29a      	uxth	r2, r3
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80120b8:	2301      	movs	r3, #1
 80120ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80120bc:	f7fb fbd0 	bl	800d860 <HAL_GetTick>
 80120c0:	4602      	mov	r2, r0
 80120c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120c4:	1ad3      	subs	r3, r2, r3
 80120c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80120c8:	429a      	cmp	r2, r3
 80120ca:	d807      	bhi.n	80120dc <HAL_SPI_TransmitReceive+0x1d8>
 80120cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120d2:	d003      	beq.n	80120dc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80120d4:	2303      	movs	r3, #3
 80120d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80120da:	e0a7      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80120dc:	68fb      	ldr	r3, [r7, #12]
 80120de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80120e0:	b29b      	uxth	r3, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d1a6      	bne.n	8012034 <HAL_SPI_TransmitReceive+0x130>
 80120e6:	68fb      	ldr	r3, [r7, #12]
 80120e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80120ea:	b29b      	uxth	r3, r3
 80120ec:	2b00      	cmp	r3, #0
 80120ee:	d1a1      	bne.n	8012034 <HAL_SPI_TransmitReceive+0x130>
 80120f0:	e07c      	b.n	80121ec <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	685b      	ldr	r3, [r3, #4]
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d002      	beq.n	8012100 <HAL_SPI_TransmitReceive+0x1fc>
 80120fa:	8b7b      	ldrh	r3, [r7, #26]
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d16b      	bne.n	80121d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012104:	68fb      	ldr	r3, [r7, #12]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	330c      	adds	r3, #12
 801210a:	7812      	ldrb	r2, [r2, #0]
 801210c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012112:	1c5a      	adds	r2, r3, #1
 8012114:	68fb      	ldr	r3, [r7, #12]
 8012116:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801211c:	b29b      	uxth	r3, r3
 801211e:	3b01      	subs	r3, #1
 8012120:	b29a      	uxth	r2, r3
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8012126:	e057      	b.n	80121d8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	689b      	ldr	r3, [r3, #8]
 801212e:	f003 0302 	and.w	r3, r3, #2
 8012132:	2b02      	cmp	r3, #2
 8012134:	d11c      	bne.n	8012170 <HAL_SPI_TransmitReceive+0x26c>
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801213a:	b29b      	uxth	r3, r3
 801213c:	2b00      	cmp	r3, #0
 801213e:	d017      	beq.n	8012170 <HAL_SPI_TransmitReceive+0x26c>
 8012140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012142:	2b01      	cmp	r3, #1
 8012144:	d114      	bne.n	8012170 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8012146:	68fb      	ldr	r3, [r7, #12]
 8012148:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	330c      	adds	r3, #12
 8012150:	7812      	ldrb	r2, [r2, #0]
 8012152:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012158:	1c5a      	adds	r2, r3, #1
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012162:	b29b      	uxth	r3, r3
 8012164:	3b01      	subs	r3, #1
 8012166:	b29a      	uxth	r2, r3
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801216c:	2300      	movs	r3, #0
 801216e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	689b      	ldr	r3, [r3, #8]
 8012176:	f003 0301 	and.w	r3, r3, #1
 801217a:	2b01      	cmp	r3, #1
 801217c:	d119      	bne.n	80121b2 <HAL_SPI_TransmitReceive+0x2ae>
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8012182:	b29b      	uxth	r3, r3
 8012184:	2b00      	cmp	r3, #0
 8012186:	d014      	beq.n	80121b2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	68da      	ldr	r2, [r3, #12]
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012192:	b2d2      	uxtb	r2, r2
 8012194:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8012196:	68fb      	ldr	r3, [r7, #12]
 8012198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801219a:	1c5a      	adds	r2, r3, #1
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121a4:	b29b      	uxth	r3, r3
 80121a6:	3b01      	subs	r3, #1
 80121a8:	b29a      	uxth	r2, r3
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80121ae:	2301      	movs	r3, #1
 80121b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80121b2:	f7fb fb55 	bl	800d860 <HAL_GetTick>
 80121b6:	4602      	mov	r2, r0
 80121b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80121be:	429a      	cmp	r2, r3
 80121c0:	d803      	bhi.n	80121ca <HAL_SPI_TransmitReceive+0x2c6>
 80121c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121c8:	d102      	bne.n	80121d0 <HAL_SPI_TransmitReceive+0x2cc>
 80121ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d103      	bne.n	80121d8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80121d0:	2303      	movs	r3, #3
 80121d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80121d6:	e029      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80121dc:	b29b      	uxth	r3, r3
 80121de:	2b00      	cmp	r3, #0
 80121e0:	d1a2      	bne.n	8012128 <HAL_SPI_TransmitReceive+0x224>
 80121e2:	68fb      	ldr	r3, [r7, #12]
 80121e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80121e6:	b29b      	uxth	r3, r3
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d19d      	bne.n	8012128 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80121ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80121ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80121f0:	68f8      	ldr	r0, [r7, #12]
 80121f2:	f000 fb11 	bl	8012818 <SPI_EndRxTxTransaction>
 80121f6:	4603      	mov	r3, r0
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d006      	beq.n	801220a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80121fc:	2301      	movs	r3, #1
 80121fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2220      	movs	r2, #32
 8012206:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8012208:	e010      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d10b      	bne.n	801222a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012212:	2300      	movs	r3, #0
 8012214:	617b      	str	r3, [r7, #20]
 8012216:	68fb      	ldr	r3, [r7, #12]
 8012218:	681b      	ldr	r3, [r3, #0]
 801221a:	68db      	ldr	r3, [r3, #12]
 801221c:	617b      	str	r3, [r7, #20]
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	689b      	ldr	r3, [r3, #8]
 8012224:	617b      	str	r3, [r7, #20]
 8012226:	697b      	ldr	r3, [r7, #20]
 8012228:	e000      	b.n	801222c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 801222a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	2201      	movs	r2, #1
 8012230:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	2200      	movs	r2, #0
 8012238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801223c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8012240:	4618      	mov	r0, r3
 8012242:	3730      	adds	r7, #48	; 0x30
 8012244:	46bd      	mov	sp, r7
 8012246:	bd80      	pop	{r7, pc}

08012248 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b086      	sub	sp, #24
 801224c:	af00      	add	r7, sp, #0
 801224e:	60f8      	str	r0, [r7, #12]
 8012250:	60b9      	str	r1, [r7, #8]
 8012252:	4613      	mov	r3, r2
 8012254:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8012256:	2300      	movs	r3, #0
 8012258:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8012260:	2b01      	cmp	r3, #1
 8012262:	d101      	bne.n	8012268 <HAL_SPI_Transmit_DMA+0x20>
 8012264:	2302      	movs	r3, #2
 8012266:	e09b      	b.n	80123a0 <HAL_SPI_Transmit_DMA+0x158>
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	2201      	movs	r2, #1
 801226c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012276:	b2db      	uxtb	r3, r3
 8012278:	2b01      	cmp	r3, #1
 801227a:	d002      	beq.n	8012282 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 801227c:	2302      	movs	r3, #2
 801227e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012280:	e089      	b.n	8012396 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2b00      	cmp	r3, #0
 8012286:	d002      	beq.n	801228e <HAL_SPI_Transmit_DMA+0x46>
 8012288:	88fb      	ldrh	r3, [r7, #6]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d102      	bne.n	8012294 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 801228e:	2301      	movs	r3, #1
 8012290:	75fb      	strb	r3, [r7, #23]
    goto error;
 8012292:	e080      	b.n	8012396 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8012294:	68fb      	ldr	r3, [r7, #12]
 8012296:	2203      	movs	r2, #3
 8012298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	2200      	movs	r2, #0
 80122a0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	68ba      	ldr	r2, [r7, #8]
 80122a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	88fa      	ldrh	r2, [r7, #6]
 80122ac:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	88fa      	ldrh	r2, [r7, #6]
 80122b2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	2200      	movs	r2, #0
 80122b8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2200      	movs	r2, #0
 80122be:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	2200      	movs	r2, #0
 80122c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80122c6:	68fb      	ldr	r3, [r7, #12]
 80122c8:	2200      	movs	r2, #0
 80122ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	2200      	movs	r2, #0
 80122d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80122d2:	68fb      	ldr	r3, [r7, #12]
 80122d4:	689b      	ldr	r3, [r3, #8]
 80122d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80122da:	d10f      	bne.n	80122fc <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681b      	ldr	r3, [r3, #0]
 80122e0:	681a      	ldr	r2, [r3, #0]
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80122ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	681b      	ldr	r3, [r3, #0]
 80122f0:	681a      	ldr	r2, [r3, #0]
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80122fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012300:	4a29      	ldr	r2, [pc, #164]	; (80123a8 <HAL_SPI_Transmit_DMA+0x160>)
 8012302:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012308:	4a28      	ldr	r2, [pc, #160]	; (80123ac <HAL_SPI_Transmit_DMA+0x164>)
 801230a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012310:	4a27      	ldr	r2, [pc, #156]	; (80123b0 <HAL_SPI_Transmit_DMA+0x168>)
 8012312:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012318:	2200      	movs	r2, #0
 801231a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 801231c:	68fb      	ldr	r3, [r7, #12]
 801231e:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012324:	4619      	mov	r1, r3
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	330c      	adds	r3, #12
 801232c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8012332:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8012334:	f7fb fc84 	bl	800dc40 <HAL_DMA_Start_IT>
 8012338:	4603      	mov	r3, r0
 801233a:	2b00      	cmp	r3, #0
 801233c:	d00c      	beq.n	8012358 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012342:	f043 0210 	orr.w	r2, r3, #16
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 801234a:	2301      	movs	r3, #1
 801234c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	2201      	movs	r2, #1
 8012352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8012356:	e01e      	b.n	8012396 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012362:	2b40      	cmp	r3, #64	; 0x40
 8012364:	d007      	beq.n	8012376 <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	681b      	ldr	r3, [r3, #0]
 801236a:	681a      	ldr	r2, [r3, #0]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	681b      	ldr	r3, [r3, #0]
 8012370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8012374:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	685a      	ldr	r2, [r3, #4]
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	f042 0220 	orr.w	r2, r2, #32
 8012384:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	685a      	ldr	r2, [r3, #4]
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	f042 0202 	orr.w	r2, r2, #2
 8012394:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	2200      	movs	r2, #0
 801239a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801239e:	7dfb      	ldrb	r3, [r7, #23]
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3718      	adds	r7, #24
 80123a4:	46bd      	mov	sp, r7
 80123a6:	bd80      	pop	{r7, pc}
 80123a8:	08012685 	.word	0x08012685
 80123ac:	080125dd 	.word	0x080125dd
 80123b0:	080126a1 	.word	0x080126a1

080123b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b088      	sub	sp, #32
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	689b      	ldr	r3, [r3, #8]
 80123ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80123cc:	69bb      	ldr	r3, [r7, #24]
 80123ce:	099b      	lsrs	r3, r3, #6
 80123d0:	f003 0301 	and.w	r3, r3, #1
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d10f      	bne.n	80123f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80123d8:	69bb      	ldr	r3, [r7, #24]
 80123da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00a      	beq.n	80123f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80123e2:	69fb      	ldr	r3, [r7, #28]
 80123e4:	099b      	lsrs	r3, r3, #6
 80123e6:	f003 0301 	and.w	r3, r3, #1
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d004      	beq.n	80123f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80123ee:	687b      	ldr	r3, [r7, #4]
 80123f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	4798      	blx	r3
    return;
 80123f6:	e0d7      	b.n	80125a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80123f8:	69bb      	ldr	r3, [r7, #24]
 80123fa:	085b      	lsrs	r3, r3, #1
 80123fc:	f003 0301 	and.w	r3, r3, #1
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00a      	beq.n	801241a <HAL_SPI_IRQHandler+0x66>
 8012404:	69fb      	ldr	r3, [r7, #28]
 8012406:	09db      	lsrs	r3, r3, #7
 8012408:	f003 0301 	and.w	r3, r3, #1
 801240c:	2b00      	cmp	r3, #0
 801240e:	d004      	beq.n	801241a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	4798      	blx	r3
    return;
 8012418:	e0c6      	b.n	80125a8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801241a:	69bb      	ldr	r3, [r7, #24]
 801241c:	095b      	lsrs	r3, r3, #5
 801241e:	f003 0301 	and.w	r3, r3, #1
 8012422:	2b00      	cmp	r3, #0
 8012424:	d10c      	bne.n	8012440 <HAL_SPI_IRQHandler+0x8c>
 8012426:	69bb      	ldr	r3, [r7, #24]
 8012428:	099b      	lsrs	r3, r3, #6
 801242a:	f003 0301 	and.w	r3, r3, #1
 801242e:	2b00      	cmp	r3, #0
 8012430:	d106      	bne.n	8012440 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8012432:	69bb      	ldr	r3, [r7, #24]
 8012434:	0a1b      	lsrs	r3, r3, #8
 8012436:	f003 0301 	and.w	r3, r3, #1
 801243a:	2b00      	cmp	r3, #0
 801243c:	f000 80b4 	beq.w	80125a8 <HAL_SPI_IRQHandler+0x1f4>
 8012440:	69fb      	ldr	r3, [r7, #28]
 8012442:	095b      	lsrs	r3, r3, #5
 8012444:	f003 0301 	and.w	r3, r3, #1
 8012448:	2b00      	cmp	r3, #0
 801244a:	f000 80ad 	beq.w	80125a8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 801244e:	69bb      	ldr	r3, [r7, #24]
 8012450:	099b      	lsrs	r3, r3, #6
 8012452:	f003 0301 	and.w	r3, r3, #1
 8012456:	2b00      	cmp	r3, #0
 8012458:	d023      	beq.n	80124a2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012460:	b2db      	uxtb	r3, r3
 8012462:	2b03      	cmp	r3, #3
 8012464:	d011      	beq.n	801248a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801246a:	f043 0204 	orr.w	r2, r3, #4
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012472:	2300      	movs	r3, #0
 8012474:	617b      	str	r3, [r7, #20]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	681b      	ldr	r3, [r3, #0]
 801247a:	68db      	ldr	r3, [r3, #12]
 801247c:	617b      	str	r3, [r7, #20]
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	689b      	ldr	r3, [r3, #8]
 8012484:	617b      	str	r3, [r7, #20]
 8012486:	697b      	ldr	r3, [r7, #20]
 8012488:	e00b      	b.n	80124a2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801248a:	2300      	movs	r3, #0
 801248c:	613b      	str	r3, [r7, #16]
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	68db      	ldr	r3, [r3, #12]
 8012494:	613b      	str	r3, [r7, #16]
 8012496:	687b      	ldr	r3, [r7, #4]
 8012498:	681b      	ldr	r3, [r3, #0]
 801249a:	689b      	ldr	r3, [r3, #8]
 801249c:	613b      	str	r3, [r7, #16]
 801249e:	693b      	ldr	r3, [r7, #16]
        return;
 80124a0:	e082      	b.n	80125a8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80124a2:	69bb      	ldr	r3, [r7, #24]
 80124a4:	095b      	lsrs	r3, r3, #5
 80124a6:	f003 0301 	and.w	r3, r3, #1
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d014      	beq.n	80124d8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124b2:	f043 0201 	orr.w	r2, r3, #1
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80124ba:	2300      	movs	r3, #0
 80124bc:	60fb      	str	r3, [r7, #12]
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	681b      	ldr	r3, [r3, #0]
 80124c2:	689b      	ldr	r3, [r3, #8]
 80124c4:	60fb      	str	r3, [r7, #12]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	681a      	ldr	r2, [r3, #0]
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80124d4:	601a      	str	r2, [r3, #0]
 80124d6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80124d8:	69bb      	ldr	r3, [r7, #24]
 80124da:	0a1b      	lsrs	r3, r3, #8
 80124dc:	f003 0301 	and.w	r3, r3, #1
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00c      	beq.n	80124fe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80124e8:	f043 0208 	orr.w	r2, r3, #8
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80124f0:	2300      	movs	r3, #0
 80124f2:	60bb      	str	r3, [r7, #8]
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	689b      	ldr	r3, [r3, #8]
 80124fa:	60bb      	str	r3, [r7, #8]
 80124fc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012502:	2b00      	cmp	r3, #0
 8012504:	d04f      	beq.n	80125a6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	685a      	ldr	r2, [r3, #4]
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8012514:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8012516:	687b      	ldr	r3, [r7, #4]
 8012518:	2201      	movs	r2, #1
 801251a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 801251e:	69fb      	ldr	r3, [r7, #28]
 8012520:	f003 0302 	and.w	r3, r3, #2
 8012524:	2b00      	cmp	r3, #0
 8012526:	d104      	bne.n	8012532 <HAL_SPI_IRQHandler+0x17e>
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	f003 0301 	and.w	r3, r3, #1
 801252e:	2b00      	cmp	r3, #0
 8012530:	d034      	beq.n	801259c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	681b      	ldr	r3, [r3, #0]
 8012536:	685a      	ldr	r2, [r3, #4]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	f022 0203 	bic.w	r2, r2, #3
 8012540:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012546:	2b00      	cmp	r3, #0
 8012548:	d011      	beq.n	801256e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801254e:	4a18      	ldr	r2, [pc, #96]	; (80125b0 <HAL_SPI_IRQHandler+0x1fc>)
 8012550:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012556:	4618      	mov	r0, r3
 8012558:	f7fb fbca 	bl	800dcf0 <HAL_DMA_Abort_IT>
 801255c:	4603      	mov	r3, r0
 801255e:	2b00      	cmp	r3, #0
 8012560:	d005      	beq.n	801256e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012566:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012572:	2b00      	cmp	r3, #0
 8012574:	d016      	beq.n	80125a4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801257a:	4a0d      	ldr	r2, [pc, #52]	; (80125b0 <HAL_SPI_IRQHandler+0x1fc>)
 801257c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012582:	4618      	mov	r0, r3
 8012584:	f7fb fbb4 	bl	800dcf0 <HAL_DMA_Abort_IT>
 8012588:	4603      	mov	r3, r0
 801258a:	2b00      	cmp	r3, #0
 801258c:	d00a      	beq.n	80125a4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012592:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 801259a:	e003      	b.n	80125a4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 f813 	bl	80125c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80125a2:	e000      	b.n	80125a6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80125a4:	bf00      	nop
    return;
 80125a6:	bf00      	nop
  }
}
 80125a8:	3720      	adds	r7, #32
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	080126e1 	.word	0x080126e1

080125b4 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80125b4:	b480      	push	{r7}
 80125b6:	b083      	sub	sp, #12
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80125bc:	bf00      	nop
 80125be:	370c      	adds	r7, #12
 80125c0:	46bd      	mov	sp, r7
 80125c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c6:	4770      	bx	lr

080125c8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80125c8:	b480      	push	{r7}
 80125ca:	b083      	sub	sp, #12
 80125cc:	af00      	add	r7, sp, #0
 80125ce:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80125d0:	bf00      	nop
 80125d2:	370c      	adds	r7, #12
 80125d4:	46bd      	mov	sp, r7
 80125d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125da:	4770      	bx	lr

080125dc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b086      	sub	sp, #24
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125e8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80125ea:	f7fb f939 	bl	800d860 <HAL_GetTick>
 80125ee:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	681b      	ldr	r3, [r3, #0]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80125fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80125fe:	d03b      	beq.n	8012678 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8012600:	697b      	ldr	r3, [r7, #20]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	685a      	ldr	r2, [r3, #4]
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	f022 0220 	bic.w	r2, r2, #32
 801260e:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	685a      	ldr	r2, [r3, #4]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	f022 0202 	bic.w	r2, r2, #2
 801261e:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8012620:	693a      	ldr	r2, [r7, #16]
 8012622:	2164      	movs	r1, #100	; 0x64
 8012624:	6978      	ldr	r0, [r7, #20]
 8012626:	f000 f8f7 	bl	8012818 <SPI_EndRxTxTransaction>
 801262a:	4603      	mov	r3, r0
 801262c:	2b00      	cmp	r3, #0
 801262e:	d005      	beq.n	801263c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012630:	697b      	ldr	r3, [r7, #20]
 8012632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012634:	f043 0220 	orr.w	r2, r3, #32
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801263c:	697b      	ldr	r3, [r7, #20]
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10a      	bne.n	801265a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8012644:	2300      	movs	r3, #0
 8012646:	60fb      	str	r3, [r7, #12]
 8012648:	697b      	ldr	r3, [r7, #20]
 801264a:	681b      	ldr	r3, [r3, #0]
 801264c:	68db      	ldr	r3, [r3, #12]
 801264e:	60fb      	str	r3, [r7, #12]
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	681b      	ldr	r3, [r3, #0]
 8012654:	689b      	ldr	r3, [r3, #8]
 8012656:	60fb      	str	r3, [r7, #12]
 8012658:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	2200      	movs	r2, #0
 801265e:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	2201      	movs	r2, #1
 8012664:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8012668:	697b      	ldr	r3, [r7, #20]
 801266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801266c:	2b00      	cmp	r3, #0
 801266e:	d003      	beq.n	8012678 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8012670:	6978      	ldr	r0, [r7, #20]
 8012672:	f7ff ffa9 	bl	80125c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8012676:	e002      	b.n	801267e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8012678:	6978      	ldr	r0, [r7, #20]
 801267a:	f7f1 fc19 	bl	8003eb0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801267e:	3718      	adds	r7, #24
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b084      	sub	sp, #16
 8012688:	af00      	add	r7, sp, #0
 801268a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012690:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8012692:	68f8      	ldr	r0, [r7, #12]
 8012694:	f7ff ff8e 	bl	80125b4 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012698:	bf00      	nop
 801269a:	3710      	adds	r7, #16
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b084      	sub	sp, #16
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80126a8:	687b      	ldr	r3, [r7, #4]
 80126aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ac:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80126ae:	68fb      	ldr	r3, [r7, #12]
 80126b0:	681b      	ldr	r3, [r3, #0]
 80126b2:	685a      	ldr	r2, [r3, #4]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	681b      	ldr	r3, [r3, #0]
 80126b8:	f022 0203 	bic.w	r2, r2, #3
 80126bc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80126be:	68fb      	ldr	r3, [r7, #12]
 80126c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80126c2:	f043 0210 	orr.w	r2, r3, #16
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80126ca:	68fb      	ldr	r3, [r7, #12]
 80126cc:	2201      	movs	r2, #1
 80126ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ff ff78 	bl	80125c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80126d8:	bf00      	nop
 80126da:	3710      	adds	r7, #16
 80126dc:	46bd      	mov	sp, r7
 80126de:	bd80      	pop	{r7, pc}

080126e0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126ec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	2200      	movs	r2, #0
 80126f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	2200      	movs	r2, #0
 80126f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80126fa:	68f8      	ldr	r0, [r7, #12]
 80126fc:	f7ff ff64 	bl	80125c8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8012700:	bf00      	nop
 8012702:	3710      	adds	r7, #16
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8012708:	b580      	push	{r7, lr}
 801270a:	b088      	sub	sp, #32
 801270c:	af00      	add	r7, sp, #0
 801270e:	60f8      	str	r0, [r7, #12]
 8012710:	60b9      	str	r1, [r7, #8]
 8012712:	603b      	str	r3, [r7, #0]
 8012714:	4613      	mov	r3, r2
 8012716:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8012718:	f7fb f8a2 	bl	800d860 <HAL_GetTick>
 801271c:	4602      	mov	r2, r0
 801271e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012720:	1a9b      	subs	r3, r3, r2
 8012722:	683a      	ldr	r2, [r7, #0]
 8012724:	4413      	add	r3, r2
 8012726:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8012728:	f7fb f89a 	bl	800d860 <HAL_GetTick>
 801272c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801272e:	4b39      	ldr	r3, [pc, #228]	; (8012814 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	015b      	lsls	r3, r3, #5
 8012734:	0d1b      	lsrs	r3, r3, #20
 8012736:	69fa      	ldr	r2, [r7, #28]
 8012738:	fb02 f303 	mul.w	r3, r2, r3
 801273c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801273e:	e054      	b.n	80127ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8012740:	683b      	ldr	r3, [r7, #0]
 8012742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012746:	d050      	beq.n	80127ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8012748:	f7fb f88a 	bl	800d860 <HAL_GetTick>
 801274c:	4602      	mov	r2, r0
 801274e:	69bb      	ldr	r3, [r7, #24]
 8012750:	1ad3      	subs	r3, r2, r3
 8012752:	69fa      	ldr	r2, [r7, #28]
 8012754:	429a      	cmp	r2, r3
 8012756:	d902      	bls.n	801275e <SPI_WaitFlagStateUntilTimeout+0x56>
 8012758:	69fb      	ldr	r3, [r7, #28]
 801275a:	2b00      	cmp	r3, #0
 801275c:	d13d      	bne.n	80127da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	685a      	ldr	r2, [r3, #4]
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	681b      	ldr	r3, [r3, #0]
 8012768:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801276c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	685b      	ldr	r3, [r3, #4]
 8012772:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012776:	d111      	bne.n	801279c <SPI_WaitFlagStateUntilTimeout+0x94>
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	689b      	ldr	r3, [r3, #8]
 801277c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012780:	d004      	beq.n	801278c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	689b      	ldr	r3, [r3, #8]
 8012786:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801278a:	d107      	bne.n	801279c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	681b      	ldr	r3, [r3, #0]
 8012790:	681a      	ldr	r2, [r3, #0]
 8012792:	68fb      	ldr	r3, [r7, #12]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801279a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80127a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80127a4:	d10f      	bne.n	80127c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	681a      	ldr	r2, [r3, #0]
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80127b4:	601a      	str	r2, [r3, #0]
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	681a      	ldr	r2, [r3, #0]
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80127c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	2201      	movs	r2, #1
 80127ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	2200      	movs	r2, #0
 80127d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80127d6:	2303      	movs	r3, #3
 80127d8:	e017      	b.n	801280a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80127da:	697b      	ldr	r3, [r7, #20]
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80127e0:	2300      	movs	r3, #0
 80127e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80127e4:	697b      	ldr	r3, [r7, #20]
 80127e6:	3b01      	subs	r3, #1
 80127e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	689a      	ldr	r2, [r3, #8]
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	4013      	ands	r3, r2
 80127f4:	68ba      	ldr	r2, [r7, #8]
 80127f6:	429a      	cmp	r2, r3
 80127f8:	bf0c      	ite	eq
 80127fa:	2301      	moveq	r3, #1
 80127fc:	2300      	movne	r3, #0
 80127fe:	b2db      	uxtb	r3, r3
 8012800:	461a      	mov	r2, r3
 8012802:	79fb      	ldrb	r3, [r7, #7]
 8012804:	429a      	cmp	r2, r3
 8012806:	d19b      	bne.n	8012740 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8012808:	2300      	movs	r3, #0
}
 801280a:	4618      	mov	r0, r3
 801280c:	3720      	adds	r7, #32
 801280e:	46bd      	mov	sp, r7
 8012810:	bd80      	pop	{r7, pc}
 8012812:	bf00      	nop
 8012814:	20000000 	.word	0x20000000

08012818 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b088      	sub	sp, #32
 801281c:	af02      	add	r7, sp, #8
 801281e:	60f8      	str	r0, [r7, #12]
 8012820:	60b9      	str	r1, [r7, #8]
 8012822:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012824:	4b1b      	ldr	r3, [pc, #108]	; (8012894 <SPI_EndRxTxTransaction+0x7c>)
 8012826:	681b      	ldr	r3, [r3, #0]
 8012828:	4a1b      	ldr	r2, [pc, #108]	; (8012898 <SPI_EndRxTxTransaction+0x80>)
 801282a:	fba2 2303 	umull	r2, r3, r2, r3
 801282e:	0d5b      	lsrs	r3, r3, #21
 8012830:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012834:	fb02 f303 	mul.w	r3, r2, r3
 8012838:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	685b      	ldr	r3, [r3, #4]
 801283e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8012842:	d112      	bne.n	801286a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	9300      	str	r3, [sp, #0]
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	2200      	movs	r2, #0
 801284c:	2180      	movs	r1, #128	; 0x80
 801284e:	68f8      	ldr	r0, [r7, #12]
 8012850:	f7ff ff5a 	bl	8012708 <SPI_WaitFlagStateUntilTimeout>
 8012854:	4603      	mov	r3, r0
 8012856:	2b00      	cmp	r3, #0
 8012858:	d016      	beq.n	8012888 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801285e:	f043 0220 	orr.w	r2, r3, #32
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012866:	2303      	movs	r3, #3
 8012868:	e00f      	b.n	801288a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	2b00      	cmp	r3, #0
 801286e:	d00a      	beq.n	8012886 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8012870:	697b      	ldr	r3, [r7, #20]
 8012872:	3b01      	subs	r3, #1
 8012874:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	689b      	ldr	r3, [r3, #8]
 801287c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012880:	2b80      	cmp	r3, #128	; 0x80
 8012882:	d0f2      	beq.n	801286a <SPI_EndRxTxTransaction+0x52>
 8012884:	e000      	b.n	8012888 <SPI_EndRxTxTransaction+0x70>
        break;
 8012886:	bf00      	nop
  }

  return HAL_OK;
 8012888:	2300      	movs	r3, #0
}
 801288a:	4618      	mov	r0, r3
 801288c:	3718      	adds	r7, #24
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	20000000 	.word	0x20000000
 8012898:	165e9f81 	.word	0x165e9f81

0801289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801289c:	b580      	push	{r7, lr}
 801289e:	b082      	sub	sp, #8
 80128a0:	af00      	add	r7, sp, #0
 80128a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d101      	bne.n	80128ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80128aa:	2301      	movs	r3, #1
 80128ac:	e03f      	b.n	801292e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d106      	bne.n	80128c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	2200      	movs	r2, #0
 80128be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80128c2:	6878      	ldr	r0, [r7, #4]
 80128c4:	f7f1 fcce 	bl	8004264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	2224      	movs	r2, #36	; 0x24
 80128cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	68da      	ldr	r2, [r3, #12]
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80128de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80128e0:	6878      	ldr	r0, [r7, #4]
 80128e2:	f000 f905 	bl	8012af0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	691a      	ldr	r2, [r3, #16]
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80128f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	695a      	ldr	r2, [r3, #20]
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	68da      	ldr	r2, [r3, #12]
 801290c:	687b      	ldr	r3, [r7, #4]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	2200      	movs	r2, #0
 801291a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2220      	movs	r2, #32
 8012920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2220      	movs	r2, #32
 8012928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 801292c:	2300      	movs	r3, #0
}
 801292e:	4618      	mov	r0, r3
 8012930:	3708      	adds	r7, #8
 8012932:	46bd      	mov	sp, r7
 8012934:	bd80      	pop	{r7, pc}

08012936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012936:	b580      	push	{r7, lr}
 8012938:	b08a      	sub	sp, #40	; 0x28
 801293a:	af02      	add	r7, sp, #8
 801293c:	60f8      	str	r0, [r7, #12]
 801293e:	60b9      	str	r1, [r7, #8]
 8012940:	603b      	str	r3, [r7, #0]
 8012942:	4613      	mov	r3, r2
 8012944:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012946:	2300      	movs	r3, #0
 8012948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012950:	b2db      	uxtb	r3, r3
 8012952:	2b20      	cmp	r3, #32
 8012954:	d17c      	bne.n	8012a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012956:	68bb      	ldr	r3, [r7, #8]
 8012958:	2b00      	cmp	r3, #0
 801295a:	d002      	beq.n	8012962 <HAL_UART_Transmit+0x2c>
 801295c:	88fb      	ldrh	r3, [r7, #6]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d101      	bne.n	8012966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8012962:	2301      	movs	r3, #1
 8012964:	e075      	b.n	8012a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801296c:	2b01      	cmp	r3, #1
 801296e:	d101      	bne.n	8012974 <HAL_UART_Transmit+0x3e>
 8012970:	2302      	movs	r3, #2
 8012972:	e06e      	b.n	8012a52 <HAL_UART_Transmit+0x11c>
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	2201      	movs	r2, #1
 8012978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	2200      	movs	r2, #0
 8012980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	2221      	movs	r2, #33	; 0x21
 8012986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801298a:	f7fa ff69 	bl	800d860 <HAL_GetTick>
 801298e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	88fa      	ldrh	r2, [r7, #6]
 8012994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	88fa      	ldrh	r2, [r7, #6]
 801299a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	689b      	ldr	r3, [r3, #8]
 80129a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80129a4:	d108      	bne.n	80129b8 <HAL_UART_Transmit+0x82>
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	691b      	ldr	r3, [r3, #16]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d104      	bne.n	80129b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	61bb      	str	r3, [r7, #24]
 80129b6:	e003      	b.n	80129c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80129bc:	2300      	movs	r3, #0
 80129be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	2200      	movs	r2, #0
 80129c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80129c8:	e02a      	b.n	8012a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80129ca:	683b      	ldr	r3, [r7, #0]
 80129cc:	9300      	str	r3, [sp, #0]
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	2200      	movs	r2, #0
 80129d2:	2180      	movs	r1, #128	; 0x80
 80129d4:	68f8      	ldr	r0, [r7, #12]
 80129d6:	f000 f840 	bl	8012a5a <UART_WaitOnFlagUntilTimeout>
 80129da:	4603      	mov	r3, r0
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d001      	beq.n	80129e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80129e0:	2303      	movs	r3, #3
 80129e2:	e036      	b.n	8012a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80129e4:	69fb      	ldr	r3, [r7, #28]
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d10b      	bne.n	8012a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80129ea:	69bb      	ldr	r3, [r7, #24]
 80129ec:	881b      	ldrh	r3, [r3, #0]
 80129ee:	461a      	mov	r2, r3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80129f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80129fa:	69bb      	ldr	r3, [r7, #24]
 80129fc:	3302      	adds	r3, #2
 80129fe:	61bb      	str	r3, [r7, #24]
 8012a00:	e007      	b.n	8012a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012a02:	69fb      	ldr	r3, [r7, #28]
 8012a04:	781a      	ldrb	r2, [r3, #0]
 8012a06:	68fb      	ldr	r3, [r7, #12]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8012a0c:	69fb      	ldr	r3, [r7, #28]
 8012a0e:	3301      	adds	r3, #1
 8012a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	3b01      	subs	r3, #1
 8012a1a:	b29a      	uxth	r2, r3
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012a24:	b29b      	uxth	r3, r3
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d1cf      	bne.n	80129ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012a2a:	683b      	ldr	r3, [r7, #0]
 8012a2c:	9300      	str	r3, [sp, #0]
 8012a2e:	697b      	ldr	r3, [r7, #20]
 8012a30:	2200      	movs	r2, #0
 8012a32:	2140      	movs	r1, #64	; 0x40
 8012a34:	68f8      	ldr	r0, [r7, #12]
 8012a36:	f000 f810 	bl	8012a5a <UART_WaitOnFlagUntilTimeout>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d001      	beq.n	8012a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012a40:	2303      	movs	r3, #3
 8012a42:	e006      	b.n	8012a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	2220      	movs	r2, #32
 8012a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8012a4c:	2300      	movs	r3, #0
 8012a4e:	e000      	b.n	8012a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8012a50:	2302      	movs	r3, #2
  }
}
 8012a52:	4618      	mov	r0, r3
 8012a54:	3720      	adds	r7, #32
 8012a56:	46bd      	mov	sp, r7
 8012a58:	bd80      	pop	{r7, pc}

08012a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8012a5a:	b580      	push	{r7, lr}
 8012a5c:	b084      	sub	sp, #16
 8012a5e:	af00      	add	r7, sp, #0
 8012a60:	60f8      	str	r0, [r7, #12]
 8012a62:	60b9      	str	r1, [r7, #8]
 8012a64:	603b      	str	r3, [r7, #0]
 8012a66:	4613      	mov	r3, r2
 8012a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012a6a:	e02c      	b.n	8012ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a72:	d028      	beq.n	8012ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012a74:	69bb      	ldr	r3, [r7, #24]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d007      	beq.n	8012a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8012a7a:	f7fa fef1 	bl	800d860 <HAL_GetTick>
 8012a7e:	4602      	mov	r2, r0
 8012a80:	683b      	ldr	r3, [r7, #0]
 8012a82:	1ad3      	subs	r3, r2, r3
 8012a84:	69ba      	ldr	r2, [r7, #24]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d21d      	bcs.n	8012ac6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012a8a:	68fb      	ldr	r3, [r7, #12]
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	68da      	ldr	r2, [r3, #12]
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8012a98:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a9a:	68fb      	ldr	r3, [r7, #12]
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	695a      	ldr	r2, [r3, #20]
 8012aa0:	68fb      	ldr	r3, [r7, #12]
 8012aa2:	681b      	ldr	r3, [r3, #0]
 8012aa4:	f022 0201 	bic.w	r2, r2, #1
 8012aa8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8012aaa:	68fb      	ldr	r3, [r7, #12]
 8012aac:	2220      	movs	r2, #32
 8012aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	2220      	movs	r2, #32
 8012ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2200      	movs	r2, #0
 8012abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8012ac2:	2303      	movs	r3, #3
 8012ac4:	e00f      	b.n	8012ae6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012ac6:	68fb      	ldr	r3, [r7, #12]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	681a      	ldr	r2, [r3, #0]
 8012acc:	68bb      	ldr	r3, [r7, #8]
 8012ace:	4013      	ands	r3, r2
 8012ad0:	68ba      	ldr	r2, [r7, #8]
 8012ad2:	429a      	cmp	r2, r3
 8012ad4:	bf0c      	ite	eq
 8012ad6:	2301      	moveq	r3, #1
 8012ad8:	2300      	movne	r3, #0
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	461a      	mov	r2, r3
 8012ade:	79fb      	ldrb	r3, [r7, #7]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d0c3      	beq.n	8012a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012ae4:	2300      	movs	r3, #0
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3710      	adds	r7, #16
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
	...

08012af0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	b09f      	sub	sp, #124	; 0x7c
 8012af6:	af00      	add	r7, sp, #0
 8012af8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	691b      	ldr	r3, [r3, #16]
 8012b00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012b04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b06:	68d9      	ldr	r1, [r3, #12]
 8012b08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b0a:	681a      	ldr	r2, [r3, #0]
 8012b0c:	ea40 0301 	orr.w	r3, r0, r1
 8012b10:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012b12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b14:	689a      	ldr	r2, [r3, #8]
 8012b16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b18:	691b      	ldr	r3, [r3, #16]
 8012b1a:	431a      	orrs	r2, r3
 8012b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b1e:	695b      	ldr	r3, [r3, #20]
 8012b20:	431a      	orrs	r2, r3
 8012b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b24:	69db      	ldr	r3, [r3, #28]
 8012b26:	4313      	orrs	r3, r2
 8012b28:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8012b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012b34:	f021 010c 	bic.w	r1, r1, #12
 8012b38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b3a:	681a      	ldr	r2, [r3, #0]
 8012b3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012b3e:	430b      	orrs	r3, r1
 8012b40:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012b42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	695b      	ldr	r3, [r3, #20]
 8012b48:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012b4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b4e:	6999      	ldr	r1, [r3, #24]
 8012b50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b52:	681a      	ldr	r2, [r3, #0]
 8012b54:	ea40 0301 	orr.w	r3, r0, r1
 8012b58:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b5c:	681a      	ldr	r2, [r3, #0]
 8012b5e:	4bc5      	ldr	r3, [pc, #788]	; (8012e74 <UART_SetConfig+0x384>)
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d004      	beq.n	8012b6e <UART_SetConfig+0x7e>
 8012b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	4bc3      	ldr	r3, [pc, #780]	; (8012e78 <UART_SetConfig+0x388>)
 8012b6a:	429a      	cmp	r2, r3
 8012b6c:	d103      	bne.n	8012b76 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012b6e:	f7fd fdf3 	bl	8010758 <HAL_RCC_GetPCLK2Freq>
 8012b72:	6778      	str	r0, [r7, #116]	; 0x74
 8012b74:	e002      	b.n	8012b7c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012b76:	f7fd fddb 	bl	8010730 <HAL_RCC_GetPCLK1Freq>
 8012b7a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012b7e:	69db      	ldr	r3, [r3, #28]
 8012b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012b84:	f040 80b6 	bne.w	8012cf4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012b88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012b8a:	461c      	mov	r4, r3
 8012b8c:	f04f 0500 	mov.w	r5, #0
 8012b90:	4622      	mov	r2, r4
 8012b92:	462b      	mov	r3, r5
 8012b94:	1891      	adds	r1, r2, r2
 8012b96:	6439      	str	r1, [r7, #64]	; 0x40
 8012b98:	415b      	adcs	r3, r3
 8012b9a:	647b      	str	r3, [r7, #68]	; 0x44
 8012b9c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012ba0:	1912      	adds	r2, r2, r4
 8012ba2:	eb45 0303 	adc.w	r3, r5, r3
 8012ba6:	f04f 0000 	mov.w	r0, #0
 8012baa:	f04f 0100 	mov.w	r1, #0
 8012bae:	00d9      	lsls	r1, r3, #3
 8012bb0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012bb4:	00d0      	lsls	r0, r2, #3
 8012bb6:	4602      	mov	r2, r0
 8012bb8:	460b      	mov	r3, r1
 8012bba:	1911      	adds	r1, r2, r4
 8012bbc:	6639      	str	r1, [r7, #96]	; 0x60
 8012bbe:	416b      	adcs	r3, r5
 8012bc0:	667b      	str	r3, [r7, #100]	; 0x64
 8012bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	461a      	mov	r2, r3
 8012bc8:	f04f 0300 	mov.w	r3, #0
 8012bcc:	1891      	adds	r1, r2, r2
 8012bce:	63b9      	str	r1, [r7, #56]	; 0x38
 8012bd0:	415b      	adcs	r3, r3
 8012bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012bd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012bd8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8012bdc:	f7ee f844 	bl	8000c68 <__aeabi_uldivmod>
 8012be0:	4602      	mov	r2, r0
 8012be2:	460b      	mov	r3, r1
 8012be4:	4ba5      	ldr	r3, [pc, #660]	; (8012e7c <UART_SetConfig+0x38c>)
 8012be6:	fba3 2302 	umull	r2, r3, r3, r2
 8012bea:	095b      	lsrs	r3, r3, #5
 8012bec:	011e      	lsls	r6, r3, #4
 8012bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012bf0:	461c      	mov	r4, r3
 8012bf2:	f04f 0500 	mov.w	r5, #0
 8012bf6:	4622      	mov	r2, r4
 8012bf8:	462b      	mov	r3, r5
 8012bfa:	1891      	adds	r1, r2, r2
 8012bfc:	6339      	str	r1, [r7, #48]	; 0x30
 8012bfe:	415b      	adcs	r3, r3
 8012c00:	637b      	str	r3, [r7, #52]	; 0x34
 8012c02:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8012c06:	1912      	adds	r2, r2, r4
 8012c08:	eb45 0303 	adc.w	r3, r5, r3
 8012c0c:	f04f 0000 	mov.w	r0, #0
 8012c10:	f04f 0100 	mov.w	r1, #0
 8012c14:	00d9      	lsls	r1, r3, #3
 8012c16:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012c1a:	00d0      	lsls	r0, r2, #3
 8012c1c:	4602      	mov	r2, r0
 8012c1e:	460b      	mov	r3, r1
 8012c20:	1911      	adds	r1, r2, r4
 8012c22:	65b9      	str	r1, [r7, #88]	; 0x58
 8012c24:	416b      	adcs	r3, r5
 8012c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012c2a:	685b      	ldr	r3, [r3, #4]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	f04f 0300 	mov.w	r3, #0
 8012c32:	1891      	adds	r1, r2, r2
 8012c34:	62b9      	str	r1, [r7, #40]	; 0x28
 8012c36:	415b      	adcs	r3, r3
 8012c38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012c3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012c3e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8012c42:	f7ee f811 	bl	8000c68 <__aeabi_uldivmod>
 8012c46:	4602      	mov	r2, r0
 8012c48:	460b      	mov	r3, r1
 8012c4a:	4b8c      	ldr	r3, [pc, #560]	; (8012e7c <UART_SetConfig+0x38c>)
 8012c4c:	fba3 1302 	umull	r1, r3, r3, r2
 8012c50:	095b      	lsrs	r3, r3, #5
 8012c52:	2164      	movs	r1, #100	; 0x64
 8012c54:	fb01 f303 	mul.w	r3, r1, r3
 8012c58:	1ad3      	subs	r3, r2, r3
 8012c5a:	00db      	lsls	r3, r3, #3
 8012c5c:	3332      	adds	r3, #50	; 0x32
 8012c5e:	4a87      	ldr	r2, [pc, #540]	; (8012e7c <UART_SetConfig+0x38c>)
 8012c60:	fba2 2303 	umull	r2, r3, r2, r3
 8012c64:	095b      	lsrs	r3, r3, #5
 8012c66:	005b      	lsls	r3, r3, #1
 8012c68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012c6c:	441e      	add	r6, r3
 8012c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012c70:	4618      	mov	r0, r3
 8012c72:	f04f 0100 	mov.w	r1, #0
 8012c76:	4602      	mov	r2, r0
 8012c78:	460b      	mov	r3, r1
 8012c7a:	1894      	adds	r4, r2, r2
 8012c7c:	623c      	str	r4, [r7, #32]
 8012c7e:	415b      	adcs	r3, r3
 8012c80:	627b      	str	r3, [r7, #36]	; 0x24
 8012c82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8012c86:	1812      	adds	r2, r2, r0
 8012c88:	eb41 0303 	adc.w	r3, r1, r3
 8012c8c:	f04f 0400 	mov.w	r4, #0
 8012c90:	f04f 0500 	mov.w	r5, #0
 8012c94:	00dd      	lsls	r5, r3, #3
 8012c96:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012c9a:	00d4      	lsls	r4, r2, #3
 8012c9c:	4622      	mov	r2, r4
 8012c9e:	462b      	mov	r3, r5
 8012ca0:	1814      	adds	r4, r2, r0
 8012ca2:	653c      	str	r4, [r7, #80]	; 0x50
 8012ca4:	414b      	adcs	r3, r1
 8012ca6:	657b      	str	r3, [r7, #84]	; 0x54
 8012ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	461a      	mov	r2, r3
 8012cae:	f04f 0300 	mov.w	r3, #0
 8012cb2:	1891      	adds	r1, r2, r2
 8012cb4:	61b9      	str	r1, [r7, #24]
 8012cb6:	415b      	adcs	r3, r3
 8012cb8:	61fb      	str	r3, [r7, #28]
 8012cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8012cbe:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8012cc2:	f7ed ffd1 	bl	8000c68 <__aeabi_uldivmod>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	4b6c      	ldr	r3, [pc, #432]	; (8012e7c <UART_SetConfig+0x38c>)
 8012ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8012cd0:	095b      	lsrs	r3, r3, #5
 8012cd2:	2164      	movs	r1, #100	; 0x64
 8012cd4:	fb01 f303 	mul.w	r3, r1, r3
 8012cd8:	1ad3      	subs	r3, r2, r3
 8012cda:	00db      	lsls	r3, r3, #3
 8012cdc:	3332      	adds	r3, #50	; 0x32
 8012cde:	4a67      	ldr	r2, [pc, #412]	; (8012e7c <UART_SetConfig+0x38c>)
 8012ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8012ce4:	095b      	lsrs	r3, r3, #5
 8012ce6:	f003 0207 	and.w	r2, r3, #7
 8012cea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012cec:	681b      	ldr	r3, [r3, #0]
 8012cee:	4432      	add	r2, r6
 8012cf0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012cf2:	e0b9      	b.n	8012e68 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012cf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012cf6:	461c      	mov	r4, r3
 8012cf8:	f04f 0500 	mov.w	r5, #0
 8012cfc:	4622      	mov	r2, r4
 8012cfe:	462b      	mov	r3, r5
 8012d00:	1891      	adds	r1, r2, r2
 8012d02:	6139      	str	r1, [r7, #16]
 8012d04:	415b      	adcs	r3, r3
 8012d06:	617b      	str	r3, [r7, #20]
 8012d08:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8012d0c:	1912      	adds	r2, r2, r4
 8012d0e:	eb45 0303 	adc.w	r3, r5, r3
 8012d12:	f04f 0000 	mov.w	r0, #0
 8012d16:	f04f 0100 	mov.w	r1, #0
 8012d1a:	00d9      	lsls	r1, r3, #3
 8012d1c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8012d20:	00d0      	lsls	r0, r2, #3
 8012d22:	4602      	mov	r2, r0
 8012d24:	460b      	mov	r3, r1
 8012d26:	eb12 0804 	adds.w	r8, r2, r4
 8012d2a:	eb43 0905 	adc.w	r9, r3, r5
 8012d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	4618      	mov	r0, r3
 8012d34:	f04f 0100 	mov.w	r1, #0
 8012d38:	f04f 0200 	mov.w	r2, #0
 8012d3c:	f04f 0300 	mov.w	r3, #0
 8012d40:	008b      	lsls	r3, r1, #2
 8012d42:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012d46:	0082      	lsls	r2, r0, #2
 8012d48:	4640      	mov	r0, r8
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	f7ed ff8c 	bl	8000c68 <__aeabi_uldivmod>
 8012d50:	4602      	mov	r2, r0
 8012d52:	460b      	mov	r3, r1
 8012d54:	4b49      	ldr	r3, [pc, #292]	; (8012e7c <UART_SetConfig+0x38c>)
 8012d56:	fba3 2302 	umull	r2, r3, r3, r2
 8012d5a:	095b      	lsrs	r3, r3, #5
 8012d5c:	011e      	lsls	r6, r3, #4
 8012d5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012d60:	4618      	mov	r0, r3
 8012d62:	f04f 0100 	mov.w	r1, #0
 8012d66:	4602      	mov	r2, r0
 8012d68:	460b      	mov	r3, r1
 8012d6a:	1894      	adds	r4, r2, r2
 8012d6c:	60bc      	str	r4, [r7, #8]
 8012d6e:	415b      	adcs	r3, r3
 8012d70:	60fb      	str	r3, [r7, #12]
 8012d72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8012d76:	1812      	adds	r2, r2, r0
 8012d78:	eb41 0303 	adc.w	r3, r1, r3
 8012d7c:	f04f 0400 	mov.w	r4, #0
 8012d80:	f04f 0500 	mov.w	r5, #0
 8012d84:	00dd      	lsls	r5, r3, #3
 8012d86:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012d8a:	00d4      	lsls	r4, r2, #3
 8012d8c:	4622      	mov	r2, r4
 8012d8e:	462b      	mov	r3, r5
 8012d90:	1814      	adds	r4, r2, r0
 8012d92:	64bc      	str	r4, [r7, #72]	; 0x48
 8012d94:	414b      	adcs	r3, r1
 8012d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012d9a:	685b      	ldr	r3, [r3, #4]
 8012d9c:	4618      	mov	r0, r3
 8012d9e:	f04f 0100 	mov.w	r1, #0
 8012da2:	f04f 0200 	mov.w	r2, #0
 8012da6:	f04f 0300 	mov.w	r3, #0
 8012daa:	008b      	lsls	r3, r1, #2
 8012dac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012db0:	0082      	lsls	r2, r0, #2
 8012db2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8012db6:	f7ed ff57 	bl	8000c68 <__aeabi_uldivmod>
 8012dba:	4602      	mov	r2, r0
 8012dbc:	460b      	mov	r3, r1
 8012dbe:	4b2f      	ldr	r3, [pc, #188]	; (8012e7c <UART_SetConfig+0x38c>)
 8012dc0:	fba3 1302 	umull	r1, r3, r3, r2
 8012dc4:	095b      	lsrs	r3, r3, #5
 8012dc6:	2164      	movs	r1, #100	; 0x64
 8012dc8:	fb01 f303 	mul.w	r3, r1, r3
 8012dcc:	1ad3      	subs	r3, r2, r3
 8012dce:	011b      	lsls	r3, r3, #4
 8012dd0:	3332      	adds	r3, #50	; 0x32
 8012dd2:	4a2a      	ldr	r2, [pc, #168]	; (8012e7c <UART_SetConfig+0x38c>)
 8012dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8012dd8:	095b      	lsrs	r3, r3, #5
 8012dda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012dde:	441e      	add	r6, r3
 8012de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012de2:	4618      	mov	r0, r3
 8012de4:	f04f 0100 	mov.w	r1, #0
 8012de8:	4602      	mov	r2, r0
 8012dea:	460b      	mov	r3, r1
 8012dec:	1894      	adds	r4, r2, r2
 8012dee:	603c      	str	r4, [r7, #0]
 8012df0:	415b      	adcs	r3, r3
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012df8:	1812      	adds	r2, r2, r0
 8012dfa:	eb41 0303 	adc.w	r3, r1, r3
 8012dfe:	f04f 0400 	mov.w	r4, #0
 8012e02:	f04f 0500 	mov.w	r5, #0
 8012e06:	00dd      	lsls	r5, r3, #3
 8012e08:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8012e0c:	00d4      	lsls	r4, r2, #3
 8012e0e:	4622      	mov	r2, r4
 8012e10:	462b      	mov	r3, r5
 8012e12:	eb12 0a00 	adds.w	sl, r2, r0
 8012e16:	eb43 0b01 	adc.w	fp, r3, r1
 8012e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e1c:	685b      	ldr	r3, [r3, #4]
 8012e1e:	4618      	mov	r0, r3
 8012e20:	f04f 0100 	mov.w	r1, #0
 8012e24:	f04f 0200 	mov.w	r2, #0
 8012e28:	f04f 0300 	mov.w	r3, #0
 8012e2c:	008b      	lsls	r3, r1, #2
 8012e2e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8012e32:	0082      	lsls	r2, r0, #2
 8012e34:	4650      	mov	r0, sl
 8012e36:	4659      	mov	r1, fp
 8012e38:	f7ed ff16 	bl	8000c68 <__aeabi_uldivmod>
 8012e3c:	4602      	mov	r2, r0
 8012e3e:	460b      	mov	r3, r1
 8012e40:	4b0e      	ldr	r3, [pc, #56]	; (8012e7c <UART_SetConfig+0x38c>)
 8012e42:	fba3 1302 	umull	r1, r3, r3, r2
 8012e46:	095b      	lsrs	r3, r3, #5
 8012e48:	2164      	movs	r1, #100	; 0x64
 8012e4a:	fb01 f303 	mul.w	r3, r1, r3
 8012e4e:	1ad3      	subs	r3, r2, r3
 8012e50:	011b      	lsls	r3, r3, #4
 8012e52:	3332      	adds	r3, #50	; 0x32
 8012e54:	4a09      	ldr	r2, [pc, #36]	; (8012e7c <UART_SetConfig+0x38c>)
 8012e56:	fba2 2303 	umull	r2, r3, r2, r3
 8012e5a:	095b      	lsrs	r3, r3, #5
 8012e5c:	f003 020f 	and.w	r2, r3, #15
 8012e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012e62:	681b      	ldr	r3, [r3, #0]
 8012e64:	4432      	add	r2, r6
 8012e66:	609a      	str	r2, [r3, #8]
}
 8012e68:	bf00      	nop
 8012e6a:	377c      	adds	r7, #124	; 0x7c
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e72:	bf00      	nop
 8012e74:	40011000 	.word	0x40011000
 8012e78:	40011400 	.word	0x40011400
 8012e7c:	51eb851f 	.word	0x51eb851f

08012e80 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8012e80:	b084      	sub	sp, #16
 8012e82:	b480      	push	{r7}
 8012e84:	b085      	sub	sp, #20
 8012e86:	af00      	add	r7, sp, #0
 8012e88:	6078      	str	r0, [r7, #4]
 8012e8a:	f107 001c 	add.w	r0, r7, #28
 8012e8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8012e92:	2300      	movs	r3, #0
 8012e94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8012e96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8012e98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8012e9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8012e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8012e9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8012ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8012ea2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8012ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8012ea6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8012ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8012eaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8012eac:	68fa      	ldr	r2, [r7, #12]
 8012eae:	4313      	orrs	r3, r2
 8012eb0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	685b      	ldr	r3, [r3, #4]
 8012eb6:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8012eba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8012ebe:	68fa      	ldr	r2, [r7, #12]
 8012ec0:	431a      	orrs	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8012ec6:	2300      	movs	r3, #0
}
 8012ec8:	4618      	mov	r0, r3
 8012eca:	3714      	adds	r7, #20
 8012ecc:	46bd      	mov	sp, r7
 8012ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed2:	b004      	add	sp, #16
 8012ed4:	4770      	bx	lr

08012ed6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8012ed6:	b480      	push	{r7}
 8012ed8:	b083      	sub	sp, #12
 8012eda:	af00      	add	r7, sp, #0
 8012edc:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	370c      	adds	r7, #12
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eee:	4770      	bx	lr

08012ef0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8012ef0:	b480      	push	{r7}
 8012ef2:	b083      	sub	sp, #12
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	681a      	ldr	r2, [r3, #0]
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	370c      	adds	r7, #12
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8012f12:	b580      	push	{r7, lr}
 8012f14:	b082      	sub	sp, #8
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	2203      	movs	r2, #3
 8012f1e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8012f20:	2002      	movs	r0, #2
 8012f22:	f7fa fca9 	bl	800d878 <HAL_Delay>
  
  return HAL_OK;
 8012f26:	2300      	movs	r3, #0
}
 8012f28:	4618      	mov	r0, r3
 8012f2a:	3708      	adds	r7, #8
 8012f2c:	46bd      	mov	sp, r7
 8012f2e:	bd80      	pop	{r7, pc}

08012f30 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8012f30:	b480      	push	{r7}
 8012f32:	b083      	sub	sp, #12
 8012f34:	af00      	add	r7, sp, #0
 8012f36:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	681b      	ldr	r3, [r3, #0]
 8012f3c:	f003 0303 	and.w	r3, r3, #3
}
 8012f40:	4618      	mov	r0, r3
 8012f42:	370c      	adds	r7, #12
 8012f44:	46bd      	mov	sp, r7
 8012f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4a:	4770      	bx	lr

08012f4c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8012f4c:	b480      	push	{r7}
 8012f4e:	b085      	sub	sp, #20
 8012f50:	af00      	add	r7, sp, #0
 8012f52:	6078      	str	r0, [r7, #4]
 8012f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012f56:	2300      	movs	r3, #0
 8012f58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	681a      	ldr	r2, [r3, #0]
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8012f66:	683b      	ldr	r3, [r7, #0]
 8012f68:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012f6a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8012f70:	431a      	orrs	r2, r3
                       Command->CPSM);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8012f76:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8012f78:	68fa      	ldr	r2, [r7, #12]
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8012f86:	f023 030f 	bic.w	r3, r3, #15
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	431a      	orrs	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8012f92:	2300      	movs	r3, #0
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3714      	adds	r7, #20
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8012fa0:	b480      	push	{r7}
 8012fa2:	b083      	sub	sp, #12
 8012fa4:	af00      	add	r7, sp, #0
 8012fa6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	691b      	ldr	r3, [r3, #16]
 8012fac:	b2db      	uxtb	r3, r3
}
 8012fae:	4618      	mov	r0, r3
 8012fb0:	370c      	adds	r7, #12
 8012fb2:	46bd      	mov	sp, r7
 8012fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb8:	4770      	bx	lr

08012fba <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8012fba:	b480      	push	{r7}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	af00      	add	r7, sp, #0
 8012fc0:	6078      	str	r0, [r7, #4]
 8012fc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	3314      	adds	r3, #20
 8012fc8:	461a      	mov	r2, r3
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	4413      	add	r3, r2
 8012fce:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	681b      	ldr	r3, [r3, #0]
}  
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	3714      	adds	r7, #20
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr

08012fe0 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8012fe0:	b480      	push	{r7}
 8012fe2:	b085      	sub	sp, #20
 8012fe4:	af00      	add	r7, sp, #0
 8012fe6:	6078      	str	r0, [r7, #4]
 8012fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8012fea:	2300      	movs	r3, #0
 8012fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8012fee:	683b      	ldr	r3, [r7, #0]
 8012ff0:	681a      	ldr	r2, [r3, #0]
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8012ff6:	683b      	ldr	r3, [r7, #0]
 8012ff8:	685a      	ldr	r2, [r3, #4]
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8012ffe:	683b      	ldr	r3, [r7, #0]
 8013000:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013006:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8013008:	683b      	ldr	r3, [r7, #0]
 801300a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801300c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801300e:	683b      	ldr	r3, [r7, #0]
 8013010:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8013012:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8013014:	68fa      	ldr	r2, [r7, #12]
 8013016:	4313      	orrs	r3, r2
 8013018:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801301e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8013022:	68fb      	ldr	r3, [r7, #12]
 8013024:	431a      	orrs	r2, r3
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801302a:	2300      	movs	r3, #0

}
 801302c:	4618      	mov	r0, r3
 801302e:	3714      	adds	r7, #20
 8013030:	46bd      	mov	sp, r7
 8013032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013036:	4770      	bx	lr

08013038 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b088      	sub	sp, #32
 801303c:	af00      	add	r7, sp, #0
 801303e:	6078      	str	r0, [r7, #4]
 8013040:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8013046:	2310      	movs	r3, #16
 8013048:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801304a:	2340      	movs	r3, #64	; 0x40
 801304c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801304e:	2300      	movs	r3, #0
 8013050:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013056:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013058:	f107 0308 	add.w	r3, r7, #8
 801305c:	4619      	mov	r1, r3
 801305e:	6878      	ldr	r0, [r7, #4]
 8013060:	f7ff ff74 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8013064:	f241 3288 	movw	r2, #5000	; 0x1388
 8013068:	2110      	movs	r1, #16
 801306a:	6878      	ldr	r0, [r7, #4]
 801306c:	f000 fa44 	bl	80134f8 <SDMMC_GetCmdResp1>
 8013070:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013072:	69fb      	ldr	r3, [r7, #28]
}
 8013074:	4618      	mov	r0, r3
 8013076:	3720      	adds	r7, #32
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b088      	sub	sp, #32
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
 8013084:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801308a:	2311      	movs	r3, #17
 801308c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801308e:	2340      	movs	r3, #64	; 0x40
 8013090:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013092:	2300      	movs	r3, #0
 8013094:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801309a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801309c:	f107 0308 	add.w	r3, r7, #8
 80130a0:	4619      	mov	r1, r3
 80130a2:	6878      	ldr	r0, [r7, #4]
 80130a4:	f7ff ff52 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80130a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80130ac:	2111      	movs	r1, #17
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fa22 	bl	80134f8 <SDMMC_GetCmdResp1>
 80130b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130b6:	69fb      	ldr	r3, [r7, #28]
}
 80130b8:	4618      	mov	r0, r3
 80130ba:	3720      	adds	r7, #32
 80130bc:	46bd      	mov	sp, r7
 80130be:	bd80      	pop	{r7, pc}

080130c0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b088      	sub	sp, #32
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80130ce:	2312      	movs	r3, #18
 80130d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80130d2:	2340      	movs	r3, #64	; 0x40
 80130d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80130d6:	2300      	movs	r3, #0
 80130d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80130da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130de:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80130e0:	f107 0308 	add.w	r3, r7, #8
 80130e4:	4619      	mov	r1, r3
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f7ff ff30 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80130ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80130f0:	2112      	movs	r1, #18
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	f000 fa00 	bl	80134f8 <SDMMC_GetCmdResp1>
 80130f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80130fa:	69fb      	ldr	r3, [r7, #28]
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3720      	adds	r7, #32
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b088      	sub	sp, #32
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
 801310c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801310e:	683b      	ldr	r3, [r7, #0]
 8013110:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8013112:	2318      	movs	r3, #24
 8013114:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013116:	2340      	movs	r3, #64	; 0x40
 8013118:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801311a:	2300      	movs	r3, #0
 801311c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801311e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013122:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013124:	f107 0308 	add.w	r3, r7, #8
 8013128:	4619      	mov	r1, r3
 801312a:	6878      	ldr	r0, [r7, #4]
 801312c:	f7ff ff0e 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8013130:	f241 3288 	movw	r2, #5000	; 0x1388
 8013134:	2118      	movs	r1, #24
 8013136:	6878      	ldr	r0, [r7, #4]
 8013138:	f000 f9de 	bl	80134f8 <SDMMC_GetCmdResp1>
 801313c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801313e:	69fb      	ldr	r3, [r7, #28]
}
 8013140:	4618      	mov	r0, r3
 8013142:	3720      	adds	r7, #32
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}

08013148 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8013148:	b580      	push	{r7, lr}
 801314a:	b088      	sub	sp, #32
 801314c:	af00      	add	r7, sp, #0
 801314e:	6078      	str	r0, [r7, #4]
 8013150:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8013152:	683b      	ldr	r3, [r7, #0]
 8013154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8013156:	2319      	movs	r3, #25
 8013158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801315a:	2340      	movs	r3, #64	; 0x40
 801315c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801315e:	2300      	movs	r3, #0
 8013160:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013162:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013166:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013168:	f107 0308 	add.w	r3, r7, #8
 801316c:	4619      	mov	r1, r3
 801316e:	6878      	ldr	r0, [r7, #4]
 8013170:	f7ff feec 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8013174:	f241 3288 	movw	r2, #5000	; 0x1388
 8013178:	2119      	movs	r1, #25
 801317a:	6878      	ldr	r0, [r7, #4]
 801317c:	f000 f9bc 	bl	80134f8 <SDMMC_GetCmdResp1>
 8013180:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013182:	69fb      	ldr	r3, [r7, #28]
}
 8013184:	4618      	mov	r0, r3
 8013186:	3720      	adds	r7, #32
 8013188:	46bd      	mov	sp, r7
 801318a:	bd80      	pop	{r7, pc}

0801318c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 801318c:	b580      	push	{r7, lr}
 801318e:	b088      	sub	sp, #32
 8013190:	af00      	add	r7, sp, #0
 8013192:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8013194:	2300      	movs	r3, #0
 8013196:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8013198:	230c      	movs	r3, #12
 801319a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801319c:	2340      	movs	r3, #64	; 0x40
 801319e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80131a0:	2300      	movs	r3, #0
 80131a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80131a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131aa:	f107 0308 	add.w	r3, r7, #8
 80131ae:	4619      	mov	r1, r3
 80131b0:	6878      	ldr	r0, [r7, #4]
 80131b2:	f7ff fecb 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80131b6:	4a05      	ldr	r2, [pc, #20]	; (80131cc <SDMMC_CmdStopTransfer+0x40>)
 80131b8:	210c      	movs	r1, #12
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	f000 f99c 	bl	80134f8 <SDMMC_GetCmdResp1>
 80131c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80131c2:	69fb      	ldr	r3, [r7, #28]
}
 80131c4:	4618      	mov	r0, r3
 80131c6:	3720      	adds	r7, #32
 80131c8:	46bd      	mov	sp, r7
 80131ca:	bd80      	pop	{r7, pc}
 80131cc:	05f5e100 	.word	0x05f5e100

080131d0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b08a      	sub	sp, #40	; 0x28
 80131d4:	af00      	add	r7, sp, #0
 80131d6:	60f8      	str	r0, [r7, #12]
 80131d8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80131dc:	683b      	ldr	r3, [r7, #0]
 80131de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80131e0:	2307      	movs	r3, #7
 80131e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80131e4:	2340      	movs	r3, #64	; 0x40
 80131e6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80131e8:	2300      	movs	r3, #0
 80131ea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80131ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80131f0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80131f2:	f107 0310 	add.w	r3, r7, #16
 80131f6:	4619      	mov	r1, r3
 80131f8:	68f8      	ldr	r0, [r7, #12]
 80131fa:	f7ff fea7 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80131fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8013202:	2107      	movs	r1, #7
 8013204:	68f8      	ldr	r0, [r7, #12]
 8013206:	f000 f977 	bl	80134f8 <SDMMC_GetCmdResp1>
 801320a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801320e:	4618      	mov	r0, r3
 8013210:	3728      	adds	r7, #40	; 0x28
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b088      	sub	sp, #32
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 801321e:	2300      	movs	r3, #0
 8013220:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8013222:	2300      	movs	r3, #0
 8013224:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8013226:	2300      	movs	r3, #0
 8013228:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 801322a:	2300      	movs	r3, #0
 801322c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801322e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013232:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013234:	f107 0308 	add.w	r3, r7, #8
 8013238:	4619      	mov	r1, r3
 801323a:	6878      	ldr	r0, [r7, #4]
 801323c:	f7ff fe86 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8013240:	6878      	ldr	r0, [r7, #4]
 8013242:	f000 f92d 	bl	80134a0 <SDMMC_GetCmdError>
 8013246:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013248:	69fb      	ldr	r3, [r7, #28]
}
 801324a:	4618      	mov	r0, r3
 801324c:	3720      	adds	r7, #32
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b088      	sub	sp, #32
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 801325a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 801325e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8013260:	2308      	movs	r3, #8
 8013262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8013264:	2340      	movs	r3, #64	; 0x40
 8013266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013268:	2300      	movs	r3, #0
 801326a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 801326c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013270:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8013272:	f107 0308 	add.w	r3, r7, #8
 8013276:	4619      	mov	r1, r3
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f7ff fe67 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 801327e:	6878      	ldr	r0, [r7, #4]
 8013280:	f000 fb24 	bl	80138cc <SDMMC_GetCmdResp7>
 8013284:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013286:	69fb      	ldr	r3, [r7, #28]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3720      	adds	r7, #32
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8013290:	b580      	push	{r7, lr}
 8013292:	b088      	sub	sp, #32
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 801329a:	683b      	ldr	r3, [r7, #0]
 801329c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 801329e:	2337      	movs	r3, #55	; 0x37
 80132a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80132a2:	2340      	movs	r3, #64	; 0x40
 80132a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80132a6:	2300      	movs	r3, #0
 80132a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80132aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80132b0:	f107 0308 	add.w	r3, r7, #8
 80132b4:	4619      	mov	r1, r3
 80132b6:	6878      	ldr	r0, [r7, #4]
 80132b8:	f7ff fe48 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80132bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80132c0:	2137      	movs	r1, #55	; 0x37
 80132c2:	6878      	ldr	r0, [r7, #4]
 80132c4:	f000 f918 	bl	80134f8 <SDMMC_GetCmdResp1>
 80132c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80132ca:	69fb      	ldr	r3, [r7, #28]
}
 80132cc:	4618      	mov	r0, r3
 80132ce:	3720      	adds	r7, #32
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b088      	sub	sp, #32
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80132de:	683b      	ldr	r3, [r7, #0]
 80132e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80132e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80132e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80132ea:	2329      	movs	r3, #41	; 0x29
 80132ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80132ee:	2340      	movs	r3, #64	; 0x40
 80132f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80132f2:	2300      	movs	r3, #0
 80132f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80132f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80132fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80132fc:	f107 0308 	add.w	r3, r7, #8
 8013300:	4619      	mov	r1, r3
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7ff fe22 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8013308:	6878      	ldr	r0, [r7, #4]
 801330a:	f000 fa2b 	bl	8013764 <SDMMC_GetCmdResp3>
 801330e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013310:	69fb      	ldr	r3, [r7, #28]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3720      	adds	r7, #32
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}

0801331a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 801331a:	b580      	push	{r7, lr}
 801331c:	b088      	sub	sp, #32
 801331e:	af00      	add	r7, sp, #0
 8013320:	6078      	str	r0, [r7, #4]
 8013322:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8013324:	683b      	ldr	r3, [r7, #0]
 8013326:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8013328:	2306      	movs	r3, #6
 801332a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801332c:	2340      	movs	r3, #64	; 0x40
 801332e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013330:	2300      	movs	r3, #0
 8013332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013334:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013338:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801333a:	f107 0308 	add.w	r3, r7, #8
 801333e:	4619      	mov	r1, r3
 8013340:	6878      	ldr	r0, [r7, #4]
 8013342:	f7ff fe03 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8013346:	f241 3288 	movw	r2, #5000	; 0x1388
 801334a:	2106      	movs	r1, #6
 801334c:	6878      	ldr	r0, [r7, #4]
 801334e:	f000 f8d3 	bl	80134f8 <SDMMC_GetCmdResp1>
 8013352:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013354:	69fb      	ldr	r3, [r7, #28]
}
 8013356:	4618      	mov	r0, r3
 8013358:	3720      	adds	r7, #32
 801335a:	46bd      	mov	sp, r7
 801335c:	bd80      	pop	{r7, pc}

0801335e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 801335e:	b580      	push	{r7, lr}
 8013360:	b088      	sub	sp, #32
 8013362:	af00      	add	r7, sp, #0
 8013364:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8013366:	2300      	movs	r3, #0
 8013368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 801336a:	2333      	movs	r3, #51	; 0x33
 801336c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801336e:	2340      	movs	r3, #64	; 0x40
 8013370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013372:	2300      	movs	r3, #0
 8013374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801337a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801337c:	f107 0308 	add.w	r3, r7, #8
 8013380:	4619      	mov	r1, r3
 8013382:	6878      	ldr	r0, [r7, #4]
 8013384:	f7ff fde2 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8013388:	f241 3288 	movw	r2, #5000	; 0x1388
 801338c:	2133      	movs	r1, #51	; 0x33
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f000 f8b2 	bl	80134f8 <SDMMC_GetCmdResp1>
 8013394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013396:	69fb      	ldr	r3, [r7, #28]
}
 8013398:	4618      	mov	r0, r3
 801339a:	3720      	adds	r7, #32
 801339c:	46bd      	mov	sp, r7
 801339e:	bd80      	pop	{r7, pc}

080133a0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80133a0:	b580      	push	{r7, lr}
 80133a2:	b088      	sub	sp, #32
 80133a4:	af00      	add	r7, sp, #0
 80133a6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80133a8:	2300      	movs	r3, #0
 80133aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80133ac:	2302      	movs	r3, #2
 80133ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80133b0:	23c0      	movs	r3, #192	; 0xc0
 80133b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80133b4:	2300      	movs	r3, #0
 80133b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80133b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80133be:	f107 0308 	add.w	r3, r7, #8
 80133c2:	4619      	mov	r1, r3
 80133c4:	6878      	ldr	r0, [r7, #4]
 80133c6:	f7ff fdc1 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80133ca:	6878      	ldr	r0, [r7, #4]
 80133cc:	f000 f982 	bl	80136d4 <SDMMC_GetCmdResp2>
 80133d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80133d2:	69fb      	ldr	r3, [r7, #28]
}
 80133d4:	4618      	mov	r0, r3
 80133d6:	3720      	adds	r7, #32
 80133d8:	46bd      	mov	sp, r7
 80133da:	bd80      	pop	{r7, pc}

080133dc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b088      	sub	sp, #32
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
 80133e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80133e6:	683b      	ldr	r3, [r7, #0]
 80133e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80133ea:	2309      	movs	r3, #9
 80133ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80133ee:	23c0      	movs	r3, #192	; 0xc0
 80133f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80133f2:	2300      	movs	r3, #0
 80133f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80133f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80133fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80133fc:	f107 0308 	add.w	r3, r7, #8
 8013400:	4619      	mov	r1, r3
 8013402:	6878      	ldr	r0, [r7, #4]
 8013404:	f7ff fda2 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8013408:	6878      	ldr	r0, [r7, #4]
 801340a:	f000 f963 	bl	80136d4 <SDMMC_GetCmdResp2>
 801340e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013410:	69fb      	ldr	r3, [r7, #28]
}
 8013412:	4618      	mov	r0, r3
 8013414:	3720      	adds	r7, #32
 8013416:	46bd      	mov	sp, r7
 8013418:	bd80      	pop	{r7, pc}

0801341a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 801341a:	b580      	push	{r7, lr}
 801341c:	b088      	sub	sp, #32
 801341e:	af00      	add	r7, sp, #0
 8013420:	6078      	str	r0, [r7, #4]
 8013422:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8013424:	2300      	movs	r3, #0
 8013426:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8013428:	2303      	movs	r3, #3
 801342a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801342c:	2340      	movs	r3, #64	; 0x40
 801342e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013430:	2300      	movs	r3, #0
 8013432:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013434:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8013438:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801343a:	f107 0308 	add.w	r3, r7, #8
 801343e:	4619      	mov	r1, r3
 8013440:	6878      	ldr	r0, [r7, #4]
 8013442:	f7ff fd83 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8013446:	683a      	ldr	r2, [r7, #0]
 8013448:	2103      	movs	r1, #3
 801344a:	6878      	ldr	r0, [r7, #4]
 801344c:	f000 f9c8 	bl	80137e0 <SDMMC_GetCmdResp6>
 8013450:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013452:	69fb      	ldr	r3, [r7, #28]
}
 8013454:	4618      	mov	r0, r3
 8013456:	3720      	adds	r7, #32
 8013458:	46bd      	mov	sp, r7
 801345a:	bd80      	pop	{r7, pc}

0801345c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b088      	sub	sp, #32
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 801346a:	230d      	movs	r3, #13
 801346c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 801346e:	2340      	movs	r3, #64	; 0x40
 8013470:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8013472:	2300      	movs	r3, #0
 8013474:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8013476:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801347a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 801347c:	f107 0308 	add.w	r3, r7, #8
 8013480:	4619      	mov	r1, r3
 8013482:	6878      	ldr	r0, [r7, #4]
 8013484:	f7ff fd62 	bl	8012f4c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8013488:	f241 3288 	movw	r2, #5000	; 0x1388
 801348c:	210d      	movs	r1, #13
 801348e:	6878      	ldr	r0, [r7, #4]
 8013490:	f000 f832 	bl	80134f8 <SDMMC_GetCmdResp1>
 8013494:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8013496:	69fb      	ldr	r3, [r7, #28]
}
 8013498:	4618      	mov	r0, r3
 801349a:	3720      	adds	r7, #32
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80134a0:	b480      	push	{r7}
 80134a2:	b085      	sub	sp, #20
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80134a8:	4b11      	ldr	r3, [pc, #68]	; (80134f0 <SDMMC_GetCmdError+0x50>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	4a11      	ldr	r2, [pc, #68]	; (80134f4 <SDMMC_GetCmdError+0x54>)
 80134ae:	fba2 2303 	umull	r2, r3, r2, r3
 80134b2:	0a5b      	lsrs	r3, r3, #9
 80134b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80134b8:	fb02 f303 	mul.w	r3, r2, r3
 80134bc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	1e5a      	subs	r2, r3, #1
 80134c2:	60fa      	str	r2, [r7, #12]
 80134c4:	2b00      	cmp	r3, #0
 80134c6:	d102      	bne.n	80134ce <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80134c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80134cc:	e009      	b.n	80134e2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80134d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d0f1      	beq.n	80134be <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	22c5      	movs	r2, #197	; 0xc5
 80134de:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80134e0:	2300      	movs	r3, #0
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3714      	adds	r7, #20
 80134e6:	46bd      	mov	sp, r7
 80134e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	20000000 	.word	0x20000000
 80134f4:	10624dd3 	.word	0x10624dd3

080134f8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80134f8:	b580      	push	{r7, lr}
 80134fa:	b088      	sub	sp, #32
 80134fc:	af00      	add	r7, sp, #0
 80134fe:	60f8      	str	r0, [r7, #12]
 8013500:	460b      	mov	r3, r1
 8013502:	607a      	str	r2, [r7, #4]
 8013504:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8013506:	4b70      	ldr	r3, [pc, #448]	; (80136c8 <SDMMC_GetCmdResp1+0x1d0>)
 8013508:	681b      	ldr	r3, [r3, #0]
 801350a:	4a70      	ldr	r2, [pc, #448]	; (80136cc <SDMMC_GetCmdResp1+0x1d4>)
 801350c:	fba2 2303 	umull	r2, r3, r2, r3
 8013510:	0a5a      	lsrs	r2, r3, #9
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	fb02 f303 	mul.w	r3, r2, r3
 8013518:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	1e5a      	subs	r2, r3, #1
 801351e:	61fa      	str	r2, [r7, #28]
 8013520:	2b00      	cmp	r3, #0
 8013522:	d102      	bne.n	801352a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8013524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013528:	e0c9      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801352e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013530:	69bb      	ldr	r3, [r7, #24]
 8013532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013536:	2b00      	cmp	r3, #0
 8013538:	d0ef      	beq.n	801351a <SDMMC_GetCmdResp1+0x22>
 801353a:	69bb      	ldr	r3, [r7, #24]
 801353c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013540:	2b00      	cmp	r3, #0
 8013542:	d1ea      	bne.n	801351a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013548:	f003 0304 	and.w	r3, r3, #4
 801354c:	2b00      	cmp	r3, #0
 801354e:	d004      	beq.n	801355a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2204      	movs	r2, #4
 8013554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013556:	2304      	movs	r3, #4
 8013558:	e0b1      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801355a:	68fb      	ldr	r3, [r7, #12]
 801355c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801355e:	f003 0301 	and.w	r3, r3, #1
 8013562:	2b00      	cmp	r3, #0
 8013564:	d004      	beq.n	8013570 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013566:	68fb      	ldr	r3, [r7, #12]
 8013568:	2201      	movs	r2, #1
 801356a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801356c:	2301      	movs	r3, #1
 801356e:	e0a6      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	22c5      	movs	r2, #197	; 0xc5
 8013574:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8013576:	68f8      	ldr	r0, [r7, #12]
 8013578:	f7ff fd12 	bl	8012fa0 <SDIO_GetCommandResponse>
 801357c:	4603      	mov	r3, r0
 801357e:	461a      	mov	r2, r3
 8013580:	7afb      	ldrb	r3, [r7, #11]
 8013582:	4293      	cmp	r3, r2
 8013584:	d001      	beq.n	801358a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013586:	2301      	movs	r3, #1
 8013588:	e099      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 801358a:	2100      	movs	r1, #0
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f7ff fd14 	bl	8012fba <SDIO_GetResponse>
 8013592:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8013594:	697a      	ldr	r2, [r7, #20]
 8013596:	4b4e      	ldr	r3, [pc, #312]	; (80136d0 <SDMMC_GetCmdResp1+0x1d8>)
 8013598:	4013      	ands	r3, r2
 801359a:	2b00      	cmp	r3, #0
 801359c:	d101      	bne.n	80135a2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801359e:	2300      	movs	r3, #0
 80135a0:	e08d      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80135a2:	697b      	ldr	r3, [r7, #20]
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	da02      	bge.n	80135ae <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80135a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80135ac:	e087      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80135ae:	697b      	ldr	r3, [r7, #20]
 80135b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d001      	beq.n	80135bc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80135b8:	2340      	movs	r3, #64	; 0x40
 80135ba:	e080      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80135bc:	697b      	ldr	r3, [r7, #20]
 80135be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d001      	beq.n	80135ca <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80135c6:	2380      	movs	r3, #128	; 0x80
 80135c8:	e079      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80135ca:	697b      	ldr	r3, [r7, #20]
 80135cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	d002      	beq.n	80135da <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80135d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80135d8:	e071      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80135da:	697b      	ldr	r3, [r7, #20]
 80135dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d002      	beq.n	80135ea <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80135e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80135e8:	e069      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80135ea:	697b      	ldr	r3, [r7, #20]
 80135ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d002      	beq.n	80135fa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80135f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80135f8:	e061      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80135fa:	697b      	ldr	r3, [r7, #20]
 80135fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013600:	2b00      	cmp	r3, #0
 8013602:	d002      	beq.n	801360a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8013604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013608:	e059      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013610:	2b00      	cmp	r3, #0
 8013612:	d002      	beq.n	801361a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8013614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013618:	e051      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8013620:	2b00      	cmp	r3, #0
 8013622:	d002      	beq.n	801362a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8013624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013628:	e049      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013630:	2b00      	cmp	r3, #0
 8013632:	d002      	beq.n	801363a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8013634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013638:	e041      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801363a:	697b      	ldr	r3, [r7, #20]
 801363c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8013640:	2b00      	cmp	r3, #0
 8013642:	d002      	beq.n	801364a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8013644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013648:	e039      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801364a:	697b      	ldr	r3, [r7, #20]
 801364c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8013650:	2b00      	cmp	r3, #0
 8013652:	d002      	beq.n	801365a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8013654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8013658:	e031      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8013660:	2b00      	cmp	r3, #0
 8013662:	d002      	beq.n	801366a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8013664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8013668:	e029      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8013674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8013678:	e021      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801367a:	697b      	ldr	r3, [r7, #20]
 801367c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013680:	2b00      	cmp	r3, #0
 8013682:	d002      	beq.n	801368a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8013684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8013688:	e019      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801368a:	697b      	ldr	r3, [r7, #20]
 801368c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8013690:	2b00      	cmp	r3, #0
 8013692:	d002      	beq.n	801369a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8013694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013698:	e011      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801369a:	697b      	ldr	r3, [r7, #20]
 801369c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d002      	beq.n	80136aa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80136a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80136a8:	e009      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80136aa:	697b      	ldr	r3, [r7, #20]
 80136ac:	f003 0308 	and.w	r3, r3, #8
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d002      	beq.n	80136ba <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80136b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80136b8:	e001      	b.n	80136be <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80136ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3720      	adds	r7, #32
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd80      	pop	{r7, pc}
 80136c6:	bf00      	nop
 80136c8:	20000000 	.word	0x20000000
 80136cc:	10624dd3 	.word	0x10624dd3
 80136d0:	fdffe008 	.word	0xfdffe008

080136d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80136d4:	b480      	push	{r7}
 80136d6:	b085      	sub	sp, #20
 80136d8:	af00      	add	r7, sp, #0
 80136da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80136dc:	4b1f      	ldr	r3, [pc, #124]	; (801375c <SDMMC_GetCmdResp2+0x88>)
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	4a1f      	ldr	r2, [pc, #124]	; (8013760 <SDMMC_GetCmdResp2+0x8c>)
 80136e2:	fba2 2303 	umull	r2, r3, r2, r3
 80136e6:	0a5b      	lsrs	r3, r3, #9
 80136e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80136ec:	fb02 f303 	mul.w	r3, r2, r3
 80136f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	1e5a      	subs	r2, r3, #1
 80136f6:	60fa      	str	r2, [r7, #12]
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d102      	bne.n	8013702 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80136fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013700:	e026      	b.n	8013750 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013706:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801370e:	2b00      	cmp	r3, #0
 8013710:	d0ef      	beq.n	80136f2 <SDMMC_GetCmdResp2+0x1e>
 8013712:	68bb      	ldr	r3, [r7, #8]
 8013714:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013718:	2b00      	cmp	r3, #0
 801371a:	d1ea      	bne.n	80136f2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013720:	f003 0304 	and.w	r3, r3, #4
 8013724:	2b00      	cmp	r3, #0
 8013726:	d004      	beq.n	8013732 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	2204      	movs	r2, #4
 801372c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801372e:	2304      	movs	r3, #4
 8013730:	e00e      	b.n	8013750 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013736:	f003 0301 	and.w	r3, r3, #1
 801373a:	2b00      	cmp	r3, #0
 801373c:	d004      	beq.n	8013748 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2201      	movs	r2, #1
 8013742:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013744:	2301      	movs	r3, #1
 8013746:	e003      	b.n	8013750 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	22c5      	movs	r2, #197	; 0xc5
 801374c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801374e:	2300      	movs	r3, #0
}
 8013750:	4618      	mov	r0, r3
 8013752:	3714      	adds	r7, #20
 8013754:	46bd      	mov	sp, r7
 8013756:	f85d 7b04 	ldr.w	r7, [sp], #4
 801375a:	4770      	bx	lr
 801375c:	20000000 	.word	0x20000000
 8013760:	10624dd3 	.word	0x10624dd3

08013764 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8013764:	b480      	push	{r7}
 8013766:	b085      	sub	sp, #20
 8013768:	af00      	add	r7, sp, #0
 801376a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801376c:	4b1a      	ldr	r3, [pc, #104]	; (80137d8 <SDMMC_GetCmdResp3+0x74>)
 801376e:	681b      	ldr	r3, [r3, #0]
 8013770:	4a1a      	ldr	r2, [pc, #104]	; (80137dc <SDMMC_GetCmdResp3+0x78>)
 8013772:	fba2 2303 	umull	r2, r3, r2, r3
 8013776:	0a5b      	lsrs	r3, r3, #9
 8013778:	f241 3288 	movw	r2, #5000	; 0x1388
 801377c:	fb02 f303 	mul.w	r3, r2, r3
 8013780:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	1e5a      	subs	r2, r3, #1
 8013786:	60fa      	str	r2, [r7, #12]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d102      	bne.n	8013792 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801378c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013790:	e01b      	b.n	80137ca <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013796:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d0ef      	beq.n	8013782 <SDMMC_GetCmdResp3+0x1e>
 80137a2:	68bb      	ldr	r3, [r7, #8]
 80137a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d1ea      	bne.n	8013782 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137b0:	f003 0304 	and.w	r3, r3, #4
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d004      	beq.n	80137c2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80137b8:	687b      	ldr	r3, [r7, #4]
 80137ba:	2204      	movs	r2, #4
 80137bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80137be:	2304      	movs	r3, #4
 80137c0:	e003      	b.n	80137ca <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	22c5      	movs	r2, #197	; 0xc5
 80137c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80137c8:	2300      	movs	r3, #0
}
 80137ca:	4618      	mov	r0, r3
 80137cc:	3714      	adds	r7, #20
 80137ce:	46bd      	mov	sp, r7
 80137d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137d4:	4770      	bx	lr
 80137d6:	bf00      	nop
 80137d8:	20000000 	.word	0x20000000
 80137dc:	10624dd3 	.word	0x10624dd3

080137e0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80137e0:	b580      	push	{r7, lr}
 80137e2:	b088      	sub	sp, #32
 80137e4:	af00      	add	r7, sp, #0
 80137e6:	60f8      	str	r0, [r7, #12]
 80137e8:	460b      	mov	r3, r1
 80137ea:	607a      	str	r2, [r7, #4]
 80137ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80137ee:	4b35      	ldr	r3, [pc, #212]	; (80138c4 <SDMMC_GetCmdResp6+0xe4>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	4a35      	ldr	r2, [pc, #212]	; (80138c8 <SDMMC_GetCmdResp6+0xe8>)
 80137f4:	fba2 2303 	umull	r2, r3, r2, r3
 80137f8:	0a5b      	lsrs	r3, r3, #9
 80137fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80137fe:	fb02 f303 	mul.w	r3, r2, r3
 8013802:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8013804:	69fb      	ldr	r3, [r7, #28]
 8013806:	1e5a      	subs	r2, r3, #1
 8013808:	61fa      	str	r2, [r7, #28]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d102      	bne.n	8013814 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 801380e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013812:	e052      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8013814:	68fb      	ldr	r3, [r7, #12]
 8013816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013818:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801381a:	69bb      	ldr	r3, [r7, #24]
 801381c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013820:	2b00      	cmp	r3, #0
 8013822:	d0ef      	beq.n	8013804 <SDMMC_GetCmdResp6+0x24>
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 801382a:	2b00      	cmp	r3, #0
 801382c:	d1ea      	bne.n	8013804 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 801382e:	68fb      	ldr	r3, [r7, #12]
 8013830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013832:	f003 0304 	and.w	r3, r3, #4
 8013836:	2b00      	cmp	r3, #0
 8013838:	d004      	beq.n	8013844 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	2204      	movs	r2, #4
 801383e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013840:	2304      	movs	r3, #4
 8013842:	e03a      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013848:	f003 0301 	and.w	r3, r3, #1
 801384c:	2b00      	cmp	r3, #0
 801384e:	d004      	beq.n	801385a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	2201      	movs	r2, #1
 8013854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8013856:	2301      	movs	r3, #1
 8013858:	e02f      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f7ff fba0 	bl	8012fa0 <SDIO_GetCommandResponse>
 8013860:	4603      	mov	r3, r0
 8013862:	461a      	mov	r2, r3
 8013864:	7afb      	ldrb	r3, [r7, #11]
 8013866:	4293      	cmp	r3, r2
 8013868:	d001      	beq.n	801386e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801386a:	2301      	movs	r3, #1
 801386c:	e025      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	22c5      	movs	r2, #197	; 0xc5
 8013872:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8013874:	2100      	movs	r1, #0
 8013876:	68f8      	ldr	r0, [r7, #12]
 8013878:	f7ff fb9f 	bl	8012fba <SDIO_GetResponse>
 801387c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 801387e:	697b      	ldr	r3, [r7, #20]
 8013880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8013884:	2b00      	cmp	r3, #0
 8013886:	d106      	bne.n	8013896 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8013888:	697b      	ldr	r3, [r7, #20]
 801388a:	0c1b      	lsrs	r3, r3, #16
 801388c:	b29a      	uxth	r2, r3
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8013892:	2300      	movs	r3, #0
 8013894:	e011      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801389c:	2b00      	cmp	r3, #0
 801389e:	d002      	beq.n	80138a6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80138a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80138a4:	e009      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80138a6:	697b      	ldr	r3, [r7, #20]
 80138a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d002      	beq.n	80138b6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80138b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80138b4:	e001      	b.n	80138ba <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80138b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80138ba:	4618      	mov	r0, r3
 80138bc:	3720      	adds	r7, #32
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd80      	pop	{r7, pc}
 80138c2:	bf00      	nop
 80138c4:	20000000 	.word	0x20000000
 80138c8:	10624dd3 	.word	0x10624dd3

080138cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80138cc:	b480      	push	{r7}
 80138ce:	b085      	sub	sp, #20
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80138d4:	4b22      	ldr	r3, [pc, #136]	; (8013960 <SDMMC_GetCmdResp7+0x94>)
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	4a22      	ldr	r2, [pc, #136]	; (8013964 <SDMMC_GetCmdResp7+0x98>)
 80138da:	fba2 2303 	umull	r2, r3, r2, r3
 80138de:	0a5b      	lsrs	r3, r3, #9
 80138e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80138e4:	fb02 f303 	mul.w	r3, r2, r3
 80138e8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	1e5a      	subs	r2, r3, #1
 80138ee:	60fa      	str	r2, [r7, #12]
 80138f0:	2b00      	cmp	r3, #0
 80138f2:	d102      	bne.n	80138fa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80138f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80138f8:	e02c      	b.n	8013954 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80138fe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013900:	68bb      	ldr	r3, [r7, #8]
 8013902:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8013906:	2b00      	cmp	r3, #0
 8013908:	d0ef      	beq.n	80138ea <SDMMC_GetCmdResp7+0x1e>
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8013910:	2b00      	cmp	r3, #0
 8013912:	d1ea      	bne.n	80138ea <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013918:	f003 0304 	and.w	r3, r3, #4
 801391c:	2b00      	cmp	r3, #0
 801391e:	d004      	beq.n	801392a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	2204      	movs	r2, #4
 8013924:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8013926:	2304      	movs	r3, #4
 8013928:	e014      	b.n	8013954 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801392e:	f003 0301 	and.w	r3, r3, #1
 8013932:	2b00      	cmp	r3, #0
 8013934:	d004      	beq.n	8013940 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8013936:	687b      	ldr	r3, [r7, #4]
 8013938:	2201      	movs	r2, #1
 801393a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801393c:	2301      	movs	r3, #1
 801393e:	e009      	b.n	8013954 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8013940:	687b      	ldr	r3, [r7, #4]
 8013942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013948:	2b00      	cmp	r3, #0
 801394a:	d002      	beq.n	8013952 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 801394c:	687b      	ldr	r3, [r7, #4]
 801394e:	2240      	movs	r2, #64	; 0x40
 8013950:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8013952:	2300      	movs	r3, #0
  
}
 8013954:	4618      	mov	r0, r3
 8013956:	3714      	adds	r7, #20
 8013958:	46bd      	mov	sp, r7
 801395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395e:	4770      	bx	lr
 8013960:	20000000 	.word	0x20000000
 8013964:	10624dd3 	.word	0x10624dd3

08013968 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013968:	b084      	sub	sp, #16
 801396a:	b580      	push	{r7, lr}
 801396c:	b084      	sub	sp, #16
 801396e:	af00      	add	r7, sp, #0
 8013970:	6078      	str	r0, [r7, #4]
 8013972:	f107 001c 	add.w	r0, r7, #28
 8013976:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	2b01      	cmp	r3, #1
 801397e:	d122      	bne.n	80139c6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013984:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	68db      	ldr	r3, [r3, #12]
 8013990:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013998:	687a      	ldr	r2, [r7, #4]
 801399a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80139a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139aa:	2b01      	cmp	r3, #1
 80139ac:	d105      	bne.n	80139ba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80139ba:	6878      	ldr	r0, [r7, #4]
 80139bc:	f001 fac6 	bl	8014f4c <USB_CoreReset>
 80139c0:	4603      	mov	r3, r0
 80139c2:	73fb      	strb	r3, [r7, #15]
 80139c4:	e01a      	b.n	80139fc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80139c6:	687b      	ldr	r3, [r7, #4]
 80139c8:	68db      	ldr	r3, [r3, #12]
 80139ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80139d2:	6878      	ldr	r0, [r7, #4]
 80139d4:	f001 faba 	bl	8014f4c <USB_CoreReset>
 80139d8:	4603      	mov	r3, r0
 80139da:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80139dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d106      	bne.n	80139f0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	639a      	str	r2, [r3, #56]	; 0x38
 80139ee:	e005      	b.n	80139fc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	2b01      	cmp	r3, #1
 8013a00:	d10b      	bne.n	8013a1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	689b      	ldr	r3, [r3, #8]
 8013a06:	f043 0206 	orr.w	r2, r3, #6
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	689b      	ldr	r3, [r3, #8]
 8013a12:	f043 0220 	orr.w	r2, r3, #32
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013a1c:	4618      	mov	r0, r3
 8013a1e:	3710      	adds	r7, #16
 8013a20:	46bd      	mov	sp, r7
 8013a22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a26:	b004      	add	sp, #16
 8013a28:	4770      	bx	lr
	...

08013a2c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013a2c:	b480      	push	{r7}
 8013a2e:	b087      	sub	sp, #28
 8013a30:	af00      	add	r7, sp, #0
 8013a32:	60f8      	str	r0, [r7, #12]
 8013a34:	60b9      	str	r1, [r7, #8]
 8013a36:	4613      	mov	r3, r2
 8013a38:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013a3a:	79fb      	ldrb	r3, [r7, #7]
 8013a3c:	2b02      	cmp	r3, #2
 8013a3e:	d165      	bne.n	8013b0c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8013a40:	68bb      	ldr	r3, [r7, #8]
 8013a42:	4a41      	ldr	r2, [pc, #260]	; (8013b48 <USB_SetTurnaroundTime+0x11c>)
 8013a44:	4293      	cmp	r3, r2
 8013a46:	d906      	bls.n	8013a56 <USB_SetTurnaroundTime+0x2a>
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	4a40      	ldr	r2, [pc, #256]	; (8013b4c <USB_SetTurnaroundTime+0x120>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d202      	bcs.n	8013a56 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8013a50:	230f      	movs	r3, #15
 8013a52:	617b      	str	r3, [r7, #20]
 8013a54:	e062      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013a56:	68bb      	ldr	r3, [r7, #8]
 8013a58:	4a3c      	ldr	r2, [pc, #240]	; (8013b4c <USB_SetTurnaroundTime+0x120>)
 8013a5a:	4293      	cmp	r3, r2
 8013a5c:	d306      	bcc.n	8013a6c <USB_SetTurnaroundTime+0x40>
 8013a5e:	68bb      	ldr	r3, [r7, #8]
 8013a60:	4a3b      	ldr	r2, [pc, #236]	; (8013b50 <USB_SetTurnaroundTime+0x124>)
 8013a62:	4293      	cmp	r3, r2
 8013a64:	d202      	bcs.n	8013a6c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013a66:	230e      	movs	r3, #14
 8013a68:	617b      	str	r3, [r7, #20]
 8013a6a:	e057      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	4a38      	ldr	r2, [pc, #224]	; (8013b50 <USB_SetTurnaroundTime+0x124>)
 8013a70:	4293      	cmp	r3, r2
 8013a72:	d306      	bcc.n	8013a82 <USB_SetTurnaroundTime+0x56>
 8013a74:	68bb      	ldr	r3, [r7, #8]
 8013a76:	4a37      	ldr	r2, [pc, #220]	; (8013b54 <USB_SetTurnaroundTime+0x128>)
 8013a78:	4293      	cmp	r3, r2
 8013a7a:	d202      	bcs.n	8013a82 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013a7c:	230d      	movs	r3, #13
 8013a7e:	617b      	str	r3, [r7, #20]
 8013a80:	e04c      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013a82:	68bb      	ldr	r3, [r7, #8]
 8013a84:	4a33      	ldr	r2, [pc, #204]	; (8013b54 <USB_SetTurnaroundTime+0x128>)
 8013a86:	4293      	cmp	r3, r2
 8013a88:	d306      	bcc.n	8013a98 <USB_SetTurnaroundTime+0x6c>
 8013a8a:	68bb      	ldr	r3, [r7, #8]
 8013a8c:	4a32      	ldr	r2, [pc, #200]	; (8013b58 <USB_SetTurnaroundTime+0x12c>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d802      	bhi.n	8013a98 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8013a92:	230c      	movs	r3, #12
 8013a94:	617b      	str	r3, [r7, #20]
 8013a96:	e041      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013a98:	68bb      	ldr	r3, [r7, #8]
 8013a9a:	4a2f      	ldr	r2, [pc, #188]	; (8013b58 <USB_SetTurnaroundTime+0x12c>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d906      	bls.n	8013aae <USB_SetTurnaroundTime+0x82>
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	4a2e      	ldr	r2, [pc, #184]	; (8013b5c <USB_SetTurnaroundTime+0x130>)
 8013aa4:	4293      	cmp	r3, r2
 8013aa6:	d802      	bhi.n	8013aae <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8013aa8:	230b      	movs	r3, #11
 8013aaa:	617b      	str	r3, [r7, #20]
 8013aac:	e036      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013aae:	68bb      	ldr	r3, [r7, #8]
 8013ab0:	4a2a      	ldr	r2, [pc, #168]	; (8013b5c <USB_SetTurnaroundTime+0x130>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d906      	bls.n	8013ac4 <USB_SetTurnaroundTime+0x98>
 8013ab6:	68bb      	ldr	r3, [r7, #8]
 8013ab8:	4a29      	ldr	r2, [pc, #164]	; (8013b60 <USB_SetTurnaroundTime+0x134>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d802      	bhi.n	8013ac4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8013abe:	230a      	movs	r3, #10
 8013ac0:	617b      	str	r3, [r7, #20]
 8013ac2:	e02b      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8013ac4:	68bb      	ldr	r3, [r7, #8]
 8013ac6:	4a26      	ldr	r2, [pc, #152]	; (8013b60 <USB_SetTurnaroundTime+0x134>)
 8013ac8:	4293      	cmp	r3, r2
 8013aca:	d906      	bls.n	8013ada <USB_SetTurnaroundTime+0xae>
 8013acc:	68bb      	ldr	r3, [r7, #8]
 8013ace:	4a25      	ldr	r2, [pc, #148]	; (8013b64 <USB_SetTurnaroundTime+0x138>)
 8013ad0:	4293      	cmp	r3, r2
 8013ad2:	d202      	bcs.n	8013ada <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8013ad4:	2309      	movs	r3, #9
 8013ad6:	617b      	str	r3, [r7, #20]
 8013ad8:	e020      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	4a21      	ldr	r2, [pc, #132]	; (8013b64 <USB_SetTurnaroundTime+0x138>)
 8013ade:	4293      	cmp	r3, r2
 8013ae0:	d306      	bcc.n	8013af0 <USB_SetTurnaroundTime+0xc4>
 8013ae2:	68bb      	ldr	r3, [r7, #8]
 8013ae4:	4a20      	ldr	r2, [pc, #128]	; (8013b68 <USB_SetTurnaroundTime+0x13c>)
 8013ae6:	4293      	cmp	r3, r2
 8013ae8:	d802      	bhi.n	8013af0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8013aea:	2308      	movs	r3, #8
 8013aec:	617b      	str	r3, [r7, #20]
 8013aee:	e015      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	4a1d      	ldr	r2, [pc, #116]	; (8013b68 <USB_SetTurnaroundTime+0x13c>)
 8013af4:	4293      	cmp	r3, r2
 8013af6:	d906      	bls.n	8013b06 <USB_SetTurnaroundTime+0xda>
 8013af8:	68bb      	ldr	r3, [r7, #8]
 8013afa:	4a1c      	ldr	r2, [pc, #112]	; (8013b6c <USB_SetTurnaroundTime+0x140>)
 8013afc:	4293      	cmp	r3, r2
 8013afe:	d202      	bcs.n	8013b06 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8013b00:	2307      	movs	r3, #7
 8013b02:	617b      	str	r3, [r7, #20]
 8013b04:	e00a      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013b06:	2306      	movs	r3, #6
 8013b08:	617b      	str	r3, [r7, #20]
 8013b0a:	e007      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013b0c:	79fb      	ldrb	r3, [r7, #7]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d102      	bne.n	8013b18 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8013b12:	2309      	movs	r3, #9
 8013b14:	617b      	str	r3, [r7, #20]
 8013b16:	e001      	b.n	8013b1c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013b18:	2309      	movs	r3, #9
 8013b1a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	68db      	ldr	r3, [r3, #12]
 8013b20:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	68da      	ldr	r2, [r3, #12]
 8013b2c:	697b      	ldr	r3, [r7, #20]
 8013b2e:	029b      	lsls	r3, r3, #10
 8013b30:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013b34:	431a      	orrs	r2, r3
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013b3a:	2300      	movs	r3, #0
}
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	371c      	adds	r7, #28
 8013b40:	46bd      	mov	sp, r7
 8013b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b46:	4770      	bx	lr
 8013b48:	00d8acbf 	.word	0x00d8acbf
 8013b4c:	00e4e1c0 	.word	0x00e4e1c0
 8013b50:	00f42400 	.word	0x00f42400
 8013b54:	01067380 	.word	0x01067380
 8013b58:	011a499f 	.word	0x011a499f
 8013b5c:	01312cff 	.word	0x01312cff
 8013b60:	014ca43f 	.word	0x014ca43f
 8013b64:	016e3600 	.word	0x016e3600
 8013b68:	01a6ab1f 	.word	0x01a6ab1f
 8013b6c:	01e84800 	.word	0x01e84800

08013b70 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b70:	b480      	push	{r7}
 8013b72:	b083      	sub	sp, #12
 8013b74:	af00      	add	r7, sp, #0
 8013b76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	689b      	ldr	r3, [r3, #8]
 8013b7c:	f043 0201 	orr.w	r2, r3, #1
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013b84:	2300      	movs	r3, #0
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	370c      	adds	r7, #12
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b90:	4770      	bx	lr

08013b92 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8013b92:	b480      	push	{r7}
 8013b94:	b083      	sub	sp, #12
 8013b96:	af00      	add	r7, sp, #0
 8013b98:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013b9a:	687b      	ldr	r3, [r7, #4]
 8013b9c:	689b      	ldr	r3, [r3, #8]
 8013b9e:	f023 0201 	bic.w	r2, r3, #1
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013ba6:	2300      	movs	r3, #0
}
 8013ba8:	4618      	mov	r0, r3
 8013baa:	370c      	adds	r7, #12
 8013bac:	46bd      	mov	sp, r7
 8013bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bb2:	4770      	bx	lr

08013bb4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b082      	sub	sp, #8
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
 8013bbc:	460b      	mov	r3, r1
 8013bbe:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	68db      	ldr	r3, [r3, #12]
 8013bc4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8013bc8:	687b      	ldr	r3, [r7, #4]
 8013bca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8013bcc:	78fb      	ldrb	r3, [r7, #3]
 8013bce:	2b01      	cmp	r3, #1
 8013bd0:	d106      	bne.n	8013be0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	68db      	ldr	r3, [r3, #12]
 8013bd6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	60da      	str	r2, [r3, #12]
 8013bde:	e00b      	b.n	8013bf8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8013be0:	78fb      	ldrb	r3, [r7, #3]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d106      	bne.n	8013bf4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	60da      	str	r2, [r3, #12]
 8013bf2:	e001      	b.n	8013bf8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8013bf4:	2301      	movs	r3, #1
 8013bf6:	e003      	b.n	8013c00 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8013bf8:	2032      	movs	r0, #50	; 0x32
 8013bfa:	f7f9 fe3d 	bl	800d878 <HAL_Delay>

  return HAL_OK;
 8013bfe:	2300      	movs	r3, #0
}
 8013c00:	4618      	mov	r0, r3
 8013c02:	3708      	adds	r7, #8
 8013c04:	46bd      	mov	sp, r7
 8013c06:	bd80      	pop	{r7, pc}

08013c08 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013c08:	b084      	sub	sp, #16
 8013c0a:	b580      	push	{r7, lr}
 8013c0c:	b086      	sub	sp, #24
 8013c0e:	af00      	add	r7, sp, #0
 8013c10:	6078      	str	r0, [r7, #4]
 8013c12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013c16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013c22:	2300      	movs	r3, #0
 8013c24:	613b      	str	r3, [r7, #16]
 8013c26:	e009      	b.n	8013c3c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013c28:	687a      	ldr	r2, [r7, #4]
 8013c2a:	693b      	ldr	r3, [r7, #16]
 8013c2c:	3340      	adds	r3, #64	; 0x40
 8013c2e:	009b      	lsls	r3, r3, #2
 8013c30:	4413      	add	r3, r2
 8013c32:	2200      	movs	r2, #0
 8013c34:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013c36:	693b      	ldr	r3, [r7, #16]
 8013c38:	3301      	adds	r3, #1
 8013c3a:	613b      	str	r3, [r7, #16]
 8013c3c:	693b      	ldr	r3, [r7, #16]
 8013c3e:	2b0e      	cmp	r3, #14
 8013c40:	d9f2      	bls.n	8013c28 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d11c      	bne.n	8013c82 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013c48:	68fb      	ldr	r3, [r7, #12]
 8013c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	68fa      	ldr	r2, [r7, #12]
 8013c52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013c56:	f043 0302 	orr.w	r3, r3, #2
 8013c5a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c60:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8013c68:	687b      	ldr	r3, [r7, #4]
 8013c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c6c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c78:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8013c7c:	687b      	ldr	r3, [r7, #4]
 8013c7e:	639a      	str	r2, [r3, #56]	; 0x38
 8013c80:	e00b      	b.n	8013c9a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c86:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c92:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013ca0:	461a      	mov	r2, r3
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cac:	4619      	mov	r1, r3
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cb4:	461a      	mov	r2, r3
 8013cb6:	680b      	ldr	r3, [r1, #0]
 8013cb8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cbc:	2b01      	cmp	r3, #1
 8013cbe:	d10c      	bne.n	8013cda <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cc2:	2b00      	cmp	r3, #0
 8013cc4:	d104      	bne.n	8013cd0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013cc6:	2100      	movs	r1, #0
 8013cc8:	6878      	ldr	r0, [r7, #4]
 8013cca:	f000 f949 	bl	8013f60 <USB_SetDevSpeed>
 8013cce:	e008      	b.n	8013ce2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013cd0:	2101      	movs	r1, #1
 8013cd2:	6878      	ldr	r0, [r7, #4]
 8013cd4:	f000 f944 	bl	8013f60 <USB_SetDevSpeed>
 8013cd8:	e003      	b.n	8013ce2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8013cda:	2103      	movs	r1, #3
 8013cdc:	6878      	ldr	r0, [r7, #4]
 8013cde:	f000 f93f 	bl	8013f60 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013ce2:	2110      	movs	r1, #16
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 f8f3 	bl	8013ed0 <USB_FlushTxFifo>
 8013cea:	4603      	mov	r3, r0
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d001      	beq.n	8013cf4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013cf0:	2301      	movs	r3, #1
 8013cf2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013cf4:	6878      	ldr	r0, [r7, #4]
 8013cf6:	f000 f911 	bl	8013f1c <USB_FlushRxFifo>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d001      	beq.n	8013d04 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013d00:	2301      	movs	r3, #1
 8013d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d0a:	461a      	mov	r2, r3
 8013d0c:	2300      	movs	r3, #0
 8013d0e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d16:	461a      	mov	r2, r3
 8013d18:	2300      	movs	r3, #0
 8013d1a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d22:	461a      	mov	r2, r3
 8013d24:	2300      	movs	r3, #0
 8013d26:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013d28:	2300      	movs	r3, #0
 8013d2a:	613b      	str	r3, [r7, #16]
 8013d2c:	e043      	b.n	8013db6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013d2e:	693b      	ldr	r3, [r7, #16]
 8013d30:	015a      	lsls	r2, r3, #5
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	4413      	add	r3, r2
 8013d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d44:	d118      	bne.n	8013d78 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013d46:	693b      	ldr	r3, [r7, #16]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d10a      	bne.n	8013d62 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013d4c:	693b      	ldr	r3, [r7, #16]
 8013d4e:	015a      	lsls	r2, r3, #5
 8013d50:	68fb      	ldr	r3, [r7, #12]
 8013d52:	4413      	add	r3, r2
 8013d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d58:	461a      	mov	r2, r3
 8013d5a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013d5e:	6013      	str	r3, [r2, #0]
 8013d60:	e013      	b.n	8013d8a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013d62:	693b      	ldr	r3, [r7, #16]
 8013d64:	015a      	lsls	r2, r3, #5
 8013d66:	68fb      	ldr	r3, [r7, #12]
 8013d68:	4413      	add	r3, r2
 8013d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d6e:	461a      	mov	r2, r3
 8013d70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013d74:	6013      	str	r3, [r2, #0]
 8013d76:	e008      	b.n	8013d8a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8013d78:	693b      	ldr	r3, [r7, #16]
 8013d7a:	015a      	lsls	r2, r3, #5
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	4413      	add	r3, r2
 8013d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d84:	461a      	mov	r2, r3
 8013d86:	2300      	movs	r3, #0
 8013d88:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8013d8a:	693b      	ldr	r3, [r7, #16]
 8013d8c:	015a      	lsls	r2, r3, #5
 8013d8e:	68fb      	ldr	r3, [r7, #12]
 8013d90:	4413      	add	r3, r2
 8013d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d96:	461a      	mov	r2, r3
 8013d98:	2300      	movs	r3, #0
 8013d9a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8013d9c:	693b      	ldr	r3, [r7, #16]
 8013d9e:	015a      	lsls	r2, r3, #5
 8013da0:	68fb      	ldr	r3, [r7, #12]
 8013da2:	4413      	add	r3, r2
 8013da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013da8:	461a      	mov	r2, r3
 8013daa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013dae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013db0:	693b      	ldr	r3, [r7, #16]
 8013db2:	3301      	adds	r3, #1
 8013db4:	613b      	str	r3, [r7, #16]
 8013db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013db8:	693a      	ldr	r2, [r7, #16]
 8013dba:	429a      	cmp	r2, r3
 8013dbc:	d3b7      	bcc.n	8013d2e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013dbe:	2300      	movs	r3, #0
 8013dc0:	613b      	str	r3, [r7, #16]
 8013dc2:	e043      	b.n	8013e4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013dc4:	693b      	ldr	r3, [r7, #16]
 8013dc6:	015a      	lsls	r2, r3, #5
 8013dc8:	68fb      	ldr	r3, [r7, #12]
 8013dca:	4413      	add	r3, r2
 8013dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013dd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013dda:	d118      	bne.n	8013e0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8013ddc:	693b      	ldr	r3, [r7, #16]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d10a      	bne.n	8013df8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013de2:	693b      	ldr	r3, [r7, #16]
 8013de4:	015a      	lsls	r2, r3, #5
 8013de6:	68fb      	ldr	r3, [r7, #12]
 8013de8:	4413      	add	r3, r2
 8013dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dee:	461a      	mov	r2, r3
 8013df0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013df4:	6013      	str	r3, [r2, #0]
 8013df6:	e013      	b.n	8013e20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013df8:	693b      	ldr	r3, [r7, #16]
 8013dfa:	015a      	lsls	r2, r3, #5
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	4413      	add	r3, r2
 8013e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e04:	461a      	mov	r2, r3
 8013e06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8013e0a:	6013      	str	r3, [r2, #0]
 8013e0c:	e008      	b.n	8013e20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013e0e:	693b      	ldr	r3, [r7, #16]
 8013e10:	015a      	lsls	r2, r3, #5
 8013e12:	68fb      	ldr	r3, [r7, #12]
 8013e14:	4413      	add	r3, r2
 8013e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e1a:	461a      	mov	r2, r3
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013e20:	693b      	ldr	r3, [r7, #16]
 8013e22:	015a      	lsls	r2, r3, #5
 8013e24:	68fb      	ldr	r3, [r7, #12]
 8013e26:	4413      	add	r3, r2
 8013e28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e2c:	461a      	mov	r2, r3
 8013e2e:	2300      	movs	r3, #0
 8013e30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	015a      	lsls	r2, r3, #5
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	4413      	add	r3, r2
 8013e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013e3e:	461a      	mov	r2, r3
 8013e40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013e44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	3301      	adds	r3, #1
 8013e4a:	613b      	str	r3, [r7, #16]
 8013e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4e:	693a      	ldr	r2, [r7, #16]
 8013e50:	429a      	cmp	r2, r3
 8013e52:	d3b7      	bcc.n	8013dc4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013e54:	68fb      	ldr	r3, [r7, #12]
 8013e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013e5a:	691b      	ldr	r3, [r3, #16]
 8013e5c:	68fa      	ldr	r2, [r7, #12]
 8013e5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013e62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8013e66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8013e74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8013e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d105      	bne.n	8013e88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8013e7c:	687b      	ldr	r3, [r7, #4]
 8013e7e:	699b      	ldr	r3, [r3, #24]
 8013e80:	f043 0210 	orr.w	r2, r3, #16
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	699a      	ldr	r2, [r3, #24]
 8013e8c:	4b0f      	ldr	r3, [pc, #60]	; (8013ecc <USB_DevInit+0x2c4>)
 8013e8e:	4313      	orrs	r3, r2
 8013e90:	687a      	ldr	r2, [r7, #4]
 8013e92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8013e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013e96:	2b00      	cmp	r3, #0
 8013e98:	d005      	beq.n	8013ea6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	699b      	ldr	r3, [r3, #24]
 8013e9e:	f043 0208 	orr.w	r2, r3, #8
 8013ea2:	687b      	ldr	r3, [r7, #4]
 8013ea4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8013ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ea8:	2b01      	cmp	r3, #1
 8013eaa:	d107      	bne.n	8013ebc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	699b      	ldr	r3, [r3, #24]
 8013eb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013eb4:	f043 0304 	orr.w	r3, r3, #4
 8013eb8:	687a      	ldr	r2, [r7, #4]
 8013eba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8013ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ebe:	4618      	mov	r0, r3
 8013ec0:	3718      	adds	r7, #24
 8013ec2:	46bd      	mov	sp, r7
 8013ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013ec8:	b004      	add	sp, #16
 8013eca:	4770      	bx	lr
 8013ecc:	803c3800 	.word	0x803c3800

08013ed0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013ed0:	b480      	push	{r7}
 8013ed2:	b085      	sub	sp, #20
 8013ed4:	af00      	add	r7, sp, #0
 8013ed6:	6078      	str	r0, [r7, #4]
 8013ed8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8013eda:	2300      	movs	r3, #0
 8013edc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013ede:	683b      	ldr	r3, [r7, #0]
 8013ee0:	019b      	lsls	r3, r3, #6
 8013ee2:	f043 0220 	orr.w	r2, r3, #32
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	3301      	adds	r3, #1
 8013eee:	60fb      	str	r3, [r7, #12]
 8013ef0:	68fb      	ldr	r3, [r7, #12]
 8013ef2:	4a09      	ldr	r2, [pc, #36]	; (8013f18 <USB_FlushTxFifo+0x48>)
 8013ef4:	4293      	cmp	r3, r2
 8013ef6:	d901      	bls.n	8013efc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8013ef8:	2303      	movs	r3, #3
 8013efa:	e006      	b.n	8013f0a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	691b      	ldr	r3, [r3, #16]
 8013f00:	f003 0320 	and.w	r3, r3, #32
 8013f04:	2b20      	cmp	r3, #32
 8013f06:	d0f0      	beq.n	8013eea <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8013f08:	2300      	movs	r3, #0
}
 8013f0a:	4618      	mov	r0, r3
 8013f0c:	3714      	adds	r7, #20
 8013f0e:	46bd      	mov	sp, r7
 8013f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f14:	4770      	bx	lr
 8013f16:	bf00      	nop
 8013f18:	00030d40 	.word	0x00030d40

08013f1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013f1c:	b480      	push	{r7}
 8013f1e:	b085      	sub	sp, #20
 8013f20:	af00      	add	r7, sp, #0
 8013f22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8013f24:	2300      	movs	r3, #0
 8013f26:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2210      	movs	r2, #16
 8013f2c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8013f2e:	68fb      	ldr	r3, [r7, #12]
 8013f30:	3301      	adds	r3, #1
 8013f32:	60fb      	str	r3, [r7, #12]
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	4a09      	ldr	r2, [pc, #36]	; (8013f5c <USB_FlushRxFifo+0x40>)
 8013f38:	4293      	cmp	r3, r2
 8013f3a:	d901      	bls.n	8013f40 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8013f3c:	2303      	movs	r3, #3
 8013f3e:	e006      	b.n	8013f4e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	691b      	ldr	r3, [r3, #16]
 8013f44:	f003 0310 	and.w	r3, r3, #16
 8013f48:	2b10      	cmp	r3, #16
 8013f4a:	d0f0      	beq.n	8013f2e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8013f4c:	2300      	movs	r3, #0
}
 8013f4e:	4618      	mov	r0, r3
 8013f50:	3714      	adds	r7, #20
 8013f52:	46bd      	mov	sp, r7
 8013f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f58:	4770      	bx	lr
 8013f5a:	bf00      	nop
 8013f5c:	00030d40 	.word	0x00030d40

08013f60 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013f60:	b480      	push	{r7}
 8013f62:	b085      	sub	sp, #20
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
 8013f68:	460b      	mov	r3, r1
 8013f6a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013f76:	681a      	ldr	r2, [r3, #0]
 8013f78:	78fb      	ldrb	r3, [r7, #3]
 8013f7a:	68f9      	ldr	r1, [r7, #12]
 8013f7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013f80:	4313      	orrs	r3, r2
 8013f82:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013f84:	2300      	movs	r3, #0
}
 8013f86:	4618      	mov	r0, r3
 8013f88:	3714      	adds	r7, #20
 8013f8a:	46bd      	mov	sp, r7
 8013f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f90:	4770      	bx	lr

08013f92 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013f92:	b480      	push	{r7}
 8013f94:	b087      	sub	sp, #28
 8013f96:	af00      	add	r7, sp, #0
 8013f98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fa4:	689b      	ldr	r3, [r3, #8]
 8013fa6:	f003 0306 	and.w	r3, r3, #6
 8013faa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d102      	bne.n	8013fb8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	75fb      	strb	r3, [r7, #23]
 8013fb6:	e00a      	b.n	8013fce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2b02      	cmp	r3, #2
 8013fbc:	d002      	beq.n	8013fc4 <USB_GetDevSpeed+0x32>
 8013fbe:	68fb      	ldr	r3, [r7, #12]
 8013fc0:	2b06      	cmp	r3, #6
 8013fc2:	d102      	bne.n	8013fca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013fc4:	2302      	movs	r3, #2
 8013fc6:	75fb      	strb	r3, [r7, #23]
 8013fc8:	e001      	b.n	8013fce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013fca:	230f      	movs	r3, #15
 8013fcc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013fce:	7dfb      	ldrb	r3, [r7, #23]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	371c      	adds	r7, #28
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fda:	4770      	bx	lr

08013fdc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013fdc:	b480      	push	{r7}
 8013fde:	b085      	sub	sp, #20
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	6078      	str	r0, [r7, #4]
 8013fe4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	781b      	ldrb	r3, [r3, #0]
 8013fee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013ff0:	683b      	ldr	r3, [r7, #0]
 8013ff2:	785b      	ldrb	r3, [r3, #1]
 8013ff4:	2b01      	cmp	r3, #1
 8013ff6:	d13a      	bne.n	801406e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013ff8:	68fb      	ldr	r3, [r7, #12]
 8013ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013ffe:	69da      	ldr	r2, [r3, #28]
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	f003 030f 	and.w	r3, r3, #15
 8014008:	2101      	movs	r1, #1
 801400a:	fa01 f303 	lsl.w	r3, r1, r3
 801400e:	b29b      	uxth	r3, r3
 8014010:	68f9      	ldr	r1, [r7, #12]
 8014012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014016:	4313      	orrs	r3, r2
 8014018:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801401a:	68bb      	ldr	r3, [r7, #8]
 801401c:	015a      	lsls	r2, r3, #5
 801401e:	68fb      	ldr	r3, [r7, #12]
 8014020:	4413      	add	r3, r2
 8014022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801402c:	2b00      	cmp	r3, #0
 801402e:	d155      	bne.n	80140dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014030:	68bb      	ldr	r3, [r7, #8]
 8014032:	015a      	lsls	r2, r3, #5
 8014034:	68fb      	ldr	r3, [r7, #12]
 8014036:	4413      	add	r3, r2
 8014038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801403c:	681a      	ldr	r2, [r3, #0]
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	689b      	ldr	r3, [r3, #8]
 8014042:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8014046:	683b      	ldr	r3, [r7, #0]
 8014048:	78db      	ldrb	r3, [r3, #3]
 801404a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801404c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801404e:	68bb      	ldr	r3, [r7, #8]
 8014050:	059b      	lsls	r3, r3, #22
 8014052:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8014054:	4313      	orrs	r3, r2
 8014056:	68ba      	ldr	r2, [r7, #8]
 8014058:	0151      	lsls	r1, r2, #5
 801405a:	68fa      	ldr	r2, [r7, #12]
 801405c:	440a      	add	r2, r1
 801405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014066:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 801406a:	6013      	str	r3, [r2, #0]
 801406c:	e036      	b.n	80140dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014074:	69da      	ldr	r2, [r3, #28]
 8014076:	683b      	ldr	r3, [r7, #0]
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	f003 030f 	and.w	r3, r3, #15
 801407e:	2101      	movs	r1, #1
 8014080:	fa01 f303 	lsl.w	r3, r1, r3
 8014084:	041b      	lsls	r3, r3, #16
 8014086:	68f9      	ldr	r1, [r7, #12]
 8014088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801408c:	4313      	orrs	r3, r2
 801408e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	015a      	lsls	r2, r3, #5
 8014094:	68fb      	ldr	r3, [r7, #12]
 8014096:	4413      	add	r3, r2
 8014098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d11a      	bne.n	80140dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140a6:	68bb      	ldr	r3, [r7, #8]
 80140a8:	015a      	lsls	r2, r3, #5
 80140aa:	68fb      	ldr	r3, [r7, #12]
 80140ac:	4413      	add	r3, r2
 80140ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80140b2:	681a      	ldr	r2, [r3, #0]
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	689b      	ldr	r3, [r3, #8]
 80140b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80140bc:	683b      	ldr	r3, [r7, #0]
 80140be:	78db      	ldrb	r3, [r3, #3]
 80140c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80140c2:	430b      	orrs	r3, r1
 80140c4:	4313      	orrs	r3, r2
 80140c6:	68ba      	ldr	r2, [r7, #8]
 80140c8:	0151      	lsls	r1, r2, #5
 80140ca:	68fa      	ldr	r2, [r7, #12]
 80140cc:	440a      	add	r2, r1
 80140ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80140d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80140da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80140dc:	2300      	movs	r3, #0
}
 80140de:	4618      	mov	r0, r3
 80140e0:	3714      	adds	r7, #20
 80140e2:	46bd      	mov	sp, r7
 80140e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140e8:	4770      	bx	lr
	...

080140ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80140ec:	b480      	push	{r7}
 80140ee:	b085      	sub	sp, #20
 80140f0:	af00      	add	r7, sp, #0
 80140f2:	6078      	str	r0, [r7, #4]
 80140f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80140fa:	683b      	ldr	r3, [r7, #0]
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	785b      	ldrb	r3, [r3, #1]
 8014104:	2b01      	cmp	r3, #1
 8014106:	d161      	bne.n	80141cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8014108:	68bb      	ldr	r3, [r7, #8]
 801410a:	015a      	lsls	r2, r3, #5
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	4413      	add	r3, r2
 8014110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014114:	681b      	ldr	r3, [r3, #0]
 8014116:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801411a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801411e:	d11f      	bne.n	8014160 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	015a      	lsls	r2, r3, #5
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	4413      	add	r3, r2
 8014128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801412c:	681b      	ldr	r3, [r3, #0]
 801412e:	68ba      	ldr	r2, [r7, #8]
 8014130:	0151      	lsls	r1, r2, #5
 8014132:	68fa      	ldr	r2, [r7, #12]
 8014134:	440a      	add	r2, r1
 8014136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801413a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801413e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8014140:	68bb      	ldr	r3, [r7, #8]
 8014142:	015a      	lsls	r2, r3, #5
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	4413      	add	r3, r2
 8014148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	68ba      	ldr	r2, [r7, #8]
 8014150:	0151      	lsls	r1, r2, #5
 8014152:	68fa      	ldr	r2, [r7, #12]
 8014154:	440a      	add	r2, r1
 8014156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801415a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801415e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014166:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	f003 030f 	and.w	r3, r3, #15
 8014170:	2101      	movs	r1, #1
 8014172:	fa01 f303 	lsl.w	r3, r1, r3
 8014176:	b29b      	uxth	r3, r3
 8014178:	43db      	mvns	r3, r3
 801417a:	68f9      	ldr	r1, [r7, #12]
 801417c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014180:	4013      	ands	r3, r2
 8014182:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8014184:	68fb      	ldr	r3, [r7, #12]
 8014186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801418a:	69da      	ldr	r2, [r3, #28]
 801418c:	683b      	ldr	r3, [r7, #0]
 801418e:	781b      	ldrb	r3, [r3, #0]
 8014190:	f003 030f 	and.w	r3, r3, #15
 8014194:	2101      	movs	r1, #1
 8014196:	fa01 f303 	lsl.w	r3, r1, r3
 801419a:	b29b      	uxth	r3, r3
 801419c:	43db      	mvns	r3, r3
 801419e:	68f9      	ldr	r1, [r7, #12]
 80141a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80141a4:	4013      	ands	r3, r2
 80141a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	015a      	lsls	r2, r3, #5
 80141ac:	68fb      	ldr	r3, [r7, #12]
 80141ae:	4413      	add	r3, r2
 80141b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141b4:	681a      	ldr	r2, [r3, #0]
 80141b6:	68bb      	ldr	r3, [r7, #8]
 80141b8:	0159      	lsls	r1, r3, #5
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	440b      	add	r3, r1
 80141be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80141c2:	4619      	mov	r1, r3
 80141c4:	4b35      	ldr	r3, [pc, #212]	; (801429c <USB_DeactivateEndpoint+0x1b0>)
 80141c6:	4013      	ands	r3, r2
 80141c8:	600b      	str	r3, [r1, #0]
 80141ca:	e060      	b.n	801428e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80141cc:	68bb      	ldr	r3, [r7, #8]
 80141ce:	015a      	lsls	r2, r3, #5
 80141d0:	68fb      	ldr	r3, [r7, #12]
 80141d2:	4413      	add	r3, r2
 80141d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80141de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80141e2:	d11f      	bne.n	8014224 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80141e4:	68bb      	ldr	r3, [r7, #8]
 80141e6:	015a      	lsls	r2, r3, #5
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	4413      	add	r3, r2
 80141ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	68ba      	ldr	r2, [r7, #8]
 80141f4:	0151      	lsls	r1, r2, #5
 80141f6:	68fa      	ldr	r2, [r7, #12]
 80141f8:	440a      	add	r2, r1
 80141fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80141fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8014202:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8014204:	68bb      	ldr	r3, [r7, #8]
 8014206:	015a      	lsls	r2, r3, #5
 8014208:	68fb      	ldr	r3, [r7, #12]
 801420a:	4413      	add	r3, r2
 801420c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	68ba      	ldr	r2, [r7, #8]
 8014214:	0151      	lsls	r1, r2, #5
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	440a      	add	r2, r1
 801421a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801421e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014222:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801422a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801422c:	683b      	ldr	r3, [r7, #0]
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	f003 030f 	and.w	r3, r3, #15
 8014234:	2101      	movs	r1, #1
 8014236:	fa01 f303 	lsl.w	r3, r1, r3
 801423a:	041b      	lsls	r3, r3, #16
 801423c:	43db      	mvns	r3, r3
 801423e:	68f9      	ldr	r1, [r7, #12]
 8014240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014244:	4013      	ands	r3, r2
 8014246:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801424e:	69da      	ldr	r2, [r3, #28]
 8014250:	683b      	ldr	r3, [r7, #0]
 8014252:	781b      	ldrb	r3, [r3, #0]
 8014254:	f003 030f 	and.w	r3, r3, #15
 8014258:	2101      	movs	r1, #1
 801425a:	fa01 f303 	lsl.w	r3, r1, r3
 801425e:	041b      	lsls	r3, r3, #16
 8014260:	43db      	mvns	r3, r3
 8014262:	68f9      	ldr	r1, [r7, #12]
 8014264:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014268:	4013      	ands	r3, r2
 801426a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	015a      	lsls	r2, r3, #5
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	4413      	add	r3, r2
 8014274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014278:	681a      	ldr	r2, [r3, #0]
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	0159      	lsls	r1, r3, #5
 801427e:	68fb      	ldr	r3, [r7, #12]
 8014280:	440b      	add	r3, r1
 8014282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014286:	4619      	mov	r1, r3
 8014288:	4b05      	ldr	r3, [pc, #20]	; (80142a0 <USB_DeactivateEndpoint+0x1b4>)
 801428a:	4013      	ands	r3, r2
 801428c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801428e:	2300      	movs	r3, #0
}
 8014290:	4618      	mov	r0, r3
 8014292:	3714      	adds	r7, #20
 8014294:	46bd      	mov	sp, r7
 8014296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801429a:	4770      	bx	lr
 801429c:	ec337800 	.word	0xec337800
 80142a0:	eff37800 	.word	0xeff37800

080142a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80142a4:	b580      	push	{r7, lr}
 80142a6:	b08a      	sub	sp, #40	; 0x28
 80142a8:	af02      	add	r7, sp, #8
 80142aa:	60f8      	str	r0, [r7, #12]
 80142ac:	60b9      	str	r1, [r7, #8]
 80142ae:	4613      	mov	r3, r2
 80142b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80142b6:	68bb      	ldr	r3, [r7, #8]
 80142b8:	781b      	ldrb	r3, [r3, #0]
 80142ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	785b      	ldrb	r3, [r3, #1]
 80142c0:	2b01      	cmp	r3, #1
 80142c2:	f040 815c 	bne.w	801457e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142c6:	68bb      	ldr	r3, [r7, #8]
 80142c8:	695b      	ldr	r3, [r3, #20]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d132      	bne.n	8014334 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142ce:	69bb      	ldr	r3, [r7, #24]
 80142d0:	015a      	lsls	r2, r3, #5
 80142d2:	69fb      	ldr	r3, [r7, #28]
 80142d4:	4413      	add	r3, r2
 80142d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142da:	691b      	ldr	r3, [r3, #16]
 80142dc:	69ba      	ldr	r2, [r7, #24]
 80142de:	0151      	lsls	r1, r2, #5
 80142e0:	69fa      	ldr	r2, [r7, #28]
 80142e2:	440a      	add	r2, r1
 80142e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80142ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80142f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142f2:	69bb      	ldr	r3, [r7, #24]
 80142f4:	015a      	lsls	r2, r3, #5
 80142f6:	69fb      	ldr	r3, [r7, #28]
 80142f8:	4413      	add	r3, r2
 80142fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142fe:	691b      	ldr	r3, [r3, #16]
 8014300:	69ba      	ldr	r2, [r7, #24]
 8014302:	0151      	lsls	r1, r2, #5
 8014304:	69fa      	ldr	r2, [r7, #28]
 8014306:	440a      	add	r2, r1
 8014308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801430c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014310:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014312:	69bb      	ldr	r3, [r7, #24]
 8014314:	015a      	lsls	r2, r3, #5
 8014316:	69fb      	ldr	r3, [r7, #28]
 8014318:	4413      	add	r3, r2
 801431a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801431e:	691b      	ldr	r3, [r3, #16]
 8014320:	69ba      	ldr	r2, [r7, #24]
 8014322:	0151      	lsls	r1, r2, #5
 8014324:	69fa      	ldr	r2, [r7, #28]
 8014326:	440a      	add	r2, r1
 8014328:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801432c:	0cdb      	lsrs	r3, r3, #19
 801432e:	04db      	lsls	r3, r3, #19
 8014330:	6113      	str	r3, [r2, #16]
 8014332:	e074      	b.n	801441e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8014334:	69bb      	ldr	r3, [r7, #24]
 8014336:	015a      	lsls	r2, r3, #5
 8014338:	69fb      	ldr	r3, [r7, #28]
 801433a:	4413      	add	r3, r2
 801433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014340:	691b      	ldr	r3, [r3, #16]
 8014342:	69ba      	ldr	r2, [r7, #24]
 8014344:	0151      	lsls	r1, r2, #5
 8014346:	69fa      	ldr	r2, [r7, #28]
 8014348:	440a      	add	r2, r1
 801434a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801434e:	0cdb      	lsrs	r3, r3, #19
 8014350:	04db      	lsls	r3, r3, #19
 8014352:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	015a      	lsls	r2, r3, #5
 8014358:	69fb      	ldr	r3, [r7, #28]
 801435a:	4413      	add	r3, r2
 801435c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014360:	691b      	ldr	r3, [r3, #16]
 8014362:	69ba      	ldr	r2, [r7, #24]
 8014364:	0151      	lsls	r1, r2, #5
 8014366:	69fa      	ldr	r2, [r7, #28]
 8014368:	440a      	add	r2, r1
 801436a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801436e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014372:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014376:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8014378:	69bb      	ldr	r3, [r7, #24]
 801437a:	015a      	lsls	r2, r3, #5
 801437c:	69fb      	ldr	r3, [r7, #28]
 801437e:	4413      	add	r3, r2
 8014380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014384:	691a      	ldr	r2, [r3, #16]
 8014386:	68bb      	ldr	r3, [r7, #8]
 8014388:	6959      	ldr	r1, [r3, #20]
 801438a:	68bb      	ldr	r3, [r7, #8]
 801438c:	689b      	ldr	r3, [r3, #8]
 801438e:	440b      	add	r3, r1
 8014390:	1e59      	subs	r1, r3, #1
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	689b      	ldr	r3, [r3, #8]
 8014396:	fbb1 f3f3 	udiv	r3, r1, r3
 801439a:	04d9      	lsls	r1, r3, #19
 801439c:	4b9d      	ldr	r3, [pc, #628]	; (8014614 <USB_EPStartXfer+0x370>)
 801439e:	400b      	ands	r3, r1
 80143a0:	69b9      	ldr	r1, [r7, #24]
 80143a2:	0148      	lsls	r0, r1, #5
 80143a4:	69f9      	ldr	r1, [r7, #28]
 80143a6:	4401      	add	r1, r0
 80143a8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143ac:	4313      	orrs	r3, r2
 80143ae:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	015a      	lsls	r2, r3, #5
 80143b4:	69fb      	ldr	r3, [r7, #28]
 80143b6:	4413      	add	r3, r2
 80143b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143bc:	691a      	ldr	r2, [r3, #16]
 80143be:	68bb      	ldr	r3, [r7, #8]
 80143c0:	695b      	ldr	r3, [r3, #20]
 80143c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143c6:	69b9      	ldr	r1, [r7, #24]
 80143c8:	0148      	lsls	r0, r1, #5
 80143ca:	69f9      	ldr	r1, [r7, #28]
 80143cc:	4401      	add	r1, r0
 80143ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143d2:	4313      	orrs	r3, r2
 80143d4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80143d6:	68bb      	ldr	r3, [r7, #8]
 80143d8:	78db      	ldrb	r3, [r3, #3]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d11f      	bne.n	801441e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80143de:	69bb      	ldr	r3, [r7, #24]
 80143e0:	015a      	lsls	r2, r3, #5
 80143e2:	69fb      	ldr	r3, [r7, #28]
 80143e4:	4413      	add	r3, r2
 80143e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143ea:	691b      	ldr	r3, [r3, #16]
 80143ec:	69ba      	ldr	r2, [r7, #24]
 80143ee:	0151      	lsls	r1, r2, #5
 80143f0:	69fa      	ldr	r2, [r7, #28]
 80143f2:	440a      	add	r2, r1
 80143f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80143fc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80143fe:	69bb      	ldr	r3, [r7, #24]
 8014400:	015a      	lsls	r2, r3, #5
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	4413      	add	r3, r2
 8014406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801440a:	691b      	ldr	r3, [r3, #16]
 801440c:	69ba      	ldr	r2, [r7, #24]
 801440e:	0151      	lsls	r1, r2, #5
 8014410:	69fa      	ldr	r2, [r7, #28]
 8014412:	440a      	add	r2, r1
 8014414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014418:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801441c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801441e:	79fb      	ldrb	r3, [r7, #7]
 8014420:	2b01      	cmp	r3, #1
 8014422:	d14b      	bne.n	80144bc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014424:	68bb      	ldr	r3, [r7, #8]
 8014426:	691b      	ldr	r3, [r3, #16]
 8014428:	2b00      	cmp	r3, #0
 801442a:	d009      	beq.n	8014440 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801442c:	69bb      	ldr	r3, [r7, #24]
 801442e:	015a      	lsls	r2, r3, #5
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	4413      	add	r3, r2
 8014434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014438:	461a      	mov	r2, r3
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	691b      	ldr	r3, [r3, #16]
 801443e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8014440:	68bb      	ldr	r3, [r7, #8]
 8014442:	78db      	ldrb	r3, [r3, #3]
 8014444:	2b01      	cmp	r3, #1
 8014446:	d128      	bne.n	801449a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014448:	69fb      	ldr	r3, [r7, #28]
 801444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801444e:	689b      	ldr	r3, [r3, #8]
 8014450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014454:	2b00      	cmp	r3, #0
 8014456:	d110      	bne.n	801447a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	015a      	lsls	r2, r3, #5
 801445c:	69fb      	ldr	r3, [r7, #28]
 801445e:	4413      	add	r3, r2
 8014460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	69ba      	ldr	r2, [r7, #24]
 8014468:	0151      	lsls	r1, r2, #5
 801446a:	69fa      	ldr	r2, [r7, #28]
 801446c:	440a      	add	r2, r1
 801446e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014476:	6013      	str	r3, [r2, #0]
 8014478:	e00f      	b.n	801449a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801447a:	69bb      	ldr	r3, [r7, #24]
 801447c:	015a      	lsls	r2, r3, #5
 801447e:	69fb      	ldr	r3, [r7, #28]
 8014480:	4413      	add	r3, r2
 8014482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	69ba      	ldr	r2, [r7, #24]
 801448a:	0151      	lsls	r1, r2, #5
 801448c:	69fa      	ldr	r2, [r7, #28]
 801448e:	440a      	add	r2, r1
 8014490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014498:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	015a      	lsls	r2, r3, #5
 801449e:	69fb      	ldr	r3, [r7, #28]
 80144a0:	4413      	add	r3, r2
 80144a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	69ba      	ldr	r2, [r7, #24]
 80144aa:	0151      	lsls	r1, r2, #5
 80144ac:	69fa      	ldr	r2, [r7, #28]
 80144ae:	440a      	add	r2, r1
 80144b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144b8:	6013      	str	r3, [r2, #0]
 80144ba:	e12f      	b.n	801471c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	015a      	lsls	r2, r3, #5
 80144c0:	69fb      	ldr	r3, [r7, #28]
 80144c2:	4413      	add	r3, r2
 80144c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	69ba      	ldr	r2, [r7, #24]
 80144cc:	0151      	lsls	r1, r2, #5
 80144ce:	69fa      	ldr	r2, [r7, #28]
 80144d0:	440a      	add	r2, r1
 80144d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80144d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80144da:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80144dc:	68bb      	ldr	r3, [r7, #8]
 80144de:	78db      	ldrb	r3, [r3, #3]
 80144e0:	2b01      	cmp	r3, #1
 80144e2:	d015      	beq.n	8014510 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	695b      	ldr	r3, [r3, #20]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	f000 8117 	beq.w	801471c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80144ee:	69fb      	ldr	r3, [r7, #28]
 80144f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80144f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	781b      	ldrb	r3, [r3, #0]
 80144fa:	f003 030f 	and.w	r3, r3, #15
 80144fe:	2101      	movs	r1, #1
 8014500:	fa01 f303 	lsl.w	r3, r1, r3
 8014504:	69f9      	ldr	r1, [r7, #28]
 8014506:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801450a:	4313      	orrs	r3, r2
 801450c:	634b      	str	r3, [r1, #52]	; 0x34
 801450e:	e105      	b.n	801471c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014516:	689b      	ldr	r3, [r3, #8]
 8014518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801451c:	2b00      	cmp	r3, #0
 801451e:	d110      	bne.n	8014542 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014520:	69bb      	ldr	r3, [r7, #24]
 8014522:	015a      	lsls	r2, r3, #5
 8014524:	69fb      	ldr	r3, [r7, #28]
 8014526:	4413      	add	r3, r2
 8014528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	69ba      	ldr	r2, [r7, #24]
 8014530:	0151      	lsls	r1, r2, #5
 8014532:	69fa      	ldr	r2, [r7, #28]
 8014534:	440a      	add	r2, r1
 8014536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801453a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801453e:	6013      	str	r3, [r2, #0]
 8014540:	e00f      	b.n	8014562 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8014542:	69bb      	ldr	r3, [r7, #24]
 8014544:	015a      	lsls	r2, r3, #5
 8014546:	69fb      	ldr	r3, [r7, #28]
 8014548:	4413      	add	r3, r2
 801454a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	69ba      	ldr	r2, [r7, #24]
 8014552:	0151      	lsls	r1, r2, #5
 8014554:	69fa      	ldr	r2, [r7, #28]
 8014556:	440a      	add	r2, r1
 8014558:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801455c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014560:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8014562:	68bb      	ldr	r3, [r7, #8]
 8014564:	68d9      	ldr	r1, [r3, #12]
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	781a      	ldrb	r2, [r3, #0]
 801456a:	68bb      	ldr	r3, [r7, #8]
 801456c:	695b      	ldr	r3, [r3, #20]
 801456e:	b298      	uxth	r0, r3
 8014570:	79fb      	ldrb	r3, [r7, #7]
 8014572:	9300      	str	r3, [sp, #0]
 8014574:	4603      	mov	r3, r0
 8014576:	68f8      	ldr	r0, [r7, #12]
 8014578:	f000 fa2b 	bl	80149d2 <USB_WritePacket>
 801457c:	e0ce      	b.n	801471c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801457e:	69bb      	ldr	r3, [r7, #24]
 8014580:	015a      	lsls	r2, r3, #5
 8014582:	69fb      	ldr	r3, [r7, #28]
 8014584:	4413      	add	r3, r2
 8014586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801458a:	691b      	ldr	r3, [r3, #16]
 801458c:	69ba      	ldr	r2, [r7, #24]
 801458e:	0151      	lsls	r1, r2, #5
 8014590:	69fa      	ldr	r2, [r7, #28]
 8014592:	440a      	add	r2, r1
 8014594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014598:	0cdb      	lsrs	r3, r3, #19
 801459a:	04db      	lsls	r3, r3, #19
 801459c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801459e:	69bb      	ldr	r3, [r7, #24]
 80145a0:	015a      	lsls	r2, r3, #5
 80145a2:	69fb      	ldr	r3, [r7, #28]
 80145a4:	4413      	add	r3, r2
 80145a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145aa:	691b      	ldr	r3, [r3, #16]
 80145ac:	69ba      	ldr	r2, [r7, #24]
 80145ae:	0151      	lsls	r1, r2, #5
 80145b0:	69fa      	ldr	r2, [r7, #28]
 80145b2:	440a      	add	r2, r1
 80145b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80145b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80145bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80145c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80145c2:	68bb      	ldr	r3, [r7, #8]
 80145c4:	695b      	ldr	r3, [r3, #20]
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d126      	bne.n	8014618 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80145ca:	69bb      	ldr	r3, [r7, #24]
 80145cc:	015a      	lsls	r2, r3, #5
 80145ce:	69fb      	ldr	r3, [r7, #28]
 80145d0:	4413      	add	r3, r2
 80145d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145d6:	691a      	ldr	r2, [r3, #16]
 80145d8:	68bb      	ldr	r3, [r7, #8]
 80145da:	689b      	ldr	r3, [r3, #8]
 80145dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145e0:	69b9      	ldr	r1, [r7, #24]
 80145e2:	0148      	lsls	r0, r1, #5
 80145e4:	69f9      	ldr	r1, [r7, #28]
 80145e6:	4401      	add	r1, r0
 80145e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80145ec:	4313      	orrs	r3, r2
 80145ee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80145f0:	69bb      	ldr	r3, [r7, #24]
 80145f2:	015a      	lsls	r2, r3, #5
 80145f4:	69fb      	ldr	r3, [r7, #28]
 80145f6:	4413      	add	r3, r2
 80145f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80145fc:	691b      	ldr	r3, [r3, #16]
 80145fe:	69ba      	ldr	r2, [r7, #24]
 8014600:	0151      	lsls	r1, r2, #5
 8014602:	69fa      	ldr	r2, [r7, #28]
 8014604:	440a      	add	r2, r1
 8014606:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801460a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801460e:	6113      	str	r3, [r2, #16]
 8014610:	e036      	b.n	8014680 <USB_EPStartXfer+0x3dc>
 8014612:	bf00      	nop
 8014614:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014618:	68bb      	ldr	r3, [r7, #8]
 801461a:	695a      	ldr	r2, [r3, #20]
 801461c:	68bb      	ldr	r3, [r7, #8]
 801461e:	689b      	ldr	r3, [r3, #8]
 8014620:	4413      	add	r3, r2
 8014622:	1e5a      	subs	r2, r3, #1
 8014624:	68bb      	ldr	r3, [r7, #8]
 8014626:	689b      	ldr	r3, [r3, #8]
 8014628:	fbb2 f3f3 	udiv	r3, r2, r3
 801462c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801462e:	69bb      	ldr	r3, [r7, #24]
 8014630:	015a      	lsls	r2, r3, #5
 8014632:	69fb      	ldr	r3, [r7, #28]
 8014634:	4413      	add	r3, r2
 8014636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801463a:	691a      	ldr	r2, [r3, #16]
 801463c:	8afb      	ldrh	r3, [r7, #22]
 801463e:	04d9      	lsls	r1, r3, #19
 8014640:	4b39      	ldr	r3, [pc, #228]	; (8014728 <USB_EPStartXfer+0x484>)
 8014642:	400b      	ands	r3, r1
 8014644:	69b9      	ldr	r1, [r7, #24]
 8014646:	0148      	lsls	r0, r1, #5
 8014648:	69f9      	ldr	r1, [r7, #28]
 801464a:	4401      	add	r1, r0
 801464c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014650:	4313      	orrs	r3, r2
 8014652:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8014654:	69bb      	ldr	r3, [r7, #24]
 8014656:	015a      	lsls	r2, r3, #5
 8014658:	69fb      	ldr	r3, [r7, #28]
 801465a:	4413      	add	r3, r2
 801465c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014660:	691a      	ldr	r2, [r3, #16]
 8014662:	68bb      	ldr	r3, [r7, #8]
 8014664:	689b      	ldr	r3, [r3, #8]
 8014666:	8af9      	ldrh	r1, [r7, #22]
 8014668:	fb01 f303 	mul.w	r3, r1, r3
 801466c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014670:	69b9      	ldr	r1, [r7, #24]
 8014672:	0148      	lsls	r0, r1, #5
 8014674:	69f9      	ldr	r1, [r7, #28]
 8014676:	4401      	add	r1, r0
 8014678:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801467c:	4313      	orrs	r3, r2
 801467e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014680:	79fb      	ldrb	r3, [r7, #7]
 8014682:	2b01      	cmp	r3, #1
 8014684:	d10d      	bne.n	80146a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014686:	68bb      	ldr	r3, [r7, #8]
 8014688:	68db      	ldr	r3, [r3, #12]
 801468a:	2b00      	cmp	r3, #0
 801468c:	d009      	beq.n	80146a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801468e:	68bb      	ldr	r3, [r7, #8]
 8014690:	68d9      	ldr	r1, [r3, #12]
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	015a      	lsls	r2, r3, #5
 8014696:	69fb      	ldr	r3, [r7, #28]
 8014698:	4413      	add	r3, r2
 801469a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801469e:	460a      	mov	r2, r1
 80146a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80146a2:	68bb      	ldr	r3, [r7, #8]
 80146a4:	78db      	ldrb	r3, [r3, #3]
 80146a6:	2b01      	cmp	r3, #1
 80146a8:	d128      	bne.n	80146fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80146aa:	69fb      	ldr	r3, [r7, #28]
 80146ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80146b0:	689b      	ldr	r3, [r3, #8]
 80146b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80146b6:	2b00      	cmp	r3, #0
 80146b8:	d110      	bne.n	80146dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80146ba:	69bb      	ldr	r3, [r7, #24]
 80146bc:	015a      	lsls	r2, r3, #5
 80146be:	69fb      	ldr	r3, [r7, #28]
 80146c0:	4413      	add	r3, r2
 80146c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	69ba      	ldr	r2, [r7, #24]
 80146ca:	0151      	lsls	r1, r2, #5
 80146cc:	69fa      	ldr	r2, [r7, #28]
 80146ce:	440a      	add	r2, r1
 80146d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80146d8:	6013      	str	r3, [r2, #0]
 80146da:	e00f      	b.n	80146fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80146dc:	69bb      	ldr	r3, [r7, #24]
 80146de:	015a      	lsls	r2, r3, #5
 80146e0:	69fb      	ldr	r3, [r7, #28]
 80146e2:	4413      	add	r3, r2
 80146e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	69ba      	ldr	r2, [r7, #24]
 80146ec:	0151      	lsls	r1, r2, #5
 80146ee:	69fa      	ldr	r2, [r7, #28]
 80146f0:	440a      	add	r2, r1
 80146f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80146f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80146fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	015a      	lsls	r2, r3, #5
 8014700:	69fb      	ldr	r3, [r7, #28]
 8014702:	4413      	add	r3, r2
 8014704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	69ba      	ldr	r2, [r7, #24]
 801470c:	0151      	lsls	r1, r2, #5
 801470e:	69fa      	ldr	r2, [r7, #28]
 8014710:	440a      	add	r2, r1
 8014712:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014716:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801471a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801471c:	2300      	movs	r3, #0
}
 801471e:	4618      	mov	r0, r3
 8014720:	3720      	adds	r7, #32
 8014722:	46bd      	mov	sp, r7
 8014724:	bd80      	pop	{r7, pc}
 8014726:	bf00      	nop
 8014728:	1ff80000 	.word	0x1ff80000

0801472c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801472c:	b480      	push	{r7}
 801472e:	b087      	sub	sp, #28
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4613      	mov	r3, r2
 8014738:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	781b      	ldrb	r3, [r3, #0]
 8014742:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	785b      	ldrb	r3, [r3, #1]
 8014748:	2b01      	cmp	r3, #1
 801474a:	f040 80cd 	bne.w	80148e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801474e:	68bb      	ldr	r3, [r7, #8]
 8014750:	695b      	ldr	r3, [r3, #20]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d132      	bne.n	80147bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8014756:	693b      	ldr	r3, [r7, #16]
 8014758:	015a      	lsls	r2, r3, #5
 801475a:	697b      	ldr	r3, [r7, #20]
 801475c:	4413      	add	r3, r2
 801475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014762:	691b      	ldr	r3, [r3, #16]
 8014764:	693a      	ldr	r2, [r7, #16]
 8014766:	0151      	lsls	r1, r2, #5
 8014768:	697a      	ldr	r2, [r7, #20]
 801476a:	440a      	add	r2, r1
 801476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014770:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014774:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801477a:	693b      	ldr	r3, [r7, #16]
 801477c:	015a      	lsls	r2, r3, #5
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	4413      	add	r3, r2
 8014782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014786:	691b      	ldr	r3, [r3, #16]
 8014788:	693a      	ldr	r2, [r7, #16]
 801478a:	0151      	lsls	r1, r2, #5
 801478c:	697a      	ldr	r2, [r7, #20]
 801478e:	440a      	add	r2, r1
 8014790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014794:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014798:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801479a:	693b      	ldr	r3, [r7, #16]
 801479c:	015a      	lsls	r2, r3, #5
 801479e:	697b      	ldr	r3, [r7, #20]
 80147a0:	4413      	add	r3, r2
 80147a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147a6:	691b      	ldr	r3, [r3, #16]
 80147a8:	693a      	ldr	r2, [r7, #16]
 80147aa:	0151      	lsls	r1, r2, #5
 80147ac:	697a      	ldr	r2, [r7, #20]
 80147ae:	440a      	add	r2, r1
 80147b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147b4:	0cdb      	lsrs	r3, r3, #19
 80147b6:	04db      	lsls	r3, r3, #19
 80147b8:	6113      	str	r3, [r2, #16]
 80147ba:	e04e      	b.n	801485a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80147bc:	693b      	ldr	r3, [r7, #16]
 80147be:	015a      	lsls	r2, r3, #5
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	4413      	add	r3, r2
 80147c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147c8:	691b      	ldr	r3, [r3, #16]
 80147ca:	693a      	ldr	r2, [r7, #16]
 80147cc:	0151      	lsls	r1, r2, #5
 80147ce:	697a      	ldr	r2, [r7, #20]
 80147d0:	440a      	add	r2, r1
 80147d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147d6:	0cdb      	lsrs	r3, r3, #19
 80147d8:	04db      	lsls	r3, r3, #19
 80147da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80147dc:	693b      	ldr	r3, [r7, #16]
 80147de:	015a      	lsls	r2, r3, #5
 80147e0:	697b      	ldr	r3, [r7, #20]
 80147e2:	4413      	add	r3, r2
 80147e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	693a      	ldr	r2, [r7, #16]
 80147ec:	0151      	lsls	r1, r2, #5
 80147ee:	697a      	ldr	r2, [r7, #20]
 80147f0:	440a      	add	r2, r1
 80147f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80147f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80147fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80147fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014800:	68bb      	ldr	r3, [r7, #8]
 8014802:	695a      	ldr	r2, [r3, #20]
 8014804:	68bb      	ldr	r3, [r7, #8]
 8014806:	689b      	ldr	r3, [r3, #8]
 8014808:	429a      	cmp	r2, r3
 801480a:	d903      	bls.n	8014814 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801480c:	68bb      	ldr	r3, [r7, #8]
 801480e:	689a      	ldr	r2, [r3, #8]
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014814:	693b      	ldr	r3, [r7, #16]
 8014816:	015a      	lsls	r2, r3, #5
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	4413      	add	r3, r2
 801481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014820:	691b      	ldr	r3, [r3, #16]
 8014822:	693a      	ldr	r2, [r7, #16]
 8014824:	0151      	lsls	r1, r2, #5
 8014826:	697a      	ldr	r2, [r7, #20]
 8014828:	440a      	add	r2, r1
 801482a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801482e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8014834:	693b      	ldr	r3, [r7, #16]
 8014836:	015a      	lsls	r2, r3, #5
 8014838:	697b      	ldr	r3, [r7, #20]
 801483a:	4413      	add	r3, r2
 801483c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014840:	691a      	ldr	r2, [r3, #16]
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	695b      	ldr	r3, [r3, #20]
 8014846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801484a:	6939      	ldr	r1, [r7, #16]
 801484c:	0148      	lsls	r0, r1, #5
 801484e:	6979      	ldr	r1, [r7, #20]
 8014850:	4401      	add	r1, r0
 8014852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8014856:	4313      	orrs	r3, r2
 8014858:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 801485a:	79fb      	ldrb	r3, [r7, #7]
 801485c:	2b01      	cmp	r3, #1
 801485e:	d11e      	bne.n	801489e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8014860:	68bb      	ldr	r3, [r7, #8]
 8014862:	691b      	ldr	r3, [r3, #16]
 8014864:	2b00      	cmp	r3, #0
 8014866:	d009      	beq.n	801487c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8014868:	693b      	ldr	r3, [r7, #16]
 801486a:	015a      	lsls	r2, r3, #5
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	4413      	add	r3, r2
 8014870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014874:	461a      	mov	r2, r3
 8014876:	68bb      	ldr	r3, [r7, #8]
 8014878:	691b      	ldr	r3, [r3, #16]
 801487a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801487c:	693b      	ldr	r3, [r7, #16]
 801487e:	015a      	lsls	r2, r3, #5
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	4413      	add	r3, r2
 8014884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014888:	681b      	ldr	r3, [r3, #0]
 801488a:	693a      	ldr	r2, [r7, #16]
 801488c:	0151      	lsls	r1, r2, #5
 801488e:	697a      	ldr	r2, [r7, #20]
 8014890:	440a      	add	r2, r1
 8014892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014896:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801489a:	6013      	str	r3, [r2, #0]
 801489c:	e092      	b.n	80149c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	015a      	lsls	r2, r3, #5
 80148a2:	697b      	ldr	r3, [r7, #20]
 80148a4:	4413      	add	r3, r2
 80148a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	693a      	ldr	r2, [r7, #16]
 80148ae:	0151      	lsls	r1, r2, #5
 80148b0:	697a      	ldr	r2, [r7, #20]
 80148b2:	440a      	add	r2, r1
 80148b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80148bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80148be:	68bb      	ldr	r3, [r7, #8]
 80148c0:	695b      	ldr	r3, [r3, #20]
 80148c2:	2b00      	cmp	r3, #0
 80148c4:	d07e      	beq.n	80149c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80148cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80148ce:	68bb      	ldr	r3, [r7, #8]
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	f003 030f 	and.w	r3, r3, #15
 80148d6:	2101      	movs	r1, #1
 80148d8:	fa01 f303 	lsl.w	r3, r1, r3
 80148dc:	6979      	ldr	r1, [r7, #20]
 80148de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80148e2:	4313      	orrs	r3, r2
 80148e4:	634b      	str	r3, [r1, #52]	; 0x34
 80148e6:	e06d      	b.n	80149c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80148e8:	693b      	ldr	r3, [r7, #16]
 80148ea:	015a      	lsls	r2, r3, #5
 80148ec:	697b      	ldr	r3, [r7, #20]
 80148ee:	4413      	add	r3, r2
 80148f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80148f4:	691b      	ldr	r3, [r3, #16]
 80148f6:	693a      	ldr	r2, [r7, #16]
 80148f8:	0151      	lsls	r1, r2, #5
 80148fa:	697a      	ldr	r2, [r7, #20]
 80148fc:	440a      	add	r2, r1
 80148fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014902:	0cdb      	lsrs	r3, r3, #19
 8014904:	04db      	lsls	r3, r3, #19
 8014906:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014908:	693b      	ldr	r3, [r7, #16]
 801490a:	015a      	lsls	r2, r3, #5
 801490c:	697b      	ldr	r3, [r7, #20]
 801490e:	4413      	add	r3, r2
 8014910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014914:	691b      	ldr	r3, [r3, #16]
 8014916:	693a      	ldr	r2, [r7, #16]
 8014918:	0151      	lsls	r1, r2, #5
 801491a:	697a      	ldr	r2, [r7, #20]
 801491c:	440a      	add	r2, r1
 801491e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014922:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014926:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801492a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 801492c:	68bb      	ldr	r3, [r7, #8]
 801492e:	695b      	ldr	r3, [r3, #20]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d003      	beq.n	801493c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8014934:	68bb      	ldr	r3, [r7, #8]
 8014936:	689a      	ldr	r2, [r3, #8]
 8014938:	68bb      	ldr	r3, [r7, #8]
 801493a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	015a      	lsls	r2, r3, #5
 8014940:	697b      	ldr	r3, [r7, #20]
 8014942:	4413      	add	r3, r2
 8014944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014948:	691b      	ldr	r3, [r3, #16]
 801494a:	693a      	ldr	r2, [r7, #16]
 801494c:	0151      	lsls	r1, r2, #5
 801494e:	697a      	ldr	r2, [r7, #20]
 8014950:	440a      	add	r2, r1
 8014952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014956:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801495a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801495c:	693b      	ldr	r3, [r7, #16]
 801495e:	015a      	lsls	r2, r3, #5
 8014960:	697b      	ldr	r3, [r7, #20]
 8014962:	4413      	add	r3, r2
 8014964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014968:	691a      	ldr	r2, [r3, #16]
 801496a:	68bb      	ldr	r3, [r7, #8]
 801496c:	689b      	ldr	r3, [r3, #8]
 801496e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014972:	6939      	ldr	r1, [r7, #16]
 8014974:	0148      	lsls	r0, r1, #5
 8014976:	6979      	ldr	r1, [r7, #20]
 8014978:	4401      	add	r1, r0
 801497a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801497e:	4313      	orrs	r3, r2
 8014980:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8014982:	79fb      	ldrb	r3, [r7, #7]
 8014984:	2b01      	cmp	r3, #1
 8014986:	d10d      	bne.n	80149a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014988:	68bb      	ldr	r3, [r7, #8]
 801498a:	68db      	ldr	r3, [r3, #12]
 801498c:	2b00      	cmp	r3, #0
 801498e:	d009      	beq.n	80149a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	68d9      	ldr	r1, [r3, #12]
 8014994:	693b      	ldr	r3, [r7, #16]
 8014996:	015a      	lsls	r2, r3, #5
 8014998:	697b      	ldr	r3, [r7, #20]
 801499a:	4413      	add	r3, r2
 801499c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149a0:	460a      	mov	r2, r1
 80149a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80149a4:	693b      	ldr	r3, [r7, #16]
 80149a6:	015a      	lsls	r2, r3, #5
 80149a8:	697b      	ldr	r3, [r7, #20]
 80149aa:	4413      	add	r3, r2
 80149ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	693a      	ldr	r2, [r7, #16]
 80149b4:	0151      	lsls	r1, r2, #5
 80149b6:	697a      	ldr	r2, [r7, #20]
 80149b8:	440a      	add	r2, r1
 80149ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80149be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80149c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80149c4:	2300      	movs	r3, #0
}
 80149c6:	4618      	mov	r0, r3
 80149c8:	371c      	adds	r7, #28
 80149ca:	46bd      	mov	sp, r7
 80149cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d0:	4770      	bx	lr

080149d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80149d2:	b480      	push	{r7}
 80149d4:	b089      	sub	sp, #36	; 0x24
 80149d6:	af00      	add	r7, sp, #0
 80149d8:	60f8      	str	r0, [r7, #12]
 80149da:	60b9      	str	r1, [r7, #8]
 80149dc:	4611      	mov	r1, r2
 80149de:	461a      	mov	r2, r3
 80149e0:	460b      	mov	r3, r1
 80149e2:	71fb      	strb	r3, [r7, #7]
 80149e4:	4613      	mov	r3, r2
 80149e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80149ec:	68bb      	ldr	r3, [r7, #8]
 80149ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80149f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d11a      	bne.n	8014a2e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80149f8:	88bb      	ldrh	r3, [r7, #4]
 80149fa:	3303      	adds	r3, #3
 80149fc:	089b      	lsrs	r3, r3, #2
 80149fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8014a00:	2300      	movs	r3, #0
 8014a02:	61bb      	str	r3, [r7, #24]
 8014a04:	e00f      	b.n	8014a26 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8014a06:	79fb      	ldrb	r3, [r7, #7]
 8014a08:	031a      	lsls	r2, r3, #12
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	4413      	add	r3, r2
 8014a0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a12:	461a      	mov	r2, r3
 8014a14:	69fb      	ldr	r3, [r7, #28]
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	6013      	str	r3, [r2, #0]
      pSrc++;
 8014a1a:	69fb      	ldr	r3, [r7, #28]
 8014a1c:	3304      	adds	r3, #4
 8014a1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014a20:	69bb      	ldr	r3, [r7, #24]
 8014a22:	3301      	adds	r3, #1
 8014a24:	61bb      	str	r3, [r7, #24]
 8014a26:	69ba      	ldr	r2, [r7, #24]
 8014a28:	693b      	ldr	r3, [r7, #16]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d3eb      	bcc.n	8014a06 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8014a2e:	2300      	movs	r3, #0
}
 8014a30:	4618      	mov	r0, r3
 8014a32:	3724      	adds	r7, #36	; 0x24
 8014a34:	46bd      	mov	sp, r7
 8014a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3a:	4770      	bx	lr

08014a3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8014a3c:	b480      	push	{r7}
 8014a3e:	b089      	sub	sp, #36	; 0x24
 8014a40:	af00      	add	r7, sp, #0
 8014a42:	60f8      	str	r0, [r7, #12]
 8014a44:	60b9      	str	r1, [r7, #8]
 8014a46:	4613      	mov	r3, r2
 8014a48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a4a:	68fb      	ldr	r3, [r7, #12]
 8014a4c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8014a52:	88fb      	ldrh	r3, [r7, #6]
 8014a54:	3303      	adds	r3, #3
 8014a56:	089b      	lsrs	r3, r3, #2
 8014a58:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	61bb      	str	r3, [r7, #24]
 8014a5e:	e00b      	b.n	8014a78 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014a60:	697b      	ldr	r3, [r7, #20]
 8014a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8014a66:	681a      	ldr	r2, [r3, #0]
 8014a68:	69fb      	ldr	r3, [r7, #28]
 8014a6a:	601a      	str	r2, [r3, #0]
    pDest++;
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	3304      	adds	r3, #4
 8014a70:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	3301      	adds	r3, #1
 8014a76:	61bb      	str	r3, [r7, #24]
 8014a78:	69ba      	ldr	r2, [r7, #24]
 8014a7a:	693b      	ldr	r3, [r7, #16]
 8014a7c:	429a      	cmp	r2, r3
 8014a7e:	d3ef      	bcc.n	8014a60 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8014a80:	69fb      	ldr	r3, [r7, #28]
}
 8014a82:	4618      	mov	r0, r3
 8014a84:	3724      	adds	r7, #36	; 0x24
 8014a86:	46bd      	mov	sp, r7
 8014a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8c:	4770      	bx	lr

08014a8e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014a8e:	b480      	push	{r7}
 8014a90:	b085      	sub	sp, #20
 8014a92:	af00      	add	r7, sp, #0
 8014a94:	6078      	str	r0, [r7, #4]
 8014a96:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014a9c:	683b      	ldr	r3, [r7, #0]
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	785b      	ldrb	r3, [r3, #1]
 8014aa6:	2b01      	cmp	r3, #1
 8014aa8:	d12c      	bne.n	8014b04 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	015a      	lsls	r2, r3, #5
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	4413      	add	r3, r2
 8014ab2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	db12      	blt.n	8014ae2 <USB_EPSetStall+0x54>
 8014abc:	68bb      	ldr	r3, [r7, #8]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00f      	beq.n	8014ae2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014ac2:	68bb      	ldr	r3, [r7, #8]
 8014ac4:	015a      	lsls	r2, r3, #5
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	4413      	add	r3, r2
 8014aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ace:	681b      	ldr	r3, [r3, #0]
 8014ad0:	68ba      	ldr	r2, [r7, #8]
 8014ad2:	0151      	lsls	r1, r2, #5
 8014ad4:	68fa      	ldr	r2, [r7, #12]
 8014ad6:	440a      	add	r2, r1
 8014ad8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014adc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014ae0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014ae2:	68bb      	ldr	r3, [r7, #8]
 8014ae4:	015a      	lsls	r2, r3, #5
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	4413      	add	r3, r2
 8014aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	68ba      	ldr	r2, [r7, #8]
 8014af2:	0151      	lsls	r1, r2, #5
 8014af4:	68fa      	ldr	r2, [r7, #12]
 8014af6:	440a      	add	r2, r1
 8014af8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b00:	6013      	str	r3, [r2, #0]
 8014b02:	e02b      	b.n	8014b5c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014b04:	68bb      	ldr	r3, [r7, #8]
 8014b06:	015a      	lsls	r2, r3, #5
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	4413      	add	r3, r2
 8014b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	2b00      	cmp	r3, #0
 8014b14:	db12      	blt.n	8014b3c <USB_EPSetStall+0xae>
 8014b16:	68bb      	ldr	r3, [r7, #8]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d00f      	beq.n	8014b3c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8014b1c:	68bb      	ldr	r3, [r7, #8]
 8014b1e:	015a      	lsls	r2, r3, #5
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	4413      	add	r3, r2
 8014b24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b28:	681b      	ldr	r3, [r3, #0]
 8014b2a:	68ba      	ldr	r2, [r7, #8]
 8014b2c:	0151      	lsls	r1, r2, #5
 8014b2e:	68fa      	ldr	r2, [r7, #12]
 8014b30:	440a      	add	r2, r1
 8014b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b36:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014b3a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8014b3c:	68bb      	ldr	r3, [r7, #8]
 8014b3e:	015a      	lsls	r2, r3, #5
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	4413      	add	r3, r2
 8014b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	68ba      	ldr	r2, [r7, #8]
 8014b4c:	0151      	lsls	r1, r2, #5
 8014b4e:	68fa      	ldr	r2, [r7, #12]
 8014b50:	440a      	add	r2, r1
 8014b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8014b5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014b5c:	2300      	movs	r3, #0
}
 8014b5e:	4618      	mov	r0, r3
 8014b60:	3714      	adds	r7, #20
 8014b62:	46bd      	mov	sp, r7
 8014b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b68:	4770      	bx	lr

08014b6a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8014b6a:	b480      	push	{r7}
 8014b6c:	b085      	sub	sp, #20
 8014b6e:	af00      	add	r7, sp, #0
 8014b70:	6078      	str	r0, [r7, #4]
 8014b72:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8014b78:	683b      	ldr	r3, [r7, #0]
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8014b7e:	683b      	ldr	r3, [r7, #0]
 8014b80:	785b      	ldrb	r3, [r3, #1]
 8014b82:	2b01      	cmp	r3, #1
 8014b84:	d128      	bne.n	8014bd8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8014b86:	68bb      	ldr	r3, [r7, #8]
 8014b88:	015a      	lsls	r2, r3, #5
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	4413      	add	r3, r2
 8014b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	68ba      	ldr	r2, [r7, #8]
 8014b96:	0151      	lsls	r1, r2, #5
 8014b98:	68fa      	ldr	r2, [r7, #12]
 8014b9a:	440a      	add	r2, r1
 8014b9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014ba0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014ba4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014ba6:	683b      	ldr	r3, [r7, #0]
 8014ba8:	78db      	ldrb	r3, [r3, #3]
 8014baa:	2b03      	cmp	r3, #3
 8014bac:	d003      	beq.n	8014bb6 <USB_EPClearStall+0x4c>
 8014bae:	683b      	ldr	r3, [r7, #0]
 8014bb0:	78db      	ldrb	r3, [r3, #3]
 8014bb2:	2b02      	cmp	r3, #2
 8014bb4:	d138      	bne.n	8014c28 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014bb6:	68bb      	ldr	r3, [r7, #8]
 8014bb8:	015a      	lsls	r2, r3, #5
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	4413      	add	r3, r2
 8014bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	68ba      	ldr	r2, [r7, #8]
 8014bc6:	0151      	lsls	r1, r2, #5
 8014bc8:	68fa      	ldr	r2, [r7, #12]
 8014bca:	440a      	add	r2, r1
 8014bcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014bd4:	6013      	str	r3, [r2, #0]
 8014bd6:	e027      	b.n	8014c28 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	015a      	lsls	r2, r3, #5
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	4413      	add	r3, r2
 8014be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014be4:	681b      	ldr	r3, [r3, #0]
 8014be6:	68ba      	ldr	r2, [r7, #8]
 8014be8:	0151      	lsls	r1, r2, #5
 8014bea:	68fa      	ldr	r2, [r7, #12]
 8014bec:	440a      	add	r2, r1
 8014bee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014bf6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014bf8:	683b      	ldr	r3, [r7, #0]
 8014bfa:	78db      	ldrb	r3, [r3, #3]
 8014bfc:	2b03      	cmp	r3, #3
 8014bfe:	d003      	beq.n	8014c08 <USB_EPClearStall+0x9e>
 8014c00:	683b      	ldr	r3, [r7, #0]
 8014c02:	78db      	ldrb	r3, [r3, #3]
 8014c04:	2b02      	cmp	r3, #2
 8014c06:	d10f      	bne.n	8014c28 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014c08:	68bb      	ldr	r3, [r7, #8]
 8014c0a:	015a      	lsls	r2, r3, #5
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	4413      	add	r3, r2
 8014c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	68ba      	ldr	r2, [r7, #8]
 8014c18:	0151      	lsls	r1, r2, #5
 8014c1a:	68fa      	ldr	r2, [r7, #12]
 8014c1c:	440a      	add	r2, r1
 8014c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014c26:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014c28:	2300      	movs	r3, #0
}
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	3714      	adds	r7, #20
 8014c2e:	46bd      	mov	sp, r7
 8014c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c34:	4770      	bx	lr

08014c36 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014c36:	b480      	push	{r7}
 8014c38:	b085      	sub	sp, #20
 8014c3a:	af00      	add	r7, sp, #0
 8014c3c:	6078      	str	r0, [r7, #4]
 8014c3e:	460b      	mov	r3, r1
 8014c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c4c:	681b      	ldr	r3, [r3, #0]
 8014c4e:	68fa      	ldr	r2, [r7, #12]
 8014c50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014c54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8014c58:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014c60:	681a      	ldr	r2, [r3, #0]
 8014c62:	78fb      	ldrb	r3, [r7, #3]
 8014c64:	011b      	lsls	r3, r3, #4
 8014c66:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8014c6a:	68f9      	ldr	r1, [r7, #12]
 8014c6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014c70:	4313      	orrs	r3, r2
 8014c72:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8014c74:	2300      	movs	r3, #0
}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3714      	adds	r7, #20
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c80:	4770      	bx	lr

08014c82 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014c82:	b480      	push	{r7}
 8014c84:	b085      	sub	sp, #20
 8014c86:	af00      	add	r7, sp, #0
 8014c88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014c8a:	687b      	ldr	r3, [r7, #4]
 8014c8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014c8e:	68fb      	ldr	r3, [r7, #12]
 8014c90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	68fa      	ldr	r2, [r7, #12]
 8014c98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014c9c:	f023 0303 	bic.w	r3, r3, #3
 8014ca0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8014ca2:	68fb      	ldr	r3, [r7, #12]
 8014ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ca8:	685b      	ldr	r3, [r3, #4]
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cb0:	f023 0302 	bic.w	r3, r3, #2
 8014cb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cb6:	2300      	movs	r3, #0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3714      	adds	r7, #20
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cc2:	4770      	bx	lr

08014cc4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014cc4:	b480      	push	{r7}
 8014cc6:	b085      	sub	sp, #20
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014cd0:	68fb      	ldr	r3, [r7, #12]
 8014cd2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	68fa      	ldr	r2, [r7, #12]
 8014cda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014cde:	f023 0303 	bic.w	r3, r3, #3
 8014ce2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014cea:	685b      	ldr	r3, [r3, #4]
 8014cec:	68fa      	ldr	r2, [r7, #12]
 8014cee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014cf2:	f043 0302 	orr.w	r3, r3, #2
 8014cf6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014cf8:	2300      	movs	r3, #0
}
 8014cfa:	4618      	mov	r0, r3
 8014cfc:	3714      	adds	r7, #20
 8014cfe:	46bd      	mov	sp, r7
 8014d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d04:	4770      	bx	lr

08014d06 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014d06:	b480      	push	{r7}
 8014d08:	b085      	sub	sp, #20
 8014d0a:	af00      	add	r7, sp, #0
 8014d0c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014d0e:	687b      	ldr	r3, [r7, #4]
 8014d10:	695b      	ldr	r3, [r3, #20]
 8014d12:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	699b      	ldr	r3, [r3, #24]
 8014d18:	68fa      	ldr	r2, [r7, #12]
 8014d1a:	4013      	ands	r3, r2
 8014d1c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014d1e:	68fb      	ldr	r3, [r7, #12]
}
 8014d20:	4618      	mov	r0, r3
 8014d22:	3714      	adds	r7, #20
 8014d24:	46bd      	mov	sp, r7
 8014d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d2a:	4770      	bx	lr

08014d2c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d2c:	b480      	push	{r7}
 8014d2e:	b085      	sub	sp, #20
 8014d30:	af00      	add	r7, sp, #0
 8014d32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d3e:	699b      	ldr	r3, [r3, #24]
 8014d40:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d48:	69db      	ldr	r3, [r3, #28]
 8014d4a:	68ba      	ldr	r2, [r7, #8]
 8014d4c:	4013      	ands	r3, r2
 8014d4e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014d50:	68bb      	ldr	r3, [r7, #8]
 8014d52:	0c1b      	lsrs	r3, r3, #16
}
 8014d54:	4618      	mov	r0, r3
 8014d56:	3714      	adds	r7, #20
 8014d58:	46bd      	mov	sp, r7
 8014d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d5e:	4770      	bx	lr

08014d60 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014d60:	b480      	push	{r7}
 8014d62:	b085      	sub	sp, #20
 8014d64:	af00      	add	r7, sp, #0
 8014d66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d72:	699b      	ldr	r3, [r3, #24]
 8014d74:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014d7c:	69db      	ldr	r3, [r3, #28]
 8014d7e:	68ba      	ldr	r2, [r7, #8]
 8014d80:	4013      	ands	r3, r2
 8014d82:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	b29b      	uxth	r3, r3
}
 8014d88:	4618      	mov	r0, r3
 8014d8a:	3714      	adds	r7, #20
 8014d8c:	46bd      	mov	sp, r7
 8014d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d92:	4770      	bx	lr

08014d94 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014d94:	b480      	push	{r7}
 8014d96:	b085      	sub	sp, #20
 8014d98:	af00      	add	r7, sp, #0
 8014d9a:	6078      	str	r0, [r7, #4]
 8014d9c:	460b      	mov	r3, r1
 8014d9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014da4:	78fb      	ldrb	r3, [r7, #3]
 8014da6:	015a      	lsls	r2, r3, #5
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	4413      	add	r3, r2
 8014dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014db0:	689b      	ldr	r3, [r3, #8]
 8014db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014dba:	695b      	ldr	r3, [r3, #20]
 8014dbc:	68ba      	ldr	r2, [r7, #8]
 8014dbe:	4013      	ands	r3, r2
 8014dc0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014dc2:	68bb      	ldr	r3, [r7, #8]
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3714      	adds	r7, #20
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dce:	4770      	bx	lr

08014dd0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014dd0:	b480      	push	{r7}
 8014dd2:	b087      	sub	sp, #28
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
 8014dd8:	460b      	mov	r3, r1
 8014dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014de0:	697b      	ldr	r3, [r7, #20]
 8014de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014df2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014df4:	78fb      	ldrb	r3, [r7, #3]
 8014df6:	f003 030f 	and.w	r3, r3, #15
 8014dfa:	68fa      	ldr	r2, [r7, #12]
 8014dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8014e00:	01db      	lsls	r3, r3, #7
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	693a      	ldr	r2, [r7, #16]
 8014e06:	4313      	orrs	r3, r2
 8014e08:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014e0a:	78fb      	ldrb	r3, [r7, #3]
 8014e0c:	015a      	lsls	r2, r3, #5
 8014e0e:	697b      	ldr	r3, [r7, #20]
 8014e10:	4413      	add	r3, r2
 8014e12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e16:	689b      	ldr	r3, [r3, #8]
 8014e18:	693a      	ldr	r2, [r7, #16]
 8014e1a:	4013      	ands	r3, r2
 8014e1c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014e1e:	68bb      	ldr	r3, [r7, #8]
}
 8014e20:	4618      	mov	r0, r3
 8014e22:	371c      	adds	r7, #28
 8014e24:	46bd      	mov	sp, r7
 8014e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e2a:	4770      	bx	lr

08014e2c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014e2c:	b480      	push	{r7}
 8014e2e:	b083      	sub	sp, #12
 8014e30:	af00      	add	r7, sp, #0
 8014e32:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	695b      	ldr	r3, [r3, #20]
 8014e38:	f003 0301 	and.w	r3, r3, #1
}
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	370c      	adds	r7, #12
 8014e40:	46bd      	mov	sp, r7
 8014e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e46:	4770      	bx	lr

08014e48 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014e48:	b480      	push	{r7}
 8014e4a:	b085      	sub	sp, #20
 8014e4c:	af00      	add	r7, sp, #0
 8014e4e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	68fa      	ldr	r2, [r7, #12]
 8014e5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014e62:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014e66:	f023 0307 	bic.w	r3, r3, #7
 8014e6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014e6c:	68fb      	ldr	r3, [r7, #12]
 8014e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014e72:	685b      	ldr	r3, [r3, #4]
 8014e74:	68fa      	ldr	r2, [r7, #12]
 8014e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014e7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014e80:	2300      	movs	r3, #0
}
 8014e82:	4618      	mov	r0, r3
 8014e84:	3714      	adds	r7, #20
 8014e86:	46bd      	mov	sp, r7
 8014e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8c:	4770      	bx	lr
	...

08014e90 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014e90:	b480      	push	{r7}
 8014e92:	b087      	sub	sp, #28
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	60f8      	str	r0, [r7, #12]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	607a      	str	r2, [r7, #4]
 8014e9c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	333c      	adds	r3, #60	; 0x3c
 8014ea6:	3304      	adds	r3, #4
 8014ea8:	681b      	ldr	r3, [r3, #0]
 8014eaa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014eac:	693b      	ldr	r3, [r7, #16]
 8014eae:	4a26      	ldr	r2, [pc, #152]	; (8014f48 <USB_EP0_OutStart+0xb8>)
 8014eb0:	4293      	cmp	r3, r2
 8014eb2:	d90a      	bls.n	8014eca <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014eb4:	697b      	ldr	r3, [r7, #20]
 8014eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014eba:	681b      	ldr	r3, [r3, #0]
 8014ebc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014ec4:	d101      	bne.n	8014eca <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014ec6:	2300      	movs	r3, #0
 8014ec8:	e037      	b.n	8014f3a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ed0:	461a      	mov	r2, r3
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014ed6:	697b      	ldr	r3, [r7, #20]
 8014ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014edc:	691b      	ldr	r3, [r3, #16]
 8014ede:	697a      	ldr	r2, [r7, #20]
 8014ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ee4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014ee8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014eea:	697b      	ldr	r3, [r7, #20]
 8014eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014ef0:	691b      	ldr	r3, [r3, #16]
 8014ef2:	697a      	ldr	r2, [r7, #20]
 8014ef4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014ef8:	f043 0318 	orr.w	r3, r3, #24
 8014efc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f04:	691b      	ldr	r3, [r3, #16]
 8014f06:	697a      	ldr	r2, [r7, #20]
 8014f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f0c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014f10:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014f12:	7afb      	ldrb	r3, [r7, #11]
 8014f14:	2b01      	cmp	r3, #1
 8014f16:	d10f      	bne.n	8014f38 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014f18:	697b      	ldr	r3, [r7, #20]
 8014f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f1e:	461a      	mov	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014f2a:	681b      	ldr	r3, [r3, #0]
 8014f2c:	697a      	ldr	r2, [r7, #20]
 8014f2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014f32:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014f36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014f38:	2300      	movs	r3, #0
}
 8014f3a:	4618      	mov	r0, r3
 8014f3c:	371c      	adds	r7, #28
 8014f3e:	46bd      	mov	sp, r7
 8014f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f44:	4770      	bx	lr
 8014f46:	bf00      	nop
 8014f48:	4f54300a 	.word	0x4f54300a

08014f4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014f4c:	b480      	push	{r7}
 8014f4e:	b085      	sub	sp, #20
 8014f50:	af00      	add	r7, sp, #0
 8014f52:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8014f54:	2300      	movs	r3, #0
 8014f56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	60fb      	str	r3, [r7, #12]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	4a13      	ldr	r2, [pc, #76]	; (8014fb0 <USB_CoreReset+0x64>)
 8014f62:	4293      	cmp	r3, r2
 8014f64:	d901      	bls.n	8014f6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014f66:	2303      	movs	r3, #3
 8014f68:	e01b      	b.n	8014fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	691b      	ldr	r3, [r3, #16]
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	daf2      	bge.n	8014f58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014f72:	2300      	movs	r3, #0
 8014f74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	691b      	ldr	r3, [r3, #16]
 8014f7a:	f043 0201 	orr.w	r2, r3, #1
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	3301      	adds	r3, #1
 8014f86:	60fb      	str	r3, [r7, #12]
 8014f88:	68fb      	ldr	r3, [r7, #12]
 8014f8a:	4a09      	ldr	r2, [pc, #36]	; (8014fb0 <USB_CoreReset+0x64>)
 8014f8c:	4293      	cmp	r3, r2
 8014f8e:	d901      	bls.n	8014f94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014f90:	2303      	movs	r3, #3
 8014f92:	e006      	b.n	8014fa2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	691b      	ldr	r3, [r3, #16]
 8014f98:	f003 0301 	and.w	r3, r3, #1
 8014f9c:	2b01      	cmp	r3, #1
 8014f9e:	d0f0      	beq.n	8014f82 <USB_CoreReset+0x36>

  return HAL_OK;
 8014fa0:	2300      	movs	r3, #0
}
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3714      	adds	r7, #20
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fac:	4770      	bx	lr
 8014fae:	bf00      	nop
 8014fb0:	00030d40 	.word	0x00030d40

08014fb4 <main>:




int main(void)
{
 8014fb4:	b580      	push	{r7, lr}
 8014fb6:	af00      	add	r7, sp, #0
  hwInit();
 8014fb8:	f7f4 fb30 	bl	800961c <hwInit>
  apInit();
 8014fbc:	f7ec f806 	bl	8000fcc <apInit>

  apMain();
 8014fc0:	f7ec f822 	bl	8001008 <apMain>

  return 0;
 8014fc4:	2300      	movs	r3, #0
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	bd80      	pop	{r7, pc}
	...

08014fcc <__errno>:
 8014fcc:	4b01      	ldr	r3, [pc, #4]	; (8014fd4 <__errno+0x8>)
 8014fce:	6818      	ldr	r0, [r3, #0]
 8014fd0:	4770      	bx	lr
 8014fd2:	bf00      	nop
 8014fd4:	20000370 	.word	0x20000370

08014fd8 <__libc_init_array>:
 8014fd8:	b570      	push	{r4, r5, r6, lr}
 8014fda:	4d0d      	ldr	r5, [pc, #52]	; (8015010 <__libc_init_array+0x38>)
 8014fdc:	4c0d      	ldr	r4, [pc, #52]	; (8015014 <__libc_init_array+0x3c>)
 8014fde:	1b64      	subs	r4, r4, r5
 8014fe0:	10a4      	asrs	r4, r4, #2
 8014fe2:	2600      	movs	r6, #0
 8014fe4:	42a6      	cmp	r6, r4
 8014fe6:	d109      	bne.n	8014ffc <__libc_init_array+0x24>
 8014fe8:	4d0b      	ldr	r5, [pc, #44]	; (8015018 <__libc_init_array+0x40>)
 8014fea:	4c0c      	ldr	r4, [pc, #48]	; (801501c <__libc_init_array+0x44>)
 8014fec:	f003 f9e4 	bl	80183b8 <_init>
 8014ff0:	1b64      	subs	r4, r4, r5
 8014ff2:	10a4      	asrs	r4, r4, #2
 8014ff4:	2600      	movs	r6, #0
 8014ff6:	42a6      	cmp	r6, r4
 8014ff8:	d105      	bne.n	8015006 <__libc_init_array+0x2e>
 8014ffa:	bd70      	pop	{r4, r5, r6, pc}
 8014ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8015000:	4798      	blx	r3
 8015002:	3601      	adds	r6, #1
 8015004:	e7ee      	b.n	8014fe4 <__libc_init_array+0xc>
 8015006:	f855 3b04 	ldr.w	r3, [r5], #4
 801500a:	4798      	blx	r3
 801500c:	3601      	adds	r6, #1
 801500e:	e7f2      	b.n	8014ff6 <__libc_init_array+0x1e>
 8015010:	08022cb4 	.word	0x08022cb4
 8015014:	08022cb4 	.word	0x08022cb4
 8015018:	08022cb4 	.word	0x08022cb4
 801501c:	08022cb8 	.word	0x08022cb8

08015020 <memcpy>:
 8015020:	440a      	add	r2, r1
 8015022:	4291      	cmp	r1, r2
 8015024:	f100 33ff 	add.w	r3, r0, #4294967295
 8015028:	d100      	bne.n	801502c <memcpy+0xc>
 801502a:	4770      	bx	lr
 801502c:	b510      	push	{r4, lr}
 801502e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015032:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015036:	4291      	cmp	r1, r2
 8015038:	d1f9      	bne.n	801502e <memcpy+0xe>
 801503a:	bd10      	pop	{r4, pc}

0801503c <memset>:
 801503c:	4402      	add	r2, r0
 801503e:	4603      	mov	r3, r0
 8015040:	4293      	cmp	r3, r2
 8015042:	d100      	bne.n	8015046 <memset+0xa>
 8015044:	4770      	bx	lr
 8015046:	f803 1b01 	strb.w	r1, [r3], #1
 801504a:	e7f9      	b.n	8015040 <memset+0x4>

0801504c <iprintf>:
 801504c:	b40f      	push	{r0, r1, r2, r3}
 801504e:	4b0a      	ldr	r3, [pc, #40]	; (8015078 <iprintf+0x2c>)
 8015050:	b513      	push	{r0, r1, r4, lr}
 8015052:	681c      	ldr	r4, [r3, #0]
 8015054:	b124      	cbz	r4, 8015060 <iprintf+0x14>
 8015056:	69a3      	ldr	r3, [r4, #24]
 8015058:	b913      	cbnz	r3, 8015060 <iprintf+0x14>
 801505a:	4620      	mov	r0, r4
 801505c:	f001 f9a6 	bl	80163ac <__sinit>
 8015060:	ab05      	add	r3, sp, #20
 8015062:	9a04      	ldr	r2, [sp, #16]
 8015064:	68a1      	ldr	r1, [r4, #8]
 8015066:	9301      	str	r3, [sp, #4]
 8015068:	4620      	mov	r0, r4
 801506a:	f002 fd1f 	bl	8017aac <_vfiprintf_r>
 801506e:	b002      	add	sp, #8
 8015070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015074:	b004      	add	sp, #16
 8015076:	4770      	bx	lr
 8015078:	20000370 	.word	0x20000370

0801507c <_puts_r>:
 801507c:	b570      	push	{r4, r5, r6, lr}
 801507e:	460e      	mov	r6, r1
 8015080:	4605      	mov	r5, r0
 8015082:	b118      	cbz	r0, 801508c <_puts_r+0x10>
 8015084:	6983      	ldr	r3, [r0, #24]
 8015086:	b90b      	cbnz	r3, 801508c <_puts_r+0x10>
 8015088:	f001 f990 	bl	80163ac <__sinit>
 801508c:	69ab      	ldr	r3, [r5, #24]
 801508e:	68ac      	ldr	r4, [r5, #8]
 8015090:	b913      	cbnz	r3, 8015098 <_puts_r+0x1c>
 8015092:	4628      	mov	r0, r5
 8015094:	f001 f98a 	bl	80163ac <__sinit>
 8015098:	4b2c      	ldr	r3, [pc, #176]	; (801514c <_puts_r+0xd0>)
 801509a:	429c      	cmp	r4, r3
 801509c:	d120      	bne.n	80150e0 <_puts_r+0x64>
 801509e:	686c      	ldr	r4, [r5, #4]
 80150a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150a2:	07db      	lsls	r3, r3, #31
 80150a4:	d405      	bmi.n	80150b2 <_puts_r+0x36>
 80150a6:	89a3      	ldrh	r3, [r4, #12]
 80150a8:	0598      	lsls	r0, r3, #22
 80150aa:	d402      	bmi.n	80150b2 <_puts_r+0x36>
 80150ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150ae:	f001 fd8a 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 80150b2:	89a3      	ldrh	r3, [r4, #12]
 80150b4:	0719      	lsls	r1, r3, #28
 80150b6:	d51d      	bpl.n	80150f4 <_puts_r+0x78>
 80150b8:	6923      	ldr	r3, [r4, #16]
 80150ba:	b1db      	cbz	r3, 80150f4 <_puts_r+0x78>
 80150bc:	3e01      	subs	r6, #1
 80150be:	68a3      	ldr	r3, [r4, #8]
 80150c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80150c4:	3b01      	subs	r3, #1
 80150c6:	60a3      	str	r3, [r4, #8]
 80150c8:	bb39      	cbnz	r1, 801511a <_puts_r+0x9e>
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	da38      	bge.n	8015140 <_puts_r+0xc4>
 80150ce:	4622      	mov	r2, r4
 80150d0:	210a      	movs	r1, #10
 80150d2:	4628      	mov	r0, r5
 80150d4:	f000 ff90 	bl	8015ff8 <__swbuf_r>
 80150d8:	3001      	adds	r0, #1
 80150da:	d011      	beq.n	8015100 <_puts_r+0x84>
 80150dc:	250a      	movs	r5, #10
 80150de:	e011      	b.n	8015104 <_puts_r+0x88>
 80150e0:	4b1b      	ldr	r3, [pc, #108]	; (8015150 <_puts_r+0xd4>)
 80150e2:	429c      	cmp	r4, r3
 80150e4:	d101      	bne.n	80150ea <_puts_r+0x6e>
 80150e6:	68ac      	ldr	r4, [r5, #8]
 80150e8:	e7da      	b.n	80150a0 <_puts_r+0x24>
 80150ea:	4b1a      	ldr	r3, [pc, #104]	; (8015154 <_puts_r+0xd8>)
 80150ec:	429c      	cmp	r4, r3
 80150ee:	bf08      	it	eq
 80150f0:	68ec      	ldreq	r4, [r5, #12]
 80150f2:	e7d5      	b.n	80150a0 <_puts_r+0x24>
 80150f4:	4621      	mov	r1, r4
 80150f6:	4628      	mov	r0, r5
 80150f8:	f000 ffd0 	bl	801609c <__swsetup_r>
 80150fc:	2800      	cmp	r0, #0
 80150fe:	d0dd      	beq.n	80150bc <_puts_r+0x40>
 8015100:	f04f 35ff 	mov.w	r5, #4294967295
 8015104:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015106:	07da      	lsls	r2, r3, #31
 8015108:	d405      	bmi.n	8015116 <_puts_r+0x9a>
 801510a:	89a3      	ldrh	r3, [r4, #12]
 801510c:	059b      	lsls	r3, r3, #22
 801510e:	d402      	bmi.n	8015116 <_puts_r+0x9a>
 8015110:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015112:	f001 fd59 	bl	8016bc8 <__retarget_lock_release_recursive>
 8015116:	4628      	mov	r0, r5
 8015118:	bd70      	pop	{r4, r5, r6, pc}
 801511a:	2b00      	cmp	r3, #0
 801511c:	da04      	bge.n	8015128 <_puts_r+0xac>
 801511e:	69a2      	ldr	r2, [r4, #24]
 8015120:	429a      	cmp	r2, r3
 8015122:	dc06      	bgt.n	8015132 <_puts_r+0xb6>
 8015124:	290a      	cmp	r1, #10
 8015126:	d004      	beq.n	8015132 <_puts_r+0xb6>
 8015128:	6823      	ldr	r3, [r4, #0]
 801512a:	1c5a      	adds	r2, r3, #1
 801512c:	6022      	str	r2, [r4, #0]
 801512e:	7019      	strb	r1, [r3, #0]
 8015130:	e7c5      	b.n	80150be <_puts_r+0x42>
 8015132:	4622      	mov	r2, r4
 8015134:	4628      	mov	r0, r5
 8015136:	f000 ff5f 	bl	8015ff8 <__swbuf_r>
 801513a:	3001      	adds	r0, #1
 801513c:	d1bf      	bne.n	80150be <_puts_r+0x42>
 801513e:	e7df      	b.n	8015100 <_puts_r+0x84>
 8015140:	6823      	ldr	r3, [r4, #0]
 8015142:	250a      	movs	r5, #10
 8015144:	1c5a      	adds	r2, r3, #1
 8015146:	6022      	str	r2, [r4, #0]
 8015148:	701d      	strb	r5, [r3, #0]
 801514a:	e7db      	b.n	8015104 <_puts_r+0x88>
 801514c:	080229f4 	.word	0x080229f4
 8015150:	08022a14 	.word	0x08022a14
 8015154:	080229d4 	.word	0x080229d4

08015158 <puts>:
 8015158:	4b02      	ldr	r3, [pc, #8]	; (8015164 <puts+0xc>)
 801515a:	4601      	mov	r1, r0
 801515c:	6818      	ldr	r0, [r3, #0]
 801515e:	f7ff bf8d 	b.w	801507c <_puts_r>
 8015162:	bf00      	nop
 8015164:	20000370 	.word	0x20000370

08015168 <strcpy>:
 8015168:	4603      	mov	r3, r0
 801516a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801516e:	f803 2b01 	strb.w	r2, [r3], #1
 8015172:	2a00      	cmp	r2, #0
 8015174:	d1f9      	bne.n	801516a <strcpy+0x2>
 8015176:	4770      	bx	lr

08015178 <sulp>:
 8015178:	b570      	push	{r4, r5, r6, lr}
 801517a:	4604      	mov	r4, r0
 801517c:	460d      	mov	r5, r1
 801517e:	ec45 4b10 	vmov	d0, r4, r5
 8015182:	4616      	mov	r6, r2
 8015184:	f002 f904 	bl	8017390 <__ulp>
 8015188:	ec51 0b10 	vmov	r0, r1, d0
 801518c:	b17e      	cbz	r6, 80151ae <sulp+0x36>
 801518e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8015192:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8015196:	2b00      	cmp	r3, #0
 8015198:	dd09      	ble.n	80151ae <sulp+0x36>
 801519a:	051b      	lsls	r3, r3, #20
 801519c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80151a0:	2400      	movs	r4, #0
 80151a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80151a6:	4622      	mov	r2, r4
 80151a8:	462b      	mov	r3, r5
 80151aa:	f7eb fa3d 	bl	8000628 <__aeabi_dmul>
 80151ae:	bd70      	pop	{r4, r5, r6, pc}

080151b0 <_strtod_l>:
 80151b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151b4:	b0a3      	sub	sp, #140	; 0x8c
 80151b6:	461f      	mov	r7, r3
 80151b8:	2300      	movs	r3, #0
 80151ba:	931e      	str	r3, [sp, #120]	; 0x78
 80151bc:	4ba4      	ldr	r3, [pc, #656]	; (8015450 <_strtod_l+0x2a0>)
 80151be:	9219      	str	r2, [sp, #100]	; 0x64
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	9307      	str	r3, [sp, #28]
 80151c4:	4604      	mov	r4, r0
 80151c6:	4618      	mov	r0, r3
 80151c8:	4688      	mov	r8, r1
 80151ca:	f7eb f813 	bl	80001f4 <strlen>
 80151ce:	f04f 0a00 	mov.w	sl, #0
 80151d2:	4605      	mov	r5, r0
 80151d4:	f04f 0b00 	mov.w	fp, #0
 80151d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80151dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80151de:	781a      	ldrb	r2, [r3, #0]
 80151e0:	2a2b      	cmp	r2, #43	; 0x2b
 80151e2:	d04c      	beq.n	801527e <_strtod_l+0xce>
 80151e4:	d839      	bhi.n	801525a <_strtod_l+0xaa>
 80151e6:	2a0d      	cmp	r2, #13
 80151e8:	d832      	bhi.n	8015250 <_strtod_l+0xa0>
 80151ea:	2a08      	cmp	r2, #8
 80151ec:	d832      	bhi.n	8015254 <_strtod_l+0xa4>
 80151ee:	2a00      	cmp	r2, #0
 80151f0:	d03c      	beq.n	801526c <_strtod_l+0xbc>
 80151f2:	2300      	movs	r3, #0
 80151f4:	930e      	str	r3, [sp, #56]	; 0x38
 80151f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80151f8:	7833      	ldrb	r3, [r6, #0]
 80151fa:	2b30      	cmp	r3, #48	; 0x30
 80151fc:	f040 80b4 	bne.w	8015368 <_strtod_l+0x1b8>
 8015200:	7873      	ldrb	r3, [r6, #1]
 8015202:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8015206:	2b58      	cmp	r3, #88	; 0x58
 8015208:	d16c      	bne.n	80152e4 <_strtod_l+0x134>
 801520a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801520c:	9301      	str	r3, [sp, #4]
 801520e:	ab1e      	add	r3, sp, #120	; 0x78
 8015210:	9702      	str	r7, [sp, #8]
 8015212:	9300      	str	r3, [sp, #0]
 8015214:	4a8f      	ldr	r2, [pc, #572]	; (8015454 <_strtod_l+0x2a4>)
 8015216:	ab1f      	add	r3, sp, #124	; 0x7c
 8015218:	a91d      	add	r1, sp, #116	; 0x74
 801521a:	4620      	mov	r0, r4
 801521c:	f001 f9ca 	bl	80165b4 <__gethex>
 8015220:	f010 0707 	ands.w	r7, r0, #7
 8015224:	4605      	mov	r5, r0
 8015226:	d005      	beq.n	8015234 <_strtod_l+0x84>
 8015228:	2f06      	cmp	r7, #6
 801522a:	d12a      	bne.n	8015282 <_strtod_l+0xd2>
 801522c:	3601      	adds	r6, #1
 801522e:	2300      	movs	r3, #0
 8015230:	961d      	str	r6, [sp, #116]	; 0x74
 8015232:	930e      	str	r3, [sp, #56]	; 0x38
 8015234:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8015236:	2b00      	cmp	r3, #0
 8015238:	f040 8596 	bne.w	8015d68 <_strtod_l+0xbb8>
 801523c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801523e:	b1db      	cbz	r3, 8015278 <_strtod_l+0xc8>
 8015240:	4652      	mov	r2, sl
 8015242:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8015246:	ec43 2b10 	vmov	d0, r2, r3
 801524a:	b023      	add	sp, #140	; 0x8c
 801524c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015250:	2a20      	cmp	r2, #32
 8015252:	d1ce      	bne.n	80151f2 <_strtod_l+0x42>
 8015254:	3301      	adds	r3, #1
 8015256:	931d      	str	r3, [sp, #116]	; 0x74
 8015258:	e7c0      	b.n	80151dc <_strtod_l+0x2c>
 801525a:	2a2d      	cmp	r2, #45	; 0x2d
 801525c:	d1c9      	bne.n	80151f2 <_strtod_l+0x42>
 801525e:	2201      	movs	r2, #1
 8015260:	920e      	str	r2, [sp, #56]	; 0x38
 8015262:	1c5a      	adds	r2, r3, #1
 8015264:	921d      	str	r2, [sp, #116]	; 0x74
 8015266:	785b      	ldrb	r3, [r3, #1]
 8015268:	2b00      	cmp	r3, #0
 801526a:	d1c4      	bne.n	80151f6 <_strtod_l+0x46>
 801526c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801526e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015272:	2b00      	cmp	r3, #0
 8015274:	f040 8576 	bne.w	8015d64 <_strtod_l+0xbb4>
 8015278:	4652      	mov	r2, sl
 801527a:	465b      	mov	r3, fp
 801527c:	e7e3      	b.n	8015246 <_strtod_l+0x96>
 801527e:	2200      	movs	r2, #0
 8015280:	e7ee      	b.n	8015260 <_strtod_l+0xb0>
 8015282:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8015284:	b13a      	cbz	r2, 8015296 <_strtod_l+0xe6>
 8015286:	2135      	movs	r1, #53	; 0x35
 8015288:	a820      	add	r0, sp, #128	; 0x80
 801528a:	f002 f98c 	bl	80175a6 <__copybits>
 801528e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015290:	4620      	mov	r0, r4
 8015292:	f001 fd51 	bl	8016d38 <_Bfree>
 8015296:	3f01      	subs	r7, #1
 8015298:	2f05      	cmp	r7, #5
 801529a:	d807      	bhi.n	80152ac <_strtod_l+0xfc>
 801529c:	e8df f007 	tbb	[pc, r7]
 80152a0:	1d180b0e 	.word	0x1d180b0e
 80152a4:	030e      	.short	0x030e
 80152a6:	f04f 0b00 	mov.w	fp, #0
 80152aa:	46da      	mov	sl, fp
 80152ac:	0728      	lsls	r0, r5, #28
 80152ae:	d5c1      	bpl.n	8015234 <_strtod_l+0x84>
 80152b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80152b4:	e7be      	b.n	8015234 <_strtod_l+0x84>
 80152b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80152ba:	e7f7      	b.n	80152ac <_strtod_l+0xfc>
 80152bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80152c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80152c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80152c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80152ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80152ce:	e7ed      	b.n	80152ac <_strtod_l+0xfc>
 80152d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8015458 <_strtod_l+0x2a8>
 80152d4:	f04f 0a00 	mov.w	sl, #0
 80152d8:	e7e8      	b.n	80152ac <_strtod_l+0xfc>
 80152da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80152de:	f04f 3aff 	mov.w	sl, #4294967295
 80152e2:	e7e3      	b.n	80152ac <_strtod_l+0xfc>
 80152e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80152e6:	1c5a      	adds	r2, r3, #1
 80152e8:	921d      	str	r2, [sp, #116]	; 0x74
 80152ea:	785b      	ldrb	r3, [r3, #1]
 80152ec:	2b30      	cmp	r3, #48	; 0x30
 80152ee:	d0f9      	beq.n	80152e4 <_strtod_l+0x134>
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d09f      	beq.n	8015234 <_strtod_l+0x84>
 80152f4:	2301      	movs	r3, #1
 80152f6:	f04f 0900 	mov.w	r9, #0
 80152fa:	9304      	str	r3, [sp, #16]
 80152fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80152fe:	930a      	str	r3, [sp, #40]	; 0x28
 8015300:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8015304:	464f      	mov	r7, r9
 8015306:	220a      	movs	r2, #10
 8015308:	981d      	ldr	r0, [sp, #116]	; 0x74
 801530a:	7806      	ldrb	r6, [r0, #0]
 801530c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8015310:	b2d9      	uxtb	r1, r3
 8015312:	2909      	cmp	r1, #9
 8015314:	d92a      	bls.n	801536c <_strtod_l+0x1bc>
 8015316:	9907      	ldr	r1, [sp, #28]
 8015318:	462a      	mov	r2, r5
 801531a:	f002 feee 	bl	80180fa <strncmp>
 801531e:	b398      	cbz	r0, 8015388 <_strtod_l+0x1d8>
 8015320:	2000      	movs	r0, #0
 8015322:	4633      	mov	r3, r6
 8015324:	463d      	mov	r5, r7
 8015326:	9007      	str	r0, [sp, #28]
 8015328:	4602      	mov	r2, r0
 801532a:	2b65      	cmp	r3, #101	; 0x65
 801532c:	d001      	beq.n	8015332 <_strtod_l+0x182>
 801532e:	2b45      	cmp	r3, #69	; 0x45
 8015330:	d118      	bne.n	8015364 <_strtod_l+0x1b4>
 8015332:	b91d      	cbnz	r5, 801533c <_strtod_l+0x18c>
 8015334:	9b04      	ldr	r3, [sp, #16]
 8015336:	4303      	orrs	r3, r0
 8015338:	d098      	beq.n	801526c <_strtod_l+0xbc>
 801533a:	2500      	movs	r5, #0
 801533c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8015340:	f108 0301 	add.w	r3, r8, #1
 8015344:	931d      	str	r3, [sp, #116]	; 0x74
 8015346:	f898 3001 	ldrb.w	r3, [r8, #1]
 801534a:	2b2b      	cmp	r3, #43	; 0x2b
 801534c:	d075      	beq.n	801543a <_strtod_l+0x28a>
 801534e:	2b2d      	cmp	r3, #45	; 0x2d
 8015350:	d07b      	beq.n	801544a <_strtod_l+0x29a>
 8015352:	f04f 0c00 	mov.w	ip, #0
 8015356:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801535a:	2909      	cmp	r1, #9
 801535c:	f240 8082 	bls.w	8015464 <_strtod_l+0x2b4>
 8015360:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8015364:	2600      	movs	r6, #0
 8015366:	e09d      	b.n	80154a4 <_strtod_l+0x2f4>
 8015368:	2300      	movs	r3, #0
 801536a:	e7c4      	b.n	80152f6 <_strtod_l+0x146>
 801536c:	2f08      	cmp	r7, #8
 801536e:	bfd8      	it	le
 8015370:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8015372:	f100 0001 	add.w	r0, r0, #1
 8015376:	bfda      	itte	le
 8015378:	fb02 3301 	mlale	r3, r2, r1, r3
 801537c:	9309      	strle	r3, [sp, #36]	; 0x24
 801537e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8015382:	3701      	adds	r7, #1
 8015384:	901d      	str	r0, [sp, #116]	; 0x74
 8015386:	e7bf      	b.n	8015308 <_strtod_l+0x158>
 8015388:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801538a:	195a      	adds	r2, r3, r5
 801538c:	921d      	str	r2, [sp, #116]	; 0x74
 801538e:	5d5b      	ldrb	r3, [r3, r5]
 8015390:	2f00      	cmp	r7, #0
 8015392:	d037      	beq.n	8015404 <_strtod_l+0x254>
 8015394:	9007      	str	r0, [sp, #28]
 8015396:	463d      	mov	r5, r7
 8015398:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801539c:	2a09      	cmp	r2, #9
 801539e:	d912      	bls.n	80153c6 <_strtod_l+0x216>
 80153a0:	2201      	movs	r2, #1
 80153a2:	e7c2      	b.n	801532a <_strtod_l+0x17a>
 80153a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153a6:	1c5a      	adds	r2, r3, #1
 80153a8:	921d      	str	r2, [sp, #116]	; 0x74
 80153aa:	785b      	ldrb	r3, [r3, #1]
 80153ac:	3001      	adds	r0, #1
 80153ae:	2b30      	cmp	r3, #48	; 0x30
 80153b0:	d0f8      	beq.n	80153a4 <_strtod_l+0x1f4>
 80153b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80153b6:	2a08      	cmp	r2, #8
 80153b8:	f200 84db 	bhi.w	8015d72 <_strtod_l+0xbc2>
 80153bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80153be:	9007      	str	r0, [sp, #28]
 80153c0:	2000      	movs	r0, #0
 80153c2:	920a      	str	r2, [sp, #40]	; 0x28
 80153c4:	4605      	mov	r5, r0
 80153c6:	3b30      	subs	r3, #48	; 0x30
 80153c8:	f100 0201 	add.w	r2, r0, #1
 80153cc:	d014      	beq.n	80153f8 <_strtod_l+0x248>
 80153ce:	9907      	ldr	r1, [sp, #28]
 80153d0:	4411      	add	r1, r2
 80153d2:	9107      	str	r1, [sp, #28]
 80153d4:	462a      	mov	r2, r5
 80153d6:	eb00 0e05 	add.w	lr, r0, r5
 80153da:	210a      	movs	r1, #10
 80153dc:	4572      	cmp	r2, lr
 80153de:	d113      	bne.n	8015408 <_strtod_l+0x258>
 80153e0:	182a      	adds	r2, r5, r0
 80153e2:	2a08      	cmp	r2, #8
 80153e4:	f105 0501 	add.w	r5, r5, #1
 80153e8:	4405      	add	r5, r0
 80153ea:	dc1c      	bgt.n	8015426 <_strtod_l+0x276>
 80153ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80153ee:	220a      	movs	r2, #10
 80153f0:	fb02 3301 	mla	r3, r2, r1, r3
 80153f4:	9309      	str	r3, [sp, #36]	; 0x24
 80153f6:	2200      	movs	r2, #0
 80153f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80153fa:	1c59      	adds	r1, r3, #1
 80153fc:	911d      	str	r1, [sp, #116]	; 0x74
 80153fe:	785b      	ldrb	r3, [r3, #1]
 8015400:	4610      	mov	r0, r2
 8015402:	e7c9      	b.n	8015398 <_strtod_l+0x1e8>
 8015404:	4638      	mov	r0, r7
 8015406:	e7d2      	b.n	80153ae <_strtod_l+0x1fe>
 8015408:	2a08      	cmp	r2, #8
 801540a:	dc04      	bgt.n	8015416 <_strtod_l+0x266>
 801540c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801540e:	434e      	muls	r6, r1
 8015410:	9609      	str	r6, [sp, #36]	; 0x24
 8015412:	3201      	adds	r2, #1
 8015414:	e7e2      	b.n	80153dc <_strtod_l+0x22c>
 8015416:	f102 0c01 	add.w	ip, r2, #1
 801541a:	f1bc 0f10 	cmp.w	ip, #16
 801541e:	bfd8      	it	le
 8015420:	fb01 f909 	mulle.w	r9, r1, r9
 8015424:	e7f5      	b.n	8015412 <_strtod_l+0x262>
 8015426:	2d10      	cmp	r5, #16
 8015428:	bfdc      	itt	le
 801542a:	220a      	movle	r2, #10
 801542c:	fb02 3909 	mlale	r9, r2, r9, r3
 8015430:	e7e1      	b.n	80153f6 <_strtod_l+0x246>
 8015432:	2300      	movs	r3, #0
 8015434:	9307      	str	r3, [sp, #28]
 8015436:	2201      	movs	r2, #1
 8015438:	e77c      	b.n	8015334 <_strtod_l+0x184>
 801543a:	f04f 0c00 	mov.w	ip, #0
 801543e:	f108 0302 	add.w	r3, r8, #2
 8015442:	931d      	str	r3, [sp, #116]	; 0x74
 8015444:	f898 3002 	ldrb.w	r3, [r8, #2]
 8015448:	e785      	b.n	8015356 <_strtod_l+0x1a6>
 801544a:	f04f 0c01 	mov.w	ip, #1
 801544e:	e7f6      	b.n	801543e <_strtod_l+0x28e>
 8015450:	08022ab0 	.word	0x08022ab0
 8015454:	0802287c 	.word	0x0802287c
 8015458:	7ff00000 	.word	0x7ff00000
 801545c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801545e:	1c59      	adds	r1, r3, #1
 8015460:	911d      	str	r1, [sp, #116]	; 0x74
 8015462:	785b      	ldrb	r3, [r3, #1]
 8015464:	2b30      	cmp	r3, #48	; 0x30
 8015466:	d0f9      	beq.n	801545c <_strtod_l+0x2ac>
 8015468:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801546c:	2908      	cmp	r1, #8
 801546e:	f63f af79 	bhi.w	8015364 <_strtod_l+0x1b4>
 8015472:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8015476:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015478:	9308      	str	r3, [sp, #32]
 801547a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801547c:	1c59      	adds	r1, r3, #1
 801547e:	911d      	str	r1, [sp, #116]	; 0x74
 8015480:	785b      	ldrb	r3, [r3, #1]
 8015482:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8015486:	2e09      	cmp	r6, #9
 8015488:	d937      	bls.n	80154fa <_strtod_l+0x34a>
 801548a:	9e08      	ldr	r6, [sp, #32]
 801548c:	1b89      	subs	r1, r1, r6
 801548e:	2908      	cmp	r1, #8
 8015490:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8015494:	dc02      	bgt.n	801549c <_strtod_l+0x2ec>
 8015496:	4576      	cmp	r6, lr
 8015498:	bfa8      	it	ge
 801549a:	4676      	movge	r6, lr
 801549c:	f1bc 0f00 	cmp.w	ip, #0
 80154a0:	d000      	beq.n	80154a4 <_strtod_l+0x2f4>
 80154a2:	4276      	negs	r6, r6
 80154a4:	2d00      	cmp	r5, #0
 80154a6:	d14f      	bne.n	8015548 <_strtod_l+0x398>
 80154a8:	9904      	ldr	r1, [sp, #16]
 80154aa:	4301      	orrs	r1, r0
 80154ac:	f47f aec2 	bne.w	8015234 <_strtod_l+0x84>
 80154b0:	2a00      	cmp	r2, #0
 80154b2:	f47f aedb 	bne.w	801526c <_strtod_l+0xbc>
 80154b6:	2b69      	cmp	r3, #105	; 0x69
 80154b8:	d027      	beq.n	801550a <_strtod_l+0x35a>
 80154ba:	dc24      	bgt.n	8015506 <_strtod_l+0x356>
 80154bc:	2b49      	cmp	r3, #73	; 0x49
 80154be:	d024      	beq.n	801550a <_strtod_l+0x35a>
 80154c0:	2b4e      	cmp	r3, #78	; 0x4e
 80154c2:	f47f aed3 	bne.w	801526c <_strtod_l+0xbc>
 80154c6:	499e      	ldr	r1, [pc, #632]	; (8015740 <_strtod_l+0x590>)
 80154c8:	a81d      	add	r0, sp, #116	; 0x74
 80154ca:	f001 facb 	bl	8016a64 <__match>
 80154ce:	2800      	cmp	r0, #0
 80154d0:	f43f aecc 	beq.w	801526c <_strtod_l+0xbc>
 80154d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80154d6:	781b      	ldrb	r3, [r3, #0]
 80154d8:	2b28      	cmp	r3, #40	; 0x28
 80154da:	d12d      	bne.n	8015538 <_strtod_l+0x388>
 80154dc:	4999      	ldr	r1, [pc, #612]	; (8015744 <_strtod_l+0x594>)
 80154de:	aa20      	add	r2, sp, #128	; 0x80
 80154e0:	a81d      	add	r0, sp, #116	; 0x74
 80154e2:	f001 fad3 	bl	8016a8c <__hexnan>
 80154e6:	2805      	cmp	r0, #5
 80154e8:	d126      	bne.n	8015538 <_strtod_l+0x388>
 80154ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80154ec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80154f0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80154f4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80154f8:	e69c      	b.n	8015234 <_strtod_l+0x84>
 80154fa:	210a      	movs	r1, #10
 80154fc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8015500:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8015504:	e7b9      	b.n	801547a <_strtod_l+0x2ca>
 8015506:	2b6e      	cmp	r3, #110	; 0x6e
 8015508:	e7db      	b.n	80154c2 <_strtod_l+0x312>
 801550a:	498f      	ldr	r1, [pc, #572]	; (8015748 <_strtod_l+0x598>)
 801550c:	a81d      	add	r0, sp, #116	; 0x74
 801550e:	f001 faa9 	bl	8016a64 <__match>
 8015512:	2800      	cmp	r0, #0
 8015514:	f43f aeaa 	beq.w	801526c <_strtod_l+0xbc>
 8015518:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801551a:	498c      	ldr	r1, [pc, #560]	; (801574c <_strtod_l+0x59c>)
 801551c:	3b01      	subs	r3, #1
 801551e:	a81d      	add	r0, sp, #116	; 0x74
 8015520:	931d      	str	r3, [sp, #116]	; 0x74
 8015522:	f001 fa9f 	bl	8016a64 <__match>
 8015526:	b910      	cbnz	r0, 801552e <_strtod_l+0x37e>
 8015528:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801552a:	3301      	adds	r3, #1
 801552c:	931d      	str	r3, [sp, #116]	; 0x74
 801552e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801575c <_strtod_l+0x5ac>
 8015532:	f04f 0a00 	mov.w	sl, #0
 8015536:	e67d      	b.n	8015234 <_strtod_l+0x84>
 8015538:	4885      	ldr	r0, [pc, #532]	; (8015750 <_strtod_l+0x5a0>)
 801553a:	f002 fd7d 	bl	8018038 <nan>
 801553e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8015542:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8015546:	e675      	b.n	8015234 <_strtod_l+0x84>
 8015548:	9b07      	ldr	r3, [sp, #28]
 801554a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801554c:	1af3      	subs	r3, r6, r3
 801554e:	2f00      	cmp	r7, #0
 8015550:	bf08      	it	eq
 8015552:	462f      	moveq	r7, r5
 8015554:	2d10      	cmp	r5, #16
 8015556:	9308      	str	r3, [sp, #32]
 8015558:	46a8      	mov	r8, r5
 801555a:	bfa8      	it	ge
 801555c:	f04f 0810 	movge.w	r8, #16
 8015560:	f7ea ffe8 	bl	8000534 <__aeabi_ui2d>
 8015564:	2d09      	cmp	r5, #9
 8015566:	4682      	mov	sl, r0
 8015568:	468b      	mov	fp, r1
 801556a:	dd13      	ble.n	8015594 <_strtod_l+0x3e4>
 801556c:	4b79      	ldr	r3, [pc, #484]	; (8015754 <_strtod_l+0x5a4>)
 801556e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8015572:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8015576:	f7eb f857 	bl	8000628 <__aeabi_dmul>
 801557a:	4682      	mov	sl, r0
 801557c:	4648      	mov	r0, r9
 801557e:	468b      	mov	fp, r1
 8015580:	f7ea ffd8 	bl	8000534 <__aeabi_ui2d>
 8015584:	4602      	mov	r2, r0
 8015586:	460b      	mov	r3, r1
 8015588:	4650      	mov	r0, sl
 801558a:	4659      	mov	r1, fp
 801558c:	f7ea fe96 	bl	80002bc <__adddf3>
 8015590:	4682      	mov	sl, r0
 8015592:	468b      	mov	fp, r1
 8015594:	2d0f      	cmp	r5, #15
 8015596:	dc38      	bgt.n	801560a <_strtod_l+0x45a>
 8015598:	9b08      	ldr	r3, [sp, #32]
 801559a:	2b00      	cmp	r3, #0
 801559c:	f43f ae4a 	beq.w	8015234 <_strtod_l+0x84>
 80155a0:	dd24      	ble.n	80155ec <_strtod_l+0x43c>
 80155a2:	2b16      	cmp	r3, #22
 80155a4:	dc0b      	bgt.n	80155be <_strtod_l+0x40e>
 80155a6:	4d6b      	ldr	r5, [pc, #428]	; (8015754 <_strtod_l+0x5a4>)
 80155a8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80155ac:	e9d5 0100 	ldrd	r0, r1, [r5]
 80155b0:	4652      	mov	r2, sl
 80155b2:	465b      	mov	r3, fp
 80155b4:	f7eb f838 	bl	8000628 <__aeabi_dmul>
 80155b8:	4682      	mov	sl, r0
 80155ba:	468b      	mov	fp, r1
 80155bc:	e63a      	b.n	8015234 <_strtod_l+0x84>
 80155be:	9a08      	ldr	r2, [sp, #32]
 80155c0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80155c4:	4293      	cmp	r3, r2
 80155c6:	db20      	blt.n	801560a <_strtod_l+0x45a>
 80155c8:	4c62      	ldr	r4, [pc, #392]	; (8015754 <_strtod_l+0x5a4>)
 80155ca:	f1c5 050f 	rsb	r5, r5, #15
 80155ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80155d2:	4652      	mov	r2, sl
 80155d4:	465b      	mov	r3, fp
 80155d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80155da:	f7eb f825 	bl	8000628 <__aeabi_dmul>
 80155de:	9b08      	ldr	r3, [sp, #32]
 80155e0:	1b5d      	subs	r5, r3, r5
 80155e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80155e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80155ea:	e7e3      	b.n	80155b4 <_strtod_l+0x404>
 80155ec:	9b08      	ldr	r3, [sp, #32]
 80155ee:	3316      	adds	r3, #22
 80155f0:	db0b      	blt.n	801560a <_strtod_l+0x45a>
 80155f2:	9b07      	ldr	r3, [sp, #28]
 80155f4:	4a57      	ldr	r2, [pc, #348]	; (8015754 <_strtod_l+0x5a4>)
 80155f6:	1b9e      	subs	r6, r3, r6
 80155f8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80155fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8015600:	4650      	mov	r0, sl
 8015602:	4659      	mov	r1, fp
 8015604:	f7eb f93a 	bl	800087c <__aeabi_ddiv>
 8015608:	e7d6      	b.n	80155b8 <_strtod_l+0x408>
 801560a:	9b08      	ldr	r3, [sp, #32]
 801560c:	eba5 0808 	sub.w	r8, r5, r8
 8015610:	4498      	add	r8, r3
 8015612:	f1b8 0f00 	cmp.w	r8, #0
 8015616:	dd71      	ble.n	80156fc <_strtod_l+0x54c>
 8015618:	f018 030f 	ands.w	r3, r8, #15
 801561c:	d00a      	beq.n	8015634 <_strtod_l+0x484>
 801561e:	494d      	ldr	r1, [pc, #308]	; (8015754 <_strtod_l+0x5a4>)
 8015620:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8015624:	4652      	mov	r2, sl
 8015626:	465b      	mov	r3, fp
 8015628:	e9d1 0100 	ldrd	r0, r1, [r1]
 801562c:	f7ea fffc 	bl	8000628 <__aeabi_dmul>
 8015630:	4682      	mov	sl, r0
 8015632:	468b      	mov	fp, r1
 8015634:	f038 080f 	bics.w	r8, r8, #15
 8015638:	d04d      	beq.n	80156d6 <_strtod_l+0x526>
 801563a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801563e:	dd22      	ble.n	8015686 <_strtod_l+0x4d6>
 8015640:	2500      	movs	r5, #0
 8015642:	462e      	mov	r6, r5
 8015644:	9509      	str	r5, [sp, #36]	; 0x24
 8015646:	9507      	str	r5, [sp, #28]
 8015648:	2322      	movs	r3, #34	; 0x22
 801564a:	f8df b110 	ldr.w	fp, [pc, #272]	; 801575c <_strtod_l+0x5ac>
 801564e:	6023      	str	r3, [r4, #0]
 8015650:	f04f 0a00 	mov.w	sl, #0
 8015654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015656:	2b00      	cmp	r3, #0
 8015658:	f43f adec 	beq.w	8015234 <_strtod_l+0x84>
 801565c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801565e:	4620      	mov	r0, r4
 8015660:	f001 fb6a 	bl	8016d38 <_Bfree>
 8015664:	9907      	ldr	r1, [sp, #28]
 8015666:	4620      	mov	r0, r4
 8015668:	f001 fb66 	bl	8016d38 <_Bfree>
 801566c:	4631      	mov	r1, r6
 801566e:	4620      	mov	r0, r4
 8015670:	f001 fb62 	bl	8016d38 <_Bfree>
 8015674:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015676:	4620      	mov	r0, r4
 8015678:	f001 fb5e 	bl	8016d38 <_Bfree>
 801567c:	4629      	mov	r1, r5
 801567e:	4620      	mov	r0, r4
 8015680:	f001 fb5a 	bl	8016d38 <_Bfree>
 8015684:	e5d6      	b.n	8015234 <_strtod_l+0x84>
 8015686:	2300      	movs	r3, #0
 8015688:	ea4f 1828 	mov.w	r8, r8, asr #4
 801568c:	4650      	mov	r0, sl
 801568e:	4659      	mov	r1, fp
 8015690:	4699      	mov	r9, r3
 8015692:	f1b8 0f01 	cmp.w	r8, #1
 8015696:	dc21      	bgt.n	80156dc <_strtod_l+0x52c>
 8015698:	b10b      	cbz	r3, 801569e <_strtod_l+0x4ee>
 801569a:	4682      	mov	sl, r0
 801569c:	468b      	mov	fp, r1
 801569e:	4b2e      	ldr	r3, [pc, #184]	; (8015758 <_strtod_l+0x5a8>)
 80156a0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80156a4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80156a8:	4652      	mov	r2, sl
 80156aa:	465b      	mov	r3, fp
 80156ac:	e9d9 0100 	ldrd	r0, r1, [r9]
 80156b0:	f7ea ffba 	bl	8000628 <__aeabi_dmul>
 80156b4:	4b29      	ldr	r3, [pc, #164]	; (801575c <_strtod_l+0x5ac>)
 80156b6:	460a      	mov	r2, r1
 80156b8:	400b      	ands	r3, r1
 80156ba:	4929      	ldr	r1, [pc, #164]	; (8015760 <_strtod_l+0x5b0>)
 80156bc:	428b      	cmp	r3, r1
 80156be:	4682      	mov	sl, r0
 80156c0:	d8be      	bhi.n	8015640 <_strtod_l+0x490>
 80156c2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80156c6:	428b      	cmp	r3, r1
 80156c8:	bf86      	itte	hi
 80156ca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8015764 <_strtod_l+0x5b4>
 80156ce:	f04f 3aff 	movhi.w	sl, #4294967295
 80156d2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80156d6:	2300      	movs	r3, #0
 80156d8:	9304      	str	r3, [sp, #16]
 80156da:	e081      	b.n	80157e0 <_strtod_l+0x630>
 80156dc:	f018 0f01 	tst.w	r8, #1
 80156e0:	d007      	beq.n	80156f2 <_strtod_l+0x542>
 80156e2:	4b1d      	ldr	r3, [pc, #116]	; (8015758 <_strtod_l+0x5a8>)
 80156e4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80156e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156ec:	f7ea ff9c 	bl	8000628 <__aeabi_dmul>
 80156f0:	2301      	movs	r3, #1
 80156f2:	f109 0901 	add.w	r9, r9, #1
 80156f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80156fa:	e7ca      	b.n	8015692 <_strtod_l+0x4e2>
 80156fc:	d0eb      	beq.n	80156d6 <_strtod_l+0x526>
 80156fe:	f1c8 0800 	rsb	r8, r8, #0
 8015702:	f018 020f 	ands.w	r2, r8, #15
 8015706:	d00a      	beq.n	801571e <_strtod_l+0x56e>
 8015708:	4b12      	ldr	r3, [pc, #72]	; (8015754 <_strtod_l+0x5a4>)
 801570a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801570e:	4650      	mov	r0, sl
 8015710:	4659      	mov	r1, fp
 8015712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015716:	f7eb f8b1 	bl	800087c <__aeabi_ddiv>
 801571a:	4682      	mov	sl, r0
 801571c:	468b      	mov	fp, r1
 801571e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8015722:	d0d8      	beq.n	80156d6 <_strtod_l+0x526>
 8015724:	f1b8 0f1f 	cmp.w	r8, #31
 8015728:	dd1e      	ble.n	8015768 <_strtod_l+0x5b8>
 801572a:	2500      	movs	r5, #0
 801572c:	462e      	mov	r6, r5
 801572e:	9509      	str	r5, [sp, #36]	; 0x24
 8015730:	9507      	str	r5, [sp, #28]
 8015732:	2322      	movs	r3, #34	; 0x22
 8015734:	f04f 0a00 	mov.w	sl, #0
 8015738:	f04f 0b00 	mov.w	fp, #0
 801573c:	6023      	str	r3, [r4, #0]
 801573e:	e789      	b.n	8015654 <_strtod_l+0x4a4>
 8015740:	08022879 	.word	0x08022879
 8015744:	08022890 	.word	0x08022890
 8015748:	08022870 	.word	0x08022870
 801574c:	08022873 	.word	0x08022873
 8015750:	08022caa 	.word	0x08022caa
 8015754:	08022b68 	.word	0x08022b68
 8015758:	08022b40 	.word	0x08022b40
 801575c:	7ff00000 	.word	0x7ff00000
 8015760:	7ca00000 	.word	0x7ca00000
 8015764:	7fefffff 	.word	0x7fefffff
 8015768:	f018 0310 	ands.w	r3, r8, #16
 801576c:	bf18      	it	ne
 801576e:	236a      	movne	r3, #106	; 0x6a
 8015770:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8015b28 <_strtod_l+0x978>
 8015774:	9304      	str	r3, [sp, #16]
 8015776:	4650      	mov	r0, sl
 8015778:	4659      	mov	r1, fp
 801577a:	2300      	movs	r3, #0
 801577c:	f018 0f01 	tst.w	r8, #1
 8015780:	d004      	beq.n	801578c <_strtod_l+0x5dc>
 8015782:	e9d9 2300 	ldrd	r2, r3, [r9]
 8015786:	f7ea ff4f 	bl	8000628 <__aeabi_dmul>
 801578a:	2301      	movs	r3, #1
 801578c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8015790:	f109 0908 	add.w	r9, r9, #8
 8015794:	d1f2      	bne.n	801577c <_strtod_l+0x5cc>
 8015796:	b10b      	cbz	r3, 801579c <_strtod_l+0x5ec>
 8015798:	4682      	mov	sl, r0
 801579a:	468b      	mov	fp, r1
 801579c:	9b04      	ldr	r3, [sp, #16]
 801579e:	b1bb      	cbz	r3, 80157d0 <_strtod_l+0x620>
 80157a0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80157a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	4659      	mov	r1, fp
 80157ac:	dd10      	ble.n	80157d0 <_strtod_l+0x620>
 80157ae:	2b1f      	cmp	r3, #31
 80157b0:	f340 8128 	ble.w	8015a04 <_strtod_l+0x854>
 80157b4:	2b34      	cmp	r3, #52	; 0x34
 80157b6:	bfde      	ittt	le
 80157b8:	3b20      	suble	r3, #32
 80157ba:	f04f 32ff 	movle.w	r2, #4294967295
 80157be:	fa02 f303 	lslle.w	r3, r2, r3
 80157c2:	f04f 0a00 	mov.w	sl, #0
 80157c6:	bfcc      	ite	gt
 80157c8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80157cc:	ea03 0b01 	andle.w	fp, r3, r1
 80157d0:	2200      	movs	r2, #0
 80157d2:	2300      	movs	r3, #0
 80157d4:	4650      	mov	r0, sl
 80157d6:	4659      	mov	r1, fp
 80157d8:	f7eb f98e 	bl	8000af8 <__aeabi_dcmpeq>
 80157dc:	2800      	cmp	r0, #0
 80157de:	d1a4      	bne.n	801572a <_strtod_l+0x57a>
 80157e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80157e6:	462b      	mov	r3, r5
 80157e8:	463a      	mov	r2, r7
 80157ea:	4620      	mov	r0, r4
 80157ec:	f001 fb10 	bl	8016e10 <__s2b>
 80157f0:	9009      	str	r0, [sp, #36]	; 0x24
 80157f2:	2800      	cmp	r0, #0
 80157f4:	f43f af24 	beq.w	8015640 <_strtod_l+0x490>
 80157f8:	9b07      	ldr	r3, [sp, #28]
 80157fa:	1b9e      	subs	r6, r3, r6
 80157fc:	9b08      	ldr	r3, [sp, #32]
 80157fe:	2b00      	cmp	r3, #0
 8015800:	bfb4      	ite	lt
 8015802:	4633      	movlt	r3, r6
 8015804:	2300      	movge	r3, #0
 8015806:	9310      	str	r3, [sp, #64]	; 0x40
 8015808:	9b08      	ldr	r3, [sp, #32]
 801580a:	2500      	movs	r5, #0
 801580c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015810:	9318      	str	r3, [sp, #96]	; 0x60
 8015812:	462e      	mov	r6, r5
 8015814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015816:	4620      	mov	r0, r4
 8015818:	6859      	ldr	r1, [r3, #4]
 801581a:	f001 fa4d 	bl	8016cb8 <_Balloc>
 801581e:	9007      	str	r0, [sp, #28]
 8015820:	2800      	cmp	r0, #0
 8015822:	f43f af11 	beq.w	8015648 <_strtod_l+0x498>
 8015826:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015828:	691a      	ldr	r2, [r3, #16]
 801582a:	3202      	adds	r2, #2
 801582c:	f103 010c 	add.w	r1, r3, #12
 8015830:	0092      	lsls	r2, r2, #2
 8015832:	300c      	adds	r0, #12
 8015834:	f7ff fbf4 	bl	8015020 <memcpy>
 8015838:	ec4b ab10 	vmov	d0, sl, fp
 801583c:	aa20      	add	r2, sp, #128	; 0x80
 801583e:	a91f      	add	r1, sp, #124	; 0x7c
 8015840:	4620      	mov	r0, r4
 8015842:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8015846:	f001 fe1f 	bl	8017488 <__d2b>
 801584a:	901e      	str	r0, [sp, #120]	; 0x78
 801584c:	2800      	cmp	r0, #0
 801584e:	f43f aefb 	beq.w	8015648 <_strtod_l+0x498>
 8015852:	2101      	movs	r1, #1
 8015854:	4620      	mov	r0, r4
 8015856:	f001 fb75 	bl	8016f44 <__i2b>
 801585a:	4606      	mov	r6, r0
 801585c:	2800      	cmp	r0, #0
 801585e:	f43f aef3 	beq.w	8015648 <_strtod_l+0x498>
 8015862:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8015864:	9904      	ldr	r1, [sp, #16]
 8015866:	2b00      	cmp	r3, #0
 8015868:	bfab      	itete	ge
 801586a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801586c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801586e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8015870:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8015874:	bfac      	ite	ge
 8015876:	eb03 0902 	addge.w	r9, r3, r2
 801587a:	1ad7      	sublt	r7, r2, r3
 801587c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801587e:	eba3 0801 	sub.w	r8, r3, r1
 8015882:	4490      	add	r8, r2
 8015884:	4ba3      	ldr	r3, [pc, #652]	; (8015b14 <_strtod_l+0x964>)
 8015886:	f108 38ff 	add.w	r8, r8, #4294967295
 801588a:	4598      	cmp	r8, r3
 801588c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8015890:	f280 80cc 	bge.w	8015a2c <_strtod_l+0x87c>
 8015894:	eba3 0308 	sub.w	r3, r3, r8
 8015898:	2b1f      	cmp	r3, #31
 801589a:	eba2 0203 	sub.w	r2, r2, r3
 801589e:	f04f 0101 	mov.w	r1, #1
 80158a2:	f300 80b6 	bgt.w	8015a12 <_strtod_l+0x862>
 80158a6:	fa01 f303 	lsl.w	r3, r1, r3
 80158aa:	9311      	str	r3, [sp, #68]	; 0x44
 80158ac:	2300      	movs	r3, #0
 80158ae:	930c      	str	r3, [sp, #48]	; 0x30
 80158b0:	eb09 0802 	add.w	r8, r9, r2
 80158b4:	9b04      	ldr	r3, [sp, #16]
 80158b6:	45c1      	cmp	r9, r8
 80158b8:	4417      	add	r7, r2
 80158ba:	441f      	add	r7, r3
 80158bc:	464b      	mov	r3, r9
 80158be:	bfa8      	it	ge
 80158c0:	4643      	movge	r3, r8
 80158c2:	42bb      	cmp	r3, r7
 80158c4:	bfa8      	it	ge
 80158c6:	463b      	movge	r3, r7
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	bfc2      	ittt	gt
 80158cc:	eba8 0803 	subgt.w	r8, r8, r3
 80158d0:	1aff      	subgt	r7, r7, r3
 80158d2:	eba9 0903 	subgt.w	r9, r9, r3
 80158d6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80158d8:	2b00      	cmp	r3, #0
 80158da:	dd17      	ble.n	801590c <_strtod_l+0x75c>
 80158dc:	4631      	mov	r1, r6
 80158de:	461a      	mov	r2, r3
 80158e0:	4620      	mov	r0, r4
 80158e2:	f001 fbeb 	bl	80170bc <__pow5mult>
 80158e6:	4606      	mov	r6, r0
 80158e8:	2800      	cmp	r0, #0
 80158ea:	f43f aead 	beq.w	8015648 <_strtod_l+0x498>
 80158ee:	4601      	mov	r1, r0
 80158f0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80158f2:	4620      	mov	r0, r4
 80158f4:	f001 fb3c 	bl	8016f70 <__multiply>
 80158f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80158fa:	2800      	cmp	r0, #0
 80158fc:	f43f aea4 	beq.w	8015648 <_strtod_l+0x498>
 8015900:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015902:	4620      	mov	r0, r4
 8015904:	f001 fa18 	bl	8016d38 <_Bfree>
 8015908:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801590a:	931e      	str	r3, [sp, #120]	; 0x78
 801590c:	f1b8 0f00 	cmp.w	r8, #0
 8015910:	f300 8091 	bgt.w	8015a36 <_strtod_l+0x886>
 8015914:	9b08      	ldr	r3, [sp, #32]
 8015916:	2b00      	cmp	r3, #0
 8015918:	dd08      	ble.n	801592c <_strtod_l+0x77c>
 801591a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801591c:	9907      	ldr	r1, [sp, #28]
 801591e:	4620      	mov	r0, r4
 8015920:	f001 fbcc 	bl	80170bc <__pow5mult>
 8015924:	9007      	str	r0, [sp, #28]
 8015926:	2800      	cmp	r0, #0
 8015928:	f43f ae8e 	beq.w	8015648 <_strtod_l+0x498>
 801592c:	2f00      	cmp	r7, #0
 801592e:	dd08      	ble.n	8015942 <_strtod_l+0x792>
 8015930:	9907      	ldr	r1, [sp, #28]
 8015932:	463a      	mov	r2, r7
 8015934:	4620      	mov	r0, r4
 8015936:	f001 fc1b 	bl	8017170 <__lshift>
 801593a:	9007      	str	r0, [sp, #28]
 801593c:	2800      	cmp	r0, #0
 801593e:	f43f ae83 	beq.w	8015648 <_strtod_l+0x498>
 8015942:	f1b9 0f00 	cmp.w	r9, #0
 8015946:	dd08      	ble.n	801595a <_strtod_l+0x7aa>
 8015948:	4631      	mov	r1, r6
 801594a:	464a      	mov	r2, r9
 801594c:	4620      	mov	r0, r4
 801594e:	f001 fc0f 	bl	8017170 <__lshift>
 8015952:	4606      	mov	r6, r0
 8015954:	2800      	cmp	r0, #0
 8015956:	f43f ae77 	beq.w	8015648 <_strtod_l+0x498>
 801595a:	9a07      	ldr	r2, [sp, #28]
 801595c:	991e      	ldr	r1, [sp, #120]	; 0x78
 801595e:	4620      	mov	r0, r4
 8015960:	f001 fc8e 	bl	8017280 <__mdiff>
 8015964:	4605      	mov	r5, r0
 8015966:	2800      	cmp	r0, #0
 8015968:	f43f ae6e 	beq.w	8015648 <_strtod_l+0x498>
 801596c:	68c3      	ldr	r3, [r0, #12]
 801596e:	930f      	str	r3, [sp, #60]	; 0x3c
 8015970:	2300      	movs	r3, #0
 8015972:	60c3      	str	r3, [r0, #12]
 8015974:	4631      	mov	r1, r6
 8015976:	f001 fc67 	bl	8017248 <__mcmp>
 801597a:	2800      	cmp	r0, #0
 801597c:	da65      	bge.n	8015a4a <_strtod_l+0x89a>
 801597e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015980:	ea53 030a 	orrs.w	r3, r3, sl
 8015984:	f040 8087 	bne.w	8015a96 <_strtod_l+0x8e6>
 8015988:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801598c:	2b00      	cmp	r3, #0
 801598e:	f040 8082 	bne.w	8015a96 <_strtod_l+0x8e6>
 8015992:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015996:	0d1b      	lsrs	r3, r3, #20
 8015998:	051b      	lsls	r3, r3, #20
 801599a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801599e:	d97a      	bls.n	8015a96 <_strtod_l+0x8e6>
 80159a0:	696b      	ldr	r3, [r5, #20]
 80159a2:	b913      	cbnz	r3, 80159aa <_strtod_l+0x7fa>
 80159a4:	692b      	ldr	r3, [r5, #16]
 80159a6:	2b01      	cmp	r3, #1
 80159a8:	dd75      	ble.n	8015a96 <_strtod_l+0x8e6>
 80159aa:	4629      	mov	r1, r5
 80159ac:	2201      	movs	r2, #1
 80159ae:	4620      	mov	r0, r4
 80159b0:	f001 fbde 	bl	8017170 <__lshift>
 80159b4:	4631      	mov	r1, r6
 80159b6:	4605      	mov	r5, r0
 80159b8:	f001 fc46 	bl	8017248 <__mcmp>
 80159bc:	2800      	cmp	r0, #0
 80159be:	dd6a      	ble.n	8015a96 <_strtod_l+0x8e6>
 80159c0:	9904      	ldr	r1, [sp, #16]
 80159c2:	4a55      	ldr	r2, [pc, #340]	; (8015b18 <_strtod_l+0x968>)
 80159c4:	465b      	mov	r3, fp
 80159c6:	2900      	cmp	r1, #0
 80159c8:	f000 8085 	beq.w	8015ad6 <_strtod_l+0x926>
 80159cc:	ea02 010b 	and.w	r1, r2, fp
 80159d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80159d4:	dc7f      	bgt.n	8015ad6 <_strtod_l+0x926>
 80159d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80159da:	f77f aeaa 	ble.w	8015732 <_strtod_l+0x582>
 80159de:	4a4f      	ldr	r2, [pc, #316]	; (8015b1c <_strtod_l+0x96c>)
 80159e0:	2300      	movs	r3, #0
 80159e2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 80159e6:	4650      	mov	r0, sl
 80159e8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 80159ec:	4659      	mov	r1, fp
 80159ee:	f7ea fe1b 	bl	8000628 <__aeabi_dmul>
 80159f2:	460b      	mov	r3, r1
 80159f4:	4303      	orrs	r3, r0
 80159f6:	bf08      	it	eq
 80159f8:	2322      	moveq	r3, #34	; 0x22
 80159fa:	4682      	mov	sl, r0
 80159fc:	468b      	mov	fp, r1
 80159fe:	bf08      	it	eq
 8015a00:	6023      	streq	r3, [r4, #0]
 8015a02:	e62b      	b.n	801565c <_strtod_l+0x4ac>
 8015a04:	f04f 32ff 	mov.w	r2, #4294967295
 8015a08:	fa02 f303 	lsl.w	r3, r2, r3
 8015a0c:	ea03 0a0a 	and.w	sl, r3, sl
 8015a10:	e6de      	b.n	80157d0 <_strtod_l+0x620>
 8015a12:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8015a16:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8015a1a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8015a1e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8015a22:	fa01 f308 	lsl.w	r3, r1, r8
 8015a26:	930c      	str	r3, [sp, #48]	; 0x30
 8015a28:	9111      	str	r1, [sp, #68]	; 0x44
 8015a2a:	e741      	b.n	80158b0 <_strtod_l+0x700>
 8015a2c:	2300      	movs	r3, #0
 8015a2e:	930c      	str	r3, [sp, #48]	; 0x30
 8015a30:	2301      	movs	r3, #1
 8015a32:	9311      	str	r3, [sp, #68]	; 0x44
 8015a34:	e73c      	b.n	80158b0 <_strtod_l+0x700>
 8015a36:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015a38:	4642      	mov	r2, r8
 8015a3a:	4620      	mov	r0, r4
 8015a3c:	f001 fb98 	bl	8017170 <__lshift>
 8015a40:	901e      	str	r0, [sp, #120]	; 0x78
 8015a42:	2800      	cmp	r0, #0
 8015a44:	f47f af66 	bne.w	8015914 <_strtod_l+0x764>
 8015a48:	e5fe      	b.n	8015648 <_strtod_l+0x498>
 8015a4a:	465f      	mov	r7, fp
 8015a4c:	d16e      	bne.n	8015b2c <_strtod_l+0x97c>
 8015a4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015a50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015a54:	b342      	cbz	r2, 8015aa8 <_strtod_l+0x8f8>
 8015a56:	4a32      	ldr	r2, [pc, #200]	; (8015b20 <_strtod_l+0x970>)
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	d128      	bne.n	8015aae <_strtod_l+0x8fe>
 8015a5c:	9b04      	ldr	r3, [sp, #16]
 8015a5e:	4650      	mov	r0, sl
 8015a60:	b1eb      	cbz	r3, 8015a9e <_strtod_l+0x8ee>
 8015a62:	4a2d      	ldr	r2, [pc, #180]	; (8015b18 <_strtod_l+0x968>)
 8015a64:	403a      	ands	r2, r7
 8015a66:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8015a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8015a6e:	d819      	bhi.n	8015aa4 <_strtod_l+0x8f4>
 8015a70:	0d12      	lsrs	r2, r2, #20
 8015a72:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8015a76:	fa01 f303 	lsl.w	r3, r1, r3
 8015a7a:	4298      	cmp	r0, r3
 8015a7c:	d117      	bne.n	8015aae <_strtod_l+0x8fe>
 8015a7e:	4b29      	ldr	r3, [pc, #164]	; (8015b24 <_strtod_l+0x974>)
 8015a80:	429f      	cmp	r7, r3
 8015a82:	d102      	bne.n	8015a8a <_strtod_l+0x8da>
 8015a84:	3001      	adds	r0, #1
 8015a86:	f43f addf 	beq.w	8015648 <_strtod_l+0x498>
 8015a8a:	4b23      	ldr	r3, [pc, #140]	; (8015b18 <_strtod_l+0x968>)
 8015a8c:	403b      	ands	r3, r7
 8015a8e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8015a92:	f04f 0a00 	mov.w	sl, #0
 8015a96:	9b04      	ldr	r3, [sp, #16]
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d1a0      	bne.n	80159de <_strtod_l+0x82e>
 8015a9c:	e5de      	b.n	801565c <_strtod_l+0x4ac>
 8015a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8015aa2:	e7ea      	b.n	8015a7a <_strtod_l+0x8ca>
 8015aa4:	460b      	mov	r3, r1
 8015aa6:	e7e8      	b.n	8015a7a <_strtod_l+0x8ca>
 8015aa8:	ea53 030a 	orrs.w	r3, r3, sl
 8015aac:	d088      	beq.n	80159c0 <_strtod_l+0x810>
 8015aae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8015ab0:	b1db      	cbz	r3, 8015aea <_strtod_l+0x93a>
 8015ab2:	423b      	tst	r3, r7
 8015ab4:	d0ef      	beq.n	8015a96 <_strtod_l+0x8e6>
 8015ab6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015ab8:	9a04      	ldr	r2, [sp, #16]
 8015aba:	4650      	mov	r0, sl
 8015abc:	4659      	mov	r1, fp
 8015abe:	b1c3      	cbz	r3, 8015af2 <_strtod_l+0x942>
 8015ac0:	f7ff fb5a 	bl	8015178 <sulp>
 8015ac4:	4602      	mov	r2, r0
 8015ac6:	460b      	mov	r3, r1
 8015ac8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015acc:	f7ea fbf6 	bl	80002bc <__adddf3>
 8015ad0:	4682      	mov	sl, r0
 8015ad2:	468b      	mov	fp, r1
 8015ad4:	e7df      	b.n	8015a96 <_strtod_l+0x8e6>
 8015ad6:	4013      	ands	r3, r2
 8015ad8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8015adc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8015ae0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8015ae4:	f04f 3aff 	mov.w	sl, #4294967295
 8015ae8:	e7d5      	b.n	8015a96 <_strtod_l+0x8e6>
 8015aea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015aec:	ea13 0f0a 	tst.w	r3, sl
 8015af0:	e7e0      	b.n	8015ab4 <_strtod_l+0x904>
 8015af2:	f7ff fb41 	bl	8015178 <sulp>
 8015af6:	4602      	mov	r2, r0
 8015af8:	460b      	mov	r3, r1
 8015afa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8015afe:	f7ea fbdb 	bl	80002b8 <__aeabi_dsub>
 8015b02:	2200      	movs	r2, #0
 8015b04:	2300      	movs	r3, #0
 8015b06:	4682      	mov	sl, r0
 8015b08:	468b      	mov	fp, r1
 8015b0a:	f7ea fff5 	bl	8000af8 <__aeabi_dcmpeq>
 8015b0e:	2800      	cmp	r0, #0
 8015b10:	d0c1      	beq.n	8015a96 <_strtod_l+0x8e6>
 8015b12:	e60e      	b.n	8015732 <_strtod_l+0x582>
 8015b14:	fffffc02 	.word	0xfffffc02
 8015b18:	7ff00000 	.word	0x7ff00000
 8015b1c:	39500000 	.word	0x39500000
 8015b20:	000fffff 	.word	0x000fffff
 8015b24:	7fefffff 	.word	0x7fefffff
 8015b28:	080228a8 	.word	0x080228a8
 8015b2c:	4631      	mov	r1, r6
 8015b2e:	4628      	mov	r0, r5
 8015b30:	f001 fd06 	bl	8017540 <__ratio>
 8015b34:	ec59 8b10 	vmov	r8, r9, d0
 8015b38:	ee10 0a10 	vmov	r0, s0
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015b42:	4649      	mov	r1, r9
 8015b44:	f7ea ffec 	bl	8000b20 <__aeabi_dcmple>
 8015b48:	2800      	cmp	r0, #0
 8015b4a:	d07c      	beq.n	8015c46 <_strtod_l+0xa96>
 8015b4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d04c      	beq.n	8015bec <_strtod_l+0xa3c>
 8015b52:	4b95      	ldr	r3, [pc, #596]	; (8015da8 <_strtod_l+0xbf8>)
 8015b54:	2200      	movs	r2, #0
 8015b56:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015b5a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8015da8 <_strtod_l+0xbf8>
 8015b5e:	f04f 0800 	mov.w	r8, #0
 8015b62:	4b92      	ldr	r3, [pc, #584]	; (8015dac <_strtod_l+0xbfc>)
 8015b64:	403b      	ands	r3, r7
 8015b66:	9311      	str	r3, [sp, #68]	; 0x44
 8015b68:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015b6a:	4b91      	ldr	r3, [pc, #580]	; (8015db0 <_strtod_l+0xc00>)
 8015b6c:	429a      	cmp	r2, r3
 8015b6e:	f040 80b2 	bne.w	8015cd6 <_strtod_l+0xb26>
 8015b72:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015b76:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015b7a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8015b7e:	ec4b ab10 	vmov	d0, sl, fp
 8015b82:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8015b86:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015b8a:	f001 fc01 	bl	8017390 <__ulp>
 8015b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015b92:	ec53 2b10 	vmov	r2, r3, d0
 8015b96:	f7ea fd47 	bl	8000628 <__aeabi_dmul>
 8015b9a:	4652      	mov	r2, sl
 8015b9c:	465b      	mov	r3, fp
 8015b9e:	f7ea fb8d 	bl	80002bc <__adddf3>
 8015ba2:	460b      	mov	r3, r1
 8015ba4:	4981      	ldr	r1, [pc, #516]	; (8015dac <_strtod_l+0xbfc>)
 8015ba6:	4a83      	ldr	r2, [pc, #524]	; (8015db4 <_strtod_l+0xc04>)
 8015ba8:	4019      	ands	r1, r3
 8015baa:	4291      	cmp	r1, r2
 8015bac:	4682      	mov	sl, r0
 8015bae:	d95e      	bls.n	8015c6e <_strtod_l+0xabe>
 8015bb0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015bb2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d103      	bne.n	8015bc2 <_strtod_l+0xa12>
 8015bba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015bbc:	3301      	adds	r3, #1
 8015bbe:	f43f ad43 	beq.w	8015648 <_strtod_l+0x498>
 8015bc2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8015dc0 <_strtod_l+0xc10>
 8015bc6:	f04f 3aff 	mov.w	sl, #4294967295
 8015bca:	991e      	ldr	r1, [sp, #120]	; 0x78
 8015bcc:	4620      	mov	r0, r4
 8015bce:	f001 f8b3 	bl	8016d38 <_Bfree>
 8015bd2:	9907      	ldr	r1, [sp, #28]
 8015bd4:	4620      	mov	r0, r4
 8015bd6:	f001 f8af 	bl	8016d38 <_Bfree>
 8015bda:	4631      	mov	r1, r6
 8015bdc:	4620      	mov	r0, r4
 8015bde:	f001 f8ab 	bl	8016d38 <_Bfree>
 8015be2:	4629      	mov	r1, r5
 8015be4:	4620      	mov	r0, r4
 8015be6:	f001 f8a7 	bl	8016d38 <_Bfree>
 8015bea:	e613      	b.n	8015814 <_strtod_l+0x664>
 8015bec:	f1ba 0f00 	cmp.w	sl, #0
 8015bf0:	d11b      	bne.n	8015c2a <_strtod_l+0xa7a>
 8015bf2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015bf6:	b9f3      	cbnz	r3, 8015c36 <_strtod_l+0xa86>
 8015bf8:	4b6b      	ldr	r3, [pc, #428]	; (8015da8 <_strtod_l+0xbf8>)
 8015bfa:	2200      	movs	r2, #0
 8015bfc:	4640      	mov	r0, r8
 8015bfe:	4649      	mov	r1, r9
 8015c00:	f7ea ff84 	bl	8000b0c <__aeabi_dcmplt>
 8015c04:	b9d0      	cbnz	r0, 8015c3c <_strtod_l+0xa8c>
 8015c06:	4640      	mov	r0, r8
 8015c08:	4649      	mov	r1, r9
 8015c0a:	4b6b      	ldr	r3, [pc, #428]	; (8015db8 <_strtod_l+0xc08>)
 8015c0c:	2200      	movs	r2, #0
 8015c0e:	f7ea fd0b 	bl	8000628 <__aeabi_dmul>
 8015c12:	4680      	mov	r8, r0
 8015c14:	4689      	mov	r9, r1
 8015c16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8015c1a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8015c1e:	931b      	str	r3, [sp, #108]	; 0x6c
 8015c20:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8015c24:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015c28:	e79b      	b.n	8015b62 <_strtod_l+0x9b2>
 8015c2a:	f1ba 0f01 	cmp.w	sl, #1
 8015c2e:	d102      	bne.n	8015c36 <_strtod_l+0xa86>
 8015c30:	2f00      	cmp	r7, #0
 8015c32:	f43f ad7e 	beq.w	8015732 <_strtod_l+0x582>
 8015c36:	4b61      	ldr	r3, [pc, #388]	; (8015dbc <_strtod_l+0xc0c>)
 8015c38:	2200      	movs	r2, #0
 8015c3a:	e78c      	b.n	8015b56 <_strtod_l+0x9a6>
 8015c3c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8015db8 <_strtod_l+0xc08>
 8015c40:	f04f 0800 	mov.w	r8, #0
 8015c44:	e7e7      	b.n	8015c16 <_strtod_l+0xa66>
 8015c46:	4b5c      	ldr	r3, [pc, #368]	; (8015db8 <_strtod_l+0xc08>)
 8015c48:	4640      	mov	r0, r8
 8015c4a:	4649      	mov	r1, r9
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	f7ea fceb 	bl	8000628 <__aeabi_dmul>
 8015c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015c54:	4680      	mov	r8, r0
 8015c56:	4689      	mov	r9, r1
 8015c58:	b933      	cbnz	r3, 8015c68 <_strtod_l+0xab8>
 8015c5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015c5e:	9012      	str	r0, [sp, #72]	; 0x48
 8015c60:	9313      	str	r3, [sp, #76]	; 0x4c
 8015c62:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8015c66:	e7dd      	b.n	8015c24 <_strtod_l+0xa74>
 8015c68:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8015c6c:	e7f9      	b.n	8015c62 <_strtod_l+0xab2>
 8015c6e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8015c72:	9b04      	ldr	r3, [sp, #16]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d1a8      	bne.n	8015bca <_strtod_l+0xa1a>
 8015c78:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015c7c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015c7e:	0d1b      	lsrs	r3, r3, #20
 8015c80:	051b      	lsls	r3, r3, #20
 8015c82:	429a      	cmp	r2, r3
 8015c84:	d1a1      	bne.n	8015bca <_strtod_l+0xa1a>
 8015c86:	4640      	mov	r0, r8
 8015c88:	4649      	mov	r1, r9
 8015c8a:	f7eb f805 	bl	8000c98 <__aeabi_d2lz>
 8015c8e:	f7ea fc9d 	bl	80005cc <__aeabi_l2d>
 8015c92:	4602      	mov	r2, r0
 8015c94:	460b      	mov	r3, r1
 8015c96:	4640      	mov	r0, r8
 8015c98:	4649      	mov	r1, r9
 8015c9a:	f7ea fb0d 	bl	80002b8 <__aeabi_dsub>
 8015c9e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8015ca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8015ca4:	ea43 030a 	orr.w	r3, r3, sl
 8015ca8:	4313      	orrs	r3, r2
 8015caa:	4680      	mov	r8, r0
 8015cac:	4689      	mov	r9, r1
 8015cae:	d053      	beq.n	8015d58 <_strtod_l+0xba8>
 8015cb0:	a335      	add	r3, pc, #212	; (adr r3, 8015d88 <_strtod_l+0xbd8>)
 8015cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cb6:	f7ea ff29 	bl	8000b0c <__aeabi_dcmplt>
 8015cba:	2800      	cmp	r0, #0
 8015cbc:	f47f acce 	bne.w	801565c <_strtod_l+0x4ac>
 8015cc0:	a333      	add	r3, pc, #204	; (adr r3, 8015d90 <_strtod_l+0xbe0>)
 8015cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015cc6:	4640      	mov	r0, r8
 8015cc8:	4649      	mov	r1, r9
 8015cca:	f7ea ff3d 	bl	8000b48 <__aeabi_dcmpgt>
 8015cce:	2800      	cmp	r0, #0
 8015cd0:	f43f af7b 	beq.w	8015bca <_strtod_l+0xa1a>
 8015cd4:	e4c2      	b.n	801565c <_strtod_l+0x4ac>
 8015cd6:	9b04      	ldr	r3, [sp, #16]
 8015cd8:	b333      	cbz	r3, 8015d28 <_strtod_l+0xb78>
 8015cda:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8015cdc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8015ce0:	d822      	bhi.n	8015d28 <_strtod_l+0xb78>
 8015ce2:	a32d      	add	r3, pc, #180	; (adr r3, 8015d98 <_strtod_l+0xbe8>)
 8015ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015ce8:	4640      	mov	r0, r8
 8015cea:	4649      	mov	r1, r9
 8015cec:	f7ea ff18 	bl	8000b20 <__aeabi_dcmple>
 8015cf0:	b1a0      	cbz	r0, 8015d1c <_strtod_l+0xb6c>
 8015cf2:	4649      	mov	r1, r9
 8015cf4:	4640      	mov	r0, r8
 8015cf6:	f7ea ff47 	bl	8000b88 <__aeabi_d2uiz>
 8015cfa:	2801      	cmp	r0, #1
 8015cfc:	bf38      	it	cc
 8015cfe:	2001      	movcc	r0, #1
 8015d00:	f7ea fc18 	bl	8000534 <__aeabi_ui2d>
 8015d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8015d06:	4680      	mov	r8, r0
 8015d08:	4689      	mov	r9, r1
 8015d0a:	bb13      	cbnz	r3, 8015d52 <_strtod_l+0xba2>
 8015d0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8015d10:	9014      	str	r0, [sp, #80]	; 0x50
 8015d12:	9315      	str	r3, [sp, #84]	; 0x54
 8015d14:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8015d18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8015d1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8015d1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8015d20:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8015d24:	1a9b      	subs	r3, r3, r2
 8015d26:	930d      	str	r3, [sp, #52]	; 0x34
 8015d28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015d2c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8015d30:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8015d34:	f001 fb2c 	bl	8017390 <__ulp>
 8015d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8015d3c:	ec53 2b10 	vmov	r2, r3, d0
 8015d40:	f7ea fc72 	bl	8000628 <__aeabi_dmul>
 8015d44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8015d48:	f7ea fab8 	bl	80002bc <__adddf3>
 8015d4c:	4682      	mov	sl, r0
 8015d4e:	468b      	mov	fp, r1
 8015d50:	e78f      	b.n	8015c72 <_strtod_l+0xac2>
 8015d52:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8015d56:	e7dd      	b.n	8015d14 <_strtod_l+0xb64>
 8015d58:	a311      	add	r3, pc, #68	; (adr r3, 8015da0 <_strtod_l+0xbf0>)
 8015d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015d5e:	f7ea fed5 	bl	8000b0c <__aeabi_dcmplt>
 8015d62:	e7b4      	b.n	8015cce <_strtod_l+0xb1e>
 8015d64:	2300      	movs	r3, #0
 8015d66:	930e      	str	r3, [sp, #56]	; 0x38
 8015d68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8015d6a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8015d6c:	6013      	str	r3, [r2, #0]
 8015d6e:	f7ff ba65 	b.w	801523c <_strtod_l+0x8c>
 8015d72:	2b65      	cmp	r3, #101	; 0x65
 8015d74:	f43f ab5d 	beq.w	8015432 <_strtod_l+0x282>
 8015d78:	2b45      	cmp	r3, #69	; 0x45
 8015d7a:	f43f ab5a 	beq.w	8015432 <_strtod_l+0x282>
 8015d7e:	2201      	movs	r2, #1
 8015d80:	f7ff bb92 	b.w	80154a8 <_strtod_l+0x2f8>
 8015d84:	f3af 8000 	nop.w
 8015d88:	94a03595 	.word	0x94a03595
 8015d8c:	3fdfffff 	.word	0x3fdfffff
 8015d90:	35afe535 	.word	0x35afe535
 8015d94:	3fe00000 	.word	0x3fe00000
 8015d98:	ffc00000 	.word	0xffc00000
 8015d9c:	41dfffff 	.word	0x41dfffff
 8015da0:	94a03595 	.word	0x94a03595
 8015da4:	3fcfffff 	.word	0x3fcfffff
 8015da8:	3ff00000 	.word	0x3ff00000
 8015dac:	7ff00000 	.word	0x7ff00000
 8015db0:	7fe00000 	.word	0x7fe00000
 8015db4:	7c9fffff 	.word	0x7c9fffff
 8015db8:	3fe00000 	.word	0x3fe00000
 8015dbc:	bff00000 	.word	0xbff00000
 8015dc0:	7fefffff 	.word	0x7fefffff

08015dc4 <strtof>:
 8015dc4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8015dc8:	4e26      	ldr	r6, [pc, #152]	; (8015e64 <strtof+0xa0>)
 8015dca:	4b27      	ldr	r3, [pc, #156]	; (8015e68 <strtof+0xa4>)
 8015dcc:	460a      	mov	r2, r1
 8015dce:	ed2d 8b02 	vpush	{d8}
 8015dd2:	4601      	mov	r1, r0
 8015dd4:	6830      	ldr	r0, [r6, #0]
 8015dd6:	f7ff f9eb 	bl	80151b0 <_strtod_l>
 8015dda:	ec55 4b10 	vmov	r4, r5, d0
 8015dde:	ee10 2a10 	vmov	r2, s0
 8015de2:	ee10 0a10 	vmov	r0, s0
 8015de6:	462b      	mov	r3, r5
 8015de8:	4629      	mov	r1, r5
 8015dea:	f7ea feb7 	bl	8000b5c <__aeabi_dcmpun>
 8015dee:	b190      	cbz	r0, 8015e16 <strtof+0x52>
 8015df0:	2d00      	cmp	r5, #0
 8015df2:	481e      	ldr	r0, [pc, #120]	; (8015e6c <strtof+0xa8>)
 8015df4:	da09      	bge.n	8015e0a <strtof+0x46>
 8015df6:	f002 f937 	bl	8018068 <nanf>
 8015dfa:	eeb1 8a40 	vneg.f32	s16, s0
 8015dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8015e02:	ecbd 8b02 	vpop	{d8}
 8015e06:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8015e0a:	ecbd 8b02 	vpop	{d8}
 8015e0e:	e8bd 4370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, lr}
 8015e12:	f002 b929 	b.w	8018068 <nanf>
 8015e16:	4620      	mov	r0, r4
 8015e18:	4629      	mov	r1, r5
 8015e1a:	f7ea fed5 	bl	8000bc8 <__aeabi_d2f>
 8015e1e:	ee08 0a10 	vmov	s16, r0
 8015e22:	eddf 7a13 	vldr	s15, [pc, #76]	; 8015e70 <strtof+0xac>
 8015e26:	eeb0 7ac8 	vabs.f32	s14, s16
 8015e2a:	eeb4 7a67 	vcmp.f32	s14, s15
 8015e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015e32:	dde4      	ble.n	8015dfe <strtof+0x3a>
 8015e34:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
 8015e38:	4b0e      	ldr	r3, [pc, #56]	; (8015e74 <strtof+0xb0>)
 8015e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e3e:	4620      	mov	r0, r4
 8015e40:	4649      	mov	r1, r9
 8015e42:	f7ea fe8b 	bl	8000b5c <__aeabi_dcmpun>
 8015e46:	b940      	cbnz	r0, 8015e5a <strtof+0x96>
 8015e48:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <strtof+0xb0>)
 8015e4a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e4e:	4620      	mov	r0, r4
 8015e50:	4649      	mov	r1, r9
 8015e52:	f7ea fe65 	bl	8000b20 <__aeabi_dcmple>
 8015e56:	2800      	cmp	r0, #0
 8015e58:	d0d1      	beq.n	8015dfe <strtof+0x3a>
 8015e5a:	6833      	ldr	r3, [r6, #0]
 8015e5c:	2222      	movs	r2, #34	; 0x22
 8015e5e:	601a      	str	r2, [r3, #0]
 8015e60:	e7cd      	b.n	8015dfe <strtof+0x3a>
 8015e62:	bf00      	nop
 8015e64:	20000370 	.word	0x20000370
 8015e68:	200003d8 	.word	0x200003d8
 8015e6c:	08022caa 	.word	0x08022caa
 8015e70:	7f7fffff 	.word	0x7f7fffff
 8015e74:	7fefffff 	.word	0x7fefffff

08015e78 <_strtoul_l.isra.0>:
 8015e78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015e7c:	4e3b      	ldr	r6, [pc, #236]	; (8015f6c <_strtoul_l.isra.0+0xf4>)
 8015e7e:	4686      	mov	lr, r0
 8015e80:	468c      	mov	ip, r1
 8015e82:	4660      	mov	r0, ip
 8015e84:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8015e88:	5da5      	ldrb	r5, [r4, r6]
 8015e8a:	f015 0508 	ands.w	r5, r5, #8
 8015e8e:	d1f8      	bne.n	8015e82 <_strtoul_l.isra.0+0xa>
 8015e90:	2c2d      	cmp	r4, #45	; 0x2d
 8015e92:	d134      	bne.n	8015efe <_strtoul_l.isra.0+0x86>
 8015e94:	f89c 4000 	ldrb.w	r4, [ip]
 8015e98:	f04f 0801 	mov.w	r8, #1
 8015e9c:	f100 0c02 	add.w	ip, r0, #2
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d05e      	beq.n	8015f62 <_strtoul_l.isra.0+0xea>
 8015ea4:	2b10      	cmp	r3, #16
 8015ea6:	d10c      	bne.n	8015ec2 <_strtoul_l.isra.0+0x4a>
 8015ea8:	2c30      	cmp	r4, #48	; 0x30
 8015eaa:	d10a      	bne.n	8015ec2 <_strtoul_l.isra.0+0x4a>
 8015eac:	f89c 0000 	ldrb.w	r0, [ip]
 8015eb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8015eb4:	2858      	cmp	r0, #88	; 0x58
 8015eb6:	d14f      	bne.n	8015f58 <_strtoul_l.isra.0+0xe0>
 8015eb8:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8015ebc:	2310      	movs	r3, #16
 8015ebe:	f10c 0c02 	add.w	ip, ip, #2
 8015ec2:	f04f 37ff 	mov.w	r7, #4294967295
 8015ec6:	2500      	movs	r5, #0
 8015ec8:	fbb7 f7f3 	udiv	r7, r7, r3
 8015ecc:	fb03 f907 	mul.w	r9, r3, r7
 8015ed0:	ea6f 0909 	mvn.w	r9, r9
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8015eda:	2e09      	cmp	r6, #9
 8015edc:	d818      	bhi.n	8015f10 <_strtoul_l.isra.0+0x98>
 8015ede:	4634      	mov	r4, r6
 8015ee0:	42a3      	cmp	r3, r4
 8015ee2:	dd24      	ble.n	8015f2e <_strtoul_l.isra.0+0xb6>
 8015ee4:	2d00      	cmp	r5, #0
 8015ee6:	db1f      	blt.n	8015f28 <_strtoul_l.isra.0+0xb0>
 8015ee8:	4287      	cmp	r7, r0
 8015eea:	d31d      	bcc.n	8015f28 <_strtoul_l.isra.0+0xb0>
 8015eec:	d101      	bne.n	8015ef2 <_strtoul_l.isra.0+0x7a>
 8015eee:	45a1      	cmp	r9, r4
 8015ef0:	db1a      	blt.n	8015f28 <_strtoul_l.isra.0+0xb0>
 8015ef2:	fb00 4003 	mla	r0, r0, r3, r4
 8015ef6:	2501      	movs	r5, #1
 8015ef8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8015efc:	e7eb      	b.n	8015ed6 <_strtoul_l.isra.0+0x5e>
 8015efe:	2c2b      	cmp	r4, #43	; 0x2b
 8015f00:	bf08      	it	eq
 8015f02:	f89c 4000 	ldrbeq.w	r4, [ip]
 8015f06:	46a8      	mov	r8, r5
 8015f08:	bf08      	it	eq
 8015f0a:	f100 0c02 	addeq.w	ip, r0, #2
 8015f0e:	e7c7      	b.n	8015ea0 <_strtoul_l.isra.0+0x28>
 8015f10:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8015f14:	2e19      	cmp	r6, #25
 8015f16:	d801      	bhi.n	8015f1c <_strtoul_l.isra.0+0xa4>
 8015f18:	3c37      	subs	r4, #55	; 0x37
 8015f1a:	e7e1      	b.n	8015ee0 <_strtoul_l.isra.0+0x68>
 8015f1c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8015f20:	2e19      	cmp	r6, #25
 8015f22:	d804      	bhi.n	8015f2e <_strtoul_l.isra.0+0xb6>
 8015f24:	3c57      	subs	r4, #87	; 0x57
 8015f26:	e7db      	b.n	8015ee0 <_strtoul_l.isra.0+0x68>
 8015f28:	f04f 35ff 	mov.w	r5, #4294967295
 8015f2c:	e7e4      	b.n	8015ef8 <_strtoul_l.isra.0+0x80>
 8015f2e:	2d00      	cmp	r5, #0
 8015f30:	da07      	bge.n	8015f42 <_strtoul_l.isra.0+0xca>
 8015f32:	2322      	movs	r3, #34	; 0x22
 8015f34:	f8ce 3000 	str.w	r3, [lr]
 8015f38:	f04f 30ff 	mov.w	r0, #4294967295
 8015f3c:	b942      	cbnz	r2, 8015f50 <_strtoul_l.isra.0+0xd8>
 8015f3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015f42:	f1b8 0f00 	cmp.w	r8, #0
 8015f46:	d000      	beq.n	8015f4a <_strtoul_l.isra.0+0xd2>
 8015f48:	4240      	negs	r0, r0
 8015f4a:	2a00      	cmp	r2, #0
 8015f4c:	d0f7      	beq.n	8015f3e <_strtoul_l.isra.0+0xc6>
 8015f4e:	b10d      	cbz	r5, 8015f54 <_strtoul_l.isra.0+0xdc>
 8015f50:	f10c 31ff 	add.w	r1, ip, #4294967295
 8015f54:	6011      	str	r1, [r2, #0]
 8015f56:	e7f2      	b.n	8015f3e <_strtoul_l.isra.0+0xc6>
 8015f58:	2430      	movs	r4, #48	; 0x30
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d1b1      	bne.n	8015ec2 <_strtoul_l.isra.0+0x4a>
 8015f5e:	2308      	movs	r3, #8
 8015f60:	e7af      	b.n	8015ec2 <_strtoul_l.isra.0+0x4a>
 8015f62:	2c30      	cmp	r4, #48	; 0x30
 8015f64:	d0a2      	beq.n	8015eac <_strtoul_l.isra.0+0x34>
 8015f66:	230a      	movs	r3, #10
 8015f68:	e7ab      	b.n	8015ec2 <_strtoul_l.isra.0+0x4a>
 8015f6a:	bf00      	nop
 8015f6c:	080228d1 	.word	0x080228d1

08015f70 <strtoul>:
 8015f70:	4613      	mov	r3, r2
 8015f72:	460a      	mov	r2, r1
 8015f74:	4601      	mov	r1, r0
 8015f76:	4802      	ldr	r0, [pc, #8]	; (8015f80 <strtoul+0x10>)
 8015f78:	6800      	ldr	r0, [r0, #0]
 8015f7a:	f7ff bf7d 	b.w	8015e78 <_strtoul_l.isra.0>
 8015f7e:	bf00      	nop
 8015f80:	20000370 	.word	0x20000370

08015f84 <_vsniprintf_r>:
 8015f84:	b530      	push	{r4, r5, lr}
 8015f86:	1e14      	subs	r4, r2, #0
 8015f88:	4605      	mov	r5, r0
 8015f8a:	b09b      	sub	sp, #108	; 0x6c
 8015f8c:	4618      	mov	r0, r3
 8015f8e:	da05      	bge.n	8015f9c <_vsniprintf_r+0x18>
 8015f90:	238b      	movs	r3, #139	; 0x8b
 8015f92:	602b      	str	r3, [r5, #0]
 8015f94:	f04f 30ff 	mov.w	r0, #4294967295
 8015f98:	b01b      	add	sp, #108	; 0x6c
 8015f9a:	bd30      	pop	{r4, r5, pc}
 8015f9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8015fa0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8015fa4:	bf14      	ite	ne
 8015fa6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8015faa:	4623      	moveq	r3, r4
 8015fac:	9302      	str	r3, [sp, #8]
 8015fae:	9305      	str	r3, [sp, #20]
 8015fb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015fb4:	9100      	str	r1, [sp, #0]
 8015fb6:	9104      	str	r1, [sp, #16]
 8015fb8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8015fbc:	4602      	mov	r2, r0
 8015fbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8015fc0:	4669      	mov	r1, sp
 8015fc2:	4628      	mov	r0, r5
 8015fc4:	f001 fc48 	bl	8017858 <_svfiprintf_r>
 8015fc8:	1c43      	adds	r3, r0, #1
 8015fca:	bfbc      	itt	lt
 8015fcc:	238b      	movlt	r3, #139	; 0x8b
 8015fce:	602b      	strlt	r3, [r5, #0]
 8015fd0:	2c00      	cmp	r4, #0
 8015fd2:	d0e1      	beq.n	8015f98 <_vsniprintf_r+0x14>
 8015fd4:	9b00      	ldr	r3, [sp, #0]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	701a      	strb	r2, [r3, #0]
 8015fda:	e7dd      	b.n	8015f98 <_vsniprintf_r+0x14>

08015fdc <vsniprintf>:
 8015fdc:	b507      	push	{r0, r1, r2, lr}
 8015fde:	9300      	str	r3, [sp, #0]
 8015fe0:	4613      	mov	r3, r2
 8015fe2:	460a      	mov	r2, r1
 8015fe4:	4601      	mov	r1, r0
 8015fe6:	4803      	ldr	r0, [pc, #12]	; (8015ff4 <vsniprintf+0x18>)
 8015fe8:	6800      	ldr	r0, [r0, #0]
 8015fea:	f7ff ffcb 	bl	8015f84 <_vsniprintf_r>
 8015fee:	b003      	add	sp, #12
 8015ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8015ff4:	20000370 	.word	0x20000370

08015ff8 <__swbuf_r>:
 8015ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ffa:	460e      	mov	r6, r1
 8015ffc:	4614      	mov	r4, r2
 8015ffe:	4605      	mov	r5, r0
 8016000:	b118      	cbz	r0, 801600a <__swbuf_r+0x12>
 8016002:	6983      	ldr	r3, [r0, #24]
 8016004:	b90b      	cbnz	r3, 801600a <__swbuf_r+0x12>
 8016006:	f000 f9d1 	bl	80163ac <__sinit>
 801600a:	4b21      	ldr	r3, [pc, #132]	; (8016090 <__swbuf_r+0x98>)
 801600c:	429c      	cmp	r4, r3
 801600e:	d12b      	bne.n	8016068 <__swbuf_r+0x70>
 8016010:	686c      	ldr	r4, [r5, #4]
 8016012:	69a3      	ldr	r3, [r4, #24]
 8016014:	60a3      	str	r3, [r4, #8]
 8016016:	89a3      	ldrh	r3, [r4, #12]
 8016018:	071a      	lsls	r2, r3, #28
 801601a:	d52f      	bpl.n	801607c <__swbuf_r+0x84>
 801601c:	6923      	ldr	r3, [r4, #16]
 801601e:	b36b      	cbz	r3, 801607c <__swbuf_r+0x84>
 8016020:	6923      	ldr	r3, [r4, #16]
 8016022:	6820      	ldr	r0, [r4, #0]
 8016024:	1ac0      	subs	r0, r0, r3
 8016026:	6963      	ldr	r3, [r4, #20]
 8016028:	b2f6      	uxtb	r6, r6
 801602a:	4283      	cmp	r3, r0
 801602c:	4637      	mov	r7, r6
 801602e:	dc04      	bgt.n	801603a <__swbuf_r+0x42>
 8016030:	4621      	mov	r1, r4
 8016032:	4628      	mov	r0, r5
 8016034:	f000 f926 	bl	8016284 <_fflush_r>
 8016038:	bb30      	cbnz	r0, 8016088 <__swbuf_r+0x90>
 801603a:	68a3      	ldr	r3, [r4, #8]
 801603c:	3b01      	subs	r3, #1
 801603e:	60a3      	str	r3, [r4, #8]
 8016040:	6823      	ldr	r3, [r4, #0]
 8016042:	1c5a      	adds	r2, r3, #1
 8016044:	6022      	str	r2, [r4, #0]
 8016046:	701e      	strb	r6, [r3, #0]
 8016048:	6963      	ldr	r3, [r4, #20]
 801604a:	3001      	adds	r0, #1
 801604c:	4283      	cmp	r3, r0
 801604e:	d004      	beq.n	801605a <__swbuf_r+0x62>
 8016050:	89a3      	ldrh	r3, [r4, #12]
 8016052:	07db      	lsls	r3, r3, #31
 8016054:	d506      	bpl.n	8016064 <__swbuf_r+0x6c>
 8016056:	2e0a      	cmp	r6, #10
 8016058:	d104      	bne.n	8016064 <__swbuf_r+0x6c>
 801605a:	4621      	mov	r1, r4
 801605c:	4628      	mov	r0, r5
 801605e:	f000 f911 	bl	8016284 <_fflush_r>
 8016062:	b988      	cbnz	r0, 8016088 <__swbuf_r+0x90>
 8016064:	4638      	mov	r0, r7
 8016066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016068:	4b0a      	ldr	r3, [pc, #40]	; (8016094 <__swbuf_r+0x9c>)
 801606a:	429c      	cmp	r4, r3
 801606c:	d101      	bne.n	8016072 <__swbuf_r+0x7a>
 801606e:	68ac      	ldr	r4, [r5, #8]
 8016070:	e7cf      	b.n	8016012 <__swbuf_r+0x1a>
 8016072:	4b09      	ldr	r3, [pc, #36]	; (8016098 <__swbuf_r+0xa0>)
 8016074:	429c      	cmp	r4, r3
 8016076:	bf08      	it	eq
 8016078:	68ec      	ldreq	r4, [r5, #12]
 801607a:	e7ca      	b.n	8016012 <__swbuf_r+0x1a>
 801607c:	4621      	mov	r1, r4
 801607e:	4628      	mov	r0, r5
 8016080:	f000 f80c 	bl	801609c <__swsetup_r>
 8016084:	2800      	cmp	r0, #0
 8016086:	d0cb      	beq.n	8016020 <__swbuf_r+0x28>
 8016088:	f04f 37ff 	mov.w	r7, #4294967295
 801608c:	e7ea      	b.n	8016064 <__swbuf_r+0x6c>
 801608e:	bf00      	nop
 8016090:	080229f4 	.word	0x080229f4
 8016094:	08022a14 	.word	0x08022a14
 8016098:	080229d4 	.word	0x080229d4

0801609c <__swsetup_r>:
 801609c:	4b32      	ldr	r3, [pc, #200]	; (8016168 <__swsetup_r+0xcc>)
 801609e:	b570      	push	{r4, r5, r6, lr}
 80160a0:	681d      	ldr	r5, [r3, #0]
 80160a2:	4606      	mov	r6, r0
 80160a4:	460c      	mov	r4, r1
 80160a6:	b125      	cbz	r5, 80160b2 <__swsetup_r+0x16>
 80160a8:	69ab      	ldr	r3, [r5, #24]
 80160aa:	b913      	cbnz	r3, 80160b2 <__swsetup_r+0x16>
 80160ac:	4628      	mov	r0, r5
 80160ae:	f000 f97d 	bl	80163ac <__sinit>
 80160b2:	4b2e      	ldr	r3, [pc, #184]	; (801616c <__swsetup_r+0xd0>)
 80160b4:	429c      	cmp	r4, r3
 80160b6:	d10f      	bne.n	80160d8 <__swsetup_r+0x3c>
 80160b8:	686c      	ldr	r4, [r5, #4]
 80160ba:	89a3      	ldrh	r3, [r4, #12]
 80160bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80160c0:	0719      	lsls	r1, r3, #28
 80160c2:	d42c      	bmi.n	801611e <__swsetup_r+0x82>
 80160c4:	06dd      	lsls	r5, r3, #27
 80160c6:	d411      	bmi.n	80160ec <__swsetup_r+0x50>
 80160c8:	2309      	movs	r3, #9
 80160ca:	6033      	str	r3, [r6, #0]
 80160cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80160d0:	81a3      	strh	r3, [r4, #12]
 80160d2:	f04f 30ff 	mov.w	r0, #4294967295
 80160d6:	e03e      	b.n	8016156 <__swsetup_r+0xba>
 80160d8:	4b25      	ldr	r3, [pc, #148]	; (8016170 <__swsetup_r+0xd4>)
 80160da:	429c      	cmp	r4, r3
 80160dc:	d101      	bne.n	80160e2 <__swsetup_r+0x46>
 80160de:	68ac      	ldr	r4, [r5, #8]
 80160e0:	e7eb      	b.n	80160ba <__swsetup_r+0x1e>
 80160e2:	4b24      	ldr	r3, [pc, #144]	; (8016174 <__swsetup_r+0xd8>)
 80160e4:	429c      	cmp	r4, r3
 80160e6:	bf08      	it	eq
 80160e8:	68ec      	ldreq	r4, [r5, #12]
 80160ea:	e7e6      	b.n	80160ba <__swsetup_r+0x1e>
 80160ec:	0758      	lsls	r0, r3, #29
 80160ee:	d512      	bpl.n	8016116 <__swsetup_r+0x7a>
 80160f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80160f2:	b141      	cbz	r1, 8016106 <__swsetup_r+0x6a>
 80160f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80160f8:	4299      	cmp	r1, r3
 80160fa:	d002      	beq.n	8016102 <__swsetup_r+0x66>
 80160fc:	4630      	mov	r0, r6
 80160fe:	f001 faa5 	bl	801764c <_free_r>
 8016102:	2300      	movs	r3, #0
 8016104:	6363      	str	r3, [r4, #52]	; 0x34
 8016106:	89a3      	ldrh	r3, [r4, #12]
 8016108:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801610c:	81a3      	strh	r3, [r4, #12]
 801610e:	2300      	movs	r3, #0
 8016110:	6063      	str	r3, [r4, #4]
 8016112:	6923      	ldr	r3, [r4, #16]
 8016114:	6023      	str	r3, [r4, #0]
 8016116:	89a3      	ldrh	r3, [r4, #12]
 8016118:	f043 0308 	orr.w	r3, r3, #8
 801611c:	81a3      	strh	r3, [r4, #12]
 801611e:	6923      	ldr	r3, [r4, #16]
 8016120:	b94b      	cbnz	r3, 8016136 <__swsetup_r+0x9a>
 8016122:	89a3      	ldrh	r3, [r4, #12]
 8016124:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801612c:	d003      	beq.n	8016136 <__swsetup_r+0x9a>
 801612e:	4621      	mov	r1, r4
 8016130:	4630      	mov	r0, r6
 8016132:	f000 fd6f 	bl	8016c14 <__smakebuf_r>
 8016136:	89a0      	ldrh	r0, [r4, #12]
 8016138:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801613c:	f010 0301 	ands.w	r3, r0, #1
 8016140:	d00a      	beq.n	8016158 <__swsetup_r+0xbc>
 8016142:	2300      	movs	r3, #0
 8016144:	60a3      	str	r3, [r4, #8]
 8016146:	6963      	ldr	r3, [r4, #20]
 8016148:	425b      	negs	r3, r3
 801614a:	61a3      	str	r3, [r4, #24]
 801614c:	6923      	ldr	r3, [r4, #16]
 801614e:	b943      	cbnz	r3, 8016162 <__swsetup_r+0xc6>
 8016150:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016154:	d1ba      	bne.n	80160cc <__swsetup_r+0x30>
 8016156:	bd70      	pop	{r4, r5, r6, pc}
 8016158:	0781      	lsls	r1, r0, #30
 801615a:	bf58      	it	pl
 801615c:	6963      	ldrpl	r3, [r4, #20]
 801615e:	60a3      	str	r3, [r4, #8]
 8016160:	e7f4      	b.n	801614c <__swsetup_r+0xb0>
 8016162:	2000      	movs	r0, #0
 8016164:	e7f7      	b.n	8016156 <__swsetup_r+0xba>
 8016166:	bf00      	nop
 8016168:	20000370 	.word	0x20000370
 801616c:	080229f4 	.word	0x080229f4
 8016170:	08022a14 	.word	0x08022a14
 8016174:	080229d4 	.word	0x080229d4

08016178 <__sflush_r>:
 8016178:	898a      	ldrh	r2, [r1, #12]
 801617a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801617e:	4605      	mov	r5, r0
 8016180:	0710      	lsls	r0, r2, #28
 8016182:	460c      	mov	r4, r1
 8016184:	d458      	bmi.n	8016238 <__sflush_r+0xc0>
 8016186:	684b      	ldr	r3, [r1, #4]
 8016188:	2b00      	cmp	r3, #0
 801618a:	dc05      	bgt.n	8016198 <__sflush_r+0x20>
 801618c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801618e:	2b00      	cmp	r3, #0
 8016190:	dc02      	bgt.n	8016198 <__sflush_r+0x20>
 8016192:	2000      	movs	r0, #0
 8016194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016198:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801619a:	2e00      	cmp	r6, #0
 801619c:	d0f9      	beq.n	8016192 <__sflush_r+0x1a>
 801619e:	2300      	movs	r3, #0
 80161a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80161a4:	682f      	ldr	r7, [r5, #0]
 80161a6:	602b      	str	r3, [r5, #0]
 80161a8:	d032      	beq.n	8016210 <__sflush_r+0x98>
 80161aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80161ac:	89a3      	ldrh	r3, [r4, #12]
 80161ae:	075a      	lsls	r2, r3, #29
 80161b0:	d505      	bpl.n	80161be <__sflush_r+0x46>
 80161b2:	6863      	ldr	r3, [r4, #4]
 80161b4:	1ac0      	subs	r0, r0, r3
 80161b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80161b8:	b10b      	cbz	r3, 80161be <__sflush_r+0x46>
 80161ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80161bc:	1ac0      	subs	r0, r0, r3
 80161be:	2300      	movs	r3, #0
 80161c0:	4602      	mov	r2, r0
 80161c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80161c4:	6a21      	ldr	r1, [r4, #32]
 80161c6:	4628      	mov	r0, r5
 80161c8:	47b0      	blx	r6
 80161ca:	1c43      	adds	r3, r0, #1
 80161cc:	89a3      	ldrh	r3, [r4, #12]
 80161ce:	d106      	bne.n	80161de <__sflush_r+0x66>
 80161d0:	6829      	ldr	r1, [r5, #0]
 80161d2:	291d      	cmp	r1, #29
 80161d4:	d82c      	bhi.n	8016230 <__sflush_r+0xb8>
 80161d6:	4a2a      	ldr	r2, [pc, #168]	; (8016280 <__sflush_r+0x108>)
 80161d8:	40ca      	lsrs	r2, r1
 80161da:	07d6      	lsls	r6, r2, #31
 80161dc:	d528      	bpl.n	8016230 <__sflush_r+0xb8>
 80161de:	2200      	movs	r2, #0
 80161e0:	6062      	str	r2, [r4, #4]
 80161e2:	04d9      	lsls	r1, r3, #19
 80161e4:	6922      	ldr	r2, [r4, #16]
 80161e6:	6022      	str	r2, [r4, #0]
 80161e8:	d504      	bpl.n	80161f4 <__sflush_r+0x7c>
 80161ea:	1c42      	adds	r2, r0, #1
 80161ec:	d101      	bne.n	80161f2 <__sflush_r+0x7a>
 80161ee:	682b      	ldr	r3, [r5, #0]
 80161f0:	b903      	cbnz	r3, 80161f4 <__sflush_r+0x7c>
 80161f2:	6560      	str	r0, [r4, #84]	; 0x54
 80161f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161f6:	602f      	str	r7, [r5, #0]
 80161f8:	2900      	cmp	r1, #0
 80161fa:	d0ca      	beq.n	8016192 <__sflush_r+0x1a>
 80161fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016200:	4299      	cmp	r1, r3
 8016202:	d002      	beq.n	801620a <__sflush_r+0x92>
 8016204:	4628      	mov	r0, r5
 8016206:	f001 fa21 	bl	801764c <_free_r>
 801620a:	2000      	movs	r0, #0
 801620c:	6360      	str	r0, [r4, #52]	; 0x34
 801620e:	e7c1      	b.n	8016194 <__sflush_r+0x1c>
 8016210:	6a21      	ldr	r1, [r4, #32]
 8016212:	2301      	movs	r3, #1
 8016214:	4628      	mov	r0, r5
 8016216:	47b0      	blx	r6
 8016218:	1c41      	adds	r1, r0, #1
 801621a:	d1c7      	bne.n	80161ac <__sflush_r+0x34>
 801621c:	682b      	ldr	r3, [r5, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d0c4      	beq.n	80161ac <__sflush_r+0x34>
 8016222:	2b1d      	cmp	r3, #29
 8016224:	d001      	beq.n	801622a <__sflush_r+0xb2>
 8016226:	2b16      	cmp	r3, #22
 8016228:	d101      	bne.n	801622e <__sflush_r+0xb6>
 801622a:	602f      	str	r7, [r5, #0]
 801622c:	e7b1      	b.n	8016192 <__sflush_r+0x1a>
 801622e:	89a3      	ldrh	r3, [r4, #12]
 8016230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016234:	81a3      	strh	r3, [r4, #12]
 8016236:	e7ad      	b.n	8016194 <__sflush_r+0x1c>
 8016238:	690f      	ldr	r7, [r1, #16]
 801623a:	2f00      	cmp	r7, #0
 801623c:	d0a9      	beq.n	8016192 <__sflush_r+0x1a>
 801623e:	0793      	lsls	r3, r2, #30
 8016240:	680e      	ldr	r6, [r1, #0]
 8016242:	bf08      	it	eq
 8016244:	694b      	ldreq	r3, [r1, #20]
 8016246:	600f      	str	r7, [r1, #0]
 8016248:	bf18      	it	ne
 801624a:	2300      	movne	r3, #0
 801624c:	eba6 0807 	sub.w	r8, r6, r7
 8016250:	608b      	str	r3, [r1, #8]
 8016252:	f1b8 0f00 	cmp.w	r8, #0
 8016256:	dd9c      	ble.n	8016192 <__sflush_r+0x1a>
 8016258:	6a21      	ldr	r1, [r4, #32]
 801625a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801625c:	4643      	mov	r3, r8
 801625e:	463a      	mov	r2, r7
 8016260:	4628      	mov	r0, r5
 8016262:	47b0      	blx	r6
 8016264:	2800      	cmp	r0, #0
 8016266:	dc06      	bgt.n	8016276 <__sflush_r+0xfe>
 8016268:	89a3      	ldrh	r3, [r4, #12]
 801626a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801626e:	81a3      	strh	r3, [r4, #12]
 8016270:	f04f 30ff 	mov.w	r0, #4294967295
 8016274:	e78e      	b.n	8016194 <__sflush_r+0x1c>
 8016276:	4407      	add	r7, r0
 8016278:	eba8 0800 	sub.w	r8, r8, r0
 801627c:	e7e9      	b.n	8016252 <__sflush_r+0xda>
 801627e:	bf00      	nop
 8016280:	20400001 	.word	0x20400001

08016284 <_fflush_r>:
 8016284:	b538      	push	{r3, r4, r5, lr}
 8016286:	690b      	ldr	r3, [r1, #16]
 8016288:	4605      	mov	r5, r0
 801628a:	460c      	mov	r4, r1
 801628c:	b913      	cbnz	r3, 8016294 <_fflush_r+0x10>
 801628e:	2500      	movs	r5, #0
 8016290:	4628      	mov	r0, r5
 8016292:	bd38      	pop	{r3, r4, r5, pc}
 8016294:	b118      	cbz	r0, 801629e <_fflush_r+0x1a>
 8016296:	6983      	ldr	r3, [r0, #24]
 8016298:	b90b      	cbnz	r3, 801629e <_fflush_r+0x1a>
 801629a:	f000 f887 	bl	80163ac <__sinit>
 801629e:	4b14      	ldr	r3, [pc, #80]	; (80162f0 <_fflush_r+0x6c>)
 80162a0:	429c      	cmp	r4, r3
 80162a2:	d11b      	bne.n	80162dc <_fflush_r+0x58>
 80162a4:	686c      	ldr	r4, [r5, #4]
 80162a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d0ef      	beq.n	801628e <_fflush_r+0xa>
 80162ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80162b0:	07d0      	lsls	r0, r2, #31
 80162b2:	d404      	bmi.n	80162be <_fflush_r+0x3a>
 80162b4:	0599      	lsls	r1, r3, #22
 80162b6:	d402      	bmi.n	80162be <_fflush_r+0x3a>
 80162b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ba:	f000 fc84 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 80162be:	4628      	mov	r0, r5
 80162c0:	4621      	mov	r1, r4
 80162c2:	f7ff ff59 	bl	8016178 <__sflush_r>
 80162c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162c8:	07da      	lsls	r2, r3, #31
 80162ca:	4605      	mov	r5, r0
 80162cc:	d4e0      	bmi.n	8016290 <_fflush_r+0xc>
 80162ce:	89a3      	ldrh	r3, [r4, #12]
 80162d0:	059b      	lsls	r3, r3, #22
 80162d2:	d4dd      	bmi.n	8016290 <_fflush_r+0xc>
 80162d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162d6:	f000 fc77 	bl	8016bc8 <__retarget_lock_release_recursive>
 80162da:	e7d9      	b.n	8016290 <_fflush_r+0xc>
 80162dc:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <_fflush_r+0x70>)
 80162de:	429c      	cmp	r4, r3
 80162e0:	d101      	bne.n	80162e6 <_fflush_r+0x62>
 80162e2:	68ac      	ldr	r4, [r5, #8]
 80162e4:	e7df      	b.n	80162a6 <_fflush_r+0x22>
 80162e6:	4b04      	ldr	r3, [pc, #16]	; (80162f8 <_fflush_r+0x74>)
 80162e8:	429c      	cmp	r4, r3
 80162ea:	bf08      	it	eq
 80162ec:	68ec      	ldreq	r4, [r5, #12]
 80162ee:	e7da      	b.n	80162a6 <_fflush_r+0x22>
 80162f0:	080229f4 	.word	0x080229f4
 80162f4:	08022a14 	.word	0x08022a14
 80162f8:	080229d4 	.word	0x080229d4

080162fc <std>:
 80162fc:	2300      	movs	r3, #0
 80162fe:	b510      	push	{r4, lr}
 8016300:	4604      	mov	r4, r0
 8016302:	e9c0 3300 	strd	r3, r3, [r0]
 8016306:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801630a:	6083      	str	r3, [r0, #8]
 801630c:	8181      	strh	r1, [r0, #12]
 801630e:	6643      	str	r3, [r0, #100]	; 0x64
 8016310:	81c2      	strh	r2, [r0, #14]
 8016312:	6183      	str	r3, [r0, #24]
 8016314:	4619      	mov	r1, r3
 8016316:	2208      	movs	r2, #8
 8016318:	305c      	adds	r0, #92	; 0x5c
 801631a:	f7fe fe8f 	bl	801503c <memset>
 801631e:	4b05      	ldr	r3, [pc, #20]	; (8016334 <std+0x38>)
 8016320:	6263      	str	r3, [r4, #36]	; 0x24
 8016322:	4b05      	ldr	r3, [pc, #20]	; (8016338 <std+0x3c>)
 8016324:	62a3      	str	r3, [r4, #40]	; 0x28
 8016326:	4b05      	ldr	r3, [pc, #20]	; (801633c <std+0x40>)
 8016328:	62e3      	str	r3, [r4, #44]	; 0x2c
 801632a:	4b05      	ldr	r3, [pc, #20]	; (8016340 <std+0x44>)
 801632c:	6224      	str	r4, [r4, #32]
 801632e:	6323      	str	r3, [r4, #48]	; 0x30
 8016330:	bd10      	pop	{r4, pc}
 8016332:	bf00      	nop
 8016334:	08018075 	.word	0x08018075
 8016338:	08018097 	.word	0x08018097
 801633c:	080180cf 	.word	0x080180cf
 8016340:	080180f3 	.word	0x080180f3

08016344 <_cleanup_r>:
 8016344:	4901      	ldr	r1, [pc, #4]	; (801634c <_cleanup_r+0x8>)
 8016346:	f000 b8af 	b.w	80164a8 <_fwalk_reent>
 801634a:	bf00      	nop
 801634c:	08016285 	.word	0x08016285

08016350 <__sfmoreglue>:
 8016350:	b570      	push	{r4, r5, r6, lr}
 8016352:	1e4a      	subs	r2, r1, #1
 8016354:	2568      	movs	r5, #104	; 0x68
 8016356:	4355      	muls	r5, r2
 8016358:	460e      	mov	r6, r1
 801635a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801635e:	f001 f9c5 	bl	80176ec <_malloc_r>
 8016362:	4604      	mov	r4, r0
 8016364:	b140      	cbz	r0, 8016378 <__sfmoreglue+0x28>
 8016366:	2100      	movs	r1, #0
 8016368:	e9c0 1600 	strd	r1, r6, [r0]
 801636c:	300c      	adds	r0, #12
 801636e:	60a0      	str	r0, [r4, #8]
 8016370:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016374:	f7fe fe62 	bl	801503c <memset>
 8016378:	4620      	mov	r0, r4
 801637a:	bd70      	pop	{r4, r5, r6, pc}

0801637c <__sfp_lock_acquire>:
 801637c:	4801      	ldr	r0, [pc, #4]	; (8016384 <__sfp_lock_acquire+0x8>)
 801637e:	f000 bc22 	b.w	8016bc6 <__retarget_lock_acquire_recursive>
 8016382:	bf00      	nop
 8016384:	20008934 	.word	0x20008934

08016388 <__sfp_lock_release>:
 8016388:	4801      	ldr	r0, [pc, #4]	; (8016390 <__sfp_lock_release+0x8>)
 801638a:	f000 bc1d 	b.w	8016bc8 <__retarget_lock_release_recursive>
 801638e:	bf00      	nop
 8016390:	20008934 	.word	0x20008934

08016394 <__sinit_lock_acquire>:
 8016394:	4801      	ldr	r0, [pc, #4]	; (801639c <__sinit_lock_acquire+0x8>)
 8016396:	f000 bc16 	b.w	8016bc6 <__retarget_lock_acquire_recursive>
 801639a:	bf00      	nop
 801639c:	2000892f 	.word	0x2000892f

080163a0 <__sinit_lock_release>:
 80163a0:	4801      	ldr	r0, [pc, #4]	; (80163a8 <__sinit_lock_release+0x8>)
 80163a2:	f000 bc11 	b.w	8016bc8 <__retarget_lock_release_recursive>
 80163a6:	bf00      	nop
 80163a8:	2000892f 	.word	0x2000892f

080163ac <__sinit>:
 80163ac:	b510      	push	{r4, lr}
 80163ae:	4604      	mov	r4, r0
 80163b0:	f7ff fff0 	bl	8016394 <__sinit_lock_acquire>
 80163b4:	69a3      	ldr	r3, [r4, #24]
 80163b6:	b11b      	cbz	r3, 80163c0 <__sinit+0x14>
 80163b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80163bc:	f7ff bff0 	b.w	80163a0 <__sinit_lock_release>
 80163c0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80163c4:	6523      	str	r3, [r4, #80]	; 0x50
 80163c6:	4b13      	ldr	r3, [pc, #76]	; (8016414 <__sinit+0x68>)
 80163c8:	4a13      	ldr	r2, [pc, #76]	; (8016418 <__sinit+0x6c>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	62a2      	str	r2, [r4, #40]	; 0x28
 80163ce:	42a3      	cmp	r3, r4
 80163d0:	bf04      	itt	eq
 80163d2:	2301      	moveq	r3, #1
 80163d4:	61a3      	streq	r3, [r4, #24]
 80163d6:	4620      	mov	r0, r4
 80163d8:	f000 f820 	bl	801641c <__sfp>
 80163dc:	6060      	str	r0, [r4, #4]
 80163de:	4620      	mov	r0, r4
 80163e0:	f000 f81c 	bl	801641c <__sfp>
 80163e4:	60a0      	str	r0, [r4, #8]
 80163e6:	4620      	mov	r0, r4
 80163e8:	f000 f818 	bl	801641c <__sfp>
 80163ec:	2200      	movs	r2, #0
 80163ee:	60e0      	str	r0, [r4, #12]
 80163f0:	2104      	movs	r1, #4
 80163f2:	6860      	ldr	r0, [r4, #4]
 80163f4:	f7ff ff82 	bl	80162fc <std>
 80163f8:	68a0      	ldr	r0, [r4, #8]
 80163fa:	2201      	movs	r2, #1
 80163fc:	2109      	movs	r1, #9
 80163fe:	f7ff ff7d 	bl	80162fc <std>
 8016402:	68e0      	ldr	r0, [r4, #12]
 8016404:	2202      	movs	r2, #2
 8016406:	2112      	movs	r1, #18
 8016408:	f7ff ff78 	bl	80162fc <std>
 801640c:	2301      	movs	r3, #1
 801640e:	61a3      	str	r3, [r4, #24]
 8016410:	e7d2      	b.n	80163b8 <__sinit+0xc>
 8016412:	bf00      	nop
 8016414:	0802286c 	.word	0x0802286c
 8016418:	08016345 	.word	0x08016345

0801641c <__sfp>:
 801641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801641e:	4607      	mov	r7, r0
 8016420:	f7ff ffac 	bl	801637c <__sfp_lock_acquire>
 8016424:	4b1e      	ldr	r3, [pc, #120]	; (80164a0 <__sfp+0x84>)
 8016426:	681e      	ldr	r6, [r3, #0]
 8016428:	69b3      	ldr	r3, [r6, #24]
 801642a:	b913      	cbnz	r3, 8016432 <__sfp+0x16>
 801642c:	4630      	mov	r0, r6
 801642e:	f7ff ffbd 	bl	80163ac <__sinit>
 8016432:	3648      	adds	r6, #72	; 0x48
 8016434:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016438:	3b01      	subs	r3, #1
 801643a:	d503      	bpl.n	8016444 <__sfp+0x28>
 801643c:	6833      	ldr	r3, [r6, #0]
 801643e:	b30b      	cbz	r3, 8016484 <__sfp+0x68>
 8016440:	6836      	ldr	r6, [r6, #0]
 8016442:	e7f7      	b.n	8016434 <__sfp+0x18>
 8016444:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016448:	b9d5      	cbnz	r5, 8016480 <__sfp+0x64>
 801644a:	4b16      	ldr	r3, [pc, #88]	; (80164a4 <__sfp+0x88>)
 801644c:	60e3      	str	r3, [r4, #12]
 801644e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016452:	6665      	str	r5, [r4, #100]	; 0x64
 8016454:	f000 fbb6 	bl	8016bc4 <__retarget_lock_init_recursive>
 8016458:	f7ff ff96 	bl	8016388 <__sfp_lock_release>
 801645c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016460:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016464:	6025      	str	r5, [r4, #0]
 8016466:	61a5      	str	r5, [r4, #24]
 8016468:	2208      	movs	r2, #8
 801646a:	4629      	mov	r1, r5
 801646c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016470:	f7fe fde4 	bl	801503c <memset>
 8016474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801647c:	4620      	mov	r0, r4
 801647e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016480:	3468      	adds	r4, #104	; 0x68
 8016482:	e7d9      	b.n	8016438 <__sfp+0x1c>
 8016484:	2104      	movs	r1, #4
 8016486:	4638      	mov	r0, r7
 8016488:	f7ff ff62 	bl	8016350 <__sfmoreglue>
 801648c:	4604      	mov	r4, r0
 801648e:	6030      	str	r0, [r6, #0]
 8016490:	2800      	cmp	r0, #0
 8016492:	d1d5      	bne.n	8016440 <__sfp+0x24>
 8016494:	f7ff ff78 	bl	8016388 <__sfp_lock_release>
 8016498:	230c      	movs	r3, #12
 801649a:	603b      	str	r3, [r7, #0]
 801649c:	e7ee      	b.n	801647c <__sfp+0x60>
 801649e:	bf00      	nop
 80164a0:	0802286c 	.word	0x0802286c
 80164a4:	ffff0001 	.word	0xffff0001

080164a8 <_fwalk_reent>:
 80164a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164ac:	4606      	mov	r6, r0
 80164ae:	4688      	mov	r8, r1
 80164b0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80164b4:	2700      	movs	r7, #0
 80164b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80164ba:	f1b9 0901 	subs.w	r9, r9, #1
 80164be:	d505      	bpl.n	80164cc <_fwalk_reent+0x24>
 80164c0:	6824      	ldr	r4, [r4, #0]
 80164c2:	2c00      	cmp	r4, #0
 80164c4:	d1f7      	bne.n	80164b6 <_fwalk_reent+0xe>
 80164c6:	4638      	mov	r0, r7
 80164c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80164cc:	89ab      	ldrh	r3, [r5, #12]
 80164ce:	2b01      	cmp	r3, #1
 80164d0:	d907      	bls.n	80164e2 <_fwalk_reent+0x3a>
 80164d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80164d6:	3301      	adds	r3, #1
 80164d8:	d003      	beq.n	80164e2 <_fwalk_reent+0x3a>
 80164da:	4629      	mov	r1, r5
 80164dc:	4630      	mov	r0, r6
 80164de:	47c0      	blx	r8
 80164e0:	4307      	orrs	r7, r0
 80164e2:	3568      	adds	r5, #104	; 0x68
 80164e4:	e7e9      	b.n	80164ba <_fwalk_reent+0x12>

080164e6 <rshift>:
 80164e6:	6903      	ldr	r3, [r0, #16]
 80164e8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80164ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80164f0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80164f4:	f100 0414 	add.w	r4, r0, #20
 80164f8:	dd45      	ble.n	8016586 <rshift+0xa0>
 80164fa:	f011 011f 	ands.w	r1, r1, #31
 80164fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8016502:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8016506:	d10c      	bne.n	8016522 <rshift+0x3c>
 8016508:	f100 0710 	add.w	r7, r0, #16
 801650c:	4629      	mov	r1, r5
 801650e:	42b1      	cmp	r1, r6
 8016510:	d334      	bcc.n	801657c <rshift+0x96>
 8016512:	1a9b      	subs	r3, r3, r2
 8016514:	009b      	lsls	r3, r3, #2
 8016516:	1eea      	subs	r2, r5, #3
 8016518:	4296      	cmp	r6, r2
 801651a:	bf38      	it	cc
 801651c:	2300      	movcc	r3, #0
 801651e:	4423      	add	r3, r4
 8016520:	e015      	b.n	801654e <rshift+0x68>
 8016522:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8016526:	f1c1 0820 	rsb	r8, r1, #32
 801652a:	40cf      	lsrs	r7, r1
 801652c:	f105 0e04 	add.w	lr, r5, #4
 8016530:	46a1      	mov	r9, r4
 8016532:	4576      	cmp	r6, lr
 8016534:	46f4      	mov	ip, lr
 8016536:	d815      	bhi.n	8016564 <rshift+0x7e>
 8016538:	1a9b      	subs	r3, r3, r2
 801653a:	009a      	lsls	r2, r3, #2
 801653c:	3a04      	subs	r2, #4
 801653e:	3501      	adds	r5, #1
 8016540:	42ae      	cmp	r6, r5
 8016542:	bf38      	it	cc
 8016544:	2200      	movcc	r2, #0
 8016546:	18a3      	adds	r3, r4, r2
 8016548:	50a7      	str	r7, [r4, r2]
 801654a:	b107      	cbz	r7, 801654e <rshift+0x68>
 801654c:	3304      	adds	r3, #4
 801654e:	1b1a      	subs	r2, r3, r4
 8016550:	42a3      	cmp	r3, r4
 8016552:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8016556:	bf08      	it	eq
 8016558:	2300      	moveq	r3, #0
 801655a:	6102      	str	r2, [r0, #16]
 801655c:	bf08      	it	eq
 801655e:	6143      	streq	r3, [r0, #20]
 8016560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016564:	f8dc c000 	ldr.w	ip, [ip]
 8016568:	fa0c fc08 	lsl.w	ip, ip, r8
 801656c:	ea4c 0707 	orr.w	r7, ip, r7
 8016570:	f849 7b04 	str.w	r7, [r9], #4
 8016574:	f85e 7b04 	ldr.w	r7, [lr], #4
 8016578:	40cf      	lsrs	r7, r1
 801657a:	e7da      	b.n	8016532 <rshift+0x4c>
 801657c:	f851 cb04 	ldr.w	ip, [r1], #4
 8016580:	f847 cf04 	str.w	ip, [r7, #4]!
 8016584:	e7c3      	b.n	801650e <rshift+0x28>
 8016586:	4623      	mov	r3, r4
 8016588:	e7e1      	b.n	801654e <rshift+0x68>

0801658a <__hexdig_fun>:
 801658a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801658e:	2b09      	cmp	r3, #9
 8016590:	d802      	bhi.n	8016598 <__hexdig_fun+0xe>
 8016592:	3820      	subs	r0, #32
 8016594:	b2c0      	uxtb	r0, r0
 8016596:	4770      	bx	lr
 8016598:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 801659c:	2b05      	cmp	r3, #5
 801659e:	d801      	bhi.n	80165a4 <__hexdig_fun+0x1a>
 80165a0:	3847      	subs	r0, #71	; 0x47
 80165a2:	e7f7      	b.n	8016594 <__hexdig_fun+0xa>
 80165a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80165a8:	2b05      	cmp	r3, #5
 80165aa:	d801      	bhi.n	80165b0 <__hexdig_fun+0x26>
 80165ac:	3827      	subs	r0, #39	; 0x27
 80165ae:	e7f1      	b.n	8016594 <__hexdig_fun+0xa>
 80165b0:	2000      	movs	r0, #0
 80165b2:	4770      	bx	lr

080165b4 <__gethex>:
 80165b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165b8:	ed2d 8b02 	vpush	{d8}
 80165bc:	b089      	sub	sp, #36	; 0x24
 80165be:	ee08 0a10 	vmov	s16, r0
 80165c2:	9304      	str	r3, [sp, #16]
 80165c4:	4bbc      	ldr	r3, [pc, #752]	; (80168b8 <__gethex+0x304>)
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	9301      	str	r3, [sp, #4]
 80165ca:	4618      	mov	r0, r3
 80165cc:	468b      	mov	fp, r1
 80165ce:	4690      	mov	r8, r2
 80165d0:	f7e9 fe10 	bl	80001f4 <strlen>
 80165d4:	9b01      	ldr	r3, [sp, #4]
 80165d6:	f8db 2000 	ldr.w	r2, [fp]
 80165da:	4403      	add	r3, r0
 80165dc:	4682      	mov	sl, r0
 80165de:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80165e2:	9305      	str	r3, [sp, #20]
 80165e4:	1c93      	adds	r3, r2, #2
 80165e6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80165ea:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80165ee:	32fe      	adds	r2, #254	; 0xfe
 80165f0:	18d1      	adds	r1, r2, r3
 80165f2:	461f      	mov	r7, r3
 80165f4:	f813 0b01 	ldrb.w	r0, [r3], #1
 80165f8:	9100      	str	r1, [sp, #0]
 80165fa:	2830      	cmp	r0, #48	; 0x30
 80165fc:	d0f8      	beq.n	80165f0 <__gethex+0x3c>
 80165fe:	f7ff ffc4 	bl	801658a <__hexdig_fun>
 8016602:	4604      	mov	r4, r0
 8016604:	2800      	cmp	r0, #0
 8016606:	d13a      	bne.n	801667e <__gethex+0xca>
 8016608:	9901      	ldr	r1, [sp, #4]
 801660a:	4652      	mov	r2, sl
 801660c:	4638      	mov	r0, r7
 801660e:	f001 fd74 	bl	80180fa <strncmp>
 8016612:	4605      	mov	r5, r0
 8016614:	2800      	cmp	r0, #0
 8016616:	d168      	bne.n	80166ea <__gethex+0x136>
 8016618:	f817 000a 	ldrb.w	r0, [r7, sl]
 801661c:	eb07 060a 	add.w	r6, r7, sl
 8016620:	f7ff ffb3 	bl	801658a <__hexdig_fun>
 8016624:	2800      	cmp	r0, #0
 8016626:	d062      	beq.n	80166ee <__gethex+0x13a>
 8016628:	4633      	mov	r3, r6
 801662a:	7818      	ldrb	r0, [r3, #0]
 801662c:	2830      	cmp	r0, #48	; 0x30
 801662e:	461f      	mov	r7, r3
 8016630:	f103 0301 	add.w	r3, r3, #1
 8016634:	d0f9      	beq.n	801662a <__gethex+0x76>
 8016636:	f7ff ffa8 	bl	801658a <__hexdig_fun>
 801663a:	2301      	movs	r3, #1
 801663c:	fab0 f480 	clz	r4, r0
 8016640:	0964      	lsrs	r4, r4, #5
 8016642:	4635      	mov	r5, r6
 8016644:	9300      	str	r3, [sp, #0]
 8016646:	463a      	mov	r2, r7
 8016648:	4616      	mov	r6, r2
 801664a:	3201      	adds	r2, #1
 801664c:	7830      	ldrb	r0, [r6, #0]
 801664e:	f7ff ff9c 	bl	801658a <__hexdig_fun>
 8016652:	2800      	cmp	r0, #0
 8016654:	d1f8      	bne.n	8016648 <__gethex+0x94>
 8016656:	9901      	ldr	r1, [sp, #4]
 8016658:	4652      	mov	r2, sl
 801665a:	4630      	mov	r0, r6
 801665c:	f001 fd4d 	bl	80180fa <strncmp>
 8016660:	b980      	cbnz	r0, 8016684 <__gethex+0xd0>
 8016662:	b94d      	cbnz	r5, 8016678 <__gethex+0xc4>
 8016664:	eb06 050a 	add.w	r5, r6, sl
 8016668:	462a      	mov	r2, r5
 801666a:	4616      	mov	r6, r2
 801666c:	3201      	adds	r2, #1
 801666e:	7830      	ldrb	r0, [r6, #0]
 8016670:	f7ff ff8b 	bl	801658a <__hexdig_fun>
 8016674:	2800      	cmp	r0, #0
 8016676:	d1f8      	bne.n	801666a <__gethex+0xb6>
 8016678:	1bad      	subs	r5, r5, r6
 801667a:	00ad      	lsls	r5, r5, #2
 801667c:	e004      	b.n	8016688 <__gethex+0xd4>
 801667e:	2400      	movs	r4, #0
 8016680:	4625      	mov	r5, r4
 8016682:	e7e0      	b.n	8016646 <__gethex+0x92>
 8016684:	2d00      	cmp	r5, #0
 8016686:	d1f7      	bne.n	8016678 <__gethex+0xc4>
 8016688:	7833      	ldrb	r3, [r6, #0]
 801668a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801668e:	2b50      	cmp	r3, #80	; 0x50
 8016690:	d13b      	bne.n	801670a <__gethex+0x156>
 8016692:	7873      	ldrb	r3, [r6, #1]
 8016694:	2b2b      	cmp	r3, #43	; 0x2b
 8016696:	d02c      	beq.n	80166f2 <__gethex+0x13e>
 8016698:	2b2d      	cmp	r3, #45	; 0x2d
 801669a:	d02e      	beq.n	80166fa <__gethex+0x146>
 801669c:	1c71      	adds	r1, r6, #1
 801669e:	f04f 0900 	mov.w	r9, #0
 80166a2:	7808      	ldrb	r0, [r1, #0]
 80166a4:	f7ff ff71 	bl	801658a <__hexdig_fun>
 80166a8:	1e43      	subs	r3, r0, #1
 80166aa:	b2db      	uxtb	r3, r3
 80166ac:	2b18      	cmp	r3, #24
 80166ae:	d82c      	bhi.n	801670a <__gethex+0x156>
 80166b0:	f1a0 0210 	sub.w	r2, r0, #16
 80166b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80166b8:	f7ff ff67 	bl	801658a <__hexdig_fun>
 80166bc:	1e43      	subs	r3, r0, #1
 80166be:	b2db      	uxtb	r3, r3
 80166c0:	2b18      	cmp	r3, #24
 80166c2:	d91d      	bls.n	8016700 <__gethex+0x14c>
 80166c4:	f1b9 0f00 	cmp.w	r9, #0
 80166c8:	d000      	beq.n	80166cc <__gethex+0x118>
 80166ca:	4252      	negs	r2, r2
 80166cc:	4415      	add	r5, r2
 80166ce:	f8cb 1000 	str.w	r1, [fp]
 80166d2:	b1e4      	cbz	r4, 801670e <__gethex+0x15a>
 80166d4:	9b00      	ldr	r3, [sp, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	bf14      	ite	ne
 80166da:	2700      	movne	r7, #0
 80166dc:	2706      	moveq	r7, #6
 80166de:	4638      	mov	r0, r7
 80166e0:	b009      	add	sp, #36	; 0x24
 80166e2:	ecbd 8b02 	vpop	{d8}
 80166e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166ea:	463e      	mov	r6, r7
 80166ec:	4625      	mov	r5, r4
 80166ee:	2401      	movs	r4, #1
 80166f0:	e7ca      	b.n	8016688 <__gethex+0xd4>
 80166f2:	f04f 0900 	mov.w	r9, #0
 80166f6:	1cb1      	adds	r1, r6, #2
 80166f8:	e7d3      	b.n	80166a2 <__gethex+0xee>
 80166fa:	f04f 0901 	mov.w	r9, #1
 80166fe:	e7fa      	b.n	80166f6 <__gethex+0x142>
 8016700:	230a      	movs	r3, #10
 8016702:	fb03 0202 	mla	r2, r3, r2, r0
 8016706:	3a10      	subs	r2, #16
 8016708:	e7d4      	b.n	80166b4 <__gethex+0x100>
 801670a:	4631      	mov	r1, r6
 801670c:	e7df      	b.n	80166ce <__gethex+0x11a>
 801670e:	1bf3      	subs	r3, r6, r7
 8016710:	3b01      	subs	r3, #1
 8016712:	4621      	mov	r1, r4
 8016714:	2b07      	cmp	r3, #7
 8016716:	dc0b      	bgt.n	8016730 <__gethex+0x17c>
 8016718:	ee18 0a10 	vmov	r0, s16
 801671c:	f000 facc 	bl	8016cb8 <_Balloc>
 8016720:	4604      	mov	r4, r0
 8016722:	b940      	cbnz	r0, 8016736 <__gethex+0x182>
 8016724:	4b65      	ldr	r3, [pc, #404]	; (80168bc <__gethex+0x308>)
 8016726:	4602      	mov	r2, r0
 8016728:	21de      	movs	r1, #222	; 0xde
 801672a:	4865      	ldr	r0, [pc, #404]	; (80168c0 <__gethex+0x30c>)
 801672c:	f001 fd16 	bl	801815c <__assert_func>
 8016730:	3101      	adds	r1, #1
 8016732:	105b      	asrs	r3, r3, #1
 8016734:	e7ee      	b.n	8016714 <__gethex+0x160>
 8016736:	f100 0914 	add.w	r9, r0, #20
 801673a:	f04f 0b00 	mov.w	fp, #0
 801673e:	f1ca 0301 	rsb	r3, sl, #1
 8016742:	f8cd 9008 	str.w	r9, [sp, #8]
 8016746:	f8cd b000 	str.w	fp, [sp]
 801674a:	9306      	str	r3, [sp, #24]
 801674c:	42b7      	cmp	r7, r6
 801674e:	d340      	bcc.n	80167d2 <__gethex+0x21e>
 8016750:	9802      	ldr	r0, [sp, #8]
 8016752:	9b00      	ldr	r3, [sp, #0]
 8016754:	f840 3b04 	str.w	r3, [r0], #4
 8016758:	eba0 0009 	sub.w	r0, r0, r9
 801675c:	1080      	asrs	r0, r0, #2
 801675e:	0146      	lsls	r6, r0, #5
 8016760:	6120      	str	r0, [r4, #16]
 8016762:	4618      	mov	r0, r3
 8016764:	f000 fb9e 	bl	8016ea4 <__hi0bits>
 8016768:	1a30      	subs	r0, r6, r0
 801676a:	f8d8 6000 	ldr.w	r6, [r8]
 801676e:	42b0      	cmp	r0, r6
 8016770:	dd63      	ble.n	801683a <__gethex+0x286>
 8016772:	1b87      	subs	r7, r0, r6
 8016774:	4639      	mov	r1, r7
 8016776:	4620      	mov	r0, r4
 8016778:	f000 ff38 	bl	80175ec <__any_on>
 801677c:	4682      	mov	sl, r0
 801677e:	b1a8      	cbz	r0, 80167ac <__gethex+0x1f8>
 8016780:	1e7b      	subs	r3, r7, #1
 8016782:	1159      	asrs	r1, r3, #5
 8016784:	f003 021f 	and.w	r2, r3, #31
 8016788:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801678c:	f04f 0a01 	mov.w	sl, #1
 8016790:	fa0a f202 	lsl.w	r2, sl, r2
 8016794:	420a      	tst	r2, r1
 8016796:	d009      	beq.n	80167ac <__gethex+0x1f8>
 8016798:	4553      	cmp	r3, sl
 801679a:	dd05      	ble.n	80167a8 <__gethex+0x1f4>
 801679c:	1eb9      	subs	r1, r7, #2
 801679e:	4620      	mov	r0, r4
 80167a0:	f000 ff24 	bl	80175ec <__any_on>
 80167a4:	2800      	cmp	r0, #0
 80167a6:	d145      	bne.n	8016834 <__gethex+0x280>
 80167a8:	f04f 0a02 	mov.w	sl, #2
 80167ac:	4639      	mov	r1, r7
 80167ae:	4620      	mov	r0, r4
 80167b0:	f7ff fe99 	bl	80164e6 <rshift>
 80167b4:	443d      	add	r5, r7
 80167b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80167ba:	42ab      	cmp	r3, r5
 80167bc:	da4c      	bge.n	8016858 <__gethex+0x2a4>
 80167be:	ee18 0a10 	vmov	r0, s16
 80167c2:	4621      	mov	r1, r4
 80167c4:	f000 fab8 	bl	8016d38 <_Bfree>
 80167c8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80167ca:	2300      	movs	r3, #0
 80167cc:	6013      	str	r3, [r2, #0]
 80167ce:	27a3      	movs	r7, #163	; 0xa3
 80167d0:	e785      	b.n	80166de <__gethex+0x12a>
 80167d2:	1e73      	subs	r3, r6, #1
 80167d4:	9a05      	ldr	r2, [sp, #20]
 80167d6:	9303      	str	r3, [sp, #12]
 80167d8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80167dc:	4293      	cmp	r3, r2
 80167de:	d019      	beq.n	8016814 <__gethex+0x260>
 80167e0:	f1bb 0f20 	cmp.w	fp, #32
 80167e4:	d107      	bne.n	80167f6 <__gethex+0x242>
 80167e6:	9b02      	ldr	r3, [sp, #8]
 80167e8:	9a00      	ldr	r2, [sp, #0]
 80167ea:	f843 2b04 	str.w	r2, [r3], #4
 80167ee:	9302      	str	r3, [sp, #8]
 80167f0:	2300      	movs	r3, #0
 80167f2:	9300      	str	r3, [sp, #0]
 80167f4:	469b      	mov	fp, r3
 80167f6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80167fa:	f7ff fec6 	bl	801658a <__hexdig_fun>
 80167fe:	9b00      	ldr	r3, [sp, #0]
 8016800:	f000 000f 	and.w	r0, r0, #15
 8016804:	fa00 f00b 	lsl.w	r0, r0, fp
 8016808:	4303      	orrs	r3, r0
 801680a:	9300      	str	r3, [sp, #0]
 801680c:	f10b 0b04 	add.w	fp, fp, #4
 8016810:	9b03      	ldr	r3, [sp, #12]
 8016812:	e00d      	b.n	8016830 <__gethex+0x27c>
 8016814:	9b03      	ldr	r3, [sp, #12]
 8016816:	9a06      	ldr	r2, [sp, #24]
 8016818:	4413      	add	r3, r2
 801681a:	42bb      	cmp	r3, r7
 801681c:	d3e0      	bcc.n	80167e0 <__gethex+0x22c>
 801681e:	4618      	mov	r0, r3
 8016820:	9901      	ldr	r1, [sp, #4]
 8016822:	9307      	str	r3, [sp, #28]
 8016824:	4652      	mov	r2, sl
 8016826:	f001 fc68 	bl	80180fa <strncmp>
 801682a:	9b07      	ldr	r3, [sp, #28]
 801682c:	2800      	cmp	r0, #0
 801682e:	d1d7      	bne.n	80167e0 <__gethex+0x22c>
 8016830:	461e      	mov	r6, r3
 8016832:	e78b      	b.n	801674c <__gethex+0x198>
 8016834:	f04f 0a03 	mov.w	sl, #3
 8016838:	e7b8      	b.n	80167ac <__gethex+0x1f8>
 801683a:	da0a      	bge.n	8016852 <__gethex+0x29e>
 801683c:	1a37      	subs	r7, r6, r0
 801683e:	4621      	mov	r1, r4
 8016840:	ee18 0a10 	vmov	r0, s16
 8016844:	463a      	mov	r2, r7
 8016846:	f000 fc93 	bl	8017170 <__lshift>
 801684a:	1bed      	subs	r5, r5, r7
 801684c:	4604      	mov	r4, r0
 801684e:	f100 0914 	add.w	r9, r0, #20
 8016852:	f04f 0a00 	mov.w	sl, #0
 8016856:	e7ae      	b.n	80167b6 <__gethex+0x202>
 8016858:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801685c:	42a8      	cmp	r0, r5
 801685e:	dd72      	ble.n	8016946 <__gethex+0x392>
 8016860:	1b45      	subs	r5, r0, r5
 8016862:	42ae      	cmp	r6, r5
 8016864:	dc36      	bgt.n	80168d4 <__gethex+0x320>
 8016866:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801686a:	2b02      	cmp	r3, #2
 801686c:	d02a      	beq.n	80168c4 <__gethex+0x310>
 801686e:	2b03      	cmp	r3, #3
 8016870:	d02c      	beq.n	80168cc <__gethex+0x318>
 8016872:	2b01      	cmp	r3, #1
 8016874:	d115      	bne.n	80168a2 <__gethex+0x2ee>
 8016876:	42ae      	cmp	r6, r5
 8016878:	d113      	bne.n	80168a2 <__gethex+0x2ee>
 801687a:	2e01      	cmp	r6, #1
 801687c:	d10b      	bne.n	8016896 <__gethex+0x2e2>
 801687e:	9a04      	ldr	r2, [sp, #16]
 8016880:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8016884:	6013      	str	r3, [r2, #0]
 8016886:	2301      	movs	r3, #1
 8016888:	6123      	str	r3, [r4, #16]
 801688a:	f8c9 3000 	str.w	r3, [r9]
 801688e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8016890:	2762      	movs	r7, #98	; 0x62
 8016892:	601c      	str	r4, [r3, #0]
 8016894:	e723      	b.n	80166de <__gethex+0x12a>
 8016896:	1e71      	subs	r1, r6, #1
 8016898:	4620      	mov	r0, r4
 801689a:	f000 fea7 	bl	80175ec <__any_on>
 801689e:	2800      	cmp	r0, #0
 80168a0:	d1ed      	bne.n	801687e <__gethex+0x2ca>
 80168a2:	ee18 0a10 	vmov	r0, s16
 80168a6:	4621      	mov	r1, r4
 80168a8:	f000 fa46 	bl	8016d38 <_Bfree>
 80168ac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80168ae:	2300      	movs	r3, #0
 80168b0:	6013      	str	r3, [r2, #0]
 80168b2:	2750      	movs	r7, #80	; 0x50
 80168b4:	e713      	b.n	80166de <__gethex+0x12a>
 80168b6:	bf00      	nop
 80168b8:	08022ab0 	.word	0x08022ab0
 80168bc:	08022a34 	.word	0x08022a34
 80168c0:	08022a45 	.word	0x08022a45
 80168c4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d1eb      	bne.n	80168a2 <__gethex+0x2ee>
 80168ca:	e7d8      	b.n	801687e <__gethex+0x2ca>
 80168cc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d1d5      	bne.n	801687e <__gethex+0x2ca>
 80168d2:	e7e6      	b.n	80168a2 <__gethex+0x2ee>
 80168d4:	1e6f      	subs	r7, r5, #1
 80168d6:	f1ba 0f00 	cmp.w	sl, #0
 80168da:	d131      	bne.n	8016940 <__gethex+0x38c>
 80168dc:	b127      	cbz	r7, 80168e8 <__gethex+0x334>
 80168de:	4639      	mov	r1, r7
 80168e0:	4620      	mov	r0, r4
 80168e2:	f000 fe83 	bl	80175ec <__any_on>
 80168e6:	4682      	mov	sl, r0
 80168e8:	117b      	asrs	r3, r7, #5
 80168ea:	2101      	movs	r1, #1
 80168ec:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80168f0:	f007 071f 	and.w	r7, r7, #31
 80168f4:	fa01 f707 	lsl.w	r7, r1, r7
 80168f8:	421f      	tst	r7, r3
 80168fa:	4629      	mov	r1, r5
 80168fc:	4620      	mov	r0, r4
 80168fe:	bf18      	it	ne
 8016900:	f04a 0a02 	orrne.w	sl, sl, #2
 8016904:	1b76      	subs	r6, r6, r5
 8016906:	f7ff fdee 	bl	80164e6 <rshift>
 801690a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801690e:	2702      	movs	r7, #2
 8016910:	f1ba 0f00 	cmp.w	sl, #0
 8016914:	d048      	beq.n	80169a8 <__gethex+0x3f4>
 8016916:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801691a:	2b02      	cmp	r3, #2
 801691c:	d015      	beq.n	801694a <__gethex+0x396>
 801691e:	2b03      	cmp	r3, #3
 8016920:	d017      	beq.n	8016952 <__gethex+0x39e>
 8016922:	2b01      	cmp	r3, #1
 8016924:	d109      	bne.n	801693a <__gethex+0x386>
 8016926:	f01a 0f02 	tst.w	sl, #2
 801692a:	d006      	beq.n	801693a <__gethex+0x386>
 801692c:	f8d9 0000 	ldr.w	r0, [r9]
 8016930:	ea4a 0a00 	orr.w	sl, sl, r0
 8016934:	f01a 0f01 	tst.w	sl, #1
 8016938:	d10e      	bne.n	8016958 <__gethex+0x3a4>
 801693a:	f047 0710 	orr.w	r7, r7, #16
 801693e:	e033      	b.n	80169a8 <__gethex+0x3f4>
 8016940:	f04f 0a01 	mov.w	sl, #1
 8016944:	e7d0      	b.n	80168e8 <__gethex+0x334>
 8016946:	2701      	movs	r7, #1
 8016948:	e7e2      	b.n	8016910 <__gethex+0x35c>
 801694a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801694c:	f1c3 0301 	rsb	r3, r3, #1
 8016950:	9315      	str	r3, [sp, #84]	; 0x54
 8016952:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8016954:	2b00      	cmp	r3, #0
 8016956:	d0f0      	beq.n	801693a <__gethex+0x386>
 8016958:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801695c:	f104 0314 	add.w	r3, r4, #20
 8016960:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8016964:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8016968:	f04f 0c00 	mov.w	ip, #0
 801696c:	4618      	mov	r0, r3
 801696e:	f853 2b04 	ldr.w	r2, [r3], #4
 8016972:	f1b2 3fff 	cmp.w	r2, #4294967295
 8016976:	d01c      	beq.n	80169b2 <__gethex+0x3fe>
 8016978:	3201      	adds	r2, #1
 801697a:	6002      	str	r2, [r0, #0]
 801697c:	2f02      	cmp	r7, #2
 801697e:	f104 0314 	add.w	r3, r4, #20
 8016982:	d13f      	bne.n	8016a04 <__gethex+0x450>
 8016984:	f8d8 2000 	ldr.w	r2, [r8]
 8016988:	3a01      	subs	r2, #1
 801698a:	42b2      	cmp	r2, r6
 801698c:	d10a      	bne.n	80169a4 <__gethex+0x3f0>
 801698e:	1171      	asrs	r1, r6, #5
 8016990:	2201      	movs	r2, #1
 8016992:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016996:	f006 061f 	and.w	r6, r6, #31
 801699a:	fa02 f606 	lsl.w	r6, r2, r6
 801699e:	421e      	tst	r6, r3
 80169a0:	bf18      	it	ne
 80169a2:	4617      	movne	r7, r2
 80169a4:	f047 0720 	orr.w	r7, r7, #32
 80169a8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80169aa:	601c      	str	r4, [r3, #0]
 80169ac:	9b04      	ldr	r3, [sp, #16]
 80169ae:	601d      	str	r5, [r3, #0]
 80169b0:	e695      	b.n	80166de <__gethex+0x12a>
 80169b2:	4299      	cmp	r1, r3
 80169b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80169b8:	d8d8      	bhi.n	801696c <__gethex+0x3b8>
 80169ba:	68a3      	ldr	r3, [r4, #8]
 80169bc:	459b      	cmp	fp, r3
 80169be:	db19      	blt.n	80169f4 <__gethex+0x440>
 80169c0:	6861      	ldr	r1, [r4, #4]
 80169c2:	ee18 0a10 	vmov	r0, s16
 80169c6:	3101      	adds	r1, #1
 80169c8:	f000 f976 	bl	8016cb8 <_Balloc>
 80169cc:	4681      	mov	r9, r0
 80169ce:	b918      	cbnz	r0, 80169d8 <__gethex+0x424>
 80169d0:	4b1a      	ldr	r3, [pc, #104]	; (8016a3c <__gethex+0x488>)
 80169d2:	4602      	mov	r2, r0
 80169d4:	2184      	movs	r1, #132	; 0x84
 80169d6:	e6a8      	b.n	801672a <__gethex+0x176>
 80169d8:	6922      	ldr	r2, [r4, #16]
 80169da:	3202      	adds	r2, #2
 80169dc:	f104 010c 	add.w	r1, r4, #12
 80169e0:	0092      	lsls	r2, r2, #2
 80169e2:	300c      	adds	r0, #12
 80169e4:	f7fe fb1c 	bl	8015020 <memcpy>
 80169e8:	4621      	mov	r1, r4
 80169ea:	ee18 0a10 	vmov	r0, s16
 80169ee:	f000 f9a3 	bl	8016d38 <_Bfree>
 80169f2:	464c      	mov	r4, r9
 80169f4:	6923      	ldr	r3, [r4, #16]
 80169f6:	1c5a      	adds	r2, r3, #1
 80169f8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80169fc:	6122      	str	r2, [r4, #16]
 80169fe:	2201      	movs	r2, #1
 8016a00:	615a      	str	r2, [r3, #20]
 8016a02:	e7bb      	b.n	801697c <__gethex+0x3c8>
 8016a04:	6922      	ldr	r2, [r4, #16]
 8016a06:	455a      	cmp	r2, fp
 8016a08:	dd0b      	ble.n	8016a22 <__gethex+0x46e>
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	4620      	mov	r0, r4
 8016a0e:	f7ff fd6a 	bl	80164e6 <rshift>
 8016a12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8016a16:	3501      	adds	r5, #1
 8016a18:	42ab      	cmp	r3, r5
 8016a1a:	f6ff aed0 	blt.w	80167be <__gethex+0x20a>
 8016a1e:	2701      	movs	r7, #1
 8016a20:	e7c0      	b.n	80169a4 <__gethex+0x3f0>
 8016a22:	f016 061f 	ands.w	r6, r6, #31
 8016a26:	d0fa      	beq.n	8016a1e <__gethex+0x46a>
 8016a28:	449a      	add	sl, r3
 8016a2a:	f1c6 0620 	rsb	r6, r6, #32
 8016a2e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8016a32:	f000 fa37 	bl	8016ea4 <__hi0bits>
 8016a36:	42b0      	cmp	r0, r6
 8016a38:	dbe7      	blt.n	8016a0a <__gethex+0x456>
 8016a3a:	e7f0      	b.n	8016a1e <__gethex+0x46a>
 8016a3c:	08022a34 	.word	0x08022a34

08016a40 <L_shift>:
 8016a40:	f1c2 0208 	rsb	r2, r2, #8
 8016a44:	0092      	lsls	r2, r2, #2
 8016a46:	b570      	push	{r4, r5, r6, lr}
 8016a48:	f1c2 0620 	rsb	r6, r2, #32
 8016a4c:	6843      	ldr	r3, [r0, #4]
 8016a4e:	6804      	ldr	r4, [r0, #0]
 8016a50:	fa03 f506 	lsl.w	r5, r3, r6
 8016a54:	432c      	orrs	r4, r5
 8016a56:	40d3      	lsrs	r3, r2
 8016a58:	6004      	str	r4, [r0, #0]
 8016a5a:	f840 3f04 	str.w	r3, [r0, #4]!
 8016a5e:	4288      	cmp	r0, r1
 8016a60:	d3f4      	bcc.n	8016a4c <L_shift+0xc>
 8016a62:	bd70      	pop	{r4, r5, r6, pc}

08016a64 <__match>:
 8016a64:	b530      	push	{r4, r5, lr}
 8016a66:	6803      	ldr	r3, [r0, #0]
 8016a68:	3301      	adds	r3, #1
 8016a6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016a6e:	b914      	cbnz	r4, 8016a76 <__match+0x12>
 8016a70:	6003      	str	r3, [r0, #0]
 8016a72:	2001      	movs	r0, #1
 8016a74:	bd30      	pop	{r4, r5, pc}
 8016a76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016a7a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8016a7e:	2d19      	cmp	r5, #25
 8016a80:	bf98      	it	ls
 8016a82:	3220      	addls	r2, #32
 8016a84:	42a2      	cmp	r2, r4
 8016a86:	d0f0      	beq.n	8016a6a <__match+0x6>
 8016a88:	2000      	movs	r0, #0
 8016a8a:	e7f3      	b.n	8016a74 <__match+0x10>

08016a8c <__hexnan>:
 8016a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016a90:	680b      	ldr	r3, [r1, #0]
 8016a92:	6801      	ldr	r1, [r0, #0]
 8016a94:	115e      	asrs	r6, r3, #5
 8016a96:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8016a9a:	f013 031f 	ands.w	r3, r3, #31
 8016a9e:	b087      	sub	sp, #28
 8016aa0:	bf18      	it	ne
 8016aa2:	3604      	addne	r6, #4
 8016aa4:	2500      	movs	r5, #0
 8016aa6:	1f37      	subs	r7, r6, #4
 8016aa8:	4682      	mov	sl, r0
 8016aaa:	4690      	mov	r8, r2
 8016aac:	9301      	str	r3, [sp, #4]
 8016aae:	f846 5c04 	str.w	r5, [r6, #-4]
 8016ab2:	46b9      	mov	r9, r7
 8016ab4:	463c      	mov	r4, r7
 8016ab6:	9502      	str	r5, [sp, #8]
 8016ab8:	46ab      	mov	fp, r5
 8016aba:	784a      	ldrb	r2, [r1, #1]
 8016abc:	1c4b      	adds	r3, r1, #1
 8016abe:	9303      	str	r3, [sp, #12]
 8016ac0:	b342      	cbz	r2, 8016b14 <__hexnan+0x88>
 8016ac2:	4610      	mov	r0, r2
 8016ac4:	9105      	str	r1, [sp, #20]
 8016ac6:	9204      	str	r2, [sp, #16]
 8016ac8:	f7ff fd5f 	bl	801658a <__hexdig_fun>
 8016acc:	2800      	cmp	r0, #0
 8016ace:	d14f      	bne.n	8016b70 <__hexnan+0xe4>
 8016ad0:	9a04      	ldr	r2, [sp, #16]
 8016ad2:	9905      	ldr	r1, [sp, #20]
 8016ad4:	2a20      	cmp	r2, #32
 8016ad6:	d818      	bhi.n	8016b0a <__hexnan+0x7e>
 8016ad8:	9b02      	ldr	r3, [sp, #8]
 8016ada:	459b      	cmp	fp, r3
 8016adc:	dd13      	ble.n	8016b06 <__hexnan+0x7a>
 8016ade:	454c      	cmp	r4, r9
 8016ae0:	d206      	bcs.n	8016af0 <__hexnan+0x64>
 8016ae2:	2d07      	cmp	r5, #7
 8016ae4:	dc04      	bgt.n	8016af0 <__hexnan+0x64>
 8016ae6:	462a      	mov	r2, r5
 8016ae8:	4649      	mov	r1, r9
 8016aea:	4620      	mov	r0, r4
 8016aec:	f7ff ffa8 	bl	8016a40 <L_shift>
 8016af0:	4544      	cmp	r4, r8
 8016af2:	d950      	bls.n	8016b96 <__hexnan+0x10a>
 8016af4:	2300      	movs	r3, #0
 8016af6:	f1a4 0904 	sub.w	r9, r4, #4
 8016afa:	f844 3c04 	str.w	r3, [r4, #-4]
 8016afe:	f8cd b008 	str.w	fp, [sp, #8]
 8016b02:	464c      	mov	r4, r9
 8016b04:	461d      	mov	r5, r3
 8016b06:	9903      	ldr	r1, [sp, #12]
 8016b08:	e7d7      	b.n	8016aba <__hexnan+0x2e>
 8016b0a:	2a29      	cmp	r2, #41	; 0x29
 8016b0c:	d156      	bne.n	8016bbc <__hexnan+0x130>
 8016b0e:	3102      	adds	r1, #2
 8016b10:	f8ca 1000 	str.w	r1, [sl]
 8016b14:	f1bb 0f00 	cmp.w	fp, #0
 8016b18:	d050      	beq.n	8016bbc <__hexnan+0x130>
 8016b1a:	454c      	cmp	r4, r9
 8016b1c:	d206      	bcs.n	8016b2c <__hexnan+0xa0>
 8016b1e:	2d07      	cmp	r5, #7
 8016b20:	dc04      	bgt.n	8016b2c <__hexnan+0xa0>
 8016b22:	462a      	mov	r2, r5
 8016b24:	4649      	mov	r1, r9
 8016b26:	4620      	mov	r0, r4
 8016b28:	f7ff ff8a 	bl	8016a40 <L_shift>
 8016b2c:	4544      	cmp	r4, r8
 8016b2e:	d934      	bls.n	8016b9a <__hexnan+0x10e>
 8016b30:	f1a8 0204 	sub.w	r2, r8, #4
 8016b34:	4623      	mov	r3, r4
 8016b36:	f853 1b04 	ldr.w	r1, [r3], #4
 8016b3a:	f842 1f04 	str.w	r1, [r2, #4]!
 8016b3e:	429f      	cmp	r7, r3
 8016b40:	d2f9      	bcs.n	8016b36 <__hexnan+0xaa>
 8016b42:	1b3b      	subs	r3, r7, r4
 8016b44:	f023 0303 	bic.w	r3, r3, #3
 8016b48:	3304      	adds	r3, #4
 8016b4a:	3401      	adds	r4, #1
 8016b4c:	3e03      	subs	r6, #3
 8016b4e:	42b4      	cmp	r4, r6
 8016b50:	bf88      	it	hi
 8016b52:	2304      	movhi	r3, #4
 8016b54:	4443      	add	r3, r8
 8016b56:	2200      	movs	r2, #0
 8016b58:	f843 2b04 	str.w	r2, [r3], #4
 8016b5c:	429f      	cmp	r7, r3
 8016b5e:	d2fb      	bcs.n	8016b58 <__hexnan+0xcc>
 8016b60:	683b      	ldr	r3, [r7, #0]
 8016b62:	b91b      	cbnz	r3, 8016b6c <__hexnan+0xe0>
 8016b64:	4547      	cmp	r7, r8
 8016b66:	d127      	bne.n	8016bb8 <__hexnan+0x12c>
 8016b68:	2301      	movs	r3, #1
 8016b6a:	603b      	str	r3, [r7, #0]
 8016b6c:	2005      	movs	r0, #5
 8016b6e:	e026      	b.n	8016bbe <__hexnan+0x132>
 8016b70:	3501      	adds	r5, #1
 8016b72:	2d08      	cmp	r5, #8
 8016b74:	f10b 0b01 	add.w	fp, fp, #1
 8016b78:	dd06      	ble.n	8016b88 <__hexnan+0xfc>
 8016b7a:	4544      	cmp	r4, r8
 8016b7c:	d9c3      	bls.n	8016b06 <__hexnan+0x7a>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	f844 3c04 	str.w	r3, [r4, #-4]
 8016b84:	2501      	movs	r5, #1
 8016b86:	3c04      	subs	r4, #4
 8016b88:	6822      	ldr	r2, [r4, #0]
 8016b8a:	f000 000f 	and.w	r0, r0, #15
 8016b8e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8016b92:	6022      	str	r2, [r4, #0]
 8016b94:	e7b7      	b.n	8016b06 <__hexnan+0x7a>
 8016b96:	2508      	movs	r5, #8
 8016b98:	e7b5      	b.n	8016b06 <__hexnan+0x7a>
 8016b9a:	9b01      	ldr	r3, [sp, #4]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d0df      	beq.n	8016b60 <__hexnan+0xd4>
 8016ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8016ba4:	f1c3 0320 	rsb	r3, r3, #32
 8016ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8016bac:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8016bb0:	401a      	ands	r2, r3
 8016bb2:	f846 2c04 	str.w	r2, [r6, #-4]
 8016bb6:	e7d3      	b.n	8016b60 <__hexnan+0xd4>
 8016bb8:	3f04      	subs	r7, #4
 8016bba:	e7d1      	b.n	8016b60 <__hexnan+0xd4>
 8016bbc:	2004      	movs	r0, #4
 8016bbe:	b007      	add	sp, #28
 8016bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016bc4 <__retarget_lock_init_recursive>:
 8016bc4:	4770      	bx	lr

08016bc6 <__retarget_lock_acquire_recursive>:
 8016bc6:	4770      	bx	lr

08016bc8 <__retarget_lock_release_recursive>:
 8016bc8:	4770      	bx	lr

08016bca <__swhatbuf_r>:
 8016bca:	b570      	push	{r4, r5, r6, lr}
 8016bcc:	460e      	mov	r6, r1
 8016bce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bd2:	2900      	cmp	r1, #0
 8016bd4:	b096      	sub	sp, #88	; 0x58
 8016bd6:	4614      	mov	r4, r2
 8016bd8:	461d      	mov	r5, r3
 8016bda:	da07      	bge.n	8016bec <__swhatbuf_r+0x22>
 8016bdc:	2300      	movs	r3, #0
 8016bde:	602b      	str	r3, [r5, #0]
 8016be0:	89b3      	ldrh	r3, [r6, #12]
 8016be2:	061a      	lsls	r2, r3, #24
 8016be4:	d410      	bmi.n	8016c08 <__swhatbuf_r+0x3e>
 8016be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016bea:	e00e      	b.n	8016c0a <__swhatbuf_r+0x40>
 8016bec:	466a      	mov	r2, sp
 8016bee:	f001 faf5 	bl	80181dc <_fstat_r>
 8016bf2:	2800      	cmp	r0, #0
 8016bf4:	dbf2      	blt.n	8016bdc <__swhatbuf_r+0x12>
 8016bf6:	9a01      	ldr	r2, [sp, #4]
 8016bf8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016bfc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c00:	425a      	negs	r2, r3
 8016c02:	415a      	adcs	r2, r3
 8016c04:	602a      	str	r2, [r5, #0]
 8016c06:	e7ee      	b.n	8016be6 <__swhatbuf_r+0x1c>
 8016c08:	2340      	movs	r3, #64	; 0x40
 8016c0a:	2000      	movs	r0, #0
 8016c0c:	6023      	str	r3, [r4, #0]
 8016c0e:	b016      	add	sp, #88	; 0x58
 8016c10:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c14 <__smakebuf_r>:
 8016c14:	898b      	ldrh	r3, [r1, #12]
 8016c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c18:	079d      	lsls	r5, r3, #30
 8016c1a:	4606      	mov	r6, r0
 8016c1c:	460c      	mov	r4, r1
 8016c1e:	d507      	bpl.n	8016c30 <__smakebuf_r+0x1c>
 8016c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c24:	6023      	str	r3, [r4, #0]
 8016c26:	6123      	str	r3, [r4, #16]
 8016c28:	2301      	movs	r3, #1
 8016c2a:	6163      	str	r3, [r4, #20]
 8016c2c:	b002      	add	sp, #8
 8016c2e:	bd70      	pop	{r4, r5, r6, pc}
 8016c30:	ab01      	add	r3, sp, #4
 8016c32:	466a      	mov	r2, sp
 8016c34:	f7ff ffc9 	bl	8016bca <__swhatbuf_r>
 8016c38:	9900      	ldr	r1, [sp, #0]
 8016c3a:	4605      	mov	r5, r0
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	f000 fd55 	bl	80176ec <_malloc_r>
 8016c42:	b948      	cbnz	r0, 8016c58 <__smakebuf_r+0x44>
 8016c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c48:	059a      	lsls	r2, r3, #22
 8016c4a:	d4ef      	bmi.n	8016c2c <__smakebuf_r+0x18>
 8016c4c:	f023 0303 	bic.w	r3, r3, #3
 8016c50:	f043 0302 	orr.w	r3, r3, #2
 8016c54:	81a3      	strh	r3, [r4, #12]
 8016c56:	e7e3      	b.n	8016c20 <__smakebuf_r+0xc>
 8016c58:	4b0d      	ldr	r3, [pc, #52]	; (8016c90 <__smakebuf_r+0x7c>)
 8016c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8016c5c:	89a3      	ldrh	r3, [r4, #12]
 8016c5e:	6020      	str	r0, [r4, #0]
 8016c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016c64:	81a3      	strh	r3, [r4, #12]
 8016c66:	9b00      	ldr	r3, [sp, #0]
 8016c68:	6163      	str	r3, [r4, #20]
 8016c6a:	9b01      	ldr	r3, [sp, #4]
 8016c6c:	6120      	str	r0, [r4, #16]
 8016c6e:	b15b      	cbz	r3, 8016c88 <__smakebuf_r+0x74>
 8016c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c74:	4630      	mov	r0, r6
 8016c76:	f001 fac3 	bl	8018200 <_isatty_r>
 8016c7a:	b128      	cbz	r0, 8016c88 <__smakebuf_r+0x74>
 8016c7c:	89a3      	ldrh	r3, [r4, #12]
 8016c7e:	f023 0303 	bic.w	r3, r3, #3
 8016c82:	f043 0301 	orr.w	r3, r3, #1
 8016c86:	81a3      	strh	r3, [r4, #12]
 8016c88:	89a0      	ldrh	r0, [r4, #12]
 8016c8a:	4305      	orrs	r5, r0
 8016c8c:	81a5      	strh	r5, [r4, #12]
 8016c8e:	e7cd      	b.n	8016c2c <__smakebuf_r+0x18>
 8016c90:	08016345 	.word	0x08016345

08016c94 <__ascii_mbtowc>:
 8016c94:	b082      	sub	sp, #8
 8016c96:	b901      	cbnz	r1, 8016c9a <__ascii_mbtowc+0x6>
 8016c98:	a901      	add	r1, sp, #4
 8016c9a:	b142      	cbz	r2, 8016cae <__ascii_mbtowc+0x1a>
 8016c9c:	b14b      	cbz	r3, 8016cb2 <__ascii_mbtowc+0x1e>
 8016c9e:	7813      	ldrb	r3, [r2, #0]
 8016ca0:	600b      	str	r3, [r1, #0]
 8016ca2:	7812      	ldrb	r2, [r2, #0]
 8016ca4:	1e10      	subs	r0, r2, #0
 8016ca6:	bf18      	it	ne
 8016ca8:	2001      	movne	r0, #1
 8016caa:	b002      	add	sp, #8
 8016cac:	4770      	bx	lr
 8016cae:	4610      	mov	r0, r2
 8016cb0:	e7fb      	b.n	8016caa <__ascii_mbtowc+0x16>
 8016cb2:	f06f 0001 	mvn.w	r0, #1
 8016cb6:	e7f8      	b.n	8016caa <__ascii_mbtowc+0x16>

08016cb8 <_Balloc>:
 8016cb8:	b570      	push	{r4, r5, r6, lr}
 8016cba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016cbc:	4604      	mov	r4, r0
 8016cbe:	460d      	mov	r5, r1
 8016cc0:	b976      	cbnz	r6, 8016ce0 <_Balloc+0x28>
 8016cc2:	2010      	movs	r0, #16
 8016cc4:	f001 fabe 	bl	8018244 <malloc>
 8016cc8:	4602      	mov	r2, r0
 8016cca:	6260      	str	r0, [r4, #36]	; 0x24
 8016ccc:	b920      	cbnz	r0, 8016cd8 <_Balloc+0x20>
 8016cce:	4b18      	ldr	r3, [pc, #96]	; (8016d30 <_Balloc+0x78>)
 8016cd0:	4818      	ldr	r0, [pc, #96]	; (8016d34 <_Balloc+0x7c>)
 8016cd2:	2166      	movs	r1, #102	; 0x66
 8016cd4:	f001 fa42 	bl	801815c <__assert_func>
 8016cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016cdc:	6006      	str	r6, [r0, #0]
 8016cde:	60c6      	str	r6, [r0, #12]
 8016ce0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8016ce2:	68f3      	ldr	r3, [r6, #12]
 8016ce4:	b183      	cbz	r3, 8016d08 <_Balloc+0x50>
 8016ce6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8016cee:	b9b8      	cbnz	r0, 8016d20 <_Balloc+0x68>
 8016cf0:	2101      	movs	r1, #1
 8016cf2:	fa01 f605 	lsl.w	r6, r1, r5
 8016cf6:	1d72      	adds	r2, r6, #5
 8016cf8:	0092      	lsls	r2, r2, #2
 8016cfa:	4620      	mov	r0, r4
 8016cfc:	f000 fc97 	bl	801762e <_calloc_r>
 8016d00:	b160      	cbz	r0, 8016d1c <_Balloc+0x64>
 8016d02:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8016d06:	e00e      	b.n	8016d26 <_Balloc+0x6e>
 8016d08:	2221      	movs	r2, #33	; 0x21
 8016d0a:	2104      	movs	r1, #4
 8016d0c:	4620      	mov	r0, r4
 8016d0e:	f000 fc8e 	bl	801762e <_calloc_r>
 8016d12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d14:	60f0      	str	r0, [r6, #12]
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d1e4      	bne.n	8016ce6 <_Balloc+0x2e>
 8016d1c:	2000      	movs	r0, #0
 8016d1e:	bd70      	pop	{r4, r5, r6, pc}
 8016d20:	6802      	ldr	r2, [r0, #0]
 8016d22:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8016d26:	2300      	movs	r3, #0
 8016d28:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8016d2c:	e7f7      	b.n	8016d1e <_Balloc+0x66>
 8016d2e:	bf00      	nop
 8016d30:	08022ac4 	.word	0x08022ac4
 8016d34:	08022adb 	.word	0x08022adb

08016d38 <_Bfree>:
 8016d38:	b570      	push	{r4, r5, r6, lr}
 8016d3a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8016d3c:	4605      	mov	r5, r0
 8016d3e:	460c      	mov	r4, r1
 8016d40:	b976      	cbnz	r6, 8016d60 <_Bfree+0x28>
 8016d42:	2010      	movs	r0, #16
 8016d44:	f001 fa7e 	bl	8018244 <malloc>
 8016d48:	4602      	mov	r2, r0
 8016d4a:	6268      	str	r0, [r5, #36]	; 0x24
 8016d4c:	b920      	cbnz	r0, 8016d58 <_Bfree+0x20>
 8016d4e:	4b09      	ldr	r3, [pc, #36]	; (8016d74 <_Bfree+0x3c>)
 8016d50:	4809      	ldr	r0, [pc, #36]	; (8016d78 <_Bfree+0x40>)
 8016d52:	218a      	movs	r1, #138	; 0x8a
 8016d54:	f001 fa02 	bl	801815c <__assert_func>
 8016d58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8016d5c:	6006      	str	r6, [r0, #0]
 8016d5e:	60c6      	str	r6, [r0, #12]
 8016d60:	b13c      	cbz	r4, 8016d72 <_Bfree+0x3a>
 8016d62:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8016d64:	6862      	ldr	r2, [r4, #4]
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8016d6c:	6021      	str	r1, [r4, #0]
 8016d6e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8016d72:	bd70      	pop	{r4, r5, r6, pc}
 8016d74:	08022ac4 	.word	0x08022ac4
 8016d78:	08022adb 	.word	0x08022adb

08016d7c <__multadd>:
 8016d7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016d80:	690e      	ldr	r6, [r1, #16]
 8016d82:	4607      	mov	r7, r0
 8016d84:	4698      	mov	r8, r3
 8016d86:	460c      	mov	r4, r1
 8016d88:	f101 0014 	add.w	r0, r1, #20
 8016d8c:	2300      	movs	r3, #0
 8016d8e:	6805      	ldr	r5, [r0, #0]
 8016d90:	b2a9      	uxth	r1, r5
 8016d92:	fb02 8101 	mla	r1, r2, r1, r8
 8016d96:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8016d9a:	0c2d      	lsrs	r5, r5, #16
 8016d9c:	fb02 c505 	mla	r5, r2, r5, ip
 8016da0:	b289      	uxth	r1, r1
 8016da2:	3301      	adds	r3, #1
 8016da4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8016da8:	429e      	cmp	r6, r3
 8016daa:	f840 1b04 	str.w	r1, [r0], #4
 8016dae:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8016db2:	dcec      	bgt.n	8016d8e <__multadd+0x12>
 8016db4:	f1b8 0f00 	cmp.w	r8, #0
 8016db8:	d022      	beq.n	8016e00 <__multadd+0x84>
 8016dba:	68a3      	ldr	r3, [r4, #8]
 8016dbc:	42b3      	cmp	r3, r6
 8016dbe:	dc19      	bgt.n	8016df4 <__multadd+0x78>
 8016dc0:	6861      	ldr	r1, [r4, #4]
 8016dc2:	4638      	mov	r0, r7
 8016dc4:	3101      	adds	r1, #1
 8016dc6:	f7ff ff77 	bl	8016cb8 <_Balloc>
 8016dca:	4605      	mov	r5, r0
 8016dcc:	b928      	cbnz	r0, 8016dda <__multadd+0x5e>
 8016dce:	4602      	mov	r2, r0
 8016dd0:	4b0d      	ldr	r3, [pc, #52]	; (8016e08 <__multadd+0x8c>)
 8016dd2:	480e      	ldr	r0, [pc, #56]	; (8016e0c <__multadd+0x90>)
 8016dd4:	21b5      	movs	r1, #181	; 0xb5
 8016dd6:	f001 f9c1 	bl	801815c <__assert_func>
 8016dda:	6922      	ldr	r2, [r4, #16]
 8016ddc:	3202      	adds	r2, #2
 8016dde:	f104 010c 	add.w	r1, r4, #12
 8016de2:	0092      	lsls	r2, r2, #2
 8016de4:	300c      	adds	r0, #12
 8016de6:	f7fe f91b 	bl	8015020 <memcpy>
 8016dea:	4621      	mov	r1, r4
 8016dec:	4638      	mov	r0, r7
 8016dee:	f7ff ffa3 	bl	8016d38 <_Bfree>
 8016df2:	462c      	mov	r4, r5
 8016df4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8016df8:	3601      	adds	r6, #1
 8016dfa:	f8c3 8014 	str.w	r8, [r3, #20]
 8016dfe:	6126      	str	r6, [r4, #16]
 8016e00:	4620      	mov	r0, r4
 8016e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016e06:	bf00      	nop
 8016e08:	08022a34 	.word	0x08022a34
 8016e0c:	08022adb 	.word	0x08022adb

08016e10 <__s2b>:
 8016e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016e14:	460c      	mov	r4, r1
 8016e16:	4615      	mov	r5, r2
 8016e18:	461f      	mov	r7, r3
 8016e1a:	2209      	movs	r2, #9
 8016e1c:	3308      	adds	r3, #8
 8016e1e:	4606      	mov	r6, r0
 8016e20:	fb93 f3f2 	sdiv	r3, r3, r2
 8016e24:	2100      	movs	r1, #0
 8016e26:	2201      	movs	r2, #1
 8016e28:	429a      	cmp	r2, r3
 8016e2a:	db09      	blt.n	8016e40 <__s2b+0x30>
 8016e2c:	4630      	mov	r0, r6
 8016e2e:	f7ff ff43 	bl	8016cb8 <_Balloc>
 8016e32:	b940      	cbnz	r0, 8016e46 <__s2b+0x36>
 8016e34:	4602      	mov	r2, r0
 8016e36:	4b19      	ldr	r3, [pc, #100]	; (8016e9c <__s2b+0x8c>)
 8016e38:	4819      	ldr	r0, [pc, #100]	; (8016ea0 <__s2b+0x90>)
 8016e3a:	21ce      	movs	r1, #206	; 0xce
 8016e3c:	f001 f98e 	bl	801815c <__assert_func>
 8016e40:	0052      	lsls	r2, r2, #1
 8016e42:	3101      	adds	r1, #1
 8016e44:	e7f0      	b.n	8016e28 <__s2b+0x18>
 8016e46:	9b08      	ldr	r3, [sp, #32]
 8016e48:	6143      	str	r3, [r0, #20]
 8016e4a:	2d09      	cmp	r5, #9
 8016e4c:	f04f 0301 	mov.w	r3, #1
 8016e50:	6103      	str	r3, [r0, #16]
 8016e52:	dd16      	ble.n	8016e82 <__s2b+0x72>
 8016e54:	f104 0909 	add.w	r9, r4, #9
 8016e58:	46c8      	mov	r8, r9
 8016e5a:	442c      	add	r4, r5
 8016e5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8016e60:	4601      	mov	r1, r0
 8016e62:	3b30      	subs	r3, #48	; 0x30
 8016e64:	220a      	movs	r2, #10
 8016e66:	4630      	mov	r0, r6
 8016e68:	f7ff ff88 	bl	8016d7c <__multadd>
 8016e6c:	45a0      	cmp	r8, r4
 8016e6e:	d1f5      	bne.n	8016e5c <__s2b+0x4c>
 8016e70:	f1a5 0408 	sub.w	r4, r5, #8
 8016e74:	444c      	add	r4, r9
 8016e76:	1b2d      	subs	r5, r5, r4
 8016e78:	1963      	adds	r3, r4, r5
 8016e7a:	42bb      	cmp	r3, r7
 8016e7c:	db04      	blt.n	8016e88 <__s2b+0x78>
 8016e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016e82:	340a      	adds	r4, #10
 8016e84:	2509      	movs	r5, #9
 8016e86:	e7f6      	b.n	8016e76 <__s2b+0x66>
 8016e88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016e8c:	4601      	mov	r1, r0
 8016e8e:	3b30      	subs	r3, #48	; 0x30
 8016e90:	220a      	movs	r2, #10
 8016e92:	4630      	mov	r0, r6
 8016e94:	f7ff ff72 	bl	8016d7c <__multadd>
 8016e98:	e7ee      	b.n	8016e78 <__s2b+0x68>
 8016e9a:	bf00      	nop
 8016e9c:	08022a34 	.word	0x08022a34
 8016ea0:	08022adb 	.word	0x08022adb

08016ea4 <__hi0bits>:
 8016ea4:	0c03      	lsrs	r3, r0, #16
 8016ea6:	041b      	lsls	r3, r3, #16
 8016ea8:	b9d3      	cbnz	r3, 8016ee0 <__hi0bits+0x3c>
 8016eaa:	0400      	lsls	r0, r0, #16
 8016eac:	2310      	movs	r3, #16
 8016eae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8016eb2:	bf04      	itt	eq
 8016eb4:	0200      	lsleq	r0, r0, #8
 8016eb6:	3308      	addeq	r3, #8
 8016eb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8016ebc:	bf04      	itt	eq
 8016ebe:	0100      	lsleq	r0, r0, #4
 8016ec0:	3304      	addeq	r3, #4
 8016ec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8016ec6:	bf04      	itt	eq
 8016ec8:	0080      	lsleq	r0, r0, #2
 8016eca:	3302      	addeq	r3, #2
 8016ecc:	2800      	cmp	r0, #0
 8016ece:	db05      	blt.n	8016edc <__hi0bits+0x38>
 8016ed0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8016ed4:	f103 0301 	add.w	r3, r3, #1
 8016ed8:	bf08      	it	eq
 8016eda:	2320      	moveq	r3, #32
 8016edc:	4618      	mov	r0, r3
 8016ede:	4770      	bx	lr
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	e7e4      	b.n	8016eae <__hi0bits+0xa>

08016ee4 <__lo0bits>:
 8016ee4:	6803      	ldr	r3, [r0, #0]
 8016ee6:	f013 0207 	ands.w	r2, r3, #7
 8016eea:	4601      	mov	r1, r0
 8016eec:	d00b      	beq.n	8016f06 <__lo0bits+0x22>
 8016eee:	07da      	lsls	r2, r3, #31
 8016ef0:	d424      	bmi.n	8016f3c <__lo0bits+0x58>
 8016ef2:	0798      	lsls	r0, r3, #30
 8016ef4:	bf49      	itett	mi
 8016ef6:	085b      	lsrmi	r3, r3, #1
 8016ef8:	089b      	lsrpl	r3, r3, #2
 8016efa:	2001      	movmi	r0, #1
 8016efc:	600b      	strmi	r3, [r1, #0]
 8016efe:	bf5c      	itt	pl
 8016f00:	600b      	strpl	r3, [r1, #0]
 8016f02:	2002      	movpl	r0, #2
 8016f04:	4770      	bx	lr
 8016f06:	b298      	uxth	r0, r3
 8016f08:	b9b0      	cbnz	r0, 8016f38 <__lo0bits+0x54>
 8016f0a:	0c1b      	lsrs	r3, r3, #16
 8016f0c:	2010      	movs	r0, #16
 8016f0e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8016f12:	bf04      	itt	eq
 8016f14:	0a1b      	lsreq	r3, r3, #8
 8016f16:	3008      	addeq	r0, #8
 8016f18:	071a      	lsls	r2, r3, #28
 8016f1a:	bf04      	itt	eq
 8016f1c:	091b      	lsreq	r3, r3, #4
 8016f1e:	3004      	addeq	r0, #4
 8016f20:	079a      	lsls	r2, r3, #30
 8016f22:	bf04      	itt	eq
 8016f24:	089b      	lsreq	r3, r3, #2
 8016f26:	3002      	addeq	r0, #2
 8016f28:	07da      	lsls	r2, r3, #31
 8016f2a:	d403      	bmi.n	8016f34 <__lo0bits+0x50>
 8016f2c:	085b      	lsrs	r3, r3, #1
 8016f2e:	f100 0001 	add.w	r0, r0, #1
 8016f32:	d005      	beq.n	8016f40 <__lo0bits+0x5c>
 8016f34:	600b      	str	r3, [r1, #0]
 8016f36:	4770      	bx	lr
 8016f38:	4610      	mov	r0, r2
 8016f3a:	e7e8      	b.n	8016f0e <__lo0bits+0x2a>
 8016f3c:	2000      	movs	r0, #0
 8016f3e:	4770      	bx	lr
 8016f40:	2020      	movs	r0, #32
 8016f42:	4770      	bx	lr

08016f44 <__i2b>:
 8016f44:	b510      	push	{r4, lr}
 8016f46:	460c      	mov	r4, r1
 8016f48:	2101      	movs	r1, #1
 8016f4a:	f7ff feb5 	bl	8016cb8 <_Balloc>
 8016f4e:	4602      	mov	r2, r0
 8016f50:	b928      	cbnz	r0, 8016f5e <__i2b+0x1a>
 8016f52:	4b05      	ldr	r3, [pc, #20]	; (8016f68 <__i2b+0x24>)
 8016f54:	4805      	ldr	r0, [pc, #20]	; (8016f6c <__i2b+0x28>)
 8016f56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8016f5a:	f001 f8ff 	bl	801815c <__assert_func>
 8016f5e:	2301      	movs	r3, #1
 8016f60:	6144      	str	r4, [r0, #20]
 8016f62:	6103      	str	r3, [r0, #16]
 8016f64:	bd10      	pop	{r4, pc}
 8016f66:	bf00      	nop
 8016f68:	08022a34 	.word	0x08022a34
 8016f6c:	08022adb 	.word	0x08022adb

08016f70 <__multiply>:
 8016f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f74:	4614      	mov	r4, r2
 8016f76:	690a      	ldr	r2, [r1, #16]
 8016f78:	6923      	ldr	r3, [r4, #16]
 8016f7a:	429a      	cmp	r2, r3
 8016f7c:	bfb8      	it	lt
 8016f7e:	460b      	movlt	r3, r1
 8016f80:	460d      	mov	r5, r1
 8016f82:	bfbc      	itt	lt
 8016f84:	4625      	movlt	r5, r4
 8016f86:	461c      	movlt	r4, r3
 8016f88:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8016f8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8016f90:	68ab      	ldr	r3, [r5, #8]
 8016f92:	6869      	ldr	r1, [r5, #4]
 8016f94:	eb0a 0709 	add.w	r7, sl, r9
 8016f98:	42bb      	cmp	r3, r7
 8016f9a:	b085      	sub	sp, #20
 8016f9c:	bfb8      	it	lt
 8016f9e:	3101      	addlt	r1, #1
 8016fa0:	f7ff fe8a 	bl	8016cb8 <_Balloc>
 8016fa4:	b930      	cbnz	r0, 8016fb4 <__multiply+0x44>
 8016fa6:	4602      	mov	r2, r0
 8016fa8:	4b42      	ldr	r3, [pc, #264]	; (80170b4 <__multiply+0x144>)
 8016faa:	4843      	ldr	r0, [pc, #268]	; (80170b8 <__multiply+0x148>)
 8016fac:	f240 115d 	movw	r1, #349	; 0x15d
 8016fb0:	f001 f8d4 	bl	801815c <__assert_func>
 8016fb4:	f100 0614 	add.w	r6, r0, #20
 8016fb8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8016fbc:	4633      	mov	r3, r6
 8016fbe:	2200      	movs	r2, #0
 8016fc0:	4543      	cmp	r3, r8
 8016fc2:	d31e      	bcc.n	8017002 <__multiply+0x92>
 8016fc4:	f105 0c14 	add.w	ip, r5, #20
 8016fc8:	f104 0314 	add.w	r3, r4, #20
 8016fcc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8016fd0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8016fd4:	9202      	str	r2, [sp, #8]
 8016fd6:	ebac 0205 	sub.w	r2, ip, r5
 8016fda:	3a15      	subs	r2, #21
 8016fdc:	f022 0203 	bic.w	r2, r2, #3
 8016fe0:	3204      	adds	r2, #4
 8016fe2:	f105 0115 	add.w	r1, r5, #21
 8016fe6:	458c      	cmp	ip, r1
 8016fe8:	bf38      	it	cc
 8016fea:	2204      	movcc	r2, #4
 8016fec:	9201      	str	r2, [sp, #4]
 8016fee:	9a02      	ldr	r2, [sp, #8]
 8016ff0:	9303      	str	r3, [sp, #12]
 8016ff2:	429a      	cmp	r2, r3
 8016ff4:	d808      	bhi.n	8017008 <__multiply+0x98>
 8016ff6:	2f00      	cmp	r7, #0
 8016ff8:	dc55      	bgt.n	80170a6 <__multiply+0x136>
 8016ffa:	6107      	str	r7, [r0, #16]
 8016ffc:	b005      	add	sp, #20
 8016ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017002:	f843 2b04 	str.w	r2, [r3], #4
 8017006:	e7db      	b.n	8016fc0 <__multiply+0x50>
 8017008:	f8b3 a000 	ldrh.w	sl, [r3]
 801700c:	f1ba 0f00 	cmp.w	sl, #0
 8017010:	d020      	beq.n	8017054 <__multiply+0xe4>
 8017012:	f105 0e14 	add.w	lr, r5, #20
 8017016:	46b1      	mov	r9, r6
 8017018:	2200      	movs	r2, #0
 801701a:	f85e 4b04 	ldr.w	r4, [lr], #4
 801701e:	f8d9 b000 	ldr.w	fp, [r9]
 8017022:	b2a1      	uxth	r1, r4
 8017024:	fa1f fb8b 	uxth.w	fp, fp
 8017028:	fb0a b101 	mla	r1, sl, r1, fp
 801702c:	4411      	add	r1, r2
 801702e:	f8d9 2000 	ldr.w	r2, [r9]
 8017032:	0c24      	lsrs	r4, r4, #16
 8017034:	0c12      	lsrs	r2, r2, #16
 8017036:	fb0a 2404 	mla	r4, sl, r4, r2
 801703a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 801703e:	b289      	uxth	r1, r1
 8017040:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8017044:	45f4      	cmp	ip, lr
 8017046:	f849 1b04 	str.w	r1, [r9], #4
 801704a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 801704e:	d8e4      	bhi.n	801701a <__multiply+0xaa>
 8017050:	9901      	ldr	r1, [sp, #4]
 8017052:	5072      	str	r2, [r6, r1]
 8017054:	9a03      	ldr	r2, [sp, #12]
 8017056:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801705a:	3304      	adds	r3, #4
 801705c:	f1b9 0f00 	cmp.w	r9, #0
 8017060:	d01f      	beq.n	80170a2 <__multiply+0x132>
 8017062:	6834      	ldr	r4, [r6, #0]
 8017064:	f105 0114 	add.w	r1, r5, #20
 8017068:	46b6      	mov	lr, r6
 801706a:	f04f 0a00 	mov.w	sl, #0
 801706e:	880a      	ldrh	r2, [r1, #0]
 8017070:	f8be b002 	ldrh.w	fp, [lr, #2]
 8017074:	fb09 b202 	mla	r2, r9, r2, fp
 8017078:	4492      	add	sl, r2
 801707a:	b2a4      	uxth	r4, r4
 801707c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8017080:	f84e 4b04 	str.w	r4, [lr], #4
 8017084:	f851 4b04 	ldr.w	r4, [r1], #4
 8017088:	f8be 2000 	ldrh.w	r2, [lr]
 801708c:	0c24      	lsrs	r4, r4, #16
 801708e:	fb09 2404 	mla	r4, r9, r4, r2
 8017092:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8017096:	458c      	cmp	ip, r1
 8017098:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801709c:	d8e7      	bhi.n	801706e <__multiply+0xfe>
 801709e:	9a01      	ldr	r2, [sp, #4]
 80170a0:	50b4      	str	r4, [r6, r2]
 80170a2:	3604      	adds	r6, #4
 80170a4:	e7a3      	b.n	8016fee <__multiply+0x7e>
 80170a6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d1a5      	bne.n	8016ffa <__multiply+0x8a>
 80170ae:	3f01      	subs	r7, #1
 80170b0:	e7a1      	b.n	8016ff6 <__multiply+0x86>
 80170b2:	bf00      	nop
 80170b4:	08022a34 	.word	0x08022a34
 80170b8:	08022adb 	.word	0x08022adb

080170bc <__pow5mult>:
 80170bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80170c0:	4615      	mov	r5, r2
 80170c2:	f012 0203 	ands.w	r2, r2, #3
 80170c6:	4606      	mov	r6, r0
 80170c8:	460f      	mov	r7, r1
 80170ca:	d007      	beq.n	80170dc <__pow5mult+0x20>
 80170cc:	4c25      	ldr	r4, [pc, #148]	; (8017164 <__pow5mult+0xa8>)
 80170ce:	3a01      	subs	r2, #1
 80170d0:	2300      	movs	r3, #0
 80170d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80170d6:	f7ff fe51 	bl	8016d7c <__multadd>
 80170da:	4607      	mov	r7, r0
 80170dc:	10ad      	asrs	r5, r5, #2
 80170de:	d03d      	beq.n	801715c <__pow5mult+0xa0>
 80170e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80170e2:	b97c      	cbnz	r4, 8017104 <__pow5mult+0x48>
 80170e4:	2010      	movs	r0, #16
 80170e6:	f001 f8ad 	bl	8018244 <malloc>
 80170ea:	4602      	mov	r2, r0
 80170ec:	6270      	str	r0, [r6, #36]	; 0x24
 80170ee:	b928      	cbnz	r0, 80170fc <__pow5mult+0x40>
 80170f0:	4b1d      	ldr	r3, [pc, #116]	; (8017168 <__pow5mult+0xac>)
 80170f2:	481e      	ldr	r0, [pc, #120]	; (801716c <__pow5mult+0xb0>)
 80170f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80170f8:	f001 f830 	bl	801815c <__assert_func>
 80170fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017100:	6004      	str	r4, [r0, #0]
 8017102:	60c4      	str	r4, [r0, #12]
 8017104:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017108:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801710c:	b94c      	cbnz	r4, 8017122 <__pow5mult+0x66>
 801710e:	f240 2171 	movw	r1, #625	; 0x271
 8017112:	4630      	mov	r0, r6
 8017114:	f7ff ff16 	bl	8016f44 <__i2b>
 8017118:	2300      	movs	r3, #0
 801711a:	f8c8 0008 	str.w	r0, [r8, #8]
 801711e:	4604      	mov	r4, r0
 8017120:	6003      	str	r3, [r0, #0]
 8017122:	f04f 0900 	mov.w	r9, #0
 8017126:	07eb      	lsls	r3, r5, #31
 8017128:	d50a      	bpl.n	8017140 <__pow5mult+0x84>
 801712a:	4639      	mov	r1, r7
 801712c:	4622      	mov	r2, r4
 801712e:	4630      	mov	r0, r6
 8017130:	f7ff ff1e 	bl	8016f70 <__multiply>
 8017134:	4639      	mov	r1, r7
 8017136:	4680      	mov	r8, r0
 8017138:	4630      	mov	r0, r6
 801713a:	f7ff fdfd 	bl	8016d38 <_Bfree>
 801713e:	4647      	mov	r7, r8
 8017140:	106d      	asrs	r5, r5, #1
 8017142:	d00b      	beq.n	801715c <__pow5mult+0xa0>
 8017144:	6820      	ldr	r0, [r4, #0]
 8017146:	b938      	cbnz	r0, 8017158 <__pow5mult+0x9c>
 8017148:	4622      	mov	r2, r4
 801714a:	4621      	mov	r1, r4
 801714c:	4630      	mov	r0, r6
 801714e:	f7ff ff0f 	bl	8016f70 <__multiply>
 8017152:	6020      	str	r0, [r4, #0]
 8017154:	f8c0 9000 	str.w	r9, [r0]
 8017158:	4604      	mov	r4, r0
 801715a:	e7e4      	b.n	8017126 <__pow5mult+0x6a>
 801715c:	4638      	mov	r0, r7
 801715e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017162:	bf00      	nop
 8017164:	08022c30 	.word	0x08022c30
 8017168:	08022ac4 	.word	0x08022ac4
 801716c:	08022adb 	.word	0x08022adb

08017170 <__lshift>:
 8017170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017174:	460c      	mov	r4, r1
 8017176:	6849      	ldr	r1, [r1, #4]
 8017178:	6923      	ldr	r3, [r4, #16]
 801717a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801717e:	68a3      	ldr	r3, [r4, #8]
 8017180:	4607      	mov	r7, r0
 8017182:	4691      	mov	r9, r2
 8017184:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017188:	f108 0601 	add.w	r6, r8, #1
 801718c:	42b3      	cmp	r3, r6
 801718e:	db0b      	blt.n	80171a8 <__lshift+0x38>
 8017190:	4638      	mov	r0, r7
 8017192:	f7ff fd91 	bl	8016cb8 <_Balloc>
 8017196:	4605      	mov	r5, r0
 8017198:	b948      	cbnz	r0, 80171ae <__lshift+0x3e>
 801719a:	4602      	mov	r2, r0
 801719c:	4b28      	ldr	r3, [pc, #160]	; (8017240 <__lshift+0xd0>)
 801719e:	4829      	ldr	r0, [pc, #164]	; (8017244 <__lshift+0xd4>)
 80171a0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80171a4:	f000 ffda 	bl	801815c <__assert_func>
 80171a8:	3101      	adds	r1, #1
 80171aa:	005b      	lsls	r3, r3, #1
 80171ac:	e7ee      	b.n	801718c <__lshift+0x1c>
 80171ae:	2300      	movs	r3, #0
 80171b0:	f100 0114 	add.w	r1, r0, #20
 80171b4:	f100 0210 	add.w	r2, r0, #16
 80171b8:	4618      	mov	r0, r3
 80171ba:	4553      	cmp	r3, sl
 80171bc:	db33      	blt.n	8017226 <__lshift+0xb6>
 80171be:	6920      	ldr	r0, [r4, #16]
 80171c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80171c4:	f104 0314 	add.w	r3, r4, #20
 80171c8:	f019 091f 	ands.w	r9, r9, #31
 80171cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80171d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80171d4:	d02b      	beq.n	801722e <__lshift+0xbe>
 80171d6:	f1c9 0e20 	rsb	lr, r9, #32
 80171da:	468a      	mov	sl, r1
 80171dc:	2200      	movs	r2, #0
 80171de:	6818      	ldr	r0, [r3, #0]
 80171e0:	fa00 f009 	lsl.w	r0, r0, r9
 80171e4:	4302      	orrs	r2, r0
 80171e6:	f84a 2b04 	str.w	r2, [sl], #4
 80171ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80171ee:	459c      	cmp	ip, r3
 80171f0:	fa22 f20e 	lsr.w	r2, r2, lr
 80171f4:	d8f3      	bhi.n	80171de <__lshift+0x6e>
 80171f6:	ebac 0304 	sub.w	r3, ip, r4
 80171fa:	3b15      	subs	r3, #21
 80171fc:	f023 0303 	bic.w	r3, r3, #3
 8017200:	3304      	adds	r3, #4
 8017202:	f104 0015 	add.w	r0, r4, #21
 8017206:	4584      	cmp	ip, r0
 8017208:	bf38      	it	cc
 801720a:	2304      	movcc	r3, #4
 801720c:	50ca      	str	r2, [r1, r3]
 801720e:	b10a      	cbz	r2, 8017214 <__lshift+0xa4>
 8017210:	f108 0602 	add.w	r6, r8, #2
 8017214:	3e01      	subs	r6, #1
 8017216:	4638      	mov	r0, r7
 8017218:	612e      	str	r6, [r5, #16]
 801721a:	4621      	mov	r1, r4
 801721c:	f7ff fd8c 	bl	8016d38 <_Bfree>
 8017220:	4628      	mov	r0, r5
 8017222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017226:	f842 0f04 	str.w	r0, [r2, #4]!
 801722a:	3301      	adds	r3, #1
 801722c:	e7c5      	b.n	80171ba <__lshift+0x4a>
 801722e:	3904      	subs	r1, #4
 8017230:	f853 2b04 	ldr.w	r2, [r3], #4
 8017234:	f841 2f04 	str.w	r2, [r1, #4]!
 8017238:	459c      	cmp	ip, r3
 801723a:	d8f9      	bhi.n	8017230 <__lshift+0xc0>
 801723c:	e7ea      	b.n	8017214 <__lshift+0xa4>
 801723e:	bf00      	nop
 8017240:	08022a34 	.word	0x08022a34
 8017244:	08022adb 	.word	0x08022adb

08017248 <__mcmp>:
 8017248:	b530      	push	{r4, r5, lr}
 801724a:	6902      	ldr	r2, [r0, #16]
 801724c:	690c      	ldr	r4, [r1, #16]
 801724e:	1b12      	subs	r2, r2, r4
 8017250:	d10e      	bne.n	8017270 <__mcmp+0x28>
 8017252:	f100 0314 	add.w	r3, r0, #20
 8017256:	3114      	adds	r1, #20
 8017258:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801725c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017260:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017264:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017268:	42a5      	cmp	r5, r4
 801726a:	d003      	beq.n	8017274 <__mcmp+0x2c>
 801726c:	d305      	bcc.n	801727a <__mcmp+0x32>
 801726e:	2201      	movs	r2, #1
 8017270:	4610      	mov	r0, r2
 8017272:	bd30      	pop	{r4, r5, pc}
 8017274:	4283      	cmp	r3, r0
 8017276:	d3f3      	bcc.n	8017260 <__mcmp+0x18>
 8017278:	e7fa      	b.n	8017270 <__mcmp+0x28>
 801727a:	f04f 32ff 	mov.w	r2, #4294967295
 801727e:	e7f7      	b.n	8017270 <__mcmp+0x28>

08017280 <__mdiff>:
 8017280:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017284:	460c      	mov	r4, r1
 8017286:	4606      	mov	r6, r0
 8017288:	4611      	mov	r1, r2
 801728a:	4620      	mov	r0, r4
 801728c:	4617      	mov	r7, r2
 801728e:	f7ff ffdb 	bl	8017248 <__mcmp>
 8017292:	1e05      	subs	r5, r0, #0
 8017294:	d110      	bne.n	80172b8 <__mdiff+0x38>
 8017296:	4629      	mov	r1, r5
 8017298:	4630      	mov	r0, r6
 801729a:	f7ff fd0d 	bl	8016cb8 <_Balloc>
 801729e:	b930      	cbnz	r0, 80172ae <__mdiff+0x2e>
 80172a0:	4b39      	ldr	r3, [pc, #228]	; (8017388 <__mdiff+0x108>)
 80172a2:	4602      	mov	r2, r0
 80172a4:	f240 2132 	movw	r1, #562	; 0x232
 80172a8:	4838      	ldr	r0, [pc, #224]	; (801738c <__mdiff+0x10c>)
 80172aa:	f000 ff57 	bl	801815c <__assert_func>
 80172ae:	2301      	movs	r3, #1
 80172b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80172b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172b8:	bfa4      	itt	ge
 80172ba:	463b      	movge	r3, r7
 80172bc:	4627      	movge	r7, r4
 80172be:	4630      	mov	r0, r6
 80172c0:	6879      	ldr	r1, [r7, #4]
 80172c2:	bfa6      	itte	ge
 80172c4:	461c      	movge	r4, r3
 80172c6:	2500      	movge	r5, #0
 80172c8:	2501      	movlt	r5, #1
 80172ca:	f7ff fcf5 	bl	8016cb8 <_Balloc>
 80172ce:	b920      	cbnz	r0, 80172da <__mdiff+0x5a>
 80172d0:	4b2d      	ldr	r3, [pc, #180]	; (8017388 <__mdiff+0x108>)
 80172d2:	4602      	mov	r2, r0
 80172d4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80172d8:	e7e6      	b.n	80172a8 <__mdiff+0x28>
 80172da:	693e      	ldr	r6, [r7, #16]
 80172dc:	60c5      	str	r5, [r0, #12]
 80172de:	6925      	ldr	r5, [r4, #16]
 80172e0:	f107 0114 	add.w	r1, r7, #20
 80172e4:	f104 0914 	add.w	r9, r4, #20
 80172e8:	f100 0e14 	add.w	lr, r0, #20
 80172ec:	f107 0210 	add.w	r2, r7, #16
 80172f0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 80172f4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 80172f8:	46f2      	mov	sl, lr
 80172fa:	2700      	movs	r7, #0
 80172fc:	f859 3b04 	ldr.w	r3, [r9], #4
 8017300:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017304:	fa1f f883 	uxth.w	r8, r3
 8017308:	fa17 f78b 	uxtah	r7, r7, fp
 801730c:	0c1b      	lsrs	r3, r3, #16
 801730e:	eba7 0808 	sub.w	r8, r7, r8
 8017312:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017316:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801731a:	fa1f f888 	uxth.w	r8, r8
 801731e:	141f      	asrs	r7, r3, #16
 8017320:	454d      	cmp	r5, r9
 8017322:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017326:	f84a 3b04 	str.w	r3, [sl], #4
 801732a:	d8e7      	bhi.n	80172fc <__mdiff+0x7c>
 801732c:	1b2b      	subs	r3, r5, r4
 801732e:	3b15      	subs	r3, #21
 8017330:	f023 0303 	bic.w	r3, r3, #3
 8017334:	3304      	adds	r3, #4
 8017336:	3415      	adds	r4, #21
 8017338:	42a5      	cmp	r5, r4
 801733a:	bf38      	it	cc
 801733c:	2304      	movcc	r3, #4
 801733e:	4419      	add	r1, r3
 8017340:	4473      	add	r3, lr
 8017342:	469e      	mov	lr, r3
 8017344:	460d      	mov	r5, r1
 8017346:	4565      	cmp	r5, ip
 8017348:	d30e      	bcc.n	8017368 <__mdiff+0xe8>
 801734a:	f10c 0203 	add.w	r2, ip, #3
 801734e:	1a52      	subs	r2, r2, r1
 8017350:	f022 0203 	bic.w	r2, r2, #3
 8017354:	3903      	subs	r1, #3
 8017356:	458c      	cmp	ip, r1
 8017358:	bf38      	it	cc
 801735a:	2200      	movcc	r2, #0
 801735c:	441a      	add	r2, r3
 801735e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017362:	b17b      	cbz	r3, 8017384 <__mdiff+0x104>
 8017364:	6106      	str	r6, [r0, #16]
 8017366:	e7a5      	b.n	80172b4 <__mdiff+0x34>
 8017368:	f855 8b04 	ldr.w	r8, [r5], #4
 801736c:	fa17 f488 	uxtah	r4, r7, r8
 8017370:	1422      	asrs	r2, r4, #16
 8017372:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8017376:	b2a4      	uxth	r4, r4
 8017378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 801737c:	f84e 4b04 	str.w	r4, [lr], #4
 8017380:	1417      	asrs	r7, r2, #16
 8017382:	e7e0      	b.n	8017346 <__mdiff+0xc6>
 8017384:	3e01      	subs	r6, #1
 8017386:	e7ea      	b.n	801735e <__mdiff+0xde>
 8017388:	08022a34 	.word	0x08022a34
 801738c:	08022adb 	.word	0x08022adb

08017390 <__ulp>:
 8017390:	b082      	sub	sp, #8
 8017392:	ed8d 0b00 	vstr	d0, [sp]
 8017396:	9b01      	ldr	r3, [sp, #4]
 8017398:	4912      	ldr	r1, [pc, #72]	; (80173e4 <__ulp+0x54>)
 801739a:	4019      	ands	r1, r3
 801739c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80173a0:	2900      	cmp	r1, #0
 80173a2:	dd05      	ble.n	80173b0 <__ulp+0x20>
 80173a4:	2200      	movs	r2, #0
 80173a6:	460b      	mov	r3, r1
 80173a8:	ec43 2b10 	vmov	d0, r2, r3
 80173ac:	b002      	add	sp, #8
 80173ae:	4770      	bx	lr
 80173b0:	4249      	negs	r1, r1
 80173b2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80173b6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80173ba:	f04f 0200 	mov.w	r2, #0
 80173be:	f04f 0300 	mov.w	r3, #0
 80173c2:	da04      	bge.n	80173ce <__ulp+0x3e>
 80173c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80173c8:	fa41 f300 	asr.w	r3, r1, r0
 80173cc:	e7ec      	b.n	80173a8 <__ulp+0x18>
 80173ce:	f1a0 0114 	sub.w	r1, r0, #20
 80173d2:	291e      	cmp	r1, #30
 80173d4:	bfda      	itte	le
 80173d6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80173da:	fa20 f101 	lsrle.w	r1, r0, r1
 80173de:	2101      	movgt	r1, #1
 80173e0:	460a      	mov	r2, r1
 80173e2:	e7e1      	b.n	80173a8 <__ulp+0x18>
 80173e4:	7ff00000 	.word	0x7ff00000

080173e8 <__b2d>:
 80173e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80173ea:	6905      	ldr	r5, [r0, #16]
 80173ec:	f100 0714 	add.w	r7, r0, #20
 80173f0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80173f4:	1f2e      	subs	r6, r5, #4
 80173f6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80173fa:	4620      	mov	r0, r4
 80173fc:	f7ff fd52 	bl	8016ea4 <__hi0bits>
 8017400:	f1c0 0320 	rsb	r3, r0, #32
 8017404:	280a      	cmp	r0, #10
 8017406:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8017484 <__b2d+0x9c>
 801740a:	600b      	str	r3, [r1, #0]
 801740c:	dc14      	bgt.n	8017438 <__b2d+0x50>
 801740e:	f1c0 0e0b 	rsb	lr, r0, #11
 8017412:	fa24 f10e 	lsr.w	r1, r4, lr
 8017416:	42b7      	cmp	r7, r6
 8017418:	ea41 030c 	orr.w	r3, r1, ip
 801741c:	bf34      	ite	cc
 801741e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017422:	2100      	movcs	r1, #0
 8017424:	3015      	adds	r0, #21
 8017426:	fa04 f000 	lsl.w	r0, r4, r0
 801742a:	fa21 f10e 	lsr.w	r1, r1, lr
 801742e:	ea40 0201 	orr.w	r2, r0, r1
 8017432:	ec43 2b10 	vmov	d0, r2, r3
 8017436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017438:	42b7      	cmp	r7, r6
 801743a:	bf3a      	itte	cc
 801743c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8017440:	f1a5 0608 	subcc.w	r6, r5, #8
 8017444:	2100      	movcs	r1, #0
 8017446:	380b      	subs	r0, #11
 8017448:	d017      	beq.n	801747a <__b2d+0x92>
 801744a:	f1c0 0c20 	rsb	ip, r0, #32
 801744e:	fa04 f500 	lsl.w	r5, r4, r0
 8017452:	42be      	cmp	r6, r7
 8017454:	fa21 f40c 	lsr.w	r4, r1, ip
 8017458:	ea45 0504 	orr.w	r5, r5, r4
 801745c:	bf8c      	ite	hi
 801745e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8017462:	2400      	movls	r4, #0
 8017464:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8017468:	fa01 f000 	lsl.w	r0, r1, r0
 801746c:	fa24 f40c 	lsr.w	r4, r4, ip
 8017470:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8017474:	ea40 0204 	orr.w	r2, r0, r4
 8017478:	e7db      	b.n	8017432 <__b2d+0x4a>
 801747a:	ea44 030c 	orr.w	r3, r4, ip
 801747e:	460a      	mov	r2, r1
 8017480:	e7d7      	b.n	8017432 <__b2d+0x4a>
 8017482:	bf00      	nop
 8017484:	3ff00000 	.word	0x3ff00000

08017488 <__d2b>:
 8017488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801748c:	4689      	mov	r9, r1
 801748e:	2101      	movs	r1, #1
 8017490:	ec57 6b10 	vmov	r6, r7, d0
 8017494:	4690      	mov	r8, r2
 8017496:	f7ff fc0f 	bl	8016cb8 <_Balloc>
 801749a:	4604      	mov	r4, r0
 801749c:	b930      	cbnz	r0, 80174ac <__d2b+0x24>
 801749e:	4602      	mov	r2, r0
 80174a0:	4b25      	ldr	r3, [pc, #148]	; (8017538 <__d2b+0xb0>)
 80174a2:	4826      	ldr	r0, [pc, #152]	; (801753c <__d2b+0xb4>)
 80174a4:	f240 310a 	movw	r1, #778	; 0x30a
 80174a8:	f000 fe58 	bl	801815c <__assert_func>
 80174ac:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80174b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80174b4:	bb35      	cbnz	r5, 8017504 <__d2b+0x7c>
 80174b6:	2e00      	cmp	r6, #0
 80174b8:	9301      	str	r3, [sp, #4]
 80174ba:	d028      	beq.n	801750e <__d2b+0x86>
 80174bc:	4668      	mov	r0, sp
 80174be:	9600      	str	r6, [sp, #0]
 80174c0:	f7ff fd10 	bl	8016ee4 <__lo0bits>
 80174c4:	9900      	ldr	r1, [sp, #0]
 80174c6:	b300      	cbz	r0, 801750a <__d2b+0x82>
 80174c8:	9a01      	ldr	r2, [sp, #4]
 80174ca:	f1c0 0320 	rsb	r3, r0, #32
 80174ce:	fa02 f303 	lsl.w	r3, r2, r3
 80174d2:	430b      	orrs	r3, r1
 80174d4:	40c2      	lsrs	r2, r0
 80174d6:	6163      	str	r3, [r4, #20]
 80174d8:	9201      	str	r2, [sp, #4]
 80174da:	9b01      	ldr	r3, [sp, #4]
 80174dc:	61a3      	str	r3, [r4, #24]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	bf14      	ite	ne
 80174e2:	2202      	movne	r2, #2
 80174e4:	2201      	moveq	r2, #1
 80174e6:	6122      	str	r2, [r4, #16]
 80174e8:	b1d5      	cbz	r5, 8017520 <__d2b+0x98>
 80174ea:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80174ee:	4405      	add	r5, r0
 80174f0:	f8c9 5000 	str.w	r5, [r9]
 80174f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80174f8:	f8c8 0000 	str.w	r0, [r8]
 80174fc:	4620      	mov	r0, r4
 80174fe:	b003      	add	sp, #12
 8017500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017508:	e7d5      	b.n	80174b6 <__d2b+0x2e>
 801750a:	6161      	str	r1, [r4, #20]
 801750c:	e7e5      	b.n	80174da <__d2b+0x52>
 801750e:	a801      	add	r0, sp, #4
 8017510:	f7ff fce8 	bl	8016ee4 <__lo0bits>
 8017514:	9b01      	ldr	r3, [sp, #4]
 8017516:	6163      	str	r3, [r4, #20]
 8017518:	2201      	movs	r2, #1
 801751a:	6122      	str	r2, [r4, #16]
 801751c:	3020      	adds	r0, #32
 801751e:	e7e3      	b.n	80174e8 <__d2b+0x60>
 8017520:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017524:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017528:	f8c9 0000 	str.w	r0, [r9]
 801752c:	6918      	ldr	r0, [r3, #16]
 801752e:	f7ff fcb9 	bl	8016ea4 <__hi0bits>
 8017532:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017536:	e7df      	b.n	80174f8 <__d2b+0x70>
 8017538:	08022a34 	.word	0x08022a34
 801753c:	08022adb 	.word	0x08022adb

08017540 <__ratio>:
 8017540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017544:	4688      	mov	r8, r1
 8017546:	4669      	mov	r1, sp
 8017548:	4681      	mov	r9, r0
 801754a:	f7ff ff4d 	bl	80173e8 <__b2d>
 801754e:	a901      	add	r1, sp, #4
 8017550:	4640      	mov	r0, r8
 8017552:	ec55 4b10 	vmov	r4, r5, d0
 8017556:	f7ff ff47 	bl	80173e8 <__b2d>
 801755a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801755e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8017562:	eba3 0c02 	sub.w	ip, r3, r2
 8017566:	e9dd 3200 	ldrd	r3, r2, [sp]
 801756a:	1a9b      	subs	r3, r3, r2
 801756c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8017570:	ec51 0b10 	vmov	r0, r1, d0
 8017574:	2b00      	cmp	r3, #0
 8017576:	bfd6      	itet	le
 8017578:	460a      	movle	r2, r1
 801757a:	462a      	movgt	r2, r5
 801757c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8017580:	468b      	mov	fp, r1
 8017582:	462f      	mov	r7, r5
 8017584:	bfd4      	ite	le
 8017586:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801758a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801758e:	4620      	mov	r0, r4
 8017590:	ee10 2a10 	vmov	r2, s0
 8017594:	465b      	mov	r3, fp
 8017596:	4639      	mov	r1, r7
 8017598:	f7e9 f970 	bl	800087c <__aeabi_ddiv>
 801759c:	ec41 0b10 	vmov	d0, r0, r1
 80175a0:	b003      	add	sp, #12
 80175a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080175a6 <__copybits>:
 80175a6:	3901      	subs	r1, #1
 80175a8:	b570      	push	{r4, r5, r6, lr}
 80175aa:	1149      	asrs	r1, r1, #5
 80175ac:	6914      	ldr	r4, [r2, #16]
 80175ae:	3101      	adds	r1, #1
 80175b0:	f102 0314 	add.w	r3, r2, #20
 80175b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80175b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80175bc:	1f05      	subs	r5, r0, #4
 80175be:	42a3      	cmp	r3, r4
 80175c0:	d30c      	bcc.n	80175dc <__copybits+0x36>
 80175c2:	1aa3      	subs	r3, r4, r2
 80175c4:	3b11      	subs	r3, #17
 80175c6:	f023 0303 	bic.w	r3, r3, #3
 80175ca:	3211      	adds	r2, #17
 80175cc:	42a2      	cmp	r2, r4
 80175ce:	bf88      	it	hi
 80175d0:	2300      	movhi	r3, #0
 80175d2:	4418      	add	r0, r3
 80175d4:	2300      	movs	r3, #0
 80175d6:	4288      	cmp	r0, r1
 80175d8:	d305      	bcc.n	80175e6 <__copybits+0x40>
 80175da:	bd70      	pop	{r4, r5, r6, pc}
 80175dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80175e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80175e4:	e7eb      	b.n	80175be <__copybits+0x18>
 80175e6:	f840 3b04 	str.w	r3, [r0], #4
 80175ea:	e7f4      	b.n	80175d6 <__copybits+0x30>

080175ec <__any_on>:
 80175ec:	f100 0214 	add.w	r2, r0, #20
 80175f0:	6900      	ldr	r0, [r0, #16]
 80175f2:	114b      	asrs	r3, r1, #5
 80175f4:	4298      	cmp	r0, r3
 80175f6:	b510      	push	{r4, lr}
 80175f8:	db11      	blt.n	801761e <__any_on+0x32>
 80175fa:	dd0a      	ble.n	8017612 <__any_on+0x26>
 80175fc:	f011 011f 	ands.w	r1, r1, #31
 8017600:	d007      	beq.n	8017612 <__any_on+0x26>
 8017602:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8017606:	fa24 f001 	lsr.w	r0, r4, r1
 801760a:	fa00 f101 	lsl.w	r1, r0, r1
 801760e:	428c      	cmp	r4, r1
 8017610:	d10b      	bne.n	801762a <__any_on+0x3e>
 8017612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8017616:	4293      	cmp	r3, r2
 8017618:	d803      	bhi.n	8017622 <__any_on+0x36>
 801761a:	2000      	movs	r0, #0
 801761c:	bd10      	pop	{r4, pc}
 801761e:	4603      	mov	r3, r0
 8017620:	e7f7      	b.n	8017612 <__any_on+0x26>
 8017622:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8017626:	2900      	cmp	r1, #0
 8017628:	d0f5      	beq.n	8017616 <__any_on+0x2a>
 801762a:	2001      	movs	r0, #1
 801762c:	e7f6      	b.n	801761c <__any_on+0x30>

0801762e <_calloc_r>:
 801762e:	b513      	push	{r0, r1, r4, lr}
 8017630:	434a      	muls	r2, r1
 8017632:	4611      	mov	r1, r2
 8017634:	9201      	str	r2, [sp, #4]
 8017636:	f000 f859 	bl	80176ec <_malloc_r>
 801763a:	4604      	mov	r4, r0
 801763c:	b118      	cbz	r0, 8017646 <_calloc_r+0x18>
 801763e:	9a01      	ldr	r2, [sp, #4]
 8017640:	2100      	movs	r1, #0
 8017642:	f7fd fcfb 	bl	801503c <memset>
 8017646:	4620      	mov	r0, r4
 8017648:	b002      	add	sp, #8
 801764a:	bd10      	pop	{r4, pc}

0801764c <_free_r>:
 801764c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801764e:	2900      	cmp	r1, #0
 8017650:	d048      	beq.n	80176e4 <_free_r+0x98>
 8017652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017656:	9001      	str	r0, [sp, #4]
 8017658:	2b00      	cmp	r3, #0
 801765a:	f1a1 0404 	sub.w	r4, r1, #4
 801765e:	bfb8      	it	lt
 8017660:	18e4      	addlt	r4, r4, r3
 8017662:	f000 fe11 	bl	8018288 <__malloc_lock>
 8017666:	4a20      	ldr	r2, [pc, #128]	; (80176e8 <_free_r+0x9c>)
 8017668:	9801      	ldr	r0, [sp, #4]
 801766a:	6813      	ldr	r3, [r2, #0]
 801766c:	4615      	mov	r5, r2
 801766e:	b933      	cbnz	r3, 801767e <_free_r+0x32>
 8017670:	6063      	str	r3, [r4, #4]
 8017672:	6014      	str	r4, [r2, #0]
 8017674:	b003      	add	sp, #12
 8017676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801767a:	f000 be0b 	b.w	8018294 <__malloc_unlock>
 801767e:	42a3      	cmp	r3, r4
 8017680:	d90b      	bls.n	801769a <_free_r+0x4e>
 8017682:	6821      	ldr	r1, [r4, #0]
 8017684:	1862      	adds	r2, r4, r1
 8017686:	4293      	cmp	r3, r2
 8017688:	bf04      	itt	eq
 801768a:	681a      	ldreq	r2, [r3, #0]
 801768c:	685b      	ldreq	r3, [r3, #4]
 801768e:	6063      	str	r3, [r4, #4]
 8017690:	bf04      	itt	eq
 8017692:	1852      	addeq	r2, r2, r1
 8017694:	6022      	streq	r2, [r4, #0]
 8017696:	602c      	str	r4, [r5, #0]
 8017698:	e7ec      	b.n	8017674 <_free_r+0x28>
 801769a:	461a      	mov	r2, r3
 801769c:	685b      	ldr	r3, [r3, #4]
 801769e:	b10b      	cbz	r3, 80176a4 <_free_r+0x58>
 80176a0:	42a3      	cmp	r3, r4
 80176a2:	d9fa      	bls.n	801769a <_free_r+0x4e>
 80176a4:	6811      	ldr	r1, [r2, #0]
 80176a6:	1855      	adds	r5, r2, r1
 80176a8:	42a5      	cmp	r5, r4
 80176aa:	d10b      	bne.n	80176c4 <_free_r+0x78>
 80176ac:	6824      	ldr	r4, [r4, #0]
 80176ae:	4421      	add	r1, r4
 80176b0:	1854      	adds	r4, r2, r1
 80176b2:	42a3      	cmp	r3, r4
 80176b4:	6011      	str	r1, [r2, #0]
 80176b6:	d1dd      	bne.n	8017674 <_free_r+0x28>
 80176b8:	681c      	ldr	r4, [r3, #0]
 80176ba:	685b      	ldr	r3, [r3, #4]
 80176bc:	6053      	str	r3, [r2, #4]
 80176be:	4421      	add	r1, r4
 80176c0:	6011      	str	r1, [r2, #0]
 80176c2:	e7d7      	b.n	8017674 <_free_r+0x28>
 80176c4:	d902      	bls.n	80176cc <_free_r+0x80>
 80176c6:	230c      	movs	r3, #12
 80176c8:	6003      	str	r3, [r0, #0]
 80176ca:	e7d3      	b.n	8017674 <_free_r+0x28>
 80176cc:	6825      	ldr	r5, [r4, #0]
 80176ce:	1961      	adds	r1, r4, r5
 80176d0:	428b      	cmp	r3, r1
 80176d2:	bf04      	itt	eq
 80176d4:	6819      	ldreq	r1, [r3, #0]
 80176d6:	685b      	ldreq	r3, [r3, #4]
 80176d8:	6063      	str	r3, [r4, #4]
 80176da:	bf04      	itt	eq
 80176dc:	1949      	addeq	r1, r1, r5
 80176de:	6021      	streq	r1, [r4, #0]
 80176e0:	6054      	str	r4, [r2, #4]
 80176e2:	e7c7      	b.n	8017674 <_free_r+0x28>
 80176e4:	b003      	add	sp, #12
 80176e6:	bd30      	pop	{r4, r5, pc}
 80176e8:	20006ca4 	.word	0x20006ca4

080176ec <_malloc_r>:
 80176ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176ee:	1ccd      	adds	r5, r1, #3
 80176f0:	f025 0503 	bic.w	r5, r5, #3
 80176f4:	3508      	adds	r5, #8
 80176f6:	2d0c      	cmp	r5, #12
 80176f8:	bf38      	it	cc
 80176fa:	250c      	movcc	r5, #12
 80176fc:	2d00      	cmp	r5, #0
 80176fe:	4606      	mov	r6, r0
 8017700:	db01      	blt.n	8017706 <_malloc_r+0x1a>
 8017702:	42a9      	cmp	r1, r5
 8017704:	d903      	bls.n	801770e <_malloc_r+0x22>
 8017706:	230c      	movs	r3, #12
 8017708:	6033      	str	r3, [r6, #0]
 801770a:	2000      	movs	r0, #0
 801770c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801770e:	f000 fdbb 	bl	8018288 <__malloc_lock>
 8017712:	4921      	ldr	r1, [pc, #132]	; (8017798 <_malloc_r+0xac>)
 8017714:	680a      	ldr	r2, [r1, #0]
 8017716:	4614      	mov	r4, r2
 8017718:	b99c      	cbnz	r4, 8017742 <_malloc_r+0x56>
 801771a:	4f20      	ldr	r7, [pc, #128]	; (801779c <_malloc_r+0xb0>)
 801771c:	683b      	ldr	r3, [r7, #0]
 801771e:	b923      	cbnz	r3, 801772a <_malloc_r+0x3e>
 8017720:	4621      	mov	r1, r4
 8017722:	4630      	mov	r0, r6
 8017724:	f000 fc90 	bl	8018048 <_sbrk_r>
 8017728:	6038      	str	r0, [r7, #0]
 801772a:	4629      	mov	r1, r5
 801772c:	4630      	mov	r0, r6
 801772e:	f000 fc8b 	bl	8018048 <_sbrk_r>
 8017732:	1c43      	adds	r3, r0, #1
 8017734:	d123      	bne.n	801777e <_malloc_r+0x92>
 8017736:	230c      	movs	r3, #12
 8017738:	6033      	str	r3, [r6, #0]
 801773a:	4630      	mov	r0, r6
 801773c:	f000 fdaa 	bl	8018294 <__malloc_unlock>
 8017740:	e7e3      	b.n	801770a <_malloc_r+0x1e>
 8017742:	6823      	ldr	r3, [r4, #0]
 8017744:	1b5b      	subs	r3, r3, r5
 8017746:	d417      	bmi.n	8017778 <_malloc_r+0x8c>
 8017748:	2b0b      	cmp	r3, #11
 801774a:	d903      	bls.n	8017754 <_malloc_r+0x68>
 801774c:	6023      	str	r3, [r4, #0]
 801774e:	441c      	add	r4, r3
 8017750:	6025      	str	r5, [r4, #0]
 8017752:	e004      	b.n	801775e <_malloc_r+0x72>
 8017754:	6863      	ldr	r3, [r4, #4]
 8017756:	42a2      	cmp	r2, r4
 8017758:	bf0c      	ite	eq
 801775a:	600b      	streq	r3, [r1, #0]
 801775c:	6053      	strne	r3, [r2, #4]
 801775e:	4630      	mov	r0, r6
 8017760:	f000 fd98 	bl	8018294 <__malloc_unlock>
 8017764:	f104 000b 	add.w	r0, r4, #11
 8017768:	1d23      	adds	r3, r4, #4
 801776a:	f020 0007 	bic.w	r0, r0, #7
 801776e:	1ac2      	subs	r2, r0, r3
 8017770:	d0cc      	beq.n	801770c <_malloc_r+0x20>
 8017772:	1a1b      	subs	r3, r3, r0
 8017774:	50a3      	str	r3, [r4, r2]
 8017776:	e7c9      	b.n	801770c <_malloc_r+0x20>
 8017778:	4622      	mov	r2, r4
 801777a:	6864      	ldr	r4, [r4, #4]
 801777c:	e7cc      	b.n	8017718 <_malloc_r+0x2c>
 801777e:	1cc4      	adds	r4, r0, #3
 8017780:	f024 0403 	bic.w	r4, r4, #3
 8017784:	42a0      	cmp	r0, r4
 8017786:	d0e3      	beq.n	8017750 <_malloc_r+0x64>
 8017788:	1a21      	subs	r1, r4, r0
 801778a:	4630      	mov	r0, r6
 801778c:	f000 fc5c 	bl	8018048 <_sbrk_r>
 8017790:	3001      	adds	r0, #1
 8017792:	d1dd      	bne.n	8017750 <_malloc_r+0x64>
 8017794:	e7cf      	b.n	8017736 <_malloc_r+0x4a>
 8017796:	bf00      	nop
 8017798:	20006ca4 	.word	0x20006ca4
 801779c:	20006ca8 	.word	0x20006ca8

080177a0 <__ssputs_r>:
 80177a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177a4:	688e      	ldr	r6, [r1, #8]
 80177a6:	429e      	cmp	r6, r3
 80177a8:	4682      	mov	sl, r0
 80177aa:	460c      	mov	r4, r1
 80177ac:	4690      	mov	r8, r2
 80177ae:	461f      	mov	r7, r3
 80177b0:	d838      	bhi.n	8017824 <__ssputs_r+0x84>
 80177b2:	898a      	ldrh	r2, [r1, #12]
 80177b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80177b8:	d032      	beq.n	8017820 <__ssputs_r+0x80>
 80177ba:	6825      	ldr	r5, [r4, #0]
 80177bc:	6909      	ldr	r1, [r1, #16]
 80177be:	eba5 0901 	sub.w	r9, r5, r1
 80177c2:	6965      	ldr	r5, [r4, #20]
 80177c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80177c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80177cc:	3301      	adds	r3, #1
 80177ce:	444b      	add	r3, r9
 80177d0:	106d      	asrs	r5, r5, #1
 80177d2:	429d      	cmp	r5, r3
 80177d4:	bf38      	it	cc
 80177d6:	461d      	movcc	r5, r3
 80177d8:	0553      	lsls	r3, r2, #21
 80177da:	d531      	bpl.n	8017840 <__ssputs_r+0xa0>
 80177dc:	4629      	mov	r1, r5
 80177de:	f7ff ff85 	bl	80176ec <_malloc_r>
 80177e2:	4606      	mov	r6, r0
 80177e4:	b950      	cbnz	r0, 80177fc <__ssputs_r+0x5c>
 80177e6:	230c      	movs	r3, #12
 80177e8:	f8ca 3000 	str.w	r3, [sl]
 80177ec:	89a3      	ldrh	r3, [r4, #12]
 80177ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80177f2:	81a3      	strh	r3, [r4, #12]
 80177f4:	f04f 30ff 	mov.w	r0, #4294967295
 80177f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80177fc:	6921      	ldr	r1, [r4, #16]
 80177fe:	464a      	mov	r2, r9
 8017800:	f7fd fc0e 	bl	8015020 <memcpy>
 8017804:	89a3      	ldrh	r3, [r4, #12]
 8017806:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801780a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801780e:	81a3      	strh	r3, [r4, #12]
 8017810:	6126      	str	r6, [r4, #16]
 8017812:	6165      	str	r5, [r4, #20]
 8017814:	444e      	add	r6, r9
 8017816:	eba5 0509 	sub.w	r5, r5, r9
 801781a:	6026      	str	r6, [r4, #0]
 801781c:	60a5      	str	r5, [r4, #8]
 801781e:	463e      	mov	r6, r7
 8017820:	42be      	cmp	r6, r7
 8017822:	d900      	bls.n	8017826 <__ssputs_r+0x86>
 8017824:	463e      	mov	r6, r7
 8017826:	4632      	mov	r2, r6
 8017828:	6820      	ldr	r0, [r4, #0]
 801782a:	4641      	mov	r1, r8
 801782c:	f000 fd12 	bl	8018254 <memmove>
 8017830:	68a3      	ldr	r3, [r4, #8]
 8017832:	6822      	ldr	r2, [r4, #0]
 8017834:	1b9b      	subs	r3, r3, r6
 8017836:	4432      	add	r2, r6
 8017838:	60a3      	str	r3, [r4, #8]
 801783a:	6022      	str	r2, [r4, #0]
 801783c:	2000      	movs	r0, #0
 801783e:	e7db      	b.n	80177f8 <__ssputs_r+0x58>
 8017840:	462a      	mov	r2, r5
 8017842:	f000 fd2d 	bl	80182a0 <_realloc_r>
 8017846:	4606      	mov	r6, r0
 8017848:	2800      	cmp	r0, #0
 801784a:	d1e1      	bne.n	8017810 <__ssputs_r+0x70>
 801784c:	6921      	ldr	r1, [r4, #16]
 801784e:	4650      	mov	r0, sl
 8017850:	f7ff fefc 	bl	801764c <_free_r>
 8017854:	e7c7      	b.n	80177e6 <__ssputs_r+0x46>
	...

08017858 <_svfiprintf_r>:
 8017858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801785c:	4698      	mov	r8, r3
 801785e:	898b      	ldrh	r3, [r1, #12]
 8017860:	061b      	lsls	r3, r3, #24
 8017862:	b09d      	sub	sp, #116	; 0x74
 8017864:	4607      	mov	r7, r0
 8017866:	460d      	mov	r5, r1
 8017868:	4614      	mov	r4, r2
 801786a:	d50e      	bpl.n	801788a <_svfiprintf_r+0x32>
 801786c:	690b      	ldr	r3, [r1, #16]
 801786e:	b963      	cbnz	r3, 801788a <_svfiprintf_r+0x32>
 8017870:	2140      	movs	r1, #64	; 0x40
 8017872:	f7ff ff3b 	bl	80176ec <_malloc_r>
 8017876:	6028      	str	r0, [r5, #0]
 8017878:	6128      	str	r0, [r5, #16]
 801787a:	b920      	cbnz	r0, 8017886 <_svfiprintf_r+0x2e>
 801787c:	230c      	movs	r3, #12
 801787e:	603b      	str	r3, [r7, #0]
 8017880:	f04f 30ff 	mov.w	r0, #4294967295
 8017884:	e0d1      	b.n	8017a2a <_svfiprintf_r+0x1d2>
 8017886:	2340      	movs	r3, #64	; 0x40
 8017888:	616b      	str	r3, [r5, #20]
 801788a:	2300      	movs	r3, #0
 801788c:	9309      	str	r3, [sp, #36]	; 0x24
 801788e:	2320      	movs	r3, #32
 8017890:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017894:	f8cd 800c 	str.w	r8, [sp, #12]
 8017898:	2330      	movs	r3, #48	; 0x30
 801789a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017a44 <_svfiprintf_r+0x1ec>
 801789e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80178a2:	f04f 0901 	mov.w	r9, #1
 80178a6:	4623      	mov	r3, r4
 80178a8:	469a      	mov	sl, r3
 80178aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80178ae:	b10a      	cbz	r2, 80178b4 <_svfiprintf_r+0x5c>
 80178b0:	2a25      	cmp	r2, #37	; 0x25
 80178b2:	d1f9      	bne.n	80178a8 <_svfiprintf_r+0x50>
 80178b4:	ebba 0b04 	subs.w	fp, sl, r4
 80178b8:	d00b      	beq.n	80178d2 <_svfiprintf_r+0x7a>
 80178ba:	465b      	mov	r3, fp
 80178bc:	4622      	mov	r2, r4
 80178be:	4629      	mov	r1, r5
 80178c0:	4638      	mov	r0, r7
 80178c2:	f7ff ff6d 	bl	80177a0 <__ssputs_r>
 80178c6:	3001      	adds	r0, #1
 80178c8:	f000 80aa 	beq.w	8017a20 <_svfiprintf_r+0x1c8>
 80178cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80178ce:	445a      	add	r2, fp
 80178d0:	9209      	str	r2, [sp, #36]	; 0x24
 80178d2:	f89a 3000 	ldrb.w	r3, [sl]
 80178d6:	2b00      	cmp	r3, #0
 80178d8:	f000 80a2 	beq.w	8017a20 <_svfiprintf_r+0x1c8>
 80178dc:	2300      	movs	r3, #0
 80178de:	f04f 32ff 	mov.w	r2, #4294967295
 80178e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80178e6:	f10a 0a01 	add.w	sl, sl, #1
 80178ea:	9304      	str	r3, [sp, #16]
 80178ec:	9307      	str	r3, [sp, #28]
 80178ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80178f2:	931a      	str	r3, [sp, #104]	; 0x68
 80178f4:	4654      	mov	r4, sl
 80178f6:	2205      	movs	r2, #5
 80178f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80178fc:	4851      	ldr	r0, [pc, #324]	; (8017a44 <_svfiprintf_r+0x1ec>)
 80178fe:	f7e8 fc87 	bl	8000210 <memchr>
 8017902:	9a04      	ldr	r2, [sp, #16]
 8017904:	b9d8      	cbnz	r0, 801793e <_svfiprintf_r+0xe6>
 8017906:	06d0      	lsls	r0, r2, #27
 8017908:	bf44      	itt	mi
 801790a:	2320      	movmi	r3, #32
 801790c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017910:	0711      	lsls	r1, r2, #28
 8017912:	bf44      	itt	mi
 8017914:	232b      	movmi	r3, #43	; 0x2b
 8017916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801791a:	f89a 3000 	ldrb.w	r3, [sl]
 801791e:	2b2a      	cmp	r3, #42	; 0x2a
 8017920:	d015      	beq.n	801794e <_svfiprintf_r+0xf6>
 8017922:	9a07      	ldr	r2, [sp, #28]
 8017924:	4654      	mov	r4, sl
 8017926:	2000      	movs	r0, #0
 8017928:	f04f 0c0a 	mov.w	ip, #10
 801792c:	4621      	mov	r1, r4
 801792e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017932:	3b30      	subs	r3, #48	; 0x30
 8017934:	2b09      	cmp	r3, #9
 8017936:	d94e      	bls.n	80179d6 <_svfiprintf_r+0x17e>
 8017938:	b1b0      	cbz	r0, 8017968 <_svfiprintf_r+0x110>
 801793a:	9207      	str	r2, [sp, #28]
 801793c:	e014      	b.n	8017968 <_svfiprintf_r+0x110>
 801793e:	eba0 0308 	sub.w	r3, r0, r8
 8017942:	fa09 f303 	lsl.w	r3, r9, r3
 8017946:	4313      	orrs	r3, r2
 8017948:	9304      	str	r3, [sp, #16]
 801794a:	46a2      	mov	sl, r4
 801794c:	e7d2      	b.n	80178f4 <_svfiprintf_r+0x9c>
 801794e:	9b03      	ldr	r3, [sp, #12]
 8017950:	1d19      	adds	r1, r3, #4
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	9103      	str	r1, [sp, #12]
 8017956:	2b00      	cmp	r3, #0
 8017958:	bfbb      	ittet	lt
 801795a:	425b      	neglt	r3, r3
 801795c:	f042 0202 	orrlt.w	r2, r2, #2
 8017960:	9307      	strge	r3, [sp, #28]
 8017962:	9307      	strlt	r3, [sp, #28]
 8017964:	bfb8      	it	lt
 8017966:	9204      	strlt	r2, [sp, #16]
 8017968:	7823      	ldrb	r3, [r4, #0]
 801796a:	2b2e      	cmp	r3, #46	; 0x2e
 801796c:	d10c      	bne.n	8017988 <_svfiprintf_r+0x130>
 801796e:	7863      	ldrb	r3, [r4, #1]
 8017970:	2b2a      	cmp	r3, #42	; 0x2a
 8017972:	d135      	bne.n	80179e0 <_svfiprintf_r+0x188>
 8017974:	9b03      	ldr	r3, [sp, #12]
 8017976:	1d1a      	adds	r2, r3, #4
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	9203      	str	r2, [sp, #12]
 801797c:	2b00      	cmp	r3, #0
 801797e:	bfb8      	it	lt
 8017980:	f04f 33ff 	movlt.w	r3, #4294967295
 8017984:	3402      	adds	r4, #2
 8017986:	9305      	str	r3, [sp, #20]
 8017988:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017a54 <_svfiprintf_r+0x1fc>
 801798c:	7821      	ldrb	r1, [r4, #0]
 801798e:	2203      	movs	r2, #3
 8017990:	4650      	mov	r0, sl
 8017992:	f7e8 fc3d 	bl	8000210 <memchr>
 8017996:	b140      	cbz	r0, 80179aa <_svfiprintf_r+0x152>
 8017998:	2340      	movs	r3, #64	; 0x40
 801799a:	eba0 000a 	sub.w	r0, r0, sl
 801799e:	fa03 f000 	lsl.w	r0, r3, r0
 80179a2:	9b04      	ldr	r3, [sp, #16]
 80179a4:	4303      	orrs	r3, r0
 80179a6:	3401      	adds	r4, #1
 80179a8:	9304      	str	r3, [sp, #16]
 80179aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80179ae:	4826      	ldr	r0, [pc, #152]	; (8017a48 <_svfiprintf_r+0x1f0>)
 80179b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80179b4:	2206      	movs	r2, #6
 80179b6:	f7e8 fc2b 	bl	8000210 <memchr>
 80179ba:	2800      	cmp	r0, #0
 80179bc:	d038      	beq.n	8017a30 <_svfiprintf_r+0x1d8>
 80179be:	4b23      	ldr	r3, [pc, #140]	; (8017a4c <_svfiprintf_r+0x1f4>)
 80179c0:	bb1b      	cbnz	r3, 8017a0a <_svfiprintf_r+0x1b2>
 80179c2:	9b03      	ldr	r3, [sp, #12]
 80179c4:	3307      	adds	r3, #7
 80179c6:	f023 0307 	bic.w	r3, r3, #7
 80179ca:	3308      	adds	r3, #8
 80179cc:	9303      	str	r3, [sp, #12]
 80179ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179d0:	4433      	add	r3, r6
 80179d2:	9309      	str	r3, [sp, #36]	; 0x24
 80179d4:	e767      	b.n	80178a6 <_svfiprintf_r+0x4e>
 80179d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80179da:	460c      	mov	r4, r1
 80179dc:	2001      	movs	r0, #1
 80179de:	e7a5      	b.n	801792c <_svfiprintf_r+0xd4>
 80179e0:	2300      	movs	r3, #0
 80179e2:	3401      	adds	r4, #1
 80179e4:	9305      	str	r3, [sp, #20]
 80179e6:	4619      	mov	r1, r3
 80179e8:	f04f 0c0a 	mov.w	ip, #10
 80179ec:	4620      	mov	r0, r4
 80179ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80179f2:	3a30      	subs	r2, #48	; 0x30
 80179f4:	2a09      	cmp	r2, #9
 80179f6:	d903      	bls.n	8017a00 <_svfiprintf_r+0x1a8>
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d0c5      	beq.n	8017988 <_svfiprintf_r+0x130>
 80179fc:	9105      	str	r1, [sp, #20]
 80179fe:	e7c3      	b.n	8017988 <_svfiprintf_r+0x130>
 8017a00:	fb0c 2101 	mla	r1, ip, r1, r2
 8017a04:	4604      	mov	r4, r0
 8017a06:	2301      	movs	r3, #1
 8017a08:	e7f0      	b.n	80179ec <_svfiprintf_r+0x194>
 8017a0a:	ab03      	add	r3, sp, #12
 8017a0c:	9300      	str	r3, [sp, #0]
 8017a0e:	462a      	mov	r2, r5
 8017a10:	4b0f      	ldr	r3, [pc, #60]	; (8017a50 <_svfiprintf_r+0x1f8>)
 8017a12:	a904      	add	r1, sp, #16
 8017a14:	4638      	mov	r0, r7
 8017a16:	f3af 8000 	nop.w
 8017a1a:	1c42      	adds	r2, r0, #1
 8017a1c:	4606      	mov	r6, r0
 8017a1e:	d1d6      	bne.n	80179ce <_svfiprintf_r+0x176>
 8017a20:	89ab      	ldrh	r3, [r5, #12]
 8017a22:	065b      	lsls	r3, r3, #25
 8017a24:	f53f af2c 	bmi.w	8017880 <_svfiprintf_r+0x28>
 8017a28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017a2a:	b01d      	add	sp, #116	; 0x74
 8017a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a30:	ab03      	add	r3, sp, #12
 8017a32:	9300      	str	r3, [sp, #0]
 8017a34:	462a      	mov	r2, r5
 8017a36:	4b06      	ldr	r3, [pc, #24]	; (8017a50 <_svfiprintf_r+0x1f8>)
 8017a38:	a904      	add	r1, sp, #16
 8017a3a:	4638      	mov	r0, r7
 8017a3c:	f000 f9d4 	bl	8017de8 <_printf_i>
 8017a40:	e7eb      	b.n	8017a1a <_svfiprintf_r+0x1c2>
 8017a42:	bf00      	nop
 8017a44:	08022c3c 	.word	0x08022c3c
 8017a48:	08022c46 	.word	0x08022c46
 8017a4c:	00000000 	.word	0x00000000
 8017a50:	080177a1 	.word	0x080177a1
 8017a54:	08022c42 	.word	0x08022c42

08017a58 <__sfputc_r>:
 8017a58:	6893      	ldr	r3, [r2, #8]
 8017a5a:	3b01      	subs	r3, #1
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	b410      	push	{r4}
 8017a60:	6093      	str	r3, [r2, #8]
 8017a62:	da08      	bge.n	8017a76 <__sfputc_r+0x1e>
 8017a64:	6994      	ldr	r4, [r2, #24]
 8017a66:	42a3      	cmp	r3, r4
 8017a68:	db01      	blt.n	8017a6e <__sfputc_r+0x16>
 8017a6a:	290a      	cmp	r1, #10
 8017a6c:	d103      	bne.n	8017a76 <__sfputc_r+0x1e>
 8017a6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a72:	f7fe bac1 	b.w	8015ff8 <__swbuf_r>
 8017a76:	6813      	ldr	r3, [r2, #0]
 8017a78:	1c58      	adds	r0, r3, #1
 8017a7a:	6010      	str	r0, [r2, #0]
 8017a7c:	7019      	strb	r1, [r3, #0]
 8017a7e:	4608      	mov	r0, r1
 8017a80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017a84:	4770      	bx	lr

08017a86 <__sfputs_r>:
 8017a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a88:	4606      	mov	r6, r0
 8017a8a:	460f      	mov	r7, r1
 8017a8c:	4614      	mov	r4, r2
 8017a8e:	18d5      	adds	r5, r2, r3
 8017a90:	42ac      	cmp	r4, r5
 8017a92:	d101      	bne.n	8017a98 <__sfputs_r+0x12>
 8017a94:	2000      	movs	r0, #0
 8017a96:	e007      	b.n	8017aa8 <__sfputs_r+0x22>
 8017a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017a9c:	463a      	mov	r2, r7
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	f7ff ffda 	bl	8017a58 <__sfputc_r>
 8017aa4:	1c43      	adds	r3, r0, #1
 8017aa6:	d1f3      	bne.n	8017a90 <__sfputs_r+0xa>
 8017aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017aac <_vfiprintf_r>:
 8017aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ab0:	460d      	mov	r5, r1
 8017ab2:	b09d      	sub	sp, #116	; 0x74
 8017ab4:	4614      	mov	r4, r2
 8017ab6:	4698      	mov	r8, r3
 8017ab8:	4606      	mov	r6, r0
 8017aba:	b118      	cbz	r0, 8017ac4 <_vfiprintf_r+0x18>
 8017abc:	6983      	ldr	r3, [r0, #24]
 8017abe:	b90b      	cbnz	r3, 8017ac4 <_vfiprintf_r+0x18>
 8017ac0:	f7fe fc74 	bl	80163ac <__sinit>
 8017ac4:	4b89      	ldr	r3, [pc, #548]	; (8017cec <_vfiprintf_r+0x240>)
 8017ac6:	429d      	cmp	r5, r3
 8017ac8:	d11b      	bne.n	8017b02 <_vfiprintf_r+0x56>
 8017aca:	6875      	ldr	r5, [r6, #4]
 8017acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017ace:	07d9      	lsls	r1, r3, #31
 8017ad0:	d405      	bmi.n	8017ade <_vfiprintf_r+0x32>
 8017ad2:	89ab      	ldrh	r3, [r5, #12]
 8017ad4:	059a      	lsls	r2, r3, #22
 8017ad6:	d402      	bmi.n	8017ade <_vfiprintf_r+0x32>
 8017ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017ada:	f7ff f874 	bl	8016bc6 <__retarget_lock_acquire_recursive>
 8017ade:	89ab      	ldrh	r3, [r5, #12]
 8017ae0:	071b      	lsls	r3, r3, #28
 8017ae2:	d501      	bpl.n	8017ae8 <_vfiprintf_r+0x3c>
 8017ae4:	692b      	ldr	r3, [r5, #16]
 8017ae6:	b9eb      	cbnz	r3, 8017b24 <_vfiprintf_r+0x78>
 8017ae8:	4629      	mov	r1, r5
 8017aea:	4630      	mov	r0, r6
 8017aec:	f7fe fad6 	bl	801609c <__swsetup_r>
 8017af0:	b1c0      	cbz	r0, 8017b24 <_vfiprintf_r+0x78>
 8017af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017af4:	07dc      	lsls	r4, r3, #31
 8017af6:	d50e      	bpl.n	8017b16 <_vfiprintf_r+0x6a>
 8017af8:	f04f 30ff 	mov.w	r0, #4294967295
 8017afc:	b01d      	add	sp, #116	; 0x74
 8017afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b02:	4b7b      	ldr	r3, [pc, #492]	; (8017cf0 <_vfiprintf_r+0x244>)
 8017b04:	429d      	cmp	r5, r3
 8017b06:	d101      	bne.n	8017b0c <_vfiprintf_r+0x60>
 8017b08:	68b5      	ldr	r5, [r6, #8]
 8017b0a:	e7df      	b.n	8017acc <_vfiprintf_r+0x20>
 8017b0c:	4b79      	ldr	r3, [pc, #484]	; (8017cf4 <_vfiprintf_r+0x248>)
 8017b0e:	429d      	cmp	r5, r3
 8017b10:	bf08      	it	eq
 8017b12:	68f5      	ldreq	r5, [r6, #12]
 8017b14:	e7da      	b.n	8017acc <_vfiprintf_r+0x20>
 8017b16:	89ab      	ldrh	r3, [r5, #12]
 8017b18:	0598      	lsls	r0, r3, #22
 8017b1a:	d4ed      	bmi.n	8017af8 <_vfiprintf_r+0x4c>
 8017b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017b1e:	f7ff f853 	bl	8016bc8 <__retarget_lock_release_recursive>
 8017b22:	e7e9      	b.n	8017af8 <_vfiprintf_r+0x4c>
 8017b24:	2300      	movs	r3, #0
 8017b26:	9309      	str	r3, [sp, #36]	; 0x24
 8017b28:	2320      	movs	r3, #32
 8017b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017b2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017b32:	2330      	movs	r3, #48	; 0x30
 8017b34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017cf8 <_vfiprintf_r+0x24c>
 8017b38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017b3c:	f04f 0901 	mov.w	r9, #1
 8017b40:	4623      	mov	r3, r4
 8017b42:	469a      	mov	sl, r3
 8017b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b48:	b10a      	cbz	r2, 8017b4e <_vfiprintf_r+0xa2>
 8017b4a:	2a25      	cmp	r2, #37	; 0x25
 8017b4c:	d1f9      	bne.n	8017b42 <_vfiprintf_r+0x96>
 8017b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8017b52:	d00b      	beq.n	8017b6c <_vfiprintf_r+0xc0>
 8017b54:	465b      	mov	r3, fp
 8017b56:	4622      	mov	r2, r4
 8017b58:	4629      	mov	r1, r5
 8017b5a:	4630      	mov	r0, r6
 8017b5c:	f7ff ff93 	bl	8017a86 <__sfputs_r>
 8017b60:	3001      	adds	r0, #1
 8017b62:	f000 80aa 	beq.w	8017cba <_vfiprintf_r+0x20e>
 8017b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017b68:	445a      	add	r2, fp
 8017b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8017b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	f000 80a2 	beq.w	8017cba <_vfiprintf_r+0x20e>
 8017b76:	2300      	movs	r3, #0
 8017b78:	f04f 32ff 	mov.w	r2, #4294967295
 8017b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017b80:	f10a 0a01 	add.w	sl, sl, #1
 8017b84:	9304      	str	r3, [sp, #16]
 8017b86:	9307      	str	r3, [sp, #28]
 8017b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8017b8e:	4654      	mov	r4, sl
 8017b90:	2205      	movs	r2, #5
 8017b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017b96:	4858      	ldr	r0, [pc, #352]	; (8017cf8 <_vfiprintf_r+0x24c>)
 8017b98:	f7e8 fb3a 	bl	8000210 <memchr>
 8017b9c:	9a04      	ldr	r2, [sp, #16]
 8017b9e:	b9d8      	cbnz	r0, 8017bd8 <_vfiprintf_r+0x12c>
 8017ba0:	06d1      	lsls	r1, r2, #27
 8017ba2:	bf44      	itt	mi
 8017ba4:	2320      	movmi	r3, #32
 8017ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017baa:	0713      	lsls	r3, r2, #28
 8017bac:	bf44      	itt	mi
 8017bae:	232b      	movmi	r3, #43	; 0x2b
 8017bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8017bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8017bba:	d015      	beq.n	8017be8 <_vfiprintf_r+0x13c>
 8017bbc:	9a07      	ldr	r2, [sp, #28]
 8017bbe:	4654      	mov	r4, sl
 8017bc0:	2000      	movs	r0, #0
 8017bc2:	f04f 0c0a 	mov.w	ip, #10
 8017bc6:	4621      	mov	r1, r4
 8017bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017bcc:	3b30      	subs	r3, #48	; 0x30
 8017bce:	2b09      	cmp	r3, #9
 8017bd0:	d94e      	bls.n	8017c70 <_vfiprintf_r+0x1c4>
 8017bd2:	b1b0      	cbz	r0, 8017c02 <_vfiprintf_r+0x156>
 8017bd4:	9207      	str	r2, [sp, #28]
 8017bd6:	e014      	b.n	8017c02 <_vfiprintf_r+0x156>
 8017bd8:	eba0 0308 	sub.w	r3, r0, r8
 8017bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8017be0:	4313      	orrs	r3, r2
 8017be2:	9304      	str	r3, [sp, #16]
 8017be4:	46a2      	mov	sl, r4
 8017be6:	e7d2      	b.n	8017b8e <_vfiprintf_r+0xe2>
 8017be8:	9b03      	ldr	r3, [sp, #12]
 8017bea:	1d19      	adds	r1, r3, #4
 8017bec:	681b      	ldr	r3, [r3, #0]
 8017bee:	9103      	str	r1, [sp, #12]
 8017bf0:	2b00      	cmp	r3, #0
 8017bf2:	bfbb      	ittet	lt
 8017bf4:	425b      	neglt	r3, r3
 8017bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8017bfa:	9307      	strge	r3, [sp, #28]
 8017bfc:	9307      	strlt	r3, [sp, #28]
 8017bfe:	bfb8      	it	lt
 8017c00:	9204      	strlt	r2, [sp, #16]
 8017c02:	7823      	ldrb	r3, [r4, #0]
 8017c04:	2b2e      	cmp	r3, #46	; 0x2e
 8017c06:	d10c      	bne.n	8017c22 <_vfiprintf_r+0x176>
 8017c08:	7863      	ldrb	r3, [r4, #1]
 8017c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8017c0c:	d135      	bne.n	8017c7a <_vfiprintf_r+0x1ce>
 8017c0e:	9b03      	ldr	r3, [sp, #12]
 8017c10:	1d1a      	adds	r2, r3, #4
 8017c12:	681b      	ldr	r3, [r3, #0]
 8017c14:	9203      	str	r2, [sp, #12]
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	bfb8      	it	lt
 8017c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8017c1e:	3402      	adds	r4, #2
 8017c20:	9305      	str	r3, [sp, #20]
 8017c22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017d08 <_vfiprintf_r+0x25c>
 8017c26:	7821      	ldrb	r1, [r4, #0]
 8017c28:	2203      	movs	r2, #3
 8017c2a:	4650      	mov	r0, sl
 8017c2c:	f7e8 faf0 	bl	8000210 <memchr>
 8017c30:	b140      	cbz	r0, 8017c44 <_vfiprintf_r+0x198>
 8017c32:	2340      	movs	r3, #64	; 0x40
 8017c34:	eba0 000a 	sub.w	r0, r0, sl
 8017c38:	fa03 f000 	lsl.w	r0, r3, r0
 8017c3c:	9b04      	ldr	r3, [sp, #16]
 8017c3e:	4303      	orrs	r3, r0
 8017c40:	3401      	adds	r4, #1
 8017c42:	9304      	str	r3, [sp, #16]
 8017c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c48:	482c      	ldr	r0, [pc, #176]	; (8017cfc <_vfiprintf_r+0x250>)
 8017c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017c4e:	2206      	movs	r2, #6
 8017c50:	f7e8 fade 	bl	8000210 <memchr>
 8017c54:	2800      	cmp	r0, #0
 8017c56:	d03f      	beq.n	8017cd8 <_vfiprintf_r+0x22c>
 8017c58:	4b29      	ldr	r3, [pc, #164]	; (8017d00 <_vfiprintf_r+0x254>)
 8017c5a:	bb1b      	cbnz	r3, 8017ca4 <_vfiprintf_r+0x1f8>
 8017c5c:	9b03      	ldr	r3, [sp, #12]
 8017c5e:	3307      	adds	r3, #7
 8017c60:	f023 0307 	bic.w	r3, r3, #7
 8017c64:	3308      	adds	r3, #8
 8017c66:	9303      	str	r3, [sp, #12]
 8017c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017c6a:	443b      	add	r3, r7
 8017c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8017c6e:	e767      	b.n	8017b40 <_vfiprintf_r+0x94>
 8017c70:	fb0c 3202 	mla	r2, ip, r2, r3
 8017c74:	460c      	mov	r4, r1
 8017c76:	2001      	movs	r0, #1
 8017c78:	e7a5      	b.n	8017bc6 <_vfiprintf_r+0x11a>
 8017c7a:	2300      	movs	r3, #0
 8017c7c:	3401      	adds	r4, #1
 8017c7e:	9305      	str	r3, [sp, #20]
 8017c80:	4619      	mov	r1, r3
 8017c82:	f04f 0c0a 	mov.w	ip, #10
 8017c86:	4620      	mov	r0, r4
 8017c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017c8c:	3a30      	subs	r2, #48	; 0x30
 8017c8e:	2a09      	cmp	r2, #9
 8017c90:	d903      	bls.n	8017c9a <_vfiprintf_r+0x1ee>
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d0c5      	beq.n	8017c22 <_vfiprintf_r+0x176>
 8017c96:	9105      	str	r1, [sp, #20]
 8017c98:	e7c3      	b.n	8017c22 <_vfiprintf_r+0x176>
 8017c9a:	fb0c 2101 	mla	r1, ip, r1, r2
 8017c9e:	4604      	mov	r4, r0
 8017ca0:	2301      	movs	r3, #1
 8017ca2:	e7f0      	b.n	8017c86 <_vfiprintf_r+0x1da>
 8017ca4:	ab03      	add	r3, sp, #12
 8017ca6:	9300      	str	r3, [sp, #0]
 8017ca8:	462a      	mov	r2, r5
 8017caa:	4b16      	ldr	r3, [pc, #88]	; (8017d04 <_vfiprintf_r+0x258>)
 8017cac:	a904      	add	r1, sp, #16
 8017cae:	4630      	mov	r0, r6
 8017cb0:	f3af 8000 	nop.w
 8017cb4:	4607      	mov	r7, r0
 8017cb6:	1c78      	adds	r0, r7, #1
 8017cb8:	d1d6      	bne.n	8017c68 <_vfiprintf_r+0x1bc>
 8017cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017cbc:	07d9      	lsls	r1, r3, #31
 8017cbe:	d405      	bmi.n	8017ccc <_vfiprintf_r+0x220>
 8017cc0:	89ab      	ldrh	r3, [r5, #12]
 8017cc2:	059a      	lsls	r2, r3, #22
 8017cc4:	d402      	bmi.n	8017ccc <_vfiprintf_r+0x220>
 8017cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017cc8:	f7fe ff7e 	bl	8016bc8 <__retarget_lock_release_recursive>
 8017ccc:	89ab      	ldrh	r3, [r5, #12]
 8017cce:	065b      	lsls	r3, r3, #25
 8017cd0:	f53f af12 	bmi.w	8017af8 <_vfiprintf_r+0x4c>
 8017cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017cd6:	e711      	b.n	8017afc <_vfiprintf_r+0x50>
 8017cd8:	ab03      	add	r3, sp, #12
 8017cda:	9300      	str	r3, [sp, #0]
 8017cdc:	462a      	mov	r2, r5
 8017cde:	4b09      	ldr	r3, [pc, #36]	; (8017d04 <_vfiprintf_r+0x258>)
 8017ce0:	a904      	add	r1, sp, #16
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f000 f880 	bl	8017de8 <_printf_i>
 8017ce8:	e7e4      	b.n	8017cb4 <_vfiprintf_r+0x208>
 8017cea:	bf00      	nop
 8017cec:	080229f4 	.word	0x080229f4
 8017cf0:	08022a14 	.word	0x08022a14
 8017cf4:	080229d4 	.word	0x080229d4
 8017cf8:	08022c3c 	.word	0x08022c3c
 8017cfc:	08022c46 	.word	0x08022c46
 8017d00:	00000000 	.word	0x00000000
 8017d04:	08017a87 	.word	0x08017a87
 8017d08:	08022c42 	.word	0x08022c42

08017d0c <_printf_common>:
 8017d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d10:	4616      	mov	r6, r2
 8017d12:	4699      	mov	r9, r3
 8017d14:	688a      	ldr	r2, [r1, #8]
 8017d16:	690b      	ldr	r3, [r1, #16]
 8017d18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017d1c:	4293      	cmp	r3, r2
 8017d1e:	bfb8      	it	lt
 8017d20:	4613      	movlt	r3, r2
 8017d22:	6033      	str	r3, [r6, #0]
 8017d24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017d28:	4607      	mov	r7, r0
 8017d2a:	460c      	mov	r4, r1
 8017d2c:	b10a      	cbz	r2, 8017d32 <_printf_common+0x26>
 8017d2e:	3301      	adds	r3, #1
 8017d30:	6033      	str	r3, [r6, #0]
 8017d32:	6823      	ldr	r3, [r4, #0]
 8017d34:	0699      	lsls	r1, r3, #26
 8017d36:	bf42      	ittt	mi
 8017d38:	6833      	ldrmi	r3, [r6, #0]
 8017d3a:	3302      	addmi	r3, #2
 8017d3c:	6033      	strmi	r3, [r6, #0]
 8017d3e:	6825      	ldr	r5, [r4, #0]
 8017d40:	f015 0506 	ands.w	r5, r5, #6
 8017d44:	d106      	bne.n	8017d54 <_printf_common+0x48>
 8017d46:	f104 0a19 	add.w	sl, r4, #25
 8017d4a:	68e3      	ldr	r3, [r4, #12]
 8017d4c:	6832      	ldr	r2, [r6, #0]
 8017d4e:	1a9b      	subs	r3, r3, r2
 8017d50:	42ab      	cmp	r3, r5
 8017d52:	dc26      	bgt.n	8017da2 <_printf_common+0x96>
 8017d54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017d58:	1e13      	subs	r3, r2, #0
 8017d5a:	6822      	ldr	r2, [r4, #0]
 8017d5c:	bf18      	it	ne
 8017d5e:	2301      	movne	r3, #1
 8017d60:	0692      	lsls	r2, r2, #26
 8017d62:	d42b      	bmi.n	8017dbc <_printf_common+0xb0>
 8017d64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017d68:	4649      	mov	r1, r9
 8017d6a:	4638      	mov	r0, r7
 8017d6c:	47c0      	blx	r8
 8017d6e:	3001      	adds	r0, #1
 8017d70:	d01e      	beq.n	8017db0 <_printf_common+0xa4>
 8017d72:	6823      	ldr	r3, [r4, #0]
 8017d74:	68e5      	ldr	r5, [r4, #12]
 8017d76:	6832      	ldr	r2, [r6, #0]
 8017d78:	f003 0306 	and.w	r3, r3, #6
 8017d7c:	2b04      	cmp	r3, #4
 8017d7e:	bf08      	it	eq
 8017d80:	1aad      	subeq	r5, r5, r2
 8017d82:	68a3      	ldr	r3, [r4, #8]
 8017d84:	6922      	ldr	r2, [r4, #16]
 8017d86:	bf0c      	ite	eq
 8017d88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017d8c:	2500      	movne	r5, #0
 8017d8e:	4293      	cmp	r3, r2
 8017d90:	bfc4      	itt	gt
 8017d92:	1a9b      	subgt	r3, r3, r2
 8017d94:	18ed      	addgt	r5, r5, r3
 8017d96:	2600      	movs	r6, #0
 8017d98:	341a      	adds	r4, #26
 8017d9a:	42b5      	cmp	r5, r6
 8017d9c:	d11a      	bne.n	8017dd4 <_printf_common+0xc8>
 8017d9e:	2000      	movs	r0, #0
 8017da0:	e008      	b.n	8017db4 <_printf_common+0xa8>
 8017da2:	2301      	movs	r3, #1
 8017da4:	4652      	mov	r2, sl
 8017da6:	4649      	mov	r1, r9
 8017da8:	4638      	mov	r0, r7
 8017daa:	47c0      	blx	r8
 8017dac:	3001      	adds	r0, #1
 8017dae:	d103      	bne.n	8017db8 <_printf_common+0xac>
 8017db0:	f04f 30ff 	mov.w	r0, #4294967295
 8017db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017db8:	3501      	adds	r5, #1
 8017dba:	e7c6      	b.n	8017d4a <_printf_common+0x3e>
 8017dbc:	18e1      	adds	r1, r4, r3
 8017dbe:	1c5a      	adds	r2, r3, #1
 8017dc0:	2030      	movs	r0, #48	; 0x30
 8017dc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017dc6:	4422      	add	r2, r4
 8017dc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017dcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017dd0:	3302      	adds	r3, #2
 8017dd2:	e7c7      	b.n	8017d64 <_printf_common+0x58>
 8017dd4:	2301      	movs	r3, #1
 8017dd6:	4622      	mov	r2, r4
 8017dd8:	4649      	mov	r1, r9
 8017dda:	4638      	mov	r0, r7
 8017ddc:	47c0      	blx	r8
 8017dde:	3001      	adds	r0, #1
 8017de0:	d0e6      	beq.n	8017db0 <_printf_common+0xa4>
 8017de2:	3601      	adds	r6, #1
 8017de4:	e7d9      	b.n	8017d9a <_printf_common+0x8e>
	...

08017de8 <_printf_i>:
 8017de8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017dec:	460c      	mov	r4, r1
 8017dee:	4691      	mov	r9, r2
 8017df0:	7e27      	ldrb	r7, [r4, #24]
 8017df2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8017df4:	2f78      	cmp	r7, #120	; 0x78
 8017df6:	4680      	mov	r8, r0
 8017df8:	469a      	mov	sl, r3
 8017dfa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017dfe:	d807      	bhi.n	8017e10 <_printf_i+0x28>
 8017e00:	2f62      	cmp	r7, #98	; 0x62
 8017e02:	d80a      	bhi.n	8017e1a <_printf_i+0x32>
 8017e04:	2f00      	cmp	r7, #0
 8017e06:	f000 80d8 	beq.w	8017fba <_printf_i+0x1d2>
 8017e0a:	2f58      	cmp	r7, #88	; 0x58
 8017e0c:	f000 80a3 	beq.w	8017f56 <_printf_i+0x16e>
 8017e10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017e14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017e18:	e03a      	b.n	8017e90 <_printf_i+0xa8>
 8017e1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017e1e:	2b15      	cmp	r3, #21
 8017e20:	d8f6      	bhi.n	8017e10 <_printf_i+0x28>
 8017e22:	a001      	add	r0, pc, #4	; (adr r0, 8017e28 <_printf_i+0x40>)
 8017e24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017e28:	08017e81 	.word	0x08017e81
 8017e2c:	08017e95 	.word	0x08017e95
 8017e30:	08017e11 	.word	0x08017e11
 8017e34:	08017e11 	.word	0x08017e11
 8017e38:	08017e11 	.word	0x08017e11
 8017e3c:	08017e11 	.word	0x08017e11
 8017e40:	08017e95 	.word	0x08017e95
 8017e44:	08017e11 	.word	0x08017e11
 8017e48:	08017e11 	.word	0x08017e11
 8017e4c:	08017e11 	.word	0x08017e11
 8017e50:	08017e11 	.word	0x08017e11
 8017e54:	08017fa1 	.word	0x08017fa1
 8017e58:	08017ec5 	.word	0x08017ec5
 8017e5c:	08017f83 	.word	0x08017f83
 8017e60:	08017e11 	.word	0x08017e11
 8017e64:	08017e11 	.word	0x08017e11
 8017e68:	08017fc3 	.word	0x08017fc3
 8017e6c:	08017e11 	.word	0x08017e11
 8017e70:	08017ec5 	.word	0x08017ec5
 8017e74:	08017e11 	.word	0x08017e11
 8017e78:	08017e11 	.word	0x08017e11
 8017e7c:	08017f8b 	.word	0x08017f8b
 8017e80:	680b      	ldr	r3, [r1, #0]
 8017e82:	1d1a      	adds	r2, r3, #4
 8017e84:	681b      	ldr	r3, [r3, #0]
 8017e86:	600a      	str	r2, [r1, #0]
 8017e88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017e8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017e90:	2301      	movs	r3, #1
 8017e92:	e0a3      	b.n	8017fdc <_printf_i+0x1f4>
 8017e94:	6825      	ldr	r5, [r4, #0]
 8017e96:	6808      	ldr	r0, [r1, #0]
 8017e98:	062e      	lsls	r6, r5, #24
 8017e9a:	f100 0304 	add.w	r3, r0, #4
 8017e9e:	d50a      	bpl.n	8017eb6 <_printf_i+0xce>
 8017ea0:	6805      	ldr	r5, [r0, #0]
 8017ea2:	600b      	str	r3, [r1, #0]
 8017ea4:	2d00      	cmp	r5, #0
 8017ea6:	da03      	bge.n	8017eb0 <_printf_i+0xc8>
 8017ea8:	232d      	movs	r3, #45	; 0x2d
 8017eaa:	426d      	negs	r5, r5
 8017eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017eb0:	485e      	ldr	r0, [pc, #376]	; (801802c <_printf_i+0x244>)
 8017eb2:	230a      	movs	r3, #10
 8017eb4:	e019      	b.n	8017eea <_printf_i+0x102>
 8017eb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017eba:	6805      	ldr	r5, [r0, #0]
 8017ebc:	600b      	str	r3, [r1, #0]
 8017ebe:	bf18      	it	ne
 8017ec0:	b22d      	sxthne	r5, r5
 8017ec2:	e7ef      	b.n	8017ea4 <_printf_i+0xbc>
 8017ec4:	680b      	ldr	r3, [r1, #0]
 8017ec6:	6825      	ldr	r5, [r4, #0]
 8017ec8:	1d18      	adds	r0, r3, #4
 8017eca:	6008      	str	r0, [r1, #0]
 8017ecc:	0628      	lsls	r0, r5, #24
 8017ece:	d501      	bpl.n	8017ed4 <_printf_i+0xec>
 8017ed0:	681d      	ldr	r5, [r3, #0]
 8017ed2:	e002      	b.n	8017eda <_printf_i+0xf2>
 8017ed4:	0669      	lsls	r1, r5, #25
 8017ed6:	d5fb      	bpl.n	8017ed0 <_printf_i+0xe8>
 8017ed8:	881d      	ldrh	r5, [r3, #0]
 8017eda:	4854      	ldr	r0, [pc, #336]	; (801802c <_printf_i+0x244>)
 8017edc:	2f6f      	cmp	r7, #111	; 0x6f
 8017ede:	bf0c      	ite	eq
 8017ee0:	2308      	moveq	r3, #8
 8017ee2:	230a      	movne	r3, #10
 8017ee4:	2100      	movs	r1, #0
 8017ee6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017eea:	6866      	ldr	r6, [r4, #4]
 8017eec:	60a6      	str	r6, [r4, #8]
 8017eee:	2e00      	cmp	r6, #0
 8017ef0:	bfa2      	ittt	ge
 8017ef2:	6821      	ldrge	r1, [r4, #0]
 8017ef4:	f021 0104 	bicge.w	r1, r1, #4
 8017ef8:	6021      	strge	r1, [r4, #0]
 8017efa:	b90d      	cbnz	r5, 8017f00 <_printf_i+0x118>
 8017efc:	2e00      	cmp	r6, #0
 8017efe:	d04d      	beq.n	8017f9c <_printf_i+0x1b4>
 8017f00:	4616      	mov	r6, r2
 8017f02:	fbb5 f1f3 	udiv	r1, r5, r3
 8017f06:	fb03 5711 	mls	r7, r3, r1, r5
 8017f0a:	5dc7      	ldrb	r7, [r0, r7]
 8017f0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017f10:	462f      	mov	r7, r5
 8017f12:	42bb      	cmp	r3, r7
 8017f14:	460d      	mov	r5, r1
 8017f16:	d9f4      	bls.n	8017f02 <_printf_i+0x11a>
 8017f18:	2b08      	cmp	r3, #8
 8017f1a:	d10b      	bne.n	8017f34 <_printf_i+0x14c>
 8017f1c:	6823      	ldr	r3, [r4, #0]
 8017f1e:	07df      	lsls	r7, r3, #31
 8017f20:	d508      	bpl.n	8017f34 <_printf_i+0x14c>
 8017f22:	6923      	ldr	r3, [r4, #16]
 8017f24:	6861      	ldr	r1, [r4, #4]
 8017f26:	4299      	cmp	r1, r3
 8017f28:	bfde      	ittt	le
 8017f2a:	2330      	movle	r3, #48	; 0x30
 8017f2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017f30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017f34:	1b92      	subs	r2, r2, r6
 8017f36:	6122      	str	r2, [r4, #16]
 8017f38:	f8cd a000 	str.w	sl, [sp]
 8017f3c:	464b      	mov	r3, r9
 8017f3e:	aa03      	add	r2, sp, #12
 8017f40:	4621      	mov	r1, r4
 8017f42:	4640      	mov	r0, r8
 8017f44:	f7ff fee2 	bl	8017d0c <_printf_common>
 8017f48:	3001      	adds	r0, #1
 8017f4a:	d14c      	bne.n	8017fe6 <_printf_i+0x1fe>
 8017f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8017f50:	b004      	add	sp, #16
 8017f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017f56:	4835      	ldr	r0, [pc, #212]	; (801802c <_printf_i+0x244>)
 8017f58:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017f5c:	6823      	ldr	r3, [r4, #0]
 8017f5e:	680e      	ldr	r6, [r1, #0]
 8017f60:	061f      	lsls	r7, r3, #24
 8017f62:	f856 5b04 	ldr.w	r5, [r6], #4
 8017f66:	600e      	str	r6, [r1, #0]
 8017f68:	d514      	bpl.n	8017f94 <_printf_i+0x1ac>
 8017f6a:	07d9      	lsls	r1, r3, #31
 8017f6c:	bf44      	itt	mi
 8017f6e:	f043 0320 	orrmi.w	r3, r3, #32
 8017f72:	6023      	strmi	r3, [r4, #0]
 8017f74:	b91d      	cbnz	r5, 8017f7e <_printf_i+0x196>
 8017f76:	6823      	ldr	r3, [r4, #0]
 8017f78:	f023 0320 	bic.w	r3, r3, #32
 8017f7c:	6023      	str	r3, [r4, #0]
 8017f7e:	2310      	movs	r3, #16
 8017f80:	e7b0      	b.n	8017ee4 <_printf_i+0xfc>
 8017f82:	6823      	ldr	r3, [r4, #0]
 8017f84:	f043 0320 	orr.w	r3, r3, #32
 8017f88:	6023      	str	r3, [r4, #0]
 8017f8a:	2378      	movs	r3, #120	; 0x78
 8017f8c:	4828      	ldr	r0, [pc, #160]	; (8018030 <_printf_i+0x248>)
 8017f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017f92:	e7e3      	b.n	8017f5c <_printf_i+0x174>
 8017f94:	065e      	lsls	r6, r3, #25
 8017f96:	bf48      	it	mi
 8017f98:	b2ad      	uxthmi	r5, r5
 8017f9a:	e7e6      	b.n	8017f6a <_printf_i+0x182>
 8017f9c:	4616      	mov	r6, r2
 8017f9e:	e7bb      	b.n	8017f18 <_printf_i+0x130>
 8017fa0:	680b      	ldr	r3, [r1, #0]
 8017fa2:	6826      	ldr	r6, [r4, #0]
 8017fa4:	6960      	ldr	r0, [r4, #20]
 8017fa6:	1d1d      	adds	r5, r3, #4
 8017fa8:	600d      	str	r5, [r1, #0]
 8017faa:	0635      	lsls	r5, r6, #24
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	d501      	bpl.n	8017fb4 <_printf_i+0x1cc>
 8017fb0:	6018      	str	r0, [r3, #0]
 8017fb2:	e002      	b.n	8017fba <_printf_i+0x1d2>
 8017fb4:	0671      	lsls	r1, r6, #25
 8017fb6:	d5fb      	bpl.n	8017fb0 <_printf_i+0x1c8>
 8017fb8:	8018      	strh	r0, [r3, #0]
 8017fba:	2300      	movs	r3, #0
 8017fbc:	6123      	str	r3, [r4, #16]
 8017fbe:	4616      	mov	r6, r2
 8017fc0:	e7ba      	b.n	8017f38 <_printf_i+0x150>
 8017fc2:	680b      	ldr	r3, [r1, #0]
 8017fc4:	1d1a      	adds	r2, r3, #4
 8017fc6:	600a      	str	r2, [r1, #0]
 8017fc8:	681e      	ldr	r6, [r3, #0]
 8017fca:	6862      	ldr	r2, [r4, #4]
 8017fcc:	2100      	movs	r1, #0
 8017fce:	4630      	mov	r0, r6
 8017fd0:	f7e8 f91e 	bl	8000210 <memchr>
 8017fd4:	b108      	cbz	r0, 8017fda <_printf_i+0x1f2>
 8017fd6:	1b80      	subs	r0, r0, r6
 8017fd8:	6060      	str	r0, [r4, #4]
 8017fda:	6863      	ldr	r3, [r4, #4]
 8017fdc:	6123      	str	r3, [r4, #16]
 8017fde:	2300      	movs	r3, #0
 8017fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017fe4:	e7a8      	b.n	8017f38 <_printf_i+0x150>
 8017fe6:	6923      	ldr	r3, [r4, #16]
 8017fe8:	4632      	mov	r2, r6
 8017fea:	4649      	mov	r1, r9
 8017fec:	4640      	mov	r0, r8
 8017fee:	47d0      	blx	sl
 8017ff0:	3001      	adds	r0, #1
 8017ff2:	d0ab      	beq.n	8017f4c <_printf_i+0x164>
 8017ff4:	6823      	ldr	r3, [r4, #0]
 8017ff6:	079b      	lsls	r3, r3, #30
 8017ff8:	d413      	bmi.n	8018022 <_printf_i+0x23a>
 8017ffa:	68e0      	ldr	r0, [r4, #12]
 8017ffc:	9b03      	ldr	r3, [sp, #12]
 8017ffe:	4298      	cmp	r0, r3
 8018000:	bfb8      	it	lt
 8018002:	4618      	movlt	r0, r3
 8018004:	e7a4      	b.n	8017f50 <_printf_i+0x168>
 8018006:	2301      	movs	r3, #1
 8018008:	4632      	mov	r2, r6
 801800a:	4649      	mov	r1, r9
 801800c:	4640      	mov	r0, r8
 801800e:	47d0      	blx	sl
 8018010:	3001      	adds	r0, #1
 8018012:	d09b      	beq.n	8017f4c <_printf_i+0x164>
 8018014:	3501      	adds	r5, #1
 8018016:	68e3      	ldr	r3, [r4, #12]
 8018018:	9903      	ldr	r1, [sp, #12]
 801801a:	1a5b      	subs	r3, r3, r1
 801801c:	42ab      	cmp	r3, r5
 801801e:	dcf2      	bgt.n	8018006 <_printf_i+0x21e>
 8018020:	e7eb      	b.n	8017ffa <_printf_i+0x212>
 8018022:	2500      	movs	r5, #0
 8018024:	f104 0619 	add.w	r6, r4, #25
 8018028:	e7f5      	b.n	8018016 <_printf_i+0x22e>
 801802a:	bf00      	nop
 801802c:	08022c4d 	.word	0x08022c4d
 8018030:	08022c5e 	.word	0x08022c5e
 8018034:	00000000 	.word	0x00000000

08018038 <nan>:
 8018038:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018040 <nan+0x8>
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop
 8018040:	00000000 	.word	0x00000000
 8018044:	7ff80000 	.word	0x7ff80000

08018048 <_sbrk_r>:
 8018048:	b538      	push	{r3, r4, r5, lr}
 801804a:	4d06      	ldr	r5, [pc, #24]	; (8018064 <_sbrk_r+0x1c>)
 801804c:	2300      	movs	r3, #0
 801804e:	4604      	mov	r4, r0
 8018050:	4608      	mov	r0, r1
 8018052:	602b      	str	r3, [r5, #0]
 8018054:	f7e9 f9c2 	bl	80013dc <_sbrk>
 8018058:	1c43      	adds	r3, r0, #1
 801805a:	d102      	bne.n	8018062 <_sbrk_r+0x1a>
 801805c:	682b      	ldr	r3, [r5, #0]
 801805e:	b103      	cbz	r3, 8018062 <_sbrk_r+0x1a>
 8018060:	6023      	str	r3, [r4, #0]
 8018062:	bd38      	pop	{r3, r4, r5, pc}
 8018064:	20008938 	.word	0x20008938

08018068 <nanf>:
 8018068:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8018070 <nanf+0x8>
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop
 8018070:	7fc00000 	.word	0x7fc00000

08018074 <__sread>:
 8018074:	b510      	push	{r4, lr}
 8018076:	460c      	mov	r4, r1
 8018078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801807c:	f000 f936 	bl	80182ec <_read_r>
 8018080:	2800      	cmp	r0, #0
 8018082:	bfab      	itete	ge
 8018084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018086:	89a3      	ldrhlt	r3, [r4, #12]
 8018088:	181b      	addge	r3, r3, r0
 801808a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801808e:	bfac      	ite	ge
 8018090:	6563      	strge	r3, [r4, #84]	; 0x54
 8018092:	81a3      	strhlt	r3, [r4, #12]
 8018094:	bd10      	pop	{r4, pc}

08018096 <__swrite>:
 8018096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801809a:	461f      	mov	r7, r3
 801809c:	898b      	ldrh	r3, [r1, #12]
 801809e:	05db      	lsls	r3, r3, #23
 80180a0:	4605      	mov	r5, r0
 80180a2:	460c      	mov	r4, r1
 80180a4:	4616      	mov	r6, r2
 80180a6:	d505      	bpl.n	80180b4 <__swrite+0x1e>
 80180a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180ac:	2302      	movs	r3, #2
 80180ae:	2200      	movs	r2, #0
 80180b0:	f000 f8b6 	bl	8018220 <_lseek_r>
 80180b4:	89a3      	ldrh	r3, [r4, #12]
 80180b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80180ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80180be:	81a3      	strh	r3, [r4, #12]
 80180c0:	4632      	mov	r2, r6
 80180c2:	463b      	mov	r3, r7
 80180c4:	4628      	mov	r0, r5
 80180c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80180ca:	f000 b835 	b.w	8018138 <_write_r>

080180ce <__sseek>:
 80180ce:	b510      	push	{r4, lr}
 80180d0:	460c      	mov	r4, r1
 80180d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180d6:	f000 f8a3 	bl	8018220 <_lseek_r>
 80180da:	1c43      	adds	r3, r0, #1
 80180dc:	89a3      	ldrh	r3, [r4, #12]
 80180de:	bf15      	itete	ne
 80180e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80180e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80180e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80180ea:	81a3      	strheq	r3, [r4, #12]
 80180ec:	bf18      	it	ne
 80180ee:	81a3      	strhne	r3, [r4, #12]
 80180f0:	bd10      	pop	{r4, pc}

080180f2 <__sclose>:
 80180f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80180f6:	f000 b84f 	b.w	8018198 <_close_r>

080180fa <strncmp>:
 80180fa:	b510      	push	{r4, lr}
 80180fc:	b16a      	cbz	r2, 801811a <strncmp+0x20>
 80180fe:	3901      	subs	r1, #1
 8018100:	1884      	adds	r4, r0, r2
 8018102:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018106:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801810a:	4293      	cmp	r3, r2
 801810c:	d103      	bne.n	8018116 <strncmp+0x1c>
 801810e:	42a0      	cmp	r0, r4
 8018110:	d001      	beq.n	8018116 <strncmp+0x1c>
 8018112:	2b00      	cmp	r3, #0
 8018114:	d1f5      	bne.n	8018102 <strncmp+0x8>
 8018116:	1a98      	subs	r0, r3, r2
 8018118:	bd10      	pop	{r4, pc}
 801811a:	4610      	mov	r0, r2
 801811c:	e7fc      	b.n	8018118 <strncmp+0x1e>

0801811e <__ascii_wctomb>:
 801811e:	b149      	cbz	r1, 8018134 <__ascii_wctomb+0x16>
 8018120:	2aff      	cmp	r2, #255	; 0xff
 8018122:	bf85      	ittet	hi
 8018124:	238a      	movhi	r3, #138	; 0x8a
 8018126:	6003      	strhi	r3, [r0, #0]
 8018128:	700a      	strbls	r2, [r1, #0]
 801812a:	f04f 30ff 	movhi.w	r0, #4294967295
 801812e:	bf98      	it	ls
 8018130:	2001      	movls	r0, #1
 8018132:	4770      	bx	lr
 8018134:	4608      	mov	r0, r1
 8018136:	4770      	bx	lr

08018138 <_write_r>:
 8018138:	b538      	push	{r3, r4, r5, lr}
 801813a:	4d07      	ldr	r5, [pc, #28]	; (8018158 <_write_r+0x20>)
 801813c:	4604      	mov	r4, r0
 801813e:	4608      	mov	r0, r1
 8018140:	4611      	mov	r1, r2
 8018142:	2200      	movs	r2, #0
 8018144:	602a      	str	r2, [r5, #0]
 8018146:	461a      	mov	r2, r3
 8018148:	f7e9 f8f7 	bl	800133a <_write>
 801814c:	1c43      	adds	r3, r0, #1
 801814e:	d102      	bne.n	8018156 <_write_r+0x1e>
 8018150:	682b      	ldr	r3, [r5, #0]
 8018152:	b103      	cbz	r3, 8018156 <_write_r+0x1e>
 8018154:	6023      	str	r3, [r4, #0]
 8018156:	bd38      	pop	{r3, r4, r5, pc}
 8018158:	20008938 	.word	0x20008938

0801815c <__assert_func>:
 801815c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801815e:	4614      	mov	r4, r2
 8018160:	461a      	mov	r2, r3
 8018162:	4b09      	ldr	r3, [pc, #36]	; (8018188 <__assert_func+0x2c>)
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	4605      	mov	r5, r0
 8018168:	68d8      	ldr	r0, [r3, #12]
 801816a:	b14c      	cbz	r4, 8018180 <__assert_func+0x24>
 801816c:	4b07      	ldr	r3, [pc, #28]	; (801818c <__assert_func+0x30>)
 801816e:	9100      	str	r1, [sp, #0]
 8018170:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018174:	4906      	ldr	r1, [pc, #24]	; (8018190 <__assert_func+0x34>)
 8018176:	462b      	mov	r3, r5
 8018178:	f000 f81e 	bl	80181b8 <fiprintf>
 801817c:	f000 f8c8 	bl	8018310 <abort>
 8018180:	4b04      	ldr	r3, [pc, #16]	; (8018194 <__assert_func+0x38>)
 8018182:	461c      	mov	r4, r3
 8018184:	e7f3      	b.n	801816e <__assert_func+0x12>
 8018186:	bf00      	nop
 8018188:	20000370 	.word	0x20000370
 801818c:	08022c6f 	.word	0x08022c6f
 8018190:	08022c7c 	.word	0x08022c7c
 8018194:	08022caa 	.word	0x08022caa

08018198 <_close_r>:
 8018198:	b538      	push	{r3, r4, r5, lr}
 801819a:	4d06      	ldr	r5, [pc, #24]	; (80181b4 <_close_r+0x1c>)
 801819c:	2300      	movs	r3, #0
 801819e:	4604      	mov	r4, r0
 80181a0:	4608      	mov	r0, r1
 80181a2:	602b      	str	r3, [r5, #0]
 80181a4:	f7e9 f8e5 	bl	8001372 <_close>
 80181a8:	1c43      	adds	r3, r0, #1
 80181aa:	d102      	bne.n	80181b2 <_close_r+0x1a>
 80181ac:	682b      	ldr	r3, [r5, #0]
 80181ae:	b103      	cbz	r3, 80181b2 <_close_r+0x1a>
 80181b0:	6023      	str	r3, [r4, #0]
 80181b2:	bd38      	pop	{r3, r4, r5, pc}
 80181b4:	20008938 	.word	0x20008938

080181b8 <fiprintf>:
 80181b8:	b40e      	push	{r1, r2, r3}
 80181ba:	b503      	push	{r0, r1, lr}
 80181bc:	4601      	mov	r1, r0
 80181be:	ab03      	add	r3, sp, #12
 80181c0:	4805      	ldr	r0, [pc, #20]	; (80181d8 <fiprintf+0x20>)
 80181c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80181c6:	6800      	ldr	r0, [r0, #0]
 80181c8:	9301      	str	r3, [sp, #4]
 80181ca:	f7ff fc6f 	bl	8017aac <_vfiprintf_r>
 80181ce:	b002      	add	sp, #8
 80181d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80181d4:	b003      	add	sp, #12
 80181d6:	4770      	bx	lr
 80181d8:	20000370 	.word	0x20000370

080181dc <_fstat_r>:
 80181dc:	b538      	push	{r3, r4, r5, lr}
 80181de:	4d07      	ldr	r5, [pc, #28]	; (80181fc <_fstat_r+0x20>)
 80181e0:	2300      	movs	r3, #0
 80181e2:	4604      	mov	r4, r0
 80181e4:	4608      	mov	r0, r1
 80181e6:	4611      	mov	r1, r2
 80181e8:	602b      	str	r3, [r5, #0]
 80181ea:	f7e9 f8ce 	bl	800138a <_fstat>
 80181ee:	1c43      	adds	r3, r0, #1
 80181f0:	d102      	bne.n	80181f8 <_fstat_r+0x1c>
 80181f2:	682b      	ldr	r3, [r5, #0]
 80181f4:	b103      	cbz	r3, 80181f8 <_fstat_r+0x1c>
 80181f6:	6023      	str	r3, [r4, #0]
 80181f8:	bd38      	pop	{r3, r4, r5, pc}
 80181fa:	bf00      	nop
 80181fc:	20008938 	.word	0x20008938

08018200 <_isatty_r>:
 8018200:	b538      	push	{r3, r4, r5, lr}
 8018202:	4d06      	ldr	r5, [pc, #24]	; (801821c <_isatty_r+0x1c>)
 8018204:	2300      	movs	r3, #0
 8018206:	4604      	mov	r4, r0
 8018208:	4608      	mov	r0, r1
 801820a:	602b      	str	r3, [r5, #0]
 801820c:	f7e9 f8cd 	bl	80013aa <_isatty>
 8018210:	1c43      	adds	r3, r0, #1
 8018212:	d102      	bne.n	801821a <_isatty_r+0x1a>
 8018214:	682b      	ldr	r3, [r5, #0]
 8018216:	b103      	cbz	r3, 801821a <_isatty_r+0x1a>
 8018218:	6023      	str	r3, [r4, #0]
 801821a:	bd38      	pop	{r3, r4, r5, pc}
 801821c:	20008938 	.word	0x20008938

08018220 <_lseek_r>:
 8018220:	b538      	push	{r3, r4, r5, lr}
 8018222:	4d07      	ldr	r5, [pc, #28]	; (8018240 <_lseek_r+0x20>)
 8018224:	4604      	mov	r4, r0
 8018226:	4608      	mov	r0, r1
 8018228:	4611      	mov	r1, r2
 801822a:	2200      	movs	r2, #0
 801822c:	602a      	str	r2, [r5, #0]
 801822e:	461a      	mov	r2, r3
 8018230:	f7e9 f8c6 	bl	80013c0 <_lseek>
 8018234:	1c43      	adds	r3, r0, #1
 8018236:	d102      	bne.n	801823e <_lseek_r+0x1e>
 8018238:	682b      	ldr	r3, [r5, #0]
 801823a:	b103      	cbz	r3, 801823e <_lseek_r+0x1e>
 801823c:	6023      	str	r3, [r4, #0]
 801823e:	bd38      	pop	{r3, r4, r5, pc}
 8018240:	20008938 	.word	0x20008938

08018244 <malloc>:
 8018244:	4b02      	ldr	r3, [pc, #8]	; (8018250 <malloc+0xc>)
 8018246:	4601      	mov	r1, r0
 8018248:	6818      	ldr	r0, [r3, #0]
 801824a:	f7ff ba4f 	b.w	80176ec <_malloc_r>
 801824e:	bf00      	nop
 8018250:	20000370 	.word	0x20000370

08018254 <memmove>:
 8018254:	4288      	cmp	r0, r1
 8018256:	b510      	push	{r4, lr}
 8018258:	eb01 0402 	add.w	r4, r1, r2
 801825c:	d902      	bls.n	8018264 <memmove+0x10>
 801825e:	4284      	cmp	r4, r0
 8018260:	4623      	mov	r3, r4
 8018262:	d807      	bhi.n	8018274 <memmove+0x20>
 8018264:	1e43      	subs	r3, r0, #1
 8018266:	42a1      	cmp	r1, r4
 8018268:	d008      	beq.n	801827c <memmove+0x28>
 801826a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801826e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018272:	e7f8      	b.n	8018266 <memmove+0x12>
 8018274:	4402      	add	r2, r0
 8018276:	4601      	mov	r1, r0
 8018278:	428a      	cmp	r2, r1
 801827a:	d100      	bne.n	801827e <memmove+0x2a>
 801827c:	bd10      	pop	{r4, pc}
 801827e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018282:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018286:	e7f7      	b.n	8018278 <memmove+0x24>

08018288 <__malloc_lock>:
 8018288:	4801      	ldr	r0, [pc, #4]	; (8018290 <__malloc_lock+0x8>)
 801828a:	f7fe bc9c 	b.w	8016bc6 <__retarget_lock_acquire_recursive>
 801828e:	bf00      	nop
 8018290:	20008930 	.word	0x20008930

08018294 <__malloc_unlock>:
 8018294:	4801      	ldr	r0, [pc, #4]	; (801829c <__malloc_unlock+0x8>)
 8018296:	f7fe bc97 	b.w	8016bc8 <__retarget_lock_release_recursive>
 801829a:	bf00      	nop
 801829c:	20008930 	.word	0x20008930

080182a0 <_realloc_r>:
 80182a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182a2:	4607      	mov	r7, r0
 80182a4:	4614      	mov	r4, r2
 80182a6:	460e      	mov	r6, r1
 80182a8:	b921      	cbnz	r1, 80182b4 <_realloc_r+0x14>
 80182aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80182ae:	4611      	mov	r1, r2
 80182b0:	f7ff ba1c 	b.w	80176ec <_malloc_r>
 80182b4:	b922      	cbnz	r2, 80182c0 <_realloc_r+0x20>
 80182b6:	f7ff f9c9 	bl	801764c <_free_r>
 80182ba:	4625      	mov	r5, r4
 80182bc:	4628      	mov	r0, r5
 80182be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80182c0:	f000 f82d 	bl	801831e <_malloc_usable_size_r>
 80182c4:	42a0      	cmp	r0, r4
 80182c6:	d20f      	bcs.n	80182e8 <_realloc_r+0x48>
 80182c8:	4621      	mov	r1, r4
 80182ca:	4638      	mov	r0, r7
 80182cc:	f7ff fa0e 	bl	80176ec <_malloc_r>
 80182d0:	4605      	mov	r5, r0
 80182d2:	2800      	cmp	r0, #0
 80182d4:	d0f2      	beq.n	80182bc <_realloc_r+0x1c>
 80182d6:	4631      	mov	r1, r6
 80182d8:	4622      	mov	r2, r4
 80182da:	f7fc fea1 	bl	8015020 <memcpy>
 80182de:	4631      	mov	r1, r6
 80182e0:	4638      	mov	r0, r7
 80182e2:	f7ff f9b3 	bl	801764c <_free_r>
 80182e6:	e7e9      	b.n	80182bc <_realloc_r+0x1c>
 80182e8:	4635      	mov	r5, r6
 80182ea:	e7e7      	b.n	80182bc <_realloc_r+0x1c>

080182ec <_read_r>:
 80182ec:	b538      	push	{r3, r4, r5, lr}
 80182ee:	4d07      	ldr	r5, [pc, #28]	; (801830c <_read_r+0x20>)
 80182f0:	4604      	mov	r4, r0
 80182f2:	4608      	mov	r0, r1
 80182f4:	4611      	mov	r1, r2
 80182f6:	2200      	movs	r2, #0
 80182f8:	602a      	str	r2, [r5, #0]
 80182fa:	461a      	mov	r2, r3
 80182fc:	f7e9 f800 	bl	8001300 <_read>
 8018300:	1c43      	adds	r3, r0, #1
 8018302:	d102      	bne.n	801830a <_read_r+0x1e>
 8018304:	682b      	ldr	r3, [r5, #0]
 8018306:	b103      	cbz	r3, 801830a <_read_r+0x1e>
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	bd38      	pop	{r3, r4, r5, pc}
 801830c:	20008938 	.word	0x20008938

08018310 <abort>:
 8018310:	b508      	push	{r3, lr}
 8018312:	2006      	movs	r0, #6
 8018314:	f000 f834 	bl	8018380 <raise>
 8018318:	2001      	movs	r0, #1
 801831a:	f7e8 ffe7 	bl	80012ec <_exit>

0801831e <_malloc_usable_size_r>:
 801831e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018322:	1f18      	subs	r0, r3, #4
 8018324:	2b00      	cmp	r3, #0
 8018326:	bfbc      	itt	lt
 8018328:	580b      	ldrlt	r3, [r1, r0]
 801832a:	18c0      	addlt	r0, r0, r3
 801832c:	4770      	bx	lr

0801832e <_raise_r>:
 801832e:	291f      	cmp	r1, #31
 8018330:	b538      	push	{r3, r4, r5, lr}
 8018332:	4604      	mov	r4, r0
 8018334:	460d      	mov	r5, r1
 8018336:	d904      	bls.n	8018342 <_raise_r+0x14>
 8018338:	2316      	movs	r3, #22
 801833a:	6003      	str	r3, [r0, #0]
 801833c:	f04f 30ff 	mov.w	r0, #4294967295
 8018340:	bd38      	pop	{r3, r4, r5, pc}
 8018342:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018344:	b112      	cbz	r2, 801834c <_raise_r+0x1e>
 8018346:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801834a:	b94b      	cbnz	r3, 8018360 <_raise_r+0x32>
 801834c:	4620      	mov	r0, r4
 801834e:	f000 f831 	bl	80183b4 <_getpid_r>
 8018352:	462a      	mov	r2, r5
 8018354:	4601      	mov	r1, r0
 8018356:	4620      	mov	r0, r4
 8018358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801835c:	f000 b818 	b.w	8018390 <_kill_r>
 8018360:	2b01      	cmp	r3, #1
 8018362:	d00a      	beq.n	801837a <_raise_r+0x4c>
 8018364:	1c59      	adds	r1, r3, #1
 8018366:	d103      	bne.n	8018370 <_raise_r+0x42>
 8018368:	2316      	movs	r3, #22
 801836a:	6003      	str	r3, [r0, #0]
 801836c:	2001      	movs	r0, #1
 801836e:	e7e7      	b.n	8018340 <_raise_r+0x12>
 8018370:	2400      	movs	r4, #0
 8018372:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018376:	4628      	mov	r0, r5
 8018378:	4798      	blx	r3
 801837a:	2000      	movs	r0, #0
 801837c:	e7e0      	b.n	8018340 <_raise_r+0x12>
	...

08018380 <raise>:
 8018380:	4b02      	ldr	r3, [pc, #8]	; (801838c <raise+0xc>)
 8018382:	4601      	mov	r1, r0
 8018384:	6818      	ldr	r0, [r3, #0]
 8018386:	f7ff bfd2 	b.w	801832e <_raise_r>
 801838a:	bf00      	nop
 801838c:	20000370 	.word	0x20000370

08018390 <_kill_r>:
 8018390:	b538      	push	{r3, r4, r5, lr}
 8018392:	4d07      	ldr	r5, [pc, #28]	; (80183b0 <_kill_r+0x20>)
 8018394:	2300      	movs	r3, #0
 8018396:	4604      	mov	r4, r0
 8018398:	4608      	mov	r0, r1
 801839a:	4611      	mov	r1, r2
 801839c:	602b      	str	r3, [r5, #0]
 801839e:	f7e8 ff95 	bl	80012cc <_kill>
 80183a2:	1c43      	adds	r3, r0, #1
 80183a4:	d102      	bne.n	80183ac <_kill_r+0x1c>
 80183a6:	682b      	ldr	r3, [r5, #0]
 80183a8:	b103      	cbz	r3, 80183ac <_kill_r+0x1c>
 80183aa:	6023      	str	r3, [r4, #0]
 80183ac:	bd38      	pop	{r3, r4, r5, pc}
 80183ae:	bf00      	nop
 80183b0:	20008938 	.word	0x20008938

080183b4 <_getpid_r>:
 80183b4:	f7e8 bf82 	b.w	80012bc <_getpid>

080183b8 <_init>:
 80183b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183ba:	bf00      	nop
 80183bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183be:	bc08      	pop	{r3}
 80183c0:	469e      	mov	lr, r3
 80183c2:	4770      	bx	lr

080183c4 <_fini>:
 80183c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80183c6:	bf00      	nop
 80183c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80183ca:	bc08      	pop	{r3}
 80183cc:	469e      	mov	lr, r3
 80183ce:	4770      	bx	lr
